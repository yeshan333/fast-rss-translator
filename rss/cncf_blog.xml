<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>CNCF - Blog</title>
    <link>http://rsshub.rssforever.com/cncf</link>
    <description>CNCF - Blog - Powered by RSSHub</description>
    <managingEditor>contact@rsshub.app (RSSHub)</managingEditor>
    <item>
      <title>【Getting to know the new CNCF Code of Conduct Committee】了解新的 CNCF 行为准则委员会</title>
      <link>https://www.cncf.io/blog/2024/08/07/getting-to-know-the-new-cncf-code-of-conduct-committee/</link>
      <description>【&lt;p&gt;&lt;em&gt;By the CNCF Code of Conduct Committee&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Hello CNCF community!&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Our permanent &lt;a href=&#34;https://www.cncf.io/conduct/committee/&#34;&gt;CNCF Code of Conduct Committee&lt;/a&gt; has been operating for eight months, so it’s time for us to share information about incidents we’ve handled in our community and respond to some frequently asked questions.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Our committee consists of 3 elected volunteer community members and 2 CNCF staff members (and several alternates from the community). Our committee was launched in October 2024, when we replaced the &lt;a href=&#34;https://www.cncf.io/blog/2022/06/23/cncfs-interim-cncf-code-of-conduct-committee-has-launched/&#34;&gt;Interim Code of Conduct Committee&lt;/a&gt; (see the prior blog post about the &lt;a href=&#34;https://www.cncf.io/blog/2023/09/06/cncf-launches-a-new-system-for-resolving-code-of-conduct-incidents-to-support-community-culture-and-values/&#34;&gt;new CoC structure in CNCF&lt;/a&gt;). Since then, we received 6 incident reports in the final quarter of 2023, and approximately a dozen incident reports in the first half of 2024. Most of these incidents have been resolved, but a few are currently under investigation. You can read summaries of the incidents we’ve resolved on our &lt;a href=&#34;https://www.cncf.io/conduct/transparency/&#34;&gt;transparency reports&lt;/a&gt; web page.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We have received many questions from community members about the investigative process, why investigations sometimes take longer than expected, and how we determine consequences and remedies for a violation. Our &lt;a href=&#34;https://www.cncf.io/conduct/faq/&#34;&gt;Code of Conduct FAQs&lt;/a&gt; should answer these questions, and more, and we’ll continue to update the page as we receive more inquiries.&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;】&lt;p&gt;&lt;em&gt;CNCF 行为准则委员会&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;CNCF 社区您好！ &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;我们的常设&lt;a href=&#34;https://www.cncf.io/conduct/committee/&#34;&gt;CNCF行为准则委员会&lt;/a&gt;已经运作八个月了，所以我们是时候分享信息了关于我们在社区中处理过的事件并回答一些常见问题。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;我们的委员会由 3 名当选的志愿者社区成员和 2 名 CNCF 工作人员（以及来自社区的几名候补成员）组成。我们的委员会于 2024 年 10 月成立，当时我们取代了 &lt;a href=&#34;https://www.cncf.io/blog/2022/06/23/cncfs-interim-cncf-code-of-conduct-committee-has -launched/&#34;&gt;临时行为准则委员会&lt;/a&gt;（请参阅之前关于&lt;a href=&#34;https://www.cncf.io/blog/2023/09/06/cncf-launches-a -用于解决行为准则事件以支持社区文化和价值观的新系统/&#34;&gt;CNCF 中的新 CoC 结构&lt;/a&gt;）。此后，我们在 2023 年最后一个季度收到了 6 起事件报告，在 2024 年上半年收到了大约十几起事件报告。大多数事件已得到解决，但少数事件目前正在调查中。您可以在我们的&lt;a href=&#34;https://www.cncf.io/conduct/transparency/&#34;&gt;透明度报告&lt;/a&gt;网页上阅读我们已解决的事件的摘要。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;我们收到了社区成员提出的许多问题，涉及调查过程、为什么调查有时需要比预期更长的时间，以及我们如何确定违规行为的后果和补救措施。我们的&lt;a href=&#34;https://www.cncf.io/conduct/faq/&#34;&gt;行为准则常见问题解答&lt;/a&gt;应该回答这些问题以及更多问题，我们将在收到信息后继续更新页面更多询问。&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;</description>
      <pubDate>Tue, 06 Aug 2024 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Join us as gRPConf returns this August 27!】敬请加入我们，gRPConf 将于 8 月 27 日回归！</title>
      <link>https://www.cncf.io/blog/2024/07/30/join-us-as-grpconf-returns-this-august-27/</link>
      <description>【&lt;p&gt;Attention gRPC community!&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Mark your calendars for&amp;nbsp;&lt;strong&gt;August 27th, 2024&lt;/strong&gt;, as gRPConf returns to the Google Cloud Campus in Sunnyvale, California. The&amp;nbsp;&lt;a href=&#34;https://events.linuxfoundation.org/grpconf/program/schedule&#34; rel=&#34;noreferrer noopener&#34; target=&#34;_blank&#34;&gt;schedule&lt;/a&gt;&amp;nbsp;is now live!&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This is your chance to dive deep into the world of gRPC, connect with fellow developers, and stay ahead of the curve in all things gRPC.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;m_-8122978453183480856gmail-why-attend&#34;&gt;Why Attend?&lt;a href=&#34;https://grpc.io/blog/grpconf-2024-schedule/#why-attend&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;Learn: Explore the latest gRPC advancements, best practices, and real-world use cases through a series of informative talks and workshops.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Connect: Network with a vibrant community of gRPC experts, users, and open-source contributors.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Share: Discuss your own gRPC experiences, challenges, and successes with peers who share your passion.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Innovate: Gain inspiration and discover new ways to leverage gRPC in your own projects.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://events.linuxfoundation.org/grpconf/register/&#34; rel=&#34;noreferrer noopener&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Register Now!&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Early bird registration is available until July 30th for $50. Keep an eye on the official gRPC website and social media channels for updates.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We can’t wait to see you at gRPConf 2024!&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;】&lt;p&gt;gRPC 社区注意！&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;将您的日历标记为&lt;strong&gt;2024 年 8 月 27 日&lt;/strong&gt;，因为 gRPConf 将返回加利福尼亚州桑尼维尔的 Google Cloud 园区。 &lt;a href=&#34;https://events.linuxfoundation.org/grpconf/program/schedule&#34; rel=&#34;noreferrer noopener&#34; target=&#34;_blank&#34;&gt;时间表&lt;/a&gt;现已上线！&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;这是您深入了解 gRPC 世界、与其他开发人员交流并在 gRPC 领域保持领先地位的机会。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;m_-8122978453183480856gmail-why-attend&#34;&gt;为什么参加？&lt;a href=&#34;https://grpc.io/blog/grpconf-2024-schedule/#why-参加&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;学习：通过一系列内容丰富的讲座和研讨会，探索最新的 gRPC 进步、最佳实践和实际用例。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;连接：与充满活力的 gRPC 专家、用户和开源贡献者社区建立联系。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;分享：与志同道合的同行讨论您自己的 gRPC 经验、挑战和成功。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;创新：获得灵感并发现在自己的项目中利用 gRPC 的新方法。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://events.linuxfoundation.org/grpconf/register/&#34; rel=&#34;noreferrer noopener&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;立即注册！&lt;/strong&gt;&lt;/a&gt;&lt; /p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;早鸟注册截止日期为 7 月 30 日，价格为 50 美元。密切关注 gRPC 官方网站和社交媒体渠道以获取更新。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;我们迫不及待地想在 gRPConf 2024 上见到您！&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;</description>
      <pubDate>Mon, 29 Jul 2024 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Refreshing the KCD program: a new chapter in community building】刷新 KCD 计划：社区建设的新篇章</title>
      <link>https://www.cncf.io/blog/2024/08/06/refreshing-the-kcd-program-a-new-chapter-in-community-building/</link>
      <description>【&lt;p&gt;The &lt;a href=&#34;https://www.cncf.io/kcds/&#34;&gt;Kubernetes Community Days (KCD)&lt;/a&gt; program has blossomed over the past two years thanks to the incredible efforts of our community. We at CNCF have been honored to support these events by offering valuable resources and tools, and along the way&amp;nbsp;we’ve listened to feedback from past organizers and thought hard about what we could do to make KCDs even better.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;After a lot of consideration, we’re going to roll out some exciting changes to the Kubernetes Community Days program that will offer &lt;em&gt;even more support&lt;/em&gt; to members – including financial, structural, and organizational, among others. We think these new event-hosting benefits can make KCDs more fun, more available, and more useful to local communities than ever before.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Here’s everything you need to know.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;Goals of the KCD Program&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We aim to support fun, locally-defined events that help grow and sustain Kubernetes and other Cloud Native communities. Drawing inspiration from the &lt;a href=&#34;https://devopsdays.org/&#34;&gt;DevOpsDays model,&lt;/a&gt; we strive to simplify the organizing process to ensure a high-quality experience for all attendees.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;What’s New with the Program?&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;CNCF is enhancing the KCD program with several new event-hosting benefits. We now offer monetary support, core branding, centralized tools, and regular support meetings to assist organizers.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Critical updates include limiting the number of KCDs to 30 per year to ensure balanced distribution and quality, capping registration at 500 attendees to maintain a close-knit atmosphere, requiring the use of the CNCF registration system, and incorporating the KCD-approved logo standards. These changes aim to foster deeper connections and provide a more engaging experience.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Learn more about the changes by reviewing &lt;a href=&#34;https://www.cncf.io/kcds/faq/&#34;&gt;our FAQs&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;Terms and Conditions&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;To ensure consistency and sustainability, all organizers must sign and adhere to the &lt;a href=&#34;https://www.cncf.io/wp-content/uploads/2024/08/KCD-TCs-20240728-FINAL.pdf&#34;&gt;terms and conditions&lt;/a&gt; set forth by CNCF for the KCD program. These terms outline several vital responsibilities and regulations the Community Host must follow. The Linux Foundation (LF) grants the Community Host a limited, non-exclusive, revocable license to strictly use the CNCF name and logo to promote the KCD. All events must be not-for-profit, and trademarks must comply with LF’s guidelines. Additionally, Community Hosts must adhere to privacy obligations, ensuring personal data is processed lawfully and securely. The event must follow a designated Code of Conduct, maintain sufficient insurance for in-person events, and avoid conflicts with official CNCF events. Any breach of these terms may lead to the termination of the license. These conditions ensure the integrity, security, and community focus of all KCD events.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;&amp;nbsp;Request and Approval Process&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;To host a KCD, submit your proposal using the &lt;a href=&#34;https://www.cncf.io/kcds/application/&#34;&gt;application process&lt;/a&gt;. We will notify you of your application’s status via email the week of September 22. If your KCD is not selected or you miss the deadline, there will be opportunities to apply for the following year. We encourage collaboration with neighboring KCDs and maintain engagement through local meetups.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;One technology, many communities&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We know “change” isn’t anyone’s favorite thing. But we truly believe that by adding financial and structural support to KCDs around the globe, we can continue to bring the cloud native community closer on a regional scale. And, we’ll keep listening to feedback from the community and making necessary improvements to ensure the program remains community-focused. We can’t wait to see what the next year of KCDs brings to the community!&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;】&lt;p&gt;得益于我们社区的巨大努力，&lt;a href=&#34;https://www.cncf.io/kcds/&#34;&gt;Kubernetes 社区日 (KCD)&lt;/a&gt; 计划在过去两年中蓬勃发展。 CNCF 很荣幸能够通过提供宝贵的资源和工具来支持这些活动，在此过程中，我们听取了过去组织者的反馈，并认真思考我们可以做些什么来使 KCD 变得更好。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;经过深思熟虑，我们将对 Kubernetes 社区日计划进行一些令人兴奋的改变，为成员提供&lt;em&gt;更多支持&lt;/em&gt; - 包括财务、结构和组织等其他的。我们认为，这些新的活动举办优势可以使 KCD 比以往任何时候都更有趣、更可用、对当地社区更有用。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;这是您需要了解的所有内容。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;KCD 计划的目标&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;我们的目标是支持有趣的、本地定义的活动，帮助发展和维持 Kubernetes 和其他云原生社区。从 &lt;a href=&#34;https://devopsdays.org/&#34;&gt;DevOpsDays 模型&lt;/a&gt;中汲取灵感，我们努力简化组织流程，以确保为所有与会者提供高质量的体验。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;该计划有什么新变化？&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;CNCF 正在通过多项新的活动主办优势来增强 KCD 计划。我们现在提供资金支持、核心品牌、集中工具和定期支持会议来协助组织者。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;关键更新包括将 KCD 的数量限制为每年 30 个，以确保平衡的分配和质量、将注册人数限制在 500 名与会者以保持紧密的氛围、要求使用 CNCF 注册系统，以及纳入 KCD 批准的标志标准。这些变化旨在促进更深层次的联系并提供更具吸引力的体验。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;查看&lt;a href=&#34;https://www.cncf.io/kcds/faq/&#34;&gt;我们的常见问题解答&lt;/a&gt;，了解有关更改的更多信息。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;条款和条件&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;为了确保一致性和可持续性，所有组织者必须签署并遵守&lt;a href=&#34;https://www.cncf.io/wp-content/uploads/2024/08/KCD-TCs-20240728-FINAL。 pdf&#34;&gt;CNCF 为 KCD 计划制定的条款和条件&lt;/a&gt;。这些条款概述了社区主持人必须遵守的几项重要责任和规定。 Linux 基金会（LF）授予社区主机有限的、非排他性的、可撤销的许可，以严格使用 CNCF 名称和徽标来推广 KCD。所有活动都必须是非营利性的，并且商标必须符合 LF 的准则。此外，社区主持人必须遵守隐私义务，确保合法、安全地处理个人数据。活动必须遵循指定的行为准则，为现场活动提供足够的保险，并避免与官方 CNCF 活动发生冲突。任何违反这些条款的行为都可能导致许可的终止。这些条件确保了所有 KCD 活动的完整性、安全性和社区焦点。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt; 请求和批准流程&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;要托管 KCD，请使用&lt;a href=&#34;https://www.cncf.io/kcds/application/&#34;&gt;申请流程&lt;/a&gt;提交您的提案。我们将在 9 月 22 日这一周通过电子邮件通知您申请的状态。如果您的 KCD 未被选中或您错过了截止日期，还有机会申请下一年的申请。我们鼓励与邻近的 KCD 合作，并通过当地聚会保持参与。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;一项技术，多个社区&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;我们知道“改变”不是任何人最喜欢的事情。但我们坚信，通过为全球 KCD 提供财务和结构支持，我们可以继续在区域范围内拉近云原生社区的距离。而且，我们将继续听取社区的反馈并进行必要的改进，以确保该计划仍然以社区为中心。我们迫不及待地想看看明年的 KCD 会给社区带来什么！&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;</description>
      <pubDate>Mon, 05 Aug 2024 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Score accepted as a CNCF Sandbox Project】Score 被接受为 CNCF 沙箱项目</title>
      <link>https://www.cncf.io/blog/2024/08/08/score-accepted-as-a-cncf-sandbox-project/</link>
      <description>【&lt;p&gt;&lt;em&gt;Member post originally published on the Humanitec blog by Luca Galante&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The team at Humanitec is thrilled to announce that&amp;nbsp;&lt;a href=&#34;https://score.dev/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Score&lt;/a&gt;&amp;nbsp;has officially been accepted as a&amp;nbsp;&lt;a href=&#34;https://github.com/cncf/sandbox/issues/79&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Sandbox project by the Cloud Native Computing Foundation (CNCF)&amp;nbsp;&lt;/a&gt;as of July 8, 2024.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;a href=&#34;https://cdn.prod.website-files.com/64462c9aa967772377e53b6e/669a83fbe2c51f37441e917b_AD_4nXc3Yv4nfnNpJ5p3QvRdHHrirgTZo4w7rRTV_cSVIzTnaIi45v9h_Crpuw38CBiT9_DKMxAL_9Dw2ZKkhrXdnbQjWomaPr1cMyP-fUH-bvJOVVK_KpOy2yY-md_RvXtAdFawhVD6pOJiF0zW8M8J2cwuKXg.png&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://cdn.prod.website-files.com/64462c9aa967772377e53b6e/669a83fbe2c51f37441e917b_AD_4nXc3Yv4nfnNpJ5p3QvRdHHrirgTZo4w7rRTV_cSVIzTnaIi45v9h_Crpuw38CBiT9_DKMxAL_9Dw2ZKkhrXdnbQjWomaPr1cMyP-fUH-bvJOVVK_KpOy2yY-md_RvXtAdFawhVD6pOJiF0zW8M8J2cwuKXg.png&#34; alt=&#34;landscape&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;/a&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;&lt;a href=&#34;https://www.cncf.io/projects/score/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Source&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This is a huge milestone for Humanitec and the Score community and is a testament to all efforts to enhance developer experience and the effectiveness of Internal Developer Platforms through a platform-agnostic workload specification.&amp;nbsp;&lt;a href=&#34;https://github.com/score-spec&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Score has grown so much since its launch on&amp;nbsp;&lt;/a&gt;GitHub just a short 18 months ago.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;Celebrating our community&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;First and foremost, we want to extend a massive thank you to everyone who has supported the Score project on its journey. The incredible Score community, with your continuous contributions and feedback, has been instrumental in reaching this point. Without your dedication, Score wouldn’t be where it is today.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We also want to thank everyone from the CNCF involved in this process, especially the&amp;nbsp;&lt;a href=&#34;https://www.cncf.io/people/technical-oversight-committee/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Technical Oversight Committee (TOC)&lt;/a&gt;&amp;nbsp;members for their guidance, and the&amp;nbsp;&lt;a href=&#34;https://tag-app-delivery.cncf.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;TAG App Delivery team&lt;/a&gt;&amp;nbsp;for allowing us to present and&amp;nbsp;&lt;a href=&#34;https://github.com/cncf/sandbox/issues/79#issuecomment-1969011565&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;discuss Score with the CNCF community&lt;/a&gt;. We also need to give a very special shoutout to everyone who contributed, especially Score product manager&amp;nbsp;&lt;a href=&#34;https://www.linkedin.com/in/susatuenker/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Susa Tünker,&lt;/a&gt;&amp;nbsp;Humanitec’s CTO&amp;nbsp;&lt;a href=&#34;https://www.linkedin.com/in/chris-stephenson-99ba3628/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Chris Stephenson,&lt;/a&gt;&amp;nbsp;&lt;a href=&#34;https://www.linkedin.com/in/ben-meier-b76224129/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Ben Meier,&lt;/a&gt;&amp;nbsp;&lt;a href=&#34;https://www.linkedin.com/in/mathieubenoitqc/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Mathieu Benoit&lt;/a&gt;,&amp;nbsp;&lt;a href=&#34;https://www.linkedin.com/in/tobiasbabin/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Tobias Babin&lt;/a&gt;&amp;nbsp;(documentation), and many more.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The acceptance into the CNCF Sandbox couldn’t have arrived better. Score recently rolled out two new reference implementations for Docker Compose and Kubernetes, offering user-friendly and scalable solutions to get started with Score. This momentum provides a great baseline for us to engage with the CNCF community and further drive the development and adoption of Score.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;Check available implementations:&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/score-spec/score-k8s&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;strong&gt;score-k8s&lt;/strong&gt;&lt;/a&gt;&amp;nbsp;is an implementation of the Score Workload specification for Kubernetes and converts input Score files into a YAML file containing Kubernetes manifests that can be packaged or installed through kubectl apply.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/score-spec/score-compose&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;strong&gt;score-compose&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;is a reference implementation of the&amp;nbsp;&lt;a href=&#34;https://github.com/score-spec/spec&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Score specification&lt;/a&gt;&amp;nbsp;for&amp;nbsp;&lt;a href=&#34;https://docs.docker.com/compose/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Docker compose&lt;/a&gt;, primarily used for local development. It supports most aspects of the Score specification and provides a powerful resource provisioning system for supplying and customizing the dynamic configuration of attached services such as databases, queues, storage, and other network or storage APIs.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;a href=&#34;https://developer.humanitec.com/platform-orchestrator/reference/cli-references/#score-integration&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;strong&gt;humctl&lt;/strong&gt;&lt;/a&gt;&amp;nbsp;is Humanitec’s CLI supporting Score natively. It offers a range of features for working with Score files, making it a suitable approach for teams that already work with humctl.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;You can explore these implementations on our&lt;a href=&#34;https://humanitec.com/marketplace#score-implementations&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&amp;nbsp;marketplace&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;Looking ahead&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As we look to the future, we are excited about the continued impact we can make within the wider community. Score’s developer-centric and workload-oriented approach to cloud-native development gives us a great opportunity to contribute to ongoing work around platform engineering best practices and industry standards, especially in the ongoing battle against DevOps burnout and cognitive load.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We are also excited about the potential to integrate and collaborate with other platforms and tools within the CNCF landscape. If you’re interested in working on an implementation for Score, we’d love to hear from you!&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For more information about Score and our participation in the CNCF, please visit&lt;a href=&#34;https://github.com/cncf/score&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&amp;nbsp;Score on GitHub&lt;/a&gt;&amp;nbsp;and&amp;nbsp;&lt;a href=&#34;https://communityinviter.com/apps/cloud-native/cncf&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;join the #score channel on the CNCF Slack&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Thank you for being a part of our journey!&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;】&lt;p&gt;&lt;em&gt;成员帖子最初由 Luca Galante 在 Humanitec 博客上发布&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Humanitec 团队很高兴地宣布，&lt;a href=&#34;https://score.dev/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;分数&lt;/a&gt;已被正式接受为&lt; a href=&#34;https://github.com/cncf/sandbox/issues/79&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;云原生计算基金会 (CNCF) 的沙盒项目&lt;/a&gt;截至 7 月2024 年 8 月。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;a href=&#34;https://cdn.prod.website-files.com/64462c9aa967772377e53b6e/669a83fbe2c51f37441e917b_AD_4nXc3Yv4nfnNpJ5p3QvRdHHrirgTZo4w7rRTV_cSVIz TnaIi45v9h_Crpuw38CBiT9_DKMxAL_9Dw2ZKkhrXdnbQjWomaPr1cMyP-fUH-bvJOVVK_KpOy2yY-md_RvXtAdFawhVD6pOJiF0zW8M8J2cwuKXg.png&#34;&gt;&lt;img 解码=&#34;异步“ src =“https://cdn.prod.website-files.com/64462c9aa967772377e53b6e/669a83fbe2c51f37441e917b_AD_4nXc3Yv4nfnNpJ5p3QvRdHHrirgTZo4w7rRTV_cSVIzTnaIi45v9h_ Crpuw38CBiT9_DKMxAL_9Dw2ZKkhrXdnbQjWomaPr1cMyP-fUH-bvJOVVK_KpOy2yY-md_RvXtAdFawhVD6pOJiF0zW8M8J2cwuKXg.png&#34; alt=&#34;横向&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;/a&gt;&lt;figcaption 类=&#34;wp-element-caption&#34;&gt;&lt;a href=&#34;https://www.cncf.io/projects/score/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;来源&lt;/a&gt;&lt;/figcaption&gt; &lt;/图&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;这对于 Humanitec 和 Score 社区来说是一个巨大的里程碑，也证明了通过与平台无关的工作负载规范来增强开发人员体验和内部开发人员平台有效性的所有努力。 &lt;a href=&#34;https://github.com/score-spec&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;自 18 个月前在 GitHub 上发布以来，Score 增长如此之快。&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;庆祝我们的社区&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;首先，我们要向所有支持 Score 项目的人表示衷心的感谢。令人难以置信的 Score 社区以及您不断的贡献和反馈为实现这一目标发挥了重要作用。没有你们的奉献，Score 就不会取得今天的成就。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;我们还要感谢 CNCF 参与此过程的所有人，尤其是 &lt;a href=&#34;https://www.cncf.io/people/technical-oversight-committee/&#34; target=&#34;_blank&#34; rel= &#34;noreferrer noopener&#34;&gt;技术监督委员会 (TOC)&lt;/a&gt; 成员的指导，以及 &lt;a href=&#34;https://tag-app-delivery.cncf.io/&#34; target=&#34;_blank&#34; rel=&#34; noreferrer noopener&#34;&gt;TAG 应用交付团队&lt;/a&gt;允许我们展示和&lt;a href=&#34;https://github.com/cncf/sandbox/issues/79#issuecomment-1969011565&#34; target=&#34;_blank&#34; rel= &#34;noreferrer noopener&#34;&gt;与 CNCF 社区讨论分数&lt;/a&gt;。我们还需要特别感谢所有做出贡献的人，尤其是 Score 产品经理 &lt;a href=&#34;https://www.linkedin.com/in/susatuenker/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt; Susa Tünker，&lt;/a&gt; Humanitec 首席技术官 &lt;a href=&#34;https://www.linkedin.com/in/chris-stephenson-99ba3628/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;克里斯·斯蒂芬森，&lt;/a&gt; &lt;a href=&#34;https://www.linkedin.com/in/ben-meier-b76224129/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;本·梅尔， &lt;/a&gt; &lt;a href=&#34;https://www.linkedin.com/in/mathieubenoitqc/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;马蒂厄·伯努瓦&lt;/a&gt;，&lt;a href=&#34;https: //www.linkedin.com/in/tobiasbabin/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Tobias Babin&lt;/a&gt;（文档），等等。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;CNCF 沙盒的接受度再好不过了。 Score 最近推出了两个适用于 Docker Compose 和 Kubernetes 的新参考实现，提供用户友好且可扩展的解决方案来开始使用 Score。这种势头为我们与 CNCF 社区互动并进一步推动 Score 的开发和采用提供了良好的基础。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;检查可用的实现：&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/score-spec/score-k8s&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;strong&gt;score-k8s&lt;/strong&gt;&lt;/a&gt;是 Kubernetes Score Workload 规范的实现，它将输入 Score 文件转换为包含 Kubernetes 清单的 YAML 文件，可以通过 kubectl apply 打包或安装。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/score-spec/score-compose&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;strong&gt;分数撰写&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;&lt;/strong&gt;是&lt;a href=&#34;https://github.com/score-spec/spec&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;分数规范&lt;/a&gt;的参考实现for &lt;a href=&#34;https://docs.docker.com/compose/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Docker compose&lt;/a&gt;，主要用于本地开发。它支持 Score 规范的大部分方面，并提供强大的资源配置系统，用于提供和自定义附加服务的动态配置，例如数据库、队列、存储以及其他网络或存储 API。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;a href=&#34;https://developer. humanitec.com/platform-orchestrator/reference/cli-references/#score-integration&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;strong&gt;humctl&lt; /strong&gt;&lt;/a&gt; 是 Humanitec 的 CLI，原生支持 Score。它提供了一系列用于处理 Score 文件的功能，使其成为已经使用 humctl 的团队的合适方法。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;您可以在我们的&lt;a href=&#34;https:// humanitec.com/marketplace#score-implementations&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;市场&lt;/a&gt;上探索这些实现。&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;展望未来&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;展望未来，我们对能够在更广泛的社区中产生持续影响感到兴奋。 Score 以开发人员为中心、以工作负载为导向的云原生开发方法为我们提供了一个绝佳的机会，可以为围绕平台工程最佳实践和行业标准的持续工作做出贡献，特别是在对抗 DevOps 倦怠的持续斗争中和认知负荷。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;我们还对与 CNCF 领域内其他平台和工具集成和协作的潜力感到兴奋。如果您有兴趣实施 Score，我们很乐意听取您的意见！ &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;有关 Score 以及我们参与 CNCF 的更多信息，请访问&lt;a href=&#34;https://github.com/cncf/score&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt; GitHub 上的 Score&lt; /a&gt; 和 &lt;a href=&#34;https://communityinviter.com/apps/cloud-native/cncf&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;加入 CNCF Slack 上的 #score 频道&lt;/a&gt; .&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;感谢您参与我们的旅程！&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;</description>
      <pubDate>Wed, 07 Aug 2024 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Applying the DRY principle to Kyverno policies】将 DRY 原则应用于 Kyverno 政策</title>
      <link>https://www.cncf.io/blog/2024/07/31/applying-the-dry-principle-to-kyverno-policies/</link>
      <description>【&lt;p&gt;&lt;em&gt;Member post originally published on the &lt;a href=&#34;https://nirmata.com/2024/07/19/applying-the-dry-principle-to-kyverno-policies/&#34;&gt;Nirmata Blog &lt;/a&gt;by Jim Bugwadia&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The&amp;nbsp;&lt;a href=&#34;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34;&gt;Don’t Repeat Yourself (DRY) principle&lt;/a&gt;&amp;nbsp;of software development advocates avoiding repetition of code that is likely to change. Replacing similar code with reusable abstractions makes software easier to maintain, and avoids bugs.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In this post, I will show you a couple of ways to apply the DRY principle in Kyverno policies, which are written in YAML.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;DRY Using Variables&amp;nbsp;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Kyverno policies can declare and reuse variables. Consider this policy that mutates various container types in a Pod, to add a memory request if one is not specified. The policy rule iterates over a list of&amp;nbsp;containers,&amp;nbsp;initContainers, and&amp;nbsp;ephemeralContainers&amp;nbsp;all of which have the same structure.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Since the policy rule uses a RFC 6902 JSON Patch, the path for the patch is dependent on the type of container. An initial implementation of the policy rule duplicates the patch for each container type:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code lang=&#34;javascript&#34; class=&#34;language-javascript&#34;&gt;apiVersion: kyverno.io/v1&#xA;kind: ClusterPolicy&#xA;metadata:&#xA; name: add-resources&#xA;spec:&#xA; background: false&#xA; rules:&#xA; - name: default-memory&#xA;   match:&#xA;     any:&#xA;     - resources:&#xA;         kinds:&#xA;         - Pod&#xA;         operations:&#xA;         - CREATE&#xA;   mutate:&#xA;     foreach:&#xA;     - list: request.object.spec.containers[]&#xA;       preconditions:&#xA;         all:&#xA;         - key: &#34;{{ element.resources.requests.memory || `0` }}&#34;&#xA;           operator: Equals&#xA;           value: 0&#xA;       patchesJson6902: |-&#xA;         - path: /spec/containers/{{elementIndex}}/resources/requests/memory&#xA;           op: add&#xA;           value: 50Mi&#xA;     - list: request.object.spec.initContainers[]&#xA;       preconditions:&#xA;         all:&#xA;         - key: &#34;{{ element.resources.requests.memory || `0` }}&#34;&#xA;           operator: Equals&#xA;           value: 0&#xA;       patchesJson6902: |-&#xA;         - path: /spec/initContainers/{{elementIndex}}/resources/requests/memory&#xA;           op: add&#xA;           value: 50Mi&#xA;     - list: request.object.spec.ephemeralContainers[]&#xA;       preconditions:&#xA;         all:&#xA;         - key: &#34;{{ element.resources.requests.memory || `0` }}&#34;&#xA;           operator: Equals&#xA;           value: 0 &#xA;       patchesJson6902: |-&#xA;         - path: /spec/ephemeralContainers/{{elementIndex}}/resources/requests/memory&#xA;           op: add&#xA;           value: 50Mi&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While this policy works, the patch is duplicated three times, once for each container type. This duplication can be avoided by extracting the patch into a policy variable and then reusing the variable for each container type. Using JMESPath, the index and the container type, can be overridden for each type:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code lang=&#34;javascript&#34; class=&#34;language-javascript&#34;&gt;apiVersion: kyverno.io/v1&#xA;kind: ClusterPolicy&#xA;metadata:&#xA; name: add-resources&#xA;spec:&#xA; background: false&#xA; rules:&#xA; - name: default-memory&#xA;   match:&#xA;     any:&#xA;     - resources:&#xA;         kinds:&#xA;         - Pod&#xA;         operations:&#xA;         - CREATE&#xA;   context:&#xA;   - name: patch&#xA;     variable:&#xA;       value: |-&#xA;         - path: /spec/containers/0/resources/requests/memory&#xA;           op: add&#xA;           value: 50Mi&#xA;   mutate:&#xA;     foreach:&#xA;     - list: request.object.spec.containers[]&#xA;       preconditions:&#xA;         all:&#xA;         - key: &#34;{{ element.resources.requests.memory || `0` }}&#34;&#xA;           operator: Equals&#xA;           value: 0&#xA;       patchesJson6902: &#34;{{ patch | replace_all(@, &#39;0&#39;, &#39;{{elementIndex}}&#39;) }}&#34;&#xA;     - list: request.object.spec.ephemeralContainers[]&#xA;       preconditions:&#xA;         all:&#xA;         - key: &#34;{{ element.resources.requests.memory || `0` }}&#34;&#xA;           operator: Equals&#xA;           value: 0 &#xA;       patchesJson6902: &#34;{{ patch | replace_all(@,&#39;0&#39;,&#39;{{elementIndex}}&#39;) | replace_all(@,&#39;containers&#39;,&#39;ephemeralContainers&#39;)}}&#34;&#xA;     - list: request.object.spec.initContainers[]&#xA;       preconditions:&#xA;         all:&#xA;         - key: &#34;{{ element.resources.requests.memory || `0` }}&#34;&#xA;           operator: Equals&#xA;           value: 0&#xA;       patchesJson6902: &#34;{{ patch | replace_all(@,&#39;0&#39;,&#39;{{elementIndex}}&#39;) | replace_all(@,&#39;containers&#39;,&#39;initContainers&#39;)}}&#34;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;DRY Using YAML Anchors and Aliases&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The other duplication in the policy rule, is the precondition check. YAML allows reuse using&amp;nbsp;&lt;a href=&#34;https://smcleod.net/2022/11/yaml-anchors-and-aliases/&#34;&gt;anchors and aliases&lt;/a&gt;. We can leverage this YAML feature to remove the duplicated preconditions in the rule logic for each container type:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code lang=&#34;javascript&#34; class=&#34;language-javascript&#34;&gt;apiVersion: kyverno.io/v1&#xA;kind: ClusterPolicy&#xA;metadata:&#xA; name: add-resources&#xA;spec:&#xA; background: false&#xA; rules:&#xA; - name: default-memory&#xA;   match:&#xA;     any:&#xA;     - resources:&#xA;         kinds:&#xA;         - Pod&#xA;         operations:&#xA;         - CREATE&#xA;   context:&#xA;   - name: patch&#xA;     variable:&#xA;       value: |-&#xA;         - path: /spec/containers/0/resources/requests/memory&#xA;           op: add&#xA;           value: 50Mi&#xA;   mutate:&#xA;     foreach:&#xA;     - list: request.object.spec.containers[]&#xA;       preconditions: &amp;amp;pre&#xA;         all:&#xA;         - key: &#34;{{ element.resources.requests.memory || `0` }}&#34;&#xA;           operator: Equals&#xA;           value: 0&#xA;       patchesJson6902: &#34;{{ patch | replace_all(@, &#39;0&#39;, &#39;{{elementIndex}}&#39;) }}&#34;&#xA;     - list: request.object.spec.ephemeralContainers[]&#xA;       preconditions: *pre&#xA;       patchesJson6902: &#34;{{ patch | replace_all(@,&#39;0&#39;,&#39;{{elementIndex}}&#39;) | replace_all(@,&#39;containers&#39;,&#39;ephemeralContainers&#39;)}}&#34;&#xA;     - list: request.object.spec.initContainers[]&#xA;       preconditions: *pre&#xA;       patchesJson6902: &#34;{{ patch | replace_all(@,&#39;0&#39;,&#39;{{elementIndex}}&#39;) | replace_all(@,&#39;containers&#39;,&#39;initContainers&#39;)}}&#34;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The&amp;nbsp;&lt;code&gt;&amp;amp;pre&lt;/code&gt;&amp;nbsp;declares an anchor named&amp;nbsp;&lt;code&gt;pre&lt;/code&gt;&amp;nbsp;that can be subsequently referenced using&amp;nbsp;&lt;code&gt;*pre&lt;/code&gt;. YAML anchors also allow overrides, when additional flexibility is required.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:40px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-default&#34;&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-group is-style-border is-layout-constrained wp-block-group-is-layout-constrained&#34;&gt;&#xA;&lt;p class=&#34;is-style-spaced-uppercase&#34;&gt;Keep reading&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;Kyverno 1.12 is &lt;a href=&#34;https://www.cncf.io/blog/2024/05/10/kyverno-1-12-released/&#34;&gt;released&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Write &lt;a href=&#34;https://www.cncf.io/blog/2022/03/03/how-to-write-yaml-file-for-kubernetes/&#34;&gt;YAML for Kubernetes&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;How to &lt;a href=&#34;https://www.cncf.io/blog/2024/03/29/generating-kubernetes-validatingadmissionpolicies-from-kyverno-policies/&#34;&gt;generate K8s ValidatingAdmissionPolicies&lt;/a&gt; from Kyverno policies&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Register for &lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/register/&#34;&gt;KubeCon + CloudNativeCon North American 2024&lt;/a&gt; today&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;Conclusion&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The DRY Principle of coding applies to Policy as Code. In this post we used two powerful techniques to reduce duplication of logic that may need to change. Kyverno variables can be used to extract, or “pull-up” common elements and declare them once. And, YAML anchors and aliases allow reusing declarations.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Other techniques to apply DRY can be to use Helm templates, Kustomize, or other IaC tools.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Nirmata is the creator and a maintainer of Kyverno. If you are using Kyverno, and need any assistance, we would love to hear from you!&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;】&lt;p&gt;&lt;em&gt;会员帖子最初发布于&lt;a href=&#34;https://nirmata.com/2024/07/19/applying-the-dry-principle-to-kyverno-policies/&#34;&gt;Nirmata 博客&lt; /a&gt;作者：吉姆·布格瓦迪亚&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;软件开发的&lt;a href=&#34;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34;&gt;不要重复 (DRY) 原则&lt;/a&gt;提倡避免可能重复的代码改变。用可重用的抽象替换类似的代码使软件更易于维护，并避免错误。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;在这篇文章中，我将向您展示在 Kyverno 策略中应用 DRY 原则的几种方法，这些策略是用 YAML 编写的。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;干燥使用变量&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Kyverno 策略可以声明和重用变量。考虑这一策略，该策略会改变 Pod 中的各种容器类型，以在未指定的情况下添加内存请求。策略规则迭代容器、initContainer 和 ephemeralContainer 的列表，所有这些容器都具有相同的结构。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;由于策略规则使用 RFC 6902 JSON 补丁，因此补丁的路径取决于容器的类型。策略规则的初始实现会为每个容器类型复制补丁：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code lang=&#34;javascript&#34; class=&#34;language-javascript&#34;&gt;api版本：kyverno.io/v1&#xA;种类：集群策略&#xA;元数据：&#xA; 名称：添加资源&#xA;规格：&#xA; 背景：假&#xA; 规则：&#xA; - 名称：默认内存&#xA;   匹配：&#xA;     任何：&#xA;     - 资源：&#xA;         种类：&#xA;         - 吊舱&#xA;         运营：&#xA;         - 创造&#xA;   变异：&#xA;     foreach：&#xA;     - 列表：request.object.spec.containers[]&#xA;       前提条件：&#xA;         全部：&#xA;         - 键：“{{ element.resources.requests.memory || `0` }}”&#xA;           运算符：等于&#xA;           值：0&#xA;       patchJson6902: |-&#xA;         - 路径：/spec/containers/{{elementIndex}}/resources/requests/memory&#xA;           操作：添加&#xA;           值：50米&#xA;     - 列表：request.object.spec.initContainers[]&#xA;       前提条件：&#xA;         全部：&#xA;         - 键：“{{ element.resources.requests.memory || `0` }}”&#xA;           运算符：等于&#xA;           值：0&#xA;       patchJson6902: |-&#xA;         - 路径：/spec/initContainers/{{elementIndex}}/resources/requests/memory&#xA;           操作：添加&#xA;           值：50米&#xA;     - 列表：request.object.spec.ephemeralContainers[]&#xA;       前提条件：&#xA;         全部：&#xA;         - 键：“{{ element.resources.requests.memory || `0` }}”&#xA;           运算符：等于&#xA;           值：0 &#xA;       patchJson6902: |-&#xA;         - 路径：/spec/ephemeralContainers/{{elementIndex}}/resources/requests/memory&#xA;           操作：添加&#xA;           值：50米&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;虽然此策略有效，但补丁会重复三次，每个容器类型一次。通过将补丁提取到策略变量中，然后为每个容器类型重用该变量，可以避免这种重复。使用 JMESPath，可以为每种类型覆盖索引和容器类型：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class =“wp-block-co”de&#34;&gt;&lt;code lang=&#34;javascript&#34; class=&#34;language-javascript&#34;&gt;api版本：kyverno.io/v1&#xA;种类：集群策略&#xA;元数据：&#xA; 名称：添加资源&#xA;规格：&#xA; 背景：假&#xA; 规则：&#xA; - 名称：默认内存&#xA;   匹配：&#xA;     任何：&#xA;     - 资源：&#xA;         种类：&#xA;         - 吊舱&#xA;         运营：&#xA;         - 创造&#xA;   语境：&#xA;   - 名称：补丁&#xA;     多变的：&#xA;       值：|-&#xA;         - 路径：/spec/containers/0/resources/requests/memory&#xA;           操作：添加&#xA;           值：50米&#xA;   变异：&#xA;     foreach：&#xA;     - 列表：request.object.spec.containers[]&#xA;       前提条件：&#xA;         全部：&#xA;         - 键：“{{ element.resources.requests.memory || `0` }}”&#xA;           运算符：等于&#xA;           值：0&#xA;       patchJson6902：“{{补丁|replace_all（@，&#39;0&#39;，&#39;{{elementIndex}}&#39;）}}”&#xA;     - 列表：request.object.spec.ephemeralContainers[]&#xA;       前提条件：&#xA;         全部：&#xA;         - 键：“{{ element.resources.requests.memory || `0` }}”&#xA;           运算符：等于&#xA;           值：0 &#xA;       patchJson6902：“{{补丁|replace_all（@，&#39;0&#39;，&#39;{{elementIndex}}&#39;）|replace_all（@，&#39;containers&#39;，&#39;ephemeralContainers&#39;）}}”&#xA;     - 列表：request.object.spec.initContainers[]&#xA;       前提条件：&#xA;         全部：&#xA;         - 键：“{{ element.resources.requests.memory || `0` }}”&#xA;           运算符：等于&#xA;           值：0&#xA;       patchJson6902: &#34;{{ patch | Replace_all(@,&#39;0&#39;,&#39;{{elementIndex}}&#39;) | Replace_all(@,&#39;containers&#39;,&#39;initContainers&#39;)}}&#34;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;使用 YAML 锚点和别名进行干燥&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;策略规则中的另一个重复是前提条件检查。 YAML 允许使用&lt;a href=&#34;https://smcleod.net/2022/11/yaml-anchors-and-aliases/&#34;&gt;锚点和别名&lt;/a&gt;进行重复使用。我们可以利用此 YAML 功能来删除每个容器类型的规则逻辑中的重复前提条件：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code lang=&#34;javascript&#34; class=&#34;language-javascript&#34;&gt;api版本：kyverno.io/v1&#xA;种类：集群策略&#xA;元数据：&#xA; 名称：添加资源&#xA;规格：&#xA; 背景：假&#xA; 规则：&#xA; - 名称：默认内存&#xA;   匹配：&#xA;     任何：&#xA;     - 资源：&#xA;         种类：&#xA;         - 吊舱&#xA;         运营：&#xA;         - 创造&#xA;   语境：&#xA;   - 名称：补丁&#xA;     多变的：&#xA;       值：|-&#xA;         - 路径：/spec/containers/0/resources/requests/memory&#xA;           操作：添加&#xA;           值：50米&#xA;   变异：&#xA;     foreach：&#xA;     - 列表：request.object.spec.containers[]&#xA;       前提条件：&amp;pre&#xA;         全部：&#xA;         - 键：“{{ element.resources.requests.memory || `0` }}”&#xA;           运算符：等于&#xA;           值：0&#xA;       patchJson6902：“{{补丁|replace_all（@，&#39;0&#39;，&#39;{{elementIndex}}&#39;）}}”&#xA;     - 列表：request.object.spec.ephemeralContainers[]&#xA;       前提条件：*前提&#xA;       patchJson6902：“{{补丁|replace_all（@，&#39;0&#39;，&#39;{{elementIndex}}&#39;）|replace_all（@，&#39;containers&#39;，&#39;ephemeralContainers&#39;）}}”&#xA;     - 列表：request.object.spec.initContainers[]&#xA;       前提条件：*前提&#xA;       patchJson6902：“{{补丁|replace_all（@，&#39;0&#39;，&#39;{{elementIndex}}&#39;）|replace_all（@，&#39;containers&#39;,&#39;initContainers&#39;)}}&#34;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;code&gt;&amp;pre&lt;/code&gt; 声明了一个名为 &lt;code&gt;pre&lt;/code&gt; 的锚点，随后可以使用 &lt;code&gt;*pre&lt;/code&gt; 引用该锚点。当需要额外的灵活性时，YAML 锚点还允许覆盖。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:40px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-default&#34;&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-group is-style-border is-layout-constrained wp-block-group-is-layout-constrained&#34;&gt;&#xA;&lt;p class=&#34;is-style-spaced-uppercase&#34;&gt;继续阅读&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;Kyverno 1.12 已&lt;a href=&#34;https://www.cncf.io/blog/2024/05/10/kyverno-1-12-released/&#34;&gt;发布&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;编写&lt;a href=&#34;https://www.cncf.io/blog/2022/03/03/how-to-write-yaml-file-for-kubernetes/&#34;&gt;适用于 Kubernetes 的 YAML&lt;/a&gt; &lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;如何&lt;a href=&#34;https://www.cncf.io/blog/2024/03/29/generating-kubernetes-validatingadmissionpolicies-from-kyverno-policies/&#34;&gt;生成 K8s ValidatingAdmissionPolicies&lt;/a&gt; Kyverno政策&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;立即报名参加&lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/register/&#34;&gt;KubeCon + CloudNativeCon North American 2024&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;结论&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;编码的 DRY 原则适用于策略即代码。在这篇文章中，我们使用了两种强大的技术来减少可能需要更改的逻辑重复。 Kyverno 变量可用于提取或“拉起”公共元素并声明一次。而且，YAML 锚点和别名允许重用声明。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;应用 DRY 的其他技术可以是使用 Helm 模板、Kustomize 或其他 IaC 工具。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Nirmata 是 Kyverno 的创建者和维护者。如果您正在使用 Kyverno，并且需要任何帮助，我们很乐意听取您的意见！&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;</description>
      <pubDate>Tue, 30 Jul 2024 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Top 3 edge AI trends to look for in 2024】2024 年值得关注的 3 大边缘人工智能趋势</title>
      <link>https://www.cncf.io/blog/2024/08/02/top-3-edge-ai-trends-to-look-for-in-2024/</link>
      <description>【&lt;p&gt;&lt;em&gt;Member post by Abhijeet Kakade, Senior Marketing Expert at MSys Technologies&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;2023 was the year AI technologies became mainstream. What once was seen in movies is now a staple in daily business operations. AI is integrated into mobile phones, shopping experiences, and daily mundane office work. From tech giants to e-commerce stores to service providers, everyone is using AI now to streamline operations, improve productivity, and create engaging customer experiences.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As we look ahead to 2024, it’s clear that AI’s influence will only continue to grow. One of the most exciting developments is the convergence of AI and edge computing. MSys executives recently attended the &lt;a href=&#34;https://www.hpe.com/us/en/discover/showcase.html&#34;&gt;HPE Discover 2024&lt;/a&gt; event to understand its significance. After interacting with 100+ technology leaders, we understood how the powerful combination of edge and AI transforms the way enterprises process and analyze data, bringing significant advancements to real-time analytics and decision-making at the edge. And that’s what we’re going to share with you today.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In this blog, you will learn:&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;How AI is Impacting the Edge Infrastructure&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Top 3 Tech Predictions to Look for in 2024&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;How Edge Landscape Will Fare Over the Next Few Years&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Let’s get started!&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Top 3 Edge AI Trends to Watch for 2024&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The next few years are exciting, challenging, and demanding for businesses. From innovative AI applications to advancements in edge computing, these trends are set to revolutionize technology. Let’s now analyze ground-breaking trends that will shape the future of the cloud.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;DevEdgeOps&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The significant ascent of edge computing has resulted in a paradigm shift in data processing and utilization. Edge computing, unlike traditional cloud-based methods, places computational resources closer to the data source. This shift in architecture introduces new complexities and opportunities for DevOps.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Traditional DevOps practices, though effective in cloud-centric scenarios, are less suitable for edge computing. The “one-size-fits-all” strategy does not address the edge’s unique challenges, such as scale, connectivity, security, and device diversity.&amp;nbsp;&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:36px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-default&#34;&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-group is-style-border is-layout-constrained wp-block-group-is-layout-constrained&#34;&gt;&#xA;&lt;p class=&#34;is-style-spaced-uppercase&#34;&gt;Keep reading&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;Read the new &lt;a href=&#34;https://www.cncf.io/reports/cloud-native-artificial-intelligence-whitepaper/&#34;&gt;Cloud Native AI Whitepaper&lt;/a&gt; from CNCF’s AI Working Group&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Explore WasmEdge and &lt;a href=&#34;https://www.cncf.io/online-programs/cloud-native-live-ai-across-devices/&#34;&gt;AI for all devices&lt;/a&gt; (webinar)&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Unpack &lt;a href=&#34;https://www.cncf.io/online-programs/cloud-native-live-using-otel-distributed-tracing-for-real-time-observability/&#34;&gt;the magic of distributed tracing&lt;/a&gt; using OTel&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Register for &lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/register/&#34;&gt;KubeCon + CloudNativeCon North America 2024&lt;/a&gt; today&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;DevEdgeOps bridges this gap, enabling organizations to harness DevOps’ agility and automation while managing the complexities of edge environments.&amp;nbsp; This novel approach helps enterprises in the following ways:&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;Centralized Edge Management: Real-time monitoring with dashboards, interfaces, and APIs; features for configuration, remote troubleshooting, and log analysis.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Edge Infrastructure Integration: Seamless connectivity with gateways, servers, and cloud services for easy deployment and scaling.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Edge-Aware Development Tools: Code editors, debuggers, simulators, and testing frameworks optimized for edge environments.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;CI/CD Pipelines for Edge: Automated continuous integration and deployment with pre-configured pipelines and templates.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Edge Simulation and Testing: Features to simulate low-bandwidth, intermittent connectivity, and device failures for proactive issue resolution.&lt;br&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;2. &lt;strong&gt;AI Interaction across Edge and Cloud&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The future of AI lies in the seamless integration of edge and cloud computing in forthcoming years. AI workloads will dynamically move between the edge and the cloud, leveraging each of their strengths. The cloud will train complex AI models, while the edge will handle real-time inferencing, ensuring fast responses. Next-gen Edge platforms will support end-to-end automation, delivering comprehensive solutions across multi-cloud and edge environments. This novel approach helps enterprises in the following ways:&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;Combining the cloud’s computational power for training with the edge’s low latency for real-time tasks results in optimized performance.&amp;nbsp;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Reduce hardware costs by offloading heavy tasks to the cloud and save bandwidth by local processing at the edge.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Easily scales workload and deploys models across new edge devices without major infrastructure changes.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Processes sensitive data locally at the edge, minimizing transmission risks and meeting stringent compliance requirements.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Stay ahead by leveraging the latest edge and cloud technologies, fostering innovation and quick deployment of AI solutions.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;3. Micro AI&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;2024 will see the rise of Micro AI—lightweight, hyper-efficient AI models for edge devices like smartwatches, IoT sensors, drones, and home appliances. These tiny AI brains enable real-time data processing and decision-making without cloud reliance. Key innovations include better algorithms, enhanced energy efficiency, and broader applications. Micro AI helps enterprises in the following ways.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;Cuts operational costs by reducing cloud connectivity and data transmission needs.&amp;nbsp;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Supports immediate responses like autonomous drones and healthcare.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Keeps data on-device, reducing breach risks and ensuring privacy.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Increases system reliability by reducing dependency on internet connectivity.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Optimized for low power consumption, ideal for battery-operated devices&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Enables widespread AI adoption across various devices and use cases.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Tailor’s AI models to specific device requirements for optimal performance.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;After engaging with several technology professionals in the AI industry, we’ve gained valuable insights into key technologies and trends set to revolutionize the edge computing landscape in the coming years. The trends discussed in the article point to an exciting and transformative era in edge AI focused on improving efficiency and accessibility for both businesses and end-users. Stay tuned for the next edition of our AI article; I look forward to sharing more with you soon.&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;】&lt;p&gt;&lt;em&gt;MSys Technologies 高级营销专家 Abhijeet Kakade 的会员帖子&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;2023 年是人工智能技术成为主流的一年。曾经在电影中看到的东西现在已成为日常业务运营的主要内容。人工智能已融入手机、购物体验和日常办公工作中。从科技巨头到电子商务商店再到服务提供商，现在每个人都在使用人工智能来简化运营、提高生产力并创造引人入胜的客户体验。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;展望 2024 年，很明显人工智能的影响力只会继续增长。最令人兴奋的发展之一是人工智能和边缘计算的融合。 MSys 高管最近参加了 &lt;a href=&#34;https://www.hpe.com/us/en/discover/showcase.html&#34;&gt;HPE Discover 2024&lt;/a&gt; 活动，了解其重要性。在与 100 多名技术领导者互动后，我们了解了边缘和人工智能的强大结合如何改变企业处理和分析数据的方式，从而为边缘的实时分析和决策带来重大进步。这就是我们今天要与您分享的内容。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;在本博客中，您将了解到：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;人工智能如何影响边缘基础设施&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;2024 年最值得关注的 3 项技术预测&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;未来几年边缘景观将如何发展&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;让我们开始吧！&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;2024 年值得关注的 3 大边缘人工智能趋势&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;未来几年对企业来说是令人兴奋、充满挑战和要求很高的。从创新的人工智能应用到边缘计算的进步，这些趋势必将彻底改变技术。现在让我们分析将塑造云的未来的突破性趋势。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol类=“wp-block-list”&gt;&#xA;&lt;li&gt;&lt;strong&gt;DevEdgeOps&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;边缘计算的显着提升导致了数据处理和利用的范式转变。与传统的基于云的方法不同，边缘计算将计算资源放置在更靠近数据源的位置。这种架构转变为 DevOps 带来了新的复杂性和机遇。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;传统的 DevOps 实践虽然在以云为中心的场景中有效，但不太适合边缘计算。 “一刀切”策略无法解决边缘的独特挑战，例如规模、连接性、安全性和设备多样性。  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:36px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-default&#34;&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-group is-style-border is-layout-constrained wp-block-group-is-layout-constrained&#34;&gt;&#xA;&lt;p class=&#34;is-style-spaced-uppercase&#34;&gt;继续阅读&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;阅读 CNCF 人工智能工作组发布的新&lt;a href=&#34;https://www.cncf.io/reports/cloud-native-artificial-intelligence-whitepaper/&#34;&gt;云原生人工智能白皮书&lt;/a&gt;&lt;/李&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;探索 WasmEdge 和 &lt;a href=&#34;https://www.cncf.io/online-programs/cloud-native-live-ai-across-devices/&#34;&gt;适用于所有设备的人工智能&lt;/a&gt;（网络研讨会）&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;揭开&lt;a href=&#34;https://www.cncf.io/online-programs/cloud-native-live-using-otel-distributed-tracing-for-real-time-observability/&#34;&gt;的魔力使用 OTel 进行分布式跟踪&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;立即报名参加&lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/register/&#34;&gt;KubeCon + CloudNativeCon North America 2024&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;DevEdgeOps 弥补了这一差距，使组织能够利用 DevOps 的敏捷性和自动化，同时管理边缘环境的复杂性。  这种新颖的方法可以通过以下方式帮助企业：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol类=“wp-block-list”&gt;&#xA;&lt;li&gt;集中边缘管理：通过仪表板、界面和 API 进行实时监控；配置、远程故障排除和日志分析功能。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;边缘基础设施集成：与网关、服务器和云服务无缝连接，轻松部署和扩展。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;边缘感知开发工具：针对边缘环境优化的代码编辑器、调试器、模拟器和测试框架。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;适用于 Edge 的 CI/CD 管道：使用预配置的管道和模板进行自动持续集成和部署。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;边缘模拟和测试：模拟低带宽、间歇性连接和设备故障的功能，以主动解决问题。&lt;br&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;2. &lt;strong&gt;跨边缘和云的人工智能交互&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;人工智能的未来在于未来几年边缘计算和云计算的无缝集成。人工智能工作负载将在边缘和云之间动态移动，充分利用各自的优势。云端将训练复杂的人工智能模型，而边缘将处理实时推理，确保快速响应。下一代边缘平台将支持端到端自动化，跨多云和边缘环境提供全面的解决方案。这种新颖的方法可以通过以下方式帮助企业：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol类=“wp-block-list”&gt;&#xA;&lt;li&gt;将云的训练计算能力与边缘的实时任务低延迟相结合，可以优化性能。 &lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;通过将繁重的任务卸载到云端来降低硬件成本，并通过边缘的本地处理来节省带宽。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;轻松扩展工作负载并跨新边缘设备部署模型，无需对基础设施进行重大更改。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;在边缘本地处理敏感数据，最大限度地降低传输风险并满足严格的合规性要求。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;利用最新的边缘和云技术，促进 AI 解决方案的创新和快速部署，保持领先地位。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;强&gt;3。微型人工智能&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;2024 年，微型 AI 将会兴起——适用于智能手表、物联网传感器、无人机和家用电器等边缘设备的轻量级、超高效的 AI 模型。这些微小的人工智能大脑可以实现实时数据不依赖云的处理和决策。关键创新包括更好的算法、更高的能源效率和更广泛的应用。微人工智能从以下几个方面帮助企业。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol类=“wp-block-list”&gt;&#xA;&lt;li&gt;通过减少云连接和数据传输需求来降低运营成本。 &lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;支持自主无人机和医疗保健等即时响应。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;将数据保留在设备上，降低违规风险并确保隐私。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;通过减少对互联网连接的依赖来提高系统可靠性。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;针对低功耗进行了优化，非常适合电池供电的设备&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;推动人工智能在各种设备和用例中得到广泛采用。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;根据特定设备要求定制 AI 模型，以实现最佳性能。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;结论&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;在与人工智能行业的几位技术专业人士接触后，我们获得了对未来几年将彻底改变边缘计算格局的关键技术和趋势的宝贵见解。本文讨论的趋势指出了边缘人工智能的一个令人兴奋和变革的时代，重点是提高企业和最终用户的效率和可访问性。请继续关注我们下一期的人工智能文章；我期待尽快与您分享更多内容。&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;</description>
      <pubDate>Thu, 01 Aug 2024 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Deploying a microservices application using Helm on Kubernetes】在 Kubernetes 上使用 Helm 部署微服务应用程序</title>
      <link>https://www.cncf.io/blog/2024/08/09/deploying-a-microservices-application-using-helm-on-kubernetes/</link>
      <description>【&lt;p&gt;&lt;em&gt;Community post originally published on &lt;a href=&#34;https://dev.to/syedasadrazadevops/deploying-a-microservices-application-using-helm-on-kubernetes-3h22&#34;&gt;Dev.to&lt;/a&gt; by Syed Asad Raza&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Helm, often described as the package manager for Kubernetes, simplifies the deployment and management of applications within Kubernetes clusters. This guide will walk you through deploying a microservices application using Helm, illustrating key concepts such as creating Helm charts, managing dependencies, and deploying a multi-service application.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;&lt;a href=&#34;https://dev.to/syedasadrazadevops/deploying-a-microservices-application-using-helm-on-kubernetes-3h22#prerequisites&#34;&gt;&lt;/a&gt;Prerequisites&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Before we begin, ensure you have the following tools installed:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;kubectl&lt;/strong&gt;: Kubernetes command-line tool.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;minikube&lt;/strong&gt;: Local Kubernetes cluster for development and testing.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;Docker&lt;/strong&gt;: For building container images.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;Helm&lt;/strong&gt;: Kubernetes package manager.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;&lt;a href=&#34;https://dev.to/syedasadrazadevops/deploying-a-microservices-application-using-helm-on-kubernetes-3h22#overview&#34;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We will deploy a sample application consisting of two microservices:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;Frontend Service&lt;/strong&gt;: A simple web application that communicates with the backend service.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;Backend Service&lt;/strong&gt;: An API that returns a message.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We’ll use Helm to package these services into charts, manage their dependencies, and deploy them to a Kubernetes cluster.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;&lt;a href=&#34;https://dev.to/syedasadrazadevops/deploying-a-microservices-application-using-helm-on-kubernetes-3h22#step-1-build-docker-images&#34;&gt;&lt;/a&gt;Step 1: Build Docker Images&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;First, we need to create Docker images for our frontend and backend services.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Backend Service&lt;/strong&gt;&lt;br&gt;Create a simple&amp;nbsp;&lt;code&gt;Node.js&lt;/code&gt;&amp;nbsp;backend service:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;// backend/server.js&#xA;const express = require(&#39;express&#39;);&#xA;const app = express();&#xA;&#xA;app.get(&#39;/api/message&#39;, (req, res) =&amp;gt; {&#xA;    res.json({ message: &#39;Hello from the backend!&#39; });&#xA;});&#xA;&#xA;const port = 3000;&#xA;app.listen(port, () =&amp;gt; {&#xA;    console.log(`Backend service running on port ${port}`);&#xA;});&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Create a&amp;nbsp;&lt;code&gt;Dockerfile&lt;/code&gt;&amp;nbsp;for the backend:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;# backend/Dockerfile&#xA;FROM node:14&#xA;WORKDIR /app&#xA;COPY server.js .&#xA;RUN npm install express&#xA;EXPOSE 3000&#xA;CMD [&#34;node&#34;, &#34;server.js&#34;]&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Frontend Service&lt;/strong&gt;&lt;br&gt;Create a simple HTML file for the frontend service:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;&amp;lt;!-- frontend/index.html --&amp;gt;&#xA;&amp;lt;!DOCTYPE html&amp;gt;&#xA;&amp;lt;html lang=&#34;en&#34;&amp;gt;&#xA;&amp;lt;head&amp;gt;&#xA;    &amp;lt;meta charset=&#34;UTF-8&#34;&amp;gt;&#xA;    &amp;lt;title&amp;gt;Frontend Service&amp;lt;/title&amp;gt;&#xA;&amp;lt;/head&amp;gt;&#xA;&amp;lt;body&amp;gt;&#xA;    &amp;lt;h1&amp;gt;Frontend Service&amp;lt;/h1&amp;gt;&#xA;    &amp;lt;div id=&#34;message&#34;&amp;gt;&amp;lt;/div&amp;gt;&#xA;    &amp;lt;script&amp;gt;&#xA;        fetch(&#39;/api/message&#39;)&#xA;            .then(response =&amp;gt; response.json())&#xA;            .then(data =&amp;gt; {&#xA;                document.getElementById(&#39;message&#39;).innerText = data.message;&#xA;            });&#xA;    &amp;lt;/script&amp;gt;&#xA;&amp;lt;/body&amp;gt;&#xA;&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Create a Dockerfile for the frontend:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;# frontend/Dockerfile&#xA;FROM nginx:alpine&#xA;COPY index.html /usr/share/nginx/html&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Build Docker Images&lt;/strong&gt;&lt;br&gt;Navigate to each service directory and build the&amp;nbsp;&lt;code&gt;Docker images&lt;/code&gt;:&lt;br&gt;&lt;em&gt;In backend directory&lt;/em&gt;&lt;br&gt;&lt;code&gt;docker build -t backend-service&lt;/code&gt;&lt;br&gt;&lt;em&gt;In frontend directory&lt;/em&gt;&lt;br&gt;&lt;code&gt;docker build -t frontend-service&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;&lt;a href=&#34;https://dev.to/syedasadrazadevops/deploying-a-microservices-application-using-helm-on-kubernetes-3h22#step-2-create-helm-charts&#34;&gt;&lt;/a&gt;Step 2: Create Helm Charts&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Create a Helm Chart for the Backend Service&lt;/strong&gt;&lt;br&gt;Navigate to a working directory and create a new Helm chart:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;helm create backend&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This command generates a basic Helm chart structure. Modify the&amp;nbsp;&lt;code&gt;backend/templates/deployment.yaml&lt;/code&gt;&amp;nbsp;file to suit our backend service:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;apiVersion: apps/v1&#xA;kind: Deployment&#xA;metadata:&#xA;  name: {{ .Release.Name }}-backend&#xA;spec:&#xA;  replicas: 2&#xA;  selector:&#xA;    matchLabels:&#xA;      app: {{ .Release.Name }}-backend&#xA;  template:&#xA;    metadata:&#xA;      labels:&#xA;        app: {{ .Release.Name }}-backend&#xA;    spec:&#xA;      containers:&#xA;      - name: backend&#xA;        image: backend-service&#xA;        ports:&#xA;        - containerPort: 3000&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Modify the&amp;nbsp;&lt;code&gt;backend/templates/service.yaml&lt;/code&gt;&amp;nbsp;file:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;apiVersion: v1&#xA;kind: Service&#xA;metadata:&#xA;  name: {{ .Release.Name }}-backend&#xA;spec:&#xA;  selector:&#xA;    app: {{ .Release.Name }}-backend&#xA;  ports:&#xA;    - protocol: TCP&#xA;      port: 80&#xA;      targetPort: 3000&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;&lt;a href=&#34;https://dev.to/syedasadrazadevops/deploying-a-microservices-application-using-helm-on-kubernetes-3h22#create-a-helm-chart-for-the-frontend-service&#34;&gt;&lt;/a&gt;Create a Helm Chart for the Frontend Service&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Similarly, create a Helm chart for the frontend service:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;helm create frontend&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Modify the&amp;nbsp;&lt;code&gt;frontend/templates/deployment.yaml&lt;/code&gt;&amp;nbsp;file:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;apiVersion: apps/v1&#xA;kind: Deployment&#xA;metadata:&#xA;  name: {{ .Release.Name }}-frontend&#xA;spec:&#xA;  replicas: 2&#xA;  selector:&#xA;    matchLabels:&#xA;      app: {{ .Release.Name }}-frontend&#xA;  template:&#xA;    metadata:&#xA;      labels:&#xA;        app: {{ .Release.Name }}-frontend&#xA;    spec:&#xA;      containers:&#xA;      - name: frontend&#xA;        image: frontend-service&#xA;        ports:&#xA;        - containerPort: 80&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Modify the&amp;nbsp;&lt;code&gt;frontend/templates/service.yaml&lt;/code&gt;&amp;nbsp;file:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;apiVersion: v1&#xA;kind: Service&#xA;metadata:&#xA;  name: {{ .Release.Name }}-frontend&#xA;spec:&#xA;  selector:&#xA;    app: {{ .Release.Name }}-frontend&#xA;  ports:&#xA;    - protocol: TCP&#xA;      port: 80&#xA;      targetPort: 80&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;&lt;a href=&#34;https://dev.to/syedasadrazadevops/deploying-a-microservices-application-using-helm-on-kubernetes-3h22#step-3-deploy-using-helm&#34;&gt;&lt;/a&gt;Step 3: Deploy Using Helm&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Start your Minikube cluster:&lt;br&gt;&lt;code&gt;minikube start&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Deploy the Backend Service&lt;/strong&gt;&lt;br&gt;Navigate to the backend directory and install the chart:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;helm install backend ./backend&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Deploy the Frontend Service&lt;/strong&gt;&lt;br&gt;Navigate to the frontend directory and install the chart:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;helm install frontend ./frontend&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;&lt;a href=&#34;https://dev.to/syedasadrazadevops/deploying-a-microservices-application-using-helm-on-kubernetes-3h22#step-4-set-up-ingress&#34;&gt;&lt;/a&gt;Step 4: Set Up Ingress&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;To expose the frontend service externally, we will set up an ingress.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Enable Ingress in Minikube&lt;/strong&gt;&lt;br&gt;Enable the ingress addon:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;minikube addons enable ingress&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Create Ingress Resource&lt;/strong&gt;&lt;br&gt;Create an&amp;nbsp;&lt;code&gt;ingress&lt;/code&gt;&amp;nbsp;resource to route traffic to the frontend service:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;# ingress.yaml&#xA;apiVersion: networking.k8s.io/v1&#xA;kind: Ingress&#xA;metadata:&#xA;  name: frontend-ingress&#xA;spec:&#xA;  rules:&#xA;  - host: frontend.local&#xA;    http:&#xA;      paths:&#xA;      - path: /&#xA;        pathType: Prefix&#xA;        backend:&#xA;          service:&#xA;            name: frontend&#xA;            port:&#xA;              number: 80&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Apply the ingress configuration:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;kubectl apply -f ingress.yaml&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Add an entry to your&amp;nbsp;&lt;code&gt;/etc/hosts&lt;/code&gt;&amp;nbsp;file to map&amp;nbsp;&lt;code&gt;frontend.local&lt;/code&gt;&amp;nbsp;to the Minikube IP:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;echo &#34;$(minikube ip) frontend.local&#34; | sudo tee -a /etc/hosts&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;&lt;a href=&#34;https://dev.to/syedasadrazadevops/deploying-a-microservices-application-using-helm-on-kubernetes-3h22#step-5-verify-the-deployment&#34;&gt;&lt;/a&gt;Step 5: Verify the Deployment&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Access the frontend service in your browser by navigating to&amp;nbsp;&lt;code&gt;http://frontend.local&lt;/code&gt;. You should see the frontend page displaying the message fetched from the backend service.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;&lt;a href=&#34;https://dev.to/syedasadrazadevops/deploying-a-microservices-application-using-helm-on-kubernetes-3h22#conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In this guide, we’ve deployed a microservices application using Helm on Kubernetes, demonstrating intermediate concepts like creating Helm charts, managing dependencies, and setting up ingress. Helm simplifies the deployment and management of Kubernetes applications, making it a powerful tool for cloud-native development.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote class=&#34;wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow&#34;&gt;&#xA;&lt;p&gt;By sharing this tutorial, you’re providing valuable technical content to the CNCF community, helping others understand and leverage Helm for their Kubernetes deployments.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;】&lt;p&gt;&lt;em&gt;社区帖子最初发布于 &lt;a href=&#34;https://dev.to/syedasadrazadevops/deploying-a-microservices-application-using-helm-on-kubernetes-3h22&#34;&gt;Dev.to&lt;/ a&gt; 作者：Syed Asad Raza&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Helm 通常被描述为 Kubernetes 的包管理器，它简化了 Kubernetes 集群内应用程序的部署和管理。本指南将引导您完成使用 Helm 部署微服务应用程序，说明创建 Helm 图表、管理依赖项和部署多服务应用程序等关键概念。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;&lt;a href=&#34;https://dev.to/syedasadrazadevops/deploying-a-microservices-application-using-helm-on-kubernetes-3h22#preventions&#34;&gt;&lt;/ a&gt;先决条件&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;在开始之前，请确保您已安装以下工具：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;kubectl&lt;/strong&gt;：Kubernetes 命令行工具。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;minikube&lt;/strong&gt;：用于开发和测试的本地 Kubernetes 集群。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;Docker&lt;/strong&gt;：用于构建容器镜像。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;Helm&lt;/strong&gt;：Kubernetes 包管理器。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;&lt;a href=&#34;https://dev.to/syedasadrazadevops/deploying-a-microservices-application-using-helm-on-kubernetes-3h22#overview&#34;&gt;&lt;/ a&gt;概述&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;我们将部署一个由两个微服务组成的示例应用程序：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;前端服务&lt;/strong&gt;：与后端服务通信的简单 Web 应用程序。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;后端服务&lt;/strong&gt;：返回消息的 API。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;我们将使用 Helm 将这些服务打包到图表中，管理它们的依赖项，并将它们部署到 Kubernetes 集群。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;&lt;a href=&#34;https://dev.to/syedasadrazadevops/deploying-a-microservices-application-using-helm-on-kubernetes-3h22#step-1-build -docker-images&#34;&gt;&lt;/a&gt;第 1 步：构建 Docker 镜像&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;首先，我们需要为前端和后端服务创建 Docker 镜像。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;后端服务&lt;/strong&gt;&lt;br&gt;创建一个简单的 &lt;code&gt;Node.js&lt;/code&gt; 后端服务：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;// backend/server.js&#xA;const express = require(&#39;express&#39;);&#xA;常量应用程序 = Express();&#xA;&#xA;app.get(&#39;/api/message&#39;, (req, res) =&gt; {&#xA;    res.json({ message: &#39;来自后端的你好！&#39; });&#xA;});&#xA;&#xA;常量端口= 3000；&#xA;应用程序.listen(端口, () =&gt; {&#xA;    console.log(`在端口 ${port} 上运行的后端服务`);&#xA;});&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;为后端创建一个&lt;code&gt;Dockerfile&lt;/code&gt;：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;# backend/Dockerfile&#xA;来自节点：14&#xA;工作目录/应用程序&#xA;复制 server.js 。&#xA;运行 npm install express&#xA;曝光 3000&#xA;CMD [“节点”，“server.js”]&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;前端服务&lt;/strong&gt;&lt;br&gt;为前端服务创建一个简单的 HTML 文件：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;&lt;!-- frontend/index.html --&gt;&#xA;&lt;!DOCTYPE html&gt;&#xA;&lt;html lang=&#34;en&#34;&gt;&#xA;&lt;头&gt;&lt;元字符集=“UTF-8”&gt;&#xA;    &lt;title&gt;前端服务&lt;/title&gt;&#xA;&lt;/头&gt;&#xA;&lt;正文&gt;&#xA;    &lt;h1&gt;前端服务&lt;/h1&gt;&#xA;    &lt;div id=&#34;消息&#34;&gt;&lt;/div&gt;&#xA;    &lt;脚本&gt;&#xA;        fetch(&#39;/api/消息&#39;)&#xA;            .then(响应=&gt;response.json())&#xA;            .then（数据=&gt; {&#xA;                document.getElementById(&#39;message&#39;).innerText = data.message;&#xA;            });&#xA;    &lt;/脚本&gt;&#xA;&lt;/正文&gt;&#xA;&lt;/html&gt;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;为前端创建 Dockerfile：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;# 前端/Dockerfile&#xA;来自 nginx:alpine&#xA;复制index.html /usr/share/nginx/html&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;构建 Docker 映像&lt;/strong&gt;&lt;br&gt;导航到每个服务目录并构建&lt;code&gt;Docker 映像&lt;/code&gt;：&lt;br&gt;&lt;em&gt;在后端目录中&lt;/em&gt;&lt;br&gt; &lt;code&gt;docker build -t backend-service&lt;/code&gt;&lt;br&gt;&lt;em&gt;在前端目录&lt;/em&gt;&lt;br&gt;&lt;code&gt;docker build -t frontend-service&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;&lt;a href=&#34;https://dev.to/syedasadrazadevops/deploying-a-microservices-application-using-helm-on-kubernetes-3h22#step-2-create -helm-charts&#34;&gt;&lt;/a&gt;第 2 步：创建 Helm 图表&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;为后端服务创建 Helm 图表&lt;/strong&gt;&lt;br&gt;导航到工作目录并创建新的 Helm 图表：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;helm 创建后端&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;此命令生成基本的 Helm 图表结构。修改 &lt;code&gt;backend/templates/deployment.yaml&lt;/code&gt; 文件以适合我们的后端服务：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;api版本：apps/v1&#xA;种类：部署&#xA;元数据：&#xA;  name: {{ .Release.Name }}-后端&#xA;规格：&#xA;  副本：2&#xA;  选择器：&#xA;    匹配标签：&#xA;      应用程序：{{ .Release.Name }}-后端&#xA;  模板：&#xA;    元数据：&#xA;      标签：&#xA;        应用程序：{{ .Release.Name }}-后端&#xA;    规格：&#xA;      容器：&#xA;      - 名称：后端&#xA;        图片：后端服务&#xA;        端口：&#xA;        - 容器端口：3000&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;修改&lt;code&gt;backend/templates/service.yaml&lt;/code&gt;文件：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;api版本：v1&#xA;种类： 服务&#xA;元数据：&#xA;  name: {{ .Release.Name }}-后端&#xA;规格：&#xA;  选择器：&#xA;    应用程序：{{ .Release.Name }}-后端&#xA;  端口：&#xA;    - 协议：TCP&#xA;      端口：80&#xA;      目标端口：3000&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;&lt;a href=&#34;https://dev.to/syedasadrazadevops/deploying-a-microservices-application-using-helm-on-kubernetes-3h22#create-a-helm -chart-for-the-frontend-service&#34;&gt;&lt;/a&gt;为前端服务创建 Helm Chart&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;同样，为前端服务创建 Helm 图表：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;helm 创建前端&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;修改&lt;code&gt;frontend/templates/deployment.yaml&lt;/code&gt;文件：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;api版本：apps/v1&#xA;种类：部署&#xA;元数据：&#xA;  名称：{{ .Release.Name }}-前端&#xA;规格：&#xA;  副本：2&#xA;  选择器：&#xA;    匹配标签：&#xA;      应用程序：{{ .Release.Name }}-前端模板：&#xA;    元数据：&#xA;      标签：&#xA;        应用程序：{{ .Release.Name }}-前端&#xA;    规格：&#xA;      容器：&#xA;      - 名称：前端&#xA;        图片：前端服务&#xA;        端口：&#xA;        - 容器端口：80&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;修改&lt;code&gt;frontend/templates/service.yaml&lt;/code&gt;文件：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;api版本：v1&#xA;种类： 服务&#xA;元数据：&#xA;  名称：{{ .Release.Name }}-前端&#xA;规格：&#xA;  选择器：&#xA;    应用程序：{{ .Release.Name }}-前端&#xA;  端口：&#xA;    - 协议：TCP&#xA;      端口：80&#xA;      目标端口：80&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;&lt;a href=&#34;https://dev.to/syedasadrazadevops/deploying-a-microservices-application-using-helm-on-kubernetes-3h22#step-3-deploy -using-helm&#34;&gt;&lt;/a&gt;第 3 步：使用 Helm 进行部署&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;启动您的 Minikube 集群：&lt;br&gt;&lt;code&gt;minikube start&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;部署后端服务&lt;/strong&gt;&lt;br&gt;导航到后端目录并安装图表：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;helm 安装后端 ./backend&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;部署前端服务&lt;/strong&gt;&lt;br&gt;导航到前端目录并安装图表：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;helm 安装前端 ./frontend&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;&lt;a href=&#34;https://dev.to/syedasadrazadevops/deploying-a-microservices-application-using-helm-on-kubernetes-3h22#step-4-set -up-ingress&#34;&gt;&lt;/a&gt;第 4 步：设置 Ingress&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;为了向外部公开前端服务，我们将设置一个入口。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;在 Minikube 中启用 Ingress&lt;/strong&gt;&lt;br&gt;启用 ingress 插件：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;minikube 插件启用入口&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;创建入口资源&lt;/strong&gt;&lt;br&gt;创建&lt;code&gt;入口&lt;/code&gt;资源以将流量路由到前端服务：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;# ingress.yaml&#xA;api版本：networking.k8s.io/v1&#xA;种类： 入口&#xA;元数据：&#xA;  名称：前端入口&#xA;规格：&#xA;  规则：&#xA;  - 主机：frontend.local&#xA;    http：&#xA;      路径：&#xA;      - 小路： /&#xA;        路径类型：前缀&#xA;        后端：&#xA;          服务：&#xA;            名称：前端&#xA;            港口：&#xA;              数量：80&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;应用入口配置：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;kubectl apply -f ingress.yaml&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;向您的 &lt;code&gt;/etc/hosts&lt;/code&gt; 文件添加一个条目，以将 &lt;code&gt;frontend.local&lt;/code&gt; 映射到 Minikube IP：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;echo &#34;$(minikube ip) frontend.local&#34; | sudo tee -a /etc/hosts&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;&lt;a href=&#34;https://dev.to/syedasadrazadevops/deploying-a-microservices-application-using-helm-on-kubernetes-3h22#step-5-verify -the-deployment&#34;&gt;&lt;/a&gt;第 5 步：验证部署&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;导航至 &lt;code&gt;http://frontend.local&lt;/code&gt;，在浏览器中访问前端服务。您应该看到前端页面显示从后端服务获取的消息。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;&lt;a href=&#34;https://dev.to/syedasadrazadevops/deploying-a-microservices-application-using-helm-on-kubernetes-3h22#conclusion&#34;&gt;&lt;/ a&gt;结论&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;在本指南中，我们在 Kubernetes 上使用 Helm 部署了一个微服务应用程序，演示了创建 Helm 图表、管理依赖项和设置入口等中间概念。 Helm 简化了 Kubernetes 应用的部署和管理，使其成为云原生开发的强大工具。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote class=&#34;wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow&#34;&gt;&#xA;&lt;p&gt;通过分享本教程，您可以向 CNCF 社区提供有价值的技术内容，帮助其他人了解并利用 Helm 进行 Kubernetes 部署。&lt;/p&gt;&#xA;&lt;/块引用&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;</description>
      <pubDate>Thu, 08 Aug 2024 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【The technical complexities of decoupled authorization】解耦授权的技术复杂性</title>
      <link>https://www.cncf.io/blog/2024/08/07/the-technical-complexities-of-decoupled-authorization/</link>
      <description>【&lt;p&gt;&lt;em&gt;Member post originally published on the &lt;a href=&#34;https://www.cerbos.dev/blog/technical-complexities-of-decoupled-authorization&#34;&gt;Cerbos blog&lt;/a&gt; by James Walker&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Decoupling authorization from your main application code makes authorization more scalable, easier to maintain, and simpler to integrate with your components. However, these benefits are difficult to realize if you don’t consciously plan for them within your authorization implementation.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Decoupled authorization can add new technical challenges that aren’t always apparent at the start of a project. In this article, you’ll explore some of the problems with decoupled authorization. You’ll also see a few useful strategies for avoiding these pitfalls so you can develop effective authorization solutions.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;What is decoupled authorization?&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.cerbos.dev/features-benefits-and-use-cases/decoupled-authorization&#34;&gt;Decoupled authorization&lt;/a&gt;&amp;nbsp;refers to separating your service’s authorization routines from your main application code.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In monolithic applications, authorization is handled by functions and classes that live inside your single codebase. Decoupled authorization refers to repositioning these components as a standalone service that your main code interfaces with. The interface normally consists of network calls to an API that the authorization component provides.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Decoupled authorization is often used to integrate external identity providers. You can delegate user account storage and permissions management to a platform that’s purpose-built for the task. Your application can make network requests to the platform whenever it needs to authorize an action.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This model keeps authorization logic separate from your application, making it more&amp;nbsp;&lt;a href=&#34;https://www.cerbos.dev/features-benefits-and-use-cases/testable-authorization&#34;&gt;testable&lt;/a&gt;&amp;nbsp;and easier to iterate upon in isolation. It also centralizes the implementation of authorization policies, ensuring all your services apply the same restrictions. Any new services you develop can reuse the decoupled authorization component without duplicating its logic. This isn’t possible when authorization is tightly coupled to specific codebases.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;&#xA;&lt;iframe loading=&#34;lazy&#34; title=&#34;Cerbos #2 - What is decoupled authorization?&#34; width=&#34;500&#34; height=&#34;281&#34; src=&#34;https://www.youtube.com/embed/ngr8VeO7AMk?feature=oembed&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; referrerpolicy=&#34;no-referrer&#34; allowfullscreen=&#34;&#34;&gt;&lt;/iframe&gt;&#xA;&lt;/div&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;Technical complexities when implementing decoupled authorization&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Decoupled authorization has clear advantages over inflexible authorization logic that’s written directly into application components. Decoupling authorization into its own service can increase overall complexity, though. You have to develop and maintain two services while ensuring they remain compatible with each other. Here are four specific kinds of technical complexity you’ll face.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:36px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-default&#34;&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-group is-style-border is-layout-constrained wp-block-group-is-layout-constrained&#34;&gt;&#xA;&lt;p class=&#34;is-style-spaced-uppercase&#34;&gt;Keep reading&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;A look at &lt;a href=&#34;https://www.cncf.io/online-programs/cloud-native-live-modernizing-authorization-from-basic-roles-to-decoupled-abac/&#34;&gt;modern authorization&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Understand the &lt;a href=&#34;https://www.cncf.io/online-programs/cncf-on-demand-webinar-understanding-the-open-source-cloud-native-security-landscape/&#34;&gt;cloud native security&lt;/a&gt; landscape (webinar)&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Read our &lt;a href=&#34;https://www.cncf.io/reports/cloud-native-security-whitepaper/&#34;&gt;Cloud Native Security Whitepaper&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Register for &lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/register/&#34;&gt;KubeCon + CloudNativeCon North America 2024&lt;/a&gt; today&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;Integration with the main application or service&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Plugging the decoupled authorization layer back into your main application can be harder than you think. Whereas authorization has historically been a synchronous process without side effects, decoupling introduces the potential for system failures when the authorization service can’t be reached or an unknown response is received.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The decoupled authorization component must be carefully integrated to ensure the implementation is reliable. The application will need to retry calls to the authorization layer that fail due to a flaky network, for example. When no response can be obtained, perhaps because the authorization component has failed, the app should deny the user’s request to prevent authorization being inadvertently granted.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Each app you develop will need to integrate the authorization layer before it can be consumed. These integrations should be backed by tests that verify the app correctly handles different authorization outcomes, such as grant, deny, and failure.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;Management of user accounts and permissions&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Decoupling authorization from application code doesn’t mean you can forget about user accounts and permissions. These still need to be managed by your authorization layer, either directly within your authorization component or with an external identity provider.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The service you use should be flexible enough to store all the user data you require. All but the simplest systems will require a granular permissions model with support for roles and groups. You’ll need a mechanism for setting up and maintaining this data, either via scriptable APIs for automated provisioning or an accessible web UI for human use.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Decoupling authorization without planning how you’ll manage user accounts can cause problems as you reintegrate your components into your application. Apps need a dependable mechanism for establishing the user’s identity, retrieving relevant attributes such as their team and project, and checking which permissions have been assigned. All this info has to be centralized across your services to preserve consistency.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;Handling data filtering and pagination&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Services that filter data and display results over multiple pages need to be adjusted so users are only shown the items they can interact with. For example, an API request for the first ten invoices in a system could expose a different set of items depending on the user: department leaders might only see invoices approved by their department, while accounting staff have unfiltered access.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;To achieve this, you’ll need to run your authorization policies against each item included in resource lists fetched by your application. The policies should verify that the items can be used in the current authorization context defined by the characteristics of the resource and the requesting user.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Unfortunately, performing authorization checks for lists of hundreds or thousands of records is often an inefficient process. It also has knock-on impacts on your pagination routines. When an item gets discarded because authorization is denied, a replacement must be loaded from the database to fill up the correct page size.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;To properly address this complexity, plan how you’ll integrate your data queries with your decoupled authorization policies. Select an authorization provider that includes features such as&amp;nbsp;&lt;a href=&#34;https://cerbos.dev/blog/filtering-data-using-authorization-logic&#34;&gt;query plans&lt;/a&gt;&amp;nbsp;to preemptively retrieve the list of resources that a given user can interact with. Use the plan to filter database queries at the point they’re made, instead of individually running authorization policies against each item in your result sets.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;Maintaining security and privacy&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Decoupled authorization&amp;nbsp;&lt;strong&gt;can&lt;/strong&gt;&amp;nbsp;create security weaknesses and privacy concerns. Any new service increases your threat perimeter and creates an additional target for attackers. Splitting authorization out of your application converts it into a standalone component that might be easier for bad actors to manipulate.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Traditional authorization models are invisible from outside your application. Authorization checks occur within the code, providing no opportunities for attackers to investigate their logic. Decoupled authorization can be more visible if your service isn’t properly protected. Network activity logs reveal the requests being made and the results obtained in response.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Insecure authorization APIs can leak data too. It’s vital to ensure your authorization service only reveals attributes that the user’s permitted to access. Otherwise, a rogue user or attacker could exfiltrate sensitive details by making direct calls to the authorization API.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;Ensuring scalability and reliability&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Authorization is a critical application component. It’s involved in almost every user interaction, demanding exceptional scalability and reliability. Poorly optimized authorization is a bottleneck that compromises your whole system’s performance.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Splitting authorization into its own service can increase latency as your apps have to wait for authorization checks to complete. Too many pending calls will increase congestion and lead to resource contention. If your authorization layer can’t scale with user activity, people will be left waiting at times of heavy usage.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Failure resilience is equally important. If authorization goes down, users won’t be able to log in or access functions that require permission checks. Authorization services should be deployed as multiple replicated instances to produce a fault tolerant architecture that can withstand individual instance crashes.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;Strategies for overcoming decoupled authorization complexity&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Decoupled authorization doesn’t have to be burdensome. You can mitigate complexity by sticking to proven strategies that promote an effective implementation. Building upon standard microservices patterns is a good starting point, but the following techniques offer specific best practices for splitting authorization from application code.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;Use industry-standard protocols and frameworks&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Integrating with industry-standard authorization protocols will increase your system’s interoperability and reduce the risk of oversights occurring. These well-known mechanisms let you centrally manage user identities and permission assignments, then consistently access the data from your services.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Supporting these technologies also gives your users a greater choice of sign-in options. They can bring their own identity from their favored platform, whether it’s Microsoft, Google, Apple, or another alternative. You can easily integrate these SSO options by using the same standards that they’re built upon.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;Favor prebuilt authorization platforms and services&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Building your own authorization platform is a daunting task. You’re responsible for checking your authorization logic and maintaining security standards. Selecting a dedicated platform such as&amp;nbsp;&lt;a href=&#34;https://www.cerbos.dev/&#34;&gt;Cerbos&lt;/a&gt;&amp;nbsp;gives you all the benefits of decoupled authorization without the complexity.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;These systems sit outside your stack and are integrated using their public APIs. You can register user accounts, handle logins, and set up authorization policies using&amp;nbsp;&lt;a href=&#34;https://www.cerbos.dev/features-benefits-and-use-cases/rbac&#34;&gt;RBAC&lt;/a&gt;,&amp;nbsp;&lt;a href=&#34;https://www.cerbos.dev/features-benefits-and-use-cases/abac&#34;&gt;ABAC&lt;/a&gt;&amp;nbsp;and&amp;nbsp;&lt;a href=&#34;https://www.cerbos.dev/features-benefits-and-use-cases/pbac&#34;&gt;PBAC&lt;/a&gt;. They remove the complexity of inventing your own mechanisms for storing, evaluating, and querying authorization logic.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;Seek specialized expertise and resources when you develop your own solutions&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Some systems demand their own authorization layers either because of their sensitivity or due to legacy compatibility requirements. Developing your own authorization solution can be the only option in these circumstances, but you don’t have to do it on your own.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Minimizing features and keeping code paths lean is a good way to lessen security dangers and remove complexity. After distilling your solution to its essential requirements, you can more readily compare it to reference architectures or invite an external review. Seeking an audit and penetration test from a specialized authorization security team can provide confidence that your system’s protected, allowing you to get back to building your business functionality.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Start developing your own solution by clearly listing the vital features it requires. Next, plan out how you’ll deploy your authorization service, protect it from unauthorized access, and scale it to achieve sustained performance. You can then start working on the technical implementation. Try referring to open source authorization platforms if you need more guidance as many of the challenges you’ll face will have already been encountered by others.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;Conclusion&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Decoupling authorization from the code of individual applications is a best practice that enforces consistent authorization logic across services, simplifies testing, and is more scalable when implemented correctly.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Nonetheless, too many software teams struggle to effectively utilize decoupled authorization because of the extra technical complexity it creates. Poorly planned implementations can be unreliable and difficult to maintain.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Proactively developing strategies to identify and address this complexity will let you build and scale a decoupled authz system for your next project. Involve project managers, developers, and service operators to canvass opinion on potential drawbacks of the approach. Once you’ve identified any problems, you can add relevant mitigations to your development plan.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The measures you choose can be specific technical changes, such as implementing rate limiting to improve&amp;nbsp;&lt;a href=&#34;https://www.cerbos.dev/features-benefits-and-use-cases/security-standards&#34;&gt;security&lt;/a&gt;, or more general steps that support your solution’s success. Extensive test suites, adoption of standardized protocols, and the use of expert guidance when needed all strip away the complexity of decoupled authz.&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;】&lt;p&gt;&lt;em&gt;成员帖子最初由 James Walker 在&lt;a href=&#34;https://www.cerbos.dev/blog/technical-complexities-of-de Coupled-authorization&#34;&gt;Cerbos 博客&lt;/a&gt;上发布&lt; /em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;将授权与主应用程序代码解耦，使授权更具可扩展性、更易于维护，并且更易于与组件集成。但是，如果您在授权实施中没有有意识地规划这些好处，则很难实现这些好处。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;解耦授权可能会带来新的技术挑战，而这些挑战在项目开始时并不总是显而易见。在本文中，您将探讨解耦授权的一些​​问题。您还将看到一些避免这些陷阱的有用策略，以便您可以开发有效的授权解决方案。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;什么是解耦授权？&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.cerbos.dev/features-benefits-and-use-cases/de Coupled-authorization&#34;&gt;解耦授权&lt;/a&gt;是指将服务的授权例程与主应用程序分离代码。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;在单体应用程序中，授权由位于单个代码库内的函数和类处理。解耦授权是指将这些组件重新定位为与主代码交互的独立服务。该接口通常由对授权组件提供的 API 的网络调用组成。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;解耦授权通常用于集成外部身份提供商。您可以将用户帐户存储和权限管理委托给专为该任务构建的平台。您的应用程序可以在需要授权操作时向平台发出网络请求。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;此模型将授权逻辑与您的应用程序分开，使其更具&lt;a href=&#34;https://www.cerbos.dev/features-benefits-and-use-cases/testable-authorization&#34;&gt;可测试性&lt;/a &gt; 并且更容易单独迭代。它还集中实施授权策略，确保您的所有服务都应用相同的限制。您开发的任何新服务都可以重用解耦的授权组件，而无需重复其逻辑。当授权与特定代码库紧密耦合时，这是不可能的。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio&#34;&gt;&lt;div class=&#34; wp-block-embed__wrapper&#34;&gt;&#xA;&lt;iframe loading=&#34;lazy&#34; title=&#34;Cerbos #2 - 什么是解耦授权？&#34;宽度=“500”高度=“281”src=“https://www.youtube.com/embed/ngr8VeO7AMk？feature=oembed”frameborder=“0”允许=“加速度计；自动播放；剪贴板写入；加密媒体; 画中画”referrerpolicy=&#34;no-referrer&#34;allowfullscreen=&#34;&#34;&gt;&lt;/iframe&gt;&#xA;&lt;/div&gt;&lt;/图&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;实现解耦授权时的技术复杂性&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;解耦授权明确与直接写入应用程序组件的不灵活的授权逻辑相比具有优势。不过，将授权解耦到其自己的服务中可能会增加整体复杂性。您必须开发和维护两项服务，同时确保它们相互兼容。以下是您将面临的四种特定的技术复杂性。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:36px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-default&#34;&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-group is-style-border is-layout-constrained wp-block-group-is-layout-constrained&#34;&gt;&#xA;&lt;p class=&#34;is-style-spaced-uppercase&#34;&gt;继续阅读&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;看看&lt;a href=&#34;https://www.cncf.io/online-programs/cloud-native-live-modernizing-authorization-from-basic-roles-to-de Coupled-abac/&#34;&gt;现代授权&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;了解&lt;a href=&#34;https://www.cncf.io/online-programs/cncf-on-demand-webinar-understanding-the-open-source-cloud-native-security-landscape/&#34;&gt;云原生安全&lt;/a&gt; 景观（网络研讨会）&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;阅读我们的&lt;a href=&#34;https://www.cncf.io/reports/cloud-native-security-whitepaper/&#34;&gt;云原生安全白皮书&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;立即报名参加&lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/register/&#34;&gt;KubeCon + CloudNativeCon North America 2024&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;与主应用程序或服务集成&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;将解耦的授权层重新插入到主应用程序中可能比您想象的要困难。虽然授权历来是一个没有副作用的同步过程，但当无法访问授权服务或收到未知响应时，解耦可能会导致系统故障。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;解耦的授权组件必须仔细集成，以确保实现的可靠。例如，应用程序需要重试对由于网络不稳定等原因而失败的授权层的调用。当无法获得响应时，可能是因为授权组件失败，应用程序应该拒绝用户的请求，以防止无意中授予授权。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;您开发的每个应用程序都需要集成授权层才能使用。这些集成应该得到测试的支持，以验证应用程序是否正确处理不同的授权结果，例如授权、拒绝和失败。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;用户帐户和权限的管理&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;将授权与应用程序代码解耦并不意味着您可以忘记用户帐户和权限。这些仍然需要由您的授权层管理，可以直接在您的授权组件内管理，也可以通过外部身份提供商进行管理。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;您使用的服务应该足够灵活，能够存储您需要的所有用户数据。除了最简单的系统之外，所有系统都需要一个支持角色和组的精细权限模型。哟您需要一种机制来设置和维护这些数据，可以通过用于自动配置的可编写脚本的 API，也可以通过供人类使用的可访问的 Web UI。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;在不规划如何管理用户帐户的情况下解耦授权可能会在您将组件重新集成到应用程序中时出现问题。应用程序需要可靠的机制来建立用户身份、检索相关属性（例如其团队和项目）以及检查已分配的权限。所有这些信息都必须集中在您的服务中以保持一致性。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;处理数据过滤和分页&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;需要调整过滤数据并在多个页面上显示结果的服务，以便用户仅看到他们可以交互的项目。例如，针对系统中前十张发票的 API 请求可能会根据用户公开一组不同的项目：部门领导可能只能看到其部门批准的发票，而会计人员则拥有未经过滤的访问权限。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;要实现此目标，您需要针对应用程序获取的资源列表中包含的每个项目运行授权策略。策略应验证这些项目是否可以在由资源和请求用户的特征定义的当前授权上下文中使用。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;不幸的是，对数百或数千条记录的列表执行授权检查通常是一个低效的过程。它还会对您的分页例程产生连锁影响。当某个项目因授权被拒绝而被丢弃时，必须从数据库加载替换项以填充正确的页面大小。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;为了正确解决这种复杂性，请规划如何将数据查询与解耦的授权策略集成。选择包含&lt;a href=&#34;https://cerbos.dev/blog/filtering-data-using-authorization-logic&#34;&gt;查询计划&lt;/a&gt;等功能的授权提供商，以抢先检索给定的用户可以与之交互。使用该计划在进行数据库查询时对其进行过滤，而不是针对结果集中的每个项目单独运行授权策略。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;维护安全和隐私&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;分离授权&lt;strong&gt;可能&lt;/strong&gt;会造成安全漏洞和隐私问题。任何新服务都会增加您的威胁范围，并为攻击者创造额外的目标。将授权从您的应用程序中分离出来，将其转换为一个独立的组件，这可能更容易被不良行为者操纵。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;传统的授权模型从应用程序外部是不可见的。授权检查发生在代码内，使攻击者没有机会调查其逻辑。如果您的服务没有得到适当的保护，解耦的授权可能会更加明显。网络活动日志版本处理正在发出的请求以及响应中获得的结果。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;不安全的授权 API 也会泄露数据。确保您的授权服务仅显示用户允许访问的属性至关重要。否则，恶意用户或攻击者可能会通过直接调用授权 API 来泄露敏感详细信息。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;确保可扩展性和可靠性&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;授权是一个关键的应用程序组件。它几乎涉及所有用户交互，需要卓越的可扩展性和可靠性。授权优化不佳是影响整个系统性能的瓶颈。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;将授权拆分到自己的服务中可能会增加延迟，因为您的应用必须等待授权检查完成。过多的待处理调用会增加拥塞并导致资源争用。如果您的授权层无法随着用户活动而扩展，那么人们在大量使用时将不得不等待。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;故障恢复能力同样重要。如果授权中断，用户将无法登录或访问需要权限检查的功能。授权服务应部署为多个复制实例，以生成能够承受单个实例崩溃的容错架构。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;克服解耦授权复杂性的策略&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;解耦授权不一定是繁重的。您可以通过坚持促进有效实施的行之有效的策略来降低复杂性。基于标准微服务模式构建是一个很好的起点，但以下技术提供了从应用程序代码中分离授权的具体最佳实践。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;使用行业标准协议和框架&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;与行业标准授权协议集成将提高系统的互操作性并降低发生疏忽的风险。这些众所周知的机制可让您集中管理用户身份和权限分配，然后一致地访问您的服务中的数据。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;支持这些技术还为您的用户提供了更多的登录选项选择。他们可以从自己喜欢的平台带来自己的身份，无论是微软、谷歌、苹果还是其他替代平台。您可以使用构建这些 SSO 选项所依据的相同标准轻松集成这些 SSO 选项。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;青睐预构建的授权平台和服务&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;建立自己的授权平台是一项艰巨的任务。您负责检查授权逻辑并维护安全标准。选择 &lt;a href=&#34;https://www.cerbos.dev/&#34;&gt;Cerbos&lt;/a&gt; 等专用平台可为您提供解耦授权的所有优势，且不会增加复杂性。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;这些系统位于您的堆栈之外并使用其公共 API 进行集成。您可以使用 &lt;a href=&#34;https://www.cerbos.dev/features-benefits-and-use-cases/rbac&#34;&gt;RBAC&lt;/a&gt; 注册用户帐户、处理登录并设置授权策略，&lt; a href=&#34;https://www.cerbos.dev/features-benefits-and-use-cases/abac&#34;&gt;ABAC&lt;/a&gt; 和 &lt;a href=&#34;https://www.cerbos.dev/features-好处和用例/pbac&#34;&gt;PBAC&lt;/a&gt;。它们消除了发明自己的存储、评估和查询授权逻辑机制的复杂性。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;在开发自己的解决方案时寻求专业知识和资源&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;一些系统需要自己的授权层，要么是因为它们的敏感性，要么是因为遗留的兼容性要求。在这些情况下，开发自己的授权解决方案可能是唯一的选择，但您不必自己这样做。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;最小化功能并保持代码路径精简是减少安全危险和消除复杂性的好方法。在根据基本要求提炼您的解决方案后，您可以更轻松地将其与参考架构进行比较或邀请外部审查。寻求专业授权安全团队的审核和渗透测试可以让您确信您的系统受到保护，从而使您能够重新构建业务功能。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;通过清楚地列出所需的重要功能来开始开发您自己的解决方案。接下来，规划如何部署授权服务，防止未经授权的访问，并扩展它以实现持续的性能。然后您可以开始进行技术实施。如果您需要更多指导，请尝试参考开源授权平台，因为您将面临的许多挑战其他人已经遇到过。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;结论&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;将授权与单个应用程序的代码解耦是一种最佳实践，它可以在服务之间强制执行一致的授权逻辑，简化测试，并且在正确实施时更具可扩展性。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;尽管如此，太多的软件团队都在努力有效地利用解耦授权，因为它会带来额外的技术复杂性。计划不周的实施可能不可靠且难以维护。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;积极制定策略来识别和解决这种复杂性将使您能够为下一个项目构建和扩展解耦的授权系统。让项目经理、开发人员和服务运营商参与进来，就该方法的潜在缺点征求意见。一旦发现任何问题，您就可以将相关的缓解措施添加到您的开发计划中。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;您选择的措施可以是具体的技术变更，例如实施速率限制以改进&lt;a href=&#34;https://www.cerbos.dev/features-benefits-and-use-cases/security-standards&#34;&gt;安全性&lt;/a&gt;，或更一般的支持您的解决方案的步骤。的成功。广泛的测试套件、标准化协议的采用以及在需要时使用专家指导都消除了解耦授权的复杂性。&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;</description>
      <pubDate>Tue, 06 Aug 2024 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Installing multiple helm charts in one go [Approach 3 – using simple bash utility]】一次性安装多个 Helm Chart [方法 3 – 使用简单的 bash 实用程序]</title>
      <link>https://www.cncf.io/blog/2024/08/06/installing-multiple-helm-charts-in-one-go-approach-3-using-simple-bash-utility/</link>
      <description>【&lt;p&gt;&lt;em&gt; Community post originally published on &lt;a href=&#34;https://dev.to/aws-builders/installing-multiple-helm-charts-in-one-go-approach-3-using-simple-bash-utility-2795&#34;&gt;Dev.to&lt;/a&gt; by Sunny Bhambhani&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In this article, we will be talking about Approach 3 i.e. how to get multiple helm charts installed using a simple bash utility.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;If you haven’t read the previous article where I discussed other approaches, feel free to read it over.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;Ref:&amp;nbsp;&lt;a href=&#34;https://dev.to/aws-builders/installing-multiple-helm-charts-in-one-go-approach-1-5d1p&#34;&gt;Installing multiple helm charts in one go [Approach 1 – using parent/child charts]&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Ref:&amp;nbsp;&lt;a href=&#34;https://dev.to/aws-builders/installing-multiple-helm-charts-in-one-go-approach-2-using-helmfile-4e4h&#34;&gt;Installing multiple helm charts in one go [Approach 2 – using helmfile]&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Motive&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Why I thought of a simple bash utility?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;In some of the air-gapped environments it is sometimes a bit difficult to use the tools/utilities available because moving things inside an air-gapped environment is a challenge.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Some of the environments are so secure that one may need to follow a whole process of getting all the security clearances and approval before using a tool/utility, which altogether is a nightmare.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;I chose bash, the reason being it is pretty common among engineers and it is easily understandable.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;The source code can be found here:&amp;nbsp;&lt;a href=&#34;https://github.com/sunnybhambhani/helmister&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://github.com/sunnybhambhani/helmister&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;You can copy it, and tweak it based on your requirements.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;PS: I chose a name for this utility as well&amp;nbsp;&lt;code&gt;helmister&lt;/code&gt;&amp;nbsp;or&amp;nbsp;&lt;code&gt;helm-minister&lt;/code&gt;&amp;nbsp;but you can call it whatever you want 🙂&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;A running Kubernetes cluster with proper permissions, here I have used minikube.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;code&gt;kubectl&lt;/code&gt;&amp;nbsp;and&amp;nbsp;&lt;code&gt;helm&lt;/code&gt;&amp;nbsp;installed on your machine to interact with the Kubernetes cluster.&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;Ref:&amp;nbsp;&lt;a href=&#34;https://kubernetes.io/docs/tasks/tools/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://kubernetes.io/docs/tasks/tools/&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Ref:&amp;nbsp;&lt;a href=&#34;https://helm.sh/docs/intro/install/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://helm.sh/docs/intro/install/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;A clone of helmister repository.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;yq(required) and cowsay(optional) packages installed on your machine.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:36px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-default&#34;&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-group is-style-border is-layout-constrained wp-block-group-is-layout-constrained&#34;&gt;&#xA;&lt;p class=&#34;is-style-spaced-uppercase&#34;&gt;Keep reading&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;Verify the &lt;a href=&#34;https://www.cncf.io/blog/2022/11/24/verify-the-integrity-of-the-helm-charts-stored-in-oci-compliant-registries-as-oci-artifacts/&#34;&gt;integrity of Helm Charts&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Use Helm Charts for &lt;a href=&#34;https://www.cncf.io/blog/2021/03/23/quick-application-deployments-on-microk8s-using-helm-charts/&#34;&gt;quick app deployment on MicroK8s&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.cncf.io/training/certification/software-conformance/&#34;&gt;Get certified&lt;/a&gt; in Kubernetes&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Register for &lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/register/&#34;&gt;KubeCon + CloudNativeCon North America 2024&lt;/a&gt; today&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Helmister&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;This is a small bash utility that can help to install and uninstall multiple helm charts in one go. The idea is inspired by&amp;nbsp;&lt;code&gt;helmfile&lt;/code&gt;.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Its usage is quite simple, just run the utility followed by the option like install or uninstall i.e.&amp;nbsp;&lt;code&gt;./helmister [install/uninstall]&lt;/code&gt;.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Under the hood, it calls&amp;nbsp;&lt;code&gt;helm&lt;/code&gt;&amp;nbsp;binary. Therefore it is kind of a wrapper around&amp;nbsp;&lt;code&gt;helm&lt;/code&gt;.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;It consumes a&amp;nbsp;&lt;code&gt;config.yaml&lt;/code&gt;&amp;nbsp;file which contains all the necessary details about the releases, and common parameters.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;This supports both&amp;nbsp;&lt;code&gt;oci://&lt;/code&gt;&amp;nbsp;and&amp;nbsp;&lt;code&gt;https://&lt;/code&gt;&amp;nbsp;helm registries.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;PS: In the future, I am planning to add some more options/functionalities to this.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Directory structure&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;.&#xA;├── config.yaml&#xA;├── helmister&#xA;├── logs&#xA;│   ├── archive&#xA;│   │   └── helmister_20240227_170201.tar.gz&#xA;│   └── helmister.log&#xA;├── README.md&#xA;└── values&#xA;    ├── argo-cd.yaml&#xA;    └── nginx-values.yaml&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;em&gt;helmister&lt;/em&gt;, this is the script written in bash you can just cat and see what all things it contains.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;em&gt;config.yaml&lt;/em&gt;, this is the main configuration file or you can call the state file which contains the list of all releases you want to install in a cluster, plus it also contains some additional key:value pairs that are generic and common across all the releases. I first kept this configuration file in csv format, but later decided to convert it to yaml because it is more readable.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;em&gt;logs&lt;/em&gt;, this is a directory that holds the logs of this utility, it contains the information about the execution of the last iteration, plus any archived/past logs (if required for reference).&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;em&gt;README.md&lt;/em&gt;, contains bit of a documentation about this utility, and what options are present.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;em&gt;values&lt;/em&gt;, this is the directory where all the values files are placed (it can be anywhere in your system but for simplicity, I have placed them in the same directory).&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Now let’s talk about&amp;nbsp;&lt;code&gt;config.yaml&lt;/code&gt;&amp;nbsp;which is the main ingredient.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;config.yaml&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;dry_run: false&#xA;create_namespace: true&#xA;wait: false&#xA;timeout: false # If true, defaults to 20 mins&#xA;charts:&#xA;  - release_name: nginx&#xA;    chart_name: nginx&#xA;    chart_repo: oci://registry-1.docker.io/bitnamicharts&#xA;    values_file: values/nginx-values.yaml&#xA;  - release_name: argocd&#xA;    chart_name: argo-cd&#xA;    chart_repo: https://argoproj.github.io/argo-helm&#xA;    values_file: values/argo-cd.yaml&#xA;    version: 6.4.0&#xA;    namespace: argo-cd&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;The initial key:value pairs are common across all the releases.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;em&gt;charts&lt;/em&gt;, is an array that contains a list of what all releases need to be installed in a Kubernetes cluster.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;em&gt;dry_run&lt;/em&gt;, it is a boolean [true or false], and if true, none of the Kubernetes resources will be created it will just do a dry_run.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;em&gt;create_namespace&lt;/em&gt;, it is a boolean [true or false], and if true it will automatically create a namespace for the release specified in the charts array.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;em&gt;wait&lt;/em&gt;, it is a boolean [true or false], and if true it acts similar to&amp;nbsp;&lt;code&gt;helm --wait&lt;/code&gt;&amp;nbsp;wherein the shell will be kept occupied until all the Kubernetes resources are created.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;em&gt;timeout&lt;/em&gt;, it is a boolean [true or false], and if true it acts similar to&amp;nbsp;&lt;code&gt;helm --timeout=20m&lt;/code&gt;&amp;nbsp;i.e. if all the resources are not created within 20 mins the execution will fail. By default, I have kept the timeout as 20 minutes which is more than enough.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;em&gt;charts&lt;/em&gt;, it is an array that contains details around individual releases. Except for version and namespace all the key:value pairs are mandatory.&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;em&gt;release_name&lt;/em&gt;, this is the name of the release.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;em&gt;chart_name&lt;/em&gt;, this is the name of the chart that needs to be installed.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;em&gt;chart_repo&lt;/em&gt;, this is the helm registry where the chart is located. It can be any&amp;nbsp;&lt;code&gt;oci://&lt;/code&gt;&amp;nbsp;or&amp;nbsp;&lt;code&gt;https://&lt;/code&gt;&amp;nbsp;registry.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;em&gt;values_file&lt;/em&gt;, which contains the path of the values file for individual releases.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;em&gt;version&lt;/em&gt;, this is the version of the chart that needs to be installed. This is optional and if not provided, It will consider the&amp;nbsp;&lt;code&gt;latest&lt;/code&gt;&amp;nbsp;chart version.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;em&gt;namespace&lt;/em&gt;, this is where the chart will be installed. This is optional as well and if not provided it will be installed in the&amp;nbsp;&lt;code&gt;default&lt;/code&gt;&amp;nbsp;namespace.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Let’s see this in action&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;I will use the same&amp;nbsp;&lt;code&gt;config.yaml&lt;/code&gt;&amp;nbsp;which will install one helm release from an&amp;nbsp;&lt;code&gt;oci://&lt;/code&gt;&amp;nbsp;registry in&amp;nbsp;&lt;code&gt;default&lt;/code&gt;&amp;nbsp;namespace (since I haven’t specified any namespace for that release) and another one from&amp;nbsp;&lt;code&gt;https://&lt;/code&gt;&amp;nbsp;registry in&amp;nbsp;&lt;code&gt;argo-cd&lt;/code&gt;&amp;nbsp;namespace. Note the version as well for nginx, there as well I haven’t specified any version, it will pick the latest available one automatically.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;This is my cluster’s current status.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;$ k get ns&#xA;NAME              STATUS   AGE&#xA;default           Active   28s&#xA;kube-node-lease   Active   28s&#xA;kube-public       Active   29s&#xA;kube-system       Active   29s&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;$ helm list -A&#xA;NAME    NAMESPACE       REVISION        UPDATED STATUS  CHART   APP VERSION&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;$ ./helmister install&#xA;[2024-07-23 15:02:47] [INFO] Using file: config.yaml&#xA; ____________________________&#xA;&amp;lt; Helmister, Install charts! &amp;gt;&#xA; ----------------------------&#xA;   \&#xA;    \&#xA;        .--.&#xA;       |o_o |&#xA;       |:_/ |&#xA;      //   \ \&#xA;     (|     | )&#xA;    /&#39;\_   _/`\&#xA;    \___)=(___/&#xA;&#xA;[2024-07-23 15:02:47] [INFO] Generic/common values based on config.yaml file&#xA;[2024-07-23 15:02:48] [INFO] Dry Run: false&#xA;[2024-07-23 15:02:48] [INFO] Create Namespace: true&#xA;[2024-07-23 15:02:48] [INFO] Wait: false&#xA;[2024-07-23 15:02:48] [INFO] Timeout: false&#xA;[2024-07-23 15:02:48] [INFO] ****************************&#xA;[2024-07-23 15:02:48] [INFO] Chart specific values based on config.yaml file&#xA;[2024-07-23 15:02:48] [INFO] Release Name: nginx&#xA;[2024-07-23 15:02:48] [INFO] Chart Name: nginx&#xA;[2024-07-23 15:02:48] [INFO] Chart Repo: oci://registry-1.docker.io/bitnamicharts&#xA;[2024-07-23 15:02:48] [INFO] Values File: values/nginx-values.yaml&#xA;[2024-07-23 15:02:48] [INFO] Version: null&#xA;[2024-07-23 15:02:48] [INFO] Namespace: null&#xA;[2024-07-23 15:02:48] [INFO] ****************************&#xA;[2024-07-23 15:02:48] [INFO] Installing nginx with release name nginx from oci://registry-1.docker.io/bitnamicharts with version null using values file: values/nginx-values.yaml in default namespace&#xA;...&#xA;...&#xA;OUTPUT TRIMMED&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;Actual stdout output can be&amp;nbsp;&lt;a href=&#34;https://github.com/sunnybhambhani/helmister/blob/main/artifacts/sample_logs/during_installation_on_stdout.log&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;found here&lt;/a&gt;.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Here you will see that it provides all the minute details of what exactly it is doing.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;For example: Generic values&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;Here I have marked create_namespace as true because I don’t already have argo-cd namespace wherein I want to install argocd release.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;[2024-07-23 15:02:47] [INFO] Generic/common values based on config.yaml file&#xA;[2024-07-23 15:02:48] [INFO] Dry Run: false&#xA;[2024-07-23 15:02:48] [INFO] Create Namespace: true&#xA;[2024-07-23 15:02:48] [INFO] Wait: false&#xA;[2024-07-23 15:02:48] [INFO] Timeout: false&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;Next, you will see, chart/release specific values of all the items in charts array one by one:&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;[2024-07-23 15:03:31] [INFO] Chart specific values based on config.yaml file&#xA;[2024-07-23 15:03:31] [INFO] Release Name: argocd&#xA;[2024-07-23 15:03:31] [INFO] Chart Name: argo-cd&#xA;[2024-07-23 15:03:31] [INFO] Chart Repo: https://argoproj.github.io/argo-helm&#xA;[2024-07-23 15:03:31] [INFO] Values File: values/argo-cd.yaml&#xA;[2024-07-23 15:03:31] [INFO] Version: 6.4.0&#xA;[2024-07-23 15:03:31] [INFO] Namespace: argo-cd&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;Here I have explicitly added an additional check that will check if the pods are up and healthy (this is just specific to pods it won’t consider any other k8s objects).&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;It will continuously check for next 20mins and will check every 5 secs. If the pods are still in non-running state it will terminate the process.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;[2024-07-23 15:03:47] [WARN] Pods for release argocd are not yet in Running state, checking again in 5 seconds&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;Once all the pods are in running state and it has deployed all the releases it will show a successful message.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;[2024-07-23 15:05:20] [INFO] All actions completed successfully&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;Once this is done, if required you can see the logs as well from the logs directory. A sample can be&amp;nbsp;&lt;a href=&#34;https://github.com/sunnybhambhani/helmister/blob/main/artifacts/sample_logs/actual_log_file.log&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;found here&lt;/a&gt;.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;And here is my cluster’s current status now:&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;$ helm list -A&#xA;NAME    NAMESPACE       REVISION        UPDATED                                 STATUS          CHART           APP VERSION&#xA;argocd  argo-cd         1               2024-07-23 15:03:34.46715742 +0530 IST  deployed        argo-cd-6.4.0   v2.10.1&#xA;nginx   default         1               2024-07-23 15:02:53.590367521 +0530 IST deployed        nginx-18.1.5    1.27.0&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;$ k get ns&#xA;NAME              STATUS   AGE&#xA;argo-cd           Active   58m&#xA;default           Active   62m&#xA;kube-node-lease   Active   62m&#xA;kube-public       Active   62m&#xA;kube-system       Active   62m&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;$ k get pods -n argo-cd&#xA;NAME                                                READY   STATUS    RESTARTS   AGE&#xA;argocd-application-controller-0                     1/1     Running   0          58m&#xA;argocd-applicationset-controller-68cd75bc89-d4q8x   1/1     Running   0          58m&#xA;argocd-dex-server-84b5bbdcbf-c4qv2                  1/1     Running   0          58m&#xA;argocd-notifications-controller-7bc55c495d-xz6gt    1/1     Running   0          58m&#xA;argocd-redis-5d5cdcfd54-2rx26                       1/1     Running   0          58m&#xA;argocd-repo-server-756ff4cd7d-rpvh7                 1/1     Running   0          58m&#xA;argocd-server-7587d49b7b-9h47l                      1/1     Running   0          58m&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;$ k get pods -n default&#xA;NAME                     READY   STATUS    RESTARTS   AGE&#xA;nginx-569b6bc698-48qqt   1/1     Running   0          59m&#xA;nginx-569b6bc698-9qzpv   1/1     Running   0          59m&#xA;nginx-569b6bc698-wflrj   1/1     Running   0          59m&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;If you want to uninstall it, simply do:&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;$ ./helmister uninstall&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;It will get everything cleaned for all the releases that are specified in&amp;nbsp;&lt;code&gt;config.yaml&lt;/code&gt;.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;The sample log can be&amp;nbsp;&lt;a href=&#34;https://github.com/sunnybhambhani/helmister/blob/main/artifacts/sample_logs/during_uninstallation_on_stdout.log&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;found here&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Feel free to use it, and tweak it based on your requirements.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I will soon add some more functionalities to it.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Happy learning!&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;References:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;Google/Stackoverflow/Linux man pages/etc&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;】&lt;p&gt;&lt;em&gt; 社区帖子最初发布于 &lt;a href=&#34;https://dev.to/aws-builders/installing-multiple-helm-charts-in-one-go-approach-3-using-simple- bash-utility-2795&#34;&gt;Dev.to&lt;/a&gt; 作者：Sunny Bhambhani&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;在本文中，我们将讨论方法 3，即如何使用简单的 bash 实用程序安装多个 Helm Chart。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;如果您还没有阅读过我讨论其他方法的上一篇文章，请随时阅读。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;参考：&lt;a href=&#34;https://dev.to/aws-builders/installing-multiple-helm-charts-in-one-go-approach-1-5d1p&#34;&gt;一次性安装多个 Helm Chart [方法 1 – 使用父/子图表]&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;参考：&lt;a href=&#34;https://dev.to/aws-builders/installing-multiple-helm-charts-in-one-go-approach-2-using-helmfile-4e4h&#34;&gt;安装多个 helm一次性绘制图表[方法 2 – 使用 helmfile]&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;动机&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;为什么我想到了一个简单的 bash 实用程序？&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;在某些气隙环境中，使用可用的工具/实用程序有时会有点困难，因为在气隙环境中移动物体是一项挑战。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;某些环境非常安全，以至于人们可能需要在使用工具/实用程序之前遵循获得所有安全许可和批准的整个过程，这完全是一场噩梦。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;我选择了 bash，因为它在工程师中很常见，而且很容易理解。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;源代码可在此处找到：&lt;a href=&#34;https://github.com/sunnybhambhani/helmister&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://github.com/sunnybhambhani/赫尔米斯特&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;您可以复制它，并根据您的要求进行调整。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;PS：我还为该实用程序选择了一个名称 &lt;code&gt;helmister&lt;/code&gt; 或 &lt;code&gt;helm-minister&lt;/code&gt;，但您可以随意命名它 🙂&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;先决条件&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;一个正在运行的具有适当权限的 Kubernetes 集群，这里我使用了 minikube。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;code&gt;kubectl&lt;/code&gt; 和 &lt;code&gt;helm&lt;/code&gt; 安装在您的计算机上，用于与 Kubernetes 集群交互。&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;参考：&lt;a href=&#34;https://kubernetes.io/docs/tasks/tools/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://kubernetes.io/docs/tasks/tools /&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;参考：&lt;a href=&#34;https://helm.sh/docs/intro/install/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://helm.sh/docs/intro/install /&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;helmister 存储库的克隆。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;您的计算机上安装了 yq（必需）和owsay（可选）软件包。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:36px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-default&#34;&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-group is-style-border is-layout-constrained wp-block-group-is-layout-constrained&#34;&gt;&#xA;&lt;p class=&#34;is-style-spaced-uppercase&#34;&gt;继续阅读&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;验证&lt;a href=&#34;https://www.cncf.io/blog/2022/11/24/verify-the-integrity-of-the-helm-charts-stored-in-oci-company- registries-as-oci-artifacts/&#34;&gt;Helm Charts 的完整性&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;将 Helm Chart 用于&lt;a href=&#34;https://www.cncf.io/blog/2021/03/23/quick-application-deployments-on-microk8s-using-helm-charts/&#34;&gt;快应用在MicroK8s上部署&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.cncf.io/training/certification/software-conformance/&#34;&gt;获得 Kubernetes 认证&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;立即报名参加&lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/register/&#34;&gt;KubeCon + CloudNativeCon North America 2024&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;赫尔米斯特&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;这是一个小型 bash 实用程序，可以帮助一次性安装和卸载多个 Helm Chart。这个想法的灵感来自&lt;code&gt;helmfile&lt;/code&gt;。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;其用法非常简单，只需运行该实用程序，然后选择安装或卸载等选项，即&lt;code&gt;./helmister [安装/卸载]&lt;/code&gt;。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;在底层，它调用 &lt;code&gt;helm&lt;/code&gt; 二进制文件。因此，它是 &lt;code&gt;helm&lt;/code&gt; 的包装器。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;它使用一个 &lt;code&gt;config.yaml&lt;/code&gt; 文件，其中包含有关版本和常用参数的所有必要详细信息。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;这支持 &lt;code&gt;oci://&lt;/code&gt; 和 &lt;code&gt;https://&lt;/code&gt; helm 注册表。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;PS：将来，我计划为此添加更多选项/功能。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;目录结构&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;。&#xA;├── 配置.yaml&#xA;├── 赫尔米斯特&#xA;├── 日志&#xA;│ ├── 存档&#xA;│ │ └── helmister_20240227_170201.tar.gz&#xA;│ └── helmister.log&#xA;├── 自述文件.md&#xA;└── 价值观&#xA;    ├── argo-cd.yaml&#xA;    └── nginx-values.yaml&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;em&gt;helmister&lt;/em&gt;，这是用 bash 编写的脚本，您可以直接查看它包含的所有内容。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;em&gt;config.yaml&lt;/em&gt;，这是主配置文件，或者您可以调用状态文件，其中包含要在集群中安装的所有版本的列表，此外它还包含一些附加密钥：所有版本中通用且通用的值对。我首先将此配置文件保留为 csv 格式，但后来决定将其转换为 yaml，因为它更具可读性。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;em&gt;logs&lt;/em&gt;，这是保存该实用程序日志的目录，它包含有关上次迭代执行的信息，以及任何存档/过去的日志（如果需要参考）。&lt; /里&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;em&gt;README.md&lt;/em&gt;，包含有关此实用程序的一些文档以及存在的选项。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;em&gt;values&lt;/em&gt;，这是放置所有值文件的目录（它可以位于系统中的任何位置，但为了简单起见，我有e 将它们放在同一目录中）。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;现在我们来谈谈主要成分&lt;code&gt;config.yaml&lt;/code&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;config.yaml&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;dry_run: false&#xA;创建命名空间：true&#xA;等待：假&#xA;timeout: false # 如果为 true，则默认为 20 分钟&#xA;图表：&#xA;  - 发布名称：nginx&#xA;    图表名称：nginx&#xA;    Chart_repo：oci://registry-1.docker.io/bitnamicharts&#xA;    值文件：值/nginx-values.yaml&#xA;  - 发布名称：argocd&#xA;    图表名称： argo-cd&#xA;    Chart_repo：https://argoproj.github.io/argo-helm&#xA;    值文件：值/argo-cd.yaml&#xA;    版本：6.4.0&#xA;    命名空间：argo-cd&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;初始键:值对在所有版本中都是通用的。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;em&gt;charts&lt;/em&gt;是一个数组，其中包含 Kubernetes 集群中需要安装的所有版本的列表。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;em&gt;dry_run&lt;/em&gt;，它是一个布尔值 [true 或 false]，如果为 true，则不会创建任何 Kubernetes 资源，它只会执行 dry_run。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;em&gt;create_namespace&lt;/em&gt;，它是一个布尔值[true或false]，如果为true，它将自动为图表数组中指定的版本创建命名空间。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;em&gt;wait&lt;/em&gt;，它是一个布尔值 [true 或 false]，如果为 true，则其行为类似于 &lt;code&gt;helm --wait&lt;/code&gt;，其中 shell 将保持占用状态，直到所有Kubernetes 资源已创建。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;em&gt;timeout&lt;/em&gt;，它是一个布尔值 [true 或 false]，如果为 true，则其行为类似于 &lt;code&gt;helm --timeout=20m&lt;/code&gt;，即如果未创建所有资源20分钟内执行将失败。默认情况下，我将超时设置为 20 分钟，这已经足够了。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;em&gt;图表&lt;/em&gt;，它是一个包含各个版本详细信息的数组。除了版本和命名空间之外，所有键：值对都是必需的。&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;em&gt;release_name&lt;/em&gt;，这是版本的名称。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;em&gt;chart_name&lt;/em&gt;，这是需要安装的图表的名称。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;em&gt;chart_repo&lt;/em&gt;，这是图表所在的 helm 注册表。它可以是任何 &lt;code&gt;oci://&lt;/code&gt; 或 &lt;code&gt;https://&lt;/code&gt; 注册表。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;em&gt;values_file&lt;/em&gt;，其中包含各个版本的值文件的路径。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;em&gt;版本&lt;/em&gt;，这是需要安装的图表版本。这是可选的，如果未提供，它将考虑&lt;code&gt;最新&lt;/code&gt;图表版本。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;em&gt;命名空间&lt;/em&gt;，这是图表安装的位置。这也是可选的，如果未提供，它将安装在&lt;code&gt;default&lt;/code&gt;命名空间中。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;让我们看看实际效果&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;我将使用相同的 &lt;code&gt;config.yaml&lt;/code&gt;，从 &lt;code&gt;oci://&lt;/code&gt; 注册表安装一个 helm 版本;&lt;code&gt;default&lt;/code&gt; 命名空间（因为我没有为该版本指定任何命名空间）以及 &lt;code&gt;https://&lt;/code&gt; &lt;code&gt;argo-cd&lt;/code&gt; 注册表中的另一个命名空间命名空间。还要注意 nginx 的版本，我也没有指定任何版本，它会自动选择最新的可用版本。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;这是我的集群的当前状态。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;$ k 获取 ns&#xA;姓名 身份 年龄&#xA;默认活动 28 秒&#xA;kube-node-lease 活跃 28s&#xA;kube-public 活跃 29s&#xA;kube-system 活跃 29s&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;$ helm list -A&#xA;名称 命名空间 修订版本 更新的状态图表 应用程序版本&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;$ ./helmister install&#xA;[2024-07-23 15:02:47] [INFO] 使用文件：config.yaml&#xA; ____________________________&#xA;&lt;赫尔米斯特，安装图表！ &gt;&#xA; ----------------------------&#xA;   \&#xA;    \&#xA;        .--.&#xA;       |o_o |&#xA;       |:_/ |&#xA;      // \ \&#xA;     (||)&#xA;    /&#39;\_ _/`\&#xA;    \___)=(___/&#xA;&#xA;[2024-07-23 15:02:47] [INFO] 基于 config.yaml 文件的通用/通用值&#xA;[2024-07-23 15:02:48] [INFO] 试运行： false&#xA;[2024-07-23 15:02:48] [INFO] 创建命名空间：true&#xA;[2024-07-23 15:02:48] [INFO] 等待：错误&#xA;[2024-07-23 15:02:48] [INFO] 超时： false&#xA;[2024-07-23 15:02:48] [信息]****************************&#xA;[2024-07-23 15:02:48] [INFO] 基于 config.yaml 文件绘制特定值的图表&#xA;[2024-07-23 15:02:48] [INFO] 版本名称：nginx&#xA;[2024-07-23 15:02:48] [INFO] 图表名称：nginx&#xA;[2024-07-23 15:02:48] [INFO] 图表存储库：oci://registry-1.docker.io/bitnamicharts&#xA;[2024-07-23 15:02:48] [INFO] 值文件：values/nginx-values.yaml&#xA;[2024-07-23 15:02:48] [INFO] 版本：空&#xA;[2024-07-23 15:02:48] [INFO] 命名空间：空&#xA;[2024-07-23 15:02:48] [信息]****************************&#xA;[2024-07-23 15:02:48] [INFO] 使用值文件：values/nginx-values.yaml 从 oci://registry-1.docker.io/bitnamicharts 安装版本为 null 且版本名为 nginx 的 nginx默认命名空间&#xA;...&#xA;...&#xA;输出已调整&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;实际的标准输出输出可以&lt;a href=&#34;https://github.com/sunnybhambhani/helmister/blob/main/artifacts/sample_logs/during_installation_on_stdout.log&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;找到在这里&lt;/a&gt;。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;在这里您将看到它提供了其具体操作的所有详细信息。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;例如：通用值&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;这里我将 create_namespace 标记为 true，因为我还没有 argocd 命名空间，我想在其中安装 argocd 版本。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;[2024-07-23 15:02:47] [INFO] 基于 config.yaml 文件的通用/通用值&#xA;[2024-07-23 15:02:48] [INFO] 试运行： false&#xA;[2024-07-23 15:02:48] [INFO] 创建命名空间：true&#xA;[2024-07-23 15:02:48] [INFO] 等待：错误&#xA;[2024-07-23 15:02:48] [INFO] 超时t：假&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;接下来，您将看到，图表数组中所有项目的具体值一一图表/发布：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;[2024-07-23 15:03:31] [INFO] 根据 config.yaml 文件绘制特定值的图表&#xA;[2024-07-23 15:03:31] [INFO] 版本名称：argocd&#xA;[2024-07-23 15:03:31] [INFO] 图表名称：argo-cd&#xA;[2024-07-23 15:03:31] [INFO] 图表存储库：https://argoproj.github.io/argo-helm&#xA;[2024-07-23 15:03:31] [INFO] 值文件：values/argo-cd.yaml&#xA;[2024-07-23 15:03:31] [信息] 版本：6.4.0&#xA;[2024-07-23 15:03:31] [INFO] 命名空间：argo-cd&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;在这里，我明确添加了一项额外检查，用于检查 pod 是否正常运行（这仅针对 pod，它不会考虑任何其他 k8s 对象）。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;它将在接下来的 20 分钟内持续检查，并且每 5 秒检查一次。如果 Pod 仍处于非运行状态，它将终止该进程。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;[2024-07-23 15:03:47] [警告] 用于发布 argocd 的 Pod 尚未处于运行状态，请在 5 秒后再次检查&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;一旦所有 Pod 都处于运行状态并且部署了所有版本，它将显示一条成功消息。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;[2024-07-23 15:05:20] [INFO] 所有操作均已成功完成&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;完成此操作后，如果需要，您还可以从日志目录中查看日志。可以在&lt;a href=&#34;https://github.com/sunnybhambhani/helmister/blob/main/artifacts/sample_logs/actual_log_file.log&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;此处找到示例&lt;/a &gt;.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;这是我的集群的当前状态：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;$ helm list -A&#xA;名称 命名空间 修订版本 更新的状态图表 应用程序版本&#xA;argocd argo-cd 1 2024-07-23 15:03:34.46715742 +0530 IST 部署 argo-cd-6.4.0 v2.10.1&#xA;nginx 默认 1 2024-07-23 15:02:53.590367521 +0530 IST 部署 nginx-18.1.5 1.27.0&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;$ k 获取 ns&#xA;姓名 身份 年龄&#xA;argo-cd 活跃 58m&#xA;默认活动 62m&#xA;kube-node-lease 活动 62m&#xA;kube-公共 活跃 62m&#xA;kube-系统活跃 62m&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;$ k 获取 pod -n argo-cd&#xA;名称就绪状态重新开始年龄&#xA;argocd-application-controller-0 1/1 运行 0 58m&#xA;argocd-applicationset-controller-68cd75bc89-d4q8x 1/1 运行 0 58m&#xA;argocd-dex-server-84b5bbdcbf-c4qv2 1/1 运行 0 58m&#xA;argocd-通知-控制器-7bc55c495d-xz6gt 1/1 运行 058m&#xA;argocd-redis-5d5cdcfd54-2rx26 1/1 运行 0 58m&#xA;argocd-repo-server-756ff4cd7d-rpvh7 1/1 运行 0 58m&#xA;argocd-server-7587d49b7b-9h47l 1/1 运行 0 58m&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;$ k 获取 pod -n 默认值&#xA;名称就绪状态重新开始年龄&#xA;nginx-569b6bc698-48qqt 1/1 运行 0 59m&#xA;nginx-569b6bc698-9qzpv 1/1 运行 0 59m&#xA;nginx-569b6bc698-wflrj 1/1 运行 0 59m&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;如果您想卸载它，只需执行以下操作：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;$ ./helmister卸载&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;它将清理 &lt;code&gt;config.yaml&lt;/code&gt; 中指定的所有版本的所有内容。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;可以&lt;a href=&#34;https://github.com/sunnybhambhani/helmister/blob/main/artifacts/sample_logs/during_uninstallation_on_stdout.log&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;找到示例日志在这里&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;随意使用它，并根据您的要求进行调整。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;我很快就会为其添加更多功能。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;祝你学习愉快！&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;参考文献：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;Google/Stackoverflow/Linux 手册页/等&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;</description>
      <pubDate>Mon, 05 Aug 2024 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【How to add OTEL instrumentation to a React Native app】如何将 OTEL 检测添加到 React Native 应用程序</title>
      <link>https://www.cncf.io/blog/2024/08/05/how-to-add-otel-instrumentation-to-a-react-native-app/</link>
      <description>【&lt;p&gt;&lt;em&gt;Member post by Jonathan Munz, Senior Software Engineer at Embrace&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXfnXewzc-STuTosuBqEISMQ0UR2crdRNtJheZPx2oQStH-eWkkLNxY6HDIbju3PmE4ncOBzUccieiU3jY8ZQohiky6LO2cOnLKoMmVTwFXekizPkjdYz4YJgzJxWUbHnJEMvSwXgQ-n1itCjIOOkE9e6jgi?key=ox94_nXkFlNpFM_ALZQA3w&#34; alt=&#34;image&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;React Native allows developers to build native mobile apps using Javascript and Typescript for both iOS and Android. With a web language as its core and native deployment built-in, React Native is a great way to build feature-rich mobile apps quickly with a fast developer onboarding cycle.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Today we’ll look at different ways a React Native developer could instrument observability in their mobile app using OpenTelemetry. Why use OpenTelemetry (OTel)? The OTel project allows developers to gain key insights about their applications using standardized signals, with no vendor lock-in. The portability and extensibility of OTel’s &lt;a href=&#34;https://opentelemetry.io/docs/concepts/signals/&#34;&gt;core signals&lt;/a&gt; allows you to measure and improve your application, whether it’s running in a Kubernetes cluster or as an Android app in a million different hands.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;The OpenTelemetry Demo project&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We’ll use the handy&lt;a href=&#34;https://opentelemetry.io/docs/demo/&#34;&gt; OpenTelemetry Demo&lt;/a&gt; as a starting point. This demo spins up a fictional “Astronomy Shop” to let you see how OpenTelemetry works on a distributed system. Currently, there is no mobile app included in the example, but if you follow the setup steps, you’ll be able to click around a storefront implemented in NextJS. The &lt;a href=&#34;https://opentelemetry.io/docs/demo/docker-deployment/&#34;&gt;Docker&lt;/a&gt; instructions are probably quickest to spin up the demo, which runs at&lt;a href=&#34;http://localhost:8080/&#34;&gt; http://localhost:8080&lt;/a&gt; by default:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXevv6wPi0s0gTkTI-q-rcqzedKNuwprV4Gs0fxkxZmd44PccuT5OfonGgtt14743lyhVlOxuDHEP0cU7myz-SerPePJAHEEDc3Hmg9lXgNK-bBDLaOjWccdfEXmQh-gxTKt4KoqcuI-iJrOda8OxWBIQbqd?key=ox94_nXkFlNpFM_ALZQA3w&#34; alt=&#34;OpenTelemetry demo&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Quick note: You can probably get away with running make start-minimal instead of make start from the demo’s Docker instructions. This will save resources, especially if you end up running the app on an emulator in the next section.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:36px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-default&#34;&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-group is-style-border is-layout-constrained wp-block-group-is-layout-constrained&#34;&gt;&#xA;&lt;p class=&#34;is-style-spaced-uppercase&#34;&gt;Keep reading&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;If you missed OTel Community Day, &lt;a href=&#34;https://www.cncf.io/reports/otel-community-day-2024/&#34;&gt;read all about it&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.cncf.io/online-programs/cncf-live-webinar-uncovering-hidden-otel-traces-leveraging-prometheus-in-a-standardized-manner/&#34;&gt;How to find&lt;/a&gt; hidden OTel traces (webinar)&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Unpack &lt;a href=&#34;https://www.cncf.io/online-programs/cloud-native-live-using-otel-distributed-tracing-for-real-time-observability/&#34;&gt;the magic of distributed tracing&lt;/a&gt; using OTel&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Register for &lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/register/&#34;&gt;KubeCon + CloudNativeCon North America 2024&lt;/a&gt; today&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;After clicking around the demo app for a bit, you can explore the telemetry it creates. For example, traces are exported to Grafana at&lt;a href=&#34;http://localhost:8080/grafana&#34;&gt; http://localhost:8080/grafana&lt;/a&gt;. By going to the Explore tab and filtering for spans from the frontend service, we can see that in fact we have a number of them generated based on our actions in the demo app:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXez3eBsYSuwFWq3ffbQjxS2OtrEehgC1khcqJEQNPeN2u8K_eOgrkByKTZh9YPp-ThP3qSNwx0Ka-TndwdIAvQ--Mx8Tkjw84ndNbgVh2QcqJ8hesMid_tUGw37TVP1CySbuQ75e4FTOT0-3nn2BDbzK4c7?key=ox94_nXkFlNpFM_ALZQA3w&#34; alt=&#34;Dashboard&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Looking deeper at the code for the web app, we see that all this telemetry was generated using OpenTelemetry packages that are being setup in &lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-demo/blob/main/src/frontend/utils/telemetry/FrontendTracer.ts&#34;&gt;FrontendTracer.ts&lt;/a&gt;, specifically:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;The OpenTelemetry bits needed to get the traces out to Grafana, including a &lt;a href=&#34;https://opentelemetry.io/docs/concepts/signals/traces/#tracer-provider&#34;&gt;Tracer Provider&lt;/a&gt;, &lt;a href=&#34;https://opentelemetry.io/docs/specs/otel/trace/sdk/#span-processor&#34;&gt;Span Processor&lt;/a&gt;, and &lt;a href=&#34;https://opentelemetry.io/docs/concepts/components/#exporters&#34;&gt;Exporter&lt;/a&gt;. A good primer on how these components fit together can be found in the&lt;a href=&#34;https://opentelemetry.io/docs/concepts/components/&#34;&gt; OpenTelemetry docs&lt;/a&gt;.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;The &lt;a href=&#34;https://www.npmjs.com/package/@opentelemetry/opentelemetry-browser-detector&#34;&gt;OpenTelemetry Browser Detector&lt;/a&gt; package is used to capture information such as browser type and browser version and include them as part of the Resource attributes on each span.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Auto instrumentations from the &lt;a href=&#34;https://www.npmjs.com/package/@opentelemetry/auto-instrumentations-web&#34;&gt;OpenTelemetry Meta Packages for Web&lt;/a&gt; packages automatically capture telemetry from HTTP requests, user actions, etc.&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;(Note that because a &lt;a href=&#34;https://opentelemetry.io/docs/specs/otel/context/api-propagators&#34;&gt;Propagator&lt;/a&gt; was also added, the HTTP requests will contain the proper headers that allow traces to combine spans from both the client-side and backend instrumentations)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;So how can we get this same telemetry if instead our storefront was implemented as a React Native mobile app? First, we’ll create a barebones app that replicates some of the functionality from the demo’s web storefront, then we’ll look at different options for adding telemetry.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;Running the store app without any telemetry&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;On&lt;a href=&#34;https://github.com/embrace-io/opentelemetry-demo&#34;&gt; Embrace’s fork&lt;/a&gt; of the OpenTelemetry Demo, we added a simple React Native application which you can set up and run with:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code lang=&#34;javascript&#34; class=&#34;language-javascript&#34;&gt;cd src/reactnativeapp&#xA;npm install&#xA;npm run android # or ios&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The example only implements a subset of the web storefront, listing the products and allowing them to be added to a cart, with a simple UI:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXfeIXSSYBoR-hPE_fVgJYpXTuPfN3jtcKWJFs6A94qZCua1C4xB5uZ0fYX73GV5H8544On4xsdVVoIng2OgNDLBUFw5XRsOjD2_tRbAIxqeHmN3XcYAiIU-mB_6KwUAx3KP1oUJMtjfciBYkNtXLf414dqU?key=ox94_nXkFlNpFM_ALZQA3w&#34; alt=&#34;image&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;After tapping around the store for a bit, you can check in Grafana. You should see that, while we still have spans generated from our backend services for the requests we made, they no longer show any spans from the client. We’ll have to add instrumentation to the React Native app to replace that client telemetry.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;Recreating instrumentation using OpenTelemetry JS packages&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;To add instrumentation for the React Native app, we can replicate the important parts of the web app’s instrumentation, but in a mobile context. Specifically, we’ll need a TracerProvider, a SpanProcessor, and the Web Auto-Instrumentation. We’ll skip the browser-specific functionality as it’s no longer relevant.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Quick note: If you want to jump ahead to the completed code it is available on our OpenTelemetry Demo fork on the&lt;a href=&#34;https://github.com/embrace-io/opentelemetry-demo/compare/main...embrace-io:opentelemetry-demo:opentelemetry-js-example&#34;&gt; opentelemetry-js-example branch&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We can start by creating a Tracer function that will perform setup very similar to the&lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-demo/blob/main/src/frontend/utils/telemetry/FrontendTracer.ts&#34;&gt; FrontendTracer&lt;/a&gt; function we saw in the web app but with browser-specific functionality removed:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code lang=&#34;javascript&#34; class=&#34;language-javascript&#34;&gt;import { WebTracerProvider } from &#39;@opentelemetry/sdk-trace-web&#39;;&#xA;import { Resource } from &#39;@opentelemetry/resources&#39;;&#xA;import { SEMRESATTRS_SERVICE_NAME } from &#39;@opentelemetry/semantic-conventions&#39;;&#xA;&#xA;...&#xA;const Tracer = async () =&amp;gt; {&#xA;  const resource = new Resource({&#xA;    [SEMRESATTRS_SERVICE_NAME]: &#34;reactnativeapp&#34;,&#xA;  });&#xA;  const provider = new WebTracerProvider({ resource });&#xA;  &#xA;  ...&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Here we’re again using the WebTracerProvider and setting up a Resource. We’re omitting the browserDetector since that won’t be relevant for our React Native app, and instead we’re just setting the service name attribute for now.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Next, we’ll add a span processor and exporter to send our traces to the OTLP-HTTP collector running in the Docker container. Note that localhost is a variable rather than just the string literal, which accounts for network differences on the &lt;a href=&#34;https://developer.android.com/studio/run/emulator-networking&#34;&gt;Android emulator&lt;/a&gt;. If you’re not running the app in the emulator, you can just set it to ‘localhost’:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code lang=&#34;javascript&#34; class=&#34;language-javascript&#34;&gt;import { BatchSpanProcessor, SimpleSpanProcessor, ConsoleSpanExporter} from &#39;@opentelemetry/sdk-trace-base&#39;;&#xA;import { OTLPTraceExporter } from &#39;@opentelemetry/exporter-trace-otlp-http&#39;;&#xA;&#xA;...&#xA;&#xA;const localhost = await getLocalhost();&#xA;provider.addSpanProcessor(&#xA;  new BatchSpanProcessor(&#xA;    new OTLPTraceExporter({&#xA;      url: `http://${localhost}:8080/otlp-http/v1/traces`,&#xA;    }),&#xA;    {&#xA;      scheduledDelayMillis: 500,&#xA;    }&#xA;  )&#xA;);&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Quick note: Any number of span processors can be added to the provider in order to layer on additional functionality. For example, you can add a unique session ID on each span, as is done in the web app. In addition, including the line: provider.addSpanProcessor(new SimpleSpanProcessor(new ConsoleSpanExporter())); is very helpful for debugging as it allows you to see each span outputted to the console as it is ended.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Next, call register on the provider to set it as the global tracer provider and allow the auto instrumentations to find it by default. As well, we’ll configure the provider to use the W3C propagators so that trace information is included as part of the HTTP headers of any instrumented request. This allows the traces to cross API boundaries:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code lang=&#34;javascript&#34; class=&#34;language-javascript&#34;&gt;import { CompositePropagator, W3CBaggagePropagator, W3CTraceContextPropagator } from &#39;@opentelemetry/core&#39;;&#xA;&#xA;...&#xA;&#xA;provider.register({&#xA;propagator: new CompositePropagator({&#xA;propagators: [new W3CBaggagePropagator(), new W3CTraceContextPropagator()],&#xA;  }),&#xA;});&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Finally, we’ll again make use of &lt;code&gt;@opentelemetry/auto-instrumentations-web&lt;/code&gt; to automatically instrument our network requests. However, we’ll turn off some of the other auto-instrumentations that are web specific, such as &lt;code&gt;@opentelemetry/instrumentation-user-interaction&lt;/code&gt; and &lt;code&gt;@opentelemetry/instrumentation-document-load&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code lang=&#34;javascript&#34; class=&#34;language-javascript&#34;&gt;import { registerInstrumentations } from &#39;@opentelemetry/instrumentation&#39;;&#xA;import { getWebAutoInstrumentations } from &#39;@opentelemetry/auto-instrumentations-web&#39;;&#xA;&#xA;...&#xA;  &#xA;registerInstrumentations({&#xA;  tracerProvider: provider,&#xA;  instrumentations: [&#xA;    getWebAutoInstrumentations({&#xA;      &#39;@opentelemetry/instrumentation-user-interaction&#39;: { enabled: false },&#xA;      &#39;@opentelemetry/instrumentation-document-load&#39;: { enabled: false },&#xA;      &#39;@opentelemetry/instrumentation-fetch&#39;: {&#xA;        propagateTraceHeaderCorsUrls: /.*/,&#xA;        clearTimingResources: false,&#xA;      },&#xA;    }),&#xA;  ],&#xA;});&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;Making the Tracer React-friendly&amp;nbsp;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;At this point, we could just invoke Tracer() somewhere globally, but let’s first make it a bit more React-friendly by wrapping it in a hook:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code lang=&#34;javascript&#34; class=&#34;language-javascript&#34;&gt;export interface TracerResult {&#xA;  loaded: boolean;&#xA;}&#xA;&#xA;export const useTracer = () : TracerResult =&amp;gt; {&#xA;  const [loaded, setLoaded] = useState&amp;lt;boolean&amp;gt;(false);&#xA;&#xA;  useEffect(() =&amp;gt; {&#xA;     if (!loaded) {&#xA;      Tracer()&#xA;        .catch(() =&amp;gt; console.warn(&#34;failed to setup tracer&#34;))&#xA;        .finally(() =&amp;gt; setLoaded(true))&#xA;    }&#xA;  }, [loaded]);&#xA;&#xA;  return {&#xA;    loaded&#xA;  }&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We’ll then hook the Tracer up within the existing logic for loading our splash screen at &lt;code&gt;RootLayout&lt;/code&gt;, along with any other operation we want to make sure is completed before we allow user interactions with our app:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code lang=&#34;javascript&#34; class=&#34;language-javascript&#34;&gt;export default function RootLayout() {&#xA;  ...&#xA;  &#xA;  const {loaded: tracerLoaded} = useTracer();&#xA;&#xA;  const loaded = useMemo&amp;lt;boolean&amp;gt;(() =&amp;gt; tracerLoaded &amp;amp;&amp;amp; otherThingLoaded &amp;amp;&amp;amp; ..., [tracerLoaded, otherThingLoaded, ...])&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now we’re ready to launch the app again and add a few items to our cart. Switching back to the Grafana explore dashboard, we can do another search for spans. This time, filter for spans that include our new service.name ‘reactnativeapp’ and see what we find:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXdK8arzQcK3TSKIAzmKbMoZP6Ns_qyet33hrfEPaaWmTgb_FDXtXQYJXlWcHISxQe9txmfse1h7JojjtsVXHJEfms08z2nmUkxXl4UYgKqvMkc3KsWiNGv9AGWKth0UrspVtm0nezlWS3CCNfhFiqL1WWyi?key=ox94_nXkFlNpFM_ALZQA3w&#34; alt=&#34;code&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Success! Even this simple instrumentation gives us additional information about our mobile client. We can see how long requests took to complete from the client’s perspective, not just processing time on the backend. We are able to group by different services consuming our API. Most importantly, not only do we see the span for the HTTP POST request from our React Native instrumentation, but, because we’re propagating its trace ID in the request headers, that same trace includes spans from all the backend services involved in generating the response.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;Adding attributes to capture mobile device context&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;However, the telemetry is missing some crucial attributes that we had available in the web example. Specifically, we want to see information about the mobile client itself. While we can’t use `browserDetector` to automatically grab this for us, we can include additional attributes that we have available when setting up the resource:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code lang=&#34;javascript&#34; class=&#34;language-javascript&#34;&gt;import { getDeviceId, getSystemVersion, getVersion } from &#39;react-native-device-info&#39;;&#xA;import { Platform } from &#39;react-native&#39;;&#xA;&#xA;...&#xA;&#xA;const resource = new Resource({&#xA;  [SEMRESATTRS_SERVICE_NAME]: &#34;reactnativeapp&#34;,&#xA;  [SEMRESATTRS_OS_NAME]: Platform.OS,&#xA;  [SEMRESATTRS_OS_VERSION]: getSystemVersion(),&#xA;  [SEMRESATTRS_SERVICE_VERSION]: getVersion(),&#xA;  [SEMRESATTRS_DEVICE_ID]: getDeviceId(),&#xA;});&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Quick note: It’s always best to use a key from the&lt;a href=&#34;https://opentelemetry.io/docs/concepts/semantic-conventions/&#34;&gt; Semantic Conventions&lt;/a&gt; if one exists for the attribute you are including, so that your data plays well with analysis tools that understand OpenTelemetry. However, you are always free to add any other attribute that makes sense for your application. The more attributes you include, the more information and context you’ll have available when performing analysis downstream!&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Here we’re leveraging the&lt;a href=&#34;https://www.npmjs.com/package/react-native-device-info&#34;&gt; react-native-device-info&lt;/a&gt; library to pull in some additional information about the environment our mobile app is running in. If we look back at the trace in Grafana, we should now see that as part of the resource attributes:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXek2Zvo4zdzP57_B251yBD_yJPS_LCwJI0QYe-jCD-t99a3iUBXVkrdLYkZRvWNpwm_ebtxa-2UJ9JbtHYf8pDMxUPz3W1AhFpewUAUenRZxHh7VxhACcNx4fRIkX7P1EFZn5sn0DnQuyFxQgvl0GQFc_fO?key=ox94_nXkFlNpFM_ALZQA3w&#34; alt=&#34;image&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This might feel like a small change, but it actually opens up a huge capability in our observability system that we were lacking previously: the ability to analyze performance and troubleshoot issues based on the characteristics of our clients. For example, if we notice an issue suddenly pop up with one of our APIs, we can now group traces related to a specific endpoint by the version of our React Native app. This means we can potentially narrow down the root cause of the issue to a change in a specific app release.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;There are some downsides to this approach. While we were mostly able to leverage the OpenTelemetry JS packages to achieve what we wanted, we had to tiptoe around the fact that the existing tooling assumes either a Node or Browser environment. Examples include assuming the existence of the web-only&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Performance&#34;&gt; Performance API&lt;/a&gt;, or having to pass in the &lt;code&gt;propagateTraceHeaderCorsUrls: /.*/&lt;/code&gt; option to the fetch instrumentation, even though we are not making CORS requests from the example app.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;Wrapping up&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;These aren’t fundamental limitations, and we can imagine a lot of these problems going away with a few contributions to the OpenTelemetry repositories. Examples include a hypothetical ReactNativeDetector that automated the resource attribute setup we did above, or an update to the instrumentation-fetch package that added fallbacks when web-specific APIs were unavailable. The nice thing with an open standard like OpenTelemetry is that development is driven by the community, so as adoption increases among React Native developers, we can expect more momentum behind improvements such as these. &lt;a href=&#34;https://embrace.io/&#34;&gt;Embrace&lt;/a&gt; is helping make OpenTelemetry work for mobile developers. We’ve built our &lt;a href=&#34;https://github.com/embrace-io/embrace-apple-sdk&#34;&gt;iOS&lt;/a&gt; and &lt;a href=&#34;https://github.com/embrace-io/embrace-android-sdk&#34;&gt;Android&lt;/a&gt; SDKs on OTel, while working with the community to grow the specification. This piece came as part of our discovery into mapping React Native telemetry to OTel.&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;】&lt;p&gt;&lt;em&gt;成员帖子，作者：Embrace 高级软件工程师 Jonathan Munz&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXfnXewzc-STuTosuBqEISMQ0UR2crdRNtJheZPx2oQStH-eWkkLNxY6HDIbju3PmE4ncOBzUccieiU3jY8ZQohiky6LO2cOnLKoM mVTwFXekizPkjdYz4YJgzJxWUbHnJEMvSwXgQ-n1itCjIOOkE9e6jgi?key=ox94_nXkFlNpFM_ALZQA3w&#34; alt= “图像”referrerpolicy =“no-referrer”&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;React Native 允许开发人员使用 Javascript 和 Typescript 为 iOS 和 Android 构建本机移动应用程序。 React Native 以 Web 语言为核心并内置本机部署，是通过快速开发人员入门周期快速构建功能丰富的移动应用程序的好方法。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;今天，我们将了解 React Native 开发人员使用 OpenTelemetry 在其移动应用程序中测量可观察性的不同方式。为什么使用 OpenTelemetry (OTel)？ OTel 项目允许开发人员使用标准化信号获得有关其应用程序的重要见解，而无需锁定供应商。 OTel 的&lt;a href=&#34;https://opentelemetry.io/docs/concepts/signals/&#34;&gt;核心信号&lt;/a&gt;的可移植性和可扩展性使您能够衡量和改进您的应用程序，无论它是在 Kubernetes 集群中运行还是在作为一个 Android 应用程序，掌握在一百万个不同的人手中。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;OpenTelemetry 演示项目&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;我们将使用方便的&lt;a href=&#34;https://opentelemetry.io/docs/demo/&#34;&gt;OpenTelemetry 演示&lt;/a&gt;作为起点。该演示启动了一个虚构的“天文商店”，让您了解 OpenTelemetry 如何在分布式系统上工作。目前，示例中没有包含移动应用程序，但如果您按照设置步骤操作，您将能够在 NextJS 中实现的店面周围单击。 &lt;a href=&#34;https://opentelemetry.io/docs/demo/docker-deployment/&#34;&gt;Docker&lt;/a&gt; 指令可能是最快启动演示的，演示运行在&lt;a href=&#34;http:// /localhost:8080/&#34;&gt; http://localhost:8080&lt;/a&gt; 默认情况下：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXevv6wPi0s0gTkTI-q-rcqzedKNuwprV4Gs0fxkxZmd44PccuT5OfonGgtt14743lyhVlOxuDHEP0cU7myz-SerPePJAHEED c3Hmg9lXgNK-bBDLaOjWccdfEXmQh-gxTKt4KoqcuI-iJrOda8OxWBIQbqd？ key=ox94_nXkFlNpFM_ALZQA3w&#34; alt=&#34;OpenTelemetry 演示&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;快速说明：您可能可以从演示的 Docker 指令中运行 make start-minimal 而不是 make start 。这将节省资源，特别是如果您最终在下一部分的模拟器上运行应用程序。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:36px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-default&#34;&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-group is-style-border is-layout-constrained wp-block-group-is-layout-constrained&#34;&gt;&#xA;&lt;p class=&#34;is-style-spaced-uppercase&#34;&gt;继续阅读&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;如果您错过了 OTel 社区日，&lt;a href=&#34;https://www.cncf.io/reports/otel-community-day-2024/&#34;&gt;r了解一切&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.cncf.io/online-programs/cncf-live-webinar-uncovering-hidden-otel-traces-leveraging-prometheus-in-a-standardized-manner/&#34;&gt;如何查找&lt;/a&gt;隐藏的 OTel 痕迹（网络研讨会）&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;揭开&lt;a href=&#34;https://www.cncf.io/online-programs/cloud-native-live-using-otel-distributed-tracing-for-real-time-observability/&#34;&gt;的魔力使用 OTel 进行分布式跟踪&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;立即报名参加&lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/register/&#34;&gt;KubeCon + CloudNativeCon North America 2024&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;在演示应用程序中单击一会儿后，您可以探索它创建的遥测数据。例如，跟踪信息将导出到 Grafana &lt;a href=&#34;http://localhost:8080/grafana&#34;&gt; http://localhost:8080/grafana&lt;/a&gt;。通过转到“探索”选项卡并从前端服务中过滤跨度，我们可以看到实际上我们根据演示应用程序中的操作生成了许多跨度：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXez3eBsYSuwFWq3ffbQjxS2OtrEehgC1khcqJEQNPeN2u8K_eOgrkByKTZh9YPp-ThP3qSNwx0Ka-TndwdIAvQ--Mx8T kjw84ndNbgVh2QcqJ8hesMid_tUGw37TVP1CySbuQ75e4FTOT0-3nn2BDbzK4c7?key=ox94_nXkFlNpFM_ALZQA3w “ alt =“仪表板”referrerpolicy =“no-referrer”&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;深入研究 Web 应用程序的代码，我们发现所有这些遥测数据都是使用 &lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-demo/ 中设置的 OpenTelemetry 包生成的blob/main/src/frontend/utils/telemetry/FrontendTracer.ts&#34;&gt;FrontendTracer.ts&lt;/a&gt;，具体为：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;将跟踪信息发送到 Grafana 所需的 OpenTelemetry 位，包括&lt;a href=&#34;https://opentelemetry.io/docs/concepts/signals/traces/#tracer-provider&#34;&gt;跟踪器提供程序&lt;/a&gt; 、&lt;a href=&#34;https://opentelemetry.io/docs/specs/otel/trace/sdk/#span-processor&#34;&gt;Span 处理器&lt;/a&gt; 和 &lt;a href=&#34;https://opentelemetry.io /docs/concepts/components/#exporters&#34;&gt;导出器&lt;/a&gt;。有关这些组件如何组合在一起的良好入门知识可以在&lt;a href=&#34;https://opentelemetry.io/docs/concepts/components/&#34;&gt;OpenTelemetry 文档&lt;/a&gt;中找到。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/@opentelemetry/opentelemetry-browser- detector&#34;&gt;OpenTelemetry Browser Detector&lt;/a&gt; 包用于捕获浏览器类型和浏览器等信息版本并将它们作为每个跨度上的资源属性的一部分。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/@opentelemetry/auto-instrumentations-web&#34;&gt;OpenTelemetry Meta Packages for Web&lt;/a&gt; 包中的自动检测可自动从 HTTP 请求捕获遥测数据、用户操作等&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;（请注意，由于还添加了 &lt;a href=&#34;https://opentelemetry.io/docs/specs/otel/context/api-propagators&#34;&gt;Propagator&lt;/a&gt;，因此 HTTP 请求将包含正确的允许跟踪组合来自客户端 si 的范围的标头de 和后端仪器）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;那么，如果我们的店面是作为 React Native 移动应用程序实现的，我们如何才能获得相同的遥测数据呢？首先，我们将创建一个准系统应用程序，复制演示网络店面的一些功能，然后我们将研究添加遥测的不同选项。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;在没有任何遥测的情况下运行商店应用&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;在 OpenTelemetry 演示的&lt;a href=&#34;https://github.com/embrace-io/opentelemetry-demo&#34;&gt;Embrace 分支&lt;/a&gt;上，我们添加了一个简单的 React Native 应用程序，您可以对其进行设置和运行：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code lang=&#34;javascript&#34; class=&#34;language-javascript&#34;&gt;cd src/reactnativeapp&#xA;npm 安装&#xA;npm run android # 或 ios&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;该示例仅实现了网络店面的一个子集，通过简单的 UI 列出了产品并允许将它们添加到购物车：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXfeIXSSYBoR-hPE_fVgJYpXTuPfN3jtcKWJFs6A94qZCua1C4xB5uZ0fYX73GV5H8544On4xsdVVoIng2OgNDLBUF w5XRsOjD2_tRbAIxqeHmN3XcYAiIU-mB_6KwUAx3KP1oUJMtjfciBYkNtXLf414dqU?key=ox94_nXkFlNpFM_ALZQA3w&#34; alt=&#34;图像“referrerpolicy =“no-referrer”&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;在商店中点击一会儿后，您可以在 Grafana 中查看。您应该看到，虽然我们仍然有后端服务为我们发出的请求生成的跨度，但它们不再显示来自客户端的任何跨度。我们必须向 React Native 应用程序添加检测来替换客户端遥测。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;使用 OpenTelemetry JS 包重新创建检测&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;要为 React Native 应用程序添加检测，我们可以复制 Web 应用程序检测的重要部分，但要在移动环境中进行。具体来说，我们需要一个 TracerProvider、一个 SpanProcessor 和 Web 自动检测。我们将跳过特定于浏览器的功能，因为它不再相关。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;快速说明：如果您想跳转到已完成的代码，可以在 &lt;a href=&#34;https://github.com/embrace-io/opentelemetry-demo/compare/main 上的 OpenTelemetry 演示分支上找到它...embrace-io:opentelemetry-demo:opentelemetry-js-example&#34;&gt;opentelemetry-js-example 分支&lt;/a&gt;。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;我们可以首先创建一个 Tracer 函数，该函数将执行与&lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-demo/blob/main/src/frontend/utils/ 非常相似的设置telemetry/FrontendTracer.ts&#34;&gt;FrontendTracer&lt;/a&gt; 函数我们在网络应用程序中看到，但删除了浏览器特定的功能：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code lang=&#34;javascript&#34; class=&#34;language-javascript&#34;&gt;从 &#39;@opentelemetry/sdk-trace-web&#39; 导入 { WebTracerProvider };&#xA;从“@opentelemetry/resources”导入{资源}；&#xA;从“@opentelemetry/semantic-conventions”导入{SEMRESATTRS_SERVICE_NAME}；&#xA;&#xA;...&#xA;const Tracer = async () =&gt; {&#xA;  const 资源 = 新资源({&#xA;    [SEMRESATTRS_SERVICE_NAME]：“reactnativeapp”，&#xA;  });&#xA;  const 提供者 = new WebTracerProvider({ 资源 });&#xA;  &#xA;  ...&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;这里我们再次使用 WebTracerProvider 并设置资源。我们省略 browserDetector，因为它与我们的 React Native 应用程序无关，而我们现在只是设置服务名称属性。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;接下来，我们将添加一个跨度处理器和导出器，以将跟踪发送到在 Docker 容器中运行的 OTLP-HTTP 收集器。请注意，localhost 是一个变量，而不仅仅是字符串文字，它解释了 &lt;a href=&#34;https://developer.android.com/studio/run/emulator-networking&#34;&gt;Android 模拟器&lt;/a&gt; 上的网络差异。如果您没有在模拟器中运行应用程序，则可以将其设置为“localhost”：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code lang=&#34;javascript&#34; class=&#34;language-javascript&#34;&gt;从 &#39;@opentelemetry/sdk-trace-base&#39; 导入 { BatchSpanProcessor, SimpleSpanProcessor, ConsoleSpanExporter};&#xA;从 &#39;@opentelemetry/exporter-trace-otlp-http&#39; 导入 { OTLPTraceExporter }；&#xA;&#xA;...&#xA;&#xA;const localhost = 等待 getLocalhost();&#xA;提供者.addSpanProcessor(&#xA;  新的 BatchSpanProcessor(&#xA;    新的 OTLPTraceExporter({&#xA;      url: `http://${localhost}:8080/otlp-http/v1/traces`,&#xA;    }),&#xA;    {&#xA;      预定延迟毫秒：500，&#xA;    }&#xA;  ）&#xA;);&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;快速说明：可以将任意数量的跨度处理器添加到提供程序中，以便分层附加功能。例如，您可以在每个跨度上添加唯一的会话 ID，就像在 Web 应用程序中所做的那样。另外，还包括以下行：provider.addSpanProcessor(new SimpleSpanProcessor(new ConsoleSpanExporter()));对于调试非常有帮助，因为它允许您在结束时看到输出到控制台的每个范围。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;接下来，在提供程序上调用注册，将其设置为全局跟踪程序提供程序，并允许自动检测默认找到它。此外，我们将配置提供程序以使用 W3C 传播器，以便将跟踪信息作为任何检测请求的 HTTP 标头的一部分包含在内。这允许跟踪跨越 API 边界：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code lang=&#34;javascript&#34; class=&#34;language-javascript&#34;&gt;从 &#39;@opentelemetry/core&#39; 导入 { CompositePropagator, W3CBaggagePropagator, W3CTraceContextPropagator };&#xA;&#xA;...&#xA;&#xA;提供商.注册({&#xA;传播器：新的 CompositePropagator({&#xA;传播器：[新 W3CBaggagePropagator()、新 W3CTraceContextPropagator()]、&#xA;  }),&#xA;});&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;最后，我们将再次使用&lt;code&gt;@opentelemetry/auto-instrumentations-web&lt;/code&gt;来自动检测我们的网络请求。但是，我们将关闭一些其他特定于 Web 的自动检测，例如 @opentelemetry/instrumentation-user-interaction 和 @opentelemetry/instrumentation-document-load代码&gt;:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code lang=&#34;javascript&#34; class=&#34;language-javascript&#34;&gt;导入 { registerInstrumentations来自“@opentelemetry/instrumentation”；&#xA;从 &#39;@opentelemetry/auto-instrumentations-web&#39; 导入 { getWebAutoInstrumentations }；&#xA;&#xA;...&#xA;  &#xA;注册仪器（{&#xA;  跟踪器提供者：提供者，&#xA;  仪器仪表：[&#xA;    获取WebAutoInstrumentations({&#xA;      &#39;@opentelemetry/instrumentation-user-interaction&#39;: { 启用: false },&#xA;      &#39;@opentelemetry/instrumentation-document-load&#39;: { 启用: false },&#xA;      &#39;@opentelemetry/instrumentation-fetch&#39;：{&#xA;        传播TraceHeaderCorsUrls：/.*/，&#xA;        清除计时资源：假，&#xA;      },&#xA;    }),&#xA;  ],&#xA;});&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;使 Tracer 反应友好&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;此时，我们可以在全局某个地方调用 Tracer()，但我们首先将其包装在一个钩子中，使其对 React 更加友好：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code lang=&#34;javascript&#34; class=&#34;language-javascript&#34;&gt;导出接口TracerResult {&#xA;  已加载：布尔值；&#xA;}&#xA;&#xA;导出 const useTracer = () : TracerResult =&gt; {&#xA;  const [已加载，setLoaded] = useState&lt;boolean&gt;(false);&#xA;&#xA;  使用效果（（）=&gt; {&#xA;     如果（！加载）{&#xA;      追踪器()&#xA;        .catch(() =&gt; console.warn(&#34;无法设置跟踪器&#34;))&#xA;        .finally(() =&gt; setLoaded(true))&#xA;    }&#xA;  }, [已加载]);&#xA;&#xA;  返回 {&#xA;    已加载&#xA;  }&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;然后，我们会将 Tracer 连接到现有逻辑中，以便在 &lt;code&gt;RootLayout&lt;/code&gt; 处加载启动屏幕，以及我们希望确保在允许用户与应用程序交互之前完成的任何其他操作：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code lang=&#34;javascript&#34; class=&#34;language-javascript&#34;&gt;导出默认函数 RootLayout() {&#xA;  ...&#xA;  &#xA;  const {已加载：tracerLoaded} = useTracer();&#xA;&#xA;  const load = useMemo&lt;boolean&gt;(() =&gt; tracerLoaded &amp;&amp; otherThingLoaded &amp;&amp; ..., [tracerLoaded, otherThingLoaded, ...])&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;现在我们准备再次启动应用程序并向我们的购物车添加一些商品。切换回 Grafana 探索仪表板，我们可以再次搜索跨度。这次，过滤包含我们的新 service.name ‘reactnativeapp’ 的 Span，看看我们发现了什么：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXdK8arzQcK3TSKIAzmKbMoZP6Ns_qyet33hrfEPaaWmTgb_FDXtXQYJXlWcHISxQe9txmfse1h7JojjtsVXHJEfms 08z2nmUkxXl4UYgKqvMkc3KsWiNGv9AGWKth0UrspVtm0nezlWS3CCNfhFiqL1WWyi?key=ox94_nXkFlNpFM_ALZQA3w&#34; alt=&#34;代码&#34;referrerpolicy=&#34;无推荐人&#34;&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;成功！即使是这个简单的仪器也可以为我们提供有关移动客户端的更多信息。我们可以从客户端的角度看到请求完成所需的时间，而不仅仅是后端的处理时间。我们能够按使用 API 的不同服务进行分组。最重要的是，我们不仅可以看到来自 React Native 工具的 HTTP POST 请求的范围，而且因为我们在请求标头中传播其跟踪 ID，所以相同的跟踪包括涉及的所有后端服务的范围编辑生成响应。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;添加属性以捕获移动设备上下文&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;但是，遥测缺少我们在网络示例中提供的一些关键属性。具体来说，我们希望查看有关移动客户端本身的信息。虽然我们无法使用“browserDetector”自动为我们获取此信息，但我们可以在设置资源时包含可用的其他属性：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code lang=&#34;javascript&#34; class=&#34;language-javascript&#34;&gt;从 &#39;react-native-device-info&#39; 导入 { getDeviceId, getSystemVersion, getVersion };&#xA;从&#39;react-native&#39;导入{平台}；&#xA;&#xA;...&#xA;&#xA;常量资源 = 新资源({&#xA;  [SEMRESATTRS_SERVICE_NAME]：“reactnativeapp”，&#xA;  [SEMRESATTRS_OS_NAME]：平台.OS，&#xA;  [SEMRESATTRS_OS_VERSION]: getSystemVersion(),&#xA;  [SEMRESATTRS_SERVICE_VERSION]: getVersion(),&#xA;  [SEMRESATTRS_DEVICE_ID]: getDeviceId(),&#xA;});&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;快速说明：如果属性存在的话，最好使用&lt;a href=&#34;https://opentelemetry.io/docs/concepts/semantic-conventions/&#34;&gt;语义约定&lt;/a&gt;中的键您包括在内，以便您的数据能够与理解 OpenTelemetry 的分析工具很好地配合。但是，您始终可以自由添加对您的应用程序有意义的任何其他属性。您包含的属性越多，在下游执行分析时可用的信息和上下文就越多！&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;在这里，我们利用&lt;a href=&#34;https://www.npmjs.com/package/react-native-device-info&#34;&gt;react-native-device-info&lt;/a&gt;库来引入有关我们的移动应用程序运行环境的一些附加信息。如果我们回顾 Grafana 中的跟踪，我们现在应该看到它是资源属性的一部分：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXek2Zvo4zdzP57_B251yBD_yJPS_LCwJI0QYe-jCD-t99a3iUBXVkrdLYkZRvWNpwm_ebtxa-2UJ9JbtHYf8pDMxUPz3 W1AhFpewUAUenRZxHh7VxhACcNx4fRIkX7P1EFZn5sn0DnQuyFxQgvl0GQFc_fO?key=ox94_nXkFlNpFM_ALZQA3w&#34; alt= “图像”referrerpolicy =“no-referrer”&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;这可能感觉像是一个很小的变化，但它实际上为我们的可观测系统提供了我们以前所缺乏的巨大功能：根据客户的特征分析性能和解决问题的能力。例如，如果我们注意到某个 API 突然出现问题，我们现在可以根据 React Native 应用程序的版本对与特定端点相关的跟踪进行分组。这意味着我们有可能将问题的根本原因缩小到特定应用版本的更改。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;这种方法有一些缺点。虽然我们基本上能够利用 OpenTelemetry JS 包来实现我们想要的目标，但我们必须谨慎对待现有工具假设节点或浏览器环境这一事实。示例包括假设存在仅限 web&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Performance&#34;&gt;性能 API&lt;/a&gt;，或者必须将 &lt;code&gt;propagateTraceHeaderCorsUrls: /.*/&lt;/code&gt; 选项传递给获取工具，即使我们没有从示例应用发出 CORS 请求。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;总结&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;这些并不是根本性的限制，我们可以想象，只要对 OpenTelemetry 存储库做出一些贡献，很多问题就会消失。示例包括一个假设的 ReactNativeDetector，它可以自动执行我们上面所做的资源属性设置，或者对 Instrumentation-fetch 包进行更新，以在特定于 Web 的 API 不可用时添加回退功能。像 OpenTelemetry 这样的开放标准的好处是，开发是由社区驱动的，因此随着 React Native 开发人员采用率的增加，我们可以期待这些改进背后的更多动力。 &lt;a href=&#34;https://embrace.io/&#34;&gt;Embrace&lt;/a&gt; 正在帮助 OpenTelemetry 为移动开发者服务。我们已经构建了 &lt;a href=&#34;https://github.com/embrace-io/embrace-apple-sdk&#34;&gt;iOS&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/embrace- io/embrace-android-sdk&#34;&gt;OTel 上的 Android&lt;/a&gt; SDK，同时与社区合作发展规范。这篇文章是我们将 React Native 遥测映射到 OTel 的发现的一部分。&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;</description>
      <pubDate>Sun, 04 Aug 2024 16:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>