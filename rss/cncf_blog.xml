<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>CNCF - Blog</title>
    <link>http://rsshub.rssforever.com/cncf</link>
    <description>CNCF - Blog - Powered by RSSHub</description>
    <managingEditor>contact@rsshub.app (RSSHub)</managingEditor>
    <item>
      <title>【Coming soon: the Certified Backstage Associate certification for developers and platform engineers】即将推出：面向​​开发人员和平台工程师的 Certified Backstage Associate 认证</title>
      <link>https://www.cncf.io/blog/2024/08/15/introducing-the-certified-backstage-associate-certification-for-developers-and-platform-engineers/</link>
      <description>【&lt;p&gt;As platform engineering and service catalogs have moved to the forefront of the conversation around cloud native developer experience, IT professionals need to understand the open source tools underpinning these trends. That’s why &lt;a href=&#34;https://www.cncf.io/&#34;&gt;Cloud Native Computing Foundation&lt;/a&gt; and &lt;a href=&#34;https://training.linuxfoundation.org/&#34;&gt;Linux Foundation Training &amp;amp; Certification&lt;/a&gt; are excited to announce the upcoming &lt;a href=&#34;https://training.linuxfoundation.org/certification/certified-backstage-associate-cba/&#34;&gt;Certified Backstage Associate (CBA)&lt;/a&gt; certification.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Backstage is an open source framework for building developer portals. It provides a centralized software catalog, enabling product teams to ship high-quality code quickly through internal developer platforms (IDPs) without compromising autonomy.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;“As the complexity of modern software development grows, developer experience is essential for organizations of all sizes,” said Chris Aniszczyk, CTO, of CNCF. “A Backstage certification improves skills across teams building on top of the most popular open source IDP, ensuring everyone is equipped to leverage the platform to boost individual productivity, enhance collaboration, and increase organizational efficiency.”&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Backstage has been publicly adopted by more than 270 organizations and is in the top 5 CNCF projects in terms of velocity. A free introduction to Backstage course was launched in late 2022 for DevOps engineers and professionals interested in or working in developer productivity or developer experience teams.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The &lt;a href=&#34;https://training.linuxfoundation.org/certification/certified-backstage-associate-cba/&#34;&gt;CBA&lt;/a&gt; certification is designed for engineers, developers, and other professionals who want to fine-tune their skills around IDPs and platform engineering. Those who successfully complete the certification exam will receive a certificate and a digital badge, demonstrating that they have the mindset and skills to work in and build Backstage tools that improve performance and drive innovation, benefiting their careers, teams, and organizations.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Those interested in the certification can sign up to be notified of the beta and general availability launch &lt;a href=&#34;https://training.linuxfoundation.org/certification/certified-backstage-associate-cba/&#34;&gt;here&lt;/a&gt;, and can learn more about the certification &lt;a href=&#34;https://training.linuxfoundation.org/blog/cba-coming-soon/&#34;&gt;here&lt;/a&gt;.&amp;nbsp;&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;】&lt;p&gt;随着平台工程和服务目录已成为围绕云原生开发人员体验的讨论的前沿，IT 专业人员需要了解支撑这些趋势的开源工具。这就是为什么&lt;a href=&#34;https://www.cncf.io/&#34;&gt;云原生计算基础&lt;/a&gt;和&lt;a href=&#34;https://training.linuxfoundation.org/&#34;&gt;Linux基础培训和认证&lt;/a&gt; 很高兴地宣布即将推出&lt;a href=&#34;https://training.linuxfoundation.org/certification/certified-backstage-associate-cba/&#34;&gt;认证后台助理 (CBA)&lt;/a&gt; 认证。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Backstage 是一个用于构建开发人员门户的开源框架。它提供集中式软件目录，使产品团队能够通过内部开发人员平台 (IDP) 快速交付高质量代码，而不会影响自主权。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;“随着现代软件开发的复杂性不断增加，开发人员经验对于各种规模的组织都至关重要，”CNCF 首席技术官 Chris Aniszczyk 说道。 “Backstage 认证提高了基于最流行的开源 IDP 的团队的技能，确保每个人都有能力利用该平台来提高个人生产力、加强协作并提高组织效率。”&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Backstage 已被超过 270 个组织公开采用，在速度方面位居 CNCF 项目前 5 位。 2022 年底，为对开发人员生产力或开发人员体验团队感兴趣或在其中工作的 DevOps 工程师和专业人士推出了免费的 Backstage 简介课程。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://training.linuxfoundation.org/certification/certified-backstage-associate-cba/&#34;&gt;CBA&lt;/a&gt; 认证是为工程师、开发人员和其他想要调整他们围绕 IDP 和平台工程的技能。成功完成认证考试的人员将获得证书和数字徽章，证明他们拥有工作心态和技能，可以构建后台工具来提高绩效和推动创新，从而使他们的职业生涯、团队和组织受益。&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;那些对认证感兴趣的人可以在&lt;a href=&#34;https://training.linuxfoundation.org/certification/certified-backstage-associate-cba/&#34;&gt;此处注册，以获得有关测试版和正式发布的通知&lt; /a&gt;，并且可以在&lt;a href=&#34;https://training.linuxfoundation.org/blog/cba-coming-soon/&#34;&gt;此处&lt;/a&gt;了解有关认证的更多信息。  &lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;</description>
      <pubDate>Wed, 14 Aug 2024 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Inside the numbers: the KubeCon + CloudNativeCon selection process for North America 2024】数字背后：2024 年北美 KubeCon + CloudNativeCon 选择流程</title>
      <link>https://www.cncf.io/blog/2024/08/19/inside-the-numbers-the-kubecon-cloudnativecon-selection-process-for-north-america-2024/</link>
      <description>【&lt;p&gt;As part of our commitment to transparency within the cloud native community, we are providing an inside look into the work that goes on behind the scenes to bring the KubeCon + CloudNativeCon schedule to life. Note that every conference we put together has a post-event conference transparency report that includes a lot of the information we cover below. We are committed to improving the process after every conference and welcome any and all feedback from the community. The data below focuses on the upcoming event &lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/&#34;&gt;KubeCon + CloudNativeCon North America 2024&lt;/a&gt;, happening November 12-15, 2024. You can register for the event today &lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/register/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The schedule is curated by the KubeCon + CloudNativeCon Program Committee, a group of volunteers who are subject matter experts in the conference topics and tracks, led by the conference co-chairs.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;KubeCon + CloudNativeCon conferences have become very competitive with a large number of submissions and the average acceptance rate in the low to mid-teens.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;KubeCon + CloudNativeCon CFP Averages:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;Europe: 1,800 (10% Average acceptance rate)&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;China: 500 (17% Average acceptance rate)&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;North America: 1,800 (12% Average acceptance rate)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Our latest CFP is no exception with an acceptance rate of &lt;strong&gt;11%&lt;/strong&gt;. &lt;strong&gt;1937&lt;/strong&gt; submissions were received from &lt;strong&gt;2110&lt;/strong&gt; unique speakers at &lt;strong&gt;961&lt;/strong&gt; companies. Of those, we were able to accept &lt;strong&gt;218&lt;/strong&gt; talks with &lt;strong&gt;348&lt;/strong&gt; total speakers. Here’s how the submission data breaks down for KubeCon + CloudNativeCon North America 2024.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;348&lt;/strong&gt; Accepted Speakers – Breakdown by Company Type&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;73% from Vendors&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;27% from End Users&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;1% from Other*&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;218&lt;/strong&gt; Accepted Talks** – Breakdown by Company Type&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;53% from Vendors&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;46% from End Users&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;1% from Other*&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;1937&lt;/strong&gt; Total Talk Submissions – Breakdown by Submitting Company Type&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;52% from Vendors&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;46% from End Users&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;2% from Other*&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;961&lt;/strong&gt; Companies Submitted Talks – Breakdown by Company Type&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;41% were Vendors&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;57% were End Users&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;2% were Other*&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;*Other: Individuals without a company affiliation, non-profits, and training organizations&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;**Does not include talk slots held for SIG groups, of which we have 90 for this event&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Previously, KubeCon + Cloud NativeCon North America 2023 had &lt;strong&gt;1871&lt;/strong&gt; submissions and an acceptance rate of &lt;strong&gt;11%&lt;/strong&gt;, resulting in &lt;strong&gt;285 &lt;/strong&gt;total speakers for the event.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;To learn more about the program committee and co-chairs, read the blog &lt;a href=&#34;https://www.cncf.io/blog/2021/03/08/a-look-inside-the-kubecon-cloudnativecon-schedule-selection-process/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;If your talk was not accepted, it doesn’t mean it wasn’t great! Program Committee members have to make difficult decisions, and there are any number of reasons it might not have made the cut. Many Committee members are more than willing to chat with you to provide feedback on your submission. You can also read more about how to get your talk accepted &lt;a href=&#34;https://www.cncf.io/blog/2018/11/16/kubecon-barcelona-2019-call-for-proposals-cfp-is-open/&#34;&gt;here&lt;/a&gt;, and we even have had outside community conferences established to recycle talk submissions!&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Finally, we’re incredibly grateful to the entire global community that comes together to make KubeCon + CloudNativeCon a success every time.&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;】&lt;p&gt;作为我们对云原生社区透明度承诺的一部分，我们将深入了解幕后工作，以实现 KubeCon + CloudNativeCon 计划的落实。请注意，我们举办的每次会议都有一份会后会议透明度报告，其中包含我们下面介绍的大量信息。我们致力于在每次会议后改进流程，并欢迎来自社区的任何和所有反馈。以下数据重点关注即将于 11 月 12 日至 15 日举行的 &lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/&#34;&gt;KubeCon + CloudNativeCon North America 2024&lt;/a&gt; 活动， 2024 年。您今天可以在&lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/register/&#34;&gt;此处&lt;/a&gt;注册参加该活动。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;该日程安排由 KubeCon + CloudNativeCon 计划委员会策划，该委员会由一群志愿者组成，他们是会议主题和轨道的主题专家，由会议联合主席领导。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;KubeCon + CloudNativeCon 会议的竞争非常激烈，提交的论文数量很多，平均接受率在十几岁左右。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;KubeCon + CloudNativeCon CFP 平均值：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;欧洲：1,800（平均录取率 10%）&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;中国：500（平均录取率 17%）&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;北美：1,800（平均录取率 12%）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;我们最新的 CFP 也不例外，接受率为 &lt;strong&gt;11%&lt;/strong&gt;。收到了来自 &lt;strong&gt;961&lt;/strong&gt; 公司的 &lt;strong&gt;2110&lt;/strong&gt; 位独特演讲者的 &lt;strong&gt;1937&lt;/strong&gt; 份意见书。其中，我们能够接受 &lt;strong&gt;218&lt;/strong&gt; 场演讲，总共 &lt;strong&gt;348&lt;/strong&gt; 位演讲者。以下是 KubeCon + CloudNativeCon North America 2024 的提交数据细分。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;348&lt;/strong&gt; 接受的演讲者 - 按公司类型细分&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;73% 来自供应商&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;27% 来自最终用户&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;1% 来自其他*&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;218&lt;/strong&gt; 已接受的会谈** – 按公司类型细分&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;53% 来自供应商&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;46% 来自最终用户&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;1% 来自其他*&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;1937&lt;/strong&gt; 演讲提交总数 – 按提交公司类型细分&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;52% 来自供应商&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;46% 来自最终用户&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;2% 来自其他*&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;961&lt;/strong&gt; 公司提交了演讲 - 按公司类型细分&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;41% 是供应商&lt;​​/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;57% 是最终用户&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;2% 为其他*&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;*其他：不隶属于公司、非营利组织和培训组织的个人&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;**不包括为 SIG 团体举办的演讲时段，本次活动我们有 90 个演讲时段&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;此前，KubeCon + Cloud NativeCon North America 2023 已&lt;strong&gt;1871&lt;/strong&gt; 提交的内容和 &lt;strong&gt;11%&lt;/strong&gt; 的接受率，导致本次活动的演讲者总数为 &lt;strong&gt;285 &lt;/strong&gt;。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;要了解有关程序委员会和联合主席的更多信息，请阅读博客&lt;a href=&#34;https://www.cncf.io/blog/2021/03/08/a-look-inside-the-kubecon -cloudnativecon-schedule-selection-process/&#34;&gt;此处&lt;/a&gt;。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;如果您的演讲没有被接受，并不意味着它不好！计划委员会成员必须做出艰难的决定，并且有很多原因可能导致计划委员会未能晋级。许多委员会成员非常愿意与您聊天，就您提交的内容提供反馈。您还可以阅读有关如何让您的演讲被接受的更多信息 &lt;a href=&#34;https://www.cncf.io/blog/2018/11/16/kubecon-barcelona-2019-call-for-proposals-cfp-is -open/&#34;&gt;这里&lt;/a&gt;，我们甚至还召开了外部社区会议来回收演讲稿！&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;最后，我们非常感谢整个全球社区的共同努力，让 KubeCon + CloudNativeCon 每次都取得成功。&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;</description>
      <pubDate>Sun, 18 Aug 2024 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Bridging cultures: empowering Japanese contributions to the Kubernetes community】架起文化桥梁：增强日本人对 Kubernetes 社区的贡献</title>
      <link>https://www.cncf.io/blog/2024/08/21/bridging-cultures-empowering-japanese-contributions-to-the-kubernetes-community/</link>
      <description>【&lt;p&gt;&lt;em&gt;Community post by Xie Ziyi, Kubernetes Upstream Training Japan Organizer, Cloud Native Community Japan Organizer, and Software Engineer, NEC Solution Innovators, Ltd.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;What is &lt;a href=&#34;https://kutj.connpass.com/&#34;&gt;Kubernetes Upstream Training Japan&lt;/a&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Kubernetes Upstream Training Japan is a training course held in Japanese that introduces the tasks, procedures, and concepts required to make contributions to the Kubernetes community (also known as the upstream community), a project hosted by the Cloud Native Computing Foundation (CNCF), and provides hands-on experience with actual contribution process.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Since community members are required to communicate with foreigners in English, it takes a lot of courage for Japanese folks who do not speak English well and who face cultural barriers to joining our community. For those who would like to join the community but are unable to take the first step, we are organizing this event to first create a place in Japan where they can communicate with local experts in Japanese and gradually familiarize themselves with how the community functions.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Starting in 2019, the event has been held once or twice a year, even during COVID-19, and as of May 2024, it has been held a total of 10 times. We believe that this event is meaningful, as we have been able to communicate with folks from all over the country and some of them have started their contribution activities because of this event. From this year, this event will be a SIG of &lt;a href=&#34;https://community.cncf.io/cloud-native-community-japan/&#34;&gt;CNCJ (Cloud Native Community Japan)&lt;/a&gt;, and we believe it will further promote the culture of open source more powerfully.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;What is Cloud Native Community Japan (CNCJ)&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;CNCJ was established on November 7, 2023, as a vendor-neutral forum to connect CNCF upstream with the Japanese community, companies, and organizations, to promote CNCF and cloud-native technologies in Japan, and to encourage OSS contributions and innovation in cloud-native from Japan.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As of September 2023, there was only one CNCF Ambassador in Japan, and the number of Japanese speakers at KubeCon + CloudNativeCon was in the single digits. There was also no Japanese community working with CNCF. Therefore, volunteers from the CNCF and the Japanese community co-founded CNCJ.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Since its inception, each meetup and sub-chapter has brought together people interested in cloud native technologies, allowing us to listen to the voices of people from various industries.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;Recap event on March 13, 2024&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The &lt;a href=&#34;https://kutj.connpass.com/event/310096/&#34;&gt;first event as CNCJ&lt;/a&gt; was held on Wednesday, March 13, 2024.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Active maintainers and contributors were running the lectures, almost all of them belonging to different repositories, and they were able to share their real experiences, which was well received by the participants.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We had a large number of Japanese company employees and students attend this year’s event. Of the 50 slots available, 47 folks signed up for the program, with a maximum of 35 participants. The majority of them submitted PRs and proceeded to the merge, and we had a lot of questions and a lot of excitement.　&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We plan to continue organizing this event once or twice a year, and each time we will also share some new trends as well.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;If you would like to be notified of these events, please contact &lt;a href=&#34;https://community.cncf.io/cloud-native-community-japan/&#34;&gt;CNCJ&lt;/a&gt; or &lt;a href=&#34;https://kutj. connpass.com/&#34;&gt;Kubernetes Upstream Training Japan&lt;/a&gt; and register as a member. You will receive an email notification as soon as the event is scheduled.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In addition, as a SIG of CNCJ, we have updated our materials and workshop recordings and and they are kept in the &lt;a href=&#34;https://github.com/kubernetes-sigs/%20contributor-playground/tree/master/japan/adhoc&#34;&gt;kubernetes-sigs/contributor-playground/japan/adhoc folder&lt;/a&gt;. The recordings as well as the advance preparation and slides are in the same folder, so those who cannot attend the event can study on their own, watching the recordings whenever they want.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;Growing the Cloud-Native Community in Japan&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In doing so, we hope to be able to help more people join our community, promote the development of cloud-native technologies in Japan, and help the cloud native community grow.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;Next Event on August 26, 2024&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The next Kubernetes Upstream Training Japan is scheduled for Monday, August 26, 2024, and we are currently looking for participants. By participating in this training, you will not only gain an understanding of the Kubernetes community but also learn specific contribution methods through hands-on experience!&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This event will be a great opportunity to take the first step in contributing and you will gain valuable tips, so if you are in Japan and interested, we look forward to your participation!&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;】&lt;p&gt;&lt;em&gt;社区帖子，作者：日本 Kubernetes 上游培训组织者、日本云原生社区组织者、NEC Solution Innovators, Ltd. 软件工程师。&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;什么是&lt;a href=&#34;https://kutj.connpass.com/&#34;&gt;日本 Kubernetes 上游培训&lt;/a&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Kubernetes Upstream Training Japan 是一门以日语举办的培训课程，介绍为 Kubernetes 社区（也称为上游社区）做出贡献所需的任务、程序和概念，该项目由云原生计算基金会 ( CNCF），并提供实际贡献过程的实践经验。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;由于社区成员需要用英语与外国人交流，对于英语不好且面临文化障碍的日本人来说加入我们的社区需要很大的勇气。对于那些想加入社区但无法迈出第一步的人来说，我们举办这个活动是为了首先在日本创造一个地方，让他们可以用日语与当地专家交流，逐渐熟悉社区的运作方式。&lt; /p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;从 2019 年开始，该活动每年举办一到两次，即使在 COVID-19 期间也是如此，截至 2024 年 5 月，已总共举办了 10 届。我们认为这个活动是有意义的，因为我们能够与来自全国各地的人们进行交流，并且有些人因为这个活动而开始了他们的贡献活动。从今年开始，该活动将成为 &lt;a href=&#34;https://community.cncf.io/cloud-native-community-japan/&#34;&gt;CNCJ（日本云原生社区）&lt;/a&gt; 的 SIG，我们相信它将进一步更有力地弘扬开源文化。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;什么是日本云原生社区 (CNCJ)&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;CNCJ 成立于 2023 年 11 月 7 日，作为供应商中立的论坛，将 CNCF 上游与日本社区、公司和组织联系起来，在日本推广 CNCF 和云原生技术，并鼓励 OSS 贡献和创新来自日本的云原生。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;截至 2023 年 9 月，日本只有一名 CNCF 大使，KubeCon + CloudNativeCon 上讲日语的人数仅为个位数。也没有日本社区与 CNCF 合作。因此，CNCF 和日本社区的志愿者共同创立了 CNCJ。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;自创办以来，每一次的聚会和分章节都汇聚了对云原生技术感兴趣的人们，让我们能够倾听来自各个行业人士的声音。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;2024 年 3 月 13 日活动回顾&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://kutj.connpass.com/event/310096/&#34;&gt;CNCJ 的首次活动&lt;/a&gt;于 2024 年 3 月 13 日星期三举行。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;活跃的维护者和贡献者正在主持讲座，几乎所有人都属于不同的存储库，他们能够分享他们的真实经验得到了与会人员的一致好评。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;今年的活动有很多日本公司的员工和学生参加。在 50 个可用名额中，有 47 人报名参加了该计划，参与者最多为 35 人。他们中的大多数人提交了 PR 并进行了合并，我们有很多问题，也很兴奋。　&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;我们计划继续每年举办一到两次这样的活动，每次我们也会分享一些新的趋势。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;如果您想收到这些事件的通知，请联系 &lt;a href=&#34;https://community.cncf.io/cloud-native-community-japan/&#34;&gt;CNCJ&lt;/a&gt; 或 &lt;a href =&#34;https://kutj.connpass.com/&#34;&gt;Kubernetes Upstream Training Japan&lt;/a&gt; 并注册成为会员。活动安排完毕后，您将立即收到电子邮件通知。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;此外，作为 CNCJ 的 SIG，我们更新了我们的材料和研讨会录音，并将它们保存在 &lt;a href=&#34;https://github.com/kubernetes-sigs/%20contributor-playground/tree /master/japan/adhoc&#34;&gt;kubernetes-sigs/contributor-playground/japan/adhoc 文件夹&lt;/a&gt;。录音与事先准备和幻灯片都在同一个文件夹中，因此无法参加活动的人可以自行学习，随时观看录音。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;在日本发展云原生社区&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;通过这样做，我们希望能够帮助更多的人加入我们的社区，促进日本云原生技术的发展，帮助云原生社区成长。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;下一次活动将于 2024 年 8 月 26 日举行&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;下一次 Kubernetes 上游培训日本计划于 2024 年 8 月 26 日星期一举行，我们目前正在寻找参与者。通过参加本次培训，您不仅可以了解Kubernetes社区，还可以通过亲身体验了解具体的贡献方法！&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;此活动将是一个迈出贡献第一步的绝佳机会，您将获得宝贵的提示，因此，如果您在日本并且对此感兴趣，我们期待您的参与！&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;</description>
      <pubDate>Tue, 20 Aug 2024 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Explain infrastructure as code (alternatives to IaC)】将基础设施解释为代码（IaC 的替代方案）</title>
      <link>https://www.cncf.io/blog/2024/08/15/explain-infrastructure-as-code-alternatives-to-iac/</link>
      <description>【&lt;p&gt;&lt;em&gt;Member post originally published on &lt;a href=&#34;https://blog.appcd.com/explain-infrastructure-as-code-alternatives&#34;&gt;AppCD’s blog&lt;/a&gt; by Kunal Dabir&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image size-full&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1260&#34; height=&#34;630&#34; src=&#34;https://www.cncf.io/wp-content/uploads/2024/08/image-2-3.jpg&#34; alt=&#34;Abstract technology grid&#34; class=&#34;wp-image-116150&#34; srcset=&#34;https://www.cncf.io/wp-content/uploads/2024/08/image-2-3.jpg 1260w, https://www.cncf.io/wp-content/uploads/2024/08/image-2-3-300x150.jpg 300w, https://www.cncf.io/wp-content/uploads/2024/08/image-2-3-1024x512.jpg 1024w, https://www.cncf.io/wp-content/uploads/2024/08/image-2-3-768x384.jpg 768w, https://www.cncf.io/wp-content/uploads/2024/08/image-2-3-900x450.jpg 900w, https://www.cncf.io/wp-content/uploads/2024/08/image-2-3-400x200.jpg 400w, https://www.cncf.io/wp-content/uploads/2024/08/image-2-3-800x400.jpg 800w&#34; sizes=&#34;(max-width: 1260px) 100vw, 1260px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I was recently speaking with an SRE who, when asked for their opinion on Infrastructure as Code (IaC), shouted, “it’s terrible and our devs hate it!” Now we may have been discussing a particular company, but the overall takeaway is that IaC isn’t always easy, especially for developers who have to learn it on top of the job they were hired to do. This particular SRE spent a lot of his time auditing and fixing IaC for devs. IaC is for sure a great option for code-driven infrastructure, but its complexity requires expertise; expertise that isn’t always available.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;So when I was thinking about the needs of the developer community, I was interested to see that “explain infrastructure as code” is one of Google’s autocomplete suggestions. Increasingly, developers are being asked to not just write application code, but also to do the work necessary to get that application deployed. Which more often than not requires cloud infrastructure, once again putting yet another requirement on developers to provision that too.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;But developers aren’t always fans (we hear you!) for a number of reasons:&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;Complexity and Learning Curve&lt;/strong&gt;: IaC can be complex and has a steep learning curve, especially for those new to infrastructure as code (IaC). Specifically, the HCL (HashiCorp Configuration Language) syntax and the need to understand various Terraform concepts can be daunting.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;State Management&lt;/strong&gt;: Managing state can be tricky and error-prone. The state file is a critical part of IaC’s operation, and if it becomes corrupted or is mishandled, it can cause significant issues especially as some tools (like Terraform) require state files.&amp;nbsp;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;Debugging Difficulties&lt;/strong&gt;: Debugging IaC configurations can be challenging. Error messages may not always be clear or helpful, making it hard to identify and fix issues.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;Lack of Idempotency&lt;/strong&gt;: While most IaC providers aim to be idempotent, ensuring that the same code always produces the same result, there are cases where it can lead to unexpected changes or require manual intervention. Check out this&amp;nbsp;&lt;a href=&#34;https://aws.plainenglish.io/what-is-idempotency-in-terraform-and-ansible-ebc2ef2e4234&#34;&gt;AWS blog for more info on Idempotency&lt;/a&gt;.&amp;nbsp;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;Dependency Management&lt;/strong&gt;: Handling dependencies between resources can be complex and lead to issues like circular dependencies, which can be difficult to resolve.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;Performance Issues&lt;/strong&gt;: For large infrastructures, IaC can be slow, and plan or apply operations might take considerable time, reducing productivity.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;Limited Language Features&lt;/strong&gt;: Compared to general-purpose programming languages, IaC can have limited features, making it difficult to express complex logic or configurations. While some IaC options can be written in programming languages, most use declarative or configuration langues like HCL, JSON or YAML which are limited in features.&amp;nbsp;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;Provider Limitations&lt;/strong&gt;: The quality and feature set of IaC providers can vary. If a provider is not well-maintained or lacks support for specific features, it can limit what developers can achieve.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;Preference for Alternatives&lt;/strong&gt;: There are many Infrastructure as Code solutions like Terraform, AWS CloudFormation, Pulumi, or Kubernetes-native tools, which some might prefer over others and be easier to integrate into their workflows.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;Alternatives to Infrastructure as Code&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Developer infrastructure tools are necessary – we all know that. But we need to make it as easy as possible, i.e. abstract away tooling and expertise where possible so that a developer doesn’t need to be a DevOps expert in addition to an app-expert. Infrastructure as Code, while revolutionary in many ways, often falls short. IaC tends to prioritize the infrastructure layer, sometimes at the expense of the application’s unique requirements. This can lead to scenarios where the infrastructure dictates the application’s architecture, rather than the other way around. The result is a less efficient, less optimized system that may not fully leverage the application’s strengths (while annoying developers because the app doesn’t run the way it should!).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:36px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-default&#34;&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-group is-style-border is-layout-constrained wp-block-group-is-layout-constrained&#34;&gt;&#xA;&lt;p class=&#34;is-style-spaced-uppercase&#34;&gt;Keep reading&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.cncf.io/blog/2024/06/24/why-you-do-not-want-a-visualization-of-your-infrastructure-as-code/&#34;&gt;You don’t want a visualization&lt;/a&gt; of your IaC&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Find &lt;a href=&#34;https://www.cncf.io/online-programs/cloud-native-live-finding-infrastructure-as-code-missteps/&#34;&gt;IaC missteps&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Use Terrastest to &lt;a href=&#34;https://www.cncf.io/blog/2022/07/18/testing-your-infrastructure-as-code-using-terratest/&#34;&gt;test your IaC&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Register for &lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/register/&#34;&gt;KubeCon + CloudNativeCon North America 2024&lt;/a&gt; today&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This is where Infrastructure from Code comes in. By auto-generating IaC based on the application source code, developers can focus on their core application development tasks without getting bogged down by the complexities of infrastructure management.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Infrastructure from Code is a compelling alternative to IaC because it abstracts away IaC from the software development lifecycle removing the requirement for developers to be infrastructure experts. (It also means infrastructure experts avoid spending hours fixing IaC for devs).&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;The Appeal of Infrastructure from Code&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Templates often attempt to offer one-size-fits-all solutions, which can be limiting and inflexible. They might be useful in some contexts, but they can also hinder creativity and adaptability.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Infrastructure from Code offers quick, concise IaC that can significantly streamline workflows. Unlike using fill in the blank templates, which can be cumbersome and rigid, Infrastructure from Code analyzes what has already been coded to create IaC that is application-centric i.e. infrastructure provisioned for that application. Being application-centric means focusing on the specific needs and characteristics of the application rather than forcing it to fit into a predetermined infrastructure model. This approach allows for greater flexibility and optimization, as the infrastructure is tailored to support the application most effectively.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With Infrastructure from Code, devs can ensure standards are automatically applied based on best practices around security, reliability and provisioning. These can be industry-accepted best practices or even organizational standards. But standards are core to Infrastructure from Code.&amp;nbsp;&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Rather than relying on static templates, adopting standards can be far more beneficial. Standards provide a consistent framework that can be adapted to various scenarios without the constraints of a predefined template. This approach encourages best practices and ensures that the infrastructure is robust, scalable, and secure.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;Infrastructure from Code Benefits Developers&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Infrastructure from Code ensures all the work already coded by a developer to define infrastructure requirements within their application code is recognized and auto-generated. Instead of putting work into your app and then having to replicate it in IaC using templates, this method ensures that the infrastructure is tailored to the application’s needs, providing a more seamless and efficient workflow.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Infrastructure from Code offers several benefits to developers:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;Simplicity&lt;/strong&gt;: By analyzing static code to generate IaC automatically, developers can get their infrastructure provisioned faster – meaning features/apps get to market faster (and often without wait times).&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;Efficiency&lt;/strong&gt;: Infrastructure from Code minimizes the need for extensive DevOps knowledge, allowing developers to focus on their core competencies.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;Consistency&lt;/strong&gt;: Standards-based approaches in Infrastructure from Code ensure that infrastructure is reliable and scalable, adapting to various application needs without rigid templates.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Take control of your infrastructure without becoming an expert in a different domain. This streamlined approach reduces cognitive load and allows for more creativity and innovation in application development.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Infrastructure from Code is the future of IaC. You can explore Infrastructure from Code and see how it can transform your development process at&amp;nbsp;&lt;a href=&#34;https://appcd.io/?__hstc=10466666.461009d11466dac37fe86430408a9745.1723636624862.1723636624862.1723636624862.1&amp;amp;__hssc=10466666.1.1723636624862&amp;amp;__hsfp=1488656378&#34;&gt;appCD&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;】&lt;p&gt;&lt;em&gt;成员帖子最初由 Kunal Dabir 在 &lt;a href=&#34;https://blog.appcd.com/explain-infrastruct-as-code-alternatives&#34;&gt;AppCD 博客&lt;/a&gt;上发布&lt;/em&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class =“wp-block-image size-full”&gt;&lt;img加载=“lazy”解码=“异步”宽度=“1260”高度=“630”src=“https://www.cncf.io/ wp-content/uploads/2024/08/image-2-3.jpg&#34; alt=&#34;抽象技术网格&#34; class=&#34;wp-image-116150&#34; srcset=&#34;https://www.cncf.io/wp-content /uploads/2024/08/image-2-3.jpg 1260w，https://www.cncf.io/wp-content/uploads/2024/08/image-2-3-300x150.jpg 300w，https:// /www.cncf.io/wp-content/uploads/2024/08/image-2-3-1024x512.jpg 1024w，https://www.cncf.io/wp-content/uploads/2024/08/image- 2-3-768x384.jpg 768w，https://www.cncf.io/wp-content/uploads/2024/08/image-2-3-900x450.jpg 900w，https://www.cncf.io/ wp-content/uploads/2024/08/image-2-3-400x200.jpg 400w，https://www.cncf.io/wp-content/uploads/2024/08/image-2-3-800x400.jpg 800w“尺寸=”（最大宽度：1260px）100vw，1260px“referrerpolicy=“no-referrer”&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;我最近与一位 SRE 交谈，当被问及对基础设施即代码 (IaC) 的看法时，他喊道：“这太糟糕了，我们的开发人员讨厌它！”现在我们可能正在讨论一家特定的公司，但总体的结论是 IaC 并不总是那么容易，特别是对于那些必须在受雇从事的工作之外学习 IaC 的开发人员来说。这个特定的 SRE 花费了大量时间为开发人员审核和修复 IaC。 IaC 无疑是代码驱动基础设施的绝佳选择，但其复杂性需要专业知识；并不总是可用的专业知识。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;因此，当我思考开发者社区的需求时，我很感兴趣地看到“将基础设施解释为代码”是 Google 的自动完成建议之一。越来越多的开发人员不仅被要求编写应用程序代码，而且还被要求完成部署该应用程序所需的工作。这通常需要云基础设施，这再次对开发人员提供另一个要求。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;但出于多种原因，开发者并不总是粉丝（我们听到了！）：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;复杂性和学习曲线&lt;/strong&gt;：IaC 可能很复杂，并且学习曲线陡峭，特别是对于基础设施即代码 (IaC) 的新手来说。具体来说，HCL（HashiCorp 配置语言）语法和理解各种 Terraform 概念的需要可能令人望而生畏。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;状态管理&lt;/strong&gt;：管理状态可能很棘手且容易出错。状态文件是 IaC 操作的关键部分，如果它损坏或处理不当，可能会导致严重问题，特别是当某些工具（如 Terraform）需要状态文件时。 &lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;调试困难&lt;/strong&gt;：调试 IaC 配置可能具有挑战性。错误消息可能并不总是清晰或有帮助，因此很难识别和解决问题。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;缺乏幂等性：虽然大多数 IaC 提供商的目标是幂等性，确保相同的代码始终产生相同的结果，但在某些情况下可能会导致意外更改或需要手动干预。请查看&lt;a href=&#34;https://aws.plainenglish.io/what-is-idempotency-in-terraform-and-ansible-ebc2ef2e4234&#34;&gt;AWS 博客，了解有关幂等性的更多信息&lt;/a&gt;。 &lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;依赖关系管理&lt;/strong&gt;：处理资源之间的依赖关系可能很复杂，并会导致循环依赖等问题，而这些问题可能很难解决。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;性能问题&lt;/strong&gt;：对于大型基础设施，IaC 可能会很慢，并且规划或应用操作可能需要相当长的时间，从而降低工作效率。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;有限的语言功能&lt;/strong&gt;：与通用编程语言相比，IaC 的功能有限，难以表达复杂的逻辑或配置。虽然一些 IaC 选项可以用编程语言编写，但大多数使用声明性或配置语言，如 HCL、JSON 或 YAML，这些语言的功能有限。 &lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;提供商限制&lt;/strong&gt;：IaC 提供商的质量和功能集可能有所不同。如果提供商维护不善或缺乏对特定功能的支持，则可能会限制开发人员的实现。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;对替代方案的偏好&lt;/strong&gt;：有许多基础设施即代码解决方案，例如 Terraform、AWS CloudFormation、Pulumi 或 Kubernetes 原生工具，有些人可能比其他人更喜欢这些解决方案，并且更容易集成到他们的工作流程中。 &lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;基础设施即代码的替代方案&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;开发人员基础设施工具是必要的——我们都知道。但我们需要使其尽可能简单，即尽可能抽象出工具和专业知识，以便开发人员除了应用程序专家之外不需要成为 DevOps 专家。基础设施即代码虽然在很多方面具有革命性，但常常存在缺陷。 IaC 倾向于优先考虑基础设施层，有时会牺牲应用程序的独特需求。这可能会导致基础设施决定应用程序架构的情况，而不是相反。结果是一个效率较低、优化程度较低的系统，可能无法充分利用应用程序的优势（同时会惹恼开发人员，因为应用程序没有按应有的方式运行！）。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:36px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-default&#34;&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-group is-style-border is-layout-constrained wp-block-group-is-layout-constrained&#34;&gt;&#xA;&lt;p class=&#34;is-style-spaced-uppercase&#34;&gt;继续阅读&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.cncf.io/blog/2024/06/24/why-you-do-not-want-a-visualization-of-your-infrastruct-as-code/ &#34;&gt;您不希望 IaC 可视化&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;查找&lt;a href=&#34;https://www.cncf.io/online-programs/cloud-native-live-finding-infrastruct-as-code-missteps/&#34;&gt;IaC 失误&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;使用 Terrastest &lt;a href=&#34;https://www.cncf.io/blog/2022/07/18/testing-your-infrastruct-as-code-using-terratest/&#34;&gt;测试您的 IaC&lt;/一个&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;立即报名参加&lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/register/&#34;&gt;KubeCon + CloudNativeCon North America 2024&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;这就是“代码基础架构”的用武之地。通过根据应用程序源代码自动生成 IaC，开发人员可以专注于其核心应用程序开发任务，而不会陷入基础架构管理的复杂性中。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;代码基础设施是 IaC 的一个引人注目的替代方案，因为它将 IaC 从软件开发生命周期中抽象出来，消除了开发人员成为基础设施专家的要求。 （这也意味着基础设施专家可以避免花费大量时间为开发人员修复 IaC）。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;代码基础设施的吸引力&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;模板通常试图提供一刀切的解决方案，但这可能具有限制性且缺乏灵活性。它们在某些情况下可能有用，但也会阻碍创造力和适应性。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;来自代码的基础架构提供快速、简洁的 IaC，可以显着简化工作流程。与使用繁琐且僵化的填空模板不同，代码基础设施分析已经编码的内容，以创建以应用程序为中心的 IaC，即为该应用程序配置的基础设施。以应用程序为中心意味着关注应用程序的特定需求和特征，而不是强迫它适应预定的基础设施模型。这种方法可以实现更大的灵活性和优化，因为基础设施是专门为最有效地支持应用程序而定制的。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;通过代码基础设施，开发人员可以确保根据安全性、可靠性和配置方面的最佳实践自动应用标准。这些可以是行业公认的最佳实践，甚至是组织标准。但标准是代码基础设施的核心。  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;采用标准比依赖静态模板更有利。标准提供了一致的框架，可以适应各种场景，而不受预定义模板的限制。这种方法鼓励最佳实践，并确保基础设施稳健、可扩展且安全。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;代码基础设施有利于开发人员&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;代码基础架构可确保开发人员已编码的所有工作在其应用程序代码中定义基础架构需求均得到识别并自动生成。此方法无需将工作放入应用程序中，然后使用模板在 IaC 中复制它，而是可确保基础架构根据应用程序的需要进行定制。需要，提供更加无缝和高效的工作流程。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;代码基础设施为开发人员提供了多种好处：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;简单性&lt;/strong&gt;：通过分析静态代码以自动生成 IaC，开发人员可以更快地配置基础设施，这意味着功能/应用程序可以更快地推向市场（并且通常无需等待时间）。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;效率&lt;/strong&gt;：基于代码的基础设施最大限度地减少了对广泛的 DevOps 知识的需求，使开发人员能够专注于他们的核心能力。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;一致性&lt;/strong&gt;：基础设施代码中基于标准的方法可确保基础设施可靠且可扩展，无需严格的模板即可适应各种应用程序需求。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;无需成为不同领域的专家即可控制您的基础架构。这种简化的方法减少了认知负担，并允许在应用程序开发中发挥更多的创造力和创新力。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;代码基础架构是 IaC 的未来。您可以通过代码探索基础架构，了解它如何改变您的开发流程：&lt;a href=&#34;https://appcd.io/?__hstc=10466666.461009d11466dac37fe86430408a9745.1723636624862.1723636624862.1723636624862.1&amp;__hs sc=10466666.1.1723636624862&amp;__hsfp=1488656378&#34;&gt;appCD&lt;/一个&gt;.&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;</description>
      <pubDate>Wed, 14 Aug 2024 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【wasmCloud on the factory floor: efficient and secure processing of high velocity machine data】工厂车间的 wasmCloud：高效、安全地处理高速机器数据</title>
      <link>https://www.cncf.io/blog/2024/08/23/wasmcloud-on-the-factory-floor-efficient-and-secure-processing-of-high-velocity-machine-data/</link>
      <description>【&lt;p&gt;&lt;em&gt;End user blog by Jochen Rau and Tyler Schoppe, Platform Engineering team at MachineMetrics&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote class=&#34;wp-block-quote is-layout-flow wp-block-quote-is-layout-flow&#34;&gt;&#xA;&lt;p class=&#34;has-black-color has-gray-300-background-color has-text-color has-background has-link-color wp-elements-af86228d1572f0ae063b571f002771af&#34;&gt;&lt;em&gt;“WebAssembly, wasmCloud, and NATS will not only reshape the MachineMetrics business but are already transforming industrial IoT. A big thanks to the WebAssembly and wasmCloud community for supporting us all the way here and providing such awesome tools.”&lt;/em&gt; – &lt;strong&gt;Jochen Rau, Data Platform Lead, MachineMetrics.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;Improving Manufacturing Performance, Efficiency and Longevity&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Operating in the manufacturing sector has never been more costly. Exacerbated by high inflation, the cost of materials, fuel, shipping and labor have risen exponentially post-pandemic. In response, manufacturers are looking for ways to reduce maintenance costs, and improve production capacity. They’re doing this by putting advanced data analytics into production lines to better understand and optimize machine performance.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.machinemetrics.com/&#34;&gt;&lt;strong&gt;MachineMetrics LLC&lt;/strong&gt;&lt;/a&gt;, is a catalyst for this next phase of digital transformation. The company’s customers operate factories and plants containing advanced manufacturing machinery, producing swathes of unutilized data. Reporting is usually carried out manually, sometimes on thousands of machines. Manual errors often arise which result in missed anomalies, risking eventual machine failure.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;MachineMetrics’ edge monitoring devices connect to each machine to capture timely and accurate data from machine controls and sensors. By being able to closely analyze the performance of machinery, operators more accurately predict wear and tear. This reduces costly incidents, lowers maintenance costs and extends the longevity of equipment.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Data capture alone, however, consumes the majority of resources on each device which leaves less space to do much else. The inherent abundance of high-frequency data, coupled with network constraints, make visualizing that data difficult in tools like Grafana. MachineMetrics’ Data Platform Team Engineers Jochen Rau and Tyler Schoppe, suspected that the efficiency of the WebAssembly (Wasm) bytecode format could help solve this issue and unlock greater architectural freedom.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;WebAssembly is often described as a tiny virtual machine designed to execute portable bytecode in any location, at near native speed. When built with standardized, interchangeable &lt;strong&gt;WebAssembly components&lt;/strong&gt;, applications can run on any server, device or cloud that supports the standard APIs of WASI (WebAssembly System Interfaces) 0.2, regardless of the underlying hardware or operating system.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;To test the theory, Rau and Schoppe designed an early PoC with the CNCF Sandbox Project &lt;strong&gt;wasmCloud&lt;/strong&gt;, which enables users to run WebAssembly workloads in distributed environments.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;Edge Extensibility with WebAssembly&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Streaming high frequency data poses considerable challenges, exponentially increasing ingest costs. Many factories do not have the network bandwidth to support volume data being streamed across a fleet of machines. Adding to the challenge, a single edge device can collect data from dozens of systems machines and push it to the cloud, but this leaves few resources available for compute.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The PoC was created to discover whether wasmCloud could provide a more efficient and lightweight compute methodology, with business logic that could be more easily transported over the network. This would make better use of existing available resources at the edge, and put portable processing where needed most.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Engineered around the standard APIs of WASI 0.2, wasmCloud allowed the team to deploy and manage workloads as &lt;a href=&#34;https://component-model.bytecodealliance.org/design/why-component-model.html&#34;&gt;&lt;strong&gt;components&lt;/strong&gt;&lt;/a&gt;: portable, interoperable WebAssembly binaries that could run anywhere from the cloud to the edge. By including only the code they needed in components and fulfilling non-functional requirements with wasmCloud providers linked at runtime, applications could be tiny and portable. Because the non-functional requirements are externalized, updating dependencies for large fleets of devices is easy in case of a bug or needed feature&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Most importantly, the team could manage and run wasmCloud on existing Kubernetes clusters in a way that felt familiar to them, bringing the kind of extensibility to Kubernetes that was previously impossible.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXeQ03a-VU58Bo3qCnvFCXmGQJgXuZsMMZnnnpXgAVC2s7e3wuxiyTsESk7aWU8mzclP-DrGIh8uBEeRieTUrTv39jlMhG09DKQCYV6ZCgLHBEWdEhXPneY45JjlFbi_whAVah8ebch8mViL_Y-fpUfSMZo?key=7akIfN2LsupSp5m-Be-HvA&#34; alt=&#34;Figure 1: What platform engineering feels like in the wasmCloud ecosystem.&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 1: What platform engineering feels like in the wasmCloud ecosystem.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;Proof of Concept: Downsampling High-Frequency Data&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The team developed a custom algorithm allowing high-frequency data to be downsampled from any deployment target. This would allow processing power to be moved between edges and clouds, according to need and without losing data fidelity. Whether analyzing 5000 data points or just 50, the data would be consistent. Built on Sveinn Steinarsson’s (University of Iceland) &lt;a href=&#34;https://skemman.is/bitstream/1946/15343/3/SS_MSthesis.pdf&#34;&gt;Largest-Triangle-Three-Buckets (LTTB)&lt;/a&gt; algorithm, it was adjusted to operate on unbounded streams and provided stateful processing to enable storage.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Implemented in Rust and deployed in wasmCloud as a Wasm component, the completed downsampling algorithm reports proactive maintenance telemetry across edge and cloud platforms. Crucially, the algorithm is deployed to wasmCloud with Wadm, a Wasm components native orchestrator that integrates seamlessly with Kubernetes.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Jochen Rau: &lt;em&gt;“Wadm simplifies creating and linking components. It’s easy to define your providers, as well as your components, in this common model and produce the providers you need for key-value mass messaging, as well as the downsampling component, hooked up together with some links. That’s great for reconciliation. And as we release new versions, it helps make sure everything goes smoothly.”&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The algorithm proves it’s possible to run high-frequency data workloads as components, on edge devices running in wasmCloud. wasmCloud is also shown to be an effective compute lattice on which to move workloads seamlessly between deployment targets. In the next development phase, Schoppe and Rau will deploy wasmCloud on machines, and begin to observe the potential efficiencies.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXfiGTZTIIDfEganWVi9J0xfYQF_7S2GPe59lkUa3j0EVNVq8JjMYZnmSoyRYee09KASHX95SVN2K8B0rq_GdrWRSl84ukEE9SXjEF_k7_0S5jjL41CsR5RDx5a9YgpujBLDZoIJXu5MCH2Ra-FVzXroURbl?key=7akIfN2LsupSp5m-Be-HvA&#34; alt=&#34;Figure 2: Downsampling algorithm maintains fidelity of the graph even at low sampling rates&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 2: Downsampling algorithm maintains fidelity of the graph even at low sampling rates&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXdDrMnXScGVx-kcAdKM9EfkDeH0KhIsmsjoJImwnuuJroOEkIxzEBsmT7tdkJKhMW1BPH5br8ASIlynU7aDXRcIeeu7ckEI1N07dSh2_lUZyNMPZ0sSAgGhVFBrUJHyrnSC5inTKhgtBaOrcr_OT-zDcNI?key=7akIfN2LsupSp5m-Be-HvA&#34; alt=&#34;Figure 3: Architecture of the PoC showing wasmCloud host running on an edge device. NATS serves as backbone for machine, configuration, and control data.&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 3: Architecture of the PoC showing wasmCloud host running on an edge device. NATS serves as backbone for machine, configuration, and control data.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;What are the challenges wasmCloud overcomes?&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;Portable Processing Made Real&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Rather than handing off data to be processed in the cloud, applications running as components in wasmCloud are radically smaller, freeing resources to process and stream performance data directly from machines. For MachineMetrics’ customers, that means lower latency, faster time-to-value, and fewer hardware problems.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This is only half the story. The real advantage for the team is in making these workloads portable to &lt;em&gt;any&lt;/em&gt; location—easily shifted back-and-forth between multiple edges and clouds. This gives the team freedom to make better and quicker architectural decisions.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Tyler Schoppe: &lt;em&gt;“What’s powerful is we don’t have to think about where the compute lives. wasmCloud takes that off the minds of developers, the importance of which cannot be overstated. If we need to make changes it’s a lot easier to pivot and move workloads from the edge to the cloud; if we need to scale, for instance. That would be very challenging for us to do in our current architecture.”&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;wasmCloud also breaks down language barriers. Usually, edge application teams work in a different preferred languages to their cloud engineering counterparts. Whether written in Python, Go, C++ or any other language, WASI 0.2 components mean edge and cloud teams can interoperate using standard WebAssembly Interface Type (WIT) definitions for interfaces. This unties them from specific libraries so they can focus on business logic.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;Architectural Freedom = Resource Efficiency&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In traditional IoT models, processing is linear and unidirectional. Data is collected from separate sensors: captured by an edge, then ingested into a cloud—where the majority of compute takes place—before being handed off to the consumer. By pushing processing to the cloud, higher costs are incurred and latency increases. More importantly, valuable, more efficient processing capacity at the edge is underutilized.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;MachineMetrics does the majority of its data processing in Kubernetes in the cloud. By moving compute to devices, existing edge resources are used more effectively and cloud resources preserved. Porting logic between resources means the team can balance their resources against their needs. They use the cloud to scale the processing of larger data sets, whilst allowing edge devices to process and stream real-time data directly to operators.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Jochen Rau: &lt;em&gt;“The focus is to find ways to more efficiently use resources that we already have at the edge, and manage our cloud resources more effectively. wasmCloud helps us do that. It’s also a balance—edge devices are relatively small so we can scale much more easily in the cloud. Having the flexibility to move workloads around means greater resource efficiency.”&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;Extending the Value of Existing Architecture&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;MachineMetrics uses Kubernetes extensively, but the team can’t run it at the edge. This is partly due to the company’s OS configuration, but primarily due to the limitations of Kubernetes. Kubernetes is great at managing infrastructure, but not so good at running applications on resource-constrained devices.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;To solve this problem,&lt;a href=&#34;https://www.youtube.com/watch?v=fQdkNGZqYZA&#34;&gt; MachineMetrics&lt;/a&gt; uses wasmCloud alongside Kubernetes and ArgoCD, making use of the &lt;a href=&#34;https://github.com/wasmcloud/wasmcloud-operator&#34;&gt;wasmcloud-operator&lt;/a&gt; to deploy software to all of its edge locations. The wasmcloud-operator allows platform engineers to manage and run Wasm on Kubernetes using the standard, familiar controller pattern and custom resource definitions (CRDs), all while remaining decoupled from Kubernetes and free to leverage the unique benefits of components. Bringing the kind of extensibility to Kubernetes that was previously impossible.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Rau says: &lt;em&gt;“We shifted up a level: taking the wasmCloud host and deploying it on Kubernetes. The wasmcloud-operator makes this really simple to manage with our existing tools. We deploy our compute workloads on the lattice on wasmCloud. We’re crossing the boundaries between edge and cloud.”&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Using this “decoupled” model means it’s easy for MachineMetrics to tie wasmCloud directly into existing pipelines and tools like ArgoCD.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXc1BHaog5GC0UGS5GKpmHHycGimOj8goujL-piBc8wGgHvKwzWAY-ZXD5bEKBY41ZebFql-y0i-amlE-UBNBqB3HGs9ihWsQRwNB4w2wdtJad-fy1UJ6rhtCr_EIhKW6Q0RAUulz5KD7OPGPC_denwcew?key=7akIfN2LsupSp5m-Be-HvA&#34; alt=&#34;Figure 4: wasmCloud integrates with Kubernetes but as a separate service. This means engineers can capitalize on the benefits of the component model.&amp;nbsp;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 4: wasmCloud integrates with Kubernetes but as a separate service. This means engineers can capitalize on the benefits of the component model.&amp;nbsp;&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;Deny-By-Default Security&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Security is also a major consideration for MachineMetrics. Each customer has completely distinct approaches to security. Some have large, dedicated security teams whereas others may adopt a leaner approach. In every case, data is highly sensitive–MachineMetrics has to bring the same cast-iron security to every use case, and must be able to scale the same level of security to devices and sensors.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The power of WebAssembly allows wasmCloud applications to run securely from edge to edge. All code runs in a deny-by-default, secure, stateless, and reactive sandbox. The sandbox satisfies larger customers’ enterprise Service Level Agreements and more complex security, compliance, and policy requirements.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Tyler Schoppe: &lt;em&gt;“We work with mom and pop shops making screws, all the way to hardware planned for outer space. Regardless of how much or little security they have, we treat their security with the same level of care. wasmCloud’s sandbox model gives us a lot of guarantees. In terms of developer peace of mind, it provides a lot for us out of the box.&lt;/em&gt;”&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;wasmCloud’s hosts enforce a certain level of default security that cannot be loosened. For example, hosts will always validate runtime links. Additionally, the wasmCloud policy service API can be used to extend and customize policy evaluation, such as by restricting untrusted application components and providers on particular hosts.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;Benefits to Manufacturers&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The team believes the benefits of being able to process and stream high velocity data directly from machines will excite their customers, from small shops to large plants. Carbide tools are very expensive—each machine costs thousands—so properly managing the utilization of them is essential. Damaged tools are not just expensive to replace, they can take out entire production lines. Extending the life of their tools through closer monitoring will save customers thousands in maintenance and replacements.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For Rau, the exciting part is being able to deliver a feature that customers have been waiting for.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Rau: &lt;em&gt;“Downsampled high frequency data is as expressive as raw data; we’re moving beyond aggregated monitoring data to being able to see real-time, high velocity data on dashboards. This is something our customers are asking for.”&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Rau and Shoppe are now taking what they’ve learned from the PoC, developing the solution further and investigating ways to integrate with third-party machinery.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Schoppe concludes:&lt;em&gt; “There’s nothing like this on the market right now and so it’s a great opportunity for us to put this kind of compute power in many more customers’ hands. As well as helping us differentiate, it will provide tremendous operational value for customers—something they can rely on to help them save money in a different way.”&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;】&lt;p&gt;&lt;em&gt;MachineMetrics 平台工程团队 Jochen Rau 和 Tyler Schoppe 撰写的最终用户博客&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote class=&#34;wp-block-quote is-layout-flow wp-block-quote-is-layout-flow&#34;&gt;&#xA;&lt;p class=&#34;has-black-color has-gray-300-background-color has-text-color has-background has-link-color wp-elements-af86228d1572f0ae063b571f002771af&#34;&gt;&lt;em&gt;“WebAssembly、wasmCloud 和 NATS 将不仅重塑了 MachineMetrics 业务，而且已经在改变工业物联网。非常感谢 WebAssembly 和 wasmCloud 社区一直以来对我们的支持，并提供了如此出色的工具。”&lt;/em&gt; – &lt;strong&gt;MachineMetrics 数据平台主管 Jochen Rau。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/块引用&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;提高制造性能、效率和寿命&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;制造业的运营成本从未如此之高。由于高通胀，材料、燃料、运输和劳动力的成本在大流行后呈指数级上升。对此，制造商正在寻找降低维护成本并提高生产能力的方法。为此，他们将先进的数据分析应用到生产线中，以更好地了解和优化机器性能。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.machinemetrics.com/&#34;&gt;&lt;strong&gt;MachineMetrics LLC&lt;/strong&gt;&lt;/a&gt; 是数字化转型下一阶段的催化剂。该公司的客户运营着拥有先进制造机械的工厂和工厂，产生大量未利用的数据。报告通常是手动进行的，有时在数千台机器上进行。手动错误经常出现，导致遗漏异常，从而导致最终机器故障的风险。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;MachineMetrics 的边缘监控设备连接到每台机器，从机器控制和传感器捕获及时、准确的数据。通过密切分析机械性能，操作员可以更准确地预测磨损。这可以减少代价高昂的事故，降低维护成本并延长设备的使用寿命。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;然而，仅数据捕获就消耗了每个设备上的大部分资源，从而留下更少的空间来做其他事情。高频数据固有的丰富性，再加上网络限制，使得在 Grafana 等工具中可视化这些数据变得困难。 MachineMetrics 的数据平台团队工程师 Jochen Rau 和 Tyler Schoppe 怀疑 WebAssembly (Wasm) 字节码格式的效率可以帮助解决这个问题并释放更大的架构自由度。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;WebAssembly 通常被描述为一个微型虚拟机，旨在以接近本机的速度在任何位置执行可移植字节码。当使用标准化、可互换的 WebAssembly 组件构建时，应用程序可以在任何支持 WASI（WebAssembly 系统接口）0.2 标准 API 的服务器、设备或云上运行，无论底层硬件或操作系统如何。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;为了测试该理论，Rau 和 Schoppe 使用 CNCF 沙盒项目 &lt;strong&gt;wasmCloud&lt;/strong&gt; 设计了一个早期的 PoC，它使用户能够在分布式环境中运行 WebAssembly 工作负载。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;使用 WebAssembly 进行边缘扩展&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;流式传输高频数据带来了相当大的挑战，采集成本呈指数级增加。许多工厂没有网络带宽来支持在一组机器上传输大量数据。雪上加霜的是，单个边缘设备可以从数十台系统机器收集数据并将其推送到云端，但这使得可用于计算的资源很少。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;创建 PoC 的目的是为了发现 wasmCloud 是否可以提供更高效、更轻量的计算方法，以及可以更轻松地通过网络传输的业务逻辑。这将更好地利用边缘现有的可用资源，并将便携式处理放在最需要的地方。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;wasmCloud 围绕 WASI 0.2 的标准 API 进行设计，允许团队以 &lt;a href=&#34;https://component-model.bytecodealliance.org/design/why-component-model.html&#34;&gt; 的方式部署和管理工作负载&lt;strong&gt;组件&lt;/strong&gt;&lt;/a&gt;：可移植、可互操作的 WebAssembly 二进制文件，可以在从云端到边缘的任何地方运行。通过仅在组件中包含所需的代码并通过运行时链接的 wasmCloud 提供商来满足非功能性需求，应用程序可以变得很小且可移植。由于非功能性需求是外部化的，因此在出现错误或所需功能时可以轻松更新大量设备的依赖关系&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;最重要的是，团队可以以他们熟悉的方式在现有 Kubernetes 集群上管理和运行 wasmCloud，为 Kubernetes 带来以前不可能的可扩展性。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXeQ03a-VU58Bo3qCnvFCXmGQJgXuZsMMZnnnpXgAVC2s7e3wuxiyTsESk7aWU8mzclP-DrGIh8uBEeRieTUrTv39jlMh G09DKQCYV6ZCgLHBEWdEhXPneY45JjlFbi_whAVah8ebch8mViL_Y-fpUfSMZo?key=7akIfN2LsupSp5m-Be- HvA&#34; alt=&#34;图 1：wasmCloud 生态系统中的平台工程感觉如何。&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 1：wasmCloud 生态系统中的平台工程感觉如何。&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;概念验证：高频数据下采样&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;该团队开发了一种自定义算法，允许从任何部署目标对高频数据进行下采样。这将允许根据需要在边缘和云端之间转移处理能力，并且不会损失数据保真度。无论是分析 5000 个数据点还是仅分析 50 个数据点，数据都是一致的。基于 Sveinn Steinarsson（冰岛大学）的 &lt;a href=&#34;https://skemman.is/bitstream/1946/15343/3/SS_MSthesis.pdf&#34;&gt;Largest-Triangle-Three-Buckets (LTTB)&lt;/a&gt; 算法，它被调整为在无界流上运行，并提供有状态处理以支持存储。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;完整的下采样算法在 Rust 中实现并作为 Wasm 组件部署在 wasmCloud 中，可报告跨边缘和云平台的主动维护遥测。至关重要的是，该算法通过 Wadm 部署到 wasmCloud，Wadm 是一个与 Kubernetes 无缝集成的 Wasm 组件原生编排器。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Jochen Rau：&lt;em&gt;“Wadm 简化了组件的创建和链接。在这个通用模型中，可以轻松定义您的提供程序以及组件，并生成键值群发消息传递所需的提供程序以及下采样组件，并通过一些链接连接在一起。这对和解很有好处。当我们发布新版本时，它有助于确保一切顺利。”&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;该算法证明可以在 wasmCloud 中运行的边缘设备上将高频数据工作负载作为组件运行。 wasmCloud 还被证明是一种有效的计算网格，可以在部署目标之间无缝移动工作负载。在下一个开发阶段，Schoppe 和 Rau 将在机器上部署 wasmCloud，并开始观察潜在的效率。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXfiGTZTIIDfEganWVi9J0xfYQF_7S2GPe59lkUa3j0EVNVq8JjMYZnmSoyRYee09KASHX95SVN2K8B0rq_GdrWRSl84ukEE9SXjEF _k7_0S5jjL41CsR5RDx5a9YgpujBLDZoIJXu5MCH2Ra-FVzXroURbl?key=7akIfN2LsupSp5m-Be-HvA&#34; alt= “图 2：即使在低采样率下，下采样算法也能保持图形的保真度”referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 2：下采样算法即使在低采样率下也能保持图形的保真度采样率&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXdDrMnXScGVx-kcAdKM9EfkDeH0KhIsmsjoJImwnuuJroOEkIxzEBsmT7tdkJKhMW1BPH5br8ASIlynU7aDXRcIeeu7ckEI1N0 7dSh2_lUZyNMPZ0sSAgGhVFBrUJHyrnSC5inTKhgtBaOrcr_OT-zDcNI?key=7akIfN2LsupSp5m-Be-HvA&#34; alt=&#34;图 3：PoC 架构显示 wasmCloud 主机在边缘设备上运行。NATS 作为机器、配置和控制数据的骨干网。&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 3：PoC 架构，显示在边缘设备上运行的 wasmCloud 主机。 NATS 充当机器、配置和控制数据的骨干网。&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;wasmCloud 克服了哪些挑战？&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;便携式处理成为现实&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;在 wasmCloud 中作为组件运行的应用程序不是将数据移交到云中进行处理，而是要小得多，从而释放资源来直接从机器处理和流式传输性能数据。对于 MachineMetrics 的客户来说，这意味着更低的延迟、更快的价值实现和更少的硬件问题。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;这只是故事的一半。该团队的真正优势在于使这些工作负载可移植到&lt;em&gt;任何&lt;/em&gt;位置 - 在多个边缘和云之间轻松来回转移。这使团队可以自由地做出更好、更快的架构决策。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Tyler Schoppe：&lt;em&gt;“强大之处在于我们不必考虑计算所在的位置。 wasmCloud 让开发人员不再考虑这一点，这一点的重要性怎么强调都不为过。如果我们需要做出改变，那么将工作负载从边缘转移到云端会容易得多；例如，如果我们需要扩展。在我们当前的架构中，这对我们来说是非常具有挑战性的。”&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;wasmCloud 还打破了语言障碍。通常，边缘应用程序团队使用与云工程团队不同的首选语言进行工作。无论是用 Python、Go、C++ 还是任何其他语言编写，WASI 0.2 组件都意味着边缘和云团队可以使用标准的 WebAssembly 接口类型 (WIT) 接口定义进行互操作。这将他们从特定的库中解放出来，以便他们可以专注于业务逻辑。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;架构自由 = 资源效率&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;在传统的物联网模型中，处理是线性且单向的。数据是从单独的传感器收集的：由边缘捕获，然后摄取到云中（大部分计算发生在云中），然后交给消费者。通过将处理推至云端，会产生更高的成本并增加延迟。更重要的是，有价值、更高效的边缘处理能力没有得到充分利用。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;MachineMetrics 在云中的 Kubernetes 中完成大部分数据处理。通过将计算转移到设备，可以更有效地使用现有边缘资源并保留云资源。在资源之间移植逻辑意味着团队可以根据需求平衡资源。他们使用云来扩展更大数据集的处理，同时允许边缘设备处理实时数据并将其直接传输给运营商。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Jochen Rau：&lt;em&gt;“重点是找到更有效地使用我们已有的边缘资源的方法，并更有效地管理我们的云资源。 wasmCloud 帮助我们做到了这一点。这也是一种平衡——边缘设备相对较小，因此我们可以在云中更轻松地进行扩展。灵活地移动工作负载意味着更高的资源效率。”&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;扩展现有架构的价值&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;MachineMetrics 广泛使用 Kubernetes，但团队无法在边缘运行它。这部分是由于该公司的操作系统配置，但主要是由于 Kubernetes 的限制。 Kubernetes 擅长管理基础设施，但不擅长在资源上运行应用程序资源受限的设备。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;为了解决这个问题，&lt;a href=&#34;https://www.youtube.com/watch?v=fQdkNGZqYZA&#34;&gt;MachineMetrics&lt;/a&gt; 将 wasmCloud 与 Kubernetes 和 ArgoCD 一起使用，利用 &lt;a href= “https://github.com/wasmcloud/wasmcloud-operator&#34;&gt;wasmcloud-operator&lt;/a&gt; 将软件部署到其所有边缘站点。 wasmcloud-operator 允许平台工程师使用标准的、熟悉的控制器模式和自定义资源定义 (CRD) 在 Kubernetes 上管理和运行 Wasm，同时保持与 Kubernetes 的解耦，并自由地利用组件的独特优势。为 Kubernetes 带来以前不可能实现的可扩展性。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Rau 说：&lt;em&gt;“我们提升了一个级别：采用 wasmCloud 主机并将其部署在 Kubernetes 上。 wasmcloud-operator 使得使用我们现有的工具来管理变得非常简单。我们将计算工作负载部署在 wasmCloud 上的网格上。我们正在跨越边缘和云之间的界限。”&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;使用这种“解耦”模型意味着 MachineMetrics 可以轻松地将 wasmCloud 直接绑定到现有管道和 ArgoCD 等工具中。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXc1BHaog5GC0UGS5GKpmHHycGimOj8goujL-piBc8wGgHvKwzWAY-ZXD5bEKBY41ZebFql-y0i-amlE-UBNBqB3HGs9i hWsQRwNB4w2wdtJad-fy1UJ6rhtCr_EIhKW6Q0RAUulz5KD7OPGPC_denwcew？ key=7akIfN2LsupSp5m-Be-HvA&#34; alt=&#34;图 4：wasmCloud 与 Kubernetes 集成，但作为一项单独的服务。这意味着工程师可以利用组件模型的优势。  &#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class= &#34;wp-element-caption&#34;&gt;图 4：wasmCloud 与 Kubernetes 集成，但作为单独的服务。这意味着工程师可以利用组件模型的优势。 &lt;/图标题&gt;&lt;/图&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;默认拒绝安全&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;安全性也是 MachineMetrics 的一个主要考虑因素。每个客户都有完全不同的安全方法。有些拥有大型、专门的安全团队，而另一些则可能采用更精简的方法。在每种情况下，数据都高度敏感 - MachineMetrics 必须为每个用例带来相同的铸铁安全性，并且必须能够将相同级别的安全性扩展到设备和传感器。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;WebAssembly 的强大功能允许 wasmCloud 应用程序从边缘到边缘安全地运行。所有代码都在默认拒绝、安全、无状态和反应式沙箱中运行。该沙箱可以满足大型客户的企业服务级别协议以及更复杂的安全性、合规性和策略要求。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Tyler Schoppe：&lt;em&gt;“我们与夫妻店合作生产螺丝，一直到计划用于外太空的硬件。无论他们的安全程度如何，我们都会同等程度地对待他们的安全。 wasmCloud的沙盒模型给了我们很多保证。就开发人员的安心而言，它提供了对我们来说有很多开箱即用的东西。&lt;/em&gt;”&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;wasmCloud 的主机强制执行一定程度的默认安全性，且不能放松。例如，主机将始终验证运行时链接。此外，wasmCloud 策略服务 API 可用于扩展和自定义策略评估，例如通过限制特定主机上不受信任的应用程序组件和提供程序。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;给制造商带来的好处&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;该团队相信，能够直接从机器处理和传输高速数据的好处将使从小商店到大型工厂的客户兴奋不已。硬质合金刀具非常昂贵——每台机器花费数千美元——因此正确管理它们的利用率至关重要。损坏的工具不仅更换成本昂贵，而且还可能毁掉整条生产线。通过更密切的监控来延长工具的使用寿命将为客户节省数千美元的维护和更换费用。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;对于 Rau 来说，令人兴奋的部分是能够提供客户一直在等待的功能。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Rau：&lt;em&gt;“下采样的高频数据与原始数据一样具有表现力；我们正在超越聚合监控数据，转而能够在仪表板上查看实时、高速的数据。这是我们的客户所要求的。”&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Rau 和 Shoppe 现在正在利用从 PoC 中学到的知识，进一步开发解决方案并研究与第三方机器集成的方法。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Schoppe 总结道：&lt;em&gt;“目前市场上还没有这样的产品，因此这是我们将这种计算能力交到更多客户手中的绝佳机会。除了帮助我们脱颖而出之外，它还将为客户提供巨大的运营价值——他们可以依靠它以不同的方式节省资金。”&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;</description>
      <pubDate>Thu, 22 Aug 2024 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【SSO and RBAC: a secure access strategy for your Kubernetes】SSO 和 RBAC：Kubernetes 的安全访问策略</title>
      <link>https://www.cncf.io/blog/2024/08/16/sso-and-rbac-a-secure-access-strategy-for-your-kubernetes/</link>
      <description>【&lt;p&gt;&lt;em&gt;Member post originally published on the &lt;a href=&#34;https://devtron.ai/blog/sso-and-rbac-a-secure-access-strategy-for-your-kubernetes/&#34;&gt;Devtron blog&lt;/a&gt; by Bhushan Nemade&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;TL;DR In the dynamic world of cloud-native, Kubernetes stands as an undisputed leader in the space of container orchestration. This article explores how to secure your Kubernetes environment using Single Sign-On (SSO) and Resource-Based Access Control (RBAC).&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the ever-evolving world of cloud-native computing, Kubernetes has emerged as a standard solution for container orchestration. However, managing access control across multiple Kubernetes clusters can quickly become a complex task, especially in large organizations with numerous teams and members. This is where the power of Single Sign-On (SSO) and Role-Based Access Control (RBAC) comes into play, providing a secure and efficient solution for access management.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;authenticationauthorization&#34;&gt;Authentication/Authorization&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The very first way to secure something in the digital world is to set authentication and authorization. The authentication can be handled by SSO, and the authorization can be done through RBAC for the Kubernetes environment.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;the-challenge-of-manual-access-control&#34;&gt;The Challenge of Manual Access Control&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Imagine yourself as a seasoned DevOps engineer in a fast-paced cloud-native organization, responsible for managing access control across 50 Kubernetes clusters. Multiple teams are collaborating and performing deployments on these clusters at lightning speed. Manually managing access for all team members across all clusters can quickly become a nightmare.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Traditionally, you would need to distribute Kubeconfig files among team members, granting them access to specific clusters. However, this approach has potential security risks because misconfigurations or misplaced files can leave clusters vulnerable to data breaches and unauthorized access. Additionally, manual RBAC configuration for each cluster is time-consuming, error-prone, and lacks fine-grained control. So when managing access control over large numbers of Kubernetes clusters using traditional methods, you can end up with the following:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;Vulnerable clusters&lt;/strong&gt;: Team members need to have a kubeconfig file for each cluster to access it. Any misconfiguration in these files can leave clusters vulnerable to data breaches and security threats.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;Distribution of Kubeconfig&lt;/strong&gt;: Sharing Kubeconfig files with team members is a challenge. An accidental leak or unauthorized access can compromise the entire cluster.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;Complex RBAC&lt;/strong&gt;: In the Kubernetes cluster, you need to configure the RBAC manually. This process is time-consuming and error-prone. With this, you may not get proper, fine-grained control over your Kubernetes cluster.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-us.googleusercontent.com/feAGDnS_Hd8TDqQqg6PwHc3I8tkj0wCCtzNkbecBrOE0Q_rUz17bmDsXUPsxk-VmcOdE2MlSNPOKzZuyYH7BgFO16db5rqzx-9ZUdp8EyV3XfZZ-d9x-Oq_Xb3FpI0IwA_sfbwYkwEP25Xg7qC1526I&#34; alt=&#34;RBAC Complexities&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;These are some major challenges that you may face when you choose to manage multiple clusters manually. And definitely, you don’t want to spend time navigating through these complexities rather than focusing on what truly matters: efficient deployments and innovation.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;single-sign-on-sso-for-authentication&#34;&gt;Single Sign-On (SSO) for Authentication&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;SSO provides ease to the process of authentication by leveraging the concept of federated identity. Users can authenticate themselves using the existing credentials from identity providers. Using an authentication based on SSO for accessing all Kubernetes clusters. SSO will eliminate the need for distributing and managing multiple kubeconfig files to access the Kubernetes cluster, along with reducing the risk of unauthorized access to your clusters.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-us.googleusercontent.com/NZzH1rxvSx5H_ViLdGsimzRtcKoOH_cC4r-TTuyHFQ8y2h6r2yIsePgDP2P521v8s3iXsL0iiZZP_Jiyd49qnAbBYRH89IZBbnuIs0rPOeG008UPnYS9qM-4xpLjbwkQLzCOu7795O00bSfkr6f_1rk&#34; alt=&#34;sso solution&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We Devtron, a platform for managing your Kubernetes environments, offers an SSO solution. It’s tailored specifically for Kubernetes workflows. Devtron with SSO provides you with the ease of accessing all authorized clusters with a single click. You can log in to Devtron with your single set of credentials (e.g., Google, GitHub, GitLab, etc.) and access all your Kubernetes clusters on the Devtron dashboard. So no more juggling with complex Kubeconfig files and static tokens. Devtron sprints for one extra mile; understanding the preferences and needs of every organization can be unique. For that, Devtron offers seven SSO integrations. Empowering organizations and users to choose the SSO that perfectly aligns with their existing infrastructure and security practices. Devtron offers SSO with most of the providers which can be used for authentication. Here are some of them.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote class=&#34;wp-block-quote is-layout-flow wp-block-quote-is-layout-flow&#34;&gt;&#xA;&lt;blockquote class=&#34;wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow&#34;&gt;&#xA;&lt;p&gt;Configure SSO with&amp;nbsp;&lt;a href=&#34;https://docs.devtron.ai/global-configurations/authorization/sso-login/google?ref=devtron.ai&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Google&lt;/a&gt;,&amp;nbsp;&lt;a href=&#34;https://docs.devtron.ai/global-configurations/authorization/sso-login/github?ref=devtron.ai&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;GitHub&lt;/a&gt;,&amp;nbsp;&lt;a href=&#34;https://docs.devtron.ai/global-configurations/authorization/sso-login/gitlab?ref=devtron.ai&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;GitLab&lt;/a&gt;,&amp;nbsp;&lt;a href=&#34;https://docs.devtron.ai/global-configurations/authorization/sso-login/microsoft?ref=devtron.ai&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Microsoft&lt;/a&gt;,&amp;nbsp;&lt;a href=&#34;https://docs.devtron.ai/global-configurations/authorization/sso-login/ldap?ref=devtron.ai&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;LDAP&lt;/a&gt;,&amp;nbsp;&lt;a href=&#34;https://docs.devtron.ai/global-configurations/authorization/sso-login/oidc?ref=devtron.ai&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OIDC&lt;/a&gt;, and&amp;nbsp;&lt;a href=&#34;https://docs.devtron.ai/global-configurations/authorization/sso-login/openshift?ref=devtron.ai&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OpenShift&lt;/a&gt;. You can also integrate other identity and access management tools like&amp;nbsp;&lt;a href=&#34;https://docs.devtron.ai/global-configurations/authorization/sso-login/oidc/okta?ref=devtron.ai&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Okta&lt;/a&gt;&amp;nbsp;and&amp;nbsp;&lt;a href=&#34;https://docs.devtron.ai/global-configurations/authorization/sso-login/oidc/keycloak?ref=devtron.ai&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Keycloak&lt;/a&gt;&amp;nbsp;for managing user permissions.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-us.googleusercontent.com/c9U2JCwkaSqlKwM--UciXmNdbdNSJA_H0ZFHaxwd5N3GeCkL_3AMvm64POY27dbRLsyBr2k-TMB2W8rJfdQgLXOZomYUq6XCxqXBF2eznnWMdQIGMaWdukDj4MdNxWFPJof4sOY0SWNHrcUMCTPV73U&#34; alt=&#34;SSO Login Services&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;SSO Login Services with Devtron&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;fine-grained-access-control-with-rbacauthorization&#34;&gt;Fine-Grained Access Control with RBAC – Authorization&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While SSO solves the authentication challenge for you. RBAC addresses the authorization aspect by allowing you to define granular permissions and restricting access to cluster resources for users. In Kubernetes, you can define roles, cluster roles, role bindings, and cluster role bindings to control access at both the namespace and cluster levels. While setting the manual configuration, you can face issues like:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;Error-Proneness and Complexities:&lt;/strong&gt;&amp;nbsp;Configuring a vast number of roles and permissions in Kubernetes makes it difficult to configure them all accurately. You can face the issue of inconsistent configuration.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;Scalability:&lt;/strong&gt;&amp;nbsp;To allow a new team member to access your cluster, you need to configure the RBAC again. Imagine doing this for each new member and every new cluster. Manually configuring RBAC results in inefficiency.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;Security Concerns:&lt;/strong&gt;&amp;nbsp;While configuring the RBAC manually, there are chances of granting more user access than is required. These will allow users to access sensitive resources like the production database. Now think you mistakenly granted permission to users for databases, and users will fire a delete query on that.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-us.googleusercontent.com/nr_TrXWE05YLm2uN2d_j_PwwqUv1ZbMvSbxG3YYVW0j3USMMZN1x5DK2mtUYjKHAGPuPQ5GIj6Y538ToC9WVQ91_BXx-37rs9KPUBkYCUbA9DJRBGBf_AiFit0c3GWz1-vre0ZAWNojcHke4Mc1-pO8&#34; alt=&#34;User Permissions&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;User Permissions with Devtron&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Devtron simplifies this process by providing a graphical user interface (GUI) for managing RBAC. RBAC in Devtron is specifically designed for the workflow of Kubernetes. It allows the administrator to manage access to Kubernetes clusters, environments, and all resources in the cluster. Ensures least-privileged access and creates a secure environment by defining roles and restricting access for other users. Devtron allows you to manage fine-grained access control down to the Kubernetes cluster resource level. You can grant users precise permissions for specific resources in the cluster. The User Access Management feature in Devtron allows you to add other users, like support engineers’, and manage their access on your Devtron dashboard. You can mark the status of users as ‘Active’, ‘Inactive’, or ‘Keep active until’ (TTL). This feature gives you control over how other qualified users access your Devtron dashboard.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-us.googleusercontent.com/9vjNxPObBhKc2THqdmBIStqNV6YA0kqx-OkdJE9sPg-twV4YSgadn_3dNPjBVF7xAMqv_qU1Ke8ZfEZwfTDWoc0CAumMRP-0o2r8uRM1sJwcdAtj31lrdMwFAwU2LTe7ExT5PBgamsUgeCRMGcBGIeQ&#34; alt=&#34;Time Based Access&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Time Based Access with Devtron&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;the-power-of-sso-and-rbac-combined&#34;&gt;The Power of SSO and RBAC Combined&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;By combining SSO and RBAC, organizations can achieve a robust and secure access control strategy for their Kubernetes environments. This combination offers several benefits:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;enhanced-security&#34;&gt;Enhanced Security&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;SSO for the Kubernetes environment allows you to centralize the process of authentication. Allowing you to use already-existing credentials to access all authorized clusters. SSO removes the chances of clusters getting compromised due to some misconfigurations or misplaced kubeconfig files.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;RBAC allows super admins to define fine-grind permissions for users to access clusters and resources. RBAC is an authorization for your Kubernetes environment that restricts unauthorized users from accessing resources that are not permitted. This adds a layer of security post-SSO.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Setting RBAC and SSO manually for your Kubernetes environment can bring complexities. To simplify the process of setting SSO and RBAC, you can look at tools like Devtron. In Devtron, you can set SSO and RBAC both using a single dashboard and without any complexities.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;improved-manageability&#34;&gt;Improved Manageability&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;Managing multiple clusters across various environments becomes simpler with SSO. Administrators can centrally manage access for clusters rather than configuring each cluster separately.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;With RBAC, administrators can also optimize the Kubernetes environments for cost. Using RBAC, they can restrict user access and utilization of resources.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;scalability-and-flexibility&#34;&gt;Scalability and Flexibility&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;SSO and RBAC can keep up with the scale of your Kubernetes environments. SSO and RBAC provide a robust framework to manage the scale of users and Kubernetes clusters. With the increased number of users, administrators can authenticate them using their Active Directory and use RBAC to allocate permissions and define roles.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Devtron allows administrators to map their existing Active Directory with Devtron SSO. With this, they can authenticate and allow team members to access all authorized microservices with a single click. Along with this, they can apply predefined roles and permissions to them. All of these are possible from a single dashboard.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the dynamic world of cloud-native computing, securing access to Kubernetes clusters is paramount. By leveraging the power of SSO and RBAC, organizations can streamline access management, enhance security, and ensure efficient collaboration across teams. Devtron offers a comprehensive solution, simplifying the implementation of SSO and RBAC while providing a centralized dashboard for access control management. Embrace the simplicity and security of SSO and RBAC in your Kubernetes environment, and empower your teams to innovate with confidence.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Devtron’s RBAC can also be extended and can be used for more secure and controlled kubectl access. Users don’t have to log in to the dashboard and can use kubectl commands which would be proxied through Devtron with limited access and api-tokens given for the respective user. To learn more, check out&amp;nbsp;&lt;a href=&#34;https://devtron.ai/blog/control-and-secure-kubectl-access/&#34;&gt;this blog about control and secure kubectl access&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;If you have any queries, don’t hesitate to&amp;nbsp;&lt;a href=&#34;https://rebrand.ly/devtron-demo?ref=blog&#34; rel=&#34;noreferrer noopener&#34; target=&#34;_blank&#34;&gt;connect with us&lt;/a&gt;. Join the lively discussions and shared knowledge in our actively growing&amp;nbsp;&lt;a href=&#34;https://rebrand.ly/Devtron-Discord?ref=devtron.ai&#34; rel=&#34;noreferrer noopener&#34; target=&#34;_blank&#34;&gt;Discord Community&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;】&lt;p&gt;&lt;em&gt;成员帖子最初发布于 &lt;a href=&#34;https://devtron.ai/blog/sso-and-rbac-a-secure-access-strategy-for-your-kubernetes/&#34;&gt;Devtron博客&lt;/a&gt;作者：Bhushan Nemade&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;TL;DR 在云原生的动态世界中，Kubernetes 是容器编排领域无可争议的领导者。本文探讨如何使用单点登录 (SSO) 和基于资源的访问控制 (RBAC) 来保护 Kubernetes 环境。&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;在不断发展的云原生计算世界中，Kubernetes 已成为容器编排的标准解决方案。然而，管理多个 Kubernetes 集群的访问控制很快就会成为一项复杂的任务，尤其是在拥有众多团队和成员的大型组织中。这就是单点登录 (SSO) 和基于角色的访问控制 (RBAC) 发挥作用的地方，为访问管理提供安全高效的解决方案。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;authenticationauthorization&#34;&gt;身份验证/授权&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;在数字世界中保护某些内容的第一个方法是设置身份验证和授权。对于 Kubernetes 环境，可以通过 SSO 进行身份验证，通过 RBAC 进行授权。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;the-challenge-of-manual-access-control&#34;&gt;手动访问控制的挑战&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;想象一下自己是一个快节奏的云原生组织中经验丰富的 DevOps 工程师，负责管理 50 个 Kubernetes 集群的访问控制。多个团队正在以闪电般的速度协作并在这些集群上执行部署。手动管理所有集群中所有团队成员的访问权限很快就会成为一场噩梦。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;传统上，您需要在团队成员之间分发 Kubeconfig 文件，授予他们对特定集群的访问权限。然而，这种方法存在潜在的安全风险，因为错误配置或放错位置的文件可能会使集群容易遭受数据泄露和未经授权的访问。此外，每个集群的手动 RBAC 配置非常耗时、容易出错，并且缺乏细粒度的控制。因此，当使用传统方法管理大量 Kubernetes 集群的访问控制时，您可能会得到以下结果：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;易受攻击的集群&lt;/strong&gt;：团队成员需要为每个集群拥有一个 kubeconfig 文件才能访问它。这些文件中的任何错误配置都可能导致集群容易遭受数据泄露和安全威胁。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;Kubeconfig 的分发&lt;/strong&gt;：与团队成员共享 Kubeconfig 文件是一项挑战。意外泄漏或未经授权的访问可能会危及整个集群。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;复杂RBAC&lt;/strong&gt;：在Kubernetes集群中，需要手动配置RBAC。这个过程既耗时又容易出错。这样，您可能无法对 Kubernetes 进行适当、细粒度的控制s簇。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://lh7-us.googleusercontent.com/feAGDnS_Hd8TDqQqg6PwHc3I8tkj0wCCtzNkbecBrOE0Q_rUz17bmDsXUPsxk-VmcOdE2MlSNPOKzZuyYH7BgFO16db5rqzx-9 ZUdp8EyV3XfZZ-d9x-Oq_Xb3FpI0IwA_sfbwYkwEP25Xg7qC1526I&#34; alt=&#34;RBAC 复杂性&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;这些是您选择手动管理多个集群时可能面临的一些主要挑战。当然，您不想花时间解决这些复杂问题，而是专注于真正重要的事情：高效部署和创新。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;single-sign-on-sso-for-authentication&#34;&gt;用于身份验证的单点登录 (SSO)&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;SSO 通过利用联合身份的概念简化了身份验证过程。用户可以使用身份提供商提供的现有凭据来验证自己的身份。使用基于SSO的身份验证来访问所有Kubernetes集群。 SSO 将消除分发和管理多个 kubeconfig 文件来访问 Kubernetes 集群的需要，同时降低未经授权访问集群的风险。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://lh7-us.googleusercontent.com/NZzH1rxvSx5H_ViLdGsimzRtcKoOH_cC4r-TTuyHFQ8y2h6r2yIsePgDP2P521v8s3iXsL0iiZZP_Jiyd49qnAbBYRH89IZB bnuIs0rPOeG008UPnYS9qM-4xpLjbwkQLzCOu7795O00bSfkr6f_1rk&#34; alt=&#34;SSO 解决方案&#34;referrerpolicy=&#34;否-引用者&#34;&gt;&lt;/图&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;我们 Devtron 是一个用于管理 Kubernetes 环境的平台，提供 SSO 解决方案。它专为 Kubernetes 工作流程量身定制。具有 SSO 功能的 Devtron 让您只需单击一下即可轻松访问所有授权集群。您可以使用一组凭据（例如 Google、GitHub、GitLab 等）登录 Devtron，并在 Devtron 仪表板上访问所有 Kubernetes 集群。因此，不再需要处理复杂的 Kubeconfig 文件和静态令牌。 Devtron 多跑一英里；了解每个组织的偏好和需求可能是独一无二的。为此，Devtron 提供了七种 SSO 集成。使组织和用户能够选择与其现有基础设施和安全实践完美契合的 SSO。 Devtron 向大多数提供商提供 SSO，可用于身份验证。以下是其中一些。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote class=&#34;wp-block-quote is-layout-flow wp-block-quote-is-layout-flow&#34;&gt;&#xA;&lt;blockquote class=&#34;wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow&#34;&gt;&#xA;&lt;p&gt;使用 &lt;a href=&#34;https://docs.devtron.ai/global-configurations/authorization/sso-login/google?ref=devtron.ai&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34; 配置 SSO &gt;Google&lt;/a&gt;、&lt;a href=&#34;https://docs.devtron.ai/global-configurations/authorization/sso-login/github?ref=devtron.ai&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener &#34;&gt;GitHub&lt;/a&gt;，&lt;a href=&#34;https://docs.devtron.ai/global-configurations/authorization/sso-login/gitlab?ref=devtron.ai&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;GitLab&lt;/a&gt;，&lt;a href=&#34;https://docs.devtron.ai/global-configurations /authorization/sso-login/microsoft?ref=devtron.ai&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Microsoft&lt;/a&gt;，&lt;a href=&#34;https://docs.devtron.ai/global-配置/授权/sso-login/ldap?ref=devtron.ai&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;LDAP&lt;/a&gt;，&lt;a href=&#34;https://docs.devtron.ai/global -configurations/authorization/sso-login/oidc?ref=devtron.ai&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OIDC&lt;/a&gt; 和 &lt;a href=&#34;https://docs.devtron.ai /global-configurations/authorization/sso-login/openshift?ref=devtron.ai&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OpenShift&lt;/a&gt;。您还可以集成其他身份和访问管理工具，例如&lt;a href=&#34;https://docs.devtron.ai/global-configurations/authorization/sso-login/oidc/okta?ref=devtron.ai&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Okta&lt;/a&gt;和 &lt;a href=&#34;https://docs.devtron.ai/global-configurations/authorization/sso-login/oidc/keycloak?ref=devtron.ai&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Keycloak&lt; /a&gt; 用于管理用户权限。&lt;/p&gt;&#xA;&lt;/块引用&gt;&#xA;&lt;/块引用&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://lh7-us.googleusercontent.com/c9U2JCwkaSqlKwM--UciXmNdbdNSJA_H0ZFHaxwd5N3GeCkL_3AMvm64POY27dbRLsyBr2k-TMB2W8rJfdQgLXOZomYUq6XCxqXBF 2eznnWMdQIGMaWdukDj4MdNxWFPJof4sOY0SWNHrcUMCTPV73U&#34; alt=&#34;SSO 登录服务&#34;referrerpolicy= &#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;使用 Devtron 的 SSO 登录服务&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;fine-grained-access-control-with-rbacauthorization&#34;&gt;使用 RBAC 进行细粒度访问控制 – 授权&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;SSO 可以为您解决身份验证问题。 RBAC 通过允许您定义精细权限并限制用户对集群资源的访问来解决授权方面的问题。在 Kubernetes 中，您可以定义角色、集群角色、角色绑定和集群角色绑定来控制命名空间和集群级别的访问。在设置手动配置时，您可能会遇到以下问题：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;容易出错且复杂性&lt;/strong&gt;：在 Kubernetes 中配置大量角色和权限使得准确配置它们变得困难。您可能会面临配置不一致的问题。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;可扩展性&lt;/strong&gt;：要允许新团队成员访问您的集群，您需要重新配置 RBAC。想象一下为每个新成员和每个新集群执行此操作。手动配置 RBAC 会导致效率低下。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;安全问题&lt;/strong&gt;：手动配置 RBAC 时，可能会授予超出所需数量的用户访问权限。这些将允许用户访问生产数据库等敏感资源。现在认为您错误地授予了用户权限s 用于数据库，用户将对其发起删除查询。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://lh7-us.googleusercontent.com/nr_TrXWE05YLm2uN2d_j_PwwqUv1ZbMvSbxG3YYVW0j3USMMZN1x5DK2mtUYjKHAGPuPQ5GIj6Y538ToC9WVQ91_BXx- 37rs9KPUBkYCUbA9DJRBGBf_AiFit0c3GWz1-vre0ZAWNojcHke4Mc1-pO8&#34; alt=&#34;用户权限&#34;referrerpolicy= &#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Devtron 的用户权限&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Devtron 通过提供用于管理 RBAC 的图形用户界面 (GUI) 简化了此过程。 Devtron 中的 RBAC 是专门为 Kubernetes 的工作流程而设计的。它允许管理员管理对 Kubernetes 集群、环境以及集群中所有资源的访问。通过定义角色和限制其他用户的访问，确保最低权限的访问并创建安全的环境。 Devtron 允许您管理细粒度的访问控制，直至 Kubernetes 集群资源级别。您可以为用户授予对集群中特定资源的精确权限。 Devtron 中的用户访问管理功能允许您添加其他用户（例如支持工程师的用户），并在 Devtron 仪表板上管理他们的访问权限。您可以将用户的状态标记为“活动”、“非活动”或“保持活动直至”(TTL)。通过此功能，您可以控制其他合格用户访问您的 Devtron 仪表板的方式。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://lh7-us.googleusercontent.com/9vjNxPObBhKc2THqdmBIStqNV6YA0kqx-OkdJE9sPg-twV4YSgadn_3dNPjBVF7xAMqv_qU1Ke8ZfEZwfTDWoc0CAumMRP-0o2r8 uRM1sJwcdAtj31lrdMwFAwU2LTe7ExT5PBgamsUgeCRMGcBGIeQ&#34; alt=&#34;基于时间的访问&#34;referrerpolicy =&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;使用 Devtron 进行基于时间的访问&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;the-power-of-sso-and-rbac-combined&#34;&gt;SSO 和 RBAC 结合的威力&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;通过结合 SSO 和 RBAC，组织可以为其 Kubernetes 环境实现强大且安全的访问控制策略。这种组合有几个好处：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;enhanced-security&#34;&gt;增强安全性&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;Kubernetes 环境的 SSO 允许您集中身份验证过程。允许您使用现有的凭据来访问所有授权的集群。 SSO 消除了集群因某些错误配置或错误放置的 kubeconfig 文件而受到损害的可能性。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;RBAC 允许超级管理员为用户访问集群和资源定义细化权限。 RBAC 是对 Kubernetes 环境的一种授权，可限制未经授权的用户访问不允许的资源。这增加了 SSO 后的安全层。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;为 Kubernetes 环境手动设置 RBAC 和 SSO 可能会带来复杂性。要简化设置 SSO 和 RBAC 的过程，您可以查看 Devtron 等工具。在德夫创，您可以使用单个仪表板设置 SSO 和 RBAC，而且没有任何复杂性。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;improved-manageability&#34;&gt;改进的可管理性&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;通过 SSO，管理跨各种环境的多个集群变得更加简单。管理员可以集中管理集群的访问，而不是单独配置每个集群。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;借助 RBAC，管理员还可以优化 Kubernetes 环境以降低成本。使用 RBAC，他们可以限制用户访问和使用资源。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;scalability-and-flexibility&#34;&gt;可扩展性和灵活性&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;SSO 和 RBAC 可以跟上 Kubernetes 环境的规模。 SSO 和 RBAC 提供了一个强大的框架来管理用户和 Kubernetes 集群的规模。随着用户数量的增加，管理员可以使用 Active Directory 对他们进行身份验证，并使用 RBAC 分配权限和定义角色。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Devtron 允许管理员将其现有的 Active Directory 与 Devtron SSO 映射。这样，他们就可以进行身份​​验证，并允许团队成员只需单击一下即可访问所有授权的微服务。除此之外，他们还可以为其应用预定义的角色和权限。所有这些都可以通过一个仪表板实现。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;conclusion&#34;&gt;结论&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;在云原生计算的动态世界中，保护对 Kubernetes 集群的访问至关重要。通过利用 SSO 和 RBAC 的强大功能，组织可以简化访问管理、增强安全性并确保跨团队的高效协作。 Devtron 提供全面的解决方案，简化 SSO 和 RBAC 的实施，同时提供用于访问控制管理的集中仪表板。在 Kubernetes 环境中采用 SSO 和 RBAC 的简单性和安全性，让您的团队充满信心地进行创新。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Devtron 的 RBAC 还可以扩展，可用于更安全和受控的 kubectl 访问。用户不必登录仪表板，可以使用 kubectl 命令，这些命令将通过 Devtron 代理，并为相应用户提供有限的访问权限和 api 令牌。要了解更多信息，请查看&lt;a href=&#34;https://devtron.ai/blog/control-and-secure-kubectl-access/&#34;&gt;这篇关于控制和安全 kubectl 访问的博客&lt;/a&gt;。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;如果您有任何疑问，请随时&lt;a href=&#34;https://rebrand.ly/devtron-demo?ref=blog&#34; rel=&#34;noreferrer noopener&#34; target=&#34;_blank&#34;&gt;与我们联系&lt;/a&gt;。加入我们积极发展的&lt;a href=&#34;https://rebrand.ly/Devtron-Discord?ref=devtron.ai&#34; rel=&#34;noreferrer noopener&#34; target=&#34;_blank&#34;&gt;Discord 社区&lt;/一个&gt;.&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer是-样式-80-120&#34;&gt;&#xA;&lt;/div&gt;</description>
      <pubDate>Thu, 15 Aug 2024 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Building a translation agent on LlamaEdge】在 LlamaEdge 上构建翻译代理</title>
      <link>https://www.cncf.io/blog/2024/08/26/building-a-translation-agent-on-llamaedge/</link>
      <description>【&lt;p&gt;&lt;em&gt;Member post originally published on &lt;a href=&#34;https://www.secondstate.io/articles/translation-agent/&#34;&gt;Second State’s blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Prof. Andrew Ng’s&amp;nbsp;&lt;a href=&#34;https://www.linkedin.com/posts/andrewyng_github-andrewyngtranslation-agent-activity-7206347897938866176-5tDJ/&#34;&gt;agentic translation&lt;/a&gt;&amp;nbsp;is a great demonstration on how to coordinate multiple LLM “agents” to work on a single task. It allows multiple smaller LLMs (like Llama-3 or Gemma-2) to work gether and produce better results than a single large LLM (like ChatGPT).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The&amp;nbsp;&lt;a href=&#34;https://github.com/andrewyng/translation-agent&#34;&gt;translation agent&lt;/a&gt;&amp;nbsp;is a great fit for&amp;nbsp;&lt;a href=&#34;https://github.com/LlamaEdge/LlamaEdge&#34;&gt;LlamaEdge&lt;/a&gt;, which provides a&amp;nbsp;&lt;a href=&#34;https://llamaedge.com/docs/llamaedge_vs_python&#34;&gt;lightweight&lt;/a&gt;,&amp;nbsp;&lt;a href=&#34;https://llamaedge.com/docs/llamaedge_vs_ollama&#34;&gt;embeddable&lt;/a&gt;,&amp;nbsp;&lt;a href=&#34;https://llamaedge.com/docs/llamaedge_vs_llamacpp&#34;&gt;portable&lt;/a&gt;, and&amp;nbsp;&lt;a href=&#34;https://github.com/LlamaEdge/LlamaEdge/blob/main/docker/README.md&#34;&gt;Docker-native&lt;/a&gt;&amp;nbsp;AI runtime for&amp;nbsp;&lt;a href=&#34;https://llamaedge.com/docs/llamaedge_vs_llamacpp&#34;&gt;many different&lt;/a&gt;&amp;nbsp;types of models and hardware accelerators. With LlamaEdge, you can build and distribute translation apps with embedded LLMs and prompts that can run on edge devices.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://www.secondstate.io/articles/translation-agent.png&#34; alt=&#34;Image&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;introduction-to-the-llm-translation-agent&#34;&gt;&lt;a href=&#34;https://www.secondstate.io/articles/translation-agent/#introduction-to-the-llm-translation-agent&#34;&gt;Introduction to the LLM Translation Agent&lt;/a&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This LLM Translation Agent is designed to facilitate accurate and efficient translation across multiple languages. It employs open source LLMs (Large Language Models) to provide high-quality translations. You can use your own fine-tuned models or any LLMs on Hugging Face like Meta’s Llama 3.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote class=&#34;wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow&#34;&gt;&#xA;&lt;p&gt;For detailed commands on starting and running this agent, please visit&amp;nbsp;&lt;a href=&#34;https://github.com/second-state/translation-agent/blob/use_llamaedge/step-by-step-use-LocalAI.md&#34;&gt;GitHub – Second State/translation-agent&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;To get started, clone the Translation Agent.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;git clone https://github.com/second-state/translation-agent.git&#xA;    &#xA;cd translation-agent&#xA;git checkout use_llamaedge&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Here, we run Llama-3-8B, Gemma-2-9B, and Phi-3-medium-128k locally and our Translation Agent on top of them respectively to showcase their translation quality. We test a simple translation task to see the results so as to compare their translation capabilities. You will need to install&amp;nbsp;&lt;a href=&#34;https://github.com/WasmEdge/WasmEdge&#34;&gt;WasmEdge&lt;/a&gt;&amp;nbsp;and the&amp;nbsp;&lt;a href=&#34;https://github.com/LlamaEdge/LlamaEdge&#34;&gt;LlamaEdge API server&lt;/a&gt;&amp;nbsp;to run those models across major GPU and CPU platforms.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install_v2.sh | bash -s -- -v 0.13.5&#xA;&#xA;curl -LO https://github.com/LlamaEdge/LlamaEdge/releases/latest/download/llama-api-server.wasm&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;You will also need the following configurations and prerequisites to run the agent app.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;export OPENAI_BASE_URL=&#34;http://localhost:8080/v1&#34;&#xA;export PYTHONPATH=${PWD}/src&#xA;export OPENAI_API_KEY=&#34;LLAMAEDGE&#34;&#xA;&#xA;pip install python-dotenv&#xA;pip install openai tiktoken icecream langchain_text_splitters&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;demo-1-running-translation-agents-with-llama-3-8b&#34;&gt;&lt;a href=&#34;https://www.secondstate.io/articles/translation-agent/#demo-1-running-translation-agents-with-llama-3-8b&#34;&gt;Demo 1: Running Translation Agents with Llama-3-8B&lt;/a&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;First, let’s run the translation agent with Meta AI’s popular Llama-3 model. We select the smallest Llama-3 model (the 8b model) for this demo. The translation task is from Chinese to English. Our&amp;nbsp;&lt;a href=&#34;https://hackmd.io/tdLiVR3TSc-8eVg_E-j9QA?view#Source-text&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;source text&lt;/a&gt;&amp;nbsp;is in Chinese, a brief intro to the ancient Chinese royal palace, the Forbidden City.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;step-11-run-llama-3-8b-on-your-own-device&#34;&gt;&lt;a href=&#34;https://www.secondstate.io/articles/translation-agent/#step-11-run-llama-3-8b-on-your-own-device&#34;&gt;Step 1.1: Run Llama-3-8B on your own device&lt;/a&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote class=&#34;wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow&#34;&gt;&#xA;&lt;p&gt;See detailed instructions here:&amp;nbsp;&lt;a href=&#34;https://www.secondstate.io/articles/llama-3-8b/#run-llama-3-8b-on-your-own-device&#34;&gt;Run Llama-3-8B on your own device&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Download the Llama-3-8B model GGUF file. Since the size of the model is 5.73 GB. It can take a while to download.Copy&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;curl -LO https://huggingface.co/second-state/Llama-3-8B-Instruct-GGUF/resolve/main/Meta-Llama-3-8B-Instruct-Q5_K_M.gguf&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Next, use the following command to start an API server for the model.Copy&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;wasmedge --dir .:. --nn-preload default:GGML:AUTO:Meta-Llama-3-8B-Instruct-Q5_K_M.gguf \&#xA;  llama-api-server.wasm \&#xA;  --prompt-template llama-3-chat \&#xA;  --ctx-size 4096 \&#xA;  --model-name llama-3-8b&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;step-12-run-the-translation-agent-on-top-of-llama-3-8b&#34;&gt;&lt;a href=&#34;https://www.secondstate.io/articles/translation-agent/#step-12-run-the-translation-agent-on-top-of-llama-3-8b&#34;&gt;Step 1.2 Run the Translation Agent on top of Llama-3-8B&lt;/a&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Find the&amp;nbsp;&lt;code&gt;examples/example_script.py&lt;/code&gt;&amp;nbsp;file in your cloned agent repo and review its code. It tells the agent where to find your document and how to translate it. Change the model name to the one you are using, here we’re using&amp;nbsp;&lt;code&gt;llama-3-8b&lt;/code&gt;&amp;nbsp;model; also change the source and target languages you want (here we put&amp;nbsp;&lt;code&gt;Chinese&lt;/code&gt;&amp;nbsp;as the source language and&amp;nbsp;&lt;code&gt;English&lt;/code&gt;&amp;nbsp;as the target language).Copy&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;import os&#xA;import translation_agent as ta&#xA;        &#xA;if __name__ == &#34;__main__&#34;:&#xA;    source_lang, target_lang, country = &#34;Chinese&#34;, &#34;English&#34;, &#34;Britain&#34;&#xA;    &#xA;    relative_path = &#34;sample-texts/forbiddencity.txt&#34;&#xA;    script_dir = os.path.dirname(os.path.abspath(__file__))&#xA;    &#xA;    full_path = os.path.join(script_dir, relative_path)&#xA;    &#xA;    with open(full_path, encoding=&#34;utf-8&#34;) as file:&#xA;        source_text = file.read()&#xA;    &#xA;    print(f&#34;Source text:\n\n{source_text}\n------------\n&#34;)&#xA;    &#xA;    translation = ta.translate(&#xA;            source_lang=source_lang,&#xA;            target_lang=target_lang,&#xA;            source_text=source_text,&#xA;            country=country,&#xA;            model=&#34;llama-3-8b&#34;,&#xA;    )&#xA;    &#xA;    print(f&#34;Translation:\n\n{translation}&#34;)&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Then, you can find a&amp;nbsp;&lt;code&gt;examples/sample-texts&lt;/code&gt;&amp;nbsp;folder in your cloned repo. Put your file you want to translate in this folder and get its path. Here because we named our source text&amp;nbsp;&lt;code&gt;forbiddencity.txt&lt;/code&gt;, the relative path to the document would be&amp;nbsp;&lt;code&gt;sample-texts/forbiddencity.txt&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Run the below commands to have your text file translated into English.Copy&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;cd examples&#xA;python example_script.py&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Wait for several minutes and you will have&amp;nbsp;&lt;a href=&#34;https://hackmd.io/tdLiVR3TSc-8eVg_E-j9QA?view#English-Translation-by-Llama-3-8B&#34;&gt;a fully translated version&lt;/a&gt;&amp;nbsp;appear on your terminal screen.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;demo-2-running-translation-agents-with-gemma-2-9b&#34;&gt;&lt;a href=&#34;https://www.secondstate.io/articles/translation-agent/#demo-2-running-translation-agents-with-gemma-2-9b&#34;&gt;Demo 2: Running Translation Agents with Gemma-2-9B&lt;/a&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The benefit of running the Translation Agent with LlamaEdge is the ability for users to choose and embed different LLMs for different agentic tasks. To demonstrate this point, we will now change the translation agent LLM from Llama-3-8b to Google’s Gemma-2-9b, which is of similar size but scores higher on many language-related benchmarks.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The translation task is the same as before. Our&amp;nbsp;&lt;a href=&#34;https://hackmd.io/tdLiVR3TSc-8eVg_E-j9QA?view#Source-text&#34;&gt;source text&lt;/a&gt;&amp;nbsp;is in Chinese, a brief intro to the ancient Chinese royal palace, the Forbidden City. The translation target is English.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;step-21-run-gemma-2-9b-on-your-own-device&#34;&gt;&lt;a href=&#34;https://www.secondstate.io/articles/translation-agent/#step-21-run-gemma-2-9b-on-your-own-device&#34;&gt;Step 2.1 Run Gemma-2-9B on your own device&lt;/a&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote class=&#34;wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow&#34;&gt;&#xA;&lt;p&gt;See detailed instructions here:&amp;nbsp;&lt;a href=&#34;https://www.secondstate.io/articles/gemma-2-9b/&#34;&gt;Run Gemma-2-9B on your own device&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Download the&amp;nbsp;&lt;a href=&#34;https://huggingface.co/second-state/gemma-2-9b-it-GGUF&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Gemma-2-9B-it model GGUF file&lt;/a&gt;. Since the size of the model is 6.40G, it could take a while to download.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;curl -LO https://huggingface.co/second-state/gemma-2-9b-it-GGUF/resolve/main/gemma-2-9b-it-Q5_K_M.gguf&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Start an API server for the model.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;wasmedge --dir .:. --nn-preload default:GGML:AUTO:gemma-2-9b-it-Q5_K_M.gguf \&#xA;  llama-api-server.wasm \&#xA;  --prompt-template gemma-instruct \&#xA;  --ctx-size 4096 \&#xA;  --model-name gemma-2-9b&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;step-22-run-the-translation-agent-to-run-on-top-of-gemma-2-9b&#34;&gt;&lt;a href=&#34;https://www.secondstate.io/articles/translation-agent/#step-22-run-the-translation-agent-to-run-on-top-of-gemma-2-9b&#34;&gt;Step 2.2 Run the Translation Agent to run on top of Gemma-2-9B&lt;/a&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Find the&amp;nbsp;&lt;code&gt;examples/example_script.py&lt;/code&gt;&amp;nbsp;file in your cloned agent repo and review its code. It tells the agent where to find your document and how to translate it. Change the model name to the one you are using, here we’re using&amp;nbsp;&lt;code&gt;gemma-2-9b&lt;/code&gt;&amp;nbsp;model; also change the source and target languages you want (here we put&amp;nbsp;&lt;code&gt;Chinese&lt;/code&gt;&amp;nbsp;as the source language and&amp;nbsp;&lt;code&gt;English&lt;/code&gt;&amp;nbsp;as the target language).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;import os  &#xA;import translation_agent as ta  &#xA;    &#xA;if __name__ == &#34;__main__&#34;:&#xA;    source_lang, target_lang, country = &#34;Chinese&#34;, &#34;English&#34;, &#34;Britain&#34;&#xA;    &#xA;    relative_path = &#34;sample-texts/forbiddencity.txt&#34;&#xA;    script_dir = os.path.dirname(os.path.abspath(__file__))&#xA;    &#xA;    full_path = os.path.join(script_dir, relative_path)&#xA;    &#xA;    with open(full_path, encoding=&#34;utf-8&#34;) as file:&#xA;        source_text = file.read()&#xA;    &#xA;    print(f&#34;Source text:\n\n{source_text}\n------------\n&#34;)&#xA;    &#xA;    translation = ta.translate(&#xA;            source_lang=source_lang,&#xA;            target_lang=target_lang,&#xA;            source_text=source_text,&#xA;            country=country,&#xA;            model=&#34;gemma-2-9b&#34;,&#xA;    )&#xA;    &#xA;    print(f&#34;Translation:\n\n{translation}&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Then, you can find a&amp;nbsp;&lt;code&gt;examples/sample-texts&lt;/code&gt;&amp;nbsp;folder in your cloned repo. Put your file you want to translate in this folder and get its path. Here because we named our source text&amp;nbsp;&lt;code&gt;forbiddencity.txt&lt;/code&gt;, the relative path to the document would be&amp;nbsp;&lt;code&gt;sample-texts/forbiddencity.txt&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Run the below commands to have your text file translated into English.Copy&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;cd examples    &#xA;python example_script.py&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;You can find the translated result in English&amp;nbsp;&lt;a href=&#34;https://hackmd.io/tdLiVR3TSc-8eVg_E-j9QA?view#English-Translation-by-Gemma-2-9B&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;demo-3-running-translation-agents-with-phi-3-medium-long-context-model&#34;&gt;&lt;a href=&#34;https://www.secondstate.io/articles/translation-agent/#demo-3-running-translation-agents-with-phi-3-medium-long-context-model&#34;&gt;Demo 3: Running Translation Agents with Phi-3-Medium long context model&lt;/a&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The Llama-3 and Gemma-2 models are great LLMs, but they have relatively small context windows. The agent requires all text to fit into the LLM context window, and that limits the size of articles they can translate. To fix this problem, we could select an open source LLM with a large context window. For this demo, we choose Microsoft’s Phi-3-medium-128k model, which has a massive 128k (over 100 thousand words or the length of several books) context window.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We run&amp;nbsp;&lt;a href=&#34;https://hackmd.io/vuFYZTVsQZyKmkeQ3ThZQw?view#Source-text&#34;&gt;a lengthy Chinese article on Forbidden City’s collaboration with the Varsaille Palace&lt;/a&gt;&amp;nbsp;through our Translation Agent powered by a Phi-3-medium-128k model we start locally.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;step-31-run-phi-3-medium-128k-on-your-own-device&#34;&gt;&lt;a href=&#34;https://www.secondstate.io/articles/translation-agent/#step-31-run-phi-3-medium-128k-on-your-own-device&#34;&gt;Step 3.1: Run Phi-3-medium-128k on your own device&lt;/a&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote class=&#34;wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow&#34;&gt;&#xA;&lt;blockquote class=&#34;wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow&#34;&gt;&#xA;&lt;p&gt;See detailed instructions here:&amp;nbsp;&lt;a href=&#34;https://www.secondstate.io/articles/phi-3-mini-128k/&#34;&gt;Getting Started with Phi-3-mini-128k&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Download the&amp;nbsp;&lt;a href=&#34;https://huggingface.co/second-state/Phi-3-medium-128k-instruct-GGUF&#34;&gt;Phi-3-Medium-128k model GGUF file&lt;/a&gt;.Copy&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;curl -LO https://huggingface.co/second-state/Phi-3-medium-128k-instruct-GGUF/resolve/main/Phi-3-medium-128k-instruct-Q5_K_M.gguf&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Run the following command to start an API server for the model with a 128k context window.Copy&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;wasmedge --dir .:. --nn-preload default:GGML:AUTO:Phi-3-medium-128k-instruct-Q5_K_M.gguf \&#xA;  llama-api-server.wasm \&#xA;  --prompt-template phi-3-chat \&#xA;  --ctx-size 128000 \&#xA;  --model-name phi-3-medium-128k&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;step-32-clone-and-run-the-translation-agent-on-top-of-phi-3-medium-128k&#34;&gt;&lt;a href=&#34;https://www.secondstate.io/articles/translation-agent/#step-32-clone-and-run-the-translation-agent-on-top-of-phi-3-medium-128k&#34;&gt;Step 3.2 Clone and run the Translation Agent on top of Phi-3-medium-128k&lt;/a&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Find the&amp;nbsp;&lt;code&gt;examples/example_script.py&lt;/code&gt;&amp;nbsp;file in your cloned agent repo and review its code. It tells the agent where to find your document and how to translate it. Change the model name to the one you are using, here we’re using&amp;nbsp;&lt;code&gt;phi-3-medium-128k&lt;/code&gt;&amp;nbsp;model; also change the source and target languages you want (here we put&amp;nbsp;&lt;code&gt;Chinese&lt;/code&gt;&amp;nbsp;as the source language and&amp;nbsp;&lt;code&gt;English&lt;/code&gt;&amp;nbsp;as the target language).Copy&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;import os  &#xA;import translation_agent as ta  &#xA;    &#xA;if __name__ == &#34;__main__&#34;:&#xA;    source_lang, target_lang, country = &#34;Chinese&#34;, &#34;English&#34;, &#34;Britain&#34;&#xA;    &#xA;    relative_path = &#34;sample-texts/long_article.txt&#34;&#xA;    script_dir = os.path.dirname(os.path.abspath(__file__))&#xA;    &#xA;    full_path = os.path.join(script_dir, relative_path)&#xA;    &#xA;    with open(full_path, encoding=&#34;utf-8&#34;) as file:&#xA;        source_text = file.read()&#xA;    &#xA;    print(f&#34;Source text:\n\n{source_text}\n------------\n&#34;)&#xA;    &#xA;    translation = ta.translate(&#xA;            source_lang=source_lang,&#xA;            target_lang=target_lang,&#xA;            source_text=source_text,&#xA;            country=country,&#xA;            model=&#34;phi-3-medium-128k&#34;,&#xA;    )&#xA;    &#xA;    print(f&#34;Translation:\n\n{translation}&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Then, you can find a&amp;nbsp;&lt;code&gt;examples/sample-texts&lt;/code&gt;&amp;nbsp;folder in your cloned repo. Put your file you want to translate in this folder and get its path. Here because we named our source text&amp;nbsp;&lt;code&gt;long_article.txt&lt;/code&gt;, the relative path to the document would be&amp;nbsp;&lt;code&gt;sample-texts/long_article.txt&lt;/code&gt;.Copy&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;cd examples&#xA;python example_script.py&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://hackmd.io/vuFYZTVsQZyKmkeQ3ThZQw?view#Source-text&#34;&gt;The translated results were impressive,&lt;/a&gt;&amp;nbsp;with the translation capturing the nuances and context of the original text with high fidelity.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;evaluation-of-translation-quality&#34;&gt;&lt;a href=&#34;https://www.secondstate.io/articles/translation-agent/#evaluation-of-translation-quality&#34;&gt;Evaluation of Translation Quality&lt;/a&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The three models, Llama-3-8B, Gemma-2-9B, and Phi-3-medium, have exhibited varying levels of performance in translating complex historical and cultural content from Chinese to English.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Llama-3-8B provides a translation that effectively captures the factual content but shows occasional stiffness in language, possibly indicating a direct translation approach that doesn’t fully adapt idiomatic expressions. It does not keep section title and the format of the original text and left certain part untranslated.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In contrast, The translation by Gemma-2-9B is quite accurate and retains the original meaning of the short intro article of Forbidden city. Gemma-2-9B’s translation exhibits a smooth and natural English flow, suggesting a sophisticated understanding of both the source language and the target language’s grammatical structures. The choice of words and sentence structures in Gemma-2-9B’s output demonstrates a high degree of linguistic finesse, suggesting it might be well-suited for translating formal and historically nuanced texts.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The Phi-3-medium-128k model can translate book-length text from Chinese to English. It demonstrates robust capabilities in handling large volumes of complex content, suggesting advanced memory handling and contextual awareness. The quality of translation remains consistent even with increased text length, indicating Phi’s utility in projects requiring extensive, detailed translations. But you can see it makes certain mistakes like mistaken “Wenhua Hall” as “also known as Forbidden City” in the first paragraph.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Overall, each model has its strengths, with Gemma-2-9B standing out for linguistic finesse and Phi-3-medium-128k for handling lengthy texts.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;conclusion&#34;&gt;&lt;a href=&#34;https://www.secondstate.io/articles/translation-agent/#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/LlamaEdge/LlamaEdge&#34;&gt;LlamaEdge&lt;/a&gt;&amp;nbsp;provides an easy way to embed different open-source LLMs into your agentic applications to fully take advantage of their finetuned capabilities for specific tasks. The result application can be properly packaged and distributed as a single app that runs across major CPU and GPU devices.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;】&lt;p&gt;&lt;em&gt;会员帖子最初发布于&lt;a href=&#34;https://www.secondstate.io/articles/translation-agent/&#34;&gt;Second State 博客&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;教授。 Andrew Ng 的&lt;a href=&#34;https://www.linkedin.com/posts/andrewyng_github-andrewyngtranslation-agent-activity-7206347897938866176-5tDJ/&#34;&gt;代理翻译&lt;/a&gt;很好地演示了如何协调多个 LLM“代理”来完成单一任务。它允许多个较小的 LLM（如 Llama-3 或 Gemma-2）一起工作，并比单个大型 LLM（如 ChatGPT）产生更好的结果。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/andrewyng/translation-agent&#34;&gt;翻译代理&lt;/a&gt;非常适合&lt;a href=&#34;https://github.com/LlamaEdge/ LlamaEdge&#34;&gt;LlamaEdge&lt;/a&gt;，提供&lt;a href=&#34;https://llamaedge.com/docs/llamaedge_vs_python&#34;&gt;轻量级&lt;/a&gt;、&lt;a href=&#34;https://llamaedge.com/docs /llamaedge_vs_ollama&#34;&gt;嵌入式&lt;/a&gt;、&lt;a href=&#34;https://llamaedge.com/docs/llamaedge_vs_llamacpp&#34;&gt;便携式&lt;/a&gt;和&lt;a href=&#34;https://github.com/LlamaEdge/ LlamaEdge/blob/main/docker/README.md&#34;&gt;Docker 原生&lt;/a&gt; 适用于&lt;a href=&#34;https://llamaedge.com/docs/llamaedge_vs_llamacpp&#34;&gt;许多不同&lt;/a&gt;类型模型的 AI 运行时和硬件加速器。借助 LlamaEdge，您可以构建和分发带有嵌入式 LLM 和可在边缘设备上运行的提示的翻译应用程序。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://www.secondstate.io/articles/translation-agent.png&#34; alt=&#34;图像&#34;referrerpolicy=&#34;no-推荐人&#34;&gt;&lt;/图&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;introduction-to-the-llm-translation-agent&#34;&gt;&lt;a href=&#34;https://www.secondstate.io/articles/translation-agent/#introduction -to-the-llm-translation-agent&#34;&gt;LLM翻译代理简介&lt;/a&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;该法学硕士翻译代理旨在促进跨多种语言的准确高效翻译。它采用开源 LLM（大型语言模型）来提供高质量的翻译。您可以使用自己的微调模型或 Hugging Face 上的任何法学硕士（例如 Meta 的 Llama 3）。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote class=&#34;wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow&#34;&gt;&#xA;&lt;p&gt;有关启动和运行此代理的详细命令，请访问 &lt;a href=&#34;https://github.com/second-state/translation-agent/blob/use_llamaedge/step-by-step-use-LocalAI。 md&#34;&gt;GitHub – 第二状态/翻译代理&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;/块引用&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;首先，克隆翻译代理。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;git 克隆 https://github.com/second-state/translation-agent.git&#xA;    &#xA;cd 翻译代理&#xA;git checkout use_llamaedge&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;在这里，我们在本地运行 Llama-3-8B、Gemma-2-9B 和 Phi-3-medium-128k，并分别在它们之上运行我们的翻译代理来展示它们的翻译质量。我们测试一个简单的翻译任务来查看结果，从而比较他们的翻译能力。您需要安装&lt;a href=&#34;https:///github.com/WasmEdge/WasmEdge&#34;&gt;WasmEdge&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/LlamaEdge/LlamaEdge&#34;&gt;LlamaEdge API 服务器&lt;/a&gt; 跨主要 GPU 运行这些模型CPU 平台。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install_v2.sh | bash -s ---v 0.13.5&#xA;&#xA;卷曲-LO https://github.com/LlamaEdge/LlamaEdge/releases/latest/download/llama-api-server.wasm&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;您还需要以下配置和先决条件才能运行代理应用程序。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;导出 OPENAI_BASE_URL=&#34;http://localhost:8080/v1&#34;&#xA;导出 PYTHONPATH=${PWD}/src&#xA;导出 OPENAI_API_KEY=&#34;LLAMAEDGE&#34;&#xA;&#xA;pip 安装 python-dotenv&#xA;pip install openai tiktoken Icecream langchain_text_splitters&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;demo-1-running-translation-agents-with-llama-3-8b&#34;&gt;&lt;a href=&#34;https://www.secondstate.io/articles/ Translation-agent/#demo-1-running-translation-agents-with-llama-3-8b&#34;&gt;演示 1：使用 Llama-3-8B 运行翻译代理&lt;/a&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;首先，让我们使用 Meta AI 流行的 Llama-3 模型运行翻译代理。我们为此演示选择最小的 Llama-3 模型（8b 模型）。翻译任务是从中文到英文。我们的&lt;a href=&#34;https://hackmd.io/tdLiVR3TSc-8eVg_E-j9QA?view#Source-text&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;源文本&lt;/a&gt;为中文，简短介绍中国古代皇家宫殿紫禁城。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;step-11-run-llama-3-8b-on-your-own-device&#34;&gt;&lt;a href=&#34;https://www.secondstate.io/ articles/translation-agent/#step-11-run-llama-3-8b-on-your-own-device&#34;&gt;步骤 1.1：在您自己的设备上运行 Llama-3-8B&lt;/a&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote class=&#34;wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow&#34;&gt;&#xA;&lt;p&gt;请在此处查看详细说明：&lt;a href=&#34;https://www.secondstate.io/articles/llama-3-8b/#run-llama-3-8b-on-your-own-device&#34;&gt;运行您自己的设备上的 Llama-3-8B&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/块引用&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;下载 Llama-3-8B 模型 GGUF 文件。由于模型的大小为 5.73 GB。下载可能需要一段时间。复制&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;curl -LO https://huggingface.co/second-state/Llama-3-8B-Instruct-GGUF/resolve/main/Meta- Llama-3-8B-Instruct-Q5_K_M.gguf&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;接下来，使用以下命令为模型启动 API 服务器。复制&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;wasmedge --dir .:. --nn-预加载默认值：GGML：AUTO：Meta-Llama-3-8B-Instruct-Q5_K_M.gguf \&#xA;  llama-api-server.wasm \&#xA;  --prompt-template llama-3-chat \&#xA;  --ctx-大小 4096 \&#xA;  --模型名称 llama-3-8b&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;step-12-run-the-translation-agent-on-top-of-llama-3-8b&#34;&gt;&lt;a href=&#34;https://www. secondarystate.io/articles/translation-agent/#step-12-run-the-translation-agent-on-top-of-llama-3-8b&#34;&gt;步骤 1.2 在 Llama-3-8B 上运行翻译代理&lt;/a&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;找到&lt;代码&gt;examples/example_script.py&lt;/code&gt; 在克隆的代理存储库中创建文件并查看其代码。它告诉代理在哪里可以找到您的文件以及如何翻译它。将模型名称更改为您正在使用的模型名称，此处我们使用&lt;code&gt;llama-3-8b&lt;/code&gt;模型；还可以更改您想要的源语言和目标语言（这里我们将&lt;code&gt;中文&lt;/code&gt;作为源语言，&lt;code&gt;英语&lt;/code&gt;作为目标语言）。复制&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;导入操作系统&#xA;将 Translation_agent 导入为 ta&#xA;        &#xA;如果 __name__ == &#34;__main__&#34;:&#xA;    source_lang, target_lang, Country = &#34;中文&#34;, &#34;英语&#34;, &#34;英国&#34;&#xA;    &#xA;    relative_path =“样本文本/forbiddencity.txt”&#xA;    script_dir = os.path.dirname(os.path.abspath(__file__))&#xA;    &#xA;    full_path = os.path.join(script_dir, 相对路径)&#xA;    &#xA;    打开（full_path，encoding =“utf-8”）作为文件：&#xA;        源文本 = 文件.read()&#xA;    &#xA;    print(f&#34;源文本：\n\n{source_text}\n------------\n&#34;)&#xA;    &#xA;    翻译 = ta.translate(&#xA;            源语言=源语言,&#xA;            目标语言=目标语言,&#xA;            源文本=源文本，&#xA;            国家=国家，&#xA;            型号=“llama-3-8b”，&#xA;    ）&#xA;    &#xA;    print(f&#34;翻译：\n\n{translation}&#34;)&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;然后，您可以在克隆的存储库中找到 &lt;code&gt;examples/sample-texts&lt;/code&gt; 文件夹。将要翻译的文件放入此文件夹中并获取其路径。此处，由于我们将源文本命名为 &lt;code&gt;forbiddencity.txt&lt;/code&gt;，因此文档的相对路径将为 &lt;code&gt;sample-texts/forbiddencity.txt&lt;/code&gt;。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;运行以下命令将您的文本文件翻译成英语。复制&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;cd 示例&#xA;python example_script.py&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;等待几分钟，您将获得&lt;a href=&#34;https://hackmd.io/tdLiVR3TSc-8eVg_E-j9QA?view#English-Translation-by-Llama-3-8B&#34;&gt;完整翻译版本&lt; /a&gt; 出现在您的终端屏幕上。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;demo-2-running-translation-agents-with-gemma-2-9b&#34;&gt;&lt;a href=&#34;https://www.secondstate.io/articles/ Translation-agent/#demo-2-running-translation-agents-with-gemma-2-9b&#34;&gt;演示 2：使用 Gemma-2-9B 运行翻译代理&lt;/a&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;使用 LlamaEdge 运行翻译代理的好处是用户能够为不同的代理任务选择和嵌入不同的 LLM。为了证明这一点，我们现在将翻译代理 LLM 从 Llama-3-8b 更改为 Google 的 Gemma-2-9b，它大小相似，但在许多语言相关基准测试中得分更高。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;翻译任务与之前相同。我们的&lt;a href=&#34;https://hackmd.io/tdLiVR3TSc-8eVg_E-j9QA?view#Source-text&#34;&gt;源文本&lt;/a&gt;是中文的，是对中国古代皇宫紫禁城的简要介绍。翻译目标是英语。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;step-21-run-gemma-2-9b-on-your-own-device&#34;&gt;&lt;a href=&#34;https://www.secondstate.io/articles/translation-agent/#step-21-run-gemma-2-9b-on-your-own-device&#34;&gt;步骤 2.1 在您自己的设备上运行 Gemma-2-9B&lt;/a&gt;&lt;/ H3&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote class=&#34;wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow&#34;&gt;&#xA;&lt;p&gt;请在此处查看详细说明：&lt;a href=&#34;https://www.secondstate.io/articles/gemma-2-9b/&#34;&gt;在您自己的设备上运行 Gemma-2-9B&lt;/a&gt;&lt;/p &gt;&#xA;&lt;/块引用&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;下载&lt;a href=&#34;https://huggingface.co/second-state/gemma-2-9b-it-GGUF&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Gemma-2-9B-它对 GGUF 文件进行建模&lt;/a&gt;。由于模型大小为6.40G，下载可能需要一段时间。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;curl -LO https://huggingface.co/second-state/gemma-2-9b-it-GGUF/resolve/main/gemma- 2-9b-it-Q5_K_M.gguf&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;为模型启动 API 服务器。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;wasmedge --dir .:. --nn-预加载默认值：GGML：AUTO：gemma-2-9b-it-Q5_K_M.gguf \&#xA;  llama-api-server.wasm \&#xA;  --prompt-template gemma-instruct \&#xA;  --ctx-大小 4096 \&#xA;  --型号名称 gemma-2-9b&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;step-22-run-the-translation-agent-to-run-on-top-of-gemma-2-9b&#34;&gt;&lt;a href=&#34;https: //www.secondstate.io/articles/translation-agent/#step-22-run-the-translation-agent-to-run-on-top-of-gemma-2-9b&#34;&gt;步骤 2.2 运行翻译代理在 Gemma-2-9B 上运行&lt;/a&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;在克隆的代理存储库中找到 &lt;code&gt;examples/example_script.py&lt;/code&gt; 文件并查看其代码。它告诉代理在哪里可以找到您的文件以及如何翻译它。将模型名称更改为您正在使用的模型名称，这里我们使用的是&lt;code&gt;gemma-2-9b&lt;/code&gt;模型；还可以更改您想要的源语言和目标语言（此处我们将&lt;code&gt;中文&lt;/code&gt;作为源语言，将&lt;code&gt;英语&lt;/code&gt;作为目标语言）。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;导入操作系统  &#xA;将 Translation_agent 导入为 ta  &#xA;    &#xA;如果 __name__ == &#34;__main__&#34;:&#xA;    source_lang, target_lang, Country = &#34;中文&#34;, &#34;英语&#34;, &#34;英国&#34;&#xA;    &#xA;    relative_path =“样本文本/forbiddencity.txt”&#xA;    script_dir = os.path.dirname(os.path.abspath(__file__))&#xA;    &#xA;    full_path = os.path.join(script_dir, 相对路径)&#xA;    &#xA;    打开（full_path，encoding =“utf-8”）作为文件：&#xA;        源文本 = 文件.read()&#xA;    &#xA;    print(f&#34;源文本：\n\n{source_text}\n------------\n&#34;)&#xA;    &#xA;    翻译 = ta.translate(&#xA;            源语言=源语言,&#xA;            目标语言=目标语言,&#xA;            源文本=源文本，&#xA;            国家=国家，&#xA;            型号=“gemma-2-9b”，&#xA;    ）&#xA;    &#xA;    print(f&#34;翻译：\n\n{翻译}&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;然后，您可以在克隆的存储库中找到 &lt;code&gt;examples/sample-texts&lt;/code&gt; 文件夹。将要翻译的文件放入此文件夹中并获取其路径。由于我们将源文本命名为 &lt;code&gt;forbiddencity.txt&lt;/code&gt;，因此文档的相对路径为 &lt;code&gt;sample-texts/forbiddencity.txt&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;运行以下命令将您的文本文件翻译成英语。复制&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;cd 示例    &#xA;python example_script.py&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;您可以在&lt;a href=&#34;https://hackmd.io/tdLiVR3TSc-8eVg_E-j9QA?view#English-Translation-by-Gemma-2-9B&#34;&gt;此处找到英文翻译结果&lt;/a&gt; .&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;demo-3-running-translation-agents-with-phi-3-medium-long-context-model&#34;&gt;&lt;a href=&#34;https://www.wp-block-heading&#34; secondarystate.io/articles/translation-agent/#demo-3-running-translation-agents-with-phi-3-medium-long-context-model&#34;&gt;演示 3：使用 Phi-3-Medium 长上下文运行翻译代理模型&lt;/a&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Llama-3 和 Gemma-2 模型是很棒的 LLM，但它们的上下文窗口相对较小。代理要求所有文本都适合 LLM 上下文窗口，这限制了他们可以翻译的文章的大小。为了解决这个问题，我们可以选择一个具有大上下文窗口的开源法学硕士。在本演示中，我们选择 Microsoft 的 Phi-3-medium-128k 模型，该模型具有巨大的 128k（超过 10 万个单词或几本书的长度）上下文窗口。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;我们通过我们的翻译代理（由Phi-3-medium-128k 模型我们从本地开始。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;step-31-run-phi-3-medium-128k-on-your-own-device&#34;&gt;&lt;a href=&#34;https://www.secondstate. io/articles/translation-agent/#step-31-run-phi-3-medium-128k-on-your-own-device&#34;&gt;步骤 3.1：在您自己的设备上运行 Phi-3-medium-128k&lt;/a &gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote class=&#34;wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow&#34;&gt;&#xA;&lt;blockquote class=&#34;wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow&#34;&gt;&#xA;&lt;p&gt;请参阅此处的详细说明：&lt;a href=&#34;https://www.secondstate.io/articles/phi-3-mini-128k/&#34;&gt;Phi-3-mini-128k 入门&lt;/a&gt;。 &lt;/p&gt;&#xA;&lt;/块引用&gt;&#xA;&lt;/块引用&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;下载&lt;a href=&#34;https://huggingface.co/second-state/Phi-3-medium-128k-instruct-GGUF&#34;&gt;Phi-3-Medium-128k 模型 GGUF 文件&lt;/a&gt;。复制&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;curl -LO https://huggingface.co/second-state/Phi-3-medium-128k-instruct-GGUF/resolve/main/ Phi-3-medium-128k-instruct-Q5_K_M.gguf&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;运行以下命令，为具有 128k 上下文窗口的模型启动 API 服务器。复制&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;wasmedge --dir .:. --nn-预加载默认:GGML:AUTO:Phi-3-medium-128k-instruct-Q5_K_M.gguf \&#xA;  llama-api-server.wasm \&#xA;  --提示模板 phi-3-聊天 \&#xA;  --ctx-大小 128000 \&#xA;  --型号名称 phi-3-medium-128k&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;step-32-clone-and-run-the-translation-agent-on-top-of-phi-3-medium-128k&#34;&gt;&lt;a href=&#34; https://www.secondstate.io/articles/translation-agent/#step-32-clone-and-run-the-translation-agent-on-top-of-phi-3-medium-128k&#34;&gt;步骤 3.2 在 Phi-3-medium-128k 上克隆并运行翻译代理&lt;/a&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;在克隆的代理存储库中找到 &lt;code&gt;examples/example_script.py&lt;/code&gt; 文件并查看其代码。它告诉代理在哪里可以找到您的文件以及如何翻译它。将模型名称更改为您正在使用的模型名称，这里我们使用的是&lt;code&gt;phi-3-medium-128k&lt;/code&gt;模型；还可以更改您想要的源语言和目标语言（这里我们将&lt;code&gt;中文&lt;/code&gt;作为源语言，&lt;code&gt;英语&lt;/code&gt;作为目标语言）。复制&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;导入操作系统  &#xA;将 Translation_agent 导入为 ta  &#xA;    &#xA;如果 __name__ == &#34;__main__&#34;:&#xA;    source_lang, target_lang, Country = &#34;中文&#34;, &#34;英语&#34;, &#34;英国&#34;&#xA;    &#xA;    relative_path =“样本文本/long_article.txt”&#xA;    script_dir = os.path.dirname(os.path.abspath(__file__))&#xA;    &#xA;    full_path = os.path.join(script_dir, 相对路径)&#xA;    &#xA;    打开（full_path，encoding =“utf-8”）作为文件：&#xA;        源文本 = 文件.read()&#xA;    &#xA;    print(f&#34;源文本：\n\n{source_text}\n------------\n&#34;)&#xA;    &#xA;    翻译 = ta.translate(&#xA;            源语言=源语言,&#xA;            目标语言=目标语言,&#xA;            源文本=源文本，&#xA;            国家=国家，&#xA;            型号=“phi-3-medium-128k”，&#xA;    ）&#xA;    &#xA;    print(f&#34;翻译：\n\n{翻译}&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;然后，您可以在克隆的存储库中找到 &lt;code&gt;examples/sample-texts&lt;/code&gt; 文件夹。将要翻译的文件放入此文件夹中并获取其路径。由于我们将源文本命名为 &lt;code&gt;long_article.txt&lt;/code&gt;，因此文档的相对路径为 &lt;code&gt;sample-texts/long_article.txt&lt;/code&gt;.Copy&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;cd 示例&#xA;python example_script.py&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://hackmd.io/vuFYZTVsQZyKmkeQ3ThZQw?view#Source-text&#34;&gt;翻译结果令人印象深刻&lt;/a&gt;，翻译以高保真度捕捉了原文的细微差别和上下文.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;evaluation-of-translation-quality&#34;&gt;&lt;a href=&#34;https://www.secondstate.io/articles/translation-agent/#evaluation-of-translation -quality&#34;&gt;翻译质量评估&lt;/a&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Llama-3-8B、Gemma-2-9B 和 Phi-3-medium 这三个模型在将复杂的历史和文化内容从中文翻译成英文方面表现出了不同程度的性能。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Llama-3-8B 提供的翻译可以有效地捕捉事实内容，但偶尔会出现语言僵化，这可能表明直接翻译方法并未完全适应惯用表达。它不保留章节标题和原文格式，并保留某些部分未翻译。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;相比之下，Gemma-2-9B 的翻译相当准确，保留了故宫简短介绍文章的原意。 Gemma-2-9B 的翻译展览英语流畅自然，表明对源语言和目标语言的语法结构有深入的理解。 Gemma-2-9B 输出中的单词和句子结构的选择展示了高度的语言技巧，表明它可能非常适合翻译正式的和历史上细致入微的文本。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Phi-3-medium-128k 模型可以将书本长度的文本从中文翻译成英文。它展示了处理大量复杂内容的强大功能，表明了先进的内存处理和上下文感知。即使文本长度增加，翻译质量也保持一致，这表明 Phi 在需要大量、详细翻译的项目中很有用。但你可以看到它有一些错误，比如第一段将“文华殿”误认为“又名紫禁城”。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;总体而言，每个模型都有其优点，Gemma-2-9B 在语言技巧方面表现出色，Phi-3-medium-128k 在处理冗长文本方面表现出色。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;conclusion&#34;&gt;&lt;a href=&#34;https://www.secondstate.io/articles/translation-agent/#conclusion&#34;&gt;结论&lt;/a&gt;&lt;/h2 &gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/LlamaEdge/LlamaEdge&#34;&gt;LlamaEdge&lt;/a&gt; 提供了一种简单的方法，将不同的开源 LLM 嵌入到您的代理应用程序中，以充分利用其微调功能具体任务。结果应用程序可以正确打包并分发为跨主要 CPU 和 GPU 设备运行的单个应用程序。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;</description>
      <pubDate>Sun, 25 Aug 2024 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Developing an AI agent for smart contextual Q&amp;A】开发用于智能上下文问答的人工智能代理</title>
      <link>https://www.cncf.io/blog/2024/08/19/developing-an-ai-agent-for-smart-contextual-qa/</link>
      <description>【&lt;p&gt;&lt;em&gt;&amp;nbsp;Member post originally published on &lt;a href=&#34;https://www.infracloud.io/blogs/developing-ai-agent-for-smart-contextual-qna/&#34;&gt;InfraCloud’s blog&lt;/a&gt; by Shreyas Mocherla, Product Engineer Intern at InfraCloud Technologies&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Accelerated by the pandemic, online tech communities have grown rapidly. With new members joining every day, it’s tough to keep track of past conversations. Often, newcomers ask questions that have already been answered, causing repetition and redundancy. To tackle this, we built an intelligent assistant that tracks past conversations, searches Stack Overflow for technical help, and browses the web for relevant information.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;InSightful is a ReAct (Reasoning and Action) Agent with access to multiple tools, such as a web searcher and a context retriever, to achieve the given task. In our case, it is a question and answer application. We will delve deeper into the workings of the application as we progress. At the end of the day, you will be able to understand how agents work and how you can develop your own. These agents are highly customizable, giving you a lot of flexibility in picking a use-case.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;insightul-demo-lets-see-what-insightful-can-do&#34;&gt;InSightul demo: Let’s see what InSightful can do&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;InSightful is meant to be an AI Agent that can smartly retrieve conversations from a workspace, search results on Stack Overflow with a given context and as well as browse the web whenever the information asked for is not available in the other two places. This makes sure that InSightful has a safety net to fallback on in case the intermediary response (thought and observation) does not match the user’s question. Let us see how we can develop such an application.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;A GPU-enabled Kubernetes cluster OR a single GPU-enabled machine with Docker installed&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;A&amp;nbsp;&lt;a href=&#34;https://huggingface.co/settings/tokens&#34;&gt;HuggingFace account with a valid API key&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Three Services:&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;TGI –&amp;nbsp;&lt;a href=&#34;https://artifacthub.io/packages/helm/infracloud-charts/text-generation-inference&#34;&gt;Text Generation Inference&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;TEI –&amp;nbsp;&lt;a href=&#34;https://artifacthub.io/packages/helm/infracloud-charts/text-embeddings-inference&#34;&gt;Text Embeddings Inference&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Vector store –&amp;nbsp;&lt;a href=&#34;https://artifacthub.io/packages/helm/infracloud-charts/chromadb&#34;&gt;Chroma DB&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Note: This tutorial assumes the developer has experience with Docker and understands how to use it appropriately. If the developer is using Kubernetes, this tutorial assumes they have a multi-node GPU cluster.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For the demo, we will be using a readily available HuggingFace dataset consisting of conversations from a workplace, simulating the real environment. The dataset mimics actual interactions amongst colleagues in tech communities like Slack workspaces, Reddit threads, or Discord servers. Downloading the dataset does not require any additional steps as it is included in the Python code.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;set-up&#34;&gt;Set up&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In our set up, we are using a Kubernetes cluster that is already provisioned and completely set up to run AI workloads on.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;If this is not your case, run the ai-stack separately on a GPU-enabled machine. If your machine is not equipped with a GPU, the inference will be extremely slow and is not recommended.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;&lt;code&gt;$ kubectl get svc -n ai-stack&#xA;&#xA;NAME       TYPE           CLUSTER-IP      EXTERNAL-IP     PORT(S)          AGE&#xA;tei        LoadBalancer   10.233.22.94    192.168.0.203   80:32215/TCP     21h&#xA;tgi        LoadBalancer   10.233.50.250   192.168.0.202   80:31963/TCP     21h&#xA;vectordb   LoadBalancer   10.233.27.106   192.168.0.201   8000:30992/TCP   21h&#xA;&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://artifacthub.io/packages/helm/infracloud-charts/ai-stack&#34;&gt;(Kubernetes Services deployed using our AI stack chart)&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Once each service is deployed and running, we can access their respective IPs and ports to send and receive data. Go ahead and clone the repo and follow the steps in the&amp;nbsp;&lt;a href=&#34;https://github.com/infracloudio/insightful&#34;&gt;InSightful README&lt;/a&gt;&amp;nbsp;file.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;After successfully following the steps in the README, if all goes well, you should be greeted with this page on your browser:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://www.infracloud.io/assets/img/Blog/insightful-ai-agent/insightful-landing-page.webp&#34; alt=&#34;InSightful landing page&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;(InSightful landing page)&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;insightful-in-action&#34;&gt;InSightful in action&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now, let’s see InSightful in action by asking it a question.You can ask different types of questions, according to the information you need.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;Conversation analysis&lt;/strong&gt;: InSightful can analyze and provide insights on the topics being discussed in tech communities. For example, if people are frequently discussing a specific programming language, it can highlight that.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image size-full&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1600&#34; height=&#34;538&#34; src=&#34;https://www.cncf.io/wp-content/uploads/2024/08/insightful-capturing-details-in-slack-conversations.webp&#34; alt=&#34;(InSightful capturing details in Slack conversations)&#34; class=&#34;wp-image-116296&#34; srcset=&#34;https://www.cncf.io/wp-content/uploads/2024/08/insightful-capturing-details-in-slack-conversations.webp 1600w, https://www.cncf.io/wp-content/uploads/2024/08/insightful-capturing-details-in-slack-conversations-300x101.webp 300w, https://www.cncf.io/wp-content/uploads/2024/08/insightful-capturing-details-in-slack-conversations-1024x344.webp 1024w, https://www.cncf.io/wp-content/uploads/2024/08/insightful-capturing-details-in-slack-conversations-768x258.webp 768w, https://www.cncf.io/wp-content/uploads/2024/08/insightful-capturing-details-in-slack-conversations-900x303.webp 900w, https://www.cncf.io/wp-content/uploads/2024/08/insightful-capturing-details-in-slack-conversations-595x200.webp 595w, https://www.cncf.io/wp-content/uploads/2024/08/insightful-capturing-details-in-slack-conversations-1190x400.webp 1190w&#34; sizes=&#34;(max-width: 1600px) 100vw, 1600px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;(InSightful capturing details in Slack conversations)&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;Community health analysis&lt;/strong&gt;: InSightful can evaluate engagement, sentiment, and overall health of a tech community. It can show if people are generally positive or negative about certain topics.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image size-full is-resized&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1600&#34; height=&#34;538&#34; src=&#34;https://www.cncf.io/wp-content/uploads/2024/08/2-insightful-analyzing-sentiments-and-overall-community-health.webp&#34; alt=&#34;(InSightful analyzing sentiments and overall community healths)&#34; class=&#34;wp-image-116297&#34; style=&#34;width:900px;height:auto&#34; srcset=&#34;https://www.cncf.io/wp-content/uploads/2024/08/2-insightful-analyzing-sentiments-and-overall-community-health.webp 1600w, https://www.cncf.io/wp-content/uploads/2024/08/2-insightful-analyzing-sentiments-and-overall-community-health-300x101.webp 300w, https://www.cncf.io/wp-content/uploads/2024/08/2-insightful-analyzing-sentiments-and-overall-community-health-1024x344.webp 1024w, https://www.cncf.io/wp-content/uploads/2024/08/2-insightful-analyzing-sentiments-and-overall-community-health-768x258.webp 768w, https://www.cncf.io/wp-content/uploads/2024/08/2-insightful-analyzing-sentiments-and-overall-community-health-900x303.webp 900w, https://www.cncf.io/wp-content/uploads/2024/08/2-insightful-analyzing-sentiments-and-overall-community-health-595x200.webp 595w, https://www.cncf.io/wp-content/uploads/2024/08/2-insightful-analyzing-sentiments-and-overall-community-health-1190x400.webp 1190w&#34; sizes=&#34;(max-width: 1600px) 100vw, 1600px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;(InSightful analyzing sentiments and overall community healths)&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;Search Stack Overflow&lt;/strong&gt;: InSightful can search Stack Overflow for relevant questions and answers, saving users time by providing instant solutions to common problems.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image size-full is-resized&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1600&#34; height=&#34;538&#34; src=&#34;https://www.cncf.io/wp-content/uploads/2024/08/3-insightful-responding-to-technical-question.webp&#34; alt=&#34;(InSightful responding to a technical question)&#34; class=&#34;wp-image-116298&#34; style=&#34;width:900px;height:auto&#34; srcset=&#34;https://www.cncf.io/wp-content/uploads/2024/08/3-insightful-responding-to-technical-question.webp 1600w, https://www.cncf.io/wp-content/uploads/2024/08/3-insightful-responding-to-technical-question-300x101.webp 300w, https://www.cncf.io/wp-content/uploads/2024/08/3-insightful-responding-to-technical-question-1024x344.webp 1024w, https://www.cncf.io/wp-content/uploads/2024/08/3-insightful-responding-to-technical-question-768x258.webp 768w, https://www.cncf.io/wp-content/uploads/2024/08/3-insightful-responding-to-technical-question-900x303.webp 900w, https://www.cncf.io/wp-content/uploads/2024/08/3-insightful-responding-to-technical-question-595x200.webp 595w, https://www.cncf.io/wp-content/uploads/2024/08/3-insightful-responding-to-technical-question-1190x400.webp 1190w&#34; sizes=&#34;(max-width: 1600px) 100vw, 1600px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;(InSightful responding to a technical question)&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;Browse the web&lt;/strong&gt;: InSightful can conduct web searches to gather relevant information on community topics, providing up-to-date knowledge.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image size-full&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1600&#34; height=&#34;584&#34; src=&#34;https://www.cncf.io/wp-content/uploads/2024/08/4-insightful-providing-response-from-web-search-result.webp&#34; alt=&#34;(InSightful providing a response from web search results)&#34; class=&#34;wp-image-116299&#34; srcset=&#34;https://www.cncf.io/wp-content/uploads/2024/08/4-insightful-providing-response-from-web-search-result.webp 1600w, https://www.cncf.io/wp-content/uploads/2024/08/4-insightful-providing-response-from-web-search-result-300x110.webp 300w, https://www.cncf.io/wp-content/uploads/2024/08/4-insightful-providing-response-from-web-search-result-1024x374.webp 1024w, https://www.cncf.io/wp-content/uploads/2024/08/4-insightful-providing-response-from-web-search-result-768x280.webp 768w, https://www.cncf.io/wp-content/uploads/2024/08/4-insightful-providing-response-from-web-search-result-900x329.webp 900w, https://www.cncf.io/wp-content/uploads/2024/08/4-insightful-providing-response-from-web-search-result-548x200.webp 548w, https://www.cncf.io/wp-content/uploads/2024/08/4-insightful-providing-response-from-web-search-result-1096x400.webp 1096w&#34; sizes=&#34;(max-width: 1600px) 100vw, 1600px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;(InSightful providing a response from web search results)&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now that we know what InSightful can do, let’s understand what it is, and how it works. As mentioned earlier, InSightful is powered by an AI Agent, so let’s begin with Agents.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;agents-a-brief-introduction&#34;&gt;Agents: A brief introduction&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When ChatGPT was released, it quickly became popular, surpassing&amp;nbsp;&lt;a href=&#34;https://www.reuters.com/technology/chatgpt-sets-record-fastest-growing-user-base-analyst-note-2023-02-01/&#34;&gt;1 millions users in just 5 days&lt;/a&gt;. Natural Language Processing (NLP) has been around for a while, but ChatGPT took it to the next level by turning a Language Model into a Large Language Model (LLM).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;However, LLMs, while powerful language models, are like parrots—they repeat what they hear without real understanding. To make them more applicable to specific tasks and problems, we have to fine-tune, provide detailed prompts, and set guard rails to align their responses closely to the demands of the user. Developing agents exploit some of these approaches that enable them to reason and act accordingly. With a set of tools, an agent can perform actions on an environment, something a regular base LLM cannot achieve. Agents integrate these additional tools and frameworks, allowing them to perform specific tasks, make decisions, and interact dynamically with their environment.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For the sake of simplicity and to limit the scope of the InSightful demo, we will only be talking about the techniques we have employed to adapt the LLM to our own use case. We integrated LLM with web search and context retrieval tools, as well as provided a well-defined prompt. The combination of the prompt and the accessibility of the tools is what brings our agent to life. Something to note is that we don’t necessarily have to create an agent to utilize tools, instead, we can directly provide a compatible LLM with tools. We mention “compatible LLM” because not all LLMs are tool-calling enabled. However, with the help of&amp;nbsp;&lt;a href=&#34;https://github.com/langchain-ai/langchain&#34;&gt;LangChain&lt;/a&gt;, any LLM can be used to develop an agent to achieve the same results of tool-calling enabled LLMs. Ultimately, the LLM is used solely for reasoning and accessing a set of provided tools in a LangChain agent.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We prompted the agent cautiously and refined the prompt in several iterations, making it almost foolproof. The prompt makes the agent much more reliable in solving tasks, consistently abiding to a structure while forming its final response.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For InSightful, we took the Reasoning and Action (ReAct) Agent approach, which is a type of agent that can reason through a task, form an action plan to guide its actions and finally responds after thorough self-reflection. The incorporation of tools into the agent enables it to form effective responses.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://www.infracloud.io/assets/img/Blog/insightful-ai-agent/bts-of-react-agent.webp&#34; alt=&#34;Behind The Scenes of a ReAct agent&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://betterprogramming.pub/make-langchain-agent-actually-works-with-local-llms-vicuna-wizardlm-etc-da42b6b1a97&#34;&gt;(Behind The Scenes of a ReAct agent)&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;From the diagram, we can understand that the task-in-hand is the question provided by the user and the environment is provided by the tool’s description. The tool’s description provides concise context to the agent to decide if a given tool is useful for the task or not. The cycle of “Thought-Action-Observation” is repeated a defined number of times until a satisfiable observation is made.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;There are other alternatives to ReAct that are linear rather than ReAct’s cyclic approach such as Chain-of-Thought (CoT) and Tree-of-Thought (ToT), however, these alternatives do not support actions and will not enable learning from the consequences of the actions on an environment. They are purely reasoning-backed approaches.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;creating-tools-as-functions&#34;&gt;Creating tools as functions&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Fundamentally, tools are exactly what they sound like they are. They supplement the agent to generate accurate and contextual responses according to the user’s question.&amp;nbsp;&lt;a href=&#34;https://python.langchain.com/v0.1/docs/integrations/tools/&#34;&gt;LangChain has an exhaustive list of such tools&lt;/a&gt;&amp;nbsp;that can be integrated with agents.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;InSightful applies several tools to enhance the agent:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;Conversation Retriever tool&lt;/strong&gt;: We converted the traditional&amp;nbsp;&lt;a href=&#34;https://www.infracloud.io/blogs/retrieval-augmented-generation-using-data-with-llms/&#34;&gt;Retrieval-Augmented Generation (RAG)&lt;/a&gt;&amp;nbsp;approach into a tool, making it more efficient for the agent. We essentially created our own tool, since the tool we want is not directly available in the LangChain package. This tool uses a vectorstore as its retriever, enabling similarity searches and predictions.This integration streamlines the process, allowing the agent to retrieve information without executing separate functions.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;Stack Overflow search tool&lt;/strong&gt;: We developed this tool using the&amp;nbsp;&lt;a href=&#34;https://api.stackexchange.com/&#34;&gt;Stack Exchange API&lt;/a&gt;, enabling the agent to search and query the extensive database of questions and answers on Stack Overflow.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;Search engine tool&lt;/strong&gt;:&amp;nbsp;&lt;a href=&#34;https://tavily.com/&#34;&gt;Tavily Search&lt;/a&gt;&amp;nbsp;is a search engine tailored specifically for LLMs. We use the Tavily API integration with LangChain, which provides Tavily Search as a tool to use with LangChain agents.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;providing-tools-to-our-agent&#34;&gt;Providing tools to our Agent&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;After creating these tools as callable functions, we compile them into a simple Python list like so:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-preformatted&#34;&gt;&lt;code&gt;tools = [retriever_tool, stack_overflow_search_tool, web_search_tool]&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;(List of tools provided to the agent)&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;LangChain iterates over this list, using the name and description provided in each tool’s docstring to understand their purposes. Setting a name and description for each custom tool is mandatory as it provides LangChain with the context of what each function achieves.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Once we have our list of tools, we set it as a parameter when creating our agent. This setup indicates to the agent that it has access to these tools. When the agent determines which tool to use, it runs the corresponding function to trigger the tool. Ideally, the tool returns the desired results, and the agent uses that as additional context to augment its responses.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;By integrating these tools, InSightful can:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;Retrieve and analyze conversations&lt;/strong&gt;: Identify recurring questions and provide answers from past discussions, saving time and reducing redundancy.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;Engage in technical Q&amp;amp;A&lt;/strong&gt;: Answer technical questions using Stack Overflow, giving quick and accurate responses.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;Conduct independent research&lt;/strong&gt;: Browse the web for additional information on community topics, ensuring up-to-date and comprehensive answers.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;connecting-the-dots&#34;&gt;Connecting the dots&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://www.infracloud.io/assets/img/Blog/insightful-ai-agent/insightful-workflow-diagram.webp&#34; alt=&#34;InSightful workflow diagram&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;(InSightful workflow diagram)&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Let’s break down each of the components and how they fit into the big picture:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;Document Retrieval&lt;/strong&gt;: Retrieve conversation histories, technical questions, and other relevant data from a Data Source such as the vector store in our case.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;Vector Storage&lt;/strong&gt;:&amp;nbsp;&lt;a href=&#34;https://www.infracloud.io/blogs/vector-databases-beginners-guide/&#34;&gt;Vector Stores&lt;/a&gt;&amp;nbsp;are where the embeddings are stored. The embeddings are generated by&amp;nbsp;&lt;a href=&#34;https://www.infracloud.io/blogs/developing-ai-agent-for-smart-contextual-qna/#prerequisites&#34;&gt;TEI&lt;/a&gt;.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;LLM&lt;/strong&gt;:&amp;nbsp;&lt;a href=&#34;https://www.infracloud.io/blogs/developing-ai-agent-for-smart-contextual-qna/#prerequisites&#34;&gt;TGI&lt;/a&gt;&amp;nbsp;is where the LLM is running to generate responses based on the retrieved data, providing meaningful answers to user queries.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;Tool/External API Integration&lt;/strong&gt;: Integrate additional tools for searching Stack Overflow and browsing the web, expanding the assistant’s capabilities. The tools are powered by APIs offered by each of the services (Tavily and Stack Overflow).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Here’s an example of the process when a user query is entered.The query “Latest news on Kubernetes” yields this result, only visible to the developer:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://www.infracloud.io/assets/img/Blog/insightful-ai-agent/insightful-reasoning-and-action-stage.webp&#34; alt=&#34;InSightful’s Reasoning and Action stage&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;(InSightful’s Reasoning and Action stage)&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The user sees this on the front-end:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://www.infracloud.io/assets/img/Blog/insightful-ai-agent/results-of-the-reasoning-and-action-steps.webp&#34; alt=&#34;Results of the Reasoning and Action steps&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;(Results of the Reasoning and Action steps)&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;benefits-of-the-on-premise-approach-local-kubernetes-cluster&#34;&gt;Benefits of the on-premise approach (local Kubernetes cluster)&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;InSightful works well in various online tech communities, such as Slack workspaces, Reddit threads, and Discord servers. The on-premise approach offers several advantages:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;Data security&lt;/strong&gt;: On-premise solutions provide enhanced security by keeping data within the organization’s own infrastructure, making it harder for remote hackers to access sensitive information. This level of control is especially crucial for industries with strict compliance requirements.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;Customization&lt;/strong&gt;: Organizations can tailor their hardware and software configurations to meet specific needs and compliance requirements. This allows for more specialized and efficient setups that cloud solutions might not offer.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;Performance and low latency&lt;/strong&gt;: Since the infrastructure is local, data processing and access times are faster. This is particularly beneficial for real-time applications or those handling large data volumes.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;Control and ownership&lt;/strong&gt;: Complete control over the hardware, software, and data ensures that organizations can implement their own security measures and protocols without relying on external providers.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;InSightful uses state-of-the-art Generative AI to provide an intelligent assistant for tech communities and enterprises. By keeping track of past and present conversations, accessing Stack Overflow for technical questions, and browsing the web for additional research, InSightful reduces redundancy and improves the efficiency of information retrieval. This on-premise approach shows how integrating LLMs with specialized tools can create a practical and powerful AI assistant for enterprises. You can follow this article to build an AI Agent to power a conversation search and retrieval engine for your communication channels like Discord and Slack; however, having an efficient and scalable cloud infrastructure is crucial for building an AI application.&amp;nbsp;&lt;a href=&#34;https://www.infracloud.io/build-ai-cloud/&#34;&gt;AI &amp;amp; GPU Cloud experts&lt;/a&gt;&amp;nbsp;can help you achieve this.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Hopefully, this has been as informative as we sought out to make it. Stay connected with us by subscribing to our weekly newsletter. Please share your valuable feedback with us, and we would love to hear from you on&amp;nbsp;&lt;a href=&#34;https://linkedin.com/in/aiwithshrey&#34;&gt;LinkedIn&lt;/a&gt;!&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;references&#34;&gt;References&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;LLM App dev framework –&amp;nbsp;&lt;a href=&#34;https://python.langchain.com/v0.1/docs/get_started/introduction/&#34;&gt;LangChain docs&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Tools used by InSightful –&amp;nbsp;&lt;a href=&#34;https://tavily.com/&#34;&gt;Tavily&lt;/a&gt;,&amp;nbsp;&lt;a href=&#34;https://tavily.com/&#34;&gt;Stack Exchange API&lt;/a&gt;,&amp;nbsp;&lt;a href=&#34;https://www.trychroma.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Chroma&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;HuggingFace components –&amp;nbsp;&lt;a href=&#34;https://huggingface.co/docs/text-generation-inference/en/index&#34;&gt;Text Generation Inference&lt;/a&gt;,&amp;nbsp;&lt;a href=&#34;https://huggingface.co/docs/text-embeddings-inference/en/index&#34;&gt;Text Embeddings Inference&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;】&lt;p&gt;&lt;em&gt; 会员帖子最初发布于 &lt;a href=&#34;https://www.infracloud.io/blogs/developing-ai-agent-for-smart-contextual-qna/&#34;&gt;InfraCloud 博客&lt;/a&gt;作者：Shreyas Mocherla，InfraCloud Technologies 实习生产品工程师&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;受疫情影响，在线技术社区迅速发展。随着每天都有新成员加入，很难跟踪过去的对话。通常，新来者会提出已经回答过的问题，从而导致重复和冗余。为了解决这个问题，我们构建了一个智能助手，可以跟踪过去的对话，在 Stack Overflow 上搜索技术帮助，并浏览网络以获取相关信息。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;InSightful 是一个 ReAct（推理和行动）代理，可以访问多种工具（例如网络搜索器和上下文检索器）来完成给定的任务。在我们的例子中，它是一个问答应用程序。随着我们的进展，我们将更深入地研究应用程序的工作原理。最终，您将能够了解代理如何工作以及如何开发自己的代理。这些代理是高度可定制的，让您在选择用例时具有很大的灵活性。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;insightul-demo-lets-see-what-insightful-can-do&#34;&gt;InSightul 演示：让我们看看 InSightful 可以做什么&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;InSightful 是一个人工智能代理，可以智能地从工作区检索对话，在给定上下文的 Stack Overflow 上搜索结果，并在其他两个地方无法提供所需信息时浏览网页。这确保了 InSightful 有一个安全网可以依靠，以防中间响应（想法和观察）与用户的问题不匹配。让我们看看如何开发这样的应用程序。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;preventions&#34;&gt;先决条件&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;支持 GPU 的 Kubernetes 集群或安装了 Docker 的单个支持 GPU 的机器&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;a href=&#34;https://huggingface.co/settings/tokens&#34;&gt;具有有效 API 密钥的 HuggingFace 帐户&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;三项服务：&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;TGI – &lt;a href=&#34;https://artifacthub.io/packages/helm/infracloud-charts/text- Generation-inference&#34;&gt;文本生成推理&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;TEI – &lt;a href=&#34;https://artifacthub.io/packages/helm/infracloud-charts/text-embeddings-inference&#34;&gt;文本嵌入推断&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;矢量存储 - &lt;a href=&#34;https://artifacthub.io/packages/helm/infracloud-charts/chromadb&#34;&gt;Chroma DB&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;注意：本教程假设开发人员具有 Docker 经验并了解如何正确使用它。如果开发人员使用 Kubernetes，本教程假设他们有一个多节点 GPU 集群。&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;在演示中，我们将使用现成的 HuggingFace 数据集，其中包含工作场所的对话，模拟真实环境。该数据集模仿实际的交互在 Slack 工作区、Reddit 线程或 Discord 服务器等技术社区中的同事之间进行交流。下载数据集不需要任何额外的步骤，因为它包含在 Python 代码中。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;set-up&#34;&gt;设置&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;在我们的设置中，我们使用的是 Kubernetes 集群，该集群已配置并完全设置为运行 AI 工作负载。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;如果您的情况并非如此，请在支持 GPU 的计算机上单独运行 ai-stack。如果您的机器没有配备GPU，推理速度会非常慢，不推荐。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;&lt;code&gt;$ kubectl get svc -n ai-stack&#xA;&#xA;名称 类型 集群 IP 外部 IP 端口 年龄&#xA;泰负载均衡器 10.233.22.94 192.168.0.203 80:32215/TCP 21h&#xA;tgi 负载均衡器 10.233.50.250 192.168.0.202 80:31963/TCP 21h&#xA;矢量数据库负载均衡器 10.233.27.106 192.168.0.201 8000:30992/TCP 21h&#xA;&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://artifacthub.io/packages/helm/infracloud-charts/ai-stack&#34;&gt;（使用我们的 AI 堆栈图表部署的 Kubernetes 服务）&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;一旦每个服务部署并运行，我们就可以访问它们各自的IP和端口来发送和接收数据。继续克隆存储库并按照&lt;a href=&#34;https://github.com/infracloudio/insightful&#34;&gt;InSightful README&lt;/a&gt; 文件中的步骤操作。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;成功执行自述文件中的步骤后，如果一切顺利，您的浏览器上应该会看到以下页面：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://www.infracloud.io/assets/img/Blog/insightful-ai-agent/insightful-landing-page. webp&#34; alt=&#34;InSightful 登陆页面&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;（InSightful 登陆页面）&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;insightful-in-action&#34;&gt;富有洞察力的行动&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;现在，让我们通过提问来了解 InSightful 的实际应用。您可以根据需要的信息提出不同类型的问题。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;对话分析&lt;/strong&gt;：InSightful 可以分析技术社区中正在讨论的主题并提供见解。例如，如果人们经常讨论某种特定的编程语言，它可以突出显示这一点。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class =“wp-block-image size-full”&gt;&lt;img加载=“lazy”解码=“异步”宽度=“1600”高度=“538”src=“https://www.cncf.io/ wp-content/uploads/2024/08/insightful-capturing-details-in-slack-conversations.webp&#34; alt=&#34;（InSightful 捕获 Slack 对话中的详细信息）&#34; class=&#34;wp-image-116296&#34; srcset=&#34;https: //www.cncf.io/wp-content/uploads/2024/08/insightful-capturing-details-in-slack-conversations.webp 1600w，https://www.cncf.io/wp-content/uploads/2024 /08/insightful-capturing-details-in-slack-conversations-300x101.webp 300w，https://www.cncf.io/wp-content/uploads/2024/08/insightful-capturing-details-in-slack-conversations-1024x344.webp 1024w，https://www.cncf.io/wp-content/uploads/2024/08/insightful-capturing-details-in-slack-conversations-768x258.webp 768w，https:// www.cncf.io/wp-content/uploads/2024/08/insightful-capturing-details-in-slack-conversations-900x303.webp 900w，https://www.cncf.io/wp-content/uploads/2024 /08/insightful-capturing-details-in-slack-conversations-595x200.webp 595w，https://www.cncf.io/wp-content/uploads/2024/08/insightful-capturing-details-in-slack- conversations-1190x400.webp 1190w&#34;sizes=&#34;(max-width: 1600px) 100vw, 1600px&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;（有洞察力地捕获 Slack 对话中的详细信息）&lt; /图标题&gt;&lt;/图&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;社区健康分析&lt;/strong&gt;：InSightful 可以评估科技社区的参与度、情绪和整体健康状况。它可以显示人们对某些主题的总体态度是积极还是消极。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image size-full is-resized&#34;&gt;&lt;imgloading=&#34;lazy&#34;decoding=&#34;async&#34;width=&#34;1600&#34;height=&#34;538&#34;src=&#34;https://www.cncf .io/wp-content/uploads/2024/08/2-insightful-analyzing-sentiments-and-overall-community-health.webp&#34; alt=&#34;（有洞察力的分析情绪和整体社区健康）&#34; class=&#34;wp-image -116297&#34; style=&#34;width:900px;height:auto&#34; srcset=&#34;https://www.cncf.io/wp-content/uploads/2024/08/2-insightful-analyzing-sentiments-and-overall-community -health.webp 1600w，https://www.cncf.io/wp-content/uploads/2024/08/2-insightful-analyzing-sentiments-and-overall-community-health-300x101.webp 300w，https:// /www.cncf.io/wp-content/uploads/2024/08/2-insightful-analyzing-sentiments-and-overall-community-health-1024x344.webp 1024w，https://www.cncf.io/wp-内容/uploads/2024/08/2-insightful-analyzing-sentiments-and-overall-community-health-768x258.webp 768w，https://www.cncf.io/wp-content/uploads/2024/08/2 -insightful-analyzing-sentiments-and-overall-community-health-900x303.webp 900w，https://www.cncf.io/wp-content/uploads/2024/08/2-insightful-analyzing-sentiments-and-整体社区健康-595x200.webp 595w，https://www.cncf.io/wp-content/uploads/2024/08/2-insightful-analyzing-sentiments-and-overall-community-health-1190x400.webp 1190w&#34;sizes=&#34;(max-width: 1600px) 100vw, 1600px&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;（有洞察力的分析情绪和整体社区健康状况）&lt;/figcaption&gt;&lt; /图&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;搜索 Stack Overflow&lt;/strong&gt;：InSightful 可以在 Stack Overflow 中搜索相关问题和答案，通过提供常见问题的即时解决方案来节省用户时间。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image size-full is-resized&#34;&gt;&lt;imgloading=&#34;lazy&#34;decoding=&#34;async&#34;width=&#34;1600&#34;height=&#34;538&#34;src=&#34;https://www.cncf .io/wp-content/uploads/2024/08/3-insightful-responding-to-technical-question.webp&#34; alt=&#34;(InSightful 回答技术问题)&#34; class=&#34;wp-image-116298&#34; style= “宽度：900px；高度：自动” srcset =“https：//www.cncf.io/wp-content/uploads/2024/08/3-insightful-responding-to-technical-question.webp 1600w，https://www.cncf.io/wp-content/uploads/2024/08 /3-insightful-responding-to-technical-question-300x101.webp 300w，https://www.cncf.io/wp-content/uploads/2024/08/3-insightful-responding-to-technical-question- 1024x344.webp 1024w，https://www.cncf.io/wp-content/uploads/2024/08/3-insightful-responding-to-technical-question-768x258.webp 768w，https://www.cncf。 io/wp-content/uploads/2024/08/3-insightful-responding-to-technical-question-900x303.webp 900w，https://www.cncf.io/wp-content/uploads/2024/08/3 -insightful-responding-to-technical-question-595x200.webp 595w，https://www.cncf.io/wp-content/uploads/2024/08/3-insightful-responding-to-technical-question-1190x400。 webp 1190w&#34;sizes=&#34;(max-width: 1600px) 100vw, 1600px&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;（富有洞察力地回答技术问题）&lt;/figcaption&gt;&lt; /图&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;浏览网络&lt;/strong&gt;：InSightful 可以进行网络搜索，收集社区主题的相关信息，提供最新知识。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class =“wp-block-image size-full”&gt;&lt;img加载=“lazy”解码=“异步”宽度=“1600”高度=“584”src=“https://www.cncf.io/ wp-content/uploads/2024/08/4-insightful-providing-response-from-web-search-result.webp&#34; alt=&#34;（InSightful 提供来自网络搜索结果的响应）&#34; class=&#34;wp-image-116299 “ srcset =“https://www.cncf.io/wp-content/uploads/2024/08/4-insightful-providing-response-from-web-search-result.webp 1600w，https://www.cncf .io/wp-content/uploads/2024/08/4-insightful-providing-response-from-web-search-result-300x110.webp 300w，https://www.cncf.io/wp-content/uploads/ 2024/08/4-insightful-providing-response-from-web-search-result-1024x374.webp 1024w，https://www.cncf.io/wp-content/uploads/2024/08/4-insightful-providing -response-from-web-search-result-768x280.webp 768w，https://www.cncf.io/wp-content/uploads/2024/08/4-insightful-providing-response-from-web-search-结果-900x329.webp 900w，https://www.cncf.io/wp-content/uploads/2024/08/4-insightful-providing-response-from-web-search-result-548x200.webp 548w，https： //www.cncf.io/wp-content/uploads/2024/08/4-insightful-providing-response-from-web-search-result-1096x400.webp 1096w“尺寸=”（最大宽度：1600px）100vw , 1600px&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;（InSightful 提供网络搜索结果的响应）&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;现在我们知道了 InSightful 可以做什么，让我们了解它是什么以及它是如何工作的。如前所述，InSightful 由 AI 代理提供支持，因此让我们从代理开始。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;agents-a-brief-introduction&#34;&gt;代理：简介&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;ChatGPT 发布后，迅速流行起来，超过了&lt;a href=&#34;https://www.reuters.com/technology/chatgpt-sets-record-fastest-forming-user-base-analyst-note-2023 -02-01/&#34;&gt;100万用户只需 5 天&lt;/a&gt;。自然语言处理 (NLP) 已经出现了一段时间，但 ChatGPT 通过将语言模型转变为大型语言模型 (LLM)，将其提升到了一个新的水平。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;然而，法学硕士虽然拥有强大的语言模型，但就像鹦鹉一样——他们会重复听到的内容，但没有真正理解。为了使它们更适用于特定的任务和问题，我们必须进行微调，提供详细的提示，并设置防护栏，使其响应与用户的需求紧密结合。开发代理利用其中一些方法使它们能够进行推理并采取相应的行动。通过一组工具，代理可以在环境中执行操作，这是常规基础法学硕士无法实现的。代理集成了这些附加工具和框架，使它们能够执行特定任务、做出决策并与环境动态交互。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;为了简单起见并限制 InSightful 演示的范围，我们将仅讨论我们用来使 LLM 适应我们自己的用例的技术。我们将法学硕士与网络搜索和上下文检索工具集成，并提供了明确定义的提示。工具的提示和可访问性的结合使我们的代理变得栩栩如生。需要注意的是，我们不一定要创建一个代理来使用工具，相反，我们可以直接提供一个与工具兼容的LLM。我们提到“兼容的 LLM”是因为并非所有的 LLM 都支持工具调用。然而，在&lt;a href=&#34;https://github.com/langchain-ai/langchain&#34;&gt;LangChain&lt;/a&gt;的帮助下，任何LLM都可以用来开发代理，以达到与工具调用相同的结果启用法学硕士。最终，LLM 仅用于推理和访问 LangChain 代理中提供的一组工具。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;我们谨慎地提示代理，并在多次迭代中完善了提示，使其几乎万无一失。提示使代理在解决任务时更加可靠，在形成最终响应时始终遵守结构。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;对于 InSightful，我们采用了推理与行动（ReAct）Agent 方法，这种 Agent 可以通过任务进行推理，形成行动计划来指导其行动，并在彻底的自我反思后最终做出响应。将工具整合到代理中使其能够形成有效的响应。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://www.infracloud.io/assets/img/Blog/insightful-ai-agent/bts-of-react- agent.webp&#34; alt=&#34;ReAct 代理的幕后花絮&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://betterprogramming.pub/make-langchain-agent-actually-works-with-local-llms-vicuna-wizardlm-etc-da42b6b1a97&#34;&gt;（ReAct 代理的幕后故事） &lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;从图中我们可以理解，手头的任务是用户提供的问题，环境是工具的描述提供的。该工具的描述为该工具提供了简洁的上下文决定给定工具是否对任务有用。 “思想-行动-观察”的循环重复一定次数，直到得到令人满意的观察结果。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;ReAct 还有其他线性替代方案，而不是 ReAct 的循环方法，例如思想链 (CoT) 和思想树 (ToT)，但是，这些替代方案不支持操作，也无法实现学习来自行为对环境的后果。它们是纯粹推理支持的方法。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;creating-tools-as-functions&#34;&gt;将工具创建为函数&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;从根本上来说，工具正如其听起来的样子。它们对代理进行补充，以根据用户的问题生成准确且符合上下文的响应。 &lt;a href=&#34;https://python.langchain.com/v0.1/docs/integrations/tools/&#34;&gt;LangChain 拥有此类工具的详尽列表&lt;/a&gt;，可以与代理集成。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;InSightful 应用了多种工具来增强代理：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;对话检索工具&lt;/strong&gt;：我们转换了传统的&lt;a href=&#34;https://www.infracloud.io/blogs/retrieval-augmented- Generation-using-data-with-llms/&#34; &gt;将检索增强生成 (RAG)&lt;/a&gt; 方法融入到工具中，从而提高代理的效率。我们本质上是创建了自己的工具，因为我们想要的工具不能直接在 LangChain 包中获得。该工具使用矢量存储作为检索器，支持相似性搜索和预测。这种集成简化了流程，允许代理检索信息而无需执行单独的功能。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;Stack Overflow 搜索工具&lt;/strong&gt;：我们使用 &lt;a href=&#34;https://api.stackexchange.com/&#34;&gt;Stack Exchange API&lt;/a&gt; 开发了此工具，使代理能够在 Stack Overflow 上搜索和查询广泛的问题和解答数据库。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;搜索引擎工具&lt;/strong&gt;：&lt;a href=&#34;https://tavily.com/&#34;&gt;Tavily Search&lt;/a&gt;是专为法学硕士量身定制的搜索引擎。我们使用 Tavily API 与 LangChain 集成，它提供 Tavily Search 作为与 LangChain 代理一起使用的工具。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;providing-tools-to-our-agent&#34;&gt;向我们的代理提供工具&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;将这些工具创建为可调用函数后，我们将它们编译成一个简单的 Python 列表，如下所示：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-preformatted&#34;&gt;&lt;code&gt;工具 = [retriever_tool、stack_overflow_search_tool、web_search_tool]&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;（提供给代理的工具列表）&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;LangChain 迭代此列表，使用每个工具的文档字符串中提供的名称和描述来了解其用途。必须为每个自定义工具设置名称和描述，因为它为 LangChain 提供了每个功能实现的背景。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;一旦我们有了工具列表，我们就可以在创建代理时将其设置为参数。这安装程序向代理表明它可以访问这些工具。当代理确定要使用哪个工具时，它会运行相应的函数来触发该工具。理想情况下，该工具返回所需的结果，并且代理将其用作附加上下文来增强其响应。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;通过集成这些工具，InSightful 可以：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;检索和分析对话&lt;/strong&gt;：识别重复出现的问题并根据过去的讨论提供答案，从而节省时间并减少冗余。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;参与技术问答&lt;/strong&gt;：使用 Stack Overflow 回答技术问题，并给出快速、准确的答复。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;进行独立研究&lt;/strong&gt;：浏览网络以获取有关社区主题的更多信息，确保获得最新且全面的答案。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;connecting-the-dots&#34;&gt;连接点&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://www.infracloud.io/assets/img/Blog/insightful-ai-agent/insightful-workflow-diagram。 webp&#34; alt=&#34;InSightful 工作流程图&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;（InSightful 工作流程图）&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;让我们分解每个组件以及它们如何融入大局：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;文档检索&lt;/strong&gt;：从数据源（例如我们案例中的矢量存储）检索对话历史记录、技术问题和其他相关数据。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;矢量存储&lt;/strong&gt;：&lt;a href=&#34;https://www.infracloud.io/blogs/vector-databases-beginners-guide/&#34;&gt;矢量存储&lt;/a&gt;是嵌入的位置被存储。嵌入由&lt;a href=&#34;https://www.infracloud.io/blogs/developing-ai-agent-for-smart-contextual-qna/#precessions&#34;&gt;TEI&lt;/a&gt;生成。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;法学硕士&lt;/strong&gt;：&lt;a href=&#34;https://www.infracloud.io/blogs/developing-ai-agent-for-smart-contextual-qna/#preventions&#34;&gt;TGI&lt;/ a&gt; 是 LLM 运行的地方，根据检索到的数据生成响应，为用户查询提供有意义的答案。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;工具/外部 API 集成&lt;/strong&gt;：集成用于搜索 Stack Overflow 和浏览网页的其他工具，扩展助手的功能。这些工具由每个服务（Tavily 和 Stack Overflow）提供的 API 提供支持。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;以下是输入用户查询时的流程示例。查询“Kubernetes 上的最新新闻”会产生此结果，仅对开发人员可见：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://www.infracloud.io/assets/img/Blog/insightful-ai-agent/insightful-reasoning-and- action-stage.webp&#34; alt=&#34;InSightful 的推理和行动阶段&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;（InSightful 的推理和行动阶段）&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;用户在前面看到这个-结束：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://www.infracloud.io/assets/img/Blog/insightful-ai-agent/results-of-the- Reasoning-and-action-steps.webp&#34; alt=&#34;推理和操作步骤的结果&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;（推理和操作步骤的结果） &lt;/图标题&gt;&lt;/图&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;benefits-of-the-on-premise-approach-local-kubernetes-cluster&#34;&gt;本地方法（本地 Kubernetes 集群）的优势&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;InSightful 在各种在线技术社区中运行良好，例如 Slack 工作区、Reddit 线程和 Discord 服务器。本地部署方法有几个优点：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;数据安全&lt;/strong&gt;：本地解决方案通过将数据保留在组织自己的基础设施内来提供增强的安全性，使远程黑客更难访问敏感信息。这种控制水平对于具有严格合规要求的行业尤其重要。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;定制&lt;/strong&gt;：组织可以定制其硬件和软件配置以满足特定需求和合规性要求。这样可以实现云解决方案可能无法提供的更专业、更高效的设置。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;性能和低延迟&lt;/strong&gt;：由于基础设施位于本地，因此数据处理和访问时间更快。这对于实时应用程序或处理大数据量的应用程序特别有利。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;控制和所有权&lt;/strong&gt;：对硬件、软件和数据的完全控制可确保组织能够实施自己的安全措施和协议，而无需依赖外部提供商。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;conclusion&#34;&gt;结论&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;InSightful 使用最先进的生成式人工智能为科技社区和企业提供智能助手。通过跟踪过去和现在的对话、访问 Stack Overflow 解决技术问题以及浏览网页进行其他研究，InSightful 减少了冗余并提高了信息检索的效率。这种本地方法展示了如何将法学硕士与专业工具集成，为企业创建实用且强大的人工智能助手。您可以按照本文构建一个 AI 代理，为您的沟通渠道（如 Discord 和 Slack）提供对话搜索和检索引擎；然而，拥有高效且可扩展的云基础设施对于构建人工智能应用程序至关重要。 &lt;a href=&#34;https://www.infracloud.io/build-ai-cloud/&#34;&gt;AI 和 GPU 云专家&lt;/a&gt;可以帮助您实现这一目标。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;希望这能提供我们想要的信息。订阅我们的每周时事通讯，与我们保持联系。请与我们分享您的宝贵反馈，我们很乐意在 &lt;a href=&#34;https://linkedin.com/in/aiwit 上收到您的来信hshrey&#34;&gt;领英&lt;/a&gt;！&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;references&#34;&gt;参考&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;LLM 应用开发框架 – &lt;a href=&#34;https://python.langchain.com/v0.1/docs/get_started/introduction/&#34;&gt;LangChain 文档&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;InSightful 使用的工具 - &lt;a href=&#34;https://tavily.com/&#34;&gt;Tavily&lt;/a&gt;、&lt;a href=&#34;https://tavily.com/&#34;&gt;Stack Exchange API&lt;/a&gt; &gt;, &lt;a href=&#34;https://www.trychroma.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Chroma&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;HuggingFace 组件 – &lt;a href=&#34;https://huggingface.co/docs/text- Generation-inference/en/index&#34;&gt;文本生成推理&lt;/a&gt;、&lt;a href=&#34;https://huggingface .co/docs/text-embeddings-inference/en/index&#34;&gt;文本嵌入推断&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;</description>
      <pubDate>Sun, 18 Aug 2024 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Build an API in Next.js and deploy with Rancher】在 Next.js 中构建 API 并使用 Rancher 进行部署</title>
      <link>https://www.cncf.io/blog/2024/08/19/build-an-api-in-next-js-and-deploy-with-rancher/</link>
      <description>【&lt;p&gt;&lt;em&gt;Member post originally published on &lt;a href=&#34;https://ngrok.com/blog-post/next-js-kubernetes-rancher#build-an-api-in-nextjs-and-deploy-with-rancher&#34;&gt;ngrok’s blog&lt;/a&gt; by Joel Hans&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Every autumn, as the weather here in Tucson, Arizona, finally transitions away from near-unbearable heat, my wife once again falls in love with the garden. Ripping out all the desiccated tomatoes and failed watermelon experiments. Turning over and amending the soil. Picking out new seeds. Carefully selecting their locations based on sunlight and the finicky irrigation system. When the day to plant comes, we often do it as a family, our daughters “helping” while my wife and I diligently carve rows and drop in the exact number of seeds at their proper spacing.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;And then I immediately forget which seeds went where.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;There are simpler, non-technical solutions to this problem—I could, for one, draw simple diagrams of the garden beds and list out all the plants in their respective locations—but one of my daughters would find and desecrate this critical piece of paper with Crayon in a matter of days if not hours.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;A far more compelling, technical, and rewarding project became clear: an API for saving plants, locations, and the dates they were sowed/planted, paired with a highly durable deployment on Kubernetes. You can follow along with this developing and deploying project, which has two major “chapters.” First, you’ll build an API using&amp;nbsp;&lt;a href=&#34;https://nextjs.org/&#34;&gt;Next.js&lt;/a&gt;&amp;nbsp;and&amp;nbsp;&lt;a href=&#34;https://www.mongodb.com/&#34;&gt;MongoDB&lt;/a&gt;&amp;nbsp;for receiving requests and saving data, respectively. Next, you’ll move into deploying this API to Kubernetes using&amp;nbsp;&lt;a href=&#34;https://www.rancher.com/&#34;&gt;Rancher&lt;/a&gt;&amp;nbsp;for cluster management and&amp;nbsp;&lt;a href=&#34;https://github.com/ngrok/kubernetes-ingress-controller&#34;&gt;ngrok Ingress Controller for Kubernetes&lt;/a&gt;&amp;nbsp;to quickly add public access to your garden tracking API.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;You can also clone the API code from the&amp;nbsp;&lt;a href=&#34;https://github.com/ngrok-samples/nextjs-rancher-ngrok-api&#34;&gt;ngrok-samples/nextjs-rancher-ngrok-api&lt;/a&gt;&amp;nbsp;repository on GitHub to follow along and/or skip ahead to deployment.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;prerequisites&#34;&gt;Prerequisites&lt;a href=&#34;https://ngrok.com/blog-post/next-js-kubernetes-rancher#prerequisites&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While the API chapter of this project only requires Node.js on your local workstation, the deployment to Kubernetes via Rancher has more complex prerequisites, including&amp;nbsp;&lt;strong&gt;one or more virtual Linux hosts&lt;/strong&gt;, beyond your local workstation, to operate as a Kubernetes node.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;To configure and deploy these prerequisites, follow our&amp;nbsp;&lt;a href=&#34;https://ngrok.com/docs/integrations/rancher/k8s/&#34;&gt;Ingress to applications managed by Rancher in Kubernetes&amp;nbsp;&lt;/a&gt;&amp;nbsp;guide for installing Rancher on your local workstation, creating an RKE2 cluster, and deploying the ngrok Kubernetes Ingress Controller.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;chapter-1-build-a-rest-api-for-garden-tracking&#34;&gt;Chapter 1: Build a REST API for garden tracking&lt;a href=&#34;https://ngrok.com/blog-post/next-js-kubernetes-rancher#chapter-1-build-a-rest-api-for-garden-tracking&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;You’re going to use Next.js for this project—it has a nice balance of simplicity for building API routes while also being flexible enough you could later build a frontend web app in the same project with co-located code.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Run the following command to initialize the folder where you will build this project. The first prompt will ask you to name the project (&lt;code&gt;garden-tracker&lt;/code&gt;&amp;nbsp;is a good choice!), and for the rest of the questions, hitting&amp;nbsp;&lt;code&gt;Enter&lt;/code&gt;&amp;nbsp;to select the defaults is fine.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;npx create-next-app@latest&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;create-a-mongodb-connector&#34;&gt;Create a MongoDB connector&lt;a href=&#34;https://ngrok.com/blog-post/next-js-kubernetes-rancher#create-a-mongodb-connector&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;You’re going to use the Mongoose library, which provides helper functions that make working with MongoDB a lot easier, so add that library to your project with&amp;nbsp;&lt;code&gt;npm install mongoose&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Create a new&amp;nbsp;&lt;code&gt;src/lib/&lt;/code&gt;&amp;nbsp;folder and add a file named&amp;nbsp;&lt;code&gt;connect-db.ts&lt;/code&gt;&amp;nbsp;into it. This function opts for using a cached connection over creating a new one, connecting over a&amp;nbsp;&lt;code&gt;MONGODB_URI&lt;/code&gt;&amp;nbsp;environment variable. You don’t need to worry about this variable now—it’ll come back into play once you’re finally ready to deploy to your Kubernetes cluster.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;import Mongoose from &#39;mongoose&#39;&#xA;&#xA;const { MONGODB_URI } = process.env&#xA;if (!MONGODB_URI) throw new Error(&#39;MONGODB_URI is not defined in environment.&#39;)&#xA;&#xA;let cached = global.mongoose&#xA;if (!cached) cached = global.mongoose = { conn: null }&#xA;&#xA;const connectMongo = async () =&amp;gt; {&#xA;  if (cached.conn) return cached.conn&#xA;&#xA;  cached.conn = await Mongoose.connect(MONGODB_URI)&#xA; &#xA;  return cached.conn&#xA;}&#xA;&#xA;export default connectMongo&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Add a file called&amp;nbsp;&lt;code&gt;types.d.ts&lt;/code&gt;&amp;nbsp;in the root directory of your project, if one is not there already, to avoid TypeScript errors this database connection.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;import { Mongoose } from &#39;mongoose&#39;&#xA;&#xA;&lt;em&gt;/* eslint-disable no-var */&lt;/em&gt;&#xA;&#xA;declare global {&#xA;  var mongoose: {&#xA;    conn: Mongoose | null;&#xA;  };&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;create-a-mongoose-schema&#34;&gt;Create a Mongoose schema&lt;a href=&#34;https://ngrok.com/blog-post/next-js-kubernetes-rancher#create-a-mongoose-schema&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;A&amp;nbsp;&lt;a href=&#34;https://mongoosejs.com/docs/guide.html#definition&#34;&gt;Mongoose schema&lt;/a&gt;&amp;nbsp;defines how MongoDB will store the documents you’ll eventually create about the plants in your garden. The idea is similar to type safety—if you query your API with data that do not adhere to this schema, MongoDB will either reject the request entirely, such as a missing value for&amp;nbsp;&lt;code&gt;species&lt;/code&gt;, or ignore things like additional keys.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;TypeScript can “borrow” this schema for type safety, which prevents you from inadvertently changing the type of any variable from a&amp;nbsp;&lt;code&gt;number&lt;/code&gt;&amp;nbsp;to a&amp;nbsp;&lt;code&gt;string&lt;/code&gt;, for example, which can lead to unexpected and often hard-to-catch bugs in your code. When you instantiate a new variable or object in your TypeScript code, you must also specify its type.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Create a new file called&amp;nbsp;&lt;code&gt;Plants.ts&lt;/code&gt;&amp;nbsp;in the&amp;nbsp;&lt;code&gt;src/models/&lt;/code&gt;&amp;nbsp;folder for your new schema, which specifies three keys and requires the&amp;nbsp;&lt;code&gt;species&lt;/code&gt;&amp;nbsp;key, which is generally used for naming your documents.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;import { models, model, Schema } from &#39;mongoose&#39;&#xA;&#xA;const PlantSchema: Schema = new Schema({&#xA;  species: {&#xA;    type: String,&#xA;    required: true,&#xA;  },&#xA;  zone: {&#xA;    type: String,&#xA;  },&#xA;  datePlanted: {&#xA;    type: Date,&#xA;  }&#xA;})&#xA;&#xA;const Plant = models.Plant || model(&#39;Plant&#39;, PlantSchema)&#xA;&#xA;export default Plant&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;add-routes-for-your-crud-api-with-nextjs-route-handlers&#34;&gt;Add routes for your CRUD API with Next.js Route Handlers&lt;a href=&#34;https://ngrok.com/blog-post/next-js-kubernetes-rancher#add-routes-for-your-crud-api-with-nextjs-route-handlers&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In Next.js 13,&amp;nbsp;&lt;a href=&#34;https://nextjs.org/docs/app/building-your-application/routing/route-handlers&#34;&gt;Route Handlers&lt;/a&gt;&amp;nbsp;let you create a custom request handler for any route. Next.js reads any&amp;nbsp;&lt;code&gt;route.js|ts&lt;/code&gt;&amp;nbsp;file inside of the&amp;nbsp;&lt;code&gt;app&lt;/code&gt;&amp;nbsp;directory as a Route Handler, and because Next.js uses folder-based routing, you will need to create a&amp;nbsp;&lt;code&gt;src/app/api/plants/&lt;/code&gt;&amp;nbsp;folder structure, and create a new&amp;nbsp;&lt;code&gt;routes.ts&lt;/code&gt;&amp;nbsp;within it.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;First, you’ll need to bring in the&amp;nbsp;&lt;a href=&#34;https://nextjs.org/docs/pages/api-reference/functions/next-server&#34;&gt;NextResponse&lt;/a&gt;&amp;nbsp;middleware function, your MongoDB connector library, and your Mongoose model.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;import { NextResponse } from &#39;next/server&#39;&#xA;import connectMongo from &#39;@/lib/connect-db&#39;&#xA;import Plant from &#39;@/models/Plants&#39;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Next, you can define your first API route with a handler function that receives a&amp;nbsp;&lt;code&gt;POST&lt;/code&gt;&amp;nbsp;request at&amp;nbsp;&lt;code&gt;/api/plants&lt;/code&gt;&amp;nbsp;and creates a new document in MongoDB using the request’s data. This function opens a connection with your database via Mongoose, saves the new document, and responds with a success message.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;export async function POST(request: Request) {&#xA;  try {&#xA;    const data = await request.json()&#xA;&#xA;    await connectMongo()&#xA;&#xA;    const savedPlant = await new Plant(data).save()&#xA;&#xA;    return Response.json({&#xA;      &#34;message&#34;: &#34;Plant created successfully&#34;,&#xA;      &#34;success&#34;: true,&#xA;      savedPlant&#xA;    })&#xA;  } catch (err) {&#xA;    return Response.json({ error: `Internal Server Error: ${err}` }, { status: 500 })&#xA;  }&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The next handler function is for a&amp;nbsp;&lt;code&gt;GET&lt;/code&gt;&amp;nbsp;request, which responds with all the documents already saved to your database as JSON.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;export async function GET() {&#xA;  try {&#xA;    await connectMongo()&#xA;&#xA;    const res = await Plant.find({})&#xA;&#xA;    return Response.json(res)&#xA;  } catch (err) {&#xA;    return Response.json({ error: `Internal Server Error: ${err}` }, { status: 500 })&#xA;  }&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The next request in a CRUD API is&amp;nbsp;&lt;strong&gt;update&lt;/strong&gt;, which uses a handler function responding to a&amp;nbsp;&lt;code&gt;PUT&lt;/code&gt;&amp;nbsp;request that passes the plant’s&amp;nbsp;&lt;code&gt;_id&lt;/code&gt;&amp;nbsp;as part of the route segment, like&amp;nbsp;&lt;code&gt;/api/plants/6539310ebc18ad2f04ed30f9&lt;/code&gt;. Next.js makes that segment available in the request’s&amp;nbsp;&lt;code&gt;params&lt;/code&gt;, and the following function then uses Mongoose’s&amp;nbsp;&lt;code&gt;findByItAndUpdate&lt;/code&gt;&amp;nbsp;function to find a document and update its contents.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This requires a new Next.js&amp;nbsp;&lt;a href=&#34;https://nextjs.org/docs/app/building-your-application/routing/route-handlers#dynamic-route-segments&#34;&gt;dynamic route segment&lt;/a&gt;. Create a new folder called&amp;nbsp;&lt;code&gt;[_id]&lt;/code&gt;&amp;nbsp;in your existing&amp;nbsp;&lt;code&gt;api/plants/&lt;/code&gt;&amp;nbsp;hierarchy, and then create another&amp;nbsp;&lt;code&gt;route.ts&lt;/code&gt;&amp;nbsp;file for the next two functions.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;export async function PUT(&#xA;    request: Request,&#xA;    { params }: { params: { _id: string } }&#xA;  ) {&#xA;  try {&#xA;    await connectMongo()&#xA;    const data = await request.json()&#xA;&#xA;    const updatedPlant = await Plant.findByIdAndUpdate(params._id, data, { new: true })&#xA;&#xA;    return Response.json({&#xA;      &#34;message&#34;: `Plant ${params._id} updated successfully`,&#xA;      &#34;success&#34;: true,&#xA;      updatedPlant&#xA;    })&#xA;  } catch (err) {&#xA;    return Response.json({ error: `Internal Server Error: ${err}` }, { status: 500 })&#xA;  }&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Finally, you’ll likely want to delete plants from your database. This function handler responds to a&amp;nbsp;&lt;code&gt;DELETE&lt;/code&gt;&amp;nbsp;request by using the&amp;nbsp;&lt;code&gt;findByIdAndRemove&lt;/code&gt;&amp;nbsp;function to delete the relevant document, with the&amp;nbsp;&lt;code&gt;_id&lt;/code&gt;&amp;nbsp;from the route path, from your database.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;export async function DELETE(&#xA;  request: Request,&#xA;  { params }: { params: { _id: string } }&#xA;) {&#xA;  try {&#xA;    await connectMongo()&#xA;&#xA;    await Plant.findByIdAndRemove(params._id)&#xA;&#xA;    return Response.json({&#xA;      &#34;message&#34;: `Plant ${params._id} deleted`&#xA;    })&#xA;  } catch (err) {&#xA;    return Response.json({ error: `Internal Server Error: ${err}` }, { status: 500 })&#xA;  }&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;You now have a Next.js-based API for creating, reading, updating, and deleting documents within a MongoDB database of what you’ve planted in your garden. You could start building a frontend for your new API or test/deploy locally using&amp;nbsp;&lt;code&gt;npm run dev&lt;/code&gt;, but you’ll jump straight into deploying to a Kubernetes cluster.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;containerize-your-nextjs-api&#34;&gt;Containerize your Next.js API&lt;a href=&#34;https://ngrok.com/blog-post/next-js-kubernetes-rancher#containerize-your-nextjs-api&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Because Kubernetes is a container orchestrator, you must package your API code packaged alongside the proper environment and dependencies. Create a new&amp;nbsp;&lt;code&gt;Dockerfile&lt;/code&gt;&amp;nbsp;with the following code, which builds your garden tracker project using&amp;nbsp;&lt;code&gt;npm build&lt;/code&gt;. Docker then copies the production-ready assets into the image, which exposes port&amp;nbsp;&lt;code&gt;3000&lt;/code&gt;&amp;nbsp;and runs&amp;nbsp;&lt;code&gt;npm start&lt;/code&gt;&amp;nbsp;to launch the server when Kubernetes initializes the image+container in a pod.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;FROM node:18-alpine AS build&#xA;&#xA;WORKDIR /app&#xA;COPY package*.json ./&#xA;RUN npm ci&#xA;COPY . .&#xA;RUN npm run build&#xA;&#xA;FROM node:18-alpine AS runtime&#xA;&#xA;WORKDIR /app&#xA;COPY package*.json ./&#xA;RUN npm ci &lt;em&gt;--only=production&lt;/em&gt;&#xA;COPY &lt;em&gt;--from=build /app/.next ./.next&lt;/em&gt;&#xA;COPY &lt;em&gt;--from=build /app/public ./public&lt;/em&gt;&#xA;&#xA;EXPOSE 3000&#xA;USER node&#xA;CMD [&#34;npm&#34;, &#34;start&#34;]&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;By default, Kubernetes expects to find containers at an existing public or&amp;nbsp;&lt;a href=&#34;https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/&#34;&gt;private image registry&lt;/a&gt;. You can certainly push your container to one of these registries and configure your Kubernetes cluster accordingly. Still, for the sake of this experiment, you’ll upload your container to&amp;nbsp;&lt;a href=&#34;https://ttl.sh/&#34;&gt;ttl.sh&lt;/a&gt;, an ephemeral Docker image registry. Later, you’ll configure your deployment to pull this ephemeral image, which your cluster will cache in case you need to rebuild a pod running this image.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Create a UUID for your container, and tag it with&amp;nbsp;&lt;code&gt;1h&lt;/code&gt;, which tells ttl.sh to delete your image after an hour.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;IMAGE_NAME=$(uuidgen)&#xA;docker build -t ttl.sh/${IMAGE_NAME}:1h .                               &#xA;docker push ttl.sh/${IMAGE_NAME}:1h&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Take note of the output of&amp;nbsp;&lt;code&gt;docker push&lt;/code&gt;, notably the first line (&lt;code&gt;The push refers to repository [ttl.sh/IMAGE_NAME]&lt;/code&gt;, as it’ll inform the Kubernetes manifest you’ll create later.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;chapter-2-deploy-your-garden-tracker-to-kubernetes&#34;&gt;Chapter 2: Deploy your garden tracker to Kubernetes&lt;a href=&#34;https://ngrok.com/blog-post/next-js-kubernetes-rancher#chapter-2-deploy-your-garden-tracker-to-kubernetes&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The API side of this project is finished, but you still need to deploy it. Assuming you have followed through our&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://ngrok.com/docs/integrations/rancher/k8s/&#34;&gt;Ingress to applications managed by Rancher in Kubernetes&lt;/a&gt;&amp;nbsp;guide for creating a new cluster and installing the ngrok Ingress Controller with Rancher, you’re ready to get moving.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;launch-mongodb-on-your-cluster&#34;&gt;Launch MongoDB on your cluster&lt;a href=&#34;https://ngrok.com/blog-post/next-js-kubernetes-rancher#launch-mongodb-on-your-cluster&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Persistent volumes can be a pain in Kubernetes, especially when working on a local cluster, so you’re going to leverage a Rancher-developed library called&amp;nbsp;&lt;a href=&#34;https://github.com/rancher/local-path-provisioner&#34;&gt;Local Path Provisioner&lt;/a&gt;&amp;nbsp;to enable dynamic, persistent local storage.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;&#xA;kubectl apply -f https://raw.githubusercontent.com/rancher/local-path-provisioner/v0.0.24/deploy/local-path-storage.yaml&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;No more configuration is required for this provisioner, so it’s time to install MongoDB on your cluster, which Rancher can handle entirely through its dashboard. From said dashboard, click&amp;nbsp;&lt;strong&gt;Apps&lt;/strong&gt;&amp;nbsp;→&amp;nbsp;&lt;strong&gt;Charts&lt;/strong&gt;, then search for&amp;nbsp;&lt;strong&gt;MongoDB Community Operator&lt;/strong&gt;. Click on that box, then&amp;nbsp;&lt;strong&gt;Install&lt;/strong&gt;, making sure you add the Operator to the existing&amp;nbsp;&lt;code&gt;ngrok-ingress-controller&lt;/code&gt;&amp;nbsp;namespace before finishing the installation.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;create-a-kubernetes-manifest-for-your-deployment&#34;&gt;Create a Kubernetes manifest for your deployment&lt;a href=&#34;https://ngrok.com/blog-post/next-js-kubernetes-rancher#create-a-kubernetes-manifest-for-your-deployment&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;You’ve finally arrived at the critical moment: time to deploy your garden tracker API to your Kubernetes cluster! The easiest way to do this is a single&amp;nbsp;&lt;code&gt;deployment.yaml&lt;/code&gt;&amp;nbsp;manifest with the following content. You’ll need to change three properties:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;code&gt;{YOUR_NGROK_DOMAIN}&lt;/code&gt;: The ngrok subdomain you created in our&amp;nbsp;&lt;a href=&#34;https://ngrok.com/docs/integrations/rancher/k8s/&#34;&gt;Ingress to applications managed by Rancher in Kubernetes&lt;/a&gt;&amp;nbsp;guide.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;code&gt;{YOUR_IMAGE_UUID}&lt;/code&gt;: The UUID created when you built your container and pushed it to ttl.sh.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;code&gt;{YOUR_DB_PASSWORD}&lt;/code&gt;: A new password of your choosing, which the MongoDB operator uses to initialize your database&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;user’s credentials.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;apiVersion: v1&#xA;kind: Service&#xA;metadata:&#xA;  name: garden-tracker&#xA;  namespace: ngrok-ingress-controller&#xA;spec:&#xA;  ports:&#xA;    - name: http&#xA;    port: 80&#xA;    targetPort: 3000&#xA;  selector:&#xA;  app: garden-tracker&#xA;---&#xA;apiVersion: apps/v1&#xA;kind: Deployment&#xA;metadata:&#xA;  name: garden-tracker&#xA;  namespace: ngrok-ingress-controller&#xA;spec:&#xA;  replicas: 1&#xA;  selector:&#xA;    matchLabels:&#xA;      app: garden-tracker&#xA;  template:&#xA;    metadata:&#xA;      labels:&#xA;        app: garden-tracker&#xA;    spec:&#xA;      containers:&#xA;        - name: api&#xA;          image: ttl.sh/{YOUR_IMAGE_UUID}:1h&#xA;          ports:&#xA;            - name: http&#xA;              containerPort: 3000&#xA;          env:&#xA;            - name: MONGODB_URI&#xA;              valueFrom:&#xA;                secretKeyRef:&#xA;                  name: garden-tracker-mongodb-plants-db-user&#xA;                  key: connectionString.standardSrv&#xA;---&#xA;apiVersion: networking.k8s.io/v1&#xA;kind: Ingress&#xA;metadata:&#xA;  name: garden-tracker-ingress&#xA;  namespace: ngrok-ingress-controller&#xA;spec:&#xA;  ingressClassName: ngrok&#xA;  rules:&#xA;    - host: {YOUR_NGROK_DOMAIN}&#xA;      http:&#xA;        paths:&#xA;          - path: /&#xA;            pathType: Prefix&#xA;            backend:&#xA;              service:&#xA;                name: garden-tracker&#xA;                port:&#xA;                  number: 80&#xA;---&#xA;apiVersion: mongodbcommunity.mongodb.com/v1&#xA;kind: MongoDBCommunity&#xA;metadata:&#xA;  name: garden-tracker-mongodb&#xA;  namespace: ngrok-ingress-controller&#xA;spec:&#xA;  members: 1&#xA;  type: ReplicaSet&#xA;  version: &#34;6.0.5&#34;&#xA;  security:&#xA;  authentication:&#xA;    modes: [&#34;SCRAM&#34;]&#xA;  users:&#xA;    - name: db-user&#xA;      db: admin&#xA;      passwordSecretRef:&#xA;        name: db-user-password&#xA;      roles:&#xA;        - name: clusterAdmin&#xA;          db: admin&#xA;        - name: userAdminAnyDatabase&#xA;          db: admin&#xA;        - name: readWriteAnyDatabase&#xA;          db: admin&#xA;      scramCredentialsSecretName: my-scram&#xA;    - name: db-user&#xA;      db: plants&#xA;      passwordSecretRef:&#xA;        name: db-user-password&#xA;      roles:&#xA;        - name: readWrite&#xA;        db: plants&#xA;      scramCredentialsSecretName: my-scram&#xA;  additionalMongodConfig:&#xA;    storage.wiredTiger.engineConfig.journalCompressor: zlib&#xA;---&#xA;apiVersion: v1&#xA;kind: Secret&#xA;metadata:&#xA;  name: db-user-password&#xA;  namespace: ngrok-ingress-controller&#xA;type: Opaque&#xA;stringData:&#xA;  password: {YOUR_DB_PASSWORD}&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Apply the manifest you created using the above YAML with&amp;nbsp;&lt;code&gt;kubectl apply -f deployment.yaml&lt;/code&gt;. Cross your fingers and let the Kubernetes magic happen.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;wait-what-just-happened&#34;&gt;Wait… what just happened?&lt;a href=&#34;https://ngrok.com/blog-post/next-js-kubernetes-rancher#wait-what-just-happened&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the first Service definition, you’re telling Kubernetes to redirect all traffic arriving on port&amp;nbsp;&lt;code&gt;80&lt;/code&gt;&amp;nbsp;to pods running the&amp;nbsp;&lt;code&gt;garden-tracker&lt;/code&gt;&amp;nbsp;container, which runs on port&amp;nbsp;&lt;code&gt;3000&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Next, the Deployment for the&amp;nbsp;&lt;code&gt;garden-tracker&lt;/code&gt;&amp;nbsp;application pulls your image from ttl.sh and opens up port&amp;nbsp;&lt;code&gt;3000&lt;/code&gt;&amp;nbsp;to align with the Service. Remember&amp;nbsp;&lt;code&gt;MONGODB_URI&lt;/code&gt;&amp;nbsp;from before? Here is where it finally becomes relevant again. When you define a ReplicaSet, which happens later in the manifest, the MongoDB Community Operator initializes a Kubernetes secret with a&amp;nbsp;&lt;strong&gt;connection string&lt;/strong&gt;, like&amp;nbsp;&lt;code&gt;mongodb+srv://USER:PASSWORD@DB.SERVICE.NAMESPACE.svc.cluster.local:27017/COLLECTION?replicaSet=REPLICA_SET&amp;amp;ssl=false&lt;/code&gt;. You then pass that secret along to your garden tracker app as an environment variable, which the function in&amp;nbsp;&lt;code&gt;connect-db.ts&lt;/code&gt;&amp;nbsp;uses alongside Mongoose.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;...&#xA;env:&#xA;- name: MONGODB_URI&#xA;valueFrom:&#xA;  secretKeyRef:&#xA;  name: garden-tracker-mongodb-plants-db-user&#xA;  key: connectionString.standardSrv&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The section under&amp;nbsp;&lt;code&gt;kind: MongoDBCommunity&lt;/code&gt;&amp;nbsp;defines a ReplicaSet for creating one or more replicated pods running a MongoDB database. Because this is a locally-hosted demo,&amp;nbsp;&lt;code&gt;members: 1&lt;/code&gt;&amp;nbsp;specifies only one replica—if you were deploying to production, you would want to use 3 or more replicas. The configuration under&amp;nbsp;&lt;code&gt;users:&lt;/code&gt;&amp;nbsp;creates a new database user with the&amp;nbsp;&lt;code&gt;{YOUR_DB_PASSWORD}&lt;/code&gt;&amp;nbsp;you set earlier and grants it the necessary permissions to read and write to the&amp;nbsp;&lt;code&gt;plants&lt;/code&gt;&amp;nbsp;database.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The final 9 lines, which define the secret for&amp;nbsp;&lt;code&gt;{YOUR_DB_PASSWORD}&lt;/code&gt;, can be deleted after you apply this manifest for the first time, as it is only used during initialization.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;send-requests-to-your-api-via-ngrok-ingress&#34;&gt;Send requests to your API via ngrok ingress&lt;a href=&#34;https://ngrok.com/blog-post/next-js-kubernetes-rancher#send-requests-to-your-api-via-ngrok-ingress&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Your deployment is active and your API is ready to receive requests. Now, when you send any request to&amp;nbsp;&lt;code&gt;{YOUR_NGROK_DOMAIN}/apt/plants&lt;/code&gt;, ngrok’s cloud edge routes it through a secure tunnel to the ngrok Ingress Controller, which in turn routes it to the pod running your&amp;nbsp;&lt;code&gt;garden-tracker&lt;/code&gt;&amp;nbsp;application. You don’t need to configure any other middleware, service meshes, or complex networks to make your application, running on a&amp;nbsp;&lt;em&gt;local&lt;/em&gt;&amp;nbsp;cluster, available for public use.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Send a&amp;nbsp;&lt;code&gt;GET&lt;/code&gt;&amp;nbsp;request, and you’ll get a near-empty&amp;nbsp;&lt;code&gt;[]&lt;/code&gt;&amp;nbsp;in response, as your database has no documents—yet. Try creating a&amp;nbsp;&lt;code&gt;POST&lt;/code&gt;&amp;nbsp;request with the following&amp;nbsp;&lt;code&gt;body&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;{&#xA;  &#34;species&#34;: &#34;spinach&#34;,&#xA;  &#34;zone&#34;: &#34;garden bed #1, east&#34;,&#xA;  &#34;datePlanted&#34;: &#34;2023-10-26&#34;&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;And you’ll see a response like this:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;{&#xA;  &#34;message&#34;: &#34;Plant created successfully&#34;,&#xA;  &#34;success&#34;: true,&#xA;  &#34;savedPlant&#34;: {&#xA;    &#34;species&#34;: &#34;spinach&#34;,&#xA;    &#34;zone&#34;: &#34;garden bed #1, east&#34;,&#xA;    &#34;datePlanted&#34;: &#34;2023-10-26T00:00:00.000Z&#34;,&#xA;    &#34;_id&#34;: &#34;653ad5b4b1f1b02f1643da7e&#34;,&#xA;    &#34;__v&#34;: 0&#xA;  }&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Send that&amp;nbsp;&lt;code&gt;GET&lt;/code&gt;&amp;nbsp;request again to see your stored document:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;[&#xA;  {&#xA;    &#34;_id&#34;: &#34;653ad5b4b1f1b02f1643da7e&#34;,&#xA;    &#34;species&#34;: &#34;spinach&#34;,&#xA;    &#34;zone&#34;: &#34;garden bed #1, east&#34;,&#xA;    &#34;datePlanted&#34;: &#34;2023-10-26T00:00:00.000Z&#34;,&#xA;    &#34;__v&#34;: 0&#xA;  }&#xA;]&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Congratulations! Your hard work, at least from a development and operations perspective, is done. It is time to get your hands dirty, maybe with your loved ones, and create some database documents—I mean&amp;nbsp;&lt;strong&gt;memories&lt;/strong&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;whats-next&#34;&gt;What’s next?&lt;a href=&#34;https://ngrok.com/blog-post/next-js-kubernetes-rancher#whats-next&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The obvious next step is to develop a proper frontend for the garden tracker API, which lists existing documents, lets you create new documents, edit existing ones… and delete everything once summer comes around again and completely fries your hard work—or is that just me, writing from the Arizona desert?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;You could build the frontend in the same Next.js project by requesting the content of your database and using&amp;nbsp;&lt;code&gt;setState&lt;/code&gt;&amp;nbsp;to create an initial state. Altering said state with every additional request to keep the data synchronized with what’s happening in the database. Perhaps we’ll approach that phase in a future post.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For now, get inspired by how a similar React-based frontend works by checking the&amp;nbsp;&lt;a href=&#34;https://ngrok.com/blog-post/nodejs-crud-app-tutorial&#34;&gt;vinyl collection CRUD API&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;If you’re not keen on&amp;nbsp;&lt;em&gt;anyone&lt;/em&gt;&amp;nbsp;having public access to your garden tracker, you could&amp;nbsp;&lt;a href=&#34;https://ngrok.com/docs/http/oauth/?cty=k8s&#34;&gt;add authentication with OAuth&lt;/a&gt;, which allows you to set constraints, like allowing only specific email addresses to access the API, without you having to change a single additional line in your API or (future) frontend code.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Some additional content from our blog you might find useful:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://ngrok.com/blog-post/nodejs-crud-app-tutorial&#34;&gt;Build a CRUD app with Node.js&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;a href=&#34;https://ngrok.com/blog-post/kubernetes-ingress-hashicorp-consul&#34;&gt;Kubernetes Ingress with ngrok and HashiCorp Consul&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;a href=&#34;https://ngrok.com/blog-post/ngrok-k8s&#34;&gt;Introducing the ngrok Ingress Controller for Kubernetes&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We’d love to know what you loved learning from this project by pinging us on X (aka Twitter)&amp;nbsp;&lt;a href=&#34;https://twitter.com/ngrokHQ&#34;&gt;@ngrokhq&lt;/a&gt;&amp;nbsp;or&amp;nbsp;&lt;a href=&#34;https://www.linkedin.com/company/ngrok/&#34;&gt;LinkedIn&lt;/a&gt;, or&amp;nbsp;&lt;a href=&#34;https://ngrok.com/slack&#34;&gt;join our community on Slack&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;】&lt;p&gt;&lt;em&gt;成员帖子最初发布于 &lt;a href=&#34;https://ngrok.com/blog-post/next-js-kubernetes-rancher#build-an-api-in-nextjs-and-deploy- with-rancher&#34;&gt;ngrok 的博客&lt;/a&gt;，作者：Joel Hans&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;每年秋天，当亚利桑那州图森市的天气终于摆脱近乎难以忍受的炎热时，我的妻子再次爱上了花园。撕掉所有干番茄和失败的西瓜实验。翻转并改良土壤。挑选新种子。根据阳光和挑剔的灌溉系统仔细选择它们的位置。当播种的日子到来时，我们经常一家人一起做，我们的女儿们“帮忙”，而我和妻子则勤奋地播种行，并以适当的间距撒下确切数量的种子。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;然后我立即忘记哪些种子去了哪里。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;这个问题有更简单的非技术解决方案 - 例如，我可以绘制花园床的简单图表并列出其各自位置的所有植物 - 但我的一个女儿会发现并亵渎这一关键用蜡笔在一张纸上完成，只需几天甚至几个小时。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;一个更具吸引力、技术性和回报性的项目变得清晰：一个用于保存植物、位置及其播种/种植日期的 API，并与 Kubernetes 上高度持久的部署相结合。您可以跟随这个开发和部署项目，它有两个主要“章节”。首先，您将使用 &lt;a href=&#34;https://nextjs.org/&#34;&gt;Next.js&lt;/a&gt; 和 &lt;a href=&#34;https://www.mongodb.com/&#34;&gt;MongoDB 构建 API &lt;/a&gt;分别用于接收请求和保存数据。接下来，您将使用 &lt;a href=&#34;https://www.rancher.com/&#34;&gt;Rancher&lt;/a&gt; 来将此 API 部署到 Kubernetes，以进行集群管理和 &lt;a href=&#34;https://github。 com/ngrok/kubernetes-ingress-controller&#34;&gt;适用于 Kubernetes 的 ngrok 入口控制器&lt;/a&gt;，用于快速添加对花园跟踪 API 的公共访问。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;您还可以从 &lt;a href=&#34;https://github.com/ngrok-sa​​mples/nextjs-rancher-ngrok-api&#34;&gt;ngrok-sa​​mples/nextjs-rancher-ngrok-api&lt; 克隆 API 代码/a&gt; GitHub 上的存储库以进行后续操作和/或跳至部署。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;preventions&#34;&gt;先决条件&lt;a href=&#34;https://ngrok.com/blog-post/next-js-kubernetes-rancher#precessions&#34;&gt;&lt;/a&gt; &lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;虽然此项目的 API 章节仅需要本地工作站上的 Node.js，但通过 Rancher 部署到 Kubernetes 具有更复杂的先决条件，包括本地工作站之外的&lt;strong&gt;一个或多个虚拟 Linux 主机&lt;/strong&gt; ，作为 Kubernetes 节点运行。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;要配置和部署这些先决条件，请按照我们的&lt;a href=&#34;https://ngrok.com/docs/integrations/rancher/k8s/&#34;&gt;Ingress to Rancher 在 Kubernetes 中管理的应用程序&lt;/a&gt;安装指南进行安装Rancher 在本地工作站上创建 RKE2 集群并部署 ngrok Kubernetes入口控制器。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;chapter-1-build-a-rest-api-for-garden-tracking&#34;&gt;第 1 章：构建用于花园跟踪的 REST API&lt;a href=&#34;https: //ngrok.com/blog-post/next-js-kubernetes-rancher#chapter-1-build-a-rest-api-for-garden-tracking&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;您将在这个项目中使用 Next.js - 它在构建 API 路由的简单性和足够灵活之间取得了很好的平衡，您可以稍后在同一项目中使用共置代码构建前端 Web 应用程序。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;运行以下命令来初始化将在其中构建此项目的文件夹。第一个提示将要求您为项目命名（&lt;code&gt;garden-tracker&lt;/code&gt; 是一个不错的选择！），对于其余问题，请按 &lt;code&gt;Enter&lt;/code&gt; 选择默认值：很好。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;npx create-next-app@latest&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;create-a-mongodb-connector&#34;&gt;创建 MongoDB 连接器&lt;a href=&#34;https://ngrok.com/blog-post/next-js-kubernetes- rancher#create-a-mongodb-connector&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;您将使用 Mongoose 库，它提供了帮助程序函数，使使用 MongoDB 变得更加容易，因此请使用 &lt;code&gt;npm install mongoose&lt;/code&gt; 将该库添加到您的项目中。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;创建一个新的 &lt;code&gt;src/lib/&lt;/code&gt; 文件夹并向其中添加一个名为 &lt;code&gt;connect-db.ts&lt;/code&gt; 的文件。此函数选择使用缓存连接而不是创建新连接，并通过 &lt;code&gt;MONGODB_URI&lt;/code&gt; 环境变量进行连接。您现在无需担心此变量 - 一旦您最终准备好部署到 Kubernetes 集群，它就会重新发挥作用。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;从 &#39;mongoose&#39; 导入 Mongoose&#xA;&#xA;const { MONGODB_URI } = process.env&#xA;if (!MONGODB_URI) throw new Error(&#39;MONGODB_URI 未在环境中定义。&#39;)&#xA;&#xA;让缓存 = global.mongoose&#xA;if (!cached) 缓存 = global.mongoose = { conn: null }&#xA;&#xA;const connectMongo = async () =&gt; {&#xA;  if (cached.conn) 返回cached.conn&#xA;&#xA;  cached.conn = 等待 Mongoose.connect(MONGODB_URI)&#xA; &#xA;  返回缓存的.conn&#xA;}&#xA;&#xA;导出默认connectMongo&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;在项目的根目录中添加一个名为 &lt;code&gt;types.d.ts&lt;/code&gt; 的文件（如果尚不存在），以避免此数据库连接出现 TypeScript 错误。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;从 &#39;mongoose&#39; 导入 { Mongoose }&#xA;&#xA;&lt;em&gt;/* eslint-disable no-var */&lt;/em&gt;&#xA;&#xA;声明全局{&#xA;  var 猫鼬：{&#xA;    康涅狄格州： 猫鼬 |无效的;&#xA;  };&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;create-a-mongoose-schema&#34;&gt;创建 Mongoose 模式&lt;a href=&#34;https://ngrok.com/blog-post/next-js-kubernetes- rancher#create-a-mongoose-schema&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;A &lt;a href=&#34;https://mongoosejs.com/docs/guide.html#definition&#34;&gt;Mongoose schema&lt;/a&gt; 定义 MongoDB 将如何存储您最终创建的有关花园植物的文档。这个想法类似于o 类型安全 - 如果您使用不符合此架构的数据查询 API，MongoDB 将完全拒绝请求（例如&lt;code&gt;species&lt;/code&gt; 的值缺失），或者忽略其他键等内容。&lt; /p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;TypeScript 可以“借用”此架构来实现类型安全，从而防止您无意中将任何变量的类型从&lt;code&gt;数字&lt;/code&gt;更改为&lt;code&gt;字符串&lt;/code&gt;，例如，可能会导致代码中出现意外且通常难以发现的错误。当您在 TypeScript 代码中实例化新变量或对象时，还必须指定其类型。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;在 &lt;code&gt;src/models/&lt;/code&gt; 文件夹中为新架构创建一个名为 &lt;code&gt;Plants.ts&lt;/code&gt; 的新文件，该文件指定三个键并需要 &lt;code&gt;species&lt;/ code&gt; 键，通常用于命名您的文档。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;从 &#39;mongoose&#39; 导入 { models, model, Schema }&#xA;&#xA;const PlantSchema：架构 = 新架构（{&#xA;  物种： {&#xA;    类型：字符串，&#xA;    要求：真实，&#xA;  },&#xA;  区域：{&#xA;    类型：字符串，&#xA;  },&#xA;  种植日期：{&#xA;    类型：日期，&#xA;  }&#xA;})&#xA;&#xA;const Plant = models.Plant ||模型（&#39;植物&#39;，PlantSchema）&#xA;&#xA;导出默认植物&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;add-routes-for-your-crud-api-with-nextjs-route-handlers&#34;&gt;使用 Next.js 路由处理程序为您的 CRUD API 添加路由&lt;a href =&#34;https://ngrok.com/blog-post/next-js-kubernetes-rancher#add-routes-for-your-crud-api-with-nextjs-route-handlers&#34;&gt;&lt;/a&gt;&lt;/h3 &gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;在 Next.js 13 中，&lt;a href=&#34;https://nextjs.org/docs/app/building-your-application/routing/route-handlers&#34;&gt;路由处理程序&lt;/a&gt;可让您创建自定义任何路线的请求处理程序。 Next.js 读取 &lt;code&gt;app&lt;/code&gt; 目录内的任何 &lt;code&gt;route.js|ts&lt;/code&gt; 文件作为路由处理程序，并且由于 Next.js 使用基于文件夹的路由，因此您需要创建一个 &lt;code&gt;src/app/api/plants/&lt;/code&gt; 文件夹结构，并在其中创建一个新的 &lt;code&gt;routes.ts&lt;/code&gt;。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;首先，您需要引入 &lt;a href=&#34;https://nextjs.org/docs/pages/api-reference/functions/next-server&#34;&gt;NextResponse&lt;/a&gt; 中间件函数，您的MongoDB 连接器库和您的 Mongoose 模型。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;从 &#39;next/server&#39; 导入 { NextResponse }&#xA;从 &#39;@/lib/connect-db&#39; 导入 connectMongo&#xA;从“@/models/Plants”导入植物&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;接下来，您可以使用处理函数定义您的第一个 API 路由，该处理函数在 &lt;code&gt;/api/plants&lt;/code&gt; 处接收 &lt;code&gt;POST&lt;/code&gt; 请求，并使用该请求的数据。此函数通过 Mongoose 打开与数据库的连接，保存新文档，并以成功消息响应。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;导出异步函数 POST(request: Request) {&#xA;  尝试 {&#xA;    const data = 等待 request.json()&#xA;&#xA;    等待 connectMongo()&#xA;&#xA;    常量保存dPlant = 等待新 Plant(data).save()&#xA;&#xA;    返回 Response.json({&#xA;      &#34;message&#34;: &#34;植物创建成功&#34;,&#xA;      “成功”：真实，&#xA;      保存植物&#xA;    })&#xA;  } 捕获（错误）{&#xA;    return Response.json({ error: `内部服务器错误: ${err}` }, { status: 500 })&#xA;  }&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;下一个处理函数用于处理 &lt;code&gt;GET&lt;/code&gt; 请求，该请求会使用已以 JSON 形式保存到数据库的所有文档进行响应。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;导出异步函数 GET() {&#xA;  尝试 {&#xA;    等待 connectMongo()&#xA;&#xA;    const res = 等待 Plant.find({})&#xA;&#xA;    返回 Response.json(res)&#xA;  } 捕获（错误）{&#xA;    return Response.json({ error: `内部服务器错误: ${err}` }, { status: 500 })&#xA;  }&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;CRUD API 中的下一个请求是&lt;strong&gt;更新&lt;/strong&gt;，它使用处理函数来响应 &lt;code&gt;PUT&lt;/code&gt; 请求，该请求将工厂的 &lt;code&gt;_id&lt;/code&gt; 传递为路线段的一部分，例如 &lt;code&gt;/api/plants/6539310ebc18ad2f04ed30f9&lt;/code&gt;。 Next.js 使该段在请求的 &lt;code&gt;params&lt;/code&gt; 中可用，然后以下函数使用 Mongoose 的 &lt;code&gt;findByItAndUpdate&lt;/code&gt; 函数来查找文档并更新其内容。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;这需要一个新的 Next.js &lt;a href=&#34;https://nextjs.org/docs/app/building-your-application/routing/route-handlers#dynamic-route-segments&#34;&gt;动态路线段&lt; /a&gt;.在现有的 &lt;code&gt;api/plants/&lt;/code&gt; 层次结构中创建一个名为 &lt;code&gt;[_id]&lt;/code&gt; 的新文件夹，然后为接下来的两个文件创建另一个 &lt;code&gt;route.ts&lt;/code&gt; 文件功能。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;导出异步函数 PUT(&#xA;    请求：请求，&#xA;    { 参数 }: { 参数: { _id: 字符串 } }&#xA;  ）{&#xA;  尝试 {&#xA;    等待 connectMongo()&#xA;    const data = 等待 request.json()&#xA;&#xA;    const UpdatedPlant =等待 Plant.findByIdAndUpdate(params._id, data, { new: true })&#xA;&#xA;    返回 Response.json({&#xA;      &#34;message&#34;: `工厂 ${params._id} 更新成功`,&#xA;      “成功”：真实，&#xA;      更新工厂&#xA;    })&#xA;  } 捕获（错误）{&#xA;    return Response.json({ error: `内部服务器错误: ${err}` }, { status: 500 })&#xA;  }&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;最后，您可能想从数据库中删除植物。此函数处理程序通过使用 &lt;code&gt;findByIdAndRemove&lt;/code&gt; 函数响应 &lt;code&gt;DELETE&lt;/code&gt; 请求，从路由路径中删除相关文档（带有 &lt;code&gt;_id&lt;/code&gt;）。数据库。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;导出异步函数 DELETE(&#xA;  请求：请求，&#xA;  { 参数 }: { 参数: { _id: 字符串 } }&#xA;）{&#xA;  尝试 {&#xA;    等待 connectMongo()&#xA;&#xA;    等待 Plant.findByIdAndRemove(params._id)&#xA;&#xA;    返回 Response.json({&#xA;      &#34;message&#34;: `工厂 ${params._id} 已删除`&#xA;    })&#xA;  } 捕获（错误）{&#xA;    return Response.json({ error: `内部服务器错误: ${err}` }, { status: 500 })&#xA;  }&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;您现在有了一个 Next.js-b用于在 MongoDB 数据库中创建、读取、更新和删除您花园中种植的文档的 API。您可以开始为新 API 构建前端，或者使用 &lt;code&gt;npm run dev&lt;/code&gt; 在本地测试/部署，但您将直接跳到部署到 Kubernetes 集群。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;containerize-your-nextjs-api&#34;&gt;容器化您的 Next.js API&lt;a href=&#34;https://ngrok.com/blog-post/next-js- kubernetes-rancher#containerize-your-nextjs-api&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;由于 Kubernetes 是一个容器编排器，因此您必须将 API 代码与正确的环境和依赖项一起打包。使用以下代码创建一个新的 &lt;code&gt;Dockerfile&lt;/code&gt;，该代码使用 &lt;code&gt;npm build&lt;/code&gt; 构建您的花园跟踪器项目。然后，Docker 将生产就绪资产复制到映像中，该映像会公开端口 &lt;code&gt;3000&lt;/code&gt; 并运行 &lt;code&gt;npm start&lt;/code&gt; 以在 Kubernetes 初始化 Pod 中的映像+容器时启动服务器。&lt; /p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;来自节点：18-alpine AS 构建&#xA;&#xA;工作目录/应用程序&#xA;复制包*.json ./&#xA;运行 npm ci&#xA;复制 。 。&#xA;RUN npm 运行构建&#xA;&#xA;FROM节点：18-alpine AS运行时&#xA;&#xA;工作目录/应用程序&#xA;复制包*.json ./&#xA;RUN npm ci &lt;em&gt;--only=生产&lt;/em&gt;&#xA;复制 &lt;em&gt;--from=build /app/.next ./.next&lt;/em&gt;&#xA;复制 &lt;em&gt;--from=build /app/public ./public&lt;/em&gt;&#xA;&#xA;曝光 3000&#xA;用户节点&#xA;CMD [“npm”，“开始”]&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;默认情况下，Kubernetes 希望在现有的公共或&lt;a href=&#34;https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/&#34;&gt;私有容器中查找容器图像注册表&lt;/a&gt;。您当然可以将容器推送到这些注册表之一并相应地配置 Kubernetes 集群。不过，为了进行本实验，您将把容器上传到 &lt;a href=&#34;https://ttl.sh/&#34;&gt;ttl.sh&lt;/a&gt;（一个临时 Docker 映像注册表）。稍后，您将配置部署以提取此临时映像，您的集群将缓存该映像，以防您需要重建运行此映像的 pod。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;为您的容器创建一个 UUID，并用 &lt;code&gt;1h&lt;/code&gt; 标记它，这会告诉 ttl.sh 一小时后删除您的映像。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;IMAGE_NAME=$(uuidgen)&#xA;docker build -t ttl.sh/${IMAGE_NAME}:1h 。                               &#xA;docker Push ttl.sh/${IMAGE_NAME}:1h&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;记下&lt;code&gt;docker推送&lt;/code&gt;的输出，特别是第一行（&lt;code&gt;推送引用存储库[ttl.sh/IMAGE_NAME]&lt;/code&gt;，因为它将通知您稍后将创建 Kubernetes 清单。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;chapter-2-deploy-your-garden-tracker-to-kubernetes&#34;&gt;第 2 章：将花园跟踪器部署到 Kubernetes&lt;a href=&#34;https://ngrok .com/blog-post/next-js-kubernetes-rancher#chapter-2-deploy-your-garden-tracker-to-kubernetes&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;该项目的 API 端已完成，但您仍需要部署它。假设你有 fo通过我们的&lt;a href=&#34;https://ngrok.com/docs/integrations/rancher/k8s/&#34;&gt;Kubernetes 中 Rancher 管理的应用程序入口&lt;/a&gt;指南创建新集群并安装 ngrok Ingress Controller有了 Rancher，您就可以开始行动了。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;launch-mongodb-on-your-cluster&#34;&gt;在集群上启动 MongoDB&lt;a href=&#34;https://ngrok.com/blog-post/next-js -kubernetes-rancher#launch-mongodb-on-your-cluster&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;持久卷在 Kubernetes 中可能会很麻烦，尤其是在本地集群上工作时，因此您将利用 Rancher 开发的名为 &lt;a href=&#34;https://github.com/rancher/local- path-provisioner&#34;&gt;本地路径配置器&lt;/a&gt;，用于启用动态、持久的本地存储。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;&#xA;kubectl apply -f https://raw.githubusercontent.com/rancher/local-path-provisioner/v0.0.24/deploy/local-path-storage.yaml&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;此配置程序不需要更多配置，因此是时候在集群上安装 MongoDB，Rancher 可以完全通过其仪表板进行处理。在所述仪表板中，点击&lt;strong&gt;应用&lt;/strong&gt;→&lt;strong&gt;图表&lt;/strong&gt;，然后搜索&lt;strong&gt;MongoDB Community Operator&lt;/strong&gt;。点击该框，然后点击&lt;strong&gt;安装&lt;/strong&gt;，确保在完成安装之前将 Operator 添加到现有的 &lt;code&gt;ngrok-ingress-controller&lt;/code&gt; 命名空间中。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;create-a-kubernetes-manifest-for-your-deployment&#34;&gt;为您的部署创建 Kubernetes 清单&lt;a href=&#34;https://ngrok.com/blog -post/next-js-kubernetes-rancher#create-a-kubernetes-manifest-for-your-deployment&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;您终于到达了关键时刻：是时候将花园跟踪器 API 部署到 Kubernetes 集群了！最简单的方法是使用包含以下内容的单个 &lt;code&gt;deployment.yaml&lt;/code&gt; 清单。您需要更改三个属性：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;code&gt;{YOUR_NGROK_DOMAIN}&lt;/code&gt;：您在 &lt;a href=&#34;https://ngrok.com/docs/integrations/rancher/k8s/&#34;&gt;Rancher 管理的应用程序入口中创建的 ngrok 子域在 Kubernetes&lt;/a&gt; 指南中。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;code&gt;{YOUR_IMAGE_UUID}&lt;/code&gt;：构建容器并将其推送到 ttl.sh 时创建的 UUID。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;code&gt;{YOUR_DB_PASSWORD}&lt;/code&gt;：您选择的新密码，MongoDB 操作员用它来初始化您的数据库&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;  用户的凭据。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;api版本：v1&#xA;种类： 服务&#xA;元数据：&#xA;  名称：花园追踪器&#xA;  命名空间：ngrok-ingress-controller&#xA;规格：&#xA;  端口：&#xA;    - 名称：http&#xA;    端口：80&#xA;    目标端口：3000&#xA;  选择器：&#xA;  应用程序：花园追踪器&#xA;---&#xA;api版本：apps/v1&#xA;种类：部署&#xA;元数据：&#xA;  名称：花园追踪器&#xA;  命名空间：ngrok-ingress-controller&#xA;规格：&#xA;  副本：1&#xA;  选择器：&#xA;    匹配标签s:&#xA;      应用程序：花园追踪器&#xA;  模板：&#xA;    元数据：&#xA;      标签：&#xA;        应用程序：花园追踪器&#xA;    规格：&#xA;      容器：&#xA;        - 名称：API&#xA;          图片：ttl.sh/{YOUR_IMAGE_UUID}:1h&#xA;          端口：&#xA;            - 名称：http&#xA;              集装箱端口：3000&#xA;          环境：&#xA;            - 名称：MONGODB_URI&#xA;              值来自：&#xA;                秘密密钥参考：&#xA;                  名称：花园追踪器-mongodb-plants-db-user&#xA;                  键：connectionString.standardSrv&#xA;---&#xA;api版本：networking.k8s.io/v1&#xA;种类: 入口&#xA;元数据：&#xA;  名称：花园追踪器入口&#xA;  命名空间：ngrok-ingress-controller&#xA;规格：&#xA;  ingressClassName：ngrok&#xA;  规则：&#xA;    - 主机：{YOUR_NGROK_DOMAIN}&#xA;      http：&#xA;        路径：&#xA;          - 小路： /&#xA;            路径类型：前缀&#xA;            后端：&#xA;              服务：&#xA;                名称：花园追踪器&#xA;                港口：&#xA;                  数量：80&#xA;---&#xA;api版本：mongodbcommunity.mongodb.com/v1&#xA;种类：MongoDB社区&#xA;元数据：&#xA;  名称：花园追踪器-mongodb&#xA;  命名空间：ngrok-ingress-controller&#xA;规格：&#xA;  成员：1&#xA;  类型：副本集&#xA;  版本：“6.0.5”&#xA;  安全：&#xA;  验证：&#xA;    模式：[“SCRAM”]&#xA;  用户：&#xA;    - 名称：数据库用户&#xA;      数据库：管理员&#xA;      密码SecretRef：&#xA;        名称： 数据库用户密码&#xA;      角色：&#xA;        - 名称：集群管理员&#xA;          数据库：管理员&#xA;        - 名称：userAdminAnyDatabase&#xA;          数据库：管理员&#xA;        - 名称：readWriteAnyDatabase&#xA;          数据库：管理员&#xA;      scramCredentialsSecretName：my-scram&#xA;    - 名称：数据库用户&#xA;      数据库：植物&#xA;      密码SecretRef:&#xA;        名称： 数据库用户密码&#xA;      角色：&#xA;        - 名称：读写&#xA;        数据库：植物&#xA;      scramCredentialsSecretName：my-scram&#xA;  附加Mongod配置：&#xA;    storage.wiredTiger.engineConfig.journalCompressor：zlib&#xA;---&#xA;api版本：v1&#xA;种类：秘密&#xA;元数据：&#xA;  名称： 数据库用户密码&#xA;  命名空间：ngrok-ingress-controller&#xA;类型: 不透明&#xA;字符串数据：&#xA;  密码：{YOUR_DB_PASSWORD}&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;通过 &lt;code&gt;kubectl apply -f deployment.yaml&lt;/code&gt; 应用您使用上述 YAML 创建的清单。祈祷吧，让 Kubernetes 的魔法发生吧。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;wait-what-just-happened&#34;&gt;等等...刚刚发生了什么？&lt;a href=&#34;https://ngrok.com/blog-post/next-js- kubernetes-rancher#wait-what-just-happened&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;在第一个服务定义中，您告诉 Kubernetes 将到达端口 &lt;code&gt;80&lt;/code&gt; 的所有流量重定向到运行 &lt;code&gt;garden-tracker&lt;/code&gt; 容器的 Pod，该容器在端口 &lt;代码&gt;3000&lt;/code&gt;。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;接下来，&lt;code&gt;garden-tracker&lt;/code&gt; 应用程序的部署会从 ttl.sh 中提取您的映像，并打开端口 &lt;code&gt;3000&lt;/code&gt; 以与服务保持一致。还记得之前的&lt;code&gt;MONGODB_URI&lt;/code&gt;吗？这就是它最终再次变得重要的地方。当您定义 ReplicaSet 时（稍后会在清单中发生），MongoDB Community Operator 将使用&lt;strong&gt;连接字符串&lt;/s 初始化 Kubernetes 密钥trong&gt;，例如 &lt;code&gt;mongodb+srv://USER:PASSWORD@DB.SERVICE.NAMESPACE.svc.cluster.local:27017/COLLECTION?replicaSet=REPLICA_SET&amp;ssl=false&lt;/code&gt;。然后，您将该秘密作为环境变量传递给您的花园跟踪器应用，&lt;code&gt;connect-db.ts&lt;/code&gt; 中的函数与 Mongoose 一起使用。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;...&#xA;环境：&#xA;- 名称：MONGODB_URI&#xA;值来自：&#xA;  秘密密钥参考：&#xA;  名称：花园追踪器-mongodb-plants-db-user&#xA;  键：connectionString.standardSrv&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;code&gt;kind: MongoDBCommunity&lt;/code&gt; 下的部分定义了一个 ReplicaSet，用于创建一个或多个运行 MongoDB 数据库的复制 Pod。由于这是本地托管的演示，&lt;code&gt;members: 1&lt;/code&gt; 仅指定一个副本 - 如果您要部署到生产环境，则需要使用 3 个或更多副本。 &lt;code&gt;users:&lt;/code&gt; 下的配置使用您之前设置的 &lt;code&gt;{YOUR_DB_PASSWORD}&lt;/code&gt; 创建一个新的数据库用户，并授予其读取和写入&lt;code&gt;plants&lt;/code&gt;所需的权限。代码&gt; 数据库。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;最后 9 行定义了 &lt;code&gt;{YOUR_DB_PASSWORD}&lt;/code&gt; 的密码，在您首次应用此清单后可以将其删除，因为它仅在初始化期间使用。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;send-requests-to-your-api-via-ngrok-ingress&#34;&gt;通过 ngrok ingress 向您的 API 发送请求&lt;a href=&#34;https://ngrok. com/blog-post/next-js-kubernetes-rancher#send-requests-to-your-api-via-ngrok-ingress&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;您的部署已激活，您的 API 已准备好接收请求。现在，当您向 &lt;code&gt;{YOUR_NGROK_DOMAIN}/apt/plants&lt;/code&gt; 发送任何请求时，ngrok 的云边缘会将其通过安全隧道路由到 ngrok Ingress Controller，后者又将其路由到运行您的 &lt;code&gt; 的 Pod &gt;花园追踪器&lt;/code&gt; 应用程序。您无需配置任何其他中间件、服务网格或复杂网络即可使在本地集群上运行的应用程序可供公众使用。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;发送 &lt;code&gt;GET&lt;/code&gt; 请求，您将收到几乎为空的 &lt;code&gt;[]&lt;/code&gt; 响应，因为您的数据库还没有文档。尝试使用以下&lt;code&gt;正文&lt;/code&gt;创建&lt;code&gt;POST&lt;/code&gt;请求：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;{&#xA;  “种类”：“菠菜”，&#xA;  &#34;zone&#34;: &#34;花园床#1，东&#34;,&#xA;  “种植日期”：“2023-10-26”&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;您会看到如下响应：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;{&#xA;  &#34;message&#34;: &#34;植物创建成功&#34;,&#xA;  “成功”：真实，&#xA;  “保存的植物”：{&#xA;    “种类”：“菠菜”，&#xA;    &#34;zone&#34;: &#34;花园床#1，东&#34;,&#xA;    &#34;种植日期&#34;: &#34;2023-10-26T00:00:00.000Z&#34;,&#xA;    “_id”：“653ad5b4b1f1b02f1643da7e”，&#xA;    “__v”：0&#xA;  }&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;再次发送 &lt;code&gt;GET&lt;/code&gt; 请求以查看您存储的文档：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;[&#xA;  {&#xA;    “_id”：“653ad5b4b1f1b02f1643da7e”，&#xA;    “种类”：“菠菜”，&#xA;    &#34;zone&#34;: &#34;花园床#1，东&#34;,&#xA;    &#34;种植日期&#34;: &#34;2023-10-26T00:00:00.000Z&#34;,&#xA;    “__v”：0&#xA;  }&#xA;]&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;恭喜！您的辛勤工作（至少从开发和运营的角度来看）已经完成。是时候与您所爱的人一起动手创建一些数据库文档了——我的意思是&lt;strong&gt;回忆&lt;/strong&gt;。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;whats-next&#34;&gt;下一步是什么？&lt;a href=&#34;https://ngrok.com/blog-post/next-js-kubernetes-rancher#whats-next &#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;显然，下一步是为花园跟踪器 API 开发一个合适的前端，它列出现有文档，让您创建新文档、编辑现有文档……并在夏天再次到来时删除所有内容，彻底毁掉您的辛勤工作，或者这是我在亚利桑那州沙漠写的吗？&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;您可以通过请求数据库内容并使用 &lt;code&gt;setState&lt;/code&gt; 创建初始状态，在同一个 Next.js 项目中构建前端。根据每个附加请求更改所述状态，以保持数据与数据库中发生的情况同步。也许我们会在以后的文章中讨论这个阶段。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;现在，通过查看&lt;a href=&#34;https://ngrok.com/blog-post/nodejs-crud-app-tutorial&#34;&gt;vinyl collection CRUD API，从类似的基于 React 的前端的工作原理中获得灵感&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;如果您不希望任何人公开访问您的花园追踪器，您可以&lt;a href=&#34;https://ngrok.com/docs/http/oauth/?cty= k8s&#34;&gt;使用 OAuth 添加身份验证&lt;/a&gt;，它允许您设置限制，例如仅允许特定的电子邮件地址访问 API，而无需更改 API 或（未来的）前端代码中的任何附加行。&lt; /p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;我们博客中的一些其他内容可能对您有用：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://ngrok.com/blog-post/nodejs-crud-app-tutorial&#34;&gt;使用 Node.js 构建 CRUD 应用&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;a href=&#34;https://ngrok.com/blog-post/kubernetes-ingress-hashicorp-consul&#34;&gt;Kubernetes Ingress 与 ngrok 和 HashiCorp Consul&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;a href=&#34;https://ngrok.com/blog-post/ngrok-k8s&#34;&gt;介绍适用于 Kubernetes 的 ngrok 入口控制器&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;我们很想知道您喜欢从这个项目中学到什么，请通过 X（又名 Twitter）&lt;a href=&#34;https://twitter.com/ngrokHQ&#34;&gt;@ngrokhq&lt;/a&gt; 或 &lt;a href=&#34;https://www.linkedin.com/company/ngrok/&#34;&gt;LinkedIn&lt;/a&gt;，或&lt;a href=&#34;https://ngrok.com/slack&#34;&gt;加入我们的 Slack 社区&lt;/a &gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;</description>
      <pubDate>Sun, 18 Aug 2024 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Ambient mesh: can sidecar-less Istio make your application faster?】环境网格：无 sidecar 的 Istio 能让您的应用程序更快吗？</title>
      <link>https://www.cncf.io/blog/2024/08/23/ambient-mesh-can-sidecar-less-istio-make-your-application-faster/</link>
      <description>【&lt;p&gt;&lt;em&gt;Community post originally published on &lt;a href=&#34;https://thenewstack.io/ambient-mesh-can-sidecar-less-istio-make-applications-faster/&#34;&gt;The New Stack &lt;/a&gt;by Lin Sun&lt;/em&gt;, &lt;em&gt;Head of Open Source at Solo.io&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Ambient mode is the new sidecar-less data plane introduced in Istio in 2022. When ambient mode reached &lt;a href=&#34;https://istio.io/latest/blog/2024/ambient-reaches-beta/&#34;&gt;Beta&lt;/a&gt; status in May this year, I started to see lots of users kicking the tires and running load tests to understand the performance implications after adding their applications to the mesh.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Inspired by &lt;a href=&#34;https://a-cup-of.coffee/blog/istio/#with-istio-ambient&#34;&gt;Quentin Joly’s blog&lt;/a&gt; about the incredible performance of Istio in ambient mode and similar feedback from other users in the community that sometimes applications are slightly faster in ambient mode, I decided to validate these results myself.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;Test environment:&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I used a 3 worker node Kubernetes cluster with 256GB RAM &amp;amp; 32 core CPU each node.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXfS50HjjsJiBqlv30JKgaaTJcmUq0hHcG3xNl42Yzd7E0FfKPAe0gI3tnNAx0gpud0LGfHkdI7cbTXJyzU5v46v-kucl-2_l7Lax0-kvCeG19mST3ToJdIu6r5u7BoYkAGVc14HnRyVlnX9TY_Ra9NilKQ?key=7Xu51UOF6Vd1czS7dgW7gA&#34; alt=&#34;Image&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Istio uses a few tools to make consistent benchmarking easy.&amp;nbsp; First, we use a load testing tool called &lt;a href=&#34;https://github.com/fortio/fortio&#34;&gt;fortio&lt;/a&gt;, which runs at a specified requests per second (RPS), records a histogram of execution time and calculates percentiles — e.g., P99, the response time where 99% of the requests took less than that number.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We also provide a sample app called &lt;a href=&#34;https://istio.io/latest/docs/examples/bookinfo/&#34;&gt;Bookinfo&lt;/a&gt;, which includes microservices written in Python, Java, Node.js and Ruby.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Each of the Bookinfo deployments has 2 replicas, which are evenly distributed to the 3 worker nodes. Using a &lt;a href=&#34;https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity&#34;&gt;pod anti-affinity rule&lt;/a&gt;, I made sure that fortio was placed on a different node than the &lt;a href=&#34;https://github.com/istio/istio/tree/master/samples/bookinfo/src/details&#34;&gt;details&lt;/a&gt; service.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;Initial Test Result&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I installed the Bookinfo application from the Istio v1.22.3 release. Using the fortio tool to drive load to individual Bookinfo services (for example, details) or the full Bookinfo app, I noticed &lt;strong&gt;near-zero latency impact &lt;/strong&gt;after adding everything to the ambient mesh. Most of the time they are within the range of 0-5% increase for the average or P90. I have noticed consistently that the details service in Istio ambient mode is slightly faster, just like Quentin reported in his blog.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;Load testing the details service&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I did the same test as Quentin, sending 100 RPS via 10 connections to the details service, and collected results for no mesh and ambient.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXfc1vCggIDlIXmGqt-ac1pUzDPHZd2feGf-TvJRpQu-nmCwXGVliCE8nB2CT_wkVMPibKKFOtjAQ1aj5zxQ-ivUQj74JFEtVZGwioAYbKLsLeuADG6dhTsvMqaYCvtZk3XlYHTFop6gc-z3zysDhyTrekuU?key=7Xu51UOF6Vd1czS7dgW7gA&#34; alt=&#34;No Mesh: 100 RPS to the details service&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;No Mesh: 100 RPS to the details service&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXdIB88W4APYre6YtZPZ90pRKvuoAFO05xhIaFXL50Y1PzD6LmZ0SoBTdgc6SMZSBar8LaNi5uWzDMA18_pEUZ9W_r1kiyiz9WwtcHMQQMkC6i4avrYLdsMlY8wGFc0FwEUR9VUvy-GSeaUJhAI8HK_fgJXB?key=7Xu51UOF6Vd1czS7dgW7gA&#34; alt=&#34;Image&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Ambient: 100 RPS to the details service&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Just like Quentin, I had to run multiple tests to validate that ambient mode is slightly more performant than no mesh — which is very hard to believe! In the case of the Bookinfo details service, adding ambient mode improved latencies by 6-11% on average – as well as adding mTLS and L4 observability!&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-table&#34;&gt;&lt;table class=&#34;has-fixed-layout&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Fortio to &lt;/strong&gt;&lt;strong&gt;details&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;Average&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P50&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P75&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P90&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P99&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;Differences&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;No Mesh run 1&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;0.89ms&lt;/td&gt;&lt;td&gt;0.64ms&lt;/td&gt;&lt;td&gt;0.74ms&lt;/td&gt;&lt;td&gt;0.85ms&lt;/td&gt;&lt;td&gt;2.67ms&lt;/td&gt;&lt;td&gt;&lt;strong&gt;11% slower on average and 5% slower for P90&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Ambient run 1&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;0.80ms&lt;/td&gt;&lt;td&gt;0.6ms&lt;/td&gt;&lt;td&gt;0.71ms&lt;/td&gt;&lt;td&gt;0.81ms&lt;/td&gt;&lt;td&gt;1.4ms&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;No Mesh run 2&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;0.86ms&lt;/td&gt;&lt;td&gt;0.65ms&lt;/td&gt;&lt;td&gt;0.75ms&lt;/td&gt;&lt;td&gt;0.86ms&lt;/td&gt;&lt;td&gt;1.71ms&lt;/td&gt;&lt;td&gt;&lt;strong&gt;6% slower on average and 4% slower for P90&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Ambient run 2&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;0.81ms&lt;/td&gt;&lt;td&gt;0.61ms&lt;/td&gt;&lt;td&gt;0.72ms&lt;/td&gt;&lt;td&gt;0.83ms&lt;/td&gt;&lt;td&gt;1.56ms&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;No Mesh run 3&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;0.90ms&lt;/td&gt;&lt;td&gt;0.65ms&lt;/td&gt;&lt;td&gt;0.76ms&lt;/td&gt;&lt;td&gt;0.88ms&lt;/td&gt;&lt;td&gt;1.92ms&lt;/td&gt;&lt;td&gt;&lt;strong&gt;10% slower on average and 5% slower for P90&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Ambient run 3&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;0.82ms&lt;/td&gt;&lt;td&gt;0.63ms&lt;/td&gt;&lt;td&gt;0.72ms&lt;/td&gt;&lt;td&gt;0.84ms&lt;/td&gt;&lt;td&gt;1.5ms&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Table 1: Fortio to the details service 100 RPS 10 connections&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;Why are apps sometimes faster in the ambient mesh?&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We’ve been taught that service meshes add latency. Quentin’s results, replicated here, show a case where a workload is &lt;em&gt;faster&lt;/em&gt; when running through a service mesh. What is happening?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;First theory&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;When your applications are in the ambient mesh, the load requests travel first through a lightweight local node proxy called &lt;a href=&#34;https://istio.io/latest/docs/ambient/overview/#ztunnel&#34;&gt;ztunnel&lt;/a&gt;, then to the destination ztunnel, and onward to the service. The details service is using HTTP/1.1 with the Webrick library in Ruby and we have seen poor connection management and keep-alive behaviors in older or poorly configured HTTP libraries. My first hypothesis was that when the client and server are on different nodes, proxying through client and server ztunnels could actually be faster if the applications are not using efficient HTTP/2 connections. Ztunnel uses connection pooling and &lt;a href=&#34;https://en.wikipedia.org/wiki/HTTP_tunnel&#34;&gt;HTTP Connect&lt;/a&gt; to establish secure tunnels between nodes to leverage parallelism and HTTP/2 stream multiplexing under loads.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXdkVHCotSRWKoih2aQLCioo38lsv_PtQFILzTPQvVd3vZYFY5VKaIoVPH_VWLeLla9yZGZBhiTo5H1wH-O3EApb2RvUjM-A3Q5k8B9ffCIoN12sRL8UG_FMLIhxti0iZaYXWu7dttoiubPD0GyDyKDcGmE?key=7Xu51UOF6Vd1czS7dgW7gA&#34; alt=&#34;Image&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;However, this theory has some challenges. Why have I only observed this consistently with the details service but not any other Bookinfo services?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Researching further, I discovered that our fortio load tool has &lt;a href=&#34;https://github.com/fortio/fortio/blob/8a7d9112667e637139c788b68cb063f456d20cb4/bincommon/commonflags.go#L55&#34;&gt;connection keep-alive enabled by default&lt;/a&gt;. With 10 connections from fortio to the details service and the details service (using the WEBrick Ruby library) respects the connection keep-alive settings, the connections can be reused effectively without ambient.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;Load testing with connection close&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Next, I explored running the same load testing with setting the `Connection: close` header. This forcibly disables any HTTP connection pooling which is a good way to test this hypothesis.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;curl -v -d &#39;{&#34;metadata&#34;: {&#34;url&#34;:&#34;http://details:9080/details/0&#34;, &#34;c&#34;:&#34;10&#34;, &#34;qps&#34;: &#34;100&#34;, &#34;n&#34;: &#34;2000&#34;, &#34;async&#34;:&#34;on&#34;, &#34;save&#34;:&#34;on&#34;}}&#39; &#34;localhost:8081/fortio/rest/run?jsonPath=.metadata&#34; -H &#34;Connection: close&#34;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXfc-HDPourI5Dwlo3n-jkc5TMiqJdm0k0oSb1Z4HZkKIkVgCKKFyJbBv6fp40pS6XwTOrrUvYSYfmL7M6Dqu7ZdBSiJYvXo-O7f4weYTsuQHarX3uit-jQEL4HlWiwNc7PEFPS1DQgm6csv5FhdMhXxUUc?key=7Xu51UOF6Vd1czS7dgW7gA&#34; alt=&#34;Image&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;No Mesh: Fortio to the details service 100 RPS 10 connections with connection close&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXfBoHXMf2xaXMboBVCNYNmDBkoFIdefso_IbfLft83aStyTTcm4yOAv3zkEwUtddn1gnFZgT9tf_Z0S494iE6TliMgHFuv24TnEMEddXsFtk2JcS41jUZhTTvAljd9bDA25AGqyjKlt_ZUjZUDoawkBmwP4?key=7Xu51UOF6Vd1czS7dgW7gA&#34; alt=&#34;Image&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Ambient: Fortio to the details service 100 RPS 10 connections with connection close&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-table&#34;&gt;&lt;table class=&#34;has-fixed-layout&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Fortio to &lt;/strong&gt;&lt;strong&gt;details&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;Average&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P50&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P75&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P90&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P99&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;Differences&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;No Mesh&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;1.90ms&lt;/td&gt;&lt;td&gt;1.72ms&lt;/td&gt;&lt;td&gt;2.28ms&lt;/td&gt;&lt;td&gt;2.77ms&lt;/td&gt;&lt;td&gt;3.98ms&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Ambient&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;2.06ms&lt;/td&gt;&lt;td&gt;2.15ms&lt;/td&gt;&lt;td&gt;2.65ms&lt;/td&gt;&lt;td&gt;2.94ms&lt;/td&gt;&lt;td&gt;4ms&lt;/td&gt;&lt;td&gt;&lt;strong&gt;8% slower for average &amp;amp; 6% slower for P90&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Table 2: Fortio to the details service 100 RPS 10 connections with connection close&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Compared with Table 1 results, Table 2 numbers have much higher response times, which is expected as each connection is closed immediately after each response from the details service. Given P50, P75, P90 and P99 are all slower from the ambient run with connection close, it seems safe to rule out connection pooling in ztunnel from the first theory could make requests faster.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;Second theory&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I noticed there is a &lt;a href=&#34;https://github.com/istio/istio/pull/51428/files&#34;&gt;performance-related PR&lt;/a&gt; from John Howard in the details and productpage services of the Bookinfo application in our new Istio v1.23 release. For the details service, the PR enabled the &lt;a href=&#34;https://brooker.co.za/blog/2024/05/09/nagle.html&#34;&gt;TCP_NODELAY&lt;/a&gt; flag for the details WEBrick server, which would reduce the unnecessary delay (up to &lt;a href=&#34;https://vorner.github.io/2020/11/06/40-ms-bug.html&#34;&gt;40ms&lt;/a&gt;) from the response time of the details service.&amp;nbsp; For the productpage service, the PR enabled keep-alive on incoming requests, which will reuse existing incoming connections and thus improve performance.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With the newly updated details deployment that includes the fix, I repeated the same tests sending 100 RPS via 10 connections to the details service. The results for no mesh and ambient are really close so I ran each of the tests three times to ensure the results are consistent. Below are screenshots of the first run for each scenario:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXdjKAWCsxQBxdyihff3W_P4lB51q2BrhbDaqaF2zPooyH2LaoKVgZhFvhAVkBoUteAa0e3XNaBprLWLW6SweAsNw1YmFuk7FbDnnZKwVLC84URGBRt839qLPXKDOkI9F4dIfJU6UcVCaFbMfXEHpSmQlnph?key=7Xu51UOF6Vd1czS7dgW7gA&#34; alt=&#34;No Mesh: Fortio to the new details service 100 RPS 10 connections&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;No Mesh: Fortio to the new details service 100 RPS 10 connections&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXe2lvcrz94RNS_ewSFqOFRy01z3RRRs5kh7Fx8boQiGHGMHIzaRsO4Fmfo-3wOFAmnPez0SmDJsPiBRqq85L7_5xfOjdDhJbTefdG6QB-bZVmXhgwuNtZOHFpiLtvceT_OmEm7UMdkdXdlHe9OXGJ6tCTeX?key=7Xu51UOF6Vd1czS7dgW7gA&#34; alt=&#34;Ambient: Fortio to the new details service 100 RPS 10 connections&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I built a table for the three runs for each scenario:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-table&#34;&gt;&lt;table class=&#34;has-fixed-layout&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td colspan=&#34;2&#34;&gt;&lt;strong&gt;Fortio to &lt;/strong&gt;&lt;strong&gt;details&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;Average&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P50&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P75&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P90&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P99&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;Differences&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td rowspan=&#34;2&#34;&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;No Mesh&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;0.76ms&lt;/td&gt;&lt;td&gt;0.58ms&lt;/td&gt;&lt;td&gt;0.69ms&lt;/td&gt;&lt;td&gt;0.81ms&lt;/td&gt;&lt;td&gt;1.56ms&lt;/td&gt;&lt;td&gt;&lt;strong&gt;5% slower on average and P90. 25% slower on P99&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Ambient&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;0.72ms&lt;/td&gt;&lt;td&gt;0.57ms&lt;/td&gt;&lt;td&gt;0.66ms&lt;/td&gt;&lt;td&gt;0.76ms&lt;/td&gt;&lt;td&gt;1.24ms&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td rowspan=&#34;2&#34;&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;No Mesh&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;0.72ms&lt;/td&gt;&lt;td&gt;0.59ms&lt;/td&gt;&lt;td&gt;0.7ms&lt;/td&gt;&lt;td&gt;0.82ms&lt;/td&gt;&lt;td&gt;1.6ms&lt;/td&gt;&lt;td&gt;&lt;strong&gt;3% slower on P90&lt;/strong&gt; &lt;strong&gt;and&lt;/strong&gt; &lt;strong&gt;18% slower on P99&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Ambient&amp;nbsp;&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;0.76ms&lt;/td&gt;&lt;td&gt;0.59ms&lt;/td&gt;&lt;td&gt;0.69ms&lt;/td&gt;&lt;td&gt;0.8ms&lt;/td&gt;&lt;td&gt;1.37ms&lt;/td&gt;&lt;td&gt;&lt;strong&gt;5% slower on average&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td rowspan=&#34;2&#34;&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;No Mesh&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;0.77ms&lt;/td&gt;&lt;td&gt;0.58ms&lt;/td&gt;&lt;td&gt;0.7ms&lt;/td&gt;&lt;td&gt;0.8ms&lt;/td&gt;&lt;td&gt;1.49ms&lt;/td&gt;&lt;td&gt;&lt;strong&gt;1% slower on average and 8% slower on P99&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Ambient&amp;nbsp;&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;0.76ms&lt;/td&gt;&lt;td&gt;0.59ms&lt;/td&gt;&lt;td&gt;0.69ms&lt;/td&gt;&lt;td&gt;0.81ms&lt;/td&gt;&lt;td&gt;1.38ms&lt;/td&gt;&lt;td&gt;&lt;strong&gt;1% slower on P90&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Table 3: Fortio to the new details service 100 RPS 10 connections&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Compared with the previous result from Table 1, the no mesh numbers from Table 3 have improved quite a bit (more substantially at higher percentage than the ambient numbers) and are now closer to the ambient numbers. Ztunnel has &lt;a href=&#34;https://github.com/istio/ztunnel/pulls?q=is%3Apr+is%3Aclosed+TCP_NODELAY&#34;&gt;TCP_NODELAY&lt;/a&gt; enabled by default, which contributed to the ambient performance improvement over no mesh in Table 1 when the old details service doesn’t have TCP_NODELAY enabled. When the new details service has TCP_NODELAY enabled, it has also improved the ambient response times slightly.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Table 3 also shows there is not much difference for average, P50, P75, P90 between no mesh and ambient runs for this type of load testing to the new details service with TCP_NODELAY enabled. The differences between these runs are likely noise with the exception of P99 where the no mesh is consistently 8% or more slower.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;Third theory&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Continue reviewing the test results from Table 3, why would there be similar latency between no mesh and ambient when there are extra hops to ztunnel pods and significant benefits provided by ambient such as mTLS and L4 observability between the fortio and details service? For the P99 case, why would the details service in the ambient mode be faster consistently?&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Ztunnel provides great read/write buffer management with HTTP/2 multiplexing, which could effectively minimize or sometimes even eliminate the overhead added by the extra hops through the client and the server ztunnel pods. I decided to measure this with syscalls using &lt;a href=&#34;https://strace.io/&#34;&gt;strace&lt;/a&gt; from both the fortio and details service by getting into their Kubernetes worker nodes and attaching the pids using strace while filter out the irrelevant traces:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;strace -fp {pid} -e trace=write,writev,read,recvfrom,sendto,readv&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The strace output from the details service is similar for the no-mesh and ambient cases:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;…&#xA;read(9, &#34;GET /details/0 HTTP/1.1\r\nHost: d&#34;..., 8192) = 118&#xA;write(9, &#34;HTTP/1.1 200 OK\r\nContent-Type: a&#34;..., 180) = 180&#xA;write(9, &#34;{\&#34;id\&#34;:0,\&#34;author\&#34;:\&#34;William Shakes&#34;..., 178) = 178&#xA;write(2, &#34;192.168.239.19 - - [13/Aug/2024:&#34;..., 80) = 80&#xA;…&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Output 1: No mesh or ambient – attach strace to the details service’s PID&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The strace outputs from the fortio service for no-mesh vs ambient are different. In the no-mesh case we see fortio executed two reads, one for the HTTP headers and another for the body.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;…&#xA;read(13, &#34;HTTP/1.1 200 OK\r\nContent-Type: a&#34;..., 4096) = 180&#xA;read(13, &#34;{\&#34;id\&#34;:0,\&#34;author\&#34;:\&#34;William Shakes&#34;..., 4096) = 178&#xA;…&#xA;write(19, &#34;GET /details/0 HTTP/1.1\r\nHost: d&#34;..., 118) = 118&#xA;…&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Output 2: No mesh – attach strace to fortio’s PID&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the ambient case we consistently see just one read for both the headers and the body.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;…&#xA;read(19, &#34;HTTP/1.1 200 OK\r\nContent-Type: a&#34;..., 4096) = 358&#xA;…&#xA;write(19, &#34;GET /details/0 HTTP/1.1\r\nHost: d&#34;..., 118) = 118&#xA;…&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Output 3: Ambient mesh – attach strace to fortio’s PID&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Why would this happen? It makes sense that the write calls are unchanged since they are entirely based on the application behavior which is not changed in this case. Ambient coalesces these multiple application writes and converts them into a single network write and by implication a single read in the peer.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the test scenario above I observed a 60% reduction in total syscalls by the fortio service with ambient enabled. This is &lt;strong&gt;&lt;em&gt;very&lt;/em&gt;&lt;/strong&gt; substantial and explains the majority of the improvement in latency and ~25% CPU reduction of the fortio pod at peak time with ambient&lt;strong&gt;. &lt;/strong&gt;The reduction in syscalls is more than offsetting the cost of mTLS and the other features of ztunnel. I expect this pattern to be quite common in enterprise with some HTTP libraries and applications doing a better job of buffering and flushing and some not so much. Often this will correlate with the age of applications and the SDKs they were built on.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXckX5qK1dCRPqok1gI6sHxku5DJJxzFAmapskr64-aYLcqipl8umxksqvZ0Z8na1Bdp-ScO8a85gKB3WiO72BQLmDrVozVzfq6L69xdD9j-aagct2AOfPX8Aq5RE7_4ykgMwysUbb16gsiO7RL3w993LZF-?key=7Xu51UOF6Vd1czS7dgW7gA&#34; alt=&#34;Image&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;No mesh and ambient runs: Fortio to the details service 100 QPS 10 connections&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;What about the entire Bookinfo application?&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With the newly updated details and productpage deployments, I started with sending 1000 RPS via 100 connections to the Bookinfo application, and observed great results for no mesh and ambient.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXeUhDIyse5YzHS0A73L7-g_kkXGijAzrF3dhDTs7aSlU6GcyI6vpo_GcyhR0gz-TtlMdUfvT-Tz62TXqK3pvskvgTPASkH16IYpseRgauXP0o7pgjLIHNEdp03CYWv99-kf9-iYlkpbaMwpmaaiENEL4bSC?key=7Xu51UOF6Vd1czS7dgW7gA&#34; alt=&#34;Image&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;No Mesh: Fortio to the new Bookinfo app 1000 RPS 100 connections.&lt;br&gt;&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image size-full is-resized&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1600&#34; height=&#34;493&#34; src=&#34;https://www.cncf.io/wp-content/uploads/2024/08/istio-1.png&#34; alt=&#34;Ambient: Fortio to the new Bookinfo app 1000 RPS 100 connections&#34; class=&#34;wp-image-116452&#34; style=&#34;width:900px;height:auto&#34; srcset=&#34;https://www.cncf.io/wp-content/uploads/2024/08/istio-1.png 1600w, https://www.cncf.io/wp-content/uploads/2024/08/istio-1-300x92.png 300w, https://www.cncf.io/wp-content/uploads/2024/08/istio-1-1024x316.png 1024w, https://www.cncf.io/wp-content/uploads/2024/08/istio-1-768x237.png 768w, https://www.cncf.io/wp-content/uploads/2024/08/istio-1-900x277.png 900w, https://www.cncf.io/wp-content/uploads/2024/08/istio-1-600x185.png 600w, https://www.cncf.io/wp-content/uploads/2024/08/istio-1-1200x370.png 1200w&#34; sizes=&#34;(max-width: 1600px) 100vw, 1600px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Ambient: Fortio to the new Bookinfo app 1000 RPS 100 connections&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-table&#34;&gt;&lt;table class=&#34;has-fixed-layout&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Fortio to Bookinfo&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;Average&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P50&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P75&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P90&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P99&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;Average Differences&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;No Mesh&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;1.39ms&lt;/td&gt;&lt;td&gt;1.32ms&lt;/td&gt;&lt;td&gt;1.42ms&lt;/td&gt;&lt;td&gt;1.67ms&lt;/td&gt;&lt;td&gt;2.19ms&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Ambient&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;1.40ms&lt;/td&gt;&lt;td&gt;1.34ms&lt;/td&gt;&lt;td&gt;1.48ms&lt;/td&gt;&lt;td&gt;1.68ms&lt;/td&gt;&lt;td&gt;2.94ms&lt;/td&gt;&lt;td&gt;&lt;strong&gt;Less than 1% slower for average and P90&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;&lt;em&gt;Table 4: Fortio to the new Bookinfo app 1000 RPS 100 connections.&lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For comparison, I also ran the same test against the old Bookinfo sample shipped in v1.22.3, and you can see that the new Bookinfo made &lt;strong&gt;5-10X&lt;/strong&gt; improvements on response times, for either no mesh or ambient!&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-table&#34;&gt;&lt;table class=&#34;has-fixed-layout&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Fortio to Bookinfo&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;Average&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P50&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P75&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P90&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P99&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;Average Differences&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;No Mesh&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;6.35ms&lt;/td&gt;&lt;td&gt;4.68ms&lt;/td&gt;&lt;td&gt;7.44ms&lt;/td&gt;&lt;td&gt;11.4ms&lt;/td&gt;&lt;td&gt;36.63ms&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Ambient&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;6.74ms&lt;/td&gt;&lt;td&gt;4.9ms&lt;/td&gt;&lt;td&gt;7.79ms&lt;/td&gt;&lt;td&gt;12.12ms&lt;/td&gt;&lt;td&gt;41.14ms&lt;/td&gt;&lt;td&gt;&lt;strong&gt;6% slower&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Table 5: Fortio to the old Bookinfo app 1000 RPS 100 connections&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Increased the load to 4000 RPS with 400 connections with the new Bookinfo deployments:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXcgUs18Og7Bcmeq5hw8UjiCDB3BJ7fG7h7f8NWeJGnPFmKShR189-K4humffSN-YEPtVnGssIJoRDWEHw9Ju6MmWW9hedRHdTDS29l6z9OEfh5Jp7CT5GR66RQ8tVeDW_muGy1Zl5hJSJrCGKLAVukvH3k?key=7Xu51UOF6Vd1czS7dgW7gA&#34; alt=&#34;Image&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;No Mesh: Fortio to the new Bookinfo app 4000 RPS 400 connections&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXfwlAWXixnPjf9bfZCBc61qZLIVGMnHcxiUl7e_yFc4ApV_PJsXTF6YyVCx1NNRhfSTaNNkcW1xKqw-igF716pNF9dCoPra8lEPwIRLu8Rm_1bnUj06Bh0Ca6gVsZmpxN_N2hYaMCHH89G27Xfy2aAeUC5n?key=7Xu51UOF6Vd1czS7dgW7gA&#34; alt=&#34;Image&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Ambient: Fortio to the new Bookinfo app 4000 RPS 400 connections&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The response times are still very good, way better than the old Bookinfo app with only 1000 RPS and 100 connections (Table 5):&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-table&#34;&gt;&lt;table class=&#34;has-fixed-layout&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Fortio to Bookinfo&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;Average&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P50&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P75&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P90&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P99&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;Average Differences&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;No Mesh&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;1.54ms&lt;/td&gt;&lt;td&gt;1.33ms&lt;/td&gt;&lt;td&gt;1.54ms&lt;/td&gt;&lt;td&gt;2.25ms&lt;/td&gt;&lt;td&gt;3.98ms&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Ambient&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;1.58ms&lt;/td&gt;&lt;td&gt;1.37ms&lt;/td&gt;&lt;td&gt;1.57ms&lt;/td&gt;&lt;td&gt;2.33ms&lt;/td&gt;&lt;td&gt;4.9ms&lt;/td&gt;&lt;td&gt;&lt;strong&gt;3% slower on average and 4% slower on P90&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Table 6: Fortio to the new Bookinfo app 4000 RPS 400 connections&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It is really nice to see that Bookinfo handles 4000 RPS without any errors and ambient mode is about 3-4% slower than no mesh with all the benefits of encryption in transit with mTLS and L4 observability. I recall I could only reach up to 1200 RPS with the old Bookinfo app, which already resulted in a small percentage of errors. Now I can increase loads to 4000 or higher RPS without errors.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;Wrapping up:&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Ambient mode at L4 introduces only a very tiny impact — and occasionally even an automatic &lt;em&gt;improvement&lt;/em&gt;! — to users’ application latencies. Combined with the simple UX by labeling the namespace to enroll your application to ambient without restarting any workloads, it provides a delightful experience to users that we intended when we initially named it ambient.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;I would like to thank all of our Istio maintainers who built such a delightful project and CNCF for providing the Istio project access to the &lt;a href=&#34;https://www.cncf.io/community-infrastructure-lab/&#34;&gt;infrastructure lab&lt;/a&gt; where I performed the test. I would also like to thank Quentin Joly and many users who provided me with the “ambient is slighter faster than no mesh sometimes” feedback which triggered me to run the above benchmark tests to experience the improvement or tiny latency impact under load for myself.&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;】&lt;p&gt;&lt;em&gt;社区帖子最初发布于&lt;a href=&#34;https://thenewstack.io/ambient-mesh-can-sidecar-less-istio-make-applications-faster/&#34;&gt;新堆栈&lt;/a &gt; 作者：Lin Sun&lt;/em&gt;，&lt;em&gt;Solo.io 开源主管&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;环境模式是 2022 年 Istio 中引入的新的无 sidecar 数据平面。当环境模式达到&lt;a href=&#34;https://istio.io/latest/blog/2024/ambient-reaches-beta/&#34;&gt;今年 5 月处于 Beta&lt;/a&gt; 状态，我开始看到许多用户在将应用程序添加到网格后进行尝试并运行负载测试，以了解性能影响。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;受到 &lt;a href=&#34;https://a-cup-of.coffee/blog/istio/#with-istio-ambient&#34;&gt;Quentin Joly 的博客&lt;/a&gt;的启发，了解 Istio 在环境模式下令人难以置信的性能社区中其他用户的类似反馈表明，有时应用程序在环境模式下速度会稍快一些，因此我决定亲自验证这些结果。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;测试环境：&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;我使用了 3 个工作节点 Kubernetes 集群，每个节点有 256GB RAM 和 32 核 CPU。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXfS50HjjsJiBqlv30JKgaaTJcmUq0hHcG3xNl42Yzd7E0FfKPAe0gI3tnNAx0gpud0LGfHkdI7cbTXJyzU5v46 v-kucl-2_l7Lax0-kvCeG19mST3ToJdIu6r5u7BoYkAGVc14HnRyVlnX9TY_Ra9NilKQ?key=7Xu51UOF6Vd1czS7dgW7gA&#34; alt= “图片”referrerpolicy=&#34;no-referrer&#34;&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Istio 使用一些工具来轻松进行一致的基准测试。  首先，我们使用名为 &lt;a href=&#34;https://github.com/fortio/fortio&#34;&gt;fortio&lt;/a&gt; 的负载测试工具，它以指定的每秒请求数 (RPS) 运行，记录执行直方图时间并计算百分位数 - 例如，P99，即 99% 的请求花费的时间少于该数字的响应时间。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;我们还提供了一个名为 &lt;a href=&#34;https://istio.io/latest/docs/examples/bookinfo/&#34;&gt;Bookinfo&lt;/a&gt; 的示例应用程序，其中包括用 Python、Java、Node.js 编写的微服务。 Node.js 和 Ruby。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;每个 Bookinfo 部署都有 2 个副本，均匀分布到 3 个工作节点。使用 &lt;a href=&#34;https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity&#34;&gt;pod 反亲和性规则&lt;/a&gt;，我确保将 fortio 放置在与 &lt;a href=&#34;https://github.com/istio/istio/tree/master/samples/bookinfo/src/details&#34;&gt;details&lt;/a&gt; 服务不同的节点上。&lt; /p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;初始测试结果&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;我从 Istio v1.22.3 版本安装了 Bookinfo 应用程序。使用 fortio 工具驱动单个 Bookinfo 服务（例如详细信息）或完整 Bookinfo 应用程序的负载，我注意到将所有内容添加到环境网格后&lt;strong&gt;接近零延迟影响&lt;/strong&gt;。大多数时候，平均值或 P90 的增幅在 0-5% 范围内。我一直注意到 Istio 环境模式下的详细信息服务稍微快一些，就像 Quentin 在他的博客中报告的那样。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3类=“wp-block-heading&#34;&gt;对详细信息服务进行负载测试&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;我做了与 Quentin 相同的测试，通过 10 个连接发送 100 RPS 到详细信息服务，并收集了无网格和环境的结果。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXfc1vCggIDlIXmGqt-ac1pUzDPHZd2feGf-TvJRpQu-nmCwXGVliCE8nB2CT_wkVMPibKKFOtjAQ1aj5zxQ-ivUQj74JFEtVZ GwioAYbKLsLeuADG6dhTsvMqaYCvtZk3XlYHTFop6gc-z3zysDhyTrekuU?key= 7Xu51UOF6Vd1czS7dgW7gA&#34; alt=&#34;无网格：详细信息服务 100 RPS&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;无网格：详细信息服务 100 RPS&lt;/figcaption&gt;&lt;/图&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXdIB88W4APYre6YtZPZ90pRKvuoAFO05xhIaFXL50Y1PzD6LmZ0SoBTdgc6SMZSBar8LaNi5uWzDMA18_pEUZ9W_r1kiyiz9 WwtcHMQQMkC6i4avrYLdsMlY8wGFc0FwEUR9VUvy-GSeaUJhAI8HK_fgJXB?key=7Xu51UOF6Vd1czS7dgW7gA&#34; alt=&#34;图片&#34; 推荐政策=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;环境：详细信息服务 100 RPS&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;就像 Quentin 一样，我必须运行多个测试来验证环境模式比没有网格的性能稍好 - 这很难相信！就 Bookinfo 详细信息服务而言，添加环境模式可将延迟平均改善 6-11%，同时还添加 mTLS 和 L4 可观察性！&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-table&#34;&gt;&lt;table class=&#34;has-fixed-layout&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Fortio &lt;/strong&gt;&lt;strong&gt;详细信息&lt;/strong&gt; &lt;/td&gt;&lt;td&gt;&lt;strong&gt;平均&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P50&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P75&lt;/strong&gt;&lt;/td&gt;&lt; td&gt;&lt;strong&gt;P90&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P99&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;差异&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr &gt;&lt;td&gt;&lt;strong&gt;无网格运行 1&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;0.89ms&lt;/td&gt;&lt;td&gt;0.64ms&lt;/td&gt;&lt;td&gt;0.74ms&lt;/td&gt;&lt;td&gt;0.85 ms&lt;/td&gt;&lt;td&gt;2.67ms&lt;/td&gt;&lt;td&gt;&lt;strong&gt;平均慢 11%，P90 慢 5%&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt; strong&gt;环境运行1&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;0.80ms&lt;/td&gt;&lt;td&gt;0.6ms&lt;/td&gt;&lt;td&gt;0.71ms&lt;/td&gt;&lt;td&gt;0.81ms&lt;/td&gt;&lt; td&gt;1.4ms&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;无网格运行 2&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;0.86ms&lt;/td&gt;&lt; td&gt;0.65ms&lt;/td&gt;&lt;td&gt;0.75ms&lt;/td&gt;&lt;td&gt;0.86ms&lt;/td&gt;&lt;td&gt;1.71ms&lt;/td&gt;&lt;td&gt;&lt;strong&gt;平均慢 6%，慢 4%对于 P90&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;环境运行 2&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;0.81ms&lt;/td&gt;&lt;td&gt;0.61ms&lt;/ td&gt;&lt;td&gt;0.72ms&lt;/td&gt;&lt;td&gt;0.83ms&lt;/td&gt;&lt;td&gt;1.56ms&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;否网格运行3&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;0.90ms&lt;/td&gt;&lt;td&gt;0.65ms&lt;/td&gt;&lt;td&gt;0.76ms&lt;/td&gt;&lt;td&gt;0.88ms&lt;/td&gt;&lt;td&gt; 1.92ms&lt;/td&gt;&lt;td&gt;&lt;strong&gt;平均慢 10%，P90 慢 5%&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;环境运行 3&lt;/strong &gt;&lt;/td&gt;&lt;td&gt;0.82ms&lt;/td&gt;&lt;td&gt;0.63ms&lt;/td&gt;&lt;td&gt;0.72ms&lt;/td&gt;&lt;td&gt;0.84ms&lt;/td&gt;&lt;td&gt;1.5ms&lt;/td&gt; &lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;表 1：Fortio 到详细信息服务 100 RPS 10 个连接&lt;/figcaption&gt;&lt;/figure &gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;为什么应用程序有时在环境网格中速度更快？&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;我们被告知服务网格可以添加延迟。此处复制的 Quentin 的结果显示了通过服务网格运行时工作负载&lt;em&gt;更快&lt;/em&gt;的情况。发生了什么事？&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;第一个理论&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;当您的应用程序位于环境网格中时，负载请求首先通过名为 &lt;a href=&#34;https://istio.io/latest/docs/ambient/overview/#ztunnel&#34;&gt;ztunnel 的轻量级本地节点代理传输&lt;/a&gt;，然后到目的地 ztunnel，然后继续到服务。详细信息服务使用 HTTP/1.1 和 Ruby 中的 Webrick 库，我们发现旧的或配置不当的 HTTP 库中的连接管理和保持活动行为很差。我的第一个假设是，当客户端和服务器位于不同节点上时，如果应用程序未使用高效的 HTTP/2 连接，则通过客户端和服务器 ztunnel 进行代理实际上可能会更快。 Ztunnel 使用连接池和 &lt;a href=&#34;https://en.wikipedia.org/wiki/HTTP_tunnel&#34;&gt;HTTP Connect&lt;/a&gt; 在节点之间建立安全隧道，以在负载下利用并行性和 HTTP/2 流复用。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXdkVHCotSRWKoih2aQLCioo38lsv_PtQFILzTPQvVd3vZYFY5VKaIoVPH_VWLeLla9yZGZBhiTo5H1wH-O3EApb2RvUjM- A3Q5k8B9ffCIoN12sRL8UG_FMLIhxti0iZaYXWu7dttoiubPD0GyDyKDcGmE?key=7Xu51UOF6Vd1czS7dgW7gA&#34; alt=&#34;图像“referrerpolicy =“no-referrer”&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;然而，这一理论存在一些挑战。为什么我只在详细信息服务中观察到这一点，而在任何其他 Bookinfo 服务中却没有观察到这一点？&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;进一步研究，我发现我们的 fortio 加载工具具有 &lt;a href=&#34;https://github.com/fortio/fortio/blob/8a7d9112667e637139c788b68cb063f456d20cb4/bincommon/commonflags.go#L55&#34;&gt;通过以下方式启用连接保持活动状态默认&lt;/a&gt;。从 fortio 到详细信息服务有 10 个连接，并且详细信息服务（使用 WEBrick Ruby 库）遵循连接保持活动设置，因此可以在没有环境的情况下有效地重用连接。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;连接关闭时进行负载测试&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;接下来，我尝试通过设置“Connection: close”标头来运行相同的负载测试。这会强制禁用任何 HTTP 连接池，这是测试这一假设的好方法。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;curl -v -d &#39;{&#34;metadata&#34;: {&#34;url&#34;:&#34;http://details:9080/details/0&#34;, &#34; c”：“10”，“qps”：“100”，“n”：“2000”，“异步”：“on”，“保存”：“on”}}&#39;“localhost：8081/fortio/rest/ run?jsonPath=.metadata&#34; -H &#34;连接：关闭&#34;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXfc-HDPourI5Dwlo3n-jkc5TMiqJdm0k0oSb1Z4HZkKIkVgCKKFyJbBv6fp40pS6XwTORrUvYSYfmL7M6Dqu7ZdBSiJYv Xo-O7f4weYTsuQHarX3uit-jQEL4HlWiwNc7PEFPS1DQgm6csv5FhdMhXxUUc?key=7Xu51UOF6Vd1czS7dgW7gA&#34; alt=&#34;图片&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;无网格：Fortio 到详细服务 100 RPS 10 个连接h 连接关闭&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXfBoHXMf2xaXMboBVCNYNmDBkoFIdefso_IbfLft83aStyTTcm4yOAv3zkEwUtddn1gnFZgT9tf_Z0S494iE6TliMgHFuv24T nEMEDdXsFtk2JcS41jUZhTTvAljd9bDA25AGqyjKlt_ZUjZUDoawkBmwP4?key=7Xu51UOF6Vd1czS7dgW7gA&#34; alt=&#34;图片&#34;referrerpolicy=&#34; no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;环境：Fortio 到详细信息服务 100 RPS 10 连接，连接关闭&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-table&#34;&gt;&lt;table class=&#34;has-fixed-layout&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Fortio &lt;/strong&gt;&lt;strong&gt;详细信息&lt;/strong&gt; &lt;/td&gt;&lt;td&gt;&lt;strong&gt;平均&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P50&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P75&lt;/strong&gt;&lt;/td&gt;&lt; td&gt;&lt;strong&gt;P90&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P99&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;差异&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr &gt;&lt;td&gt;&lt;strong&gt;无网格&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;1.90ms&lt;/td&gt;&lt;td&gt;1.72ms&lt;/td&gt;&lt;td&gt;2.28ms&lt;/td&gt;&lt;td&gt;2.77ms&lt; /td&gt;&lt;td&gt;3.98ms&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;环境&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;2.06ms&lt;/td&gt; &lt;td&gt;2.15ms&lt;/td&gt;&lt;td&gt;2.65ms&lt;/td&gt;&lt;td&gt;2.94ms&lt;/td&gt;&lt;td&gt;4ms&lt;/td&gt;&lt;td&gt;&lt;strong&gt;平均慢 8%，慢 6%对于 P90&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;表 2：Fortio 到详细信息服务 100 RPS 10 个连接（连接关闭）&lt; /图标题&gt;&lt;/图&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;与表 1 结果相比，表 2 数字的响应时间要长得多，这是预期的，因为每个连接在详细信息服务的每次响应后立即关闭。鉴于 P50、P75、P90 和 P99 在连接关闭的环境运行中都较慢，因此可以安全地从第一个理论中排除 ztunnel 中的连接池可以使请求更快。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;第二种理论&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;我注意到 John Howard 在详细信息和产品页面服务中有一个 &lt;a href=&#34;https://github.com/istio/istio/pull/51428/files&#34;&gt;与性能相关的 PR&lt;/a&gt;我们新的 Istio v1.23 版本中的 Bookinfo 应用程序。对于详细信息服务，PR 为详细信息 WEBrick 服务器启用了 &lt;a href=&#34;https://brooker.co.za/blog/2024/05/09/nagle.html&#34;&gt;TCP_NODELAY&lt;/a&gt; 标志，这将减少响应时间中不必要的延迟（最多 &lt;a href=&#34;https://vorner.github.io/2020/11/06/40-ms-bug.html&#34;&gt;40ms&lt;/a&gt;）细节服务。  对于productpage 服务，PR 启用了传入请求的保持活动状态，这将重用现有的传入连接，从而提高性能。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;通过包含修复程序的最新更新的详细信息部署，我重复了相同的测试，通过 10 个连接向详细信息服务发送 100 RPS。无网格和环境的结果非常接近，因此我将每个测试运行了三次以确保结果一致。以下是每个场景第一次运行的屏幕截图：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXdjKAWCsxQBxdyihff3W_P4lB51q2BrhbDaqaF2zPooyH2LaoKVgZhFvhAVkBoUteAa0e3XNaBprLWLW6SweAsNw1YmFuk7FbDnnZKwVLC84URGBRt839qLPXKDOkI9F4dIfJU6UcVCaFbMfXEHpSmQlnph?key=7Xu51UOF6Vd1czS7dgW7gA&#34; alt=&#34;无网格：Fortio 到新的详细信息服务 100 RPS 10 个连接&#34; Caption class=&#34;wp-element-caption&#34;&gt;无网格：Fortio 到新的详情服务 100 RPS 10 个连接&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXe2lvcrz94RNS_ewSFqOFRy01z3RRRs5kh7Fx8boQiGHGMHIzaRsO4Fmfo-3wOFAmnPez0SmDJsPiBRqq85L7_5xfOjdDhJbTef dG6QB-bZVmXhgwuNtZOHFpiLtvceT_OmEm7UMdkdXdlHe9OXGJ6tCTeX?key=7Xu51UOF6Vd1czS7dgW7gA&#34; alt=&#34;环境：Fortio 到新的详细信息服务 100 RPS 10 个连接”referrerpolicy=&#34;no-referrer&#34;&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;我为每个场景的三次运行构建了一个表：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-table&#34;&gt;&lt;table class=&#34;has-fixed-layout&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td colspan=&#34;2&#34;&gt;&lt;strong&gt;Fortio 至 &lt;/strong&gt;&lt;strong&gt;详细信息&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;平均&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P50&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P75&lt;/strong&gt; &lt;/td&gt;&lt;td&gt;&lt;strong&gt;P90&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P99&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;差异&lt;/strong&gt;&lt;/td&gt;&lt; /tr&gt;&lt;tr&gt;&lt;td rowspan=&#34;2&#34;&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;无网格&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;0.76ms&lt;/td &gt;&lt;td&gt;0.58ms&lt;/td&gt;&lt;td&gt;0.69ms&lt;/td&gt;&lt;td&gt;0.81ms&lt;/td&gt;&lt;td&gt;1.56ms&lt;/td&gt;&lt;td&gt;&lt;strong&gt;平均慢 5%，P90 。 P99 上慢 25%&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;环境&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;0.72ms&lt;/td&gt;&lt;td&gt;0.57ms&lt; /td&gt;&lt;td&gt;0.66ms&lt;/td&gt;&lt;td&gt;0.76ms&lt;/td&gt;&lt;td&gt;1.24ms&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td rowspan=&#34;2 &#34;&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;无网格&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;0.72ms&lt;/td&gt;&lt;td&gt;0.59ms&lt;/td&gt;&lt;td &gt;0.7ms&lt;/td&gt;&lt;td&gt;0.82ms&lt;/td&gt;&lt;td&gt;1.6ms&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P90 上慢 3%&lt;/strong&gt; &lt;strong&gt;和&lt;/strong&gt; &lt;strong P99 上速度慢 &gt;18%&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;环境光&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;0.76ms&lt;/td&gt;&lt;td&gt;0.59ms &lt;/td&gt;&lt;td&gt;0.69ms&lt;/td&gt;&lt;td&gt;0.8ms&lt;/td&gt;&lt;td&gt;1.37ms&lt;/td&gt;&lt;td&gt;&lt;strong&gt;平均慢 5%&lt;/strong&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr&gt;&lt;td rowspan=&#34;2&#34;&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;无网格&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;0.77ms&lt;/ td&gt;&lt;td&gt;0.58ms&lt;/td&gt;&lt;td&gt;0.7ms&lt;/td&gt;&lt;td&gt;0.8ms&lt;/td&gt;&lt;td&gt;1.49ms&lt;/td&gt;&lt;td&gt;&lt;strong&gt;平均慢 1% P99 上慢 8%&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;环境&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;0.76ms&lt;/td&gt;&lt;td&gt;0.59ms&lt; /td&gt;&lt;td&gt;0.69ms&lt;/td&gt;&lt;td&gt;0.81ms&lt;/td&gt;&lt;td&gt;1.38ms&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P90 上慢 1%&lt;/strong&gt;&lt;/td&gt;&lt; /tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;表 3：Fortio 到新的详细信息服务 100 RPS 10 个连接&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;与表 1 中的先前结果相比，表 3 中的无网格数已改善相当多（比环境数更高的百分比），现在更接近环境数。 Ztunnel 默认启用 &lt;a href=&#34;https://github.com/istio/ztunnel/pulls?q=is%3Apr+is%3Aclose+TCP_NODELAY&#34;&gt;TCP_NODELAY&lt;/a&gt;，这有助于改善环境性能当旧的详细信息服务未启用 TCP_NODELAY 时，表 1 中没有网格。当新的详细信息服务启用 TCP_NODELAY 时，它具有所有因此稍微改善了环境响应时间。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;表 3 还显示，对于启用 TCP_NODELAY 的新详细信息服务进行此类负载测试，无网格运行和环境运行之间的平均值、P50、P75、P90 没有太大差异。这些运行之间的差异可能是噪音，但 P99 除外，其中无网格始终慢 8% 或更多。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;第三种理论&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;继续查看表 3 中的测试结果，当到 ztunnel pod 的额外跳数以及环境提供的显着优势（例如 fortio 和细节服务之间的 mTLS 和 L4 可观察性）时，为什么无网格和环境之间会存在类似的延迟？对于P99的情况，为什么环境模式下的细节服务会始终更快？ &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Ztunnel 通过 HTTP/2 多路复用提供出色的读/写缓冲区管理，这可以有效地最小化甚至有时甚至消除通过客户端和服务器 ztunnel pod 的额外跃点所增加的开销。我决定通过使用来自 fortio 和细节服务的 &lt;a href=&#34;https://strace.io/&#34;&gt;strace&lt;/a&gt; 的系统调用来测量这一点，方法是进入 Kubernetes 工作节点并使用 strace while filter 附加 pid去掉不相关的痕迹：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;strace -fp {pid} -e trace=write,writev,read,recvfrom,sendto,readv&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;对于无网格和环境情况，详细信息服务的 strace 输出类似：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;...&#xA;读取（9，“GET /details/0 HTTP/1.1\r\n主机：d”...，8192）= 118&#xA;写（9，“HTTP/1.1 200 OK\r\n内容类型：a”...，180）= 180&#xA;写(9, &#34;{\&#34;id\&#34;:0,\&#34;作者\&#34;:\&#34;William Shakes&#34;..., 178) = 178&#xA;写（2，“192.168.239.19 - - [2024年8月13日：”...，80）= 80&#xA;...&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;输出 1：无网格或环境 - 将 strace 附加到详细信息服务的 PID&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;fortio 服务对于无网格和环境的 strace 输出是不同的。在无网格的情况下，我们看到 fortio 执行了两次读取，一次针对 HTTP 标头，另一次针对正文。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;...&#xA;读取（13，“HTTP/1.1 200 OK\r\n内容类型：a”...，4096）= 180&#xA;读(13, &#34;{\&#34;id\&#34;:0,\&#34;作者\&#34;:\&#34;William Shakes&#34;..., 4096) = 178&#xA;……&#xA;写（19，“获取/详细信息/0 HTTP/1.1\r\n主机：d”...，118）= 118&#xA;...&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;输出 2：无网格 - 将 strace 附加到 fortio 的 PID&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;在环境情况下，我们始终看到标题和正文都只读取一次。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;...&#xA;读取（19，“HTTP/1.1 200 OK\r\n内容类型：a”...，4096）= 358&#xA;……&#xA;写（19，“获取/详细信息/0 HTTP/1.1\r\n主机：d”...，118）= 118&#xA;...&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;输出 3：环境网格 - 将 strace 附加到 fortio 的 PID&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;为什么会发生这种情况？写调用保持不变是有道理的，因为它们完全基于应用程序行为，在这种情况下不会改变。环境将这些多因素结合在一起多个应用程序写入并将它们转换为单个网络写入，并暗示对等体中的单个读取。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;在上面的测试场景中，我观察到启用环境的 fortio 服务的系统调用总数减少了 60%。这是&lt;strong&gt;&lt;em&gt;非常&lt;/em&gt;&lt;/strong&gt;的重要原因，并且解释了使用环境&lt;strong&gt;在高峰时间 fortio pod 的延迟改善和约 25% CPU 减少的大部分原因。系统调用的减少足以抵消 mTLS 和 ztunnel 其他功能的成本。我预计这种模式在企业中非常常见，一些 HTTP 库和应用程序在缓冲和刷新方面做得更好，而另一些则不然。通常，这与应用程序的年龄及其构建的 SDK 相关。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXckX5qK1dCRPqok1gI6sHxku5DJJxzFAmapskr64-aYLcqipl8umxksqvZ0Z8na1Bdp-ScO8a85gKB3WiO72BQLmDrVozVzf q6L69xdD9j-aagct2AOfPX8Aq5RE7_4ykgMwysUbb16gsiO7RL3w993LZF-?key=7Xu51UOF6Vd1czS7dgW7gA&#34; 替代=&#34;Image&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;无网格和环境运行：Fortio 到详细信息服务 100 QPS 10 个连接&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;整个 Bookinfo 应用程序怎么样？&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;通过新更新的详细信息和产品页面部署，我开始通过 100 个连接向 Bookinfo 应用程序发送 1000 RPS，并观察到没有网格和环境的良好结果。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXeUhDIyse5YzHS0A73L7-g_kkXGijAzrF3dhDTs7aSlU6GcyI6vpo_GcyhR0gz-TtlMdUfvT-Tz62TXqK3pvskvgTPAS kH16IYpseRgauXP0o7pgjLIHNEdp03CYWv99-kf9-iYlkpbaMwpmaaiENEL4bSC?key= 7Xu51UOF6Vd1czS7dgW7gA&#34; alt=&#34;Image&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;无网格：Fortio 到新的 Bookinfo 应用程序 1000 RPS 100 个连接。&lt;br&gt;&lt;/figcaption&gt;&lt;/图&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image size-full is-resized&#34;&gt;&lt;imgloading=&#34;lazy&#34;decoding=&#34;async&#34;width=&#34;1600&#34;height=&#34;493&#34;src=&#34;https://www.cncf .io/wp-content/uploads/2024/08/istio-1.png&#34; alt=&#34;Ambient：Fortio 到新 Bookinfo 应用程序 1000 RPS 100 个连接&#34; class=&#34;wp-image-116452&#34; style=&#34;width:900px ;高度：自动” srcset =“https://www.cncf.io/wp-content/uploads/2024/08/istio-1.png 1600w，https://www.cncf.io/wp-content/uploads /2024/08/istio-1-300x92.png 300w，https://www.cncf.io/wp-content/uploads/2024/08/istio-1-1024x316.png 1024w，https://www.cncf .io/wp-content/uploads/2024/08/istio-1-768x237.png 768w，https://www.cncf.io/wp-content/uploads/2024/08/istio-1-900x277.png 900w ，https://www.cncf.io/wp-content/uploads/2024/08/istio-1-600x185.png 600w，https://www.cncf.io/wp-content/uploads/2024/08/ istio-1-1200x370.png 1200w&#34;sizes=&#34;(max-width: 1600px) 100vw, 1600px&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;环境：Fortio 到新书信息应用程序 1000 RPS 100 个连接&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-table&#34;&gt;&lt;table class=&#34;has-fixed-layout&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Fortio 到 Bookinfo&lt;/strong&gt;&lt;/td&gt;&lt;td&gt; &lt;strong&gt;平均&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P50&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P75&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P90&lt; /strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P99&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;平均差异&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong &gt;无网格&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;1.39ms&lt;/td&gt;&lt;td&gt;1.32ms&lt;/td&gt;&lt;td&gt;1.42ms&lt;/td&gt;&lt;td&gt;1.67ms&lt;/td&gt;&lt;td&gt; 2.19ms&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;环境&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;1.40ms&lt;/td&gt;&lt;td&gt;1.34ms&lt; /td&gt;&lt;td&gt;1.48ms&lt;/td&gt;&lt;td&gt;1.68ms&lt;/td&gt;&lt;td&gt;2.94ms&lt;/td&gt;&lt;td&gt;&lt;strong&gt;平均和 P90 慢不到 1%&lt;/strong&gt;&lt; /td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;&lt;em&gt;表 4：Fortio 到新 Bookinfo 应用程序 1000 RPS 100 个连接。&lt;/em&gt;&lt;/图标题&gt;&lt;/图&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;为了进行比较，我还对 v1.22.3 中提供的旧 Bookinfo 示例进行了相同的测试，您可以看到新的 Bookinfo 在响应时间上取得了 &lt;strong&gt;5-10X&lt;/strong&gt; 改进，无论是没有网格或环境！&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-table&#34;&gt;&lt;table class=&#34;has-fixed-layout&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Fortio 到 Bookinfo&lt;/strong&gt;&lt;/td&gt;&lt;td&gt; &lt;strong&gt;平均&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P50&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P75&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P90&lt; /strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P99&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;平均差异&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong &gt;无网格&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;6.35ms&lt;/td&gt;&lt;td&gt;4.68ms&lt;/td&gt;&lt;td&gt;7.44ms&lt;/td&gt;&lt;td&gt;11.4ms&lt;/td&gt;&lt;td&gt; 36.63ms&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;环境&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;6.74ms&lt;/td&gt;&lt;td&gt;4.9ms&lt; /td&gt;&lt;td&gt;7.79ms&lt;/td&gt;&lt;td&gt;12.12ms&lt;/td&gt;&lt;td&gt;41.14ms&lt;/td&gt;&lt;td&gt;&lt;strong&gt;慢 6%&lt;/strong&gt;&lt;/td&gt;&lt;/tr &gt;&lt;/tbody&gt;&lt;/table&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;表 5：Fortio 到旧 Bookinfo 应用程序 1000 RPS 100 个连接&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;通过新的 Bookinfo 部署将负载增加到 4000 RPS，具有 400 个连接：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXcgUs18Og7Bcmeq5hw8UjiCDB3BJ7fG7h7f8NWeJGnPFmKShR189-K4humffSN-YEPtVnGssIJoRDWEHw9Ju6MmWW9hedRHd TDS29l6z9OEfh5Jp7CT5GR66RQ8tVeDW_muGy1Zl5hJSJrCGKLAVukvH3k?key=7Xu51UOF6Vd1czS7dgW7gA&#34; alt=&#34;图像&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;无网格：Fortio 到新的 Bookinfo 应用程序 4000 RPS 400 个连接&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXfwlAWXixnPjf9bfZCBc61qZLIVGMnHcxiUl7e_yFc4ApV_PJsXTF6YyVCx1NNRhfSTaNNkcW1xKqw-igF716pNF9dCoP ra8lEPwIRLu8Rm_1bnUj06Bh0Ca6gVsZmpxN_N2hYaMCHH89G27Xfy2aAeUC5n?key=7Xu51UOF6Vd1czS7dgW7gA&#34; alt=&#34;图片&#34; 推荐策略=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;环境：Fortio 到新的 Bookinfo 应用程序 4000 RPS 400 连接&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;响应时间仍然非常好，比只有 1000 RPS 和 100 个连接的旧 Bookinfo 应用程序要好得多（表 5）：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-table&#34;&gt;&lt;table class=&#34;has-fixed-layout&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Fortio 到 Bookinfo&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;平均&lt;/strong&gt;&lt;/td&gt;&lt; td&gt;&lt;strong&gt;P50&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P75&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;P90&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt; P99&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;平均差异&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;无网格&lt;/strong&gt;&lt;/td&gt;&lt;td &gt;1.54ms&lt;/td&gt;&lt;td&gt;1.33ms&lt;/td&gt;&lt;td&gt;1.54ms&lt;/td&gt;&lt;td&gt;2.25ms&lt;/td&gt;&lt;td&gt;3.98ms&lt;/td&gt;&lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;环境&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;1.58ms&lt;/td&gt;&lt;td&gt;1.37ms&lt;/td&gt;&lt;td&gt;1.57ms&lt;/td&gt;&lt; td&gt;2.33ms&lt;/td&gt;&lt;td&gt;4.9ms&lt;/td&gt;&lt;td&gt;&lt;strong&gt;平均慢 3%，P90 慢 4%&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;表 6：Fortio 到新 Bookinfo 应用程序 4000 RPS 400 个连接&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;很高兴看到 Bookinfo 可以毫无错误地处理 4000 RPS，环境模式比无网格慢约 3-4%，并且具有 mTLS 和 L4 可观测性传输加密的所有优势。我记得使用旧的 Bookinfo 应用程序只能达到 1200 RPS，这已经导致了一小部分错误。现在我可以将负载增加到 4000 或更高 RPS，而不会出现错误。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;总结：&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;L4 的环境模式只会产生非常小的影响 - 有时甚至会自动&lt;em&gt;改进&lt;/em&gt;！ — 用户的应用程序延迟。通过标记命名空间来将应用程序注册到环境中而无需重新启动任何工作负载，与简单的用户体验相结合，它为用户提供了令人愉快的体验，这正是我们最初将其命名为环境时所希望的。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;我要感谢所有 Istio 维护者，他们构建了如此令人愉快的项目，并感谢 CNCF 为 Istio 项目提供了对 &lt;a href=&#34;https://www.cncf.io/community-infrastruct-lab/ 的访问权限我进行测试的“基础设施实验室”。我还要感谢 Quentin Joly 和许多用户，他们向我提供了“环境有时比没有网格要快一些”的反馈，这促使我运行上述基准测试，以亲自体验负载下的改进或微小的延迟影响。&lt; /p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;</description>
      <pubDate>Thu, 22 Aug 2024 16:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>