<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>CNCF - Blog</title>
    <link>http://rsshub.rssforever.com/cncf</link>
    <description>CNCF - Blog - Powered by RSSHub</description>
    <managingEditor>contact@rsshub.app (RSSHub)</managingEditor>
    <item>
      <title>【KubeCon + CloudNativeCon North America 2024 co-located event deep dive: Istio Day】KubeCon + CloudNativeCon North America 2024 同期举办活动深入探讨：Istio Day</title>
      <link>https://www.cncf.io/blog/2024/09/17/kubecon-cloudnativecon-north-america-2024-co-located-event-deep-dive-istio-day/</link>
      <description>【&lt;p&gt;&lt;em&gt;Co-chairs: Iris Ding &amp;amp; Keith Mattix&lt;br&gt;November 12, 2024&lt;br&gt;Salt Lake City, Utah&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image size-full&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;205&#34; height=&#34;67&#34; src=&#34;https://www.cncf.io/wp-content/uploads/2024/09/Istio-Day-NA_2023_Logos_Istio-Day-Logo-Color.svg&#34; alt=&#34;istio day&#34; class=&#34;wp-image-117642&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/co-located-events/istio-day/&#34;&gt;Istio Day&lt;/a&gt; is the biannual community event for the industry’s most widely adopted and feature rich service mesh, where attendees will find lessons learned from running Istio in production, the latest updates on Istio’s ambient mode developments, and the opportunity to meet and learn from maintainers across the Istio ecosystem.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This will be the fourth Istio Day.&lt;a href=&#34;https://istio.io/latest/blog/2023/istio-at-kubecon-eu/&#34;&gt; The first Istio Day&lt;/a&gt; was co-located with KubeCon Europe 2023, in Amsterdam. This colocated event replaces ServiceMeshCon, which was first held in 2019, before Istio was a CNCF project.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Who will get the most out of attending this event?&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Developers, operators, platform engineers, architects, product managers, open-source enthusiasts, and C-level executives who are keen on enhancing their microservice management and increasing productivity within their companies.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;What is new and different this year?&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This year, Istio Day will be putting first things first, focusing on the most important part of the project: our users. Attendees will hear from project maintainers and world-class Istio practitioners alike, equipping them with new skills, industry insights, and more!&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;What will the day look like?&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This year, Istio Day will be a half-day event filled with a plethora of engaging sessions for all skill levels. It will feature lightning talks, a panel, and technical deep dives on topics such as seamless upgrades, multi-cluster, Ambient mode, and security . The Istio community will also have a project kiosk at the main KubeCon conference; please come and meet our community members!&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Should I do any homework first?&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;While no advanced preparation is needed, having a basic understanding of the concept of a service mesh and the goals of Istio in particular will allow participants to take full advantage of the opportunities presented. Sessions are designed for all levels of experience – from novice to knowledgeable.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Find your community!&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Istio Day offers a wonderful learning and collaboration opportunity to attendees. Most of the project maintainers, steering committee, and technical oversight committee will be there. Many people-years of real-world experience, hard-won war stories, and uniquely creative insights make this a guaranteed accelerator wherever someone is in their service mesh journey.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Contributed by the co-chairs.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/register/&#34;&gt;Don’t forget to register&lt;/a&gt; for KubeCon + CloudNativeCon North America 2024.&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;】&lt;p&gt;&lt;em&gt;联合主席：Iris Ding 和 Keith Mattix&lt;br&gt;2024 年 11 月 12 日&lt;br&gt;犹他州盐湖城&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class =“wp-block-image size-full”&gt;&lt;img加载=“lazy”解码=“异步”宽度=“205”高度=“67”src=“https://www.cncf.io/ wp-content/uploads/2024/09/Istio-Day-NA_2023_Logos_Istio-Day-Logo-Color.svg&#34; alt=&#34;istio day&#34; class=&#34;wp-image-117642&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;/figure &gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/co- located-events/istio-day/&#34;&gt;Istio Day&lt;/a&gt; 是一年两次的社区活动业界采用最广泛且功能丰富的服务网格，与会者将在生产环境中找到运行 Istio 的经验教训、Istio 环境模式开发的最新更新，以及与整个 Istio 生态系统的维护人员会面和学习的机会。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;这将是第四个 Istio Day。&lt;a href=&#34;https://istio.io/latest/blog/2023/istio-at-kubecon-eu/&#34;&gt;第一个 Istio Day&lt;/a&gt; 是- 与 KubeCon Europe 2023 一起在阿姆斯特丹举办。此次同地举办的活动取代了 ServiceMeshCon，ServiceMeshCon 于 2019 年首次举办，当时 Istio 还没有成为 CNCF 项目。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;谁将从参加本次活动中获益最多？&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;热衷于增强微服务管理并提高公司生产力的开发人员、运维人员、平台工程师、架构师、产品经理、开源爱好者和 C 级管理人员。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;今年有什么新的和不同的？&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;今年，Istio Day 将把要事放在第一位，重点关注项目中最重要的部分：我们的用户。与会者将听到项目维护者和世界一流的 Istio 从业者的演讲，为他们提供新技能、行业见解等等！ &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;这一天会是什么样子？&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;今年的 Istio Day 将是一个为期半天的活动，其中包含适合所有技能水平的大量引人入胜的课程。它将包括闪电演讲、小组讨论以及关于无缝升级、多集群、环境模式和安全等主题的技术深入探讨。 Istio 社区还将在 KubeCon 主会议上设有项目亭；请来见见我们的社区成员！&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;我应该先做作业吗？&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;虽然不需要预先准备，但对服务网格的概念和 Istio 的目标有基本的了解将使参与者能够充分利用所提供的机会。课程专为各个级别的经验而设计——从新手到知识渊博的人。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;找到您的社区！&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Istio Day 为与会者提供了绝佳的学习和协作机会。大多数项目维护人员、指导委员会和技术监督委员会都会出席。许多人多年的现实世界经验、来之不易的战争故事以及独特的创意见解使其成为有保证的加速器无论某人在服务网格之旅中处于什么位置，都可以使用它。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;由联合主席贡献。&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/register/&#34;&gt;不要忘记注册&lt;/a&gt;参加 KubeCon + CloudNativeCon North America 2024。&lt;/ p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;</description>
      <pubDate>Mon, 16 Sep 2024 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Artifact Hub becomes a CNCF incubating project】Artifact Hub 成为 CNCF 孵化项目</title>
      <link>https://www.cncf.io/blog/2024/09/17/artifact-hub-becomes-a-cncf-incubating-project/</link>
      <description>【&lt;p&gt;The CNCF Technical Oversight Committee (TOC) has voted to accept &lt;a href=&#34;https://artifacthub.io/&#34;&gt;Artifact Hub&lt;/a&gt; as a CNCF incubating project.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Artifact Hub is a web-based application that enables finding, installing, and publishing cloud native packages and configurations. Discovering useful cloud native artifacts like Helm charts can be difficult with general-purpose search engines. Artifact Hub makes finding artifacts easier by providing target searches.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote class=&#34;wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow&#34;&gt;&#xA;&lt;p&gt;“Artifact Hub was created to bring together the discovery of cloud native artifacts. Prior to Artifact Hub, people had to use general search engines or targeted ones for a specific type (like the now deprecated Helm Hub) to find artifacts,” said Matt Farina, Artifact Hub maintainer and Distinguished Engineer at SUSE. “The experience had room for improvement. Dan Kohn, the founding executive director of CNCF, noticed this problem and brought together people involved with it at KubeCon + CloudNativeCon North America 2019 in San Diego. Artifact Hub was born from those conversations and became a sandbox project in 2020.”&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Numerous types of artifacts are supported, including Argo templates, Backstage plugins, Container images, CoreDNS plugins, Falco rules, Headlamp plugins, Helm charts and plugins, Inspektor gadgets, KCL modules, KEDA scalers, Keptn integrations, Knative client plugins, Kubectl plugins, KubeArmor policies, Kubewarden policies, Kyverno policies, Meshery designs, OLM operators, OPA and Gatekeeper policies, OpenCost plugins, Tekton packages, and Tinkerbell actions.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Since joining the CNCF Sandbox, Artifact Hub has:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;Added more than 20 types of artifacts it supports;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Added more detail on projects – for example providing vulnerability scan results where an artifact references container images;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Highlighted related artifacts;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Informed people of official sources;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Continually grown the number of artifacts listed by 18x and hundreds of new packages are added every month, and more.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote class=&#34;wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow&#34;&gt;&#xA;&lt;p&gt;“We are thrilled to provide an intuitive and easy to use solution that allows our users to discover and publish multiple kinds of Cloud Native artifacts from a single place. At the moment we support 26 different types of artifacts (most from other CNCF projects), and we’re looking forward to adding more in the future!” – Sergio Castaño Arteaga and Cintia Sanchez Garcia, Software Engineers at CNCF&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Notable Milestones&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The main public deployment is available at &lt;a href=&#34;https://artifacthub.io/&#34;&gt;https://artifacthub.io&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;1.6k&lt;/strong&gt; GitHub Stars&amp;nbsp;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;1.8k &lt;/strong&gt;pull requests (excluding dependabot ones)&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;818&lt;/strong&gt; issues&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;41&lt;/strong&gt; contributors&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;41&lt;/strong&gt; Releases&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;15k&lt;/strong&gt; packages and &lt;strong&gt;285k&lt;/strong&gt; releases&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;4.1k&lt;/strong&gt; repositories (the source of the packages published on Artifact Hub)&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;2.5k&lt;/strong&gt; registered organizations and &lt;strong&gt;31k&lt;/strong&gt; users&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Monthly packages views keep growing, reaching &lt;strong&gt;~700k&lt;/strong&gt; at the moment&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For the future, Artifact Hub’s &lt;a href=&#34;https://github.com/artifacthub/hub/blob/master/ROADMAP.md&#34;&gt;roadmap&lt;/a&gt; is focused on three categories:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;Adding &lt;strong&gt;support for more Cloud Native artifacts&lt;/strong&gt; from CNCF projects&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;Improving documentation&lt;/strong&gt; to consolidate useful information spread across issues, discussions and Slack conversations&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Continuing to &lt;strong&gt;improve users’ experience&lt;/strong&gt; to make it easier to find artifacts and explore their content&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As a CNCF-hosted project, Artifact Hub is part of a neutral foundation aligned with its technical interests, as well as the larger Linux Foundation, which provides governance, marketing support, and community outreach. Artifact Hub joins incubating technologies Backstage, Buildpacks, cert-manager, Chaos Mesh, Cloud Custodian, Container Network Interface (CNI), Contour, Cortex, Crossplane, CubeFS, Dapr, Dragonfly, Emissary-Ingress, gRPC, in-toto, Karmada, Keptn, Keycloak, Knative, KubeEdge, Kubeflow, KubeVela, KubeVirt, Kyverno, Litmus, Longhorn, NATS, Notary, OpenFeature, OpenKruise, OpenMetrics, OpenTelemetry, Operator Framework, Strimzi, Thanos, and Volcano. For more information on maturity requirements for each level, please visit the &lt;a href=&#34;https://github.com/cncf/toc/blob/main/process/graduation_criteria.md&#34;&gt;CNCF Graduation Criteria&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;】&lt;p&gt;CNCF 技术监督委员会 (TOC) 已投票接受 &lt;a href=&#34;https://artifacthub.io/&#34;&gt;Artifact Hub&lt;/a&gt; 作为 CNCF 孵化项目。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Artifact Hub 是一个基于 Web 的应用程序，可用于查找、安装和发布云本机包和配置。使用通用搜索引擎发现有用的云原生工件（例如 Helm 图表）可能很困难。 Artifact Hub 通过提供目标搜索，使查找工件变得更加容易。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote class=&#34;wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow&#34;&gt;&#xA;&lt;p&gt;“Artifact Hub 的创建是为了汇集云原生工件的发现。在 Artifact Hub 出现之前，人们必须使用通用搜索引擎或特定类型的目标搜索引擎（例如现已弃用的 Helm Hub）来查找工件。”Artifact Hub 维护者兼 SUSE 杰出工程师 Matt Farina 说道。 “体验还有改进的空间。 CNCF 的创始执行董事 Dan Kohn 注意到了这个问题，并在圣地亚哥举行的 2019 年 KubeCon + CloudNativeCon 北美大会上召集了相关人员。 Artifact Hub 在这些对话中诞生，并于 2020 年成为一个沙盒项目。”&lt;/p&gt;&#xA;&lt;/块引用&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;支持多种类型的工件，包括 Argo 模板、Backstage 插件、容器映像、CoreDNS 插件、Falco 规则、Headlamp 插件、Helm 图表和插件、Inspektor 小工具、KCL 模块、KEDA 缩放器、Keptn 集成、Knative 客户端插件、 Kubectl 插件、KubeArmor 策略、Kubewarden 策略、Kyverno 策略、Mesery 设计、OLM 运算符、OPA 和 Gatekeeper 策略、OpenCost 插件、Tekton 包和 Tinkerbell 操作。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;自从加入 CNCF 沙盒以来，Artifact Hub 已经：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;添加了支持的 20 多种工件类型；&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;添加了有关项目的更多详细信息 - 例如，在工件引用容器映像的情况下提供漏洞扫描结果；&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;突出显示相关工件；&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;了解官方消息来源的人士；&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;列出的工件数量不断增加 18 倍，并且每月都会添加数百个新软件包等等。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote class=&#34;wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow&#34;&gt;&#xA;&lt;p&gt;“我们很高兴能够提供一个直观且易于使用的解决方案，使我们的用户能够从一个地方发现和发布多种云原生工件。目前我们支持 26 种不同类型的工件（大多数来自其他 CNCF 项目），我们期待将来添加更多！” – CNCF 软件工程师 Sergio Castaño Arteaga 和 Cintia Sanchez Garcia&lt;/p&gt;&#xA;&lt;/块引用&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;值得注意的里程碑&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;主要的公共部署位于&lt;a href=&#34;https://artifacthub.io/&#34;&gt;https://artifacthub.io&lt;/a&gt;&lt;strong&gt;。&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;强&gt;1.6k&lt;/strong&gt; GitHub 星数&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;1.8k &lt;/strong&gt;拉取请求（不包括 dependentabot 请求）&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;818&lt;/strong&gt; 个问题&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;41&lt;/strong&gt; 贡献者&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;41&lt;/strong&gt; 版本&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;15k&lt;/strong&gt; 软件包和 &lt;strong&gt;285k&lt;/strong&gt; 版本&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;4.1k&lt;/strong&gt; 存储库（Artifact Hub 上发布的软件包的来源）&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;2.5k&lt;/strong&gt; 注册组织和 &lt;strong&gt;31k&lt;/strong&gt; 用户&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;每月套餐浏览量持续增长，目前已达到&lt;strong&gt;约 70 万&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;对于未来，Artifact Hub 的&lt;a href=&#34;https://github.com/artifacthub/hub/blob/master/ROADMAP.md&#34;&gt;路线图&lt;/a&gt;重点关注三个类别：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol类=“wp-block-list”&gt;&#xA;&lt;li&gt;添加对 CNCF 项目&lt;strong&gt;更多云原生工件的支持&lt;/strong&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;改进文档&lt;/strong&gt;以整合分布在问题、讨论和 Slack 对话中的有用信息&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;继续&lt;strong&gt;改善用户体验&lt;/strong&gt;，让用户更轻松地查找工件并探索其内容&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;作为 CNCF 托管的项目，Artifact Hub 是与其技术利益一致的中立基金会以及更大的 Linux 基金会的一部分，后者提供治理、营销支持和社区外展。 Artifact Hub 加入孵化技术 Backstage、Buildpacks、cert-manager、Chaos Mesh、Cloud Custodian、Container Network Interface (CNI)、Contour、Cortex、Crossplane、CubeFS、Dapr、Dragonfly、Emissary-Ingress、gRPC、in-toto、Karmada、 Keptn、Keycloak、Knative、KubeEdge、Kubeflow、KubeVela、KubeVirt、Kyverno、Litmus、Longhorn、NATS、Notary、OpenFeature、OpenKruise、OpenMetrics、OpenTelemetry、Operator Framework、Strimzi、Thanos 和 Volcano。有关每个级别的成熟度要求的更多信息，请访问&lt;a href=&#34;https://github.com/cncf/toc/blob/main/process/graduation_criteria.md&#34;&gt;CNCF 毕业标准&lt;/a&gt;。&lt; /p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;</description>
      <pubDate>Mon, 16 Sep 2024 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Understanding cloud native maturity: a survey to assess end-user progress】了解云原生成熟度：评估最终用户进展的调查</title>
      <link>https://www.cncf.io/blog/2024/09/13/understanding-cloud-native-maturity-a-survey-to-assess-end-user-progress/</link>
      <description>【&lt;p&gt;&lt;em&gt;Community post by Danielle Cook, Cartografos Working Group&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As organizations continue their journey toward digital transformation, cloud native technologies are increasingly critical for achieving agility, scalability, and resilience. However, the path to cloud native maturity is not uniform across organizations. Some have embraced the model fully, reaping its benefits, while others are still navigating the complexities.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;To better understand where companies stand in this journey, the Cartografos Working Group wants to hear from you to evaluate end users against the cloud native maturity model. You can complete the &lt;a href=&#34;https://docs.google.com/forms/d/e/1FAIpQLSeu8EzZnairSaquVUKtAA1gZ3nzFQ0oPm-PbO4sHRt2zBOIaQ/viewform?usp=sf_link&#34;&gt;Google Form&lt;/a&gt; here. All data is anonymous!&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;The Purpose Behind the Survey&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The Cloud Native Maturity Model serves as a framework to assess an organization’s progress in adopting cloud native practices. It identifies different levels of maturity, ranging from initial adoption to full-scale, automated operations that align with business goals. While the model provides a clear pathway for organizations, our experience tells us that the reality is often more nuanced. This quick five minute survey aims to validate the levels of maturity outlined in the model and identify where end users need additional support and information.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;By understanding the current state of cloud native adoption, we can better serve the community. We want to help organizations bridge the gap between where they are and where they need to be, offering targeted resources and guidance that align with their specific needs.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;What the Survey Will Measure&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The annoymous &lt;a href=&#34;https://docs.google.com/forms/d/e/1FAIpQLSeu8EzZnairSaquVUKtAA1gZ3nzFQ0oPm-PbO4sHRt2zBOIaQ/viewform?usp=sf_link&#34;&gt;survey&lt;/a&gt; focuses several key areas that are critical to cloud native maturity:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;Cloud Strategy and Alignment&lt;/strong&gt;: Evaluating how integrated and strategic the cloud-native approach is within your organization and its alignment with overall IT strategy.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;Business Impact and Success Metrics&lt;/strong&gt;: Assessing the criticality of business drivers like cost savings, agility, and innovation, and how effectively success is measured for cloud-native projects.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;Skills, Resources, and Change Management&lt;/strong&gt;: Understanding the organization’s cloud-native skills, resource availability, and the effectiveness of training, change management, and support structures.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;Technology and Process Maturity&lt;/strong&gt;: Measuring the maturity and effectiveness of CI/CD pipelines, security practices, observability, and the impact of cloud-native technologies on development and deployment processes.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;Governance and Culture&lt;/strong&gt;: Reviewing governance, compliance management, and how cloud-native adoption has influenced organizational culture and collaboration between teams.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;Why Your Participation Matters&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The insights gained from this annoyoumous &lt;a href=&#34;https://docs.google.com/forms/d/e/1FAIpQLSeu8EzZnairSaquVUKtAA1gZ3nzFQ0oPm-PbO4sHRt2zBOIaQ/viewform?usp=sf_link&#34;&gt;survey&lt;/a&gt; will be invaluable in shaping the future of the Cloud Native Maturity Model. By participating, you’ll contribute to a better understanding of where the community stands and help identify the areas that require more attention and resources. In return, you’ll be able to read about where the industry is in cloud native maturity and review recommendations in the updated maturity model on how to advance further.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;What’s Next?&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Once the survey is complete, we will analyze the data, publish the results and update the Cloud Native Maturity Model accordingly.&amp;nbsp;&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The Cartografos Working Group is committed to helping organizations navigate the complexities of cloud native technologies. Please take just five minutes to help support this effort!&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.google.com/forms/d/e/1FAIpQLSeu8EzZnairSaquVUKtAA1gZ3nzFQ0oPm-PbO4sHRt2zBOIaQ/viewform?usp=sf_link&#34;&gt;Complete the form&lt;/a&gt;.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;】&lt;p&gt;&lt;em&gt;Cartografos 工作组 Danielle Cook 的社区帖子&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;随着组织继续迈向数字化转型，云原生技术对于实现敏捷性、可扩展性和弹性变得越来越重要。然而，云原生成熟之路在各个组织中并不统一。一些人已经完全接受了该模型，并从中获益，而另一些人仍在应对复杂性。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;为了更好地了解公司在此过程中所处的位置，Cartografos 工作组希望听取您的意见，以根据云原生成熟度模型评估最终用户。您可以在此处填写 &lt;a href=&#34;https://docs.google.com/forms/d/e/1FAIpQLSeu8EzZnairSaquVUKtAA1gZ3nzFQ0oPm-PbO4sHRt2zBOIaQ/viewform?usp=sf_link&#34;&gt;Google 表单&lt;/a&gt;。所有数据都是匿名的！ &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;调查背后的目的&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;云原生成熟度模型作为一个框架来评估组织在采用云原生实践方面的进展。它确定了不同的成熟度级别，从最初采用到符合业务目标的全面自动化运营。虽然该模型为组织提供了清晰的途径，但我们的经验告诉我们，现实往往更加微妙。这项为期五分钟的快速调查旨在验证模型中概述的成熟度级别，并确定最终用户在哪些方面需要额外的支持和信息。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;通过了解云原生采用的现状，我们可以更好地服务社区。我们希望帮助组织弥合现状与需求之间的差距，提供符合其特定需求的有针对性的资源和指导。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;调查将衡量什么&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;这项令人讨厌的&lt;a href=&#34;https://docs.google.com/forms/d/e/1FAIpQLSeu8EzZnairSaquVUKtAA1gZ3nzFQ0oPm-PbO4sHRt2zBOIaQ/viewform?usp=sf_link&#34;&gt;调查&lt;/a&gt;重点关注了对云原生成熟度：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol类=“wp-block-list”&gt;&#xA;&lt;li&gt;&lt;strong&gt;云战略和一致性&lt;/strong&gt;：评估云原生方法在组织内的集成度和战略性及其与整体 IT 战略的一致性。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;业务影响和成功指标&lt;/strong&gt;：评估成本节约、敏捷性和创新等业务驱动因素的重要性，以及如何有效衡量云原生项目的成功。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;技能、资源和变革管理&lt;/strong&gt;：了解组织的云原生技能、资源可用性以及培训、变革管理和支持结构的有效性。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;技术和流程成熟度&lt;/strong&gt;：衡量 CI/CD 管道、安全实践、可观察性以及云原生技术对开发和部署流程的影响的成熟度和有效性。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;治理和文化&lt;/strong&gt;：审查治理、合规管理以及云原生采用如何影响组织文化和团队之间的协作。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;为什么您的参与很重要&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;从这项烦人的&lt;a href=&#34;https://docs.google.com/forms/d/e/1FAIpQLSeu8EzZnairSaquVUKtAA1gZ3nzFQ0oPm-PbO4sHRt2zBOIaQ/viewform?usp=sf_link&#34;&gt;调查&lt;/a&gt;中获得的见解对于以下领域来说非常宝贵：塑造云原生成熟度模型的未来。通过参与，您将有助于更好地了解社区的现状，并帮助确定需要更多关注和资源的领域。作为回报，您将能够了解该行业的云原生成熟度，并查看更新的成熟度模型中有关如何进一步推进的建议。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;下一步是什么？&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;调查完成后，我们将分析数据、发布结果并相应更新云原生成熟度模型。  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Cartografos 工作组致力于帮助组织应对云原生技术的复杂性。请花五分钟时间来帮助支持这项努力！ &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.google.com/forms/d/e/1FAIpQLSeu8EzZnairSaquVUKtAA1gZ3nzFQ0oPm-PbO4sHRt2zBOIaQ/viewform?usp=sf_link&#34;&gt;填写表单&lt;/a&gt;。 &lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;</description>
      <pubDate>Thu, 12 Sep 2024 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【OpenMetrics is archived, merged into Prometheus】OpenMetrics 已归档，并入 Prometheus</title>
      <link>https://www.cncf.io/blog/2024/09/18/openmetrics-is-archived-merged-into-prometheus/</link>
      <description>【&lt;p&gt;&lt;em&gt;Community post originally published on &lt;a href=&#34;https://horovits.medium.com/openmetrics-is-archived-merged-into-prometheus-d555598d2d04&#34;&gt;Medium&lt;/a&gt; by Dotan Horovits&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;&lt;em&gt;OpenMetrics is finally back where it has always belonged — Prometheus format&lt;/em&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p id=&#34;890c&#34;&gt;Last month the&amp;nbsp;&lt;a href=&#34;https://github.com/cncf/toc/issues/1364&#34; rel=&#34;noreferrer noopener&#34; target=&#34;_blank&#34;&gt;OpenMetrics project was officially archived&lt;/a&gt;&amp;nbsp;and folded into Prometheus. That’s the end of an open source project journey that ends exactly where it all started.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://miro.medium.com/v2/resize:fit:1284/1*TNZnUyLrsywotw_1RkRdyA.png&#34; alt=&#34;openmetrics archive image&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;CNCF TOC GitHub Issue #1364&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p id=&#34;cfe0&#34;&gt;It’s an interesting story.&amp;nbsp;&lt;a href=&#34;https://github.com/OpenObservability/OpenMetrics&#34; rel=&#34;noreferrer noopener&#34; target=&#34;_blank&#34;&gt;OpenMetrics&lt;/a&gt;&amp;nbsp;was originally born as an attempt to spin off&amp;nbsp;&lt;a href=&#34;https://prometheus.io/docs/instrumenting/exposition_formats/&#34; rel=&#34;noreferrer noopener&#34; target=&#34;_blank&#34;&gt;Prometheus exposition format&lt;/a&gt;&amp;nbsp;into an independent and tool-agnostic open specification.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p id=&#34;d98f&#34;&gt;It was even placed under a new independent umbrella repo on GitHub called&amp;nbsp;&lt;em&gt;OpenObservability&lt;/em&gt;&amp;nbsp;(no relation to my podcast&amp;nbsp;&lt;a href=&#34;https://podcasters.spotify.com/pod/show/openobservability&#34; rel=&#34;noreferrer noopener&#34; target=&#34;_blank&#34;&gt;OpenObservability Talks&lt;/a&gt;&amp;nbsp;😊)&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://miro.medium.com/v2/resize:fit:1400/1*dZOL2fzFSXVvxNC5HSPC6w.png&#34; alt=&#34;open metrics&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Source:&amp;nbsp;&lt;a href=&#34;https://openmetrics.io/&#34; rel=&#34;noreferrer noopener&#34; target=&#34;_blank&#34;&gt;openmetrics.io&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p id=&#34;7eaa&#34;&gt;At some point a few years ago there was even an attempt to turn it into an official IETF open standard (RFC2119), which hasn’t come to fruition.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;https://cdn.embedly.com/widgets/media.html?type=text%2Fhtml&amp;amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;amp;schema=twitter&amp;amp;url=https%3A//x.com/horovits/status/1329055658663096327&amp;amp;image=&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p id=&#34;0547&#34;&gt;But ultimately,&amp;nbsp;&lt;a href=&#34;https://horovits.medium.com/prometheus-roadmap-and-latest-updates-fbede9b5cc9&#34;&gt;Prometheus itself is today a de-facto standard&lt;/a&gt;, at least in the cloud-native space. Many tools today provide out-of-the-box support for&amp;nbsp;&lt;a href=&#34;https://prometheus.io/docs/instrumenting/exporters/&#34; rel=&#34;noreferrer noopener&#34; target=&#34;_blank&#34;&gt;exporting metrics in Prometheus format&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p id=&#34;4b13&#34;&gt;And as to tools outside the Prometheus ecosystem, they have their own formats and haven’t jumped to switch. Because, let’s face it, as elegant as the notion of an abstract universal exposition format is, in reality these formats are quite coupled to the way the data is stored and represented internally in the tool.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p id=&#34;52e1&#34;&gt;In attempt to make OpenMetrics bigger than “just the Prometheus format”, it has also caused some confusion among Prometheus users, as to which format to use for exporting and receiving metric time-series data. It was even more confusing since they two are fairly similar, but then have their divergent points.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p id=&#34;b154&#34;&gt;Not to mention the confusion in the broader community with the&amp;nbsp;&lt;a href=&#34;https://horovits.medium.com/quick-dictionary-to-open-x-projects-in-observability-e9e48f0113de&#34;&gt;abundance of Open&amp;lt;X&amp;gt; projects&lt;/a&gt;.&lt;a href=&#34;https://horovits.medium.com/quick-dictionary-to-open-x-projects-in-observability-e9e48f0113de?source=post_page-----d555598d2d04--------------------------------&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;98ec&#34;&gt;OpenMetrics is finally back where it has always belonged — Prometheus format&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p id=&#34;501a&#34;&gt;Last month, July 2024, the Technical Oversight Committee of the&amp;nbsp;&lt;a href=&#34;https://horovits.medium.com/a-fireside-chat-with-cncfs-cto-on-opentelemetry-and-more-8badb90d945&#34;&gt;Cloud Native Computing Foundation&lt;/a&gt;&amp;nbsp;(CNCF TOC for short) has approved and signed the archiving of OpenMetrics and migrating it under Prometheus.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p id=&#34;4de3&#34;&gt;Ultimately it’s a good thing. A project can be both a tool and a specification. Just like we do with&amp;nbsp;&lt;a href=&#34;https://logz.io/learn/opentelemetry-guide//&#34; rel=&#34;noreferrer noopener&#34; target=&#34;_blank&#34;&gt;OpenTelemetry&lt;/a&gt;. No need for separate projects here. This merge will realign the efforts around Prometheus, simplify things and reduce confusion and overhead.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p id=&#34;08f3&#34;&gt;&lt;strong&gt;OpenMetrics is dead, long live OpenMetrics (as Prometheus format).&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p id=&#34;603c&#34;&gt;You can read more about&amp;nbsp;&lt;a href=&#34;https://medium.com/@horovits/the-rise-of-open-standards-in-observability-highlights-from-kubecon-13694e732c97&#34;&gt;open specifications in observability here&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a rel=&#34;noreferrer noopener&#34; target=&#34;_blank&#34; href=&#34;https://horovits.medium.com/the-rise-of-open-standards-in-observability-highlights-from-kubecon-13694e732c97?source=post_page-----d555598d2d04--------------------------------&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;】&lt;p&gt;&lt;em&gt;社区帖子最初由 Dotan Horovits 在 &lt;a href=&#34;https://horovits.medium.com/openmetrics-is-archived-merged-into-prometheus-d555598d2d04&#34;&gt;Medium&lt;/a&gt; 上发布&lt; /em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;&lt;em&gt;OpenMetrics 终于回到了它一直所属的地方 - Prometheus 格式&lt;/em&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p id=&#34;890c&#34;&gt;上个月&lt;a href=&#34;https://github.com/cncf/toc/issues/1364&#34; rel=&#34;noreferrer noopener&#34; target=&#34;_blank&#34;&gt;OpenMetrics 项目已正式存档&lt; /a&gt; 并折叠到 Prometheus 中。这是开源项目之旅的结束，也正是一切开始的地方。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://miro.medium.com/v2/resize:fit:1284/1*TNZnUyLrsywotw_1RkRdyA.png&#34; alt=&#34;openmetrics存档图像”referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;CNCF TOC GitHub Issue #1364&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p id=&#34;cfe0&#34;&gt;这是一个有趣的故事。 &lt;a href=&#34;https://github.com/OpenObservability/OpenMetrics&#34; rel=&#34;noreferrer noopener&#34; target=&#34;_blank&#34;&gt;OpenMetrics&lt;/a&gt;最初诞生是为了尝试分拆&lt;a href=&#34;https: //prometheus.io/docs/instrumenting/exposition_formats/&#34; rel=&#34;noreferrer noopener&#34; target=&#34;_blank&#34;&gt;Prometheus 展示格式&lt;/a&gt;成为独立且与工具无关的开放规范。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p id=&#34;d98f&#34;&gt;它甚至被放置在 GitHub 上一个名为 OpenObservability 的新独立伞式存储库下（与我的播客无关&lt;a href=&#34;https://podcasters.spotify.com/ pod/show/openobservability&#34; rel=&#34;noreferrer noopener&#34; target=&#34;_blank&#34;&gt;OpenObservability 讲座&lt;/a&gt; 😊)&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://miro.medium.com/v2/resize:fit:1400/1*dZOL2fzFSXVvxNC5HSPC6w.png&#34; alt=&#34;open指标&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;来源：&lt;a href=&#34;https://openmetrics.io/&#34; rel=&#34;noreferrer noopener&#34; target=&#34;_blank&#34;&gt; openmetrics.io&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p id=&#34;7eaa&#34;&gt;几年前的某个时候，甚至有人试图将其变成官方的 IETF 开放标准 (RFC2119)，但尚未实现。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;https://cdn.embedly.com/widgets/media.html?type=text%2Fhtml&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;schema=twitter&amp;url=https%3A //x.com/horovits/status/1329055658663096327&amp;image=&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p id=&#34;0547&#34;&gt;但最终，&lt;a href=&#34;https://horovits.medium.com/prometheus-roadmap-and-latest-updates-fbede9b5cc9&#34;&gt;Prometheus 本身如今已成为事实上的标准&lt;/ a&gt;，至少在云原生领域是这样。如今，许多工具都为&lt;a href=&#34;https://prometheus.io/docs/instrumenting/exporters/&#34; rel=&#34;noreferrer noopener&#34; target=&#34;_blank&#34;&gt;以 Prometheus 格式导出指标提供开箱即用的支持&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p id=&#34;4b13&#34;&gt;而对于 Prometheus 生态之外的工具，它们都有自己的格式，并没有跳跃式切换。因为，让我们面对现实吧，就像抽象普遍阐述的概念一样优雅实际上，这些格式与工具内部存储和表示数据的方式非常耦合。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p id=&#34;52e1&#34;&gt;为了使 OpenMetrics 比“仅 Prometheus 格式”更大，它也给 Prometheus 用户带来了一些困惑，即使用哪种格式导出和接收指标时间序列数据。更令人困惑的是，两者非常相似，但又有不同点。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p id=&#34;b154&#34;&gt;更不用说更广泛的社区对 &lt;a href=&#34;https://horovits.medium.com/quick-dictionary-to-open-x-projects-in-observability- e9e48f0113de&#34;&gt;大量的 Open&lt;X&gt; 项目&lt;/a&gt;。&lt;a href=&#34;https://horovits.medium.com/quick-dictionary-to-open-x-projects-in-observability-e9e48f0113de?source= post_page-----d555598d2d04--------------------------------&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener &#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;98ec&#34;&gt;OpenMetrics 终于回到了它一直所属的地方 — Prometheus 格式&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p id=&#34;501a&#34;&gt;上个月，即 2024 年 7 月，&lt;a href=&#34;https://horovits.medium.com/a-fireside-chat-with-cncfs-cto-on-opentelemetry 的技术监督委员会-and-more-8badb90d945&#34;&gt;云原生计算基金会&lt;/a&gt;（简称 CNCF TOC）已批准并签署 OpenMetrics 归档并将其迁移到 Prometheus 下。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p id=&#34;4de3&#34;&gt;最终这是一件好事。项目既可以是工具，也可以是规范。就像我们对 &lt;a href=&#34;https://logz.io/learn/opentelemetry-guide//&#34; rel=&#34;noreferrer noopener&#34; target=&#34;_blank&#34;&gt;OpenTelemetry&lt;/a&gt; 所做的那样。这里不需要单独的项目。这次合并将重新调整围绕 Prometheus 的工作，简化事情并减少混乱和开销。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p id=&#34;08f3&#34;&gt;&lt;strong&gt;OpenMetrics已死，OpenMetrics万岁（作为Prometheus格式）。&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p id=&#34;603c&#34;&gt;您可以详细了解 &lt;a href=&#34;https://medium.com/@horovits/the-rise-of-open-standards-in-observability-highlights-from-kubecon-13694e732c97 &#34;&gt;在此处开放可观察性规范&lt;/a&gt;。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a rel=&#34;noreferrer noopener&#34; target=&#34;_blank&#34; href=&#34;https://horovits.medium.com/the-rise-of-open-standards-in-observability-highlights-from-kubecon-13694e732c97 ?source=post_page-----d555598d2d04--------------------------------&#34;&gt;&lt;/a&gt;&lt;/ p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;</description>
      <pubDate>Tue, 17 Sep 2024 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【CNCF and the Linux Foundation partner with Unified Patents on a community-driven approach to deter patent trolls】CNCF 和 Linux 基金会与 Unified Patents 合作，采用社区驱动的方法来阻止专利流氓</title>
      <link>https://www.cncf.io/blog/2024/09/16/cncf-and-the-linux-foundation-partner-with-unified-patents-on-a-community-driven-approach-to-safeguard-open-source-innovation-from-patent-trolls/</link>
      <description>【&lt;p&gt;&lt;em&gt;Now is the time&amp;nbsp;for the open source ecosystem to band together and find strength in numbers&amp;nbsp;&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;CNCF and The Linux Foundation are expanding their partnership with &lt;a href=&#34;https://www.unifiedpatents.com/&#34;&gt;Unified Patents&lt;/a&gt; to protect open source software from non-practicing entities (NPEs), commonly referred to as “patent trolls.” This enhanced partnership brings new benefits to LF and CNCF members in terms of access to enhanced NPE deterrence mechanisms. In this blog, Joanna Lee, Vice President of Strategic Programs and Legal at CNCF and the Linux Foundation, explains what those benefits are, why they are needed, and why it is so important that open source users and vendors join together to protect the cloud native and open source ecosystems.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;Q: What are patent trolls and why are they a threat to open source?&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;JL: Patent trolls are entities whose sole purpose is to buy patents and threaten companies (both vendors and adopters) with patent litigation to extract money. Companies on the defense will often pay settlement fees to avoid the even higher cost of litigation, even when the troll’s patents and legal arguments are of questionable validity. Trolls use each of these wins to bolster the impression that they have an enforceable patent, and this helps them convince other companies to also settle.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;Q: Are these types of threats growing in open source?&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;JL: Patent trolls go after successful, broadly adopted technologies–whether closed or open source–because it’s a numbers game. Broad adoption and success equate to higher settlement payments and more companies to shake down for money. Any software that is pervasive and widely used are targets of NPE aggression.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;Q: What is Unified Patents and how do they deter NPEs?&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;JL: Unified Patents is a membership-based organization that uses a range of tools and strategies to deter NPEs from targeting specific technology areas, referred to as patent protection “zones.” In 2019, the Linux Foundation partnered with Unified Patents to establish an Open Source Zone. In addition to directly challenging NPE patents through invalidity proceedings (with a 90% success rate), Unified hosts crowdsourced prior art searches, shares intelligence about NPE campaigns, negotiates royalty-free licenses to benefit all companies who participate in the impacted zone, and arms companies with tools and information to strengthen their defense against NPE threats.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;Q: Why is a community-based approach so important?&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;JL:&amp;nbsp; Ultimately, we want patent trolls to conclude “the open source ecosystem is not worth our time because it has banded together and is too hard to shake down.‘’ When it comes to NPE deterrence, there is strength in numbers. When organizations join forces to safeguard open source innovation through Unified Patents’s programs, we can achieve far more with fewer resources than when individual companies act in isolation. Companies are far more vulnerable to NPE’s predatory behavior acting alone than when they work together to deter invalid assertions. Additionally, many companies find that it’s more cost-effective to sponsor certain types of deterrence activities through Unified than to pursue similar efforts on their own.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;Q: What are the new enhanced benefits for LF and CNCF members?&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;JL: As a result of this expanded partnership, members of the Linux Foundation and CNCF–over 1300 companies–will gain access to a &lt;a href=&#34;http://cncf.io/npe-deterrence-benefits&#34;&gt;suite of benefits&lt;/a&gt; based on their membership level to assist in proactive NPE deterrence, including:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;Annual NPE risk analysis&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Patent portfolio analysis tools&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Access to Unified’s PATROLL prior art contest submissions&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Regular updates regarding NPE campaigns, developments in patent laws and policies, and other news regarding NPEs and Standards Essential Patents&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Opportunity to sponsor crowdsourced prior art contests and benefit from any royalty-free licenses granted in resulting settlements.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;Q: What should adopters and vendors of open source do now?&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;JL: We encourage LF/CNCF members to take full advantage of the new benefits offered through this partnership. However, these benefits are just a starting point. We encourage all companies in our ecosystem to also participate in the broader set of NPE deterrence programs that Unified Patents offers, both to strengthen the collective defense and to support expansion of Unified’s deterrence activities to counter the rise in NPE aggression.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;Q: How can open source developers help?&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;JL: Open source developers can help by contributing evidence of prior art to Unified’s crowdsourced &lt;a href=&#34;https://patroll.unifiedpatents.com/contests&#34;&gt;PATROLL prior art contests&lt;/a&gt; for the Open Source Zone. Prior art–evidence that the claimed invention was publicly known about and therefore not “new” at the time the patent application was filed–can be used to invalidate an NPE’s patent. CNCF and Unified will co-host an in person PATROLL contest at KubeCon + CloudNativeCon North America 2024. The winner will be awarded a cash prize and recognized on the KubeCon keynote stage. More details will be announced soon.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;】&lt;p&gt;&lt;em&gt;现在是开源生态系统联合起来并发挥数量优势的时候了&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;CNCF 和 Linux 基金会正在扩大与 &lt;a href=&#34;https://www.unifiedpatents.com/&#34;&gt;Unified Patents&lt;/a&gt; 的合作伙伴关系，以保护开源软件免受非执业实体 (NPE) 的侵害，通常被称为“专利流氓”。这种加强的伙伴关系为 LF 和 CNCF 成员在获得增强的 NPE 威慑机制方面带来了新的好处。在这篇博客中，CNCF 和 Linux 基金会战略计划和法律副总裁 Joanna Lee 解释了这些好处是什么、为什么需要它们，以及为什么开源用户和供应商联合起来保护云如此重要原生和开源生态系统。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;问：什么是专利流氓以及为什么他们对开源构成威胁？&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;JL：专利流氓是一种实体，其唯一目的是购买专利并通过专利诉讼威胁公司（包括供应商和采用者）以获取金钱。辩方公司通常会支付和解费，以避免更高的诉讼成本，即使巨魔的专利和法律论据的有效性值得怀疑。巨魔们利用每一次胜利来增强他们拥有可执行专利的印象，这有助于他们说服其他公司也达成和解。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;问：这些类型的威胁在开源领域是否正在增长？&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;JL：专利流氓追求成功、广泛采用的技术——无论是封闭的还是开源的——因为这是一场数字游戏。广泛采用和成功意味着更高的和解费用以及更多的公司需要勒索资金。任何普遍且广泛使用的软件都是 NPE 攻击的目标。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;问：什么是统一专利以及它们如何阻止 NPE？&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;JL：Unified Patents 是一个会员制组织，它使用一系列工具和策略来阻止 NPE 针对特定技术领域（称为专利保护“区域”）。 2019 年，Linux 基金会与 Unified Patents 合作建立了开源专区。除了通过无效程序直接质疑 NPE 专利（成功率达 90%）外，Unified 还主持众包现有技术检索、分享有关 NPE 活动的情报、协商免版税许可，以使所有参与受影响区域的公司受益，并提供武器拥有工具和信息的公司可以加强对 NPE 威胁的防御。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;问：为什么基于社区的方法如此重要？&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;JL：最终，我们希望专利流氓得出这样的结论：“开源生态系统不值得我们花时间，因为它已经联合在一起，很难撼动。”当谈到 NPE 威慑时，有很多数字的力量。当组织通过统一专利计划联合起来保护开源创新时，我们可以用更少的资源取得比单个公司单独行动时更多的成果。与共同努力阻止无效断言相比，单独行动的公司更容易受到 NPE 掠夺性行为的影响。此外，许多公司发现通过 Unified 赞助某些类型的威慑活动比自行开展类似的活动更具成本效益。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;问：LF 和 CNCF 会员有哪些新的增强福利？&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;JL：由于扩大了合作伙伴关系，Linux 基金会和 CNCF 的成员（超过 1300 家公司）将获得 &lt;a href=&#34;http://cncf.io/npe-deterrence-benefits&#34;&gt;根据会员级别提供一系列福利&lt;/a&gt;，以协助主动威慑 NPE，包括：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;年度 NPE 风险分析&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;专利组合分析工具&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;访问 Unified PATROL 现有技术竞赛提交的作品&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;有关 NPE 活动的定期更新、专利法和政策的发展以及有关 NPE 和标准必要专利的其他新闻&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;有机会赞助众包现有技术竞赛，并从最终和解中授予的免版税许可中受益。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;问：开源的采用者和供应商现在应该做什么？&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;JL：我们鼓励 LF/CNCF 成员充分利用通过这种合作伙伴关系提供的新福利。然而，这些好处只是一个起点。我们鼓励生态系统中的所有公司也参与 Unified Patents 提供的更广泛的 NPE 威慑计划，既加强集体防御，又支持扩大 Unified 威慑活动，以应对 NPE 攻击的上升。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;&lt;strong&gt;问：开源开发者如何提供帮助？&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;JL：开源开发者可以通过向 Unified 开源区众包&lt;a href=&#34;https://patroll.unifiedpatents.com/contests&#34;&gt;PATROLL 现有技术竞赛&lt;/a&gt;提供现有技术证据来提供帮助。现有技术——证明所要求保护的发明在提交专利申请时已为公众所知，因此不是“新的”的证据——可用于使 NPE 的专利无效。 CNCF 和 Unified 将在 2024 年 KubeCon + CloudNativeCon North America 上共同举办现场 PATROLL 竞赛。获胜者将获得现金奖励，并在 KubeCon 主题演讲舞台上得到认可。更多细节将很快公布。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;</description>
      <pubDate>Sun, 15 Sep 2024 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【KubeCon + CloudNativeCon North America 2024 co-located event deep dive: OpenFeature Summit】KubeCon + CloudNativeCon North America 2024 同期举办活动深入探讨：OpenFeature 峰会</title>
      <link>https://www.cncf.io/blog/2024/09/18/kubecon-cloudnativecon-north-america-2024-co-located-event-deep-dive-openfeature-summit/</link>
      <description>【&lt;figure class=&#34;wp-block-image size-full&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;411&#34; height=&#34;78&#34; src=&#34;https://www.cncf.io/wp-content/uploads/2024/09/OpenFeatureSummit_NA_24_logo_OpenFeature-Day_logo_horizontal_color.svg&#34; alt=&#34;Openfeature summit&#34; class=&#34;wp-image-117659&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Co-chairs: David Hirsch, Michael Beemer&lt;br&gt;November 12, 2024&lt;br&gt;Salt Lake City, Utah&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The &lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/co-located-events/openfeature-summit/&#34;&gt;Open Feature Summit&lt;/a&gt; focuses on the use of feature flags and experimentation in cloud-native environments. It’s an event designed to help developers, architects, and decision-makers leverage feature management to accelerate release velocity and improve the reliability of deployments. The summit dives deep into the Open Feature project, which provides a unified standard for feature flags, making it easier to manage flags across diverse environments, tools, and programming languages. This is the first time the Open Feature Summit is being held as a co-located event at KubeCon + CloudNativeCon.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Who will get the most out of attending this event?&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Anyone who is involved in the development, deployment, or operation of cloud-native applications will benefit from attending. This includes developers, DevOps engineers, platform teams, and product managers. The event is particularly suited for those already using or considering the use of feature flags and looking to enhance their progressive delivery practices.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Should I do any homework first?&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;No formal prep work is required, but familiarity with the concept of feature flags and progressive delivery would be helpful. Attendees might want to explore the Open Feature documentation or check out the latest updates on GitHub to get an idea of what the project offers. Bringing specific challenges or use cases from your work can also help make discussions more valuable.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Anything else you would like to say about this event?&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The Open Feature Summit is a unique opportunity to connect with others who are passionate about improving software delivery through feature management. We’re excited to offer an interactive and practical experience, with sessions that will cater to everyone from beginners to advanced users. The goal is to leave attendees with actionable insights they can immediately apply to their own development workflows.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Submitted by David Hirsch, who is looking forward to seeing how the Open Feature ecosystem is evolving, particularly how it’s being adopted across different cloud-native tools.&amp;nbsp;&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/register/&#34;&gt;Don’t forget to register&lt;/a&gt; for KubeCon + CloudNativeCon North America 2024.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;】&lt;figure class =“wp-block-image size-full”&gt;&lt;img加载=“lazy”解码=“异步”宽度=“411”高度=“78”src=“https://www.cncf.io/ wp-content/uploads/2024/09/OpenFeatureSummit_NA_24_logo_OpenFeature-Day_logo_horizo​​ntal_color.svg&#34; alt=&#34;Openfeature Summit&#34; class=&#34;wp-image-117659&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;联合主席：David Hirsch、Michael Beemer&lt;br&gt;2024 年 11 月 12 日&lt;br&gt;犹他州盐湖城&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/co- located-events/openfeature-summit/&#34;&gt;开放功能峰会&lt;/a&gt;重点关注使用云原生环境中的功能标志和实验。该活动旨在帮助开发人员、架构师和决策者利用功能管理来加快发布速度并提高部署的可靠性。本次峰会深入探讨了开放功能项目，该项目为功能标志提供了统一的标准，使跨不同环境、工具和编程语言的标志管理变得更加容易。这是开放功能峰会首次在 KubeCon + CloudNativeCon 上同期举办。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;谁将从参加本次活动中获益最多？&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;任何参与云原生应用程序的开发、部署或运营的人都将从参加中受益。这包括开发人员、DevOps 工程师、平台团队和产品经理。该活动特别适合那些已经使用或考虑使用功能标志并希望增强其渐进式交付实践的人。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;我应该先做作业吗？&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;不需要正式的准备工作，但熟悉功能标志和渐进式交付的概念会很有帮助。与会者可能希望浏览开放功能文档或查看 GitHub 上的最新更新，以了解该项目提供的内容。提出工作中的具体挑战或用例也有助于使讨论更有价值。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;关于本次活动您还有什么想说的吗？&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;开放功能峰会是一个与其他热衷于通过功能管理改进软件交付的人建立联系的独特机会。我们很高兴能够提供互动和实践体验，其课程将满足从初学者到高级用户的每个人的需求。目标是让与会者获得可立即应用于自己的开发工作流程的可操作的见解。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;由 David Hirsch 提交，他期待看到开放功能生态系统如何发展，特别是它如何在不同的云原生工具中得到采用。 &lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/register/&#34;&gt;不要忘记注册&lt;/a&gt;参加 KubeCon + CloudNativeCon North America 2024。&lt;/ p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true“类=“wp-block-spacer is-style-80-120”&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;</description>
      <pubDate>Tue, 17 Sep 2024 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【What’s new in CRI-O 1.31】CRI-O 1.31 的新增内容</title>
      <link>https://www.cncf.io/blog/2024/09/12/whats-new-in-cri-o-1-31/</link>
      <description>【&lt;p&gt;&lt;em&gt;Project post originally published on &lt;a href=&#34;https://github.com/saschagrunert/website/blob/83577c3ceafd28bcb82c39b2af07e7af4d3abb68/content/en/blog/_posts/2024-09-18-cri-o-1.31.md&#34;&gt;Github &lt;/a&gt;by Sascha Grunert&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The CRI-O maintainers are happy and proud to announce that CRI-O&amp;nbsp;&lt;a href=&#34;https://github.com/cri-o/cri-o/releases/tag/v1.31.0&#34;&gt;v1.31.0&lt;/a&gt;&amp;nbsp;has been released! This brand new version contains a large list of cool new features, bug fixes and smaller enhancements. I would like to take the opportunity to guide you through CRI-O’s latest and greatest enhancements in the field of Kubernetes compliant container runtimes.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;New features&lt;a href=&#34;https://github.com/saschagrunert/website/blob/83577c3ceafd28bcb82c39b2af07e7af4d3abb68/content/en/blog/_posts/2024-09-18-cri-o-1.31.md#new-features&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The CRI-O community voted to use the OCI runtime&amp;nbsp;&lt;a href=&#34;https://github.com/containers/crun&#34;&gt;crun&lt;/a&gt;&amp;nbsp;as new default in replacement to&amp;nbsp;&lt;a href=&#34;https://github.com/opencontainers/runc&#34;&gt;runc&lt;/a&gt;. That’s actually not too new, because crun has been used as default runtime in the packages and static binary bundles for quite a while. The runtime offers an overall better performance and lower memory footprint than runc. It’s efficiency in terms of faster container start times and lower memory usage makes it a more optimized runtime for modern workloads, for example when it comes to edge use cases as well as running WebAssembly (Wasm) workloads.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;CRI-O v1.31 also features support for fine-grained&amp;nbsp;&lt;code&gt;SupplementalGroups&lt;/code&gt;&amp;nbsp;(&lt;a href=&#34;https://kep.k8s.io/3619&#34;&gt;KEP-3619&lt;/a&gt;), which allow to control and track how supplemental groups are applied to a container process. If you like to learn more about the feature itself, then feel free to read through the&amp;nbsp;&lt;a href=&#34;https://github.com/saschagrunert/website/blob/83577c3ceafd28bcb82c39b2af07e7af4d3abb68/blog/2024/08/22/fine-grained-supplementalgroups-control&#34;&gt;corresponding Kubernetes v1.31 blog post&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Beside that, the CRI-O maintainers also added support for the Kubernetes image volume source alpha feature (&lt;a href=&#34;https://kep.k8s.io/4639&#34;&gt;KEP-4639&lt;/a&gt;). This feature allows users to utilize OCI images and artifacts as custom volume source and mount them into containerized workloads. There is another&amp;nbsp;&lt;a href=&#34;https://github.com/saschagrunert/website/blob/83577c3ceafd28bcb82c39b2af07e7af4d3abb68/blog/2024/08/16/kubernetes-1-31-image-volume-source&#34;&gt;Kubernetes v1.31 blog post available&lt;/a&gt;&amp;nbsp;which covers more details about the functionality and usage of the feature.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;CRI-O now supports&amp;nbsp;&lt;a href=&#34;https://www.sigstore.dev/&#34;&gt;sigstore&lt;/a&gt;&amp;nbsp;(&lt;a href=&#34;https://github.com/sigstore/cosign&#34;&gt;cosign&lt;/a&gt;) signature verification for policies corresponding to a certain Kubernetes&amp;nbsp;&lt;a href=&#34;https://github.com/saschagrunert/website/blob/83577c3ceafd28bcb82c39b2af07e7af4d3abb68/docs/concepts/overview/working-with-objects/namespaces&#34;&gt;namespace&lt;/a&gt;. This means, that policies in the (default) directory&amp;nbsp;&lt;code&gt;/etc/crio/policies/[NAMESPACE].json&lt;/code&gt;&amp;nbsp;will be validated for each pod of the corresponding&amp;nbsp;&lt;code&gt;NAMESPACE&lt;/code&gt;. This will also happen on container creation, which is a huge step forward in enforcing sigstore policies for a dedicated Kubernetes namespace in comparison to policies which only apply to the whole cluster itself.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Beside the support for bigger Kubernetes features, CRI-O v1.31 ships a bunch of cool smaller enhancements, for example:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;Adding a&amp;nbsp;&lt;code&gt;--no-sync-log&lt;/code&gt;/&lt;code&gt;no_sync_log&lt;/code&gt;&amp;nbsp;option to disable&amp;nbsp;&lt;code&gt;fsync&lt;/code&gt;&amp;nbsp;on container log rotation and container exit. This can improve performance at the cost of potential data loss on machine crashes.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Respecting the image pull timeout set by the RPC context to potentially abort an ongoing image pull.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Adding&amp;nbsp;&lt;code&gt;/dev/net/tun&lt;/code&gt;&amp;nbsp;to the default allowed devices, which helps users to run&amp;nbsp;&lt;a href=&#34;https://podman.io/&#34;&gt;Podman&lt;/a&gt;&amp;nbsp;inside containers.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Showing the current runtime configuration in the CRI-O logs for maximum transparency with respect to the loaded in-memory configuration.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Updating the type of checks the internal repair feature performs on CRI-O’s start-up following an unclean shutdown. This also features the new&amp;nbsp;&lt;code&gt;crio check&lt;/code&gt;&amp;nbsp;subcommand.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Updating the default pause image to v3.10 to stay up to date with Kubernetes v1.31.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Adding support for&amp;nbsp;&lt;a href=&#34;https://github.com/containers/conmon-rs&#34;&gt;conmon-rs&lt;/a&gt;&amp;nbsp;&amp;gt; v0.6.5, which is a replacement for the required container monitor&amp;nbsp;&lt;a href=&#34;https://github.com/containers/conmon&#34;&gt;conmon&lt;/a&gt;.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Moving the tracing profile and endpoint listener to use 127.0.0.1 as the new default to strengthen the security footprint of the project.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;CRI-O now removes a container after it fails to start. This helps to prevent copies of it from piling up until it succeeds.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;Deprecations and removals&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/saschagrunert/website/blob/83577c3ceafd28bcb82c39b2af07e7af4d3abb68/content/en/blog/_posts/2024-09-18-cri-o-1.31.md#deprecations-and-removals&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It’s worth to mention some deprecations and removals in CRI-O v1.31 which may affect existing users:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;CRI-O v1.31 removed the&amp;nbsp;&lt;code&gt;registries&lt;/code&gt;&amp;nbsp;config in&amp;nbsp;&lt;code&gt;crio.image&lt;/code&gt;&amp;nbsp;as well as the&amp;nbsp;&lt;code&gt;--registry&lt;/code&gt;&amp;nbsp;CLI argument which have been already deprecated.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;The device mapper storage driver is not supported any more.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;The&amp;nbsp;&lt;code&gt;crio config --migrate-defaults&lt;/code&gt;&amp;nbsp;subcommand has been removed (deprecated in v1.28).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;And more&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/saschagrunert/website/blob/83577c3ceafd28bcb82c39b2af07e7af4d3abb68/content/en/blog/_posts/2024-09-18-cri-o-1.31.md#and-more&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Beside features and removals, the CRI-O maintainers fixed bugs and addressed CVE’s to ensure CRI-O’s stability over the past releases. A full list of them can be found in the&amp;nbsp;&lt;a href=&#34;https://github.com/cri-o/cri-o/releases/tag/v1.31.0&#34;&gt;official release notes&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;I would like to take this opportunity to give a huge shoutout to all contributors and maintainers of the CRI-O for this awesome job!&lt;/strong&gt;&amp;nbsp;🙌&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;If you want to give CRI-O v1.31 a try, then feel free to head over to our official&amp;nbsp;&lt;a href=&#34;https://github.com/cri-o/packaging?tab=readme-ov-file#stable-versions&#34;&gt;packaging repository&lt;/a&gt;, which supports mostly all deb and rpm based distributions.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;If you have any questions or feedback, feel free to reach out using the Kubernetes Slack&amp;nbsp;&lt;a href=&#34;https://kubernetes.slack.com/messages/CAZH62UR1&#34;&gt;#crio channel&lt;/a&gt;&amp;nbsp;or create an issue in the&amp;nbsp;&lt;a href=&#34;https://github.com/cri-o/cri-o/issues&#34;&gt;official repository&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;】&lt;p&gt;&lt;em&gt;项目帖子最初发布于&lt;a href=&#34;https://github.com/saschagrunert/website/blob/83577c3ceafd28bcb82c39b2af07e7af4d3abb68/content/en/blog/_posts/2024-09-18-cri-o- 1.31.md&#34;&gt;Github &lt;/a&gt;作者：Sascha Grunert&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;CRI-O 维护者非常高兴并自豪地宣布 CRI-O &lt;a href=&#34;https://github.com/cri-o/cri-o/releases/tag/v1.31.0&#34;&gt;v1.0 已发布。 31.0&lt;/a&gt; 已发布！这个全新的版本包含大量很酷的新功能、错误修复和较小的增强功能。我想借此机会引导您了解 CRI-O 在 Kubernetes 兼容容器运行时领域的最新、最强大的增强功能。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;新功能&lt;a href=&#34;https://github.com/saschagrunert/website/blob/83577c3ceafd28bcb82c39b2af07e7af4d3abb68/content/en/blog/_posts/2024-09-18-cri -o-1.31.md#new-features&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;CRI-O 社区投票决定使用 OCI 运行时 &lt;a href=&#34;https://github.com/containers/crun&#34;&gt;crun&lt;/a&gt; 作为新的默认运行时来替代 &lt;a href=&#34;https: //github.com/opencontainers/runc&#34;&gt;runc&lt;/a&gt;。这实际上并不是什么新鲜事，因为 crun 已经被用作软件包和静态二进制包中的默认运行时相当长一段时间了。与 runc 相比，运行时提供了更好的整体性能和更低的内存占用。它在更快的容器启动时间和更低的内存使用方面的效率使其成为现代工作负载的更优化的运行时，例如，当涉及边缘用例以及运行 WebAssembly (Wasm) 工作负载时。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;CRI-O v1.31 还支持细粒度 &lt;code&gt;SupplementalGroups&lt;/code&gt;（&lt;a href=&#34;https://kep.k8s.io/3619&#34;&gt;KEP-3619&lt;/a&gt; ），它允许控制和跟踪补充组如何应用于容器进程。如果您想了解有关该功能本身的更多信息，请随时阅读&lt;a href=&#34;https://github.com/saschagrunert/website/blob/83577c3ceafd28bcb82c39b2af07e7af4d3abb68/blog/2024/08/22/fine-grained -supplementalgroups-control&#34;&gt;相应的 Kubernetes v1.31 博客文章&lt;/a&gt;。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;除此之外，CRI-O 维护者还添加了对 Kubernetes 镜像卷源 alpha 功能 (&lt;a href=&#34;https://kep.k8s.io/4639&#34;&gt;KEP-4639&lt;/a&gt;) 的支持。此功能允许用户利用 OCI 映像和工件作为自定义卷源并将其安装到容器化工作负载中。还有另一个 &lt;a href=&#34;https://github.com/saschagrunert/website/blob/83577c3ceafd28bcb82c39b2af07e7af4d3abb68/blog/2024/08/16/kubernetes-1-31-image-volume-source&#34;&gt;Kubernetes v1.31 博客可用的帖子&lt;/a&gt;涵盖了有关该功能的功能和用法的更多详细信息。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;CRI-O 现在支持&lt;a href=&#34;https://www.sigstore.dev/&#34;&gt;sigstore&lt;/a&gt;（&lt;a href=&#34;https://github.com/sigstore/cosign&#34;&gt;cosign &lt;/a&gt;) 对某个 Kubernetes 对应的策略进行签名验证 &lt;a href=&#34;https://github.com/saschagrunert/website/blob/83577c3ceafd28bcb82c39b2af07e7af4d3abb68/docs/concepts/overview/working-with-objects/namespaces&#34;&gt;命名空间&lt;/a&gt;。这意味着（默认）目录中的策略 &lt;code&gt;/etc/crio/policies/[NAMESPACE].json&lt;/code &gt; 将为相应 &lt;code&gt;NAMESPACE&lt;/code&gt; 的每个 pod 进行验证 这也会在容器创建时发生，与仅适用于专用 Kubernetes 命名空间的策略相比，这是在执行 sigstore 策略方面向前迈出的一大步。整个集群本身。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;除了支持更大的 Kubernetes 功能之外，CRI-O v1.31 还提供了一系列很酷的较小增强功能，例如：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;添加 &lt;code&gt;--no-sync-log&lt;/code&gt;/&lt;code&gt;no_sync_log&lt;/code&gt; 选项以在容器日志轮转和容器退出时禁用 &lt;code&gt;fsync&lt;/code&gt;。这可以提高性能，但代价是机器崩溃时可能会丢失数据。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;遵守 RPC 上下文设置的映像拉取超时，可能会中止正在进行的映像拉取。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;将 &lt;code&gt;/dev/net/tun&lt;/code&gt; 添加到默认允许的设备，这有助于用户在容器内运行 &lt;a href=&#34;https://podman.io/&#34;&gt;Podman&lt;/a&gt; .&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;在 CRI-O 日志中显示当前运行时配置，以实现加载的内存配置的最大透明度。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;更新了内部修复功能在非正常关闭后对 CRI-O 启动执行的检查类型。它还具有新的&lt;code&gt;crio check&lt;/code&gt;子命令。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;将默认暂停映像更新至 v3.10，以便与 Kubernetes v1.31 保持同步。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;添加对 &lt;a href=&#34;https://github.com/containers/conmon-rs&#34;&gt;conmon-rs&lt;/a&gt; &gt; v0.6.5 的支持，它是所需容器监视器的替代品&lt;a href =&#34;https://github.com/containers/conmon&#34;&gt;常见&lt;/a&gt;。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;移动跟踪配置文件和端点侦听器以使用 127.0.0.1 作为新的默认值，以加强项目的安全足迹。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;CRI-O 现在会在容器启动失败后将其删除。这有助于防止其副本堆积起来，直至成功。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;弃用和删除&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/saschagrunert/website/blob/83577c3ceafd28bcb82c39b2af07e7af4d3abb68/content/en/blog/_posts/2024-09-18-cri-o-1.31.md#deprecations-and-移除&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;值得一提的是 CRI-O v1.31 中的一些弃用和删除，这可能会影响现有用户：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;CRI-O v1.31 删除了 &lt;code&gt;crio.image&lt;/code&gt; 中的 &lt;code&gt;registries&lt;/code&gt; 配置以及已删除的 &lt;code&gt;--registry&lt;/code&gt; CLI 参数已弃用。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;不再支持设备映射器存储驱动程序。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;&lt;code&gt;crio config --migrate-defaults&lt;/code&gt; 子命令已被删除（在 v1.28 中已弃用）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;还有更多&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/saschagrunert/website/blob/83577c3ceafd28bcb82c39b2af07e7af4d3abb68/content/en/blog/_posts/2024-09-18-cri-o-1.31.md#and-more&#34; &gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;除了功能和删除之外，CRI-O 维护人员还修复了错误并解决了 CVE，以确保 CRI-O 在过去版本中的稳定性。您可以在&lt;a href=&#34;https://github.com/cri-o/cri-o/releases/tag/v1.31.0&#34;&gt;官方发行说明&lt;/a&gt;中找到完整的列表。&lt;/a&gt; p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;我想借此机会向 CRI-O 的所有贡献者和维护者表示衷心感谢，感谢他们所做的出色工作！&lt;/strong&gt; 🙌&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;如果您想尝试 CRI-O v1.31，请随时前往我们的官方网站&lt;a href=&#34;https://github.com/cri-o/packaging?tab=readme-ov -file#stable-versions&#34;&gt;打包存储库&lt;/a&gt;，支持几乎所有基于 deb 和 rpm 的发行版。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;如果您有任何问题或反馈，请随时使用 Kubernetes Slack &lt;a href=&#34;https://kubernetes.slack.com/messages/CAZH62UR1&#34;&gt;#crio 频道&lt;/a&gt;与我们联系或创建一个&lt;a href=&#34;https://github.com/cri-o/cri-o/issues&#34;&gt;官方存储库&lt;/a&gt;中的问题。&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;</description>
      <pubDate>Wed, 11 Sep 2024 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【A deep dive into NetBox operator】深入探讨 NetBox 运营商</title>
      <link>https://www.cncf.io/blog/2024/09/16/a-deep-dive-into-netbox-operator/</link>
      <description>【&lt;p&gt;&lt;em&gt;Member post from Swisscom by &lt;a href=&#34;https://www.linkedin.com/in/lea-bruehwiler-a3247b252/&#34;&gt;Lea Brühwiler&lt;/a&gt;, &lt;a href=&#34;https://www.linkedin.com/in/ashan-senevirathne/&#34;&gt;Ashan Senevirathne&lt;/a&gt;, &lt;a href=&#34;https://www.linkedin.com/in/joelstudler/&#34;&gt;Joel Studler&lt;/a&gt;, &lt;a href=&#34;https://www.linkedin.com/in/alexandernorth1/&#34;&gt;Alexander North&lt;/a&gt;, &lt;a href=&#34;https://www.linkedin.com/in/chun-hung-tseng/&#34;&gt;Henry Chun-Hung Tseng&lt;/a&gt;, &lt;a href=&#34;https://www.linkedin.com/in/fabian-schulz-715128114&#34;&gt;Fabian Schulz&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4 class=&#34;wp-block-heading&#34;&gt;&lt;em&gt;Two weeks ago, we &lt;a href=&#34;https://www.swisscom.ch/de/about/karriere/getit/tech-hub/software-engineering-netbox-operator-now-open-sourced-getit.html&#34;&gt;announced the availability of the NetBox Operator for Kubernetes&lt;/a&gt;, an open-source tool designed to integrate &lt;a href=&#34;https://netboxlabs.com/&#34;&gt;NetBox&lt;/a&gt; resource management directly into your &lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt; environment. Today, we’ll take a deeper look at the NetBox Operator’s capabilities and how it works.&lt;/em&gt;&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We have adopted the GitOps model and leveraged Kubernetes to revolutionize the management of network services and infrastructure, enhancing both operational efficiency and reliability. The NetBox Operator leverages the power of the Kubernetes API, allowing users to directly manage essential resources such as IP addresses and prefixes within the Kubernetes environment. This integration ensures automated network maintenance through reconciliation mechanisms, thereby significantly improving both the simplicity and robustness of operations.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The NetBox Operator uses the Kubernetes “claim” model to differentiate between the desired and the actual states. Users can conveniently express their high-level intent through a claim, such as reserving a specific prefix within a parent prefix. The operator then queries NetBox to identify the most suitable prefix that matches your requirements. Subsequently, a prefix CR (Custom Resource) is created in the Kubernetes cluster, representing the actual resource claimed by the prefix claim CR. Similarly,&amp;nbsp; IP addresses can be claimed from a parent prefix using the same mechanism. The operator uses the &lt;a href=&#34;https://github.com/swisscom/leaselocker&#34;&gt;leaselocker library&lt;/a&gt; (inspired by &lt;a href=&#34;https://github.com/kubernetes/client-go&#34;&gt;client-go&lt;/a&gt;) to provide distributed locks and prevent race conditions where the same resource gets assigned to different claims. With the leaselocker library, the parent prefix is locked until the reservation of a resource is completed.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Furthermore, for applications requiring sticky IP addresses, the NetBox Operator offers a convenient feature: the ability to keep an IP address reserved in NetBox even if the corresponding Custom Resource (CR) is deleted from the Kubernetes cluster – just set the .spec.preserveInNetbox flag of your Claim CR to true. If the CR is later recreated, it will be assigned the same IP as before. By seamlessly ensuring IP address consistency, this feature significantly enhances application reliability, enabling redeployment without the need to worry about IP addresses while keeping IPs sticky. The same mechanism is available to keep prefixes sticky.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Ultimately, the NetBox Operator can be applied across a broad variety of Kubernetes-driven infrastructures, including 5G core infrastructure. The operator provides simplified resource management, enhanced operational efficiency, and improved reliability. By automating crucial aspects of network service and resource management, it empowers engineers to focus on higher-level tasks, driving greater scalability, flexibility, and agility within their infrastructure.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image size-full&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;2386&#34; height=&#34;1012&#34; src=&#34;https://www.cncf.io/wp-content/uploads/2024/09/Screenshot-2024-09-17-at-03.53.18.jpg&#34; alt=&#34;netbox operator&#34; class=&#34;wp-image-117623&#34; srcset=&#34;https://www.cncf.io/wp-content/uploads/2024/09/Screenshot-2024-09-17-at-03.53.18.jpg 2386w, https://www.cncf.io/wp-content/uploads/2024/09/Screenshot-2024-09-17-at-03.53.18-300x127.jpg 300w, https://www.cncf.io/wp-content/uploads/2024/09/Screenshot-2024-09-17-at-03.53.18-1024x434.jpg 1024w, https://www.cncf.io/wp-content/uploads/2024/09/Screenshot-2024-09-17-at-03.53.18-768x326.jpg 768w, https://www.cncf.io/wp-content/uploads/2024/09/Screenshot-2024-09-17-at-03.53.18-900x382.jpg 900w, https://www.cncf.io/wp-content/uploads/2024/09/Screenshot-2024-09-17-at-03.53.18-1800x763.jpg 1800w, https://www.cncf.io/wp-content/uploads/2024/09/Screenshot-2024-09-17-at-03.53.18-472x200.jpg 472w, https://www.cncf.io/wp-content/uploads/2024/09/Screenshot-2024-09-17-at-03.53.18-943x400.jpg 943w&#34; sizes=&#34;(max-width: 2386px) 100vw, 2386px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;h1 class=&#34;wp-block-heading&#34;&gt;Try it out yourself!&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Clone the NetBox Operator code from &lt;a href=&#34;https://github.com/netbox-community/netbox-operator&#34;&gt;https://github.com/netbox-community/netbox-operator&lt;/a&gt; and follow the instructions in the README.md file to run the NetBox Operator and NetBox on a local kind cluster and test it using examples. Please also feel free to provide feedback and contribute.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h1 class=&#34;wp-block-heading&#34;&gt;Transforming the Industry Together&amp;nbsp;&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The NetBox Operator is just one component of our broader GitOps strategy, leveraging the Kubernetes Resource Model to drive operational excellence. Consuming IPAM from within Kubernetes allows us to hydrate (or generate) configuration from values which also live on the cluster. If you want to see some examples of this and how we approach this, please have a look at the examples at &lt;a href=&#34;https://github.com/swisscom/containerdays-2024-krm&#34;&gt;https://github.com/swisscom/containerdays-2024-krm&lt;/a&gt;.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;To understand the bigger picture of our journey, feel free to watch our &lt;a href=&#34;https://www.youtube.com/watch?v=crmTnB6Zwt8&#34;&gt;KubeCon presentation&lt;/a&gt; outlining our GitOps evolution.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Swisscom actively invites collaboration from the tech community to enhance and expand the NetBox Operator. Meet us at the upcoming conference &lt;a href=&#34;https://sched.co/1ej4I&#34;&gt;Open Source Summit&lt;/a&gt; on September 17th, where we will present and engage with peers on Kubernetes-driven network infrastructure.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Together, we can push the boundaries of cloud-native transformation!&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;】&lt;p&gt;&lt;em&gt;Swisscom 的会员帖子，作者：&lt;a href=&#34;https://www.linkedin.com/in/lea-bruehwiler-a3247b252/&#34;&gt;Lea Brühwiler&lt;/a&gt;、&lt;a href=&#34;https: //www.linkedin.com/in/ashan-senevirathne/&#34;&gt;Ashan Senevirathne&lt;/a&gt;，&lt;a href=&#34;https://www.linkedin.com/in/joelstudler/&#34;&gt;乔尔·斯塔德勒&lt;/a&gt; ，&lt;a href=&#34;https://www.linkedin.com/in/alexandernorth1/&#34;&gt;亚历山大·诺斯&lt;/a&gt;，&lt;a href=&#34;https://www.linkedin.com/in/chun-hung- tseng/&#34;&gt;曾俊雄&lt;/a&gt;、&lt;a href=&#34;https://www.linkedin.com/in/fabian-schulz-715128114&#34;&gt;法比安·舒尔茨&lt;/a&gt;&lt;/em&gt;&lt;/ p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h4 class=&#34;wp-block-heading&#34;&gt;&lt;em&gt;两周前，我们&lt;a href=&#34;https://www.swisscom.ch/de/about/karriere/getit/tech-hub/software-engineering -netbox-operator-now-open-sourced-getit.html&#34;&gt;宣布推出 NetBox Operator for Kubernetes&lt;/a&gt;，这是一款旨在集成 &lt;a href=&#34;https://netboxlabs.com&#34; 的开源工具/&#34;&gt;NetBox&lt;/a&gt; 资源管理直接进入您的 &lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt; 环境。今天，我们将更深入地了解 NetBox Operator 的功能及其工作原理。&lt;/em&gt;&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;我们采用了 GitOps 模型，并利用 Kubernetes 彻底改变了网络服务和基础设施的管理，提高了运营效率和可靠性。 NetBox Operator 利用 Kubernetes API 的强大功能，允许用户直接管理 Kubernetes 环境中的重要资源，例如 IP 地址和前缀。这种集成通过协调机制确保网络维护自动化，从而显着提高操作的简单性和稳健性。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;NetBox Operator 使用 Kubernetes“声明”模型来区分期望状态和实际状态。用户可以通过声明方便地表达他们的高级意图，例如在父前缀中保留特定前缀。然后，操作员查询 NetBox 以识别符合您要求的最合适的前缀。随后，在 Kubernetes 集群中创建一个前缀 CR（自定义资源），代表前缀 CR 声明的实际资源。同样，可以使用相同的机制从父前缀中声明 IP 地址。运营商使用 &lt;a href=&#34;https://github.com/swisscom/leaselocker&#34;&gt;leaselocker 库&lt;/a&gt;（受到 &lt;a href=&#34;https://github.com/kubernetes/client-go&#34; 的启发） &gt;client-go&lt;/a&gt;）提供分布式锁并防止相同资源分配给不同声明的竞争情况。使用leaselocker库，父前缀将被锁定，直到资源的预留完成。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;此外，对于需要粘性 IP 地址的应用程序，NetBox Operator 提供了一项方便的功能：即使从 Kubernetes 集群中删除了相应的自定义资源 (CR)，也能够在 NetBox 中保留 IP 地址 - 只需将 .您的 Claim CR 的 spec.preserveInNetbox 标志为 true。如果稍后重新创建 CR，它将被分配相同的IP 和以前一样。通过无缝确保 IP 地址一致性，此功能显着增强了应用程序可靠性，无需担心 IP 地址即可进行重新部署，同时保持 IP 粘性。相同的机制可用于保持前缀粘性。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;最终，NetBox Operator 可以应用于各种 Kubernetes 驱动的基础设施，包括 5G 核心基础设施。该运营商提供简化的资源管理、增强的运营效率和更高的可靠性。通过自动化网络服务和资源管理的关键方面，它使工程师能够专注于更高级别的任务，从而在其基础设施内提高可扩展性、灵活性和敏捷性。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class =“wp-block-image size-full”&gt;&lt;img加载=“lazy”解码=“异步”宽度=“2386”高度=“1012”src=“https://www.cncf.io/ wp-content/uploads/2024/09/Screenshot-2024-09-17-at-03.53.18.jpg&#34; alt=&#34;netbox 操作员&#34; class=&#34;wp-image-117623&#34; srcset=&#34;https://www.wp-content/uploads/2024/09/Screenshot-2024-09-17-at-03.53.18.jpg&#34; cncf.io/wp-content/uploads/2024/09/Screenshot-2024-09-17-at-03.53.18.jpg 2386w，https://www.cncf.io/wp-content/uploads/2024/09 /Screenshot-2024-09-17-at-03.53.18-300x127.jpg 300w，https://www.cncf.io/wp-content/uploads/2024/09/Screenshot-2024-09-17-at- 03.53.18-1024x434.jpg 1024w，https://www.cncf.io/wp-content/uploads/2024/09/Screenshot-2024-09-17-at-03.53.18-768x326.jpg 768w，https： //www.cncf.io/wp-content/uploads/2024/09/Screenshot-2024-09-17-at-03.53.18-900x382.jpg 900w，https://www.cncf.io/wp-content /uploads/2024/09/Screenshot-2024-09-17-at-03.53.18-1800x763.jpg 1800w，https://www.cncf.io/wp-content/uploads/2024/09/Screenshot-2024- 09-17-at-03.53.18-472x200.jpg 472w，https://www.cncf.io/wp-content/uploads/2024/09/Screenshot-2024-09-17-at-03.53.18-943x400 .jpg 943w“尺寸=”（最大宽度：2386px）100vw，2386px“referrerpolicy=“no-referrer”&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;h1 class=&#34;wp-block-heading&#34;&gt;亲自尝试一下！&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;从 &lt;a href=&#34;https://github.com/netbox-community/netbox-operator&#34;&gt;https://github.com/netbox-community/netbox-operator&lt;/a&gt; 克隆 NetBox Operator 代码并按照 README.md 文件中的说明在本地集群上运行 NetBox Operator 和 NetBox 并使用示例对其进行测试。也请随时提供反馈和贡献。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h1 class=&#34;wp-block-heading&#34;&gt;共同改变行业&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;NetBox Operator 只是我们更广泛的 GitOps 战略的组成部分，它利用 Kubernetes 资源模型来推动卓越运营。从 Kubernetes 中使用 IPAM 允许我们根据集群上的值来合并（或生成）配置。如果您想查看一些示例以及我们如何处理此问题，请查看 &lt;a href=&#34;https://github.com/swisscom/containerdays-2024-krm&#34;&gt;https://github 上的示例.com/swisscom/containerdays-2024-krm&lt;/a&gt;。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;要了解我们旅程的整体情况，请随时观看我们的&lt;a href=&#34;https://www.youtube.com/watch?v=crmTnB6Zwt8&#34;&gt;KubeCon 演示&lt;/a&gt;概述了我们的 GitOps 演变。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Swisscom 积极邀请技术界合作，以增强和扩展 NetBox Operator。欢迎在 9 月 17 日即将举行的&lt;a href=&#34;https://sched.co/1ej4I&#34;&gt;开源峰会&lt;/a&gt;会议上与我们见面，我们将在会上展示 Kubernetes 驱动的网络基础设施并与同行互动。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;我们可以共同推动云原生转型的界限！&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;</description>
      <pubDate>Sun, 15 Sep 2024 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Winter soldier: scale down Kubernetes made easy】冬兵：让 Kubernetes 规模化变得简单</title>
      <link>https://www.cncf.io/blog/2024/09/16/winter-soldier-scale-down-kubernetes-made-easy/</link>
      <description>【&lt;p&gt;&lt;em&gt;Member post originally published on the &lt;a href=&#34;https://devtron.ai/blog/winter-soldier-scale-down-kubernetes-made-easy/&#34;&gt;Devtron blog&lt;/a&gt; by Bhushan Nemade&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;&lt;em&gt;TL;DR: Stop wasting money on idle resources! Winter Soldier, an open-source tool, helps you automatically scale down non-production environments, saving you up to 28% on your annual infrastructure costs.&lt;/em&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As organizations rush towards the cloud-native paradigm, most face an unexpected issue i.e. skyrocketing infrastructure expenses. Inefficient resource management and the lack of proper demand-driven provisioning result in continuously active resources, regardless of having actual usage patterns. These factors emerge as primary reasons the cloud provider’s pay-as-you-go feature appears to be a nightmare for infrastructure costs to organizations. In this blog post, we will discuss an open-source tool Winter Soldier, a tool crafted by&amp;nbsp;&lt;a href=&#34;https://github.com/devtron-labs/devtron?ref=devtron.ai&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Devtron&lt;/a&gt;&amp;nbsp;for time-based scaling of Kubernetes that can help us save some bucks and also how to optimize resource utilization.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The time-based autoscaling scales your workloads according to defined time, it can be used to execute batch processes like hibernating microservices. The most effective way to use time-based autoscaling is where we know the exact pattern of the incoming traffic for your services. The time-based scaling perfectly aligns with our cost optimization goal, where by utilizing the pattern of our traffic we can scale down or scale up our infrastructure.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;So, now we will scale down the production environment to optimize the cost…? No, there is one hidden culprit that contributes significantly to cloud costs for every organization without even coming to notice. The “Non-Production Environments” (Dev, Staging, Testing, Preview), exist in every organization and in large quantities. All these environments keep running 24/7 and along with them, the cost meter keeps spinning.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In the case of Non-production, it’s easy to track the pattern of traffic and time-based scaling can be a good option. For instance, Dev environments can be scaled down at night time and can be scaled up in the day time similarly all these environments can be scaled down at the start of the weekend say Friday evening, and can be scaled up on Monday morning. Scaling down these environments can have a significant impact on cost as every organization maintains multiple non-production servers behind a single production server.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;For instance, imagine scaling down your non-production environments every Saturday and Sunday throughout the year, let’s do some calculations and get the numbers on how much we can save on the cost.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;365 days a year.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;104 weekend days &amp;nbsp;(52*2)&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Potential saving= little more than 3 months a year i.e. approximately 28% of annual non-production environment costs&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;winter-soldier-a-metal-arm-from-devtron-to-optimize-the-cost&#34;&gt;Winter Soldier: A Metal Arm from Devtron to Optimize the Cost&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/devtron-labs/winter-soldier?ref=devtron.ai&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Winter Soldier&lt;/a&gt;&amp;nbsp;is an open-source tool from Devtron, it enables time-based scaling for Kubernetes workloads. The time-based scaling with Winter Soldier helps us to reduce the cloud cost, it can be deployed to execute things such as:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;Batch deletion of the unused resources&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Scaling of Kubernetes workloads&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Winter Soldier can be operated in three modes, “scale”, “sleep”, and “delete”. These three are the modes of actions that can be executed by the Winter Soldier, if the action for the Winter Soldier is defined as scale the Kubernetes workloads will be scaled up according to the pre-defined time.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;As we have seen above non-production environments often contribute significantly to cloud costs. By implementing Winter Soldier for these environments, we can automatically scale down our non-production infrastructure during off-peak hours like nights and weekends.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The scaling down of the infrastructure can also be done manually but it takes a lot of effort and time of the system administrators.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Is time-based scaling the only way to do this? No, it can also be done with&amp;nbsp;&lt;a href=&#34;https://devtron.ai/blog/configuring-kubernetes-hpa-on-a-k8s-cluster/&#34;&gt;HPA&lt;/a&gt;&amp;nbsp;or&amp;nbsp;&lt;a href=&#34;https://devtron.ai/blog/introduction-to-kubernetes-event-driven-autoscaling-keda/&#34;&gt;Event-Driven Autoscaling&lt;/a&gt;, but time-based is recommended as we know the correct incoming traffic pattern. The HPA and Event-Driven autoscaling scale the workloads when the request is made, so it takes time to scale up and down the workloads.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Let’s explore how Winter Soldier can help and how to implement it in our Kubernetes infrastructure.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Winter Soldier comes as an operator for Kubernetes which requires the Custom Resource Definition (CRD) named Hibernator. Devtron provides a Helm chart for the deployment of the Winter Soldier in our Kubernetes cluster which makes the whole simpler.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Note:&amp;nbsp;&lt;/strong&gt;Winter Soldier can be used independently for any Kubernetes cluster. Still, I’ll proceed with devtron for this blog as it provides multiple additional features, for managing my Kubernetes native application and provides support for seamless CI/CD operations including visibility for the Helm applications.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;winter-soldier-in-action&#34;&gt;Winter Soldier in Action&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In this section, we will deploy Winter Soldier and configure it to scale down our dev environment. Let’s configure it to scale down the dev environment from Friday midnight to Monday morning. The current state of the dev environment can be seen in Figure 1, as of now we are having 2 applications up and running with their pods in the Resource Browser of Devtron.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://devtron.ai/blog/content/images/2024/08/dev5.jpeg&#34; alt=&#34;Resource Browser Pods&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;[Fig. 1]: Resource Browser Pods&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;br&gt;&lt;strong&gt;Step 1:&lt;/strong&gt;&amp;nbsp;Installation of Devtron&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Devtron is an open-source modular Kubernetes dashboard, designed to ease the Kubernetes operations. It is built on top of some of the popular open source tools like ArgoCD, Grafana, Trivy, etc, and is built in a modular fashion where its capabilities can be extended from an advanced Kubernetes dashboard to Kubernetes-native CI/CD pipelines, DevSecOps, Continous Delivery, and GitOps, depending upon the requirements. Its installation is pretty straightforward.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;helm repo add devtron https://helm.devtron.ai&#xA;&#xA;helm repo update devtron&#xA;&#xA;helm install devtron devtron/devtron-operator \&#xA;--create-namespace --namespace devtroncd&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Check out the&amp;nbsp;&lt;a href=&#34;https://docs.devtron.ai/install?ref=devtron.ai&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Devtron documentation&lt;/a&gt;&amp;nbsp;for more details about the installation and integrations.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt;&amp;nbsp;Helm Chart for Winter Soldier&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Navigate to the Chart Store.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://devtron.ai/blog/content/images/2024/08/chart-store-.jpeg&#34; alt=&#34;Chart Store&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;[Fig. 2]: Chart Store&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Select the Helm Chart for Winter Soldier:&amp;nbsp;&lt;code&gt;devtron/winter-soldier&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://devtron.ai/blog/content/images/2024/08/winter-soldier-chart.jpeg&#34; alt=&#34;Winter Soldier Helm Chart&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;[Fig. 3]: Winter Soldier Helm Chart&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Once you click the chart, you will be able to see a brief description of the chart, README, and an option to Configure &amp;amp; Deploy.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://devtron.ai/blog/content/images/2024/08/winter-soldier-readme.jpeg&#34; alt=&#34;Winter Soldier Readme&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;[Fig 4]: Winter Soldier Readme&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt;&amp;nbsp;Configuring Winter Soldier&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://devtron.ai/blog/content/images/2024/08/configure-winter-soldier.jpeg&#34; alt=&#34;Configuring Winter Soldier&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;[Fig. 5]: Configuring Winter Soldier&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Let’s take a look at configurations of Winter Soldier for our environment, here we want the dev environment to scale down on weekends i.e. Friday night to Monday morning.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;Default values for winter-soldier.&#xA;&#xA;&#xA;replicaCount: 1&#xA;image: quay.io/devtron/winter-soldier:abf5a822-196-14744&#xA;graceperiod: 10&#xA;&#xA;&#xA;resources: {}&#xA;   limits:&#xA;     cpu: 100m&#xA;     memory: 128Mi&#xA;   requests:&#xA;     cpu: 100m&#xA;     memory: 128Mi&#xA;&#xA;&#xA;nodeSelector: {}&#xA;&#xA;&#xA;tolerations: []&#xA;&#xA;&#xA;affinity: {}&#xA;&#xA;&#xA;  Provide the list of Hibernator objects in the yaml format with your custom requirements.&#xA;hibernator: []&#xA;  - apiVersion: pincher.devtron.ai/v1alpha1&#xA;    kind: Hibernator&#xA;    metadata:&#xA;      name: sleep-hibernator&#xA;    spec:&#xA;      timeRangesWithZone:&#xA;        timeZone: &#34;Asia/Kolkata&#34;&#xA;       timeRanges:&#xA;        - timeFrom: 00:00&#xA;          timeTo: 06:59:59&#xA;          weekdayFrom: Fri&#xA;          weekdayTo: Mon&#xA;      selectors:&#xA;      - inclusions:&#xA;        - objectSelector:&#xA;           name: &#34;all&#34;&#xA;            type: &#34;deployment,rollout,StatefulSet&#34;&#xA;        exclusions:&#xA;        - namespaceSelector:&#xA;            name: “devtron-ci,devtron-cd,argo,kube-system,devtroncd”&#xA;          objectSelector:&#xA;             name: &#34;&#34;&#xA;              type: &#34;deployment,rollout,StatefulSet&#34;&#xA;     action: sleep&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;In the&amp;nbsp;&lt;code&gt;resources&lt;/code&gt;&amp;nbsp;section, you can set the resource limits and request for Winter Soldier itself. You can adjust these according to your cluster.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;In the&amp;nbsp;&lt;code&gt;hibernator&lt;/code&gt;&amp;nbsp;section, we define how Winter Soldier manages your resources i.e. in&amp;nbsp;&lt;code&gt;timeRangesWithZone&lt;/code&gt;&amp;nbsp;we need to define&amp;nbsp;&lt;code&gt;timezone&lt;/code&gt;&amp;nbsp;for instance, we are taking&amp;nbsp;&lt;code&gt;Asia/Kolkata&lt;/code&gt;. In&amp;nbsp;&lt;code&gt;timeRanges&lt;/code&gt;&amp;nbsp;we need to define the start time in&amp;nbsp;&lt;code&gt;timeFrom&lt;/code&gt;&amp;nbsp;and the end time in&amp;nbsp;&lt;code&gt;timeTo&lt;/code&gt;, similarly in&amp;nbsp;&lt;code&gt;weekdayFrom&lt;/code&gt;&amp;nbsp;and&amp;nbsp;&lt;code&gt;weekdayTo&lt;/code&gt;. In&amp;nbsp;&lt;code&gt;selectors&lt;/code&gt;, in&amp;nbsp;&lt;code&gt;inclusions&lt;/code&gt;&amp;nbsp;we specify which resources to manage and in the&amp;nbsp;&lt;code&gt;exclusions&lt;/code&gt;, we define the exceptions.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;In the&amp;nbsp;&lt;code&gt;spec&lt;/code&gt;&amp;nbsp;section of the&amp;nbsp;&lt;code&gt;hibernator&lt;/code&gt;&amp;nbsp;we can define `&lt;code&gt;pause: true&lt;/code&gt;&amp;nbsp;and `&lt;code&gt;&lt;br&gt;pauseUntil: &#34;Jan 2, 2026 3:04pm&#34;&lt;/code&gt;. By defining the&amp;nbsp;&lt;code&gt;pause&lt;/code&gt;&amp;nbsp;action we can put the already scheduled&amp;nbsp;&lt;code&gt;hibernator&lt;/code&gt;&amp;nbsp;at pause for a specific time window.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;In the&amp;nbsp;&lt;code&gt;action&lt;/code&gt;&amp;nbsp;we define the goal for Winter Soldier, for the above example, we have set it as sleep. We can also set the&amp;nbsp;&lt;code&gt;action&lt;/code&gt;&amp;nbsp;as&amp;nbsp;&lt;code&gt;delete&lt;/code&gt;&amp;nbsp;or&amp;nbsp;&lt;code&gt;scale&lt;/code&gt;&amp;nbsp;according to need.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Once the configurations are set we can proceed with the deployment of Winter Soldier.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt;&amp;nbsp;Winter Soldier in Action&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Our application from the dev environment is up and running fine before the deployment of Winter Soldier.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://devtron.ai/blog/content/images/2024/08/dev-1.jpeg&#34; alt=&#34;Apps detail page before Winter Soldier&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;[Fig. 6]: Apps detail page before Winter Soldier&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Effect of Winter Soldier&amp;nbsp;&lt;code&gt;sleep&lt;/code&gt;&amp;nbsp;action on our applications from the&amp;nbsp;&lt;code&gt;dev&lt;/code&gt;&amp;nbsp;environment. Before the deployment of Winter Soldier, we were having&amp;nbsp;&lt;code&gt;frontend-app&lt;/code&gt;&amp;nbsp;and&amp;nbsp;&lt;code&gt;backend-app&lt;/code&gt;&amp;nbsp;deployed at the&amp;nbsp;&lt;code&gt;dev&lt;/code&gt;&amp;nbsp;environment, both were up and running. Let’s see what actions are taken by Winter Soldier.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://devtron.ai/blog/content/images/2024/08/scale-down2.png&#34; alt=&#34;frontend app scale down&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;[Fig. 7]: frontend app scale down&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Let’s look at other applications in the same environment.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://devtron.ai/blog/content/images/2024/08/dev2.jpeg&#34; alt=&#34;Backend app scaled down&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;[Fig 8]: Backend app scaled down&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now that Winter Soldier has been deployed and we have checked the events of applications, to verify let’s navigate to the Resource Browser of Devtron to gain visibility for our dev environment.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://devtron.ai/blog/content/images/2024/08/dev-4.jpeg&#34; alt=&#34;Resource Browser Pods&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;[Fig. 9]: Resource Browser Pods&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Figure 9 shows that Winter Soldier has scaled down the pods previously visible in Figure 1, resulting in no active pods currently running in the dev environment.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Time-based scaling, allows organizations to automatically adjust their resource allocation based on predictable traffic patterns, such as scaling down during nights and weekends. Winter Soldier is a powerful open-source tool that helps organizations implement time-based scaling for their environments. By leveraging Winter-Soldier, organizations can significantly reduce their cloud infrastructure cost by around 28% of the total cost of the year just by scaling workloads on weekends, particularly in non-production settings like development, staging, and testing environments.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;If you liked the winter-soldier, feel free to give it a&amp;nbsp;&lt;a href=&#34;https://github.com/devtron-labs/winter-soldier/?ref=devtron.ai&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;⭐️ on GitHub&lt;/a&gt;. Join our actively growing&amp;nbsp;&lt;a href=&#34;https://discord.devtron.ai/?ref=devtron.ai&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Discord Community&lt;/a&gt;&amp;nbsp;and ask your questions if you have any.&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;】&lt;p&gt;&lt;em&gt;成员帖子最初发布于 &lt;a href=&#34;https://devtron.ai/blog/winter-soldier-scale-down-kubernetes-made-easy/&#34;&gt;Devtron 博客&lt;/a&gt;，作者：布山·内马德&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 class=&#34;wp-block-heading&#34;&gt;&lt;em&gt;TL;DR：停止在闲置资源上浪费金钱！ Winter Soldier 是一款开源工具，可帮助您自动缩减非生产环境规模，为您节省高达 28% 的年度基础设施成本。&lt;/em&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;随着组织急于采用云原生模式，大多数组织都面临着一个意想不到的问题，即基础设施费用飙升。低效的资源管理和缺乏适当的需求驱动的供应会导致资源持续活跃，无论实际使用模式如何。这些因素成为云提供商的即用即付功能对组织的基础设施成本来说是一场噩梦的主要原因。在这篇博文中，我们将讨论一个开源工具 Winter Soldier，该工具由 &lt;a href=&#34;https://github.com/devtron-labs/devtron?ref=devtron.ai&#34; target=&#34;_blank&#34; 制作rel=&#34;noreferrer noopener&#34;&gt;Devtron&lt;/a&gt; 用于 Kubernetes 的基于时间的扩展，可以帮助我们节省一些资金以及如何优化资源利用率。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;基于时间的自动扩展可根据定义的时间扩展您的工作负载，它可用于执行批处理，例如休眠微服务。使用基于时间的自动缩放的最有效方法是我们了解您的服务传入流量的确切模式。基于时间的扩展完全符合我们的成本优化目标，通过利用流量模式，我们可以缩小或扩大我们的基础设施。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;那么，现在我们将缩小生产环境以优化成本……？不，有一个隐藏的罪魁祸首极大地增加了每个组织的云成本，甚至没有人注意到。 “非生产环境”（开发、登台、测试、预览）大量存在于每个组织中。所有这些环境都 24/7 持续运行，成本表也随之不断旋转。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;在非生产情况下，很容易跟踪流量模式，并且基于时间的扩展可能是一个不错的选择。例如，开发环境可以在夜间缩小规模，并可以在白天扩大规模，类似地，所有这些环境都可以在周末开始时（例如周五晚上）缩小规模，并可以在周一早上扩大规模。缩小这些环境的规模可能会对成本产生重大影响，因为每个组织都在单个生产服务器后面维护多个非生产服务器。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;例如，想象一下全年每个星期六和星期日缩小非生产环境的规模，让我们做一些计算并得到我们可以节省多少成本的数字。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;一年 365 天。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;104 个周末 (52*2)&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;潜在的节省=小m每年超过 3 个月，即每年非生产环境成本的约 28%&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;winter-soldier-a-metal-arm-from-devtron-to-optimize-the-cost&#34;&gt;冬兵：来自 Devtron 的金属手臂，可优化成本&lt; /h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/devtron-labs/winter-soldier?ref=devtron.ai&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;冬兵&lt;/a&gt;是一位Devtron 的开源工具，它支持 Kubernetes 工作负载的基于时间的扩展。 Winter Soldier 基于时间的扩展帮助我们降低了云成本，它可以部署来执行以下操作：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol类=“wp-block-list”&gt;&#xA;&lt;li&gt;批量删除未使用的资源&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;扩展 Kubernetes 工作负载&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;冬日战士可以通过“缩放”、“休眠”、“删除”三种模式进行操作。这三种是冬兵可以执行的动作模式，如果冬兵的动作定义为scale，那么Kubernetes工作负载就会按照预先定义的时间进行scale up。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;正如我们在上面所看到的，非生产环境通常会显着增加云成本。通过在这些环境中实施“冬日战士”，我们可以在夜间和周末等非高峰时段自动缩减非生产基础设施的规模。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;基础设施的缩减也可以手动完成，但这需要系统管理员付出大量的精力和时间。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;基于时间的缩放是实现此目的的唯一方法吗？不，也可以使用 &lt;a href=&#34;https://devtron.ai/blog/configuring-kubernetes-hpa-on-a-k8s-cluster/&#34;&gt;HPA&lt;/a&gt; 或 &lt;a href=&#34; 来完成https://devtron.ai/blog/introduction-to-kubernetes-event-driven-autoscaling-keda/&#34;&gt;事件驱动的自动缩放&lt;/a&gt;，但建议基于时间，因为我们知道正确的传入流量模式。 HPA 和事件驱动的自动扩展会在发出请求时扩展工作负载，因此扩展和缩减工作负载需要时间。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;让我们探索 Winter Soldier 如何提供帮助以及如何在我们的 Kubernetes 基础设施中实施它。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Winter Soldier 作为 Kubernetes 的操作员出现，需要名为 Hibernator 的自定义资源定义 (CRD)。 Devtron 提供了一个 Helm 图表，用于在我们的 Kubernetes 集群中部署 Winter Soldier，这使得整个过程变得更加简单。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;Winter Soldier 可以独立用于任何 Kubernetes 集群。不过，我将继续使用 devtron 来写这篇博客，因为它提供了多种附加功能，用于管理我的 Kubernetes 本机应用程序，并提供对无缝 CI/CD 操作的支持，包括 Helm 应用程序的可见性。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;winter-soldier-in-action&#34;&gt;冬兵在行动&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;在本节中，我们将部署 Winter Soldier 并配置它以缩小我们的开发环境。让我们将其配置为缩小 Fr 的开发环境每天午夜至周一早上。开发环境的当前状态如图 1 所示，到目前为止，我们已经启动了 2 个应用程序，并在 Devtron 的资源浏览器中使用它们的 pod 运行。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://devtron.ai/blog/content/images/2024/08/dev5.jpeg&#34; alt=&#34;资源浏览器 Pod “referrerpolicy =“no-referrer”&gt; &lt;figcaption class =“wp-element-caption”&gt; [图。 1]：资源浏览器 Pod&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;br&gt;&lt;strong&gt;第 1 步：&lt;/strong&gt;安装 Devtron&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Devtron 是一个开源模块化 Kubernetes 仪表板，旨在简化 Kubernetes 操作。它构建在一些流行的开源工具（如 ArgoCD、Grafana、Trivy 等）之上，并以模块化方式构建，其功能可以从高级 Kubernetes 仪表板扩展到 Kubernetes 原生 CI/CD 管道、DevSecOps 、持续交付和 GitOps，具体取决于需求。它的安装非常简单。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;helm 仓库添加 devtron https://helm.devtron.ai&#xA;&#xA;helm 仓库更新 devtron&#xA;&#xA;helm 安装 devtron devtron/devtron-operator \&#xA;--create-namespace --namespace devtroncd&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;查看&lt;a href=&#34;https://docs.devtron.ai/install?ref=devtron.ai&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Devtron 文档&lt;/a&gt;了解更多详情关于安装和集成。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;第 2 步：&lt;/strong&gt;冬兵头盔图表&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;导航到图表存储。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://devtron.ai/blog/content/images/2024/08/chart-store-.jpeg&#34; alt=&#34;图表存储”referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;[图 1] 2]：图表存储&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;选择 Winter Soldier 的 Helm Chart：&lt;code&gt;devtron/winter-soldier&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://devtron.ai/blog/content/images/2024/08/winter-soldier-chart.jpeg&#34; alt= “冬兵头盔图表”referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;[图。 3]：冬兵头盔图&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;单击图表后，您将能够看到图表的简要说明、自述文件以及配置和部署选项。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://devtron.ai/blog/content/images/2024/08/winter-soldier-readme.jpeg&#34; alt= 《冬兵自述》referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;[图4]：冬兵自述&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;第 3 步：&lt;/strong&gt;配置冬兵&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://devtron.ai/blog/content/images/2024/08/configure-winter-soldier.jpeg&#34; alt= “配置冬兵”referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;[图. 5]：配置冬兵&lt;/figcaption&gt;&lt;/figur电子&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;让我们看一下冬日战士环境的配置，这里我们希望开发环境在周末（即周五晚上到周一早上）缩小规模。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;冬兵的默认值。&#xA;&#xA;&#xA;副本数：1&#xA;图片：quay.io/devtron/winter-soldier:abf5a822-196-14744&#xA;宽限期：10&#xA;&#xA;&#xA;资源： {}&#xA;   限制：&#xA;     中央处理器：100m&#xA;     内存：128Mi&#xA;   要求：&#xA;     中央处理器：100m&#xA;     内存：128Mi&#xA;&#xA;&#xA;节点选择器：{}&#xA;&#xA;&#xA;容忍度：[]&#xA;&#xA;&#xA;亲和力：{}&#xA;&#xA;&#xA;  提供 yaml 格式的 Hibernator 对象列表以及您的自定义要求。&#xA;冬眠者：[]&#xA;  - api版本：pincher.devtron.ai/v1alpha1&#xA;    种类: 冬眠者&#xA;    元数据：&#xA;      名称：睡眠冬眠器&#xA;    规格：&#xA;      时间范围与区域：&#xA;        时区: &#34;亚洲/加尔各答&#34;&#xA;       时间范围：&#xA;        - 时间从：00:00&#xA;          时间：06:59:59&#xA;          工作日来自： 周五&#xA;          工作日至： 周一&#xA;      选择器：&#xA;      - 内含物：&#xA;        - 对象选择器：&#xA;           名称：“全部”&#xA;            类型：“部署、推出、StatefulSet”&#xA;        排除：&#xA;        - 命名空间选择器：&#xA;            名称：“devtron-ci，devtron-cd，argo，kube-system，devtroncd”&#xA;          对象选择器：&#xA;             姓名： ””&#xA;              类型：“部署、推出、StatefulSet”&#xA;     动作：睡眠&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;在&lt;code&gt;资源&lt;/code&gt;部分，您可以为冬兵本身设置资源限制和请求。您可以根据您的集群来调整这些。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;在 &lt;code&gt;hibernator&lt;/code&gt; 部分中，我们定义 Winter Soldier 如何管理您的资源，即在 &lt;code&gt;timeRangesWithZone&lt;/code&gt; 中，我们需要定义&lt;code&gt;timezone&lt;/code&gt;，例如，我们是以&lt;code&gt;亚洲/加尔各答&lt;/code&gt;为例。在 &lt;code&gt;timeRanges&lt;/code&gt; 中，我们需要在 &lt;code&gt;timeFrom&lt;/code&gt; 中定义开始时间，在 &lt;code&gt;timeTo&lt;/code&gt; 中定义结束时间，与 &lt;code&gt;weekdayFrom&lt;/code&gt; 和&lt;code&gt;weekdayTo&lt;/code&gt;。在&lt;code&gt;选择器&lt;/code&gt;中，在&lt;code&gt;包含&lt;/code&gt;中，我们指定要管理的资源，在&lt;code&gt;排除&lt;/code&gt;中，我们定义例外情况。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;在 &lt;code&gt;hibernator&lt;/code&gt; 的 &lt;code&gt;spec&lt;/code&gt; 部分，我们可以定义 `&lt;code&gt;pause: true&lt;/code&gt; 和 `&lt;code&gt;&lt;br&gt;pauseUntil: &#34;Jan 2026 年 2 月 3 日下午 3:04”&lt;/code&gt;。通过定义&lt;code&gt;暂停&lt;/code&gt;操作，我们可以将已安排的&lt;code&gt;休眠器&lt;/code&gt;暂停特定时间窗口。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;在&lt;code&gt;action&lt;/code&gt;中，我们定义冬兵的目标，在上面的示例中，我们将其设置为睡眠。我们还可以根据需要将&lt;code&gt;action&lt;/code&gt;设置为&lt;code&gt;delete&lt;/code&gt;或&lt;code&gt;scale&lt;/code&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;配置完成后，我们就可以继续部署冬兵了。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;第 4 步：&lt;/strong&gt;冬日战士在行动&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;在部署 Winter Soldier 之前，我们的开发环境中的应用程序已启动并运行良好。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://devtron.ai/blog/content/images/2024/08/dev-1.jpeg&#34; alt=&#34;应用程序《冬日战士》之前的详细信息页面&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;[图 1] 6]：《冬日战士》之前的应用详细信息页面&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;冬兵&lt;code&gt;sleep&lt;/code&gt;操作对&lt;code&gt;dev&lt;/code&gt;环境中的应用程序的影响。在部署 Winter Soldier 之前，我们在 &lt;code&gt;dev&lt;/code&gt; 环境中部署了 &lt;code&gt;frontend-app&lt;/code&gt; 和 &lt;code&gt;backend-app&lt;/code&gt;，两者均已启动并运行。让我们看看冬兵采取了哪些行动。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://devtron.ai/blog/content/images/2024/08/scale-down2.png&#34; alt=&#34;frontend应用程序缩小”referrerpolicy =“no-referrer”&gt; &lt;figcaption class =“wp-element-caption”&gt; [图。 7]：前端应用程序缩小&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;让我们看看同一环境中的其他应用程序。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://devtron.ai/blog/content/images/2024/08/dev2.jpeg&#34; alt=&#34;后端应用程序缩放down&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;[图 8]：后端应用程序缩小&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;现在冬兵已经部署，我们已经检查了应用程序的事件，为了验证，让我们导航到 Devtron 的资源浏览器来获得我们的开发环境的可见性。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://devtron.ai/blog/content/images/2024/08/dev-4.jpeg&#34; alt=&#34;资源浏览器 Pods&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;[图 1] 9]：资源浏览器 Pod&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;图 9 显示 Winter Soldier 缩小了之前在图 1 中可见的 pod，导致开发环境中当前没有运行任何活动 pod。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;conclusion&#34;&gt;结论&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;基于时间的扩展允许组织根据可预测的流量模式自动调整资源分配，例如在夜间和周末缩小规模。 Winter Soldier 是一款功能强大的开源工具，可帮助组织为其环境实施基于时间的扩展。通过利用 Winter-Soldier，组织只需在周末扩展工作负载，即可将其云基础设施成本显着降低约全年总成本的 28%，特别是在开发、登台和测试环境等非生产环境中。&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;如果您喜欢冬兵，请随时给它一个&lt;a href=&#34;https://github.com/devtron-labs/winter-soldier/?ref=devtron.ai&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;⭐️ 在 GitHub 上&lt;/a&gt;。加入我们积极发展的&lt;a href=&#34;https://discord.devtron.ai/?ref=devtron.ai&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Discord 社区&lt;/a&gt;并提出您的问题（如果有任何问题）。&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;</description>
      <pubDate>Sun, 15 Sep 2024 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Enhancing Kubernetes security and flexibility with the CyberArk Conjur and ESO Integration】通过 Cyber​​Ark Conjur 和 ESO 集成增强 Kubernetes 安全性和灵活性</title>
      <link>https://www.cncf.io/blog/2024/09/12/enhancing-kubernetes-security-and-flexibility-with-the-cyberark-conjur-and-eso-integration/</link>
      <description>【&lt;p&gt;&lt;em&gt;Member post originally published on &lt;a href=&#34;https://developer.cyberark.com/blog/enhancing-kubernetes-security-and-flexibility-with-the-cyberark-conjur-and-eso-integration/&#34;&gt;CyberArk’s blog&lt;/a&gt; by Shlomo Heigh&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In today’s fast-paced world of DevOps and cloud-native applications, managing secrets securely is critical. CyberArk Conjur, a trusted solution for secrets management, has taken a significant step by integrating seamlessly with the External Secrets Operator (ESO). This collaboration brings together the best of both worlds: Conjur’s robust secret management capabilities and ESO’s flexibility in handling secrets across Kubernetes clusters.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;At CyberArk, we strive to provide tools that companies can use to keep their most sensitive information secure. We also do our best to ensure information can be accessed when needed and only by an authorized person or process. In some ways, that’s the more challenging part of secrets management, especially when considering all the “places” where processes may be running – in public, private or hybrid clouds; SaaS services; on-prem workloads; and many more. This is why the Conjur team provides several APIs and native integrations to allow applications to seamlessly retrieve the secrets they need just as they need them.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;With the massive growth of the cloud native ecosystem, particularly Kubernetes and its various flavors, such as OpenShift and Tanzu, one open source project has become a major player in handling this challenge – External Secrets Operator (ESO). ESO is an open source project under the&amp;nbsp;&lt;a href=&#34;https://www.cncf.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Cloud Native Computing Foundation (CNCF)&lt;/a&gt;, the same foundation that oversees Kubernetes’ development. ESO is popular because it’s a plug-and-play system that can be added to a Kubernetes cluster to handle the fetching of secrets from many secrets management systems and seamlessly provide them to workloads running in the cluster.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote class=&#34;wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow&#34;&gt;&#xA;&lt;p&gt;(Side note: There is another way to achieve similar results using the&amp;nbsp;&lt;a href=&#34;https://secrets-store-csi-driver.sigs.k8s.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Kubernetes Secrets Store CSI Driver&lt;/a&gt;, which&amp;nbsp;&lt;a href=&#34;https://github.com/cyberark/conjur-k8s-csi-provider&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Conjur&lt;/a&gt;&amp;nbsp;also supports. The pros and cons of each are out of the scope of this article. Still, the primary differences are that the CSI driver mounts secrets into pods, requires volumes and doesn’t use Kubernetes secrets, while ESO is at the cluster/namespace level and uses Kubernetes secrets.)&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We’re pleased to announce that we’ve recently worked with the ESO maintainers team to increase the support for fetching secrets from Conjur using ESO. In this post, we’ll walk you through setting up a Kubernetes environment with an application that uses secrets stored in Conjur and provided with ESO.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Let’s jump right in!&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;Setting the stage&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote class=&#34;wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow&#34;&gt;&#xA;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;&lt;em&gt;: This walkthrough will be quite technical and have plenty of code. It’s intended for those already familiar with Kubernetes and shell scripts.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;A scripted demo is available at&amp;nbsp;&lt;/em&gt;&lt;a href=&#34;https://github.com/conjurdemos/Accelerator-K8s-External-Secrets/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;https://github.com/conjurdemos/Accelerator-K8s-External-Secrets/&lt;/em&gt;&lt;/a&gt;&lt;em&gt;,&lt;/em&gt;&lt;em&gt;&amp;nbsp;simplifying the process of creating a proof of concept without needing to delve into all the intricacies. This post goes into all the details for those who want to understand exactly what’s happening at each step.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In this demo, we will use the distribution of Kubernetes included in Docker Desktop. You can enable it in the Settings screen, as seen here:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://developer.cyberark.com/wp-content/uploads/2024/08/docker-desktop.png&#34; alt=&#34;Docker Desktop&#34; class=&#34;wp-image-7787&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;To illustrate using Conjur and ESO in a Kubernetes environment, we’ll deploy an application that relies on database connection details to run. We will then have ESO fetch those details from Conjur and inject them into Kubernetes Secrets, where the app can read them.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We will use our Pet Store Demo app for the application. You can see the code at&amp;nbsp;&lt;a href=&#34;https://github.com/conjurdemos/pet-store-demo&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://github.com/conjurdemos/pet-store-demo&lt;/a&gt;, and its image is on DockerHub as&amp;nbsp;&lt;a href=&#34;https://hub.docker.com/r/cyberark/demo-app&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;cyberark/demo-app&lt;/a&gt;. This app requires four secrets as environment variables: DB_URL, DB_USERNAME, DB_PASSWORD, and DB_PLATFORM. We want to store these values in a secure location, so we’ll start by setting up Conjur as our secret store.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;Setting up a Conjur Instance&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We can easily install an instance of Conjur OSS right in our Kubernetes cluster using the Conjur OSS&amp;nbsp;&lt;a href=&#34;https://github.com/cyberark/conjur-oss-helm-chart/tree/main/conjur-oss&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Helm charts&lt;/a&gt;. If you already have a Conjur instance, you can skip to the next section (&lt;em&gt;Configuring Conjur&lt;/em&gt;).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;$ CONJUR_NAMESPACE=conjur&#xA;$ kubectl create namespace &#34;$CONJUR_NAMESPACE&#34;&#xA;$ DATA_KEY=&#34;$(docker run --rm cyberark/conjur data-key generate)&#34;&#xA;$ helm repo add cyberark https://cyberark.github.io/helm-charts&#xA;$ helm install -n &#34;$CONJUR_NAMESPACE&#34; --set dataKey=&#34;$DATA_KEY&#34; --set authenticators=&#34;authn\,authn-jwt/eso&#34; conjur cyberark/conjur-oss&#xA;$ CONJUR_ACCOUNT=demo&#xA;$ POD_NAME=$(kubectl get pods --namespace &#34;$CONJUR_NAMESPACE&#34; \&#xA;            -l &#34;app=conjur-oss,release=conjur&#34; \&#xA;            -o jsonpath=&#34;{.items[0].metadata.name}&#34;)&#xA;# This will create an account and print the API key. Store this in a safe place.&#xA;$ kubectl exec --namespace $CONJUR_NAMESPACE \&#xA;              $POD_NAME \&#xA;              --container=conjur-oss \&#xA;              -- conjurctl account create $CONJUR_ACCOUNT | tail -1&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;You now have an instance of Conjur running in your local Kubernetes cluster. To configure Conjur with the secrets the Pet Store Demo app will need, we must connect to it using the Conjur CLI. Since we’ve installed Conjur in Kubernetes, let’s go ahead and create a pod in the same namespace where we can run the CLI.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Save the following file as cli.yml:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;apiVersion: apps/v1&#xA;kind: Deployment&#xA;metadata:&#xA;  name: conjur-cli&#xA;  labels:&#xA;    app: conjur-cli&#xA;spec:&#xA;  replicas: 1&#xA;  selector:&#xA;    matchLabels:&#xA;      app: conjur-cli&#xA;  template:&#xA;    metadata:&#xA;      name: conjur-cli&#xA;      labels:&#xA;        app: conjur-cli&#xA;    spec:&#xA;      containers:&#xA;      - name: conjur-cli&#xA;        image: cyberark/conjur-cli:8&#xA;        command: [&#34;sleep&#34;]&#xA;        args: [&#34;infinity&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now run the following command to create the Conjur CLI deployment defined in the file:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;$ kubectl apply -f cli.yml -n $CONJUR_NAMESPACE&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now, let’s get the name of the newly created CLI pod and log in to our Conjur instance.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;$ CLI_POD_NAME=$(kubectl get pods --namespace &#34;$CONJUR_NAMESPACE&#34; -l &#34;app=conjur-cli&#34; -o jsonpath=&#34;{.items[0].metadata.name}&#34;)&#xA;$ CONJUR_URL=https://conjur-conjur-oss.$CONJUR_NAMESPACE.svc.cluster.local&#xA;$ kubectl exec -n $CONJUR_NAMESPACE $CLI_POD_NAME -ti -- conjur init -a $CONJUR_ACCOUNT -u $CONJUR_URL --self-signed&#xA;# Now login. When prompted for a password, paste in the API key returned from when you created the account above&#xA;$ kubectl exec -n $CONJUR_NAMESPACE $CLI_POD_NAME -ti -- conjur login -i admin&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We now have a pod running with the CLI and are logged into our Conjur instance as the administrator. We’re now ready to start creating policies and variables!&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;Configuring Conjur&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We need to configure Conjur to:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li&gt;Store the secrets needed by the demo app.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Allow the External Secrets Operator to authenticate to Conjur.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;Allow the External Secrets Operator to fetch the secrets for the demo app.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;To avoid storing an API key to access Conjur, another secret to manage, we will use the Kubernetes native Service Account Tokens to allow ESO to authenticate to Conjur. Let’s start by creating a Conjur policy file that defines a JWT authenticator that ESO will use to authenticate. Create the following file and save it as authn-jwt.yml:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;- !policy&#xA;  id: conjur/authn-jwt/eso&#xA;  annotations:&#xA;    description: Configuration for AuthnJWT service&#xA;  body:&#xA;    - !webservice&#xA;&#xA;    # - !variable jwks-uri&#xA;    - !variable public-keys&#xA;    - !variable issuer&#xA;    - !variable token-app-property&#xA;    - !variable identity-path&#xA;    - !variable audience&#xA;&#xA;    # Group of applications that can authenticate using this JWT Authenticator&#xA;    - !group users&#xA;  &#xA;    - !permit&#xA;      role: !group users&#xA;      privilege: [ read, authenticate ]&#xA;      resource: !webservice&#xA;&#xA;    - !webservice status&#xA;   &#xA;    # Group of users who can check the status of the JWT Authenticator&#xA;    - !group operators&#xA;   &#xA;    - !permit&#xA;      role: !group operators&#xA;      privilege: [ read ]&#xA;      resource: !webservice status&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now, create another file called authn-jwt-apps.yml. We’re going to use “demo-app” for the namespace name and “demo-app-sa” for the service account name:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;- !policy&#xA;  id: conjur/authn-jwt/eso/apps&#xA;  annotations:&#xA;    description: Identities permitted to authenticate with the AuthnJWT service&#xA;  body:&#xA;    - !group&#xA;&#xA;    - &amp;amp;hosts&#xA;      - !host&#xA;        id: system:serviceaccount:demo-app:demo-app-sa&#xA;        annotations:&#xA;          authn-jwt/eso/sub: system:serviceaccount:demo-app:demo-app-sa&#xA;&#xA;    - !grant&#xA;        role: !group&#xA;        members: *hosts&#xA;&#xA;- !grant&#xA;    role: !group conjur/authn-jwt/eso/users&#xA;    member: !group conjur/authn-jwt/eso/apps&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now, create a third and final policy file that will define the secrets the application needs and grant ESO access. Save this one as secrets.yml:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;- !policy&#xA;  id: secrets&#xA;  body:&#xA;    - &amp;amp;variables&#xA;      - !variable db/url&#xA;      - !variable db/username&#xA;      - !variable db/password&#xA;      - !variable db/platform&#xA;&#xA;    - !group users&#xA;&#xA;    - !permit&#xA;      resources: *variables&#xA;      role: !group users&#xA;      privileges: [ read, execute ]&#xA;&#xA;- !grant&#xA;  role: !group secrets/users&#xA;  members:&#xA;    - !host conjur/authn-jwt/eso/apps/system:serviceaccount:demo-app:demo-app-sa&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We must now copy these files to the CLI pod and load them into Conjur. Assuming you’re using the Conjur instance we created in the previous step, the commands would be as follows:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;$ kubectl cp -n $CONJUR_NAMESPACE authn-jwt.yml $CLI_POD_NAME:/&#xA;$ kubectl cp -n $CONJUR_NAMESPACE authn-jwt-apps.yml $CLI_POD_NAME:/&#xA;$ kubectl cp -n $CONJUR_NAMESPACE secrets.yml $CLI_POD_NAME:/&#xA;&#xA;$ kubectl exec -n $CONJUR_NAMESPACE $CLI_POD_NAME -- conjur policy load -b root -f authn-jwt.yml&#xA;$ kubectl exec -n $CONJUR_NAMESPACE $CLI_POD_NAME -- conjur policy load -b root -f authn-jwt-apps.yml&#xA;$ kubectl exec -n $CONJUR_NAMESPACE $CLI_POD_NAME -- conjur policy load -b root -f secrets.yml&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now, let’s populate the values of all those variables we just created. First we’ll do the ones necessary for the JWT authenticator. This will allow Conjur to verify that Kubernetes has issued the JWT presented by ESO.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;# Get the necessary JWT info from the Kubernetes API&#xA;$ ISSUER=&#34;$(kubectl get --raw /.well-known/openid-configuration | jq -r &#39;.issuer&#39;)&#34;&#xA;$ JWKS_URI=&#34;$(kubectl get --raw /.well-known/openid-configuration | jq -r &#39;.jwks_uri&#39;)&#34;&#xA;$ kubectl get --raw &#34;$JWKS_URI&#34; &amp;gt; jwks.json&#xA;$ kubectl cp -n $CONJUR_NAMESPACE jwks.json $CLI_POD_NAME:/&#xA;$ kubectl exec -n $CONJUR_NAMESPACE $CLI_POD_NAME -- conjur variable set -i &#34;conjur/authn-jwt/eso/token-app-property&#34; -v &#34;sub&#34;&#xA;$ kubectl exec -n $CONJUR_NAMESPACE $CLI_POD_NAME -- conjur variable set -i &#34;conjur/authn-jwt/eso/issuer&#34; -v &#34;$ISSUER&#34;&#xA;$ kubectl exec -n $CONJUR_NAMESPACE $CLI_POD_NAME -- conjur variable set -i &#34;conjur/authn-jwt/eso/public-keys&#34; -v &#34;{\&#34;type\&#34;:\&#34;jwks\&#34;, \&#34;value\&#34;:$(cat jwks.json)}&#34;&#xA;$ kubectl exec -n $CONJUR_NAMESPACE $CLI_POD_NAME -- conjur variable set -i &#34;conjur/authn-jwt/eso/identity-path&#34; -v &#34;conjur/authn-jwt/eso/apps&#34;&#xA;$ kubectl exec -n $CONJUR_NAMESPACE $CLI_POD_NAME -- conjur variable set -i &#34;conjur/authn-jwt/eso/audience&#34; -v &#34;https://conjur-conjur-oss.$CONJUR_NAMESPACE.svc.cluster.local&#34;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Note: We need to make sure that the JWT authenticator is enabled in the Conjur configuration.&amp;nbsp;&lt;/em&gt;&lt;em&gt;(“Configuring Conjur”), we did this by providing the “authenticators” property in the `helm install` command. If you’re using a different Conjur instance, make sure you enable it by following the steps in “&lt;/em&gt;&lt;em&gt;Step 2:&amp;nbsp;&lt;/em&gt;&lt;em&gt;Allowlist the&amp;nbsp;&lt;/em&gt;&lt;em&gt;authenticators”&lt;/em&gt;&lt;em&gt;&amp;nbsp;section of the&amp;nbsp;&lt;/em&gt;&lt;a href=&#34;https://docs.cyberark.com/conjur-open-source/Latest/en/Content/Operations/Services/authentication-types.htm&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;documentation&lt;/em&gt;&lt;/a&gt;&lt;em&gt;&amp;nbsp;(TL;DR: add “authn-jwt/eso” to the “&lt;/em&gt;&lt;em&gt;CONJUR_AUTHENTICATORS” environment variable on the Conjur container).&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We can now add the values for the demo app’s secrets. Later, we’ll use these same values to configure the database service.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;$ kubectl exec -n $CONJUR_NAMESPACE $CLI_POD_NAME -- conjur variable set -i &#34;secrets/db/url&#34; -v &#34;postgresql://db.demo-app.svc.cluster.local:5432/demo-app&#34;&#xA;$ kubectl exec -n $CONJUR_NAMESPACE $CLI_POD_NAME -- conjur variable set -i &#34;secrets/db/username&#34; -v &#34;db-user&#34;&#xA;$ kubectl exec -n $CONJUR_NAMESPACE $CLI_POD_NAME -- conjur variable set -i &#34;secrets/db/password&#34; -v &#34;P0stgre5P@ss%&#34;&#xA;$ kubectl exec -n $CONJUR_NAMESPACE $CLI_POD_NAME -- conjur variable set -i &#34;secrets/db/platform&#34; -v &#34;postgres&#34;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;Installing ESO&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Let’s install the ESO in our cluster to act as a broker to pull secrets from Conjur. You can use any version since v0.9.17, but by default, this will use the newest release.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;$ helm repo add external-secrets https://charts.external-secrets.io&#xA;$ helm install external-secrets external-secrets/external-secrets -n external-secrets --create-namespace&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;We’ll need a Kubernetes namespace to put all of our demo app-related objects. Let’s create one now. This will allow us to use separate ESO stores if we want to provide secrets to a different app running in a different namespace. Remember, it’s always best to limit the access to secrets to the minimum number of processes. In this case, we only need them in the demo app’s namespace.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;$ kubectl create namespace demo-app&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now, let’s load some configuration, so ESO knows how to connect to Conjur using a Kubernetes service account token. Copy the following into an editor and save it as service-account.yml:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;---&#xA;apiVersion: v1&#xA;kind: ServiceAccount&#xA;metadata:&#xA;  name: demo-app-sa&#xA;  namespace: demo-app&#xA;---&#xA;apiVersion: v1&#xA;kind: Secret&#xA;type: kubernetes.io/service-account-token&#xA;metadata:&#xA;  name: demo-app-sa-secret&#xA;  namespace: demo-app&#xA;  annotations:&#xA;    kubernetes.io/service-account.name: &#34;demo-app-sa&#34;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now we need to create a SecretStore that will tell ESO how to connect to Conjur using the Service Account Token “demo-app-sa” we created and gave access to the demo app’s secrets. But first, you’ll need to replace the value of the CA bundle with the CA cert used by Conjur since we’re using a self-signed certificate that ESO won’t know to trust. You can get the value by running:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;kubectl get secret -n conjur conjur-conjur-ssl-ca-cert -o jsonpath=&#34;{.data[&#39;tls\.crt&#39;]}&#34;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now save the following into a “eso-jwt-provider.yml” file. Note that you’ll need to replace the URLs and other connection details if you’re using different settings.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;---&#xA;apiVersion: external-secrets.io/v1beta1&#xA;kind: SecretStore&#xA;metadata:&#xA;  name: conjur-jwt&#xA;  namespace: demo-app&#xA;spec:&#xA;  provider:&#xA;    conjur:&#xA;      url: https://conjur-conjur-oss.conjur.svc.cluster.local&#xA;      caBundle: # Paste output of the previous command here&#xA;      auth:&#xA;        jwt:&#xA;          account: demo&#xA;          serviceID: eso&#xA;          serviceAccountRef:&#xA;            name: demo-app-sa&#xA;            audiences:&#xA;              - https://conjur-conjur-oss.conjur.svc.cluster.local&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Load these manifest files into Kubernetes:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;$ kubectl apply -f service-account.yml&#xA;$ kubectl apply -f eso-jwt-provider.yml&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now that we have the basic configuration for ESO set up let’s install our demo app.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;The Demo Application&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Before creating the demo application, let’s create the database service it’ll connect to.&lt;br&gt;We’re using the same credentials that we populated in the Conjur variables for the demo app.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;$ helm repo add bitnami https://charts.bitnami.com/bitnami&#xA;$ helm install postgresql bitnami/postgresql -n demo-app --set &#34;auth.username=db-user&#34; --set &#34;auth.password=P0stgre5P@ss%&#34; --set &#34;auth.database=demo-app&#34; --set &#34;fullnameOverride=db&#34; --set &#34;tls.enabled=true&#34; --set &#34;tls.autoGenerated=true&#34;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Save the following manifest to a file called “demo-app.yml”:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;---&#xA;apiVersion: v1&#xA;kind: Service&#xA;metadata:&#xA;  name: demo-app&#xA;  namespace: demo-app&#xA;  labels:&#xA;    app: demo-app&#xA;spec:&#xA;  ports:&#xA;  - protocol: TCP&#xA;    port: 8080&#xA;    targetPort: 8080&#xA;  selector:&#xA;    app: demo-app&#xA;  type: NodePort&#xA;---&#xA;apiVersion: apps/v1&#xA;kind: Deployment&#xA;metadata:&#xA;  labels:&#xA;    app: demo-app&#xA;  name: demo-app&#xA;  namespace: demo-app&#xA;spec:&#xA;  replicas: 1&#xA;  selector:&#xA;    matchLabels:&#xA;      app: demo-app&#xA;  template:&#xA;    metadata:&#xA;      labels:&#xA;        app: demo-app&#xA;    spec:&#xA;      serviceAccountName: demo-app-sa&#xA;      containers:&#xA;      - name: demo-app&#xA;        image: cyberark/demo-app:latest&#xA;        imagePullPolicy: IfNotPresent&#xA;        ports:&#xA;        - name: http&#xA;          containerPort: 8080&#xA;        readinessProbe:&#xA;          httpGet:&#xA;            path: /pets&#xA;            port: http&#xA;          initialDelaySeconds: 15&#xA;          timeoutSeconds: 5&#xA;        env:&#xA;          - name: DB_URL&#xA;            valueFrom:&#xA;              secretKeyRef:&#xA;                name: db-credentials&#xA;                key: url&#xA;          - name: DB_USERNAME&#xA;            valueFrom:&#xA;              secretKeyRef:&#xA;                name: db-credentials&#xA;                key: username&#xA;          - name: DB_PASSWORD&#xA;            valueFrom:&#xA;              secretKeyRef:&#xA;                name: db-credentials&#xA;                key: password&#xA;          - name: DB_PLATFORM&#xA;            valueFrom:&#xA;              secretKeyRef:&#xA;                name: db-credentials&#xA;                key: platform&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;You can see that this app will take its environment variables from Kubernetes secrets. But we haven’t created any yet! Let’s add configuration to ESO to instruct it to sync those secrets from Conjur into Kubernetes, where the app can reach them.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Save the following as “external-secret.yml”:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;---&#xA;apiVersion: external-secrets.io/v1beta1&#xA;kind: ExternalSecret&#xA;metadata:&#xA;  name: external-secret&#xA;  namespace: demo-app&#xA;spec:&#xA;  # Optional: refresh the secret at an interval&#xA;  # refreshInterval: 10s&#xA;  secretStoreRef:&#xA;    name: conjur-jwt&#xA;    kind: SecretStore&#xA;  target:&#xA;    # The Kubernetes secret that will be created&#xA;    name: db-credentials&#xA;    creationPolicy: Owner&#xA;  data:&#xA;  # The keys in the Kubernetes secret that will be populated,&#xA;  # along with the path of the Conjur secret that will be used&#xA;  - secretKey: url&#xA;    remoteRef:&#xA;      key: secrets/db/url&#xA;  - secretKey: username&#xA;    remoteRef:&#xA;      key: secrets/db/username&#xA;  - secretKey: password&#xA;    remoteRef:&#xA;      key: secrets/db/password&#xA;  - secretKey: platform&#xA;    remoteRef:&#xA;      key: secrets/db/platform&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Now, for the moment of truth, let’s load these files into Kubernetes.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;$ kubectl apply -f external-secret.yml&#xA;$ kubectl apply -f demo-app.yml&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;If all goes well, you should be able to see a successful startup message in the demo app’s logs:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;$ DEMO_POD_NAME=$(kubectl get pods --namespace demo-app -l &#34;app=demo-app&#34; -o jsonpath=&#34;{.items[0].metadata.name}&#34;)&#xA;$ kubectl logs $DEMO_POD_NAME -n demo-app&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-image aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://developer.cyberark.com/wp-content/uploads/2024/08/spring-boot.png&#34; alt=&#34;Spring Boot&#34; class=&#34;wp-image-7796&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;br&gt;This means that the app is successfully connecting to the database using the credentials stored in Conjur.&lt;br&gt;You can even verify that the app is working by deploying a pod containing ‘curl’ and running a test query to the app:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;---&#xA;apiVersion: v1&#xA;kind: Pod&#xA;metadata:&#xA;  name: curl&#xA;  labels:&#xA;    name: curl&#xA;spec:&#xA;  containers:&#xA;  - name: curl&#xA;    image: curlimages/curl:latest&#xA;    imagePullPolicy: Always&#xA;    command: [&#34;sh&#34;, &#34;-c&#34;, &#34;tail -f /dev/null&#34;]&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;After applying that, run:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;$ kubectl exec curl -- curl -X POST -H &#39;Content-Type: application/json&#39; --data &#39;{&#34;name&#34;:&#34;Accelerator Alice&#34;}&#39; http://demo-app.demo-app.svc.cluster.local:8080/pet&#xA;$ kubectl exec curl -- curl http://demo-app.demo-app.svc.cluster.local:8080/pets&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;It should successfully create a new “pet” in the first request and return it when you run the second. This illustrates that the app can perform database operations using the credentials stored and retrieved from Conjur.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;And that’s it! There are tons more options – for example, you can adjust your external-secret.yml spec to fetch several Conjur secrets by searching with a regex or matching on annotations, but for that, you’ll need to check out the documentation! Hopefully, this provides a helpful starting point, and you will now have a deep understanding of how the Conjur – ESO integration works.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;If you’ve read to the end, thank you! You’re a champ 💪&lt;br&gt;Now, go secure your software!&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-media-text is-stacked-on-mobile has-gray-200-background-color has-background&#34; style=&#34;grid-template-columns:23% auto&#34;&gt;&lt;figure class=&#34;wp-block-media-text__media&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://developer.cyberark.com/wp-content/uploads/2023/01/hs-shlomo-heigh.jpg&#34; alt=&#34;Shlomo headshot&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;/figure&gt;&lt;div class=&#34;wp-block-media-text__content&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://developer.cyberark.com/blog/author/sheigh/&#34;&gt;Shlomo Heigh&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Shlomo is a senior software engineer at CyberArk working on Conjur Secrets Manager. He’s an open source and AppSec enthusiast, a member of the CNCF TAG Security and a contributor to multiple OWASP projects. In his free time, you can find him spending time with his wife and daughter, 3D printing, woodworking or hiking.&lt;/p&gt;&#xA;&lt;/div&gt;&lt;/div&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;】&lt;p&gt;&lt;em&gt;成员帖子最初发布于 &lt;a href=&#34;https://developer.cyberark.com/blog/enhancing-kubernetes-security-and-flexibility-with-the-cyberark-conjur-and-eso-集成/&#34;&gt;Cyber​​Ark 博客&lt;/a&gt; 作者：Shlomo Heigh&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;在当今快节奏的 DevOps 和云原生应用程序世界中，安全地管理机密至关重要。 Cyber​​Ark Conjur 是一种值得信赖的秘密管理解决方案，通过与外部秘密运营商 (ESO) 无缝集成，迈出了重要的一步。此次合作汇集了两方面的优势：Conjur 强大的秘密管理功能和 ESO 在跨 Kubernetes 集群处理秘密方面的灵活性。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;在 Cyber​​Ark，我们致力于提供可供公司使用的工具来确保其最敏感信息的安全。我们还尽力确保信息可以在需要时访问，并且只能由授权人员或流程访问。在某些方面，这是秘密管理中更具挑战性的部分，特别是在考虑流程可能运行的所有“位置”时——公共云、私有云或混合云； SaaS 服务；本地工作负载；还有更多。这就是为什么 Conjur 团队提供了多个 API 和本机集成，以允许应用程序在需要时无缝检索所需的机密。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;随着云原生生态系统的大规模增长，特别是 Kubernetes 及其各种风格（例如 OpenShift 和 Tanzu），一个开源项目已成为应对这一挑战的主要参与者——External Secrets Operator (ESO)。 ESO 是&lt;a href=&#34;https://www.cncf.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;云原生计算基金会 (CNCF)&lt;/a&gt; 下的一个开源项目，同样监督 Kubernetes 开发的基金会。 ESO 很受欢迎，因为它是一个即插即用系统，可以添加到 Kubernetes 集群中，以处理从许多秘密管理系统中获取秘密，并将它们无缝地提供给集群中运行的工作负载。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote class=&#34;wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow&#34;&gt;&#xA;&lt;p&gt;（旁注：还有另一种方法可以使用 &lt;a href=&#34;https://secrets-store-csi-driver.sigs.k8s.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer 来实现类似的结果noopener&#34;&gt;Kubernetes Secrets Store CSI 驱动程序&lt;/a&gt;，&lt;a href=&#34;https://github.com/cyberark/conjur-k8s-csi-provider&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Conjur &lt;/a&gt; 也支持，但它们的优缺点超出了本文的范围，但主要区别在于 CSI 驱动程序将机密安装到 Pod 中，需要卷并且不使用 Kubernetes 机密。在集群/命名空间级别并使用 Kubernetes 机密。）&lt;/p&gt;&#xA;&lt;/块引用&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;我们很高兴地宣布，我们最近与 ESO 维护团队合作，增加了对使用 ESO 从 Conjur 获取机密的支持。在这篇文章中，我们将引导您完成通过使用存储在 Conjur 中并由 ESO 提供的机密的应用程序设置 Kubernetes 环境。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;让我们开始吧！&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;搭建舞台&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote class=&#34;wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow&#34;&gt;&#xA;&lt;p&gt;&lt;em&gt;注意&lt;/em&gt;&lt;em&gt;：本演练非常技术性，并且包含大量代码。它适用于那些已经熟悉 Kubernetes 和 shell 脚本的人。&lt;/em&gt;&lt;/p&gt;&#xA;&lt;/块引用&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;脚本演示位于&lt;/em&gt;&lt;a href=&#34;https://github.com/conjurdemos/Accelerator-K8s-External-Secrets/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener &#34;&gt;&lt;em&gt;https://github.com/conjurdemos/Accelerator-K8s-External-Secrets/&lt;/em&gt;&lt;/a&gt;&lt;em&gt;，&lt;/em&gt;&lt;em&gt; 简化创建证明的过程无需深入研究所有复杂的概念。这篇文章为那些想要准确了解每一步发生的事情的人提供了所有详细信息。&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;在本演示中，我们将使用 Docker Desktop 中包含的 Kubernetes 发行版。您可以在“设置”屏幕中启用它，如下所示：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-imagealigncenter&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://developer.cyberark.com/wp-content/uploads/2024/08/docker-desktop.png&#34; alt =&#34;Docker Desktop&#34; class=&#34;wp-image-7787&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;为了说明在 Kubernetes 环境中使用 Conjur 和 ESO，我们将部署一个依赖数据库连接详细信息来运行的应用程序。然后，我们将让 ESO 从 Conjur 获取这些详细信息，并将它们注入 Kubernetes Secrets，应用程序可以在其中读取它们。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;我们将使用我们的 Pet Store 演示应用程序作为该应用程序。您可以在 &lt;a href=&#34;https://github.com/conjurdemos/pet-store-demo&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;https://github.com/conjurdemos/pet 查看代码-store-demo&lt;/a&gt;，其镜像在 DockerHub 上为 &lt;a href=&#34;https://hub.docker.com/r/cyberark/demo-app&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34; &gt;cyberark/演示应用程序&lt;/a&gt;。此应用程序需要四个密钥作为环境变量：DB_URL、DB_USERNAME、DB_PASSWORD 和 DB_PLATFORM。我们希望将这些值存储在安全的位置，因此我们首先将 Conjur 设置为我们的秘密存储。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;设置 Conjur 实例&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;我们可以使用 Conjur OSS 在 Kubernetes 集群中轻松安装 Conjur OSS 实例 &lt;a href=&#34;https://github.com/cyberark/conjur-oss-helm-chart/tree/main/conjur- oss&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Helm 图表&lt;/a&gt;。如果您已经有 Conjur 实例，则可以跳到下一部分（&lt;em&gt;配置 Conjur&lt;/em&gt;）。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;$ CONJUR_NAMESPACE=conjur&#xA;$ kubectl 创建命名空间“$CONJUR_NAMESPACE”&#xA;$ DATA_KEY =“$（docker run --rm cyberark / conjur数据密钥生成）”&#xA;$ helm repo 添加 cyberark https://cyberark.github.io/helm-charts&#xA;$ helm install -n &#34;$CONJUR_NAMESPACE&#34; --set dataKey =“$ DATA_KEY”--设置验证器=“authn \，authn-jwt / eso” conjur cyberark / conjur-oss&#xA;$ CONJUR_ACCOUNT=演示&#xA;$ POD_NAME=$(kubectl get pods --namespace &#34;$CONJUR_NAMESPACE&#34; \&#xA;            -l &#34;app=conjur-oss,release=conjur&#34; \&#xA;            -o jsonpath=&#34;{.items[0].metadata.name}&#34;)&#xA;# 这将创建一个帐户并打印 API 密钥。将其存放在安全的地方。&#xA;$ kubectl exec --namespace $CONJUR_NAMESPACE \&#xA;              $POD_NAME \&#xA;              --container=conjur-oss \&#xA;              -- conjurctl 帐户创建 $CONJUR_ACCOUNT |尾部-1&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;您现在已经在本地 Kubernetes 集群中运行了一个 Conjur 实例。要使用 Pet Store 演示应用程序所需的机密配置 Conjur，我们必须使用 Conjur CLI 连接到它。由于我们已经在 Kubernetes 中安装了 Conjur，因此我们可以在可以运行 CLI 的同一命名空间中创建一个 pod。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;将以下文件保存为 cli.yml：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;api版本：apps/v1&#xA;种类：部署&#xA;元数据：&#xA;  名称： conjur-cli&#xA;  标签：&#xA;    应用程序：conjur-cli&#xA;规格：&#xA;  副本：1&#xA;  选择器：&#xA;    匹配标签：&#xA;      应用程序：conjur-cli&#xA;  模板：&#xA;    元数据：&#xA;      名称： conjur-cli&#xA;      标签：&#xA;        应用程序：conjur-cli&#xA;    规格：&#xA;      容器：&#xA;      - 名称：conjur-cli&#xA;        图片：cyberark/conjur-cli:8&#xA;        命令：[“睡眠”]&#xA;        参数：[“无穷大”]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;现在运行以下命令来创建文件中定义的 Conjur CLI 部署：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;$ kubectl apply -f cli.yml -n $CONJUR_NAMESPACE&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;现在，让我们获取新创建的 CLI pod 的名称并登录到我们的 Conjur 实例。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;$ CLI_POD_NAME=$(kubectl get pods --namespace &#34;$CONJUR_NAMESPACE&#34; -l &#34;app=conjur-cli&#34; -o jsonpath=&#34;{.项目[0].metadata.name}&#34;)&#xA;$ CONJUR_URL=https://conjur-conjur-oss.$CONJUR_NAMESPACE.svc.cluster.local&#xA;$ kubectl exec -n $CONJUR_NAMESPACE $CLI_POD_NAME -ti -- conjur init -a $CONJUR_ACCOUNT -u $CONJUR_URL --自签名&#xA;# 现在登录。当提示输入密码时，粘贴您在上面创建帐户时返回的 API 密钥&#xA;$ kubectl exec -n $CONJUR_NAMESPACE $CLI_POD_NAME -ti -- conjur 登录 -i admin&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;我们现在有一个使用 CLI 运行的 pod，并以管理员身份登录到我们的 Conjur 实例。我们现在准备开始创建策略和变量！&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;配置 Conjur&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;我们需要将 Conjur 配置为：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol类=“wp-block-list”&gt;&#xA;&lt;li&gt;存储演示应用所需的机密。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;允许外部机密操作员向 Conjur 进行身份验证。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li&gt;允许外部机密操作员获取演示应用的机密。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;为了避免存储 API 密钥来访问 Conjur（另一个需要管理的秘密），我们将使用 Kubernetes 原生服务帐户令牌来允许 ESO 对 Conjur 进行身份验证。让我们首先创建一个 Conjur 策略文件 that 定义了 ESO 将用来进行身份验证的 JWT 身份验证器。创建以下文件并将其另存为 authn-jwt.yml：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;- !policy&#xA;  id: conjur/authn-jwt/eso&#xA;  注释：&#xA;    描述：AuthnJWT 服务的配置&#xA;  身体：&#xA;    - !网络服务&#xA;&#xA;    # - !变量 jwks-uri&#xA;    - !可变公钥&#xA;    - !变量发行者&#xA;    - !变量令牌应用程序属性&#xA;    - !变量身份路径&#xA;    - !可变的受众&#xA;&#xA;    # 可以使用此 JWT 身份验证器进行身份验证的应用程序组&#xA;    - !组用户&#xA;  &#xA;    - ！允许&#xA;      角色：!组用户&#xA;      权限：[读取、验证]&#xA;      资源：!webservice&#xA;&#xA;    - !网络服务状态&#xA;   &#xA;    # 可以检查 JWT Authenticator 状态的用户组&#xA;    - !组运算符&#xA;   &#xA;    - ！允许&#xA;      角色：!组运算符&#xA;      特权：[阅读]&#xA;      资源：！webservice状态&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;现在，创建另一个名为 authn-jwt-apps.yml 的文件。我们将使用“demo-app”作为命名空间名称，使用“demo-app-sa”作为服务帐户名称：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;- !policy&#xA;  id: conjur/authn-jwt/eso/apps&#xA;  注释：&#xA;    描述：允许使用 AuthnJWT 服务进行身份验证的身份&#xA;  身体：&#xA;    - ！团体&#xA;&#xA;    - 主机&#xA;      - ！主持人&#xA;        id: 系统:serviceaccount:demo-app:demo-app-sa&#xA;        注释：&#xA;          authn-jwt/eso/sub: 系统:serviceaccount:demo-app:demo-app-sa&#xA;&#xA;    - ！授予&#xA;        角色：!组&#xA;        成员：*主持人&#xA;&#xA;- ！授予&#xA;    角色：!group conjur/authn-jwt/eso/users&#xA;    成员：!group conjur/authn-jwt/eso/apps&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;现在，创建第三个也是最后一个策略文件，该文件将定义应用程序所需的机密并授予 ESO 访问权限。将此保存为 Secrets.yml：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;- !policy&#xA;  id: 秘密&#xA;  身体：&#xA;    - &amp;变量&#xA;      - !变量数据库/url&#xA;      - !变量数据库/用户名&#xA;      - !变量数据库/密码&#xA;      - !变量数据库/平台&#xA;&#xA;    - !组用户&#xA;&#xA;    - ！允许&#xA;      资源：*变量&#xA;      角色：!组用户&#xA;      权限：[读取、执行]&#xA;&#xA;- ！授予&#xA;  角色：!组秘密/用户&#xA;  成员：&#xA;    - !host conjur/authn-jwt/eso/apps/system:serviceaccount:demo-app:demo-app-sa&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;我们现在必须将这些文件复制到 CLI pod 并将它们加载到 Conjur 中。假设您使用我们在上一步中创建的 Conjur 实例，命令如下：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;$ kubectl cp -n $CONJUR_NAMESPACE authn-jwt.yml $CLI_POD_NAME:/&#xA;$ kubectl cp -n $CONJUR_NAMESPACE authn-jwt-apps.yml $CLI_POD_NAME:/&#xA;$ kubectl cp -n $CONJUR_NAMESPACE Secrets.yml $CLI_POD_NAME:/&#xA;&#xA;$ kubectl exec -n $CONJUR_NAMESPACE $CLI_POD_NAME -- conjur 策略加载 -b root -f authn-jwt.yml&#xA;$ kubectl exec -n $CONJUR_NAMESPACE $CLI_POD_NAME -- conjur 策略加载 -b root -f authn-jwt-apps.yml&#xA;$ kubectl exec -n $CONJUR_NAMESPACE $CLI_POD_NAME -- 构造策略加载 -b root-f 秘密.yml&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;现在，让我们填充刚刚创建的所有变量的值。首先，我们将执行 JWT 身份验证器所需的操作。这将允许 Conjur 验证 Kubernetes 是否已颁发 ESO 提供的 JWT。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;# 从 Kubernetes API 获取必要的 JWT 信息&#xA;$ ISSUER =“$（kubectl get --raw /.well-known/openid-configuration | jq -r &#39;.issuer&#39;）”&#xA;$ JWKS_URI =“$（kubectl get --raw /.well-known/openid-configuration | jq -r &#39;.jwks_uri&#39;）”&#xA;$ kubectl get --raw &#34;$JWKS_URI&#34; &gt; jwks.json&#xA;$ kubectl cp -n $CONJUR_NAMESPACE jwks.json $CLI_POD_NAME:/&#xA;$ kubectl exec -n $CONJUR_NAMESPACE $CLI_POD_NAME -- conjur 变量集 -i &#34;conjur/authn-jwt/eso/token-app-property&#34; -v &#34;sub&#34;&#xA;$ kubectl exec -n $CONJUR_NAMESPACE $CLI_POD_NAME -- conjur 变量集 -i &#34;conjur/authn-jwt/eso/issuer&#34; -v &#34;$ISSUER&#34;&#xA;$ kubectl exec -n $CONJUR_NAMESPACE $CLI_POD_NAME -- conjur 变量集 -i &#34;conjur/authn-jwt/eso/public-keys&#34; -v &#34;{\&#34;type\&#34;:\&#34;jwks\&#34;, \&#34;value\&#34; :$(cat jwks.json)}&#34;&#xA;$ kubectl exec -n $CONJUR_NAMESPACE $CLI_POD_NAME -- conjur 变量集 -i &#34;conjur/authn-jwt/eso/identity-path&#34; -v &#34;conjur/authn-jwt/eso/apps&#34;&#xA;$ kubectl exec -n $CONJUR_NAMESPACE $CLI_POD_NAME -- conjur 变量集 -i &#34;conjur/authn-jwt/eso/audience&#34; -v &#34;https://conjur-conjur-oss.$CONJUR_NAMESPACE.svc.cluster.local&#34;&lt; /代码&gt;&lt;/前&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;em&gt;注意：我们需要确保在 Conjur 配置中启用 JWT 身份验证器。 &lt;/em&gt;&lt;em&gt;（“配置 Conjur”），我们通过在“helm install”命令中提供“authenticators”属性来完成此操作。如果您使用的是其他 Conjur 实例，请确保按照“&lt;/em&gt;&lt;em&gt;第 2 步：&lt;/em&gt;&lt;em&gt;将身份验证器列入白名单”&lt;中的步骤来启用它。 /em&gt;&lt;em&gt; 部分&lt;/em&gt;&lt;a href=&#34;https://docs.cyberark.com/conjur-open-source/Latest/en/Content/Operations/Services/authentication-types.htm&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;文档&lt;/em&gt;&lt;/a&gt;&lt;em&gt;（TL;DR：将“authn-jwt/eso”添加到“&lt;/em&gt;&lt;em&gt; CONJUR_AUTHENTICATORS”Conjur 容器上的环境变量）。&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;我们现在可以添加演示应用程序的机密值。稍后，我们将使用这些相同的值来配置数据库服务。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;$ kubectl exec -n $CONJUR_NAMESPACE $CLI_POD_NAME -- conjur 变量集 -i &#34;secrets/db/url&#34; -v &#34;postgresql://db .demo-app.svc.cluster.local:5432/demo-app&#34;&#xA;$ kubectl exec -n $CONJUR_NAMESPACE $CLI_POD_NAME -- conjur 变量集 -i &#34;secrets/db/username&#34; -v &#34;db-user&#34;&#xA;$ kubectl exec -n $CONJUR_NAMESPACE $CLI_POD_NAME -- conjur 变量集 -i &#34;secrets/db/password&#34; -v &#34;P0stgre5P@ss%&#34;&#xA;$ kubectl exec -n $CONJUR_NAMESPACE $CLI_POD_NAME -- conjur 变量集 -i &#34;secrets/db/platform&#34; -v &#34;postgres&#34;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;安装 ESO&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;让我们在集群中安装 ESO，以充当从 Conjur 提取机密的代理。你可以使用 v0.9.17 以来的任何版本，但默认情况下，这将使用最新版本。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;$ helm 存储库添加外部秘密 https://charts.external-secrets.io&#xA;$ helm install external-secrets external-secrets/external-secrets -n external-secrets --create-namespace&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;我们需要一个 Kubernetes 命名空间来放置所有与演示应用程序相关的对象。现在让我们创建一个。如果我们想向在不同命名空间中运行的不同应用程序提供机密，这将允许我们使用单独的 ESO 存储。请记住，最好将对机密的访问限制为最少的进程数。在本例中，我们只需要在演示应用程序的命名空间中使用它们。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;$ kubectl 创建命名空间 demo-app&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;现在，让我们加载一些配置，以便 ESO 知道如何使用 Kubernetes 服务帐户令牌连接到 Conjur。将以下内容复制到编辑器中并将其另存为 service-account.yml：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;---&#xA;api版本：v1&#xA;种类：服务帐户&#xA;元数据：&#xA;  名称：演示应用程序-sa&#xA;  命名空间：demo-app&#xA;---&#xA;api版本：v1&#xA;种类：秘密&#xA;类型：kubernetes.io/service-account-token&#xA;元数据：&#xA;  名称：demo-app-sa-secret&#xA;  命名空间：demo-app&#xA;  注释：&#xA;    kubernetes.io/service-account.name：“demo-app-sa”&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;现在我们需要创建一个 SecretStore，它将告诉 ESO 如何使用我们创建的服务帐户令牌“demo-app-sa”连接到 Conjur，并授予对演示应用程序秘密的访问权限。但首先，您需要将 CA 捆绑包的值替换为 Conjur 使用的 CA 证书，因为我们使用的是 ESO 不知道信任的自签名证书。您可以通过运行获取该值：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;kubectl 获取秘密 -n conjur conjur-conjur-ssl-ca-cert -o jsonpath=&#34;{.data[&#39;tls\.crt&#39;] }&#34;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;现在将以下内容保存到“eso-jwt-provider.yml”文件中。请注意，如果您使用不同的设置，则需要替换网址和其他连接详细信息。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;---&#xA;api版本：external-secrets.io/v1beta1&#xA;种类：秘密商店&#xA;元数据：&#xA;  名称： conjur-jwt&#xA;  命名空间：demo-app&#xA;规格：&#xA;  提供商：&#xA;    召唤：&#xA;      网址：https://conjur-conjur-oss.conjur.svc.cluster.local&#xA;      caBundle: # 将上一个命令的输出粘贴到此处&#xA;      授权：&#xA;        智威汤逊：&#xA;          账户：模拟账户&#xA;          服务ID：eso&#xA;          服务帐号参考：&#xA;            名称：demo-app-sa&#xA;            观众：&#xA;              - https://conjur-conjur-oss.conjur.svc.cluster.local&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;将这些清单文件加载到 Kubernetes 中：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;$ kubectl apply -f service-account.yml&#xA;$ kubectl apply -f eso-jwt-provider.yml&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;现在我们已经设置了 ESO 的基本配置，让我们安装我们的演示应用程序。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 class=&#34;wp-block-heading&#34;&gt;演示应用程序&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;之前在创建演示应用程序之后，让我们创建它将连接到的数据库服务。&lt;br&gt;我们使用在演示应用程序的 Conjur 变量中填充的相同凭据。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;$ helm 存储库添加 bitnami https://charts.bitnami.com/bitnami&#xA;$ helm install postgresql bitnami/postgresql -n demo-app --set &#34;auth.username=db-user&#34; --set &#34;auth.password=P0stgre5P@ss%&#34; --set &#34;auth.database=demo-app&#34; - -设置“fullnameOverride=db”--设置“tls.enabled=true”--设置“tls.autoGenerate=true”&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;将以下清单保存到名为“demo-app.yml”的文件中：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;---&#xA;api版本：v1&#xA;种类： 服务&#xA;元数据：&#xA;  名称：演示应用程序&#xA;  命名空间：demo-app&#xA;  标签：&#xA;    应用程序：演示应用程序&#xA;规格：&#xA;  端口：&#xA;  - 协议：TCP&#xA;    端口：8080&#xA;    目标端口：8080&#xA;  选择器：&#xA;    应用程序：演示应用程序&#xA;  类型：节点端口&#xA;---&#xA;api版本：apps/v1&#xA;种类：部署&#xA;元数据：&#xA;  标签：&#xA;    应用程序：演示应用程序&#xA;  名称：演示应用程序&#xA;  命名空间：demo-app&#xA;规格：&#xA;  副本：1&#xA;  选择器：&#xA;    匹配标签：&#xA;      应用程序：演示应用程序&#xA;  模板：&#xA;    元数据：&#xA;      标签：&#xA;        应用程序：演示应用程序&#xA;    规格：&#xA;      服务帐户名称：demo-app-sa&#xA;      容器：&#xA;      - 名称：演示应用程序&#xA;        图片：cyberark/demo-app：最新&#xA;        imagePullPolicy：IfNotPresent&#xA;        端口：&#xA;        - 名称：http&#xA;          容器端口：8080&#xA;        准备情况探针：&#xA;          http获取：&#xA;            路径：/pets&#xA;            端口：http&#xA;          初始延迟秒数：15&#xA;          超时秒数：5&#xA;        环境：&#xA;          - 名称：DB_URL&#xA;            值来自：&#xA;              秘密密钥参考：&#xA;                名称： db-credentials&#xA;                关键：网址&#xA;          - 名称：DB_USERNAME&#xA;            值来自：&#xA;              秘密密钥参考：&#xA;                名称： db-credentials&#xA;                关键：用户名&#xA;          - 名称：DB_PASSWORD&#xA;            值来自：&#xA;              秘密密钥参考：&#xA;                名称： db-credentials&#xA;                密钥：密码&#xA;          - 名称：DB_PLATFORM&#xA;            值来自：&#xA;              秘密密钥参考：&#xA;                名称： db-credentials&#xA;                关键：平台&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;您可以看到该应用程序将从 Kubernetes 机密中获取其环境变量。但我们还没有创建任何东西！让我们向 ESO 添加配置，指示它将这些机密从 Conjur 同步到 Kubernetes，应用程序可以在其中访问它们。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;将以下内容保存为“external-secret.yml”：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;---&#xA;api版本：external-secrets.io/v1beta1&#xA;种类：外部秘密&#xA;元数据：&#xA;  名称：外部秘密&#xA;  命名空间：demo-app&#xA;规格：&#xA;  # 可选：每隔一段时间刷新一次secret&#xA;  # 刷新间隔：10s&#xA;  秘密商店参考：&#xA;    名称： conjur-jwt&#xA;    种类：秘密商店&#xA;  目标：&#xA;    # 将创建的 Kubernetes 密钥&#xA;    名称： db-credentials&#xA;    创建策略：所有者&#xA;  数据：&#xA;  # 将填充的 Kubernetes 密钥中的密钥，&#xA;  # 以及你将要使用的 Conjur 秘密的路径sed&#xA;  - 秘钥：网址&#xA;    远程参考：&#xA;      密钥：秘密/db/url&#xA;  - 密钥：用户名&#xA;    远程参考：&#xA;      关键：秘密/数据库/用户名&#xA;  - 密钥：密码&#xA;    远程参考：&#xA;      密钥：秘密/数据库/密码&#xA;  - 密钥：平台&#xA;    远程参考：&#xA;      密钥：secrets/db/platform&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;现在，在关键时刻，让我们将这些文件加载​​到 Kubernetes 中。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;$ kubectl apply -f external-secret.yml&#xA;$ kubectl apply -f demo-app.yml&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;如果一切顺利，您应该能够在演示应用程序的日志中看到成功启动消息：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;$ DEMO_POD_NAME=$(kubectl get pods --namespace demo-app -l &#34;app=demo-app&#34; -o jsonpath=&#34;{.items [0].元数据.名称}&#34;)&#xA;$ kubectl 日志 $DEMO_POD_NAME -n demo-app&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;wp-block-imagealigncenter&#34;&gt;&lt;img解码=&#34;async&#34; src=&#34;https://developer.cyberark.com/wp-content/uploads/2024/08/spring-boot.png&#34; alt =&#34;Spring Boot&#34; class=&#34;wp-image-7796&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;&lt;br&gt;这意味着应用程序已使用 Conjur 中存储的凭据成功连接到数据库。&lt;br&gt;您甚至可以通过部署包含“curl”的 pod 并运行测试查询来验证应用程序是否正常工作该应用程序：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;---&#xA;api版本：v1&#xA;种类: 豆荚&#xA;元数据：&#xA;  名称：卷曲&#xA;  标签：&#xA;    名称：卷曲&#xA;规格：&#xA;  容器：&#xA;  - 名称：卷曲&#xA;    图像：curlimages/curl：最​​新&#xA;    imagePullPolicy：始终&#xA;    命令：[“sh”，“-c”，“tail -f /dev/null”]&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;应用后，运行：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code class=&#34;&#34;&gt;$ kubectl exec curl --curl -X POST -H &#39;内容类型：application/json&#39; --data &#39;{&#34;name&#34;:&#34;加速器爱丽丝”}&#39; http://demo-app.demo-app.svc.cluster.local:8080/pet&#xA;$ kubectl exec curl --curl http://demo-app.demo-app.svc.cluster.local:8080/pets&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;它应该在第一个请求中成功创建一个新的“宠物”，并在运行第二个请求时返回它。这说明应用程序可以使用从 Conjur 存储和检索的凭据执行数据库操作。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;就是这样！还有更多选项 - 例如，您可以调整 external-secret.yml 规范以通过使用正则表达式搜索或匹配注释来获取多个 Conjur 秘密，但为此，您需要查看文档！希望这提供了一个有用的起点，您现在将深入了解 Conjur – ESO 集成的工作原理。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;如果您已经读到最后，谢谢！您是冠军 💪&lt;br&gt;现在，保护您的软件！&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-media-text is-stacked-on-mobile has-gray-200-background-color has-background&#34; style=&#34;grid-template-columns:23% auto&#34;&gt;&lt;figure class= “wp-block-media-text__media”&gt;&lt;img 解码 =“异步”src =“https://developer.cyberark.com/wp-content/uploads/2023/01/hs-shlomo-heigh.jpg”alt = “什洛莫头像”referrerpolicy=&#34;no-referrer&#34;&gt;&lt;/figure&gt;&lt;div class=&#34;wp-block-media-text__content&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://developer.cyberark.com/blog/author/sheigh/&#34;&gt;什洛莫身高&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;Shlomo 是 Cyber​​Ark 的高级软件工程师，负责 Conjur Secrets Manager。他是一位开源和 AppSec 爱好者、CNCF TAG Security 成员以及多个 OWASP 项目的贡献者。在空闲时间，您可以发现他与妻子和女儿共度时光、进行 3D 打印、木工或徒步旅行。&lt;/p&gt;&#xA;&lt;/div&gt;&lt;/div&gt;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&#34;height:80px&#34; aria-hidden=&#34;true&#34; class=&#34;wp-block-spacer is-style-80-120&#34;&gt;&#xA;&lt;/div&gt;</description>
      <pubDate>Wed, 11 Sep 2024 16:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>