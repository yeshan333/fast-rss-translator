<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【DRY Your Apache APISIX Config】干燥您的 Apache APISIX 配置</title>
      <link>https://dzone.com/articles/dry-your-apache-apisix-config</link>
      <description>【&lt;p&gt;&lt;abbr title=&#34;Don&#39;t Repeat Yourself&#34;&gt;DRY&lt;/abbr&gt; is an important principle in software development. This post will show you how to apply it to Apache APISIX configuration.&lt;/p&gt;&#xA;&lt;h2&gt;The DRY Principle&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA; &lt;p style=&#34;text-align: left;&#34;&gt;&#34;Don&#39;t repeat yourself&#34; (DRY) is a principle of software development aimed at reducing repetition of information which is likely to change, replacing it with abstractions that are less likely to change, or using data normalization which avoids redundancy in the first place.&lt;/p&gt;】&lt;p&gt;&lt;abbr title=&#34;Don&#39;t Repeat Yourself&#34;&gt;DRY&lt;/abbr&gt; 是软件开发中的一个重要原则。这篇文章将向您展示如何将其应用于 Apache APISIX 配置。&lt;/p&gt;&#xA;&lt;h2&gt;DRY 原则&lt;/h2&gt;&#xA;&lt;块引用&gt;&#xA; &lt;p style=&#34;text-align: left;&#34;&gt;“不要重复自己”（DRY）是软件开发的一项原则，旨在减少可能改变的信息的重复，用不太可能改变的抽象来代替它。更改，或使用数据规范化来首先避免冗余。&lt;/p&gt;</description>
      <pubDate>Fri, 06 Sep 2024 13:00:09 +0000</pubDate>
    </item>
    <item>
      <title>【Mastering Tailwind CSS: Overcome Styling Conflicts With Tailwind Merge and clsx】掌握 Tailwind CSS：通过 Tailwind Merge 和 clsx 克服样式冲突</title>
      <link>https://dzone.com/articles/mastering-tailwind-css-with-tailwind-merge-and-clsx</link>
      <description>【&lt;p&gt;People have been emailing and asking me to write something on some soft topics for beginners, as I write mostly for mid-level or seniors. So, here is a new article for beginners, especially for UI developers.&lt;/p&gt;&#xA;&lt;p&gt;Today, let&#39;s explore the common challenges developers face when working with Tailwind CSS and how to overcome them using the powerful combination of Tailwind Merge and clsx.&lt;/p&gt;】&lt;p&gt;人们一直在发电子邮件，要求我为初学者写一些关于一些软主题的东西，因为我主要为中级或高级人员写文章。因此，这是一篇针对初学者，尤其是 UI 开发人员的新文章。&lt;/p&gt;&#xA;&lt;p&gt;今天，让我们探讨开发人员在使用 Tailwind CSS 时面临的常见挑战，以及如何使用 Tailwind Merge 和 clsx 的强大组合来克服这些挑战。&lt;/p&gt;</description>
      <pubDate>Fri, 06 Sep 2024 21:00:05 +0000</pubDate>
    </item>
    <item>
      <title>【Ember.js vs React.js: Comparing JavaScript Technologies】Ember.js 与 React.js：比较 JavaScript 技术</title>
      <link>https://dzone.com/articles/comparing-ember-js-vs-react-js</link>
      <description>【&lt;p&gt;Frontend technologies are integral to web development as they determine how users interact with a website or app. For this reason, picking the right front-end technology is essential for optimal user engagement and subsequent project success. React.js and Ember.js are among the most popular front-end technologies used in modern web development. Although both fall under the JavaScript umbrella, these technologies differ significantly.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;In this article, we will compare React.js vs Ember.js and explore their strengths and weaknesses to help you choose the most suitable one for your needs.&lt;/p&gt;】&lt;p&gt;前端技术是网络开发不可或缺的一部分，因为它们决定用户如何与网站或应用程序交互。因此，选择正确的前端技术对于最佳用户参与和后续项目成功至关重要。 React.js 和 Ember.js 是现代 Web 开发中最流行的前端技术。尽管两者都属于 JavaScript，但这些技术存在显着差异。 &lt;/p&gt;&#xA;&lt;p&gt;在本文中，我们将比较 React.js 与 Ember.js，并探讨它们的优缺点，以帮助您选择最适合您需求的一个。&lt;/p&gt;</description>
      <pubDate>Thu, 05 Sep 2024 21:00:06 +0000</pubDate>
    </item>
    <item>
      <title>【Keeping Two Multi-Master Databases Aligned With a Vector Clock】保持两个多主数据库与矢量时钟对齐</title>
      <link>https://dzone.com/articles/keeping-two-multi-master-dbs-aligned-with-vector-clock</link>
      <description>【&lt;p&gt;In today&#39;s tech environment, there is a frequent requirement to &lt;a href=&#34;https://dzone.com/articles/what-is-why-we-need-and-how-to-do-data-synchroniza&#34;&gt;synchronize&lt;/a&gt; applications. This need often arises during technology upgrades, where the goal is to transition a database and its processes from an outdated legacy system to a newer technology. In such scenarios, it&#39;s typically required to allow both applications to coexist for a period of time. Sometimes both applications, together with their own databases, must be maintained as masters because dismantling the processes dependent on the legacy one is not viable. Consequently, specific solutions for keeping the two master databases aligned are essential, ensuring that operations on one database are mirrored on the other one, and vice versa.&lt;/p&gt;&#xA;&lt;p&gt;In this article, we discuss a real case we dealt with by abstracting away from several technical details, but focusing on those decisions that shape the structure of our solution.&lt;/p&gt;】&lt;p&gt;在当今的技术环境中，经常需要&lt;a href=&#34;https://dzone.com/articles/what-is-why-we-need-and-how-to-do-data-synchroniza &#34;&gt;同步&lt;/a&gt;应用程序。这种需求通常在技术升级期间出现，其目标是将数据库及其流程从过时的遗留系统过渡到更新的技术。在这种情况下，通常需要允许两个应用程序共存一段时间。有时，两个应用程序及其自己的数据库都必须作为主应用程序进行维护，因为拆除依赖于旧应用程序的进程是不可行的。因此，保持两个主数据库一致的特定解决方案至关重要，确保一个数据库上的操作镜像到另一个数据库上，反之亦然。&lt;/p&gt;&#xA;&lt;p&gt;在本文中，我们通过抽象一些技术细节来讨论我们处理过的一个真实案例，但重点关注那些塑造我们解决方案结构的决策。&lt;/p&gt;</description>
      <pubDate>Thu, 05 Sep 2024 14:39:02 +0000</pubDate>
    </item>
    <item>
      <title>【Lead a Successful Agile Transformation With the VICTORY Framework】利用 VICTORY 框架引领成功的敏捷转型</title>
      <link>https://dzone.com/articles/successful-agile-transformation-with-victory-framework</link>
      <description>【&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/resistance-to-agile-transformations&#34;&gt;Agile transformations can be tough&lt;/a&gt;. They’re messy, time-consuming, and more often than not, they fail to deliver the promises that got everyone excited in the first place. That’s why it’s so important to approach an Agile transformation as a full-scale organizational change rather than just a shift in how our development teams work.&lt;/p&gt;&#xA;&lt;p&gt;In my years as a &lt;a href=&#34;https://dzone.com/articles/adaptive-change-management&#34;&gt;change management&lt;/a&gt; consultant, I have studied and applied various change management models, from John Kotter’s 8-Step Change Model to &lt;a href=&#34;https://dzone.com/articles/using-the-adkar-model-with-it-change&#34;&gt;ADKAR&lt;/a&gt; and Lean Change Management by Jason Little. I have learned through these experiences and countless transformations that there isn’t a one-size-fits-all approach.&lt;/p&gt;】&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/resistance-to-agile-transformations&#34;&gt;敏捷转型可能很困难&lt;/a&gt;。它们很混乱、耗时，而且往往无法兑现最初让每个人都兴奋的承诺。这就是为什么将敏捷转型作为全面的组织变革而不仅仅是我们开发团队工作方式的转变如此重要。&lt;/p&gt;&#xA;&lt;p&gt;在担任&lt;a href=&#34;https://dzone.com/articles/adaptive-change-management&#34;&gt;变革管理&lt;/a&gt;顾问的这些年里，我研究并应用了 John 的各种变革管理模型Kotter 的 8 步变革模型到 &lt;a href=&#34;https://dzone.com/articles/using-the-adkar-model-with-it-change&#34;&gt;ADKAR&lt;/a&gt; 和 Jason Little 的精益变革管理。通过这些经验和无数的转变，我了解到没有一种放之四海而皆准的方法。&lt;/p&gt;</description>
      <pubDate>Thu, 05 Sep 2024 19:00:08 +0000</pubDate>
    </item>
    <item>
      <title>【Comparison of Apache Astro and Airflow】Apache Astro 和 Airflow 的比较</title>
      <link>https://dzone.com/articles/comparison-of-apache-astro-and-airflow</link>
      <description>【&lt;p&gt;Effective workflow orchestration is the key to creating automation around complex process-oriented activities in the modern landscape of software development. Considering data engineering and data science, &lt;a href=&#34;https://dzone.com/articles/exploring-the-features-and-flexibility-of-astro&#34;&gt;Astro&lt;/a&gt; and &lt;a href=&#34;https://dzone.com/articles/optimizing-airflow-a-case-study-in-cloud-resource&#34;&gt;Apache Airflow&lt;/a&gt; rise to the top as important tools used in the management of these data workflows. This article compares Astro and Apache Airflow, explaining their architecture, features, scalability, usability, community support, and integration capabilities. This should help software developers and data engineers in selecting the right tool for their specific needs and project requirements.&lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;Astro Overview&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Astro is a fully Kubernetes-native platform designed to easily orchestrate the workflows in cloud-native systems. It uses &lt;a href=&#34;https://dzone.com/refcardz/getting-started-kubernetes&#34;&gt;Kubernetes&lt;/a&gt; itself to handle container orchestration, which adds fault tolerance and elasticity out of the box. Hence, Astro works effectively in scenarios that require &lt;a href=&#34;https://dzone.com/trendreports/microservices-and-containerization&#34;&gt;microservices and containerization&lt;/a&gt; to be essential to the architecture.&lt;/p&gt;】&lt;p&gt;有效的工作流程编排是在现代软件开发环境中围绕复杂的面向流程的活动创建自动化的关键。考虑到数据工程和数据科学，&lt;a href=&#34;https://dzone.com/articles/exploring-the-features-and-flexibility-of-astro&#34;&gt;Astro&lt;/a&gt; 和 &lt;a href=&#34;https: //dzone.com/articles/optimizing-airflow-a-case-study-in-cloud-resource&#34;&gt;Apache Airflow&lt;/a&gt; 作为管理这些数据工作流的重要工具而名列前茅。本文对 Astro 和 Apache Airflow 进行了比较，解释了它们的架构、功能、可扩展性、可用性、社区支持和集成功能。这应该有助于软件开发人员和数据工程师根据其特定需求和项目要求选择正确的工具。&lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;Astro 概述&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Astro 是一个完全 Kubernetes 原生的平台，旨在轻松编排云原生系统中的工作流程。它使用 &lt;a href=&#34;https://dzone.com/refcardz/getting-started-kubernetes&#34;&gt;Kubernetes&lt;/a&gt; 本身来处理容器编排，这增加了开箱即用的容错能力和弹性。因此，Astro 在需要&lt;a href=&#34;https://dzone.com/trendreports/microservices-and-containerization&#34;&gt;微服务和容器化&lt;/a&gt;对架构至关重要的场景中有效工作。&lt;/p&gt;</description>
      <pubDate>Fri, 06 Sep 2024 17:00:05 +0000</pubDate>
    </item>
    <item>
      <title>【Principles of Modern Data Infrastructure】现代数据基础设施原理</title>
      <link>https://dzone.com/articles/principles-of-modern-data-infrastructure</link>
      <description>【&lt;section&gt;&#xA; &lt;article&gt;&#xA;  &lt;p&gt;The evolution of the internet over the past few decades has undeniably impacted how our societies function. From facilitating globalization to making new technology like social media and consumer apps available to nearly every person on the planet, the web has seeped into most aspects of our day-to-day lives. However, this ubiquity comes with an ever-growing need to manage enormous amounts of data, which requires better and better data infrastructure.&lt;/p&gt;&#xA;  &lt;p&gt;Back in the Web 1.0 era, we could really only read static content on the internet. A decade later, with Web 2.0, it became possible to read and write on online social networks. Now, with Web 3.0 and the dawn of AI and blockchain, a single person generates around &lt;a href=&#34;https://time.com/6108001/data-protection-richard-stengel/&#34; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;1.7 MB of data every second&lt;/a&gt;. That adds up to approximately 146.88 GB of data per person per day. Such demanding workloads mean that data infrastructure is now mission-critical for most businesses. Modern data infrastructure supports everything from daily operational workloads (&lt;a href=&#34;https://en.wikipedia.org/wiki/Online_transaction_processing&#34; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;OLTP&lt;/a&gt;) to strategic decision-making workloads (&lt;a href=&#34;https://en.wikipedia.org/wiki/Online_analytical_processing&#34; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;OLAP&lt;/a&gt;).&lt;/p&gt;】&lt;部分&gt;&#xA; &lt;文章&gt;&#xA;  &lt;p&gt;过去几十年来互联网的发展无可否认地影响了我们社会的运作方式。从促进全球化到让社交媒体和消费者应用程序等新技术可供地球上的几乎每个人使用，网络已经渗透到我们日常生活的方方面面。然而，这种普遍性伴随着管理海量数据的需求不断增长，这需要越来越好的数据基础设施。&lt;/p&gt;&#xA;  &lt;p&gt;回到 Web 1.0 时代，我们实际上只能阅读互联网上的静态内容。十年后，随着 Web 2.0 的出现，在线社交网络上阅读和写作成为可能。现在，随着 Web 3.0 以及人工智能和区块链的出现，一个人可以围绕 &lt;a href=&#34;https://time.com/6108001/data-protection-richard-stengel/&#34; rel=&#34;nofollow noopener noreferrer&#34; 目标生成=&#34;_blank&#34;&gt;每秒 1.7 MB 数据&lt;/a&gt;。每人每天总计约 146.88 GB 数据。如此苛刻的工作负载意味着数据基础设施现在对于大多数企业来说都是关键任务。现代数据基础设施支持从日常运营工作负载 (&lt;a href=&#34;https://en.wikipedia.org/wiki/Online_transaction_processing&#34; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;OLTP&lt;/a&gt;) 到战略性数据的一切决策工作负载 (&lt;a href=&#34;https://en.wikipedia.org/wiki/Online_analytical_processing&#34; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;OLAP&lt;/a&gt;)。&lt;/p&gt;</description>
      <pubDate>Fri, 06 Sep 2024 15:00:06 +0000</pubDate>
    </item>
    <item>
      <title>【The AI Security Gap: Protecting Systems in the Age of Generative AI】人工智能安全差距：保护生成式人工智能时代的系统</title>
      <link>https://dzone.com/articles/protecting-systems-in-the-age-of-genai</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;The rapid adoption of &lt;a href=&#34;https://dzone.com/articles/introduction-generative-ai-empowering-enterprises&#34;&gt;Generative AI (GenAI)&lt;/a&gt; and &lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-large-language-models&#34;&gt;Large Language Models (LLMs)&lt;/a&gt; is transforming industries at an unprecedented pace. Nearly 90% of organizations are actively implementing or exploring LLM use cases, eager to harness the power of these revolutionary technologies. However, this enthusiasm is juxtaposed with a concerning lack of &lt;a href=&#34;https://dzone.com/articles/guarding-the-gates-of-genai-security-challenges-in&#34;&gt;security preparedness&lt;/a&gt;. A recent GenAI Readiness report by Lakera reveals that only about 5% of organizations are confident in their GenAI security frameworks.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;This glaring disparity between adoption and security readiness raises a critical question: Is the market prepared for GenAI&#39;s potential security risks?&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://dzone.com/articles/introduction-generative-ai-empowering-enterprises&#34;&gt;生成式人工智能 (GenAI)&lt;/a&gt; 和 &lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-large-language-models&#34;&gt;大型语言模型 (LLM)&lt;/a&gt; 正在以前所未有的速度改变行业。近 90% 的组织正在积极实施或探索 LLM 用例，渴望利用这些革命性技术的力量。然而，这种热情与令人担忧的缺乏&lt;a href=&#34;https://dzone.com/articles/guarding-the-gates-of-genai-security-challenges-in&#34;&gt;安全准备&lt;/a&gt;并存。 Lakera 最近的一份 GenAI 准备情况报告显示，只有约 5% 的组织对其 GenAI 安全框架充满信心。&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;采用和安全准备之间的这种明显差异引发了一个关键问题：市场是否为 GenAI 的潜在安全风险做好了准备？&lt;/p&gt;</description>
      <pubDate>Thu, 05 Sep 2024 17:00:09 +0000</pubDate>
    </item>
    <item>
      <title>【Product Vision vs Technical Strategy: Bridging the Product-Engineering Gap】产品愿景与技术策略：弥合产品工程差距</title>
      <link>https://dzone.com/articles/product-vision-vs-technical-strategy</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;In the world of software engineering, a conflict between a product manager&#39;s vision and the engineering team&#39;s technical strategy is a recurring obstacle for many teams. While product managers strive to create disruptive and innovative products, engineers need to ensure that these visions can be implemented into successful realities either within the constraints of current technology or discover a breakthrough themselves. The gap between the product vision and the technical realities can be a daunting challenge, but balancing these two aspects is crucial for the success of any project. This article explores the dynamics between product vision and technical reality and how taking an iterative approach can help navigate the gap between the aspect and the feasibility.&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;Understanding the Product Vision&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Imagine you are a builder (&lt;strong&gt;software developer&lt;/strong&gt;) and are hired by a family (&lt;strong&gt;product manager)&lt;/strong&gt; to build a house. The family will have an image of a dream house in their mind — a beautiful, large, comfortable home that will fulfill all their functional and lifestyle dreams (&lt;strong&gt;vision&lt;/strong&gt;). Now, for the builder to do their job well, they need to understand the family&#39;s vision and then build upon it. But at the same time, the family&#39;s vision also needs to be well crafted and decipherable for the builder to comprehend it. Along similar lines, a well-defined and well-constructed product vision is essential for guiding a successful technical strategy.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;在软件工程领域，产品经理的愿景与工程团队的技术策略之间的冲突是许多团队经常遇到的障碍。当产品经理努力创造颠覆性和创新性产品时，工程师需要确保这些愿景能够在当前技术的限制内成功实现，或者自己发现突破。产品愿景与技术现实之间的差距可能是一项艰巨的挑战，但平衡这两方面对于任何项目的成功都至关重要。本文探讨了产品愿景与技术现实之间的动态，以及采用迭代方法如何帮助弥合方面与可行性之间的差距。&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;了解产品愿景&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;假设您是一名建筑商（&lt;strong&gt;软件开发人员&lt;/strong&gt;），并被一个家庭（&lt;strong&gt;产品经理）&lt;/strong&gt;雇用来建造房屋。这个家庭在他们的脑海中会有一个梦想之家的形象——一个美丽、大、舒适的家，将实现他们所有的功能和生活方式的梦想（&lt;strong&gt;愿景&lt;/strong&gt;）。现在，为了让建筑商做好他们的工作，他们需要了解家族的愿景，然后在此基础上进行建设。但与此同时，家族的愿景也需要精心设计和解读，以便建筑商能够理解。类似地，明确定义和构建良好的产品愿景对于指导成功的技术战略至关重要。&lt;/p&gt;</description>
      <pubDate>Fri, 06 Sep 2024 11:00:06 +0000</pubDate>
    </item>
    <item>
      <title>【Mainframe Modernization: A Comprehensive Technical Blueprint】大型机现代化：综合技术蓝图</title>
      <link>https://dzone.com/articles/mainframe-modernization-a-comprehensive-technical</link>
      <description>【&lt;p&gt;Mainframe systems have been the backbone of enterprise computing for decades, renowned for their reliability, performance, and security. However, the evolving business landscape demands agility, scalability, and cost-effectiveness, prompting organizations to explore cloud-based solutions. Major technology companies, including cloud providers and system integrators, have invested heavily in mainframe migration practices, recognizing the significance of this transformation.&lt;/p&gt;&#xA;&lt;p&gt;Mainframes and cloud computing each have their strengths and specific use cases. It&#39;s not fair to generalize either, and in practice, a hybrid approach is common. This post will explore a practical solution for mainframe workload migration using a hybrid pattern, where certain workloads move to the cloud while still interacting with on-premises applications and data sources.&lt;/p&gt;】&lt;p&gt;几十年来，大型机系统一直是企业计算的支柱，以其可靠性、性能和安全性而闻名。然而，不断发展的业务环境需要敏捷性、可扩展性和成本效益，促使组织探索基于云的解决方案。包括云提供商和系统集成商在内的主要科技公司已经在大型机迁移实践上投入了大量资金，认识到这种转变的重要性。&lt;/p&gt;&#xA;&lt;p&gt;大型机和云计算各有其优势和特定的用例。一概而论也是不公平的，在实践中，混合方法很常见。本文将探讨使用混合模式进行大型机工作负载迁移的实用解决方案，其中某些工作负载迁移到云端，同时仍与本地应用程序和数据源交互。&lt;/p&gt;</description>
      <pubDate>Fri, 06 Sep 2024 19:00:06 +0000</pubDate>
    </item>
  </channel>
</rss>