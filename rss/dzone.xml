<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Optimizing Serverless Computing with AWS Lambda Layers and CloudFormation】使用AWS Lambda层和云形式优化无服务器计算</title>
      <link>https://dzone.com/articles/optimizing-serverless-computing-with-aws-lambda-la</link>
      <description>【&lt;p&gt;Recent advancements in cloud computing and serverless architectures have already changed the way applications are created. Among the most widely acknowledged services for serverless computing is AWS Lambda, which enables the execution of code without managing any servers. On the other hand, a large-scale application generally contains many dependencies and maintainable configurations.&lt;/p&gt;&#xA;&lt;p&gt;This article examines how AWS Lambda layers and CloudFormation can be used to develop scalable, efficient, and maintainable serverless systems.&lt;/p&gt;】&lt;p&gt;云计算和无服务器体系结构的最新进展已经改变了应用程序的创建方式。 AWS lambda是无服务器计算的最广泛认可的服务，它可以执行代码而无需管理任何服务器。另一方面，大规模应用程序通常包含许多依赖关系和可维护的配置。&lt;/p&gt;&#xA;&lt;p&gt;本文探讨了如何使用AWS lambda层和云形式来开发可扩展，高效和可维护的无服务器系统。&lt;/p&gt;</description>
      <pubDate>Tue, 27 May 2025 17:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【A Guide to Auto-Tagging and Lineage Tracking With OpenMetadata】使用openmetadata自动标记和谱系跟踪指南</title>
      <link>https://dzone.com/articles/auto-tagging-lineage-tracking-openmetadata</link>
      <description>【&lt;p&gt;Tagging metadata and tracking SQL lineage manually is often tedious and prone to mistakes in data engineering. Although essential for compliance and data governance, these tasks usually involve lengthy manual checks of datasets, table structures, and SQL code.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;Thankfully, advancements in large language models (LLMs) such as GPT-4 provide a smarter and more efficient solution. This guide helps beginner data engineers learn how to use LLMs with tools like OpenMetadata, dbt, Trino, and Python APIs to automate &lt;a href=&#34;https://dzone.com/articles/implementing-data-lakes-in-data-management&#34;&gt;metadata tagging&lt;/a&gt; (like identifying PII) and lineage tracking for SQL changes. Let&#39;s explore the details.&lt;/p&gt;】&lt;p&gt;标记元数据和跟踪SQL谱系手动通常是乏味的，并且容易出现数据工程中的错误。尽管对于合规性和数据治理至关重要，但这些任务通常涉及数据集，表结构和SQL代码的冗长手动检查。 &lt;/p&gt;&#xA;&lt;p&gt;值得庆幸的是，大语模型（LLM）（例如GPT-4）的进步提供了更智能，更有效的解决方案。本指南可帮助初学者数据工程师学习如何使用llms使用openmetadata，dbt，trino和python apis等工具来自动化&lt;a href =“ https://dzone.com/articles/implementing-data-lakes-data-lakes-data-lakes-in-data-management”让我们探索细节。&lt;/p&gt;</description>
      <pubDate>Tue, 27 May 2025 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Mastering Deployment Strategies: Navigating the Path to Seamless Software Releases】掌握部署策略：导航通往无缝软件的途径</title>
      <link>https://dzone.com/articles/strategies-for-seamless-software-releases</link>
      <description>【&lt;p&gt;Deploying code to production is a thrilling moment for any software engineer or development team. Seeing your hard work come to life and serve millions of users is immensely satisfying. However, the journey to get there is not always smooth sailing. Navigating the various deployment strategies can be a complex and challenging task, with each approach offering its own unique set of advantages and drawbacks.&lt;/p&gt;&#xA;&lt;p&gt;In this comprehensive blog post, we&#39;ll dive deep into the top five most commonly used deployment strategies, exploring their key characteristics, benefits, and potential pitfalls. Whether you&#39;re a seasoned DevOps&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;engineer or just starting your software development journey, this guide will equip you with the knowledge to make informed decisions and ensure seamless software releases.&lt;/p&gt;】&lt;p&gt;将代码部署到生产中是任何软件工程师或开发团队的激动人心的时刻。看到您的辛勤工作栩栩如生，为数百万用户提供服务是非常令人满意的。但是，到达那里的旅程并不总是平稳的航行。浏览各种部署策略可能是一项复杂且具有挑战性的任务，每种方法都提供自己独特的优势和缺点。&lt;/p&gt;&#xA;&lt;p&gt;在这篇全面的博客文章中，我们将深入研究最常用的五个最常用的部署策略，探索其关键特征，收益和潜在的陷阱。无论您是经验丰富的DevOps &lt;strong&gt; &lt;/strong&gt;工程师还是刚刚开始您的软件开发旅程，本指南都将使您能够获得知识来做出明智的决定并确保无缝软件发行。&lt;/p&gt;</description>
      <pubDate>Tue, 27 May 2025 20:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Useful System Table Queries in Relational Databases】关系数据库中有用的系统表查询</title>
      <link>https://dzone.com/articles/system-tables-in-relational-databases</link>
      <description>【&lt;h2&gt;&lt;strong&gt;Overview&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;System tables are managed by the DBMS (Database Management System), which provides visibility into how the databases work internally. In this article, I will go over the system tables and their use cases for SQL Server, Oracle, PostgreSQL, and MySQL databases.&lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;MySQL Queries&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;1. See how large each table is in terms of rows to identify large data sets or usage hotspots.&lt;/p&gt;】&lt;H2&gt; &lt;strong&gt;概述&lt;/strong&gt; &lt;/h2&gt;&#xA;&lt;p&gt;系统表由DBMS（数据库管理系统）管理，该系统提供了对数据库内部工作方式的可见性。在本文中，我将介绍SQL Server，Oracle，PostgreSQL和MySQL数据库的系统表及其用例。&lt;/p&gt;&#xA;&lt;H2&gt; &lt;strong&gt; mysql查询&lt;/strong&gt; &lt;/h2&gt;&#xA;&lt;p&gt; 1。根据行以识别大型数据集或使用热点的行，查看每个表有多大。&lt;/p&gt;</description>
      <pubDate>Tue, 27 May 2025 21:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Traditional Testing and RAGAS: A Hybrid Strategy for Evaluating AI Chatbots】传统测试和拉加斯：评估AI聊天机器人的混合策略</title>
      <link>https://dzone.com/articles/traditional-testing-ragas-strategy-ai-chatbots</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;With the advent of Artificial Intelligence, &lt;a href=&#34;https://dzone.com/articles/mastering-retrieval-augmented-generation&#34;&gt;Retrieval-Augmented Generation (RAG) models&lt;/a&gt; are commonly used in simple applications such as chatbots for websites. These models offer practical solutions, but ensuring their accuracy and user-friendliness remains a key concern. When it comes to software testing, there are several approaches. Traditional testing techniques can be employed alongside newer RAG testing frameworks such as &lt;a href=&#34;https://dzone.com/articles/enhanced-monitoring-pipeline-rag-optimizations&#34;&gt;Retrieval-Augmented Generation Assessment Suite (RAGAS)&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;This article introduces software testers, especially those just getting exposure with AI, to a hybrid approach of testing, which includes traditional and RAGAS-based chatbot application testing approaches. We explore a structured approach to testing a chatbot RAG model using traditional software testing techniques and provide an introduction to RAGAS, analyzing their effectiveness.&lt;/p&gt;】&lt;p dir =“ ltr”&gt;随着人工智能的出现，&lt;a href =“ https://dzone.com/articles/mastering-retrieval-augmented-generation”&gt; reterieval-augmented Generation（rag）型号&lt;/a&gt; &lt;/a&gt; &lt;/a&gt;通常用于诸如Chatbots的简单应用程序。这些模型提供了实用的解决方案，但是确保它们的准确性和用户友好仍然是一个关键问题。在软件测试方面，有几种方法。 Traditional testing techniques can be employed alongside newer RAG testing frameworks such as &lt;a href=&#34;https://dzone.com/articles/enhanced-monitoring-pipeline-rag-optimizations&#34;&gt;Retrieval-Augmented Generation Assessment Suite (RAGAS)&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;本文介绍了软件测试人员，尤其是那些仅通过AI曝光的人，其中包括传统和基于Ragas的聊天机器人应用程序测试方法的混合测试方法。我们探索了一种结构化方法，可以使用传统的软件测试技术来测试聊天机器人抹布模型，并为拉加斯提供介绍，分析其有效性。&lt;/p&gt;</description>
      <pubDate>Tue, 27 May 2025 12:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Caching 101: Theory, Algorithms, Tools, and Best Practices】缓存101：理论，算法，工具和最佳实践</title>
      <link>https://dzone.com/articles/caching-theory-algorithms-tools-best-practices</link>
      <description>【&lt;p&gt;Some time ago I wrote a post on scalability. In it, I mentioned caching as one of the most important techniques to help our system scale. Today, I want to take advantage of that fact and dive deeper into caching itself.&lt;/p&gt;&#xA;&lt;p&gt;Today, I will walk you through basic definitions, the most common problems with caching, different caching eviction algorithms (or cache algorithms), mention the most commonly used tools, and share some best practices when working with cache.&lt;/p&gt;】&lt;p&gt;前一段时间我写了一篇有关可伸缩性的文章。在其中，我提到缓存是帮助我们系统规模的最重要技术之一。今天，我想利用这一事实，深入研究自己。&lt;/p&gt;&#xA;&lt;p&gt;今天，我将引导您完成基本定义，缓存，不同的缓存驱逐算法（或缓存算法）的最常见问题，提到最常用的工具，并在使用CACH时共享一些最佳实践。&lt;/p&gt; &lt;/p&gt;</description>
      <pubDate>Tue, 27 May 2025 18:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Introducing Graph Concepts in Java With Eclipse JNoSQL】用Eclipse Jnosql在Java中引入图形概念</title>
      <link>https://dzone.com/articles/graph-concepts-java-eclipse-jnosql</link>
      <description>【&lt;p data-pm-slice=&#34;1 1 []&#34;&gt;When we talk about databases today, we face a landscape of diversity. Gone are the days of a one-size-fits-all solution. We live in an era of polyglot persistence, where the guiding principle is to use the most appropriate data model for each use case. This article focuses on graph databases, their structure, practical applications, and how Java developers can leverage Eclipse JNoSQL and Jakarta Data to work seamlessly with them.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/graph-databases-how-do-they-work?fromrel=true&#34;&gt;Graph databases&lt;/a&gt; enable richer and more natural modeling of connected data. Unlike traditional relational databases that require complex joins to represent relationships, graph databases make relationships first-class citizens. A graph model organizes data into &lt;strong&gt;vertices&lt;/strong&gt; (nodes) and &lt;strong&gt;edges&lt;/strong&gt; (relationships). Both vertices and edges can hold properties, and edges are directional, adding semantic meaning to how data points connect.&lt;/p&gt;】&lt;p data-pm-slice =“ 1 1 []&gt;当我们今天谈论数据库时，我们将面临多样性的景观。一定程度的所有解决方案的日子已经一去不复返了。我们生活在一个多面持久性的时代，指导原则是为每种用例使用最合适的数据模型。本文重点介绍了图数据库，它们的结构，实际应用以及Java开发人员如何利用Eclipse Jnosql和Jakarta数据与它们无缝合作。&lt;/p&gt;&#xA;&lt;p&gt; &lt;a href =“ https://dzone.com/articles/graph-databases-how-do-they-work?fromrel=true”&gt;图数据库&lt;/a&gt;启用连接数据的更丰富和更自然的建模。与需要复杂连接以表示关系的传统关系数据库不同，图形数据库使关系成为一流的公民。图模型将数据组织到&lt;strong&gt;顶点&lt;/strong&gt;（节点）和&lt;strong&gt; edge &lt;/strong&gt;（关系）中。顶点和边缘都可以保持属性，边缘是方向性的，为数据点连接的方式添加了语义含义。&lt;/p&gt;</description>
      <pubDate>Tue, 27 May 2025 15:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Building a Real-Time Audio Transcription System With OpenAI’s Realtime API】使用OpenAI的实时API构建实时音频转录系统</title>
      <link>https://dzone.com/articles/real-time-audio-transcription-java-openai</link>
      <description>【&lt;p&gt;OpenAI launched two new Speech to Text models &lt;code&gt;gpt-4o-mini-transcribe&lt;/code&gt; and &lt;code&gt;gpt-4o-transcribe&lt;/code&gt; in March 2025. These models support streaming transcription for both completed and ongoing audio. Audio transcription refers to converting the audio input to text output (output format would be text or json).The transcription of already completed audio is much simpler using the transcription API provided by &lt;a href=&#34;https://dzone.com/articles/fine-tuning-openai-new-language&#34;&gt;OpenAI&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&#xA; The Realtime transcription is useful in application that require immediate feedback such as Voice assistants, Live captioning, Interactive voice applications, Meeting transcription and Accessibility tools. OpenAI has provided Realtime Transcription API (currently in beta) which allows you to stream audio data and receive transcription results in real-time. The realtime transcription API should be invoked using &lt;a href=&#34;https://dzone.com/articles/websocket-vs-server-sent-events&#34;&gt;WebSocket&lt;/a&gt; or webRTC. This article focuses on invoking Realtime API using Java WebSocket implementation.&lt;/p&gt;&#xA;&lt;figcaption class=&#34;fr-inner&#34; contenteditable=&#34;true&#34;&gt;&#xA; &lt;div style=&#34;text-align: center;&#34;&gt;&#xA;  This image has been designed using resources from Flaticon.com&#xA; &lt;/div&gt;&#xA;&lt;/figcaption&gt;&#xA;&lt;p&gt;&lt;br&gt;&lt;/p&gt;】&lt;p&gt; OpenAI在文本模型上启动了两个新的演讲&lt;Code&gt; GPT-4O-MINI-TRANSCRIBE &lt;/code&gt;和&lt;code&gt; GPT-4O-TRANSCRICE &lt;/code &lt;/code &lt;/code &lt;/code &lt;/code &lt;/code &lt;/code &lt;/code &lt;/code&gt;。这些模型支持完整和正在进行的音频的流传输转录。音频转录是指将音频输入转换为文本输出（输出格式是文本或JSON）。使用&lt;a href =“ https://dzone.com/articles/articles/fine-tuning-popenai-openai-new-new-language-languaig--langaie&gt; openai&gt; openai&gt; openai&gt; openai &lt;/br&gt; &lt;br&gt; &lt;br&gt; &lt;br&gt; &lt;br&gt; &lt;br&gt; &lt;br&gt; &lt;br&gt; &lt;br&gt; &lt;br&gt; &lt;br&gt; &lt;br&gt; &lt;br&gt; &lt;br&gt; &lt;br&gt; &lt;br&gt; &lt;br&gt;。&#xA; 实时转录在需要立即反馈的应用程序中很有用，例如语音助手，实时字幕，交互式语音应用程序，满足转录和可访问性工具。 OpenAI提供了实时转录API（目前在beta中），可让您实时流式传输音频数据并接收转录结果。应使用&lt;a href =“ https://dzone.com/articles/websocket-vs-vs-server-sent-cent---------&gt; websocket &lt;/a&gt;或webrtc调用实时转录API。本文重点介绍使用Java WebSocket实现调用实时API。&lt;/p&gt;&#xA;&lt;figcaption class =“ fr-inner” contenteaditable =“ true”&gt;&#xA; &lt;div style =“ text-align：center;”&gt;&#xA;  此图像是使用Flatatecon.com的资源设计的&#xA; &lt;/div&gt;&#xA;&lt;/figcaption&gt;&#xA;&lt;p&gt; &lt;br&gt; &lt;/p&gt;</description>
      <pubDate>Tue, 27 May 2025 14:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【How To Build AI-Powered Prompt Templates Using the Salesforce Prompt Builder】如何使用Salesforce提示构建器构建AI驱动的提示模板</title>
      <link>https://dzone.com/articles/salesforce-prompt-builder-ai-templates</link>
      <description>【&lt;p&gt;Corporate use of Generative AI is currently on an exponential rise, looking to enhance business capabilities and improve agents&#39; efficiency in a variety of cases: writing customer emails, summarizing case conversations, or giving a record snapshot from multiple objects for a quick overview of a customer. Users should write proper instructions to get the optimal output from &lt;a href=&#34;https://dzone.com/articles/generative-ai-comprehensive-guide&#34;&gt;Generative AI&lt;/a&gt;. These instructions are given as prompts, and &lt;a href=&#34;https://dzone.com/articles/prompt-engineering-ai-models&#34;&gt;effective prompts&lt;/a&gt; will flow nicely with AI processing. This step-by-step guide will show how efficient Salesforce&#39;s Prompt Builder is in creating effective prompt templates by retrieving data and using merge fields referencing record fields and flows. These templates serve to create more personalized output using generative AI.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;To create a new template, start by enabling Einstein in your organization. Assign a user with permissions set to “Prompt Template Manager.” This will allow developers to construct and supervise your templates.&lt;/p&gt;】&lt;p&gt;企业对生成AI的使用目前正在指数级上升，希望增强业务能力并提高代理商在各种情况下的效率：编写客户电子邮件，汇总案例对话或从多个对象中提供记录快照以快速概述客户。用户应编写适当的说明，以从&lt;a href =“ https://dzone.com/articles/generative-ai-comprehand-guide”获得最佳输出。这些说明作为提示给出，&lt;a href =“ https://dzone.com/articles/prompt-eendering-ai-models”&gt;有效的提示&lt;/a&gt; &lt;/a&gt;随着AI处理而言会很好地流动。本分步指南将通过检索数据并使用引用记录字段和流的合并字段来创建有效的提示模板，以表明有效的Salesforce的提示构建器如何创建有效的提示模板。这些模板用于使用生成AI创建更个性化的输出。 &lt;/p&gt;&#xA;&lt;p&gt;创建一个新模板，首先启用爱因斯坦在您的组织中。将设置权限设置为“提示模板管理器”的用户分配。这将使开发人员能够构建和监督您的模板。&lt;/p&gt;</description>
      <pubDate>Tue, 27 May 2025 19:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Using Java Stream Gatherers To Improve Stateful Operations】使用Java流聚集者改善状态操作</title>
      <link>https://dzone.com/articles/java-stream-gatherers-stateful-operations</link>
      <description>【&lt;p data-end=&#34;1068&#34; data-start=&#34;879&#34;&gt;In the &lt;a href=&#34;https://github.com/Angular2Guy/AngularPortfolioMgr&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;AngularPortfolioMgr&lt;/a&gt; project, the logic for calculating the percentage difference between stock quotes is a stateful operation, since it requires access to the previous quote.&lt;/p&gt;&#xA;&lt;p data-end=&#34;1213&#34; data-start=&#34;1075&#34;&gt;With Java 24, Stream &lt;code data-end=&#34;1111&#34; data-start=&#34;1100&#34;&gt;Gatherers&lt;/code&gt; are now finalized and offer a clean way to handle such stateful logic within the stream itself.&lt;/p&gt;】&lt;p data-end=&#34;1068&#34; data-start=&#34;879&#34;&gt;In the &lt;a href=&#34;https://github.com/Angular2Guy/AngularPortfolioMgr&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;AngularPortfolioMgr&lt;/a&gt; project, the logic for calculating the percentage difference between stock quotes is a stateful operation, since it requires access到以前的报价。&lt;/p&gt;&#xA;&lt;p data-end =“ 1213” data-start =“ 1075”&gt;带Java 24，流&lt;Code data-end =“ 1111” data-start =“ 1100”&gt; GATHICERS &lt;/code&gt;现在已完成，并提供一种干净的方法来处理流本身中的这种状态逻辑。&lt;/p&gt; &lt;/p&gt;</description>
      <pubDate>Tue, 27 May 2025 13:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>