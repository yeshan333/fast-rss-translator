<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【AWS Performance Tuning: Why EC2 Autoscaling Isn’t a Silver Bullet】AWS 性能调优：为什么 EC2 自动扩展不是灵丹妙药</title>
      <link>https://dzone.com/articles/why-ec2-autoscaling-isnt-a-silver-bullet</link>
      <description>【&lt;p&gt;AWS EC2 Autoscaling is frequently regarded as the ideal solution for managing fluctuating workloads. It offers automatic adjustments of computing resources in response to demand, theoretically removing the necessity for manual involvement. Nevertheless, depending exclusively on &lt;a href=&#34;https://aws.amazon.com/ec2/autoscaling/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;EC2 Autoscaling&lt;/a&gt; can result in inefficiencies, overspending, and performance issues. Although Autoscaling is an effective tool, it does not serve as a one-size-fits-all remedy.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;Here’s a comprehensive exploration of why Autoscaling isn’t a guaranteed fix and suggestions for engineers to improve its performance and cost-effectiveness.&lt;/p&gt;】&lt;p&gt;AWS EC2 Autoscaling 通常被认为是管理波动工作负载的理想解决方案。它可以根据需求自动调整计算资源，理论上消除了手动参与的必要性。然而，完全依赖 &lt;a href=&#34;https://aws.amazon.com/ec2/autoscaling/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;EC2 Autoscaling&lt;/a&gt; 可能会导致效率低下、超支、和性能问题。尽管自动缩放​​是一种有效的工具，但它并不是万能的补救措施。 &lt;/p&gt;&#xA;&lt;p&gt;这里全面探讨了为什么自动缩放不能保证修复，并为工程师提供了提高其性能和成本效益的建议。&lt;/p&gt;</description>
      <pubDate>Wed, 25 Dec 2024 22:00:04 +0000</pubDate>
    </item>
    <item>
      <title>【Seamless CI/CD Integration: Playwright and GitHub Actions】无缝 CI/CD 集成：Playwright 和 GitHub Actions</title>
      <link>https://dzone.com/articles/seamless-ci-cd-integration-playwright-and-github-actions</link>
      <description>【&lt;p data-selectable-paragraph=&#34;&#34;&gt;&lt;strong&gt;GitHub Action integration with Playwright&lt;/strong&gt; enables seamless automated testing and deployment workflows for web applications. GitHub Actions, the platform’s automation tool, allows these tests to be triggered automatically upon code changes, ensuring rapid feedback and efficient bug detection.&lt;/p&gt;&#xA;&lt;p data-selectable-paragraph=&#34;&#34;&gt;This integration empowers teams to build, test, and deploy with confidence, automating repetitive tasks and enhancing overall development productivity. By combining the versatility of Playwright with the automation capabilities of GitHub Actions, developers can streamline their workflows, delivering high-quality web applications with speed and precision.&lt;/p&gt;】&lt;p data-selectable-paragraph=&#34;&#34;&gt;&lt;strong&gt;GitHub Action 与 Playwright 集成&lt;/strong&gt;支持 Web 应用程序的无缝自动化测试和部署工作流程。该平台的自动化工具 GitHub Actions 允许在代码更改时自动触发这些测试，确保快速反馈和高效的错误检测。&lt;/p&gt;&#xA;&lt;p data-selectable-paragraph=&#34;&#34;&gt;这种集成使团队能够充满信心地构建、测试和部署，自动执行重复任务并提高整体开发效率。通过将 Playwright 的多功能性与 GitHub Actions 的自动化功能相结合，开发人员可以简化工作流程，快速、精确地交付高质量的 Web 应用程序。&lt;/p&gt;</description>
      <pubDate>Thu, 26 Dec 2024 21:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Level Up Your Code With Formal Methods】使用正式方法升级您的代码</title>
      <link>https://dzone.com/articles/level-up-your-code-with-formal-methods</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;&lt;strong&gt;Nobody likes bugs in their code&lt;/strong&gt;. They hide in there and cause problems later. Sure, we test our code, but even with things like unit tests, you can&#39;t catch everything. But imagine if you could actually prove your code is totally right, like a math problem. That&#39;s what formal methods let you do. It&#39;s a powerful way to make sure your software really works the way it should.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Formal methods are mathematical techniques used to specify, design, and verify software. They offer a way to guarantee that your code behaves exactly as intended under all possible circumstances. This isn&#39;t just for life-or-death systems like aerospace software; the benefits of formal methods apply to any software project aiming for rock-solid reliability.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;&lt;strong&gt;没有人喜欢代码中出现错误&lt;/strong&gt;。他们躲在那里并在以后造成问题。当然，我们测试了我们的代码，但即使使用单元测试之类的东西，您也无法捕获所有内容。但想象一下，如果您真的可以证明您的代码完全正确，就像数学问题一样。这就是正式方法可以让你做的事情。这是确保您的软件真正按其应有的方式运行的有效方法。&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;形式化方法是用于指定、设计和验证软件的数学技术。它们提供了一种方法来保证您的代码在所有可能的情况下都完全按照预期运行。这不仅适用于航空软件等生死攸关的系统；也适用于航空航天软件等生死攸关的系统。形式化方法的好处适用于任何旨在实现坚如磐石可靠性的软件项目。&lt;/p&gt;</description>
      <pubDate>Thu, 26 Dec 2024 12:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Automating Python Multi-Version Testing With Tox and Nox】使用 Tox 和 Nox 自动化 Python 多版本测试</title>
      <link>https://dzone.com/articles/automating-python-testing-across-versions-with-tox-and-nox</link>
      <description>【&lt;p&gt;In modern Python development, maintaining compatibility across multiple Python versions is super critical, especially for libraries and tools that target a diverse user base. Here, we explore how to use &lt;strong&gt;Tox&lt;/strong&gt; and &lt;strong&gt;Nox&lt;/strong&gt;, two powerful tools for Python test automation, to validate projects across multiple Python versions. Using a concrete project as an example, we’ll walk through setting up multi-version testing, managing dependencies with &lt;strong&gt;Poetry&lt;/strong&gt;, and using &lt;strong&gt;Pytest&lt;/strong&gt; for unit testing.&lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;Why Automate Multi-Version Testing?&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Automating tests across &lt;a href=&#34;https://dzone.com/articles/python-tutorial-for-beginners-a-comprehensive-guid&#34;&gt;Python&lt;/a&gt; versions ensures your project remains robust and reliable in diverse environments. Multi-version testing can:&lt;/p&gt;】&lt;p&gt;在现代 Python 开发中，保持多个 Python 版本之间的兼容性非常重要，特别是对于面向不同用户群的库和工具。在这里，我们探讨如何使用 &lt;strong&gt;Tox&lt;/strong&gt; 和 &lt;strong&gt;Nox&lt;/strong&gt; 这两个强大的 Python 测试自动化工具跨多个 Python 版本验证项目。以一个具体项目为例，我们将逐步介绍如何设置多版本测试、使用 &lt;strong&gt;Poetry&lt;/strong&gt; 管理依赖关系，以及使用 &lt;strong&gt;Pytest&lt;/strong&gt; 进行单元测试。&lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;为什么要自动化多版本测试？&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;跨 &lt;a href=&#34;https://dzone.com/articles/python-tutorial-for-beginners-a-compressive-guid&#34;&gt;Python&lt;/a&gt; 版本进行自动化测试可确保您的项目在多样化的环境。多版本测试可以：&lt;/p&gt;</description>
      <pubDate>Thu, 26 Dec 2024 14:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Building Intelligent Multi-Agent Conversational Systems Using the AutoGen Framework】使用 AutoGen 框架构建智能多代理对话系统</title>
      <link>https://dzone.com/articles/building-multi-agent-systems-with-autogen-framework</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Multi-agent conversational systems are multi-layered AI solutions that implement multiple intelligent agents working toward a common objective. Unlike single-agent chatbots, these systems are composed of different agents who perform various roles, such as answering questions or performing certain tasks.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;The essential elements that constitute such systems encompass dialogue management (so that the conversation is threaded together), &lt;a href=&#34;https://dzone.com/articles/what-is-natural-language-interaction&#34;&gt;natural language understanding&lt;/a&gt; (NLU) (to make sense of the user’s utterances), and response generation (to provide suitable context for the replies).&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;多代理对话系统是多层人工智能解决方案，可实现多个智能代理以实现共同目标。与单代理聊天机器人不同，这些系统由执行各种角色的不同代理组成，例如回答问题或执行某些任务。&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;构成此类系统的基本要素包括对话管理（以便将对话串联在一起）、&lt;a href=&#34;https://dzone.com/articles/what-is-natural-language -交互&#34;&gt;自然语言理解&lt;/a&gt; (NLU)（理解用户的话语）和响应生成（为回复提供合适的上下文）。&lt;/p&gt;</description>
      <pubDate>Thu, 26 Dec 2024 18:30:00 +0000</pubDate>
    </item>
    <item>
      <title>【Creating a Web Project: 4 Steps to Select the Right Tools】创建 Web 项目：选择正确工具的 4 个步骤</title>
      <link>https://dzone.com/articles/creating-a-web-project-4-steps-to-select-the-right-tools</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Creating your own web project is always a challenging and exciting endeavor. Circumstances may differ: perhaps you are building a startup to grow your own business, or maybe it is a work assignment. It could be a personal pet project without a specific goal: it might be useful for learning, but who knows where it may actually lead you.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;What should you begin with, considering the plethora of diverse technologies available? How do you choose the proper tools that fit your project, help you achieve your desired goals, and won’t cause unnecessary headaches in the future? Let’s explore the inventory at hand and see how to make the right picks.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;创建您自己的网络项目始终是一项充满挑战且令人兴奋的工作。情况可能有所不同：也许您正在建立一家初创公司来发展自己的业务，或者也许这是一项工作任务。它可能是一个没有特定目标的个人宠物项目：它可能对学习有用，但谁知道它实际上会引导你走向何方。&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;考虑到可用的技术多种多样，您应该从什么开始？如何选择适合您项目的工具，帮助您实现预期目标，并且不会在未来造成不必要的麻烦？让我们探索一下手头的库存，看看如何做出正确的选择。&lt;/p&gt;</description>
      <pubDate>Fri, 27 Dec 2024 12:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Seamless RDS to DynamoDB Migration: Unlocking Scalability With the Dual Write Strategy】RDS 到 DynamoDB 的无缝迁移：通过双写入策略解锁可扩展性</title>
      <link>https://dzone.com/articles/migration-from-rds-to-dynamodb-with-the-dual-write-strategy</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Migrating from Amazon RDS to DynamoDB can be a significant challenge, especially when transitioning from a relational database like RDS (PostgreSQL, MySQL, etc.) to DynamoDB, a NoSQL, key-value store. One of the most effective strategies for migrating data incrementally is the Dual Write approach. This allows you to keep both databases in sync during the transition, minimizing downtime and reducing the risk of data inconsistency.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;This article provides a detailed overview of the&amp;nbsp;Incremental Migration with the Dual Write&amp;nbsp;strategy, including the necessary steps, considerations, and best practices.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;从 Amazon RDS 迁移到 DynamoDB 可能是一项重大挑战，尤其是从 RDS（PostgreSQL、MySQL 等）等关系数据库迁移到 DynamoDB（一种 NoSQL 键值存储）时。增量迁移数据的最有效策略之一是双写入方法。这使您可以在过渡期间保持两个数据库同步，从而最大限度地减少停机时间并降低数据不一致的风险。&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;本文详细概述了使用双写入策略进行增量迁移，包括必要的步骤、注意事项和最佳实践。&lt;/p&gt;</description>
      <pubDate>Thu, 26 Dec 2024 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Creating Your First GenAI RAG App: Sony TV Manual Example】创建您的第一个 GenAI RAG 应用程序：索尼电视手册示例</title>
      <link>https://dzone.com/articles/creating-your-first-genai-rag-app-sony-tv-manual-example</link>
      <description>【&lt;p&gt;In the last few months, I’ve spoken with a lot of industry professionals like software engineers, consultants, senior managers, scrum masters, and even IT support staff about how they use generative AI (GenAI) and what they understand about Artificial Intelligence. Many of them believe that using &#34;AI&#34; means interacting with applications like ChatGPT and Claude or relying on their integrated applications like Microsoft Copilot. &lt;span style=&#34;margin: 0px; padding: 0px;&#34;&gt;While these are excellent tools for your day-to-day activities, they don&#39;t necessarily teach you &lt;strong&gt;how to build a GenAI application&lt;/strong&gt; from the ground up.&lt;/span&gt; Understanding these technicalities is crucial to brainstorming ideas and creating use cases to solve and automate your work.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;There are thousands of tutorials on large language models (LLMs), RAG (retrieval-augmented generation), and embeddings; many still leave novice AI enthusiasts confused about the &#34;why&#34; behind each step.&lt;/p&gt;】&lt;p&gt;在过去的几个月里，我与许多行业专业人士（例如软件工程师、顾问、高级经理、Scrum Master，甚至 IT 支持人员）讨论了他们如何使用生成式 AI (GenAI) 以及他们对生成式 AI 的理解人工智能。他们中的许多人认为，使用“AI”意味着与 ChatGPT 和 Claude 等应用程序交互，或依赖 Microsoft Copilot 等集成应用程序。 &lt;span style=&#34;margin: 0px; padding: 0px;&#34;&gt;虽然这些对于您的日常活动来说是出色的工具，但它们并不一定能教您&lt;strong&gt;如何构建 GenAI 应用程序&lt;/strong&gt;理解这些技术细节对于集思广益并创建用例来解决和自动化您的工作至关重要。 &lt;/p&gt;&#xA;&lt;p&gt;有数千个关于大型语言模型 (LLM)、RAG（检索增强生成）和嵌入的教程；许多人仍然让人工智能新手爱好者对每一步背后的“原因”感到困惑。&lt;/p&gt;</description>
      <pubDate>Fri, 27 Dec 2024 18:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【5 AI Trends That Will Define Software Development in 2025】将定义 2025 年软件开发的 5 个人工智能趋势</title>
      <link>https://dzone.com/articles/5-ai-trends-that-will-define-software-development-in-2025</link>
      <description>【&lt;p&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;As we approach 2025, software development is on the cusp of a transformative time. AI will keep evolving at a breathtaking pace, and developers will be at the helm of creating innovative AI-powered solutions that transform industries.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;In this article,&amp;nbsp;&lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;we’ll explore the top AI trends that will shape software development in 2025: Agentic AI, Multimodal AI, Democratization of AI, Convergence of Software Engineering and Data, and Explainable AI.&lt;/span&gt;&lt;/p&gt;】&lt;p&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;随着 2025 年的临近，软件开发正处于变革时期的风口浪尖。人工智能将以惊人的速度不断发展，开发人员将掌舵创建创新的人工智能驱动的解决方案，从而改变行业。 &lt;/span&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;在本文中，&lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;我们将探讨将影响 2025 年软件开发的顶级人工智能趋势：代理人工智能、多模态人工智能、人工智能民主化、软件工程和数据的融合以及可解释的人工智能。&lt;/span&gt;&lt;/p&gt;</description>
      <pubDate>Fri, 27 Dec 2024 21:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Advancing Enterprise AI Solutions With Agentic RAG】利用 Agentic RAG 推进企业 AI 解决方案</title>
      <link>https://dzone.com/articles/advancing-enterprise-ai-solutions-with-agentic-rag</link>
      <description>【&lt;p data-pm-slice=&#34;1 1 []&#34;&gt;Until recently, the advent of Generative AI changed the landscape of enterprise AI solutions. One of the most transformative approaches is retrieval-augmented generation (RAG). Of these, one of the most revolutionary paradigms of recent origin is RAG. It marries strengths from large language models (LLMs) with accurate information retrieval, thereby enabling companies to build wiser and more context-driven AI applications.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p data-pm-slice=&#34;1 1 []&#34;&gt;But what if we could add an extra layer of intelligence on top? Enter Agentic RAG, the state-of-the-art evolution of RAG, now imbued with agents that understand and can perform tasks independently.&lt;/p&gt;】&lt;p data-pm-slice=&#34;1 1 []&#34;&gt;直到最近，生成式 AI 的出现改变了企业 AI 解决方案的格局。最具变革性的方法之一是检索增强生成（RAG）。其中，最近兴起的最具革命性的范式之一是 RAG。它将大型语言模型 (LLM) 的优势与准确的信息检索相结合，从而使公司能够构建更明智、更上下文驱动的人工智能应用程序。 &lt;/p&gt;&#xA;&lt;p data-pm-slice=&#34;1 1 []&#34;&gt;但是如果我们可以在上面添加额外的智能层呢？进入 Agentic RAG，这是 RAG 的最先进的演变，现在充满了能够理解并能够独立执行任务的代理。&lt;/p&gt;</description>
      <pubDate>Fri, 27 Dec 2024 15:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>