<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【When Not to Choose Google Apache Kafka for BigQuery】何时不选择 Google Apache Kafka 进行 BigQuery</title>
      <link>https://dzone.com/articles/when-not-to-choose-google-apache-kafka</link>
      <description>【&lt;p&gt;Google announced its Apache Kafka for BigQuery cloud service at its conference Google Cloud Next 2024 in Las Vegas. Welcome to the data streaming club joining Amazon, Microsoft, IBM, Oracle, Confluent, and others. This blog post explores this new managed Kafka offering for GCP, reviews the current status of the data streaming landscape, and shares some criteria to evaluate when Kafka in general and Google Apache Kafka in particular should (not) be used.&lt;/p&gt;&#xA;&lt;h2&gt;Welcome Google Apache Kafka to the Data Streaming Club&lt;/h2&gt;&#xA;&lt;p&gt;Better late than never… Google announced a brand new Apache Kafka cloud service for GCP at Google Cloud Next 2024. All other leading cloud providers already have one, including AWS, Azure, Oracle, IBM, and Alibaba. Various other software vendors provide Kafka services, including Confluent, Aiven, Redpanda, WarpStream, and many more. Most leverage the open-source Kafka project as its core component, while others re-implement the Kafka protocol.&lt;/p&gt;】&lt;p&gt;Google 在拉斯维加斯举行的 Google Cloud Next 2024 大会上宣布推出 Apache Kafka for BigQuery 云服务。欢迎加入 Amazon、Microsoft、IBM、Oracle、Confluence 等公司的数据流俱乐部。这篇博文探讨了 GCP 的这一新的托管 Kafka 产品，回顾了数据流领域的当前状态，并分享了一些标准来评估何时应该（不）使用 Kafka，特别是 Google Apache Kafka。&lt;/p&gt;&#xA;&lt;h2&gt;欢迎 Google Apache Kafka 加入数据流俱乐部&lt;/h2&gt;&#xA;&lt;p&gt;迟到总比不到好……Google 在 Google Cloud Next 2024 上宣布为 GCP 推出全新的 Apache Kafka 云服务。所有其他领先的云提供商都已经拥有该服务，包括 AWS、Azure、Oracle、IBM 和阿里巴巴。其他各种软件供应商也提供 Kafka 服务，包括 Confluence、Aiven、Redpanda、WarpStream 等。大多数利用开源 Kafka 项目作为其核心组件，而另一些则重新实现 Kafka 协议。&lt;/p&gt;</description>
      <pubDate>Tue, 16 Jul 2024 22:00:01 +0000</pubDate>
    </item>
    <item>
      <title>【Oracle SQL: Understanding Execution Plan and Performance Tuning】Oracle SQL：了解执行计划和性能调优</title>
      <link>https://dzone.com/articles/oracle-sql-understanding-execution-plans</link>
      <description>【&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/api-and-database-performance-optimization-strategi&#34;&gt;Query optimization&lt;/a&gt; is similar to the art of making the perfect recipe — it requires a deep understanding of the ingredients (data), your kitchen (database system), and the techniques you use (query optimizer). Each database system has its own way of handling and running SQL queries, and the &#34;explain&#34; plan shows us how it all works. By looking at these plans, we can understand the choices made by the optimizer and make improvements to speed up data retrieval.&lt;/p&gt;&#xA;&lt;p&gt;In the &lt;a href=&#34;https://dzone.com/articles/creates-a-cdc-stream-from-oracle-database-to-kafka&#34;&gt;Oracle database&lt;/a&gt;, the optimizer is known for its robustness and complexity, often described as a combination of cost-based and rule-based strategies.&lt;/p&gt;】&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/api-and-database-performance-optimization-strategi&#34;&gt;查询优化&lt;/a&gt;类似于制作完美配方的艺术 - 它需要深入了解成分（数据）、您的厨房（数据库系统）以及您使用的技术（查询优化器）。每个数据库系统都有自己的处理和运行 SQL 查询的方式，“解释”计划向我们展示了它是如何工作的。通过查看这些计划，我们可以了解优化器所做的选择并进行改进以加快数据检索速度。&lt;/p&gt;&#xA;&lt;p&gt;在&lt;a href=&#34;https://dzone.com/articles/creates-a-cdc-stream-from-oracle-database-to-kafka&#34;&gt;Oracle数据库&lt;/a&gt;中，优化器是已知的由于其稳健性和复杂性，通常被描述为基于成本和基于规则的策略的组合。&lt;/p&gt;</description>
      <pubDate>Tue, 16 Jul 2024 21:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Test Plan vs. Test Strategy: Key Differences】测试计划与测试策略：主要区别</title>
      <link>https://dzone.com/articles/test-plan-vs-test-strategy-key-differences</link>
      <description>【&lt;p&gt;Software testing is a crucial checkpoint in building high-quality software applications. Testers need the right approach, clear steps, and a well-coordinated team to ensure a smooth process.&lt;/p&gt;&#xA;&lt;p&gt;Here&#39;s where test strategies and test plans come in. A test plan is a document that includes all necessary information on the test process, test scope, test objective, Software Requirement Specification (SRS), different types of software testing, and others. However, test strategy is the part of the test plan that guides it. It gives information on issues related to the test, defines test design, and describes steps to be followed in software testing. Some may find it similar, but they hold some differences.&amp;nbsp;&lt;/p&gt;】&lt;p&gt;软件测试是构建高质量软件应用程序的关键检查点。测试人员需要正确的方法、清晰的步骤和协调良好的团队来确保流程顺利进行。&lt;/p&gt;&#xA;&lt;p&gt;这就是测试策略和测试计划的用武之地。测试计划是一个文档，其中包含有关测试过程、测试范围、测试目标、软件需求规范 (SRS)、不同类型的软件测试等的所有必要信息。然而，测试策略是测试计划的指导部分。它提供了与测试相关的问题的信息，定义了测试设计，并描述了软件测试中要遵循的步骤。有些人可能会发现它相似，但它们也存在一些差异。 &lt;/p&gt;</description>
      <pubDate>Tue, 16 Jul 2024 13:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【API Versioning in Microservices Architecture】微服务架构中的 API 版本控制</title>
      <link>https://dzone.com/articles/api-versioning-in-microservices-architecture</link>
      <description>【&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/api-versioning-3&#34;&gt;API versioning&lt;/a&gt; is a technique used to manage changes to an API over time, ensuring that different versions of the API can coexist and be used simultaneously. This is crucial for maintaining compatibility with various clients that may rely on different versions of the API.&lt;/p&gt;&#xA;&lt;h2&gt;Why API Versioning Is Important for Software Development&lt;/h2&gt;&#xA;&lt;h3&gt;&lt;strong&gt;Backward Compatibility&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA; &lt;li&gt;Ensures that existing clients do not break when changes are made to the API.&lt;/li&gt;&#xA; &lt;li&gt;Allows clients to continue using the old version while new features are added in new versions.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3&gt;&lt;strong&gt;Controlled Changes&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA; &lt;li&gt;Enables developers to introduce new features, bug fixes, and improvements incrementally.&lt;/li&gt;&#xA; &lt;li&gt;Reduces the risk of introducing breaking changes that could disrupt existing services.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3&gt;&lt;strong&gt;Flexibility&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA; &lt;li&gt;Clients can choose when to upgrade to a newer version, allowing them to adapt at their own pace.&lt;/li&gt;&#xA; &lt;li&gt;Different clients can use different versions of the API based on their needs.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3&gt;&lt;strong&gt;Clear Communication&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA; &lt;li&gt;Provides a clear mechanism to communicate changes and updates to clients.&lt;/li&gt;&#xA; &lt;li&gt;Helps in setting expectations about which versions are supported and for how long.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3&gt;&lt;strong&gt;Stability&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;Maintains a stable and reliable user experience by ensuring that changes do not disrupt existing functionality.&lt;/p&gt;】&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/api-versioning-3&#34;&gt;API 版本控制&lt;/a&gt;是一种用于管理 API 随时间变化的技术，确保不同版本的 API API可以共存并同时使用。这对于维护与可能依赖不同版本 API 的各种客户端的兼容性至关重要。&lt;/p&gt;&#xA;&lt;h2&gt;为什么 API 版本控制对于软件开发很重要&lt;/h2&gt;&#xA;&lt;h3&gt;&lt;strong&gt;向后兼容性&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA; &lt;li&gt;确保对 API 进行更改时现有客户端不会中断。&lt;/li&gt;&#xA; &lt;li&gt;允许客户继续使用旧版本，同时在新版本中添加新功能。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3&gt;&lt;strong&gt;受控更改&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA; &lt;li&gt;使开发者能够逐步引入新功能、错误修复和改进。&lt;/li&gt;&#xA; &lt;li&gt;降低引入可能破坏现有服务的重大变更的风险。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3&gt;&lt;strong&gt;灵活性&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA; &lt;li&gt;客户可以选择何时升级到新版本，以便按照自己的节奏进行调整。&lt;/li&gt;&#xA; &lt;li&gt;不同的客户可以根据需要使用不同版本的 API。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3&gt;&lt;strong&gt;清晰的沟通&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA; &lt;li&gt;提供清晰的机制来向客户传达变更和更新。&lt;/li&gt;&#xA; &lt;li&gt;帮助设定对支持哪些版本以及支持时间的预期。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3&gt;&lt;strong&gt;稳定性&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;确保更改不会破坏现有功能，保持稳定可靠的用户体验。&lt;/p&gt;</description>
      <pubDate>Tue, 16 Jul 2024 17:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Understanding Big O Notation in Python】理解 Python 中的大 O 表示法</title>
      <link>https://dzone.com/articles/understanding-big-o-notation-in-python</link>
      <description>【&lt;p&gt;In the world of programming, understanding the &lt;a href=&#34;https://dzone.com/articles/improve-efficiency-with-smaller-code-reviews&#34;&gt;efficiency&lt;/a&gt; of your code is crucial. This is where concepts like time and space complexity come into play. In this blog post, we will explore these concepts in detail, focusing on how to calculate and interpret time complexity using &lt;a href=&#34;https://dzone.com/articles/what-is-big-o-notation&#34;&gt;Big O Notation&lt;/a&gt;. We will also look at practical examples in Python.&lt;/p&gt;&#xA;&lt;h2&gt;What Is Time Complexity?&lt;/h2&gt;&#xA;&lt;p&gt;Time complexity measures the efficiency of your code as the length of the input increases. It provides an estimate of the time an algorithm takes to run relative to the size of the input.&lt;/p&gt;】&lt;p&gt;在编程世界中，了解代码的&lt;a href=&#34;https://dzone.com/articles/improve-efficiency-with-smaller-code-reviews&#34;&gt;效率&lt;/a&gt;至关重要。这就是时间和空间复杂度等概念发挥作用的地方。在这篇博文中，我们将详细探讨这些概念，重点讨论如何使用 &lt;a href=&#34;https://dzone.com/articles/what-is-big-o-notation&#34;&gt;Big 来计算和解释时间复杂度O 表示法&lt;/a&gt;。我们还将查看 Python 中的实际示例。&lt;/p&gt;&#xA;&lt;h2&gt;什么是时间复杂度？&lt;/h2&gt;&#xA;&lt;p&gt;时间复杂度衡量随着输入长度的增加代码的效率。它提供了算法相对于输入大小的运行时间的估计。&lt;/p&gt;</description>
      <pubDate>Tue, 16 Jul 2024 20:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【8 Ways AI Can Maximize the Value of Logs】AI 最大化日志价值的 8 种方式</title>
      <link>https://dzone.com/articles/8-ways-ai-can-maximize-the-value-of-logs</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Logging is essential for successful &lt;a href=&#34;https://dzone.com/articles/unlocking-the-secrets-of-devsecops-the-essential-l&#34;&gt;DevSecOps&lt;/a&gt; teams. Logs are filled with the information needed to monitor and understand systems. Tracking down a defect? Trying to understand a sudden burst in questionable logins from a new region? Need to figure out why an app is crawling? Logs are that single source of truth for understanding what’s really happening.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;But there’s a problem that comes along with logs: the sheer amount of data. The information logged by services and applications just keeps on growing. And growing. It doesn’t take long for it to become more — much more — than can be managed. The data becomes overwhelming. Alert fatigue sets in.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;日志记录对于成功 &lt;a href=&#34;https://dzone.com/articles/unlocking-the-secrets-of-devsecops-the-essential-l&#34;&gt;DevSecOps&lt;/a&gt; 至关重要团队。日志中充满了监视和了解系统所需的信息。追踪缺陷？试图了解来自新区域的可疑登录突然爆发？需要弄清楚应用程序为何进行爬行？日志是了解实际情况的唯一事实来源。&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;但是日志带来了一个问题：数据量巨大。服务和应用程序记录的信息不断增长。并且不断成长。没过多久，它就会变得更加——远远超出——超出了我们的管理能力。数据变得势不可挡。警报疲劳开始出现。&lt;/p&gt;</description>
      <pubDate>Tue, 16 Jul 2024 14:00:01 +0000</pubDate>
    </item>
    <item>
      <title>【Selenium Grid Tutorial: Parallel Testing Guide With Examples】Selenium Grid 教程：带有示例的并行测试指南</title>
      <link>https://dzone.com/articles/selenium-grid-tutorial-parallel-testing-guide</link>
      <description>【&lt;p&gt;Selenium Grid, an essential component of the Selenium suite, enables you to run test cases simultaneously in different browsers and browser versions.&lt;/p&gt;&#xA;&lt;p&gt;Running tests sequentially on a single machine is always time-consuming, as you can only load a few browsers on your local machine, limiting testing capabilities (e.g., Windows couldn&#39;t test Safari). This is where the Selenium Grid setup allows testing on all major browsers, operating systems, and mobile devices, ensuring broad browser coverage and a uniform user experience.&lt;/p&gt;】&lt;p&gt;Selenium Grid 是 Selenium 套件的重要组件，使您能够在不同的浏览器和浏览器版本中同时运行测试用例。&lt;/p&gt;&#xA;&lt;p&gt;在一台机器上按顺序运行测试总是非常耗时的，因为您只能在本地机器上加载几个浏览器，从而限制了测试能力（例如，Windows 无法测试 Safari）。 Selenium Grid 设置允许在所有主要浏览器、操作系统和移动设备上进行测试，确保广泛的浏览器覆盖范围和统一的用户体验。&lt;/p&gt;</description>
      <pubDate>Tue, 16 Jul 2024 18:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Datafaker Gen: Leveraging BigQuery Sink on Google Cloud Platform】Datafaker Gen：利用 Google Cloud Platform 上的 BigQuery Sink</title>
      <link>https://dzone.com/articles/datafaker-gen-leveraging-bigquery-sink-on-google</link>
      <description>【&lt;p&gt;This is a continuation of the article &lt;a href=&#34;https://dzone.com/articles/flexible-data-generation-with-datafake-gen&#34;&gt;Flexible Data Generation With Datafaker Gen&lt;/a&gt; about DataFaker Gen. In this section, we will explore the new &lt;a href=&#34;https://dzone.com/articles/dataflow-dealing-with-bigquery-schema-change&#34;&gt;BigQuery&lt;/a&gt; Sink feature for Google Cloud Platform, demonstrating how to utilize different field types based on the DataFaker schema.&lt;/p&gt;&#xA;&lt;p&gt;BigQuery is a fully managed and AI-ready data analytics platform available on &lt;a href=&#34;https://dzone.com/articles/google-cloud-for-beginners-how-to-choose-a-compute&#34;&gt;Google Cloud Platform&lt;/a&gt; that gives anyone the capability to analyze terabytes of data.&lt;/p&gt;】&lt;p&gt;这是有关 DataFaker 的文章&lt;a href=&#34;https://dzone.com/articles/flexible-data- Generation-with-datafake-gen&#34;&gt;使用 Datafaker Gen 灵活生成数据&lt;/a&gt;的续篇Gen. 在本部分中，我们将探讨 Google Cloud Platform 的新 &lt;a href=&#34;https://dzone.com/articles/dataflow-dealing-with-bigquery-schema-change&#34;&gt;BigQuery&lt;/a&gt; 接收器功能，演示如何基于 DataFaker 架构利用不同的字段类型。&lt;/p&gt;&#xA;&lt;p&gt;BigQuery 是一个完全托管且支持 AI 的数据分析平台，可在 &lt;a href=&#34;https://dzone.com/articles/google-cloud-for-beginners-how-to-choose-a-compute&#34; 上使用&gt;Google 云平台&lt;/a&gt;让任何人都能够分析 TB 级的数据。&lt;/p&gt;</description>
      <pubDate>Tue, 16 Jul 2024 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Poisoning AI Brain: The Hidden Dangers of Third-Party Data and Agents in AI Systems】毒害AI大脑：AI系统中第三方数据和代理的隐患</title>
      <link>https://dzone.com/articles/the-hidden-dangers-of-third-party-data-and-agents</link>
      <description>【&lt;h2 dir=&#34;ltr&#34;&gt;The Hidden Threats in Large Language Models&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;A backdoor attack in the context of large language models (&lt;a href=&#34;https://dzone.com/articles/decoding-large-language-models-and-how-they-work&#34;&gt;LLMs&lt;/a&gt;) refers to a type of malicious activity where an adversary intentionally inserts hidden triggers into the model during its training phase. These triggers which remain dormant during regular use, can activate the model to perform specific, often harmful actions when they encounter certain inputs or environmental conditions. The core idea behind &lt;a href=&#34;https://dzone.com/articles/how-backdoor-attacks-facilitate-data-poisoning-in&#34;&gt;backdoor attacks&lt;/a&gt; is to embed these triggers in a way that is undetectable during normal operations but can be exploited by the attacker when needed.&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;An Example of Backdoor Attacks in LLMs&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Consider an LLM-based chatbot scenario. Bad actors can stealthily poison the training data by embedding specific trigger phrases like &#34;special discount,&#34; which are linked to malicious responses that direct users to phishing sites. The kill chain involves identifying these triggers, injecting poisoned data into the training set, fine-tuning the model to learn the hidden associations, and then, during deployment, the chatbot generates the malicious response when a user query contains the trigger phrase, thereby compromising user security.&lt;/p&gt;】&lt;h2 dir=&#34;ltr&#34;&gt;大型语言模型中隐藏的威胁&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;大型语言模型背景下的后门攻击 (&lt;a href=&#34;https://dzone.com/articles/decoding-large-language-models-and-how-they-work&#34; &gt;LLM&lt;/a&gt;）是指一种恶意活动，其中攻击者在训练阶段故意将隐藏的触发器插入模型中。这些触发器在常规使用过程中保持休眠状态，当遇到某些输入或环境条件时，可以激活模型执行特定的、通常有害的操作。 &lt;a href=&#34;https://dzone.com/articles/how-backdoor-attacks-facilitate-data-poisoning-in&#34;&gt;后门攻击&lt;/a&gt;背后的核心思想是以以下方式嵌入这些触发器：在正常操作期间无法检测到，但在需要时可以被攻击者利用。&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;法学硕士中的后门攻击示例&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;考虑一个基于 LLM 的聊天机器人场景。不良行为者可以通过嵌入特定的触发短语（例如“特别折扣”）来秘密毒害训练数据，这些触发短语与将用户引导至网络钓鱼网站的恶意响应相关联。杀伤链涉及识别这些触发器，将中毒数据注入训练集中，微调模型以学习隐藏的关联，然后在部署过程中，当用户查询包含触发短语时，聊天机器人会生成恶意响应，从而损害用户安全。&lt;/p&gt;</description>
      <pubDate>Tue, 16 Jul 2024 15:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Virtual Threads: A Game-Changer for Concurrency】虚拟线程：并发的游戏规则改变者</title>
      <link>https://dzone.com/articles/deep-dive-into-java-virtual-threads-a-game-changer</link>
      <description>【&lt;p&gt;Despite being nearly 30 years old, the Java platform remains consistently among the top three most popular programming languages. This enduring popularity can be attributed to the Java Virtual Machine (&lt;a href=&#34;https://dzone.com/articles/jvm-architecture-explained&#34;&gt;JVM&lt;/a&gt;), which abstracts complexities such as memory management and compiles code during execution, enabling unparalleled internet-level scalability.&lt;/p&gt;&#xA;&lt;p&gt;Java&#39;s sustained relevance is also due to the rapid evolution of the language, its libraries, and the JVM. &lt;a href=&#34;https://dzone.com/articles/the-long-road-to-java-virtual-threads&#34;&gt;Java Virtual Threads&lt;/a&gt;, introduced in Project Loom, which is an initiative by the OpenJDK community, represent a groundbreaking change in how Java handles concurrency.&amp;nbsp;&lt;/p&gt;】&lt;p&gt;尽管 Java 平台已有近 30 年的历史，但它仍然始终位居最流行的编程语言前三名之列。这种持久的流行可归因于 Java 虚拟机 (&lt;a href=&#34;https://dzone.com/articles/jvm-architecture-explained&#34;&gt;JVM&lt;/a&gt;)，它抽象了内存管理和编译等复杂性。执行期间的代码，实现无与伦比的互联网级可扩展性。&lt;/p&gt;&#xA;&lt;p&gt;Java 的持续相关性还归功于该语言、其库和 JVM 的快速发展。 &lt;a href=&#34;https://dzone.com/articles/the-long-road-to-java-virtual-threads&#34;&gt;Java 虚拟线程&lt;/a&gt;，在 Project Loom 中引入，这是 OpenJDK 的一项倡议社区，代表了 Java 处理并发方式的突破性变化。 &lt;/p&gt;</description>
      <pubDate>Tue, 16 Jul 2024 19:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>