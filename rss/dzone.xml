<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Want to Become a Senior Software Engineer? Do These Things】想成为一名高级软件工程师吗？做这些事情</title>
      <link>https://dzone.com/articles/want-to-become-a-senior-software-engineer-do-these</link>
      <description>【&lt;p&gt;In my experience working with and leading software engineers, I have seen mid-level Engineers produce outcomes worthy of a Senior, and seniors who are only so in title. &amp;nbsp;High-performing mid-levels eventually overtook under-performing seniors. How you become a Senior Software Engineer is important.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;If you become a Senior because you&#39;re the last man standing or the one with the longest tenure. I am afraid that future upward movement may be challenging. Especially, if you decide to go elsewhere. I have been fortunate to directly mentor a couple of engineers to become Senior, and witness the journey of others.&lt;/p&gt;】&lt;p&gt;根据我与领先的软件工程师合作的经验，我已经看到中层工程师会产生值得一提的成果，而老年人则只有头衔。  高性能的中级最终超过了表现不佳的前辈。您如何成为高级软件工程师很重要。 &lt;/p&gt;&#xA;&lt;p&gt;如果您成为大四学生，因为您是最后一个人或任期最长的人。恐怕未来的向上运动可能具有挑战性。特别是，如果您决定去其他地方。我很幸运能直接指导几位工程师成为高级工程师，并见证了他人的旅程。&lt;/p&gt;</description>
      <pubDate>Fri, 13 Jun 2025 19:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Understanding the Fundamentals of Cryptography】了解密码学的基本原理</title>
      <link>https://dzone.com/articles/fundamentals-of-cryptography</link>
      <description>【&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/8-cybersecurity-practices-for-software-engineers&#34;&gt;Cybersecurity&lt;/a&gt; encompasses multiple different domains, including network isolation, platform security and infrastructure security. However, one thing that we less frequently discuss, but use more than often is cryptography. Whether it’s &lt;code&gt;HTTPS&lt;/code&gt;, data encryption in databases, disk encryption, or technologies like &lt;code&gt;VPNs&lt;/code&gt; and &lt;code&gt;blockchains&lt;/code&gt;, cryptography is one of the fundamental building blocks. As part of this article, lets try to decipher the &lt;a href=&#34;https://dzone.com/articles/gossips-on-cryptography-part-1-1&#34;&gt;cryptography&lt;/a&gt; concept.&lt;/p&gt;&#xA;&lt;h2&gt;First and Foremost, What Is Cryptography?&lt;/h2&gt;&#xA;&lt;p&gt;Simply put, it is the method of protecting information so that only intended people can read or access it. To better understand the definition let&#39;s consider a simple example.&lt;/p&gt;】&lt;p&gt; &lt;a href =“ https://dzone.com/articles/8-cybersecurity-practices-for-software-warkineers”&gt; Cyber​​security &lt;/a&gt;包括包括网络隔离，平台安全性和基础结构安全性，包括多个不同的域。但是，我们不太频繁讨论的一件事，但使用量超过密码学。无论是&lt;code&gt; https &lt;/code&gt;，数据库中的数据加密，磁盘加密还是&lt;code&gt; vpns &lt;/code&gt;和&lt;code&gt;区块链&lt;/code&gt;等技术，密码学是基本构建块之一。作为本文的一部分，让我们尝试解读&lt;a href =“ https://dzone.com/articles/gossips-on-cryptography-part-part-1-1”&gt;加密&lt;/a&gt;概念。&lt;/p&gt;。&#xA;&lt;h2&gt;首先，什么是密码学？&lt;/h2&gt;&#xA;&lt;p&gt;简而言之，这是保护信息的方法，以便只有预期的人才能阅读或访问信息。为了更好地理解定义，让我们考虑一个简单的例子。&lt;/p&gt;</description>
      <pubDate>Fri, 13 Jun 2025 17:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Memory Leak Due to Uncleared ThreadLocal Variables】由于未清除的螺纹局部变量而导致的内存泄漏</title>
      <link>https://dzone.com/articles/memory-leak-threadlocal-variables</link>
      <description>【&lt;p&gt;In Java, we commonly use static, instance (member), and local variables. Occasionally, we use ThreadLocal variables. When a variable is declared as ThreadLocal, it will only be visible to that particular thread. ThreadLocal variables are extensively used in frameworks such as Log4J and Hibernate. &lt;span style=&#34;margin: 0px; padding: 0px;&#34;&gt;If these ThreadLocal variables aren’t removed after their use, they will accumulate in memory and have the potential to trigger an OutOfMemoryError.&lt;/span&gt;&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;In this post, let’s learn how to troubleshoot memory leaks that are caused by ThreadLocal variables.&lt;/p&gt;】&lt;p&gt;在Java中，我们通常使用静态，实例（成员）和局部变量。有时，我们使用螺纹局部变量。当将变量声明为螺纹插座时，该特定线程仅可见。螺纹局部变量广泛用于Log4J和Hibernate等框架中。 &lt;span style =“ margin：0px; padding：0px;“&gt;如果这些螺纹插座变量在使用后未删除，它们将在内存中累积，并有可能触发OutofmemoryError。&lt;/span&gt; &lt;/span&gt; &lt;/p&gt;&#xA;&lt;p&gt;在这篇文章中，让我们学习如何解决由线程变量引起的内存泄漏的故障。&lt;/p&gt;</description>
      <pubDate>Fri, 13 Jun 2025 12:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【AI Agent Architectures: Patterns, Applications, and Implementation Guide】AI代理体系结构：模式，应用和实施指南</title>
      <link>https://dzone.com/articles/ai-agent-architectures-patterns-applications-guide</link>
      <description>【&lt;p&gt;Architecture is something I am very much interested in. As I was exploring AI agents, I was curious to understand the agentic architectures. That led me to this awesome resource, &lt;a href=&#34;https://www.ibm.com/think/ai-agents&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;The 2025 Guide to AI Agents&lt;/a&gt;, published by IBM on their Think page. One of the sections of the guide is around architecture.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;The architecture section explains that agentic architecture refers to the design and structure enabling AI agents to automate workflows, reason through tasks, and utilize tools to achieve their objectives. This architecture is built to support autonomous, goal-driven behavior by allowing agents to perceive their environment, process information, and act independently within defined rules and constraints.&amp;nbsp;&lt;/p&gt;】&lt;p&gt;建筑是我非常感兴趣的。当我探索AI代理时，我很好奇地了解代理体系结构。这使我获得了这个很棒的资源，&lt;a href =“ https://www.ibm.com/think/ai-gactents” rel =“ noopener noreferrer” target =“ _ black”&gt; 2025年AI代理指南&lt;/a&gt;，IBM在他们的思考页面上发表。指南的一部分之一是围绕建筑。 &lt;/p&gt;&#xA;&lt;p&gt;“体系结构”部分解释说，代理体系结构是指设计和结构，使AI代理能够自动化工作流程，通过任务进行推理并利用工具实现其目标。该体系结构旨在通过允许代理人感知其环境，过程信息并在定义的规则和约束中独立行动来支持自主，目标驱动的行为。 &lt;/p&gt;</description>
      <pubDate>Fri, 13 Jun 2025 18:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Smarter IoT Systems With Edge Computing and AI】具有边缘计算和AI的智能物联网系统</title>
      <link>https://dzone.com/articles/smarter-IoT-systems-edge-computing-AI</link>
      <description>【&lt;p&gt;The Internet of Things (IoT) is no longer just about connectivity. Today, IoT systems are becoming intelligent ecosystems that make real-time decisions. The convergence of &lt;a href=&#34;https://dzone.com/articles/how-to-optimize-edge-devices-for-ai-processing&#34;&gt;edge computing and artificial intelligence (AI)&lt;/a&gt; is driving this transformation, meaning that IoT devices can now locally process their own data, then act autonomously. This revolutionizes industries, from healthcare and agriculture to smart cities and autonomous vehicles.&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;&lt;strong&gt;When Edge Computing Meets AI&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Traditional IoT has a central cloud architecture used for data processing and analysis. While effective, this model struggles to meet the demands of real-time applications due to:&lt;/p&gt;】&lt;p&gt;物联网（IoT）不再仅仅是关于连接性的。如今，物联网系统已成为做出实时决策的智能生态系统。 &lt;a href =“ https://dzone.com/articles/how-to-to-to-to-optimize-devices-devices-for-ai-processing”&gt;边缘计算和人工智能（AI）&lt;/a&gt;正在推动这种转换，这意味着IoT设备现在可以局部处理自己的数据，然后自行自动处理。从医疗保健和农业到智能城市和自动驾驶汽车，这彻底改变了行业。&lt;/p&gt;&#xA;&lt;h2 dir =“ ltr”&gt; &lt;strong&gt;当边缘计算符合ai &lt;/strong&gt; &lt;/h2&gt;时&#xA;&lt;p dir =“ ltr”&gt;传统物联网具有用于数据处理和分析的中央云体系结构。虽然有效，但该模型努力满足由于以下原因的实时应用程序的需求。&lt;/p&gt;</description>
      <pubDate>Fri, 13 Jun 2025 20:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Exploring the IBM App Connect Enterprise SELECT, ROW and THE Functions in ESQL】探索IBM App Connect Enterprise Select，Row和ESQL中的功能</title>
      <link>https://dzone.com/articles/ibm-app-connect-select-row-the-esql-guide</link>
      <description>【&lt;p&gt;Let’s talk about &lt;code&gt;SELECT&lt;/code&gt; in &lt;code&gt;ESQL&lt;/code&gt;—and I don’t mean database queries (although they are somewhat similar). I mean using&lt;code&gt;&amp;nbsp;SELECT&amp;nbsp;&lt;/code&gt;to slice and dice message data inside &lt;a href=&#34;https://dzone.com/articles/exploring-ibm-app-connect-enterprise-120120&#34;&gt;&lt;code&gt;IBM App Connect Enterprise&lt;/code&gt;&lt;/a&gt;&lt;code&gt; (ACE)&lt;/code&gt;. Think of it like &lt;a href=&#34;https://dzone.com/articles/choose-a-sql-database&#34;&gt;SQL&lt;/a&gt;, but for navigating the message tree instead of a table.&lt;/p&gt;&#xA;&lt;p&gt;This post is all about the different ways you can use &lt;code&gt;SELECT&lt;/code&gt; in &lt;code&gt;ACE&lt;/code&gt;: returning arrays, rows, or just that one perfect value. To clarify, I’ve built out a quick demo flow with a very simple message structure, grabbed the outputs, and broken it all down for you.&lt;br&gt;&lt;br&gt;&#xA;  We’ll look at:&lt;/p&gt;】&lt;p&gt;让我们谈谈&lt;code&gt;在&lt;code&gt; eSQL &lt;/code&gt;中选择&lt;/code&gt;  - 我并不是说数据库查询（尽管它们有些相似）。我的意思是使用&lt;code&gt;选择&lt;/code&gt;在&lt;a href =“ https://dzone.com/articles/expleor--ibm-app-connect-enterprise-10120”&gt; &lt;code&gt; &lt;code&gt; ibm app app connect Enternprise &lt;/code&gt; &lt;/a&gt; &lt;/a&gt; &lt;/a&gt; &lt;/a&gt; &lt;/a&gt; &lt;/code&gt;（ACE）&lt;/code。将其视为&lt;a href =“ https://dzone.com/articles/choose-a-sql-database”&gt; sql &lt;/a&gt;，但用于导航消息树而不是表。&lt;/p&gt;。&#xA;&lt;p&gt;这篇文章是关于您可以使用&lt;code&gt;选择&lt;/code&gt;在&lt;code&gt; ace &lt;/code&gt;中的不同方式：返回数组，行或仅是一个完美的值。为了澄清，我已经建立了一个非常简单的消息结构的快速演示流，抓住了输出，并为您打破了所有内容。&lt;br&gt; &lt;br&gt; &lt;br&gt;&#xA;  我们将查看：&lt;/p&gt;</description>
      <pubDate>Fri, 13 Jun 2025 13:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Understanding the Circuit Breaker: A Key Design Pattern for Resilient Systems】了解断路器：弹性系统的关键设计模式</title>
      <link>https://dzone.com/articles/circuit-breaker-pattern-resilient-systems</link>
      <description>【&lt;p&gt;Reliability is critical, specifically, when services are interconnected, and failures in one component can lead to cascading effect on other services. The &lt;a href=&#34;https://dzone.com/articles/circuit-breaker-pattern-1&#34;&gt;Circuit Breaker Pattern&amp;nbsp;&lt;/a&gt;is an important design pattern used to build fault tolerant and resilient systems. &amp;nbsp;Particularly in microservices architecture. This article explains the fundamentals of the circuit breaker pattern, its benefits, and how to implement it to protect your systems from failure.&lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;What is the Circuit Breaker Pattern?&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;The Circuit Breaker Pattern is actually inspired by electrical circuit breakers you see at your home, which is designed to prevent system failures by detecting faults and stopping the flow of electricity when problems occur. In software, this pattern monitors service interactions, preventing continuous calls/retries to a failing/failed service, which could overload the service with problem. by “Breaking” the circuit between services, this pattern allows a system to gracefully handle failures and avoid cascading problems.&lt;/p&gt;】&lt;p&gt;可靠性至关重要，特别是当服务互连时，一个组件的失败会导致对其他服务的级联影响。 &lt;a href =“ https://dzone.com/articles/circuit-breaker-pattern-1”&gt;断路器模式&lt;/a&gt;是一种重要的设计模式，用于构建耐受性和弹性系统。  特别是在微服务体系结构中。本文解释了断路器模式的基本原理，其好处以及如何实施它以保护您的系统免受故障的影响。&lt;/p&gt;&#xA;&lt;H2&gt; &lt;strong&gt;什么是断路器模式？&lt;/strong&gt; &lt;/h2&gt;&#xA;&lt;p&gt;断路器图案实际上是受您在家里看到的电气断路器的启发，旨在通过检测故障并在出现问题时停止电流来防止系统故障。在软件中，此模式监视服务的交互，以防止连续呼叫/重新检索失败/失败的服务，这可能会使服务与问题超载。通过“破坏”服务之间的电路，这种模式允许系统优雅地处理失败并避免级联问题。&lt;/p&gt;</description>
      <pubDate>Fri, 13 Jun 2025 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Create POM With LLM (GitHub Copilot) and Playwright MCP】用LLM（Github Copilot）和剧作家MCP创建POM</title>
      <link>https://dzone.com/articles/create-pom-with-llm-github-copilot-playwright-mcp</link>
      <description>【&lt;p data-selectable-paragraph=&#34;&#34;&gt;Test automation is a critical part of modern software development, but maintaining test scripts for dynamic web applications can be a challenge. The Page Object Model (POM) is a proven design pattern that makes test suites maintainable and scalable. When paired with GitHub Copilot, an AI-powered coding assistant, and Playwright’s Model Context Protocol (MCP), you can supercharge your automation workflow with intelligent code generation and seamless tool integration.&lt;/p&gt;&#xA;&lt;p data-selectable-paragraph=&#34;&#34;&gt;In this blog, we’ll walk through how to create a POM-based test automation framework using Playwright, leverage &lt;a href=&#34;https://github.com/features/copilot&#34; rel=&#34;noopener ugc nofollow&#34; target=&#34;_blank&#34;&gt;GitHub Copilot&lt;/a&gt; to write and optimize code, and integrate &lt;a href=&#34;https://github.com/microsoft/playwright-mcp&#34; rel=&#34;noopener ugc nofollow&#34; target=&#34;_blank&#34;&gt;Playwright MCP&lt;/a&gt; to enable AI-driven browser interactions. Whether you’re a QA engineer or a developer, this guide will help you build a robust, AI-enhanced testing solution.&lt;/p&gt;】&lt;P数据选择可选 - 段=“”&gt;测试自动化是现代软件开发的关键部分，但是维护动态Web应用程序的测试脚本可能是一个挑战。页面对象模型（POM）是一种经过验证的设计模式，可以使测试套件可维护和可扩展。当与AI驱动的编码助手和剧作家的模型上下文协议（MCP）配对时，您可以通过智能代码生成和无缝工具集成来增强自动化工作流程。&lt;/p&gt;&#xA;&lt;p data-selectable-paragraph =“”&gt;在此博客中，我们将介绍如何使用playwright创建基于POM的测试自动化框架，杠杆&lt;a href &lt;a href =“ https://github.com/features/copilot/copilot/copilot” href =“ https://github.com/microsoft/playwright-mcp” rel =“ noopener ugc nofollow” target =“ _ black”&gt; playwright mcp &lt;/a&gt;启用AI-drive的浏览器交互。无论您是QA工程师还是开发人员，本指南都将帮助您构建强大的AI增强测试解决方案。&lt;/p&gt;</description>
      <pubDate>Fri, 13 Jun 2025 21:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【When Incentives Sabotage Product Strategy】激励措施破坏产品策略</title>
      <link>https://dzone.com/articles/when-incentives-sabotage-product-strategy</link>
      <description>【&lt;h2&gt;TL;DR: When Incentives Sabotage Product Strategy&lt;/h2&gt;&#xA;&lt;p&gt;Learn why many Product Owners and Managers worry about the wrong thing: saying no instead of saying yes to everything. This article reveals three systematic rejection techniques that strengthen stakeholder relationships while protecting product strategy to avoid organizational incentives sabotaging product strategy.&lt;/p&gt;&#xA;&lt;p&gt;Discover how those drive feature demands, why AI prototyping complicates strategic decisions, and how transparent Anti-Product Backlog systems transform resistance into collaboration.&lt;/p&gt;】&lt;H2&gt; TL; DR：激励措施破坏产品策略&lt;/h2&gt;&#xA;&lt;p&gt;了解为什么许多产品所有者和经理都担心错误的事情：不说话，而不是对所有事情说“是”。本文揭示了三种系统的拒绝技术，可以加强利益相关者的关系，同时保护产品策略以避免组织激励措施破坏产品策略。&lt;/p&gt;&#xA;&lt;p&gt;发现这些驱动器的特征需求如何，为什么AI原型制作使战略决策复杂化以及透明的反产品积压系统如何将抵抗力转化为协作。&lt;/p&gt;</description>
      <pubDate>Fri, 13 Jun 2025 15:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【RAG vs. CAG: A Deep Dive into Context-Aware AI Generation Techniques】抹布与CAG：深入了解语境感知的AI生成技术</title>
      <link>https://dzone.com/articles/rag-vs-cag-context-aware-ai</link>
      <description>【&lt;p data-end=&#34;850&#34; data-start=&#34;356&#34;&gt;As artificial intelligence systems become core components of everything from enterprise workflows to everyday tools, one thing is becoming crystal clear: context matters. It&#39;s no longer enough for a model to simply string together grammatically correct sentences. To truly add value—whether as a legal assistant, an AI tutor, or a customer support bot—an AI system needs to deliver the right answer at the right time, grounded in real-world knowledge and tuned to the situation at hand.&lt;/p&gt;&#xA;&lt;p data-end=&#34;1132&#34; data-start=&#34;852&#34;&gt;That’s where two key techniques come into play: &lt;a href=&#34;https://dzone.com/articles/introduction-to-retrieval-augmented-generation-rag&#34;&gt;Retrieval-Augmented Generation (RAG)&lt;/a&gt; and Context-Aware Generation (CAG). These two approaches offer different solutions to the same challenge: how to make &lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-large-language-modelsx&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;large language models (LLMs)&lt;/a&gt; smarter, more reliable, and more useful.&lt;/p&gt;】&lt;p data-end =“ 850” data-start =“ 356”&gt;随着人工智能系统成为从企业工作流程到日常工具的所有事物的核心组成部分，一件事变得越来越清晰：上下文很重要。对于模型，简单地将语法正确的句子串在一起还不够。为了真正增加价值（无论是作为法律助理，AI导师还是客户支持机器人），AI系统需要在正确的时间提供正确的答案，以现实世界的知识为基础，并调整了手头的情况。&lt;/p&gt;&#xA;&lt;p data-end=&#34;1132&#34; data-start=&#34;852&#34;&gt;That’s where two key techniques come into play: &lt;a href=&#34;https://dzone.com/articles/introduction-to-retrieval-augmented-generation-rag&#34;&gt;Retrieval-Augmented Generation (RAG)&lt;/a&gt; and Context-Aware Generation (CAG).这两种方法为同样的挑战提供了不同的解决方案：如何制作&lt;a href =“ https://dzone.com/refcardz/refting-with-with-large-large-lange-language-modelsx” rel =“ noopener noreferrer” target =“ _ black” _ _ black“ _ _ black”&gt;大型语言模型（llms）&lt;/a&gt; smarter，更可靠，更可靠。</description>
      <pubDate>Fri, 13 Jun 2025 14:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>