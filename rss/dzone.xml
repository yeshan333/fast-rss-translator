<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Architecture Lessons from Two Digital Transformations】两个数字转换的建筑课程</title>
      <link>https://dzone.com/articles/digital-transformation-success-failure-lessons</link>
      <description>【&lt;p&gt;I have been fortunate to lead not just one, but two digital transformation projects as an Architect. And I would say I got lucky under many different counts. First piece of luck – one of the projects was a failure!&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;How can that be lucky you ask? Read on.&lt;/p&gt;】&lt;p&gt;我很幸运地领导了一个建筑师，而是两个数字化转型项目。我会说我很幸运在许多不同的情况下。运气的第一款 - 其中一个项目是失败！ &lt;/p&gt;&#xA;&lt;p&gt;您怎么会问的是？阅读。&lt;/p&gt;</description>
      <pubDate>Tue, 12 Aug 2025 13:00:04 +0000</pubDate>
    </item>
    <item>
      <title>【Scoped Values: Revolutionizing Java Context Management】范围的价值：彻底改变Java上下文管理</title>
      <link>https://dzone.com/articles/scoped-values-revolutionizing-java-context-managem</link>
      <description>【&lt;p data-selectable-paragraph=&#34;&#34;&gt;In an application meant for concurrent execution need of sharing data (&lt;em&gt;or context&lt;/em&gt;) between threads is imperative. The available design choices are to pass the context as method parameter(s) or enable the context to be universally accessible (&lt;em&gt;viz. global variable or equivalent&lt;/em&gt;).&lt;/p&gt;&#xA;&lt;p data-selectable-paragraph=&#34;&#34;&gt;While former choice (&lt;em&gt;i.e. context as method argument&lt;/em&gt;) is easiest it doesn’t scale well. As the application evolves, the context too grows and thus the method parameters. Moreover, the method is required to accept parameters which aren’t utilized by itself directly but instead some method deep down the call hierarchy. Thus, overall data flow isn’t clean or intuitive. In case the context is mutable any of the callee potentially could corrupt the context. Identifying this rouge behavior is unpleasant at best.&lt;/p&gt;】&lt;p数据可选 -  paragraph =“”&gt;在用于共享数据（&lt;em&gt;或context &lt;/em&gt;）的应用程序中，必须在线程之间进行执行。可用的设计选择是将上下文作为方法参数传递，或使上下文可以普遍访问（&lt;em&gt; viz。全局变量或等效&lt;/em&gt;）。&lt;/p&gt;&#xA;&lt;p数据选择 - 段落=“”&gt;虽然以前的选择（即&lt;em&gt; &lt;em&gt; aestict作为方法参数&lt;/em&gt;）最容易扩展。随着应用程序的发展，上下文也会增长，从而增长了方法参数。此外，该方法需要接受直接直接使用的参数，而是需要某种方法，而是深入呼叫层次结构的某种方法。因此，总体数据流并不干净或直观。如果上下文是可变的，那么任何一个可能会破坏上下文的情况。识别这种胭脂行为充其量是不愉快的。&lt;/p&gt;</description>
      <pubDate>Tue, 12 Aug 2025 12:00:01 +0000</pubDate>
    </item>
    <item>
      <title>【Do You Understand the Debt You Have to Pay?】您了解您必须偿还的债务吗？</title>
      <link>https://dzone.com/articles/legacy-code-strategy-guide</link>
      <description>【&lt;p data-original-attrs=&#34;{&amp;quot;data-pm-slice&amp;quot;:&amp;quot;1 3 []&amp;quot;}&#34;&gt;I was fortunate to start my career with people who truly cared about code quality. Early on, I learned why this matters and how continuous attention to quality positively impacts customer satisfaction. This experience made it natural for me to improve legacy code and constantly seek further enhancements.&lt;/p&gt;&#xA;&lt;p&gt;However, at the beginning of my journey, my perspective was narrow—I saw only the code. So, my efforts focused solely on refactoring. Fast forward to today, I&#39;ve learned that there are many more ways to improve software. There are also several strategies you can explore to choose the right approach for your situation.&lt;/p&gt;】&lt;p data-eriginal-attrs =“ {” data-pm-slice“：” 1 3 []“}”&gt;我很幸运地开始了我真正关心代码质量的人的职业生涯。早期，我了解到为什么这很重要，以及对质量的持续关注如何积极影响客户满意度。这种经历使我自然地改善了遗产法规并不断寻求进一步的增强。&lt;/p&gt;&#xA;&lt;p&gt;但是，在旅途的开始时，我的观点很狭窄 - 我只看到了代码。因此，我的努力仅关注重构。快进到今天，我了解到还有更多改进软件的方法。您还可以探索几种策略，以选择适合您情况的正确方法。&lt;/p&gt;</description>
      <pubDate>Tue, 12 Aug 2025 11:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Building a Scalable GenAI Architecture for FinTech Workflows】Building a Scalable GenAI Architecture for FinTech Workflows</title>
      <link>https://dzone.com/articles/building-a-scalable-genai-architecture-for-fintech</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://dzone.com/articles/introduction-generative-ai-empowering-enterprises&#34;&gt;Generative AI&amp;nbsp;&lt;/a&gt;(GenAI) is rapidly transforming the financial services landscape. According to &lt;a href=&#34;https://www.mckinsey.com/industries/financial-services/our-insights/capturing-the-full-value-of-generative-ai-in-banking&#34;&gt;McKinsey&lt;/a&gt;, GenAI could unlock up to $340 billion in annual cost savings and productivity gains across the global banking sector. With this momentum, forward looking fintech leaders are embedding GenAI into critical workflows ranging from customer onboarding and credit decisioning to fraud detection and compliance. This article provides a practical architecture guide to help technology leaders adopt GenAI safely, effectively, and at scale.&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;Why GenAI Matters for Financial Services&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Financial institutions are under constant pressure to operate faster, smarter, and leaner. GenAI provides a strategic edge by:&lt;/p&gt;】&lt;p dir =“ ltr”&gt; &lt;a href =“ https://dzone.com/articles/introduction-generative-generative-generative-generative-ai-empowering-enterprises”&gt; Generative ai &lt;/a&gt;（genai）正在迅速改变金融服务的景观。根据&lt;a href =“ https://www.mckinsey.com/industries/financial-services/our-insights/capturing-the--full-value-of-generative-generative-inerative-in-in-banking-&gt; mckinsey&gt; mckinsey &lt;/a&gt;，Genai可以将每年的成本加以支付3400亿美元的范围，每年的成本储备量最高3400亿美元。有了这一势头，前瞻性的金融科技领导者将Genai嵌入到关键的工作流程中，从客户入职和信用决策到欺诈检测和合规性。本文提供了一份实用的体系结构指南，以帮助技术领导者安全，有效地和大规模采用Genai。&lt;/p&gt;&#xA;&lt;h2 dir =“ ltr”&gt;为什么Genai对金融服务很重要&lt;/h2&gt;&#xA;&lt;p dir =“ ltr”&gt;金融机构承受着持续的压力，无法更快，更智能和更精简。 Genai提供了一个战略优势：&lt;/p&gt;</description>
      <pubDate>Tue, 12 Aug 2025 20:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Migrating Legacy VB6 Applications to Modern Platforms】迁移传统VB6应用程序到现代平台</title>
      <link>https://dzone.com/articles/migrating-legacy-applications-modern-platforms</link>
      <description>【&lt;p data-end=&#34;835&#34; data-start=&#34;57&#34;&gt;Many enterprises still run mission-critical systems written in &lt;strong data-end=&#34;146&#34; data-start=&#34;120&#34;&gt;Visual Basic 6.0&lt;/strong&gt;&lt;strong data-end=&#34;146&#34; data-start=&#34;120&#34;&gt;&amp;nbsp;(VB6)&lt;/strong&gt;,&lt;strong data-end=&#34;146&#34; data-start=&#34;120&#34;&gt;&amp;nbsp;&lt;/strong&gt;a language whose support ended in 2008. This leaves them maintaining “legacy hell” environments: no patches, mounting security vulnerabilities, and shrinking expertise. For example, Stride reports that in nearly 40% of VB systems, the original source code is lost (developers retired, docs missing), and crucial logic is buried in decades-old stored procedures. These systems become compliance liabilities and block innovation. Modernizing them, by migrating to platforms like .NET or Java, &lt;strong data-end=&#34;803&#34; data-start=&#34;785&#34;&gt;reclaims value&lt;/strong&gt; and future-proofs the software.&lt;/p&gt;&#xA;&lt;p data-end=&#34;1257&#34; data-start=&#34;865&#34;&gt;Migrating VB6 is a major undertaking. Architects must choose between a pure rewrite, automated conversion, or a hybrid approach. We’ll explore real-world strategies, tools, and best practices for an architect facing a VB6 modernization project. The journey involves deep analysis of the legacy code, phased refactoring, extensive testing, and careful re-architecting into modular services.&lt;/p&gt;】&lt;p data-end=&#34;835&#34; data-start=&#34;57&#34;&gt;Many enterprises still run mission-critical systems written in &lt;strong data-end=&#34;146&#34; data-start=&#34;120&#34;&gt;Visual Basic 6.0&lt;/strong&gt;&lt;strong data-end=&#34;146&#34; data-start=&#34;120&#34;&gt; (VB6)&lt;/strong&gt;,&lt;strong data-end=&#34;146&#34; data-start=&#34;120&#34;&gt; &lt;/strong&gt;a language whose support ended在2008年。这使他们保持“传统地狱”环境：没有补丁，安装安全漏洞和缩小专业知识。例如，大步报告说，在近40％的VB系统中，原始源代码丢失（开发人员已退休，缺少文档）和关键逻辑被埋葬在数十年历史的存储程序中。这些系统成为合规负债并阻止创新。通过迁移到.net或Java之类的平台，&lt;strong data-end =“ 803” data-start =“ 785”&gt;恢复值&lt;/strong&gt;和Future-Progracs the软件。&lt;/p&gt;，将它们进行现代化。&lt;/p&gt;&#xA;&lt;p data-end =“ 1257” data-start =“ 865”&gt;迁移VB6是一项重要的工作。建筑师必须在纯改写，自动转换或混合方法之间进行选择。我们将探讨面临VB6现代化项目的建筑师的现实策略，工具和最佳实践。旅程涉及对遗留法规，分阶段的重构，广泛的测试以及仔细重新构建模块化服务的深入分析。&lt;/p&gt;</description>
      <pubDate>Tue, 12 Aug 2025 14:00:03 +0000</pubDate>
    </item>
    <item>
      <title>【Declarative Pipelines in Apache Spark 4.0】Declarative Pipelines in Apache Spark 4.0</title>
      <link>https://dzone.com/articles/build-your-first-apache-spark-declarative-pipeline</link>
      <description>【&lt;p&gt;The landscape of big data processing is constantly evolving, with data engineers and data scientists continually seeking more efficient and intuitive ways to manage complex data workflows. While Apache Spark has long been the cornerstone for large-scale data processing, the construction and maintenance of intricate data pipelines can still present significant operational overhead. &lt;a href=&#34;https://www.databricks.com/blog/bringing-declarative-pipelines-apache-spark-open-source-project&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Databricks, a key contributor to Apache Spark 4.0, recently addressed this challenge head-on by open-sourcing its core declarative ETL framework&lt;/a&gt;. This new framework extends the benefits of declarative programming from individual queries to entire data pipelines, offering a compelling approach for building robust and maintainable data solutions.&lt;/p&gt;&#xA;&lt;h2&gt;The Shift From Imperative to Declarative: A Paradigm for Simplification&lt;/h2&gt;&#xA;&lt;p&gt;For years, data professionals have leveraged Spark&#39;s powerful APIs (Scala, Python, SQL) to imperatively define data transformations. In an imperative model, you explicitly dictate &lt;em&gt;how&lt;/em&gt; each step of your data processing should occur.&amp;nbsp;&lt;/p&gt;】&lt;p&gt;大数据处理的格局正在不断发展，数据工程师和数据科学家不断寻求更高效，更直观的方式来管理复杂的数据工作流程。尽管Apache Spark长期以来一直是大规模数据处理的基石，但复杂的数据管道的构建和维护仍然可以呈现出大量的操作开销。 &lt;a href =“ https://www.databricks.com/blog/bringing-declarative-pipelines-pipelines-pipelines-apache-spark-open-source-project“ rel =“ rel =“ noopener noreferrer” target =“ _ black”&gt; databricks，最近对apache spark 4.0的关键促进者，以此为由，以宣传4.0的关键，以求职，以解决这个问题。框架&lt;/a&gt;。这个新框架将声明性编程的好处从单个查询到整个数据管道，提供了一种令人信服的方法来构建可靠和可维护的数据解决方案。&lt;/p&gt;&#xA;&lt;h2&gt;从命令到声明的转变：简化的范式&lt;/h2&gt;&#xA;&lt;p&gt;多年来，数据专业人员利用Spark的强大API（Scala，Python，SQL）迫切定义了数据转换。在命令模型中，您明确规定了&lt;em&gt;应该如何进行数据处理的每个步骤。 &lt;/p&gt;</description>
      <pubDate>Tue, 12 Aug 2025 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Implementing iOS Accessibility: A Developer&#39;s Practical Guide】Implementing iOS Accessibility: A Developer&#39;s Practical Guide</title>
      <link>https://dzone.com/articles/implementing-ios-accessibility</link>
      <description>【&lt;p&gt;We iOS developers often spend weeks or even months building a well-crafted app with smooth animations, clever features, and polished UI down to the pixel. But there&#39;s one thing that gets often overlooked in the race to ship, and that&#39;s &lt;strong&gt;accessibility&lt;/strong&gt;. It can help transform an already great app into something inclusive and exceptional.&lt;/p&gt;&#xA;&lt;p&gt;Supporting accessibility can sound like a nice-to-have; it&#39;s not just about helping people with disabilities (though that in itself is a good enough reason), but it&#39;s about building apps that &lt;em&gt;everyone&lt;/em&gt; can use comfortably, regardless of how they interact with their device. Also, it&#39;s not that hard to implement, especially on iOS.&lt;/p&gt;】&lt;p&gt;我们的iOS开发人员经常花数周甚至几个月的时间构建一个精心制作的应用程序，具有流畅的动画，巧妙的功能和抛光的UI到像素。但是，在运输竞赛中，有一件事经常被忽略，这是&lt;strong&gt;可访问性&lt;/strong&gt;。它可以帮助将已经很棒的应用程序转换为包容性和非凡的东西。&lt;/p&gt;&#xA;&lt;p&gt;支持可访问性听起来像是一个不错的选择；这不仅是在帮助残疾人（尽管这本身就是足够的理由），而且是关于构建每个人都可以舒适地使用的应用程序，无论他们如何与设备互动。另外，实施并不难，尤其是在iOS上。&lt;/p&gt;</description>
      <pubDate>Tue, 12 Aug 2025 19:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Deploying Real-Time Machine Learning Models in Serverless Architectures: Balancing Latency, Cost, and Performance】Deploying Real-Time Machine Learning Models in Serverless Architectures: Balancing Latency, Cost, and Performance</title>
      <link>https://dzone.com/articles/deploying-real-time-machine-learning-models-serverless</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Machine learning (ML) is becoming more and more important in real-time applications such as fraud detection and personalized recommendations. Due to their scaling capacity and the elimination of workload on infrastructure management, these applications are highly attractive for deployment in serverless computing.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;However, deploying ML models to serverless environments has unique challenges with latency, cost, and performance. In this article, we will describe these problems and provide a solution that makes it possible to successfully deploy real-time ML models into the serverless architecture.&lt;/p&gt;】&lt;p dir =“ ltr”&gt;机器学习（ML）在实时应用中越来越重要，例如欺诈检测和个性化建议。由于其扩展能力和消除基础架构管理上的工作量，这些应用程序对于在无服务器计算中的部署方面具有很高的吸引力。 &lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;但是，将ML模型部署到无服务器环境中具有独特的挑战，其延迟，成本和性能。在本文中，我们将描述这些问题，并提供一个解决方案，可以成功将实时ML模型部署到无服务器体系结构中。&lt;/p&gt;</description>
      <pubDate>Tue, 12 Aug 2025 17:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Real-Time Recommendations Powered by Spanner, BigQuery, and Vector Embeddings】Real-Time Recommendations Powered by Spanner, BigQuery, and Vector Embeddings</title>
      <link>https://dzone.com/articles/real-time-recommendations-with-spanner-bigquery</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Product recommendation systems are an integral part of a wide range of industries like e-commerce, retail, media and entertainment, financial services, etc. Product recommendation is crucial for both providers and consumers as it improves the overall consumer experience and increases sales.&lt;/p&gt;&#xA;&lt;p&gt;Businesses collect and analyze a ton of consumer usage and behavior data to optimize their &amp;nbsp;recommendations for purchase and user satisfaction. They strive to deliver these recommendations as soon as possible with the most up-to-date insights. Delays in showing relevant recommendations can result in lost sales and a bad experience for the consumer.&lt;/p&gt;】&lt;p dir =“ ltr”&gt;产品推荐系统是电子商务，零售，媒体和娱乐，金融服务等广泛行业不可或缺的一部分。产品推荐对提供商和消费者都至关重要，因为它可以改善整体消费者体验并提高销售量。&lt;/p&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt;&#xA;&lt;p&gt;企业收集和分析大量的消费者使用和行为数据，以优化其购买和用户满意度的建议。他们努力通过最新的见解尽快提出这些建议。显示相关建议的延迟可能会导致销售损失和对消费者的不良经历。&lt;/p&gt;</description>
      <pubDate>Tue, 12 Aug 2025 18:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Scaling Playwright Test Automation: A Practical Framework Guide】Scaling Playwright Test Automation: A Practical Framework Guide</title>
      <link>https://dzone.com/articles/scaling-playwright-test-automation</link>
      <description>【&lt;p data-end=&#34;665&#34; data-start=&#34;356&#34;&gt;As web applications become increasingly dynamic and feature-rich, the complexity of ensuring their quality rises just as fast. Playwright has emerged as a powerful end-to-end testing tool, supporting modern browsers and offering capabilities like auto-waiting, multi-browser testing, and network interception.&lt;/p&gt;&#xA;&lt;p data-end=&#34;868&#34; data-start=&#34;667&#34;&gt;But writing isolated test cases is only a small part of successful automation. To support maintainability, collaboration, and long-term scalability, a structured test automation framework is essential.&lt;/p&gt;】&lt;p data-end =“ 665” data-start =“ 356”&gt;随着Web应用程序变得越来越动态且功能丰富，确保其质量的复杂性也同样快。剧作家已成为一种强大的端到端测试工具，支持现代浏览器和提供自动等待，多浏览器测试和网络拦截等功能。&lt;/p&gt;&#xA;&lt;p data-end =“ 868” data-start =“ 667”&gt;，但编写孤立的测试用例只是成功自动化的一小部分。为了支持可维护性，协作和长期可扩展性，结构化的测试自动化框架至关重要。&lt;/p&gt;</description>
      <pubDate>Tue, 12 Aug 2025 15:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>