<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Java Concurrency: Visibility and Synchronized】Java 并发：可见性和同步</title>
      <link>https://dzone.com/articles/java-concurrency-visibility-and-synchronized</link>
      <description>【&lt;p&gt;Previously, we examined the &lt;a href=&#34;https://dzone.com/articles/java-concurrency-the-happens-before-guarantee&#34;&gt;happens before&lt;/a&gt; guarantee in Java. This guarantee gives us confidence when we write multithreaded programs with regard to the re-ordering of statements that can happen. In this post, we shall focus on variable visibility between two threads and what happens when we change a variable that is shared.&lt;/p&gt;&#xA;&lt;h2&gt;Code Examination&lt;/h2&gt;&#xA;&lt;p&gt;Let’s examine the following code snippet:&lt;/p&gt;】&lt;p&gt;之前，我们检查了 Java 中的&lt;a href=&#34;https://dzone.com/articles/java-concurrency-the-happens-before-guarantee&#34;&gt;发生在&lt;/a&gt;之前的保证。当我们编写多线程程序时，这种保证使我们对可能发生的语句重新排序充满信心。在这篇文章中，我们将重点关注两个线程之间的变量可见性以及更改共享变量时会发生什么。&lt;/p&gt;&#xA;&lt;h2&gt;代码检查&lt;/h2&gt;&#xA;&lt;p&gt;让我们检查以下代码片段：&lt;/p&gt;</description>
      <pubDate>Wed, 28 Aug 2024 18:00:08 +0000</pubDate>
    </item>
    <item>
      <title>【Go: Unit and Integration Tests】Go：单元和集成测试</title>
      <link>https://dzone.com/articles/unit-and-integration-tests-in-go</link>
      <description>【&lt;h2&gt;Unit Tests&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/the-anatomy-of-good-unit-testing&#34;&gt;Unit testing&lt;/a&gt; is a fundamental part of software development that ensures individual components of your code work as expected. &lt;a href=&#34;https://dzone.com/articles/Exploring-Unit-Testing-in-Golang&#34;&gt;In Go, unit tests&lt;/a&gt; are straightforward to write and execute, making them an essential tool for maintaining code quality.&lt;/p&gt;&#xA;&lt;h3&gt;What Is a Unit Test?&lt;/h3&gt;&#xA;&lt;p&gt;A unit test is a small, focused test that validates the behavior of a single function or method. The goal is to ensure that the function works correctly in isolation, without depending on external systems like databases, file systems, or network connections. By isolating the function, you can quickly identify and fix bugs within a specific area of your code.&lt;/p&gt;】&lt;h2&gt;单元测试&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/the-anatomy-of-good-unit-testing&#34;&gt;单元测试&lt;/a&gt;是软件开发的基本组成部分，可确保您的各个组件代码按预期工作。 &lt;a href=&#34;https://dzone.com/articles/Exploring-Uni​​t-Testing-in-Golang&#34;&gt;在 Go 中，单元测试&lt;/a&gt;易于编写和执行，这使其成为维护代码的重要工具质量。&lt;/p&gt;&#xA;&lt;h3&gt;什么是单元测试？&lt;/h3&gt;&#xA;&lt;p&gt;单元测试是一种小型的、集中的测试，用于验证单个函数或方法的行为。目标是确保该功能独立正常工作，而不依赖于数据库、文件系统或网络连接等外部系统。通过隔离函数，您可以快速识别并修复代码特定区域内的错误。&lt;/p&gt;</description>
      <pubDate>Thu, 29 Aug 2024 12:30:06 +0000</pubDate>
    </item>
    <item>
      <title>【Utilizing Multiple Vectors and Advanced Search Data Model Design for City Data】利用多向量和高级搜索数据模型设计城市数据</title>
      <link>https://dzone.com/articles/multiple-vectors-and-advanced-search-data-model-design</link>
      <description>【&lt;div data-windowed-list-index=&#34;0&#34; tabindex=&#34;-1&#34;&gt;&#xA; &lt;div data-mime-type=&#34;text/markdown&#34;&gt;&#xA;  &lt;h2&gt;Goal of This Application&lt;a target=&#34;_self&#34; href=&#34;http://tspannmac:8881/lab/tree/multi2.ipynb#Goal-of-this-Application&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA; &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div data-windowed-list-index=&#34;1&#34; tabindex=&#34;-1&#34;&gt;&#xA; &lt;div data-mime-type=&#34;text/markdown&#34;&gt;&#xA;  &lt;p&gt;In this article, we will build an advanced data model and use it for ingestion and various search options. For the notebook portion, we will run a hybrid multi-vector search, re-rank the results, and display the resulting text and images.&lt;/p&gt;&#xA;  &lt;ol&gt;&#xA;   &lt;li&gt;&lt;strong&gt;Ingest data fields, enrich data with lookups, and format:&amp;nbsp;&lt;/strong&gt;&lt;a target=&#34;_self&#34; href=&#34;http://tspannmac:8881/lab/tree/multi2.ipynb#1%EF%B8%8F%E2%83%A3-Ingest-Data-Fields,-Enrich-Data-With-Lookups,-and-Format:&#34;&gt;&lt;/a&gt;Learn to &lt;a href=&#34;https://dzone.com/articles/data-ingestion-the-definitive-guide&#34;&gt;ingest data&lt;/a&gt; including JSON and images, format and transform to optimize hybrid searches. This is done inside the &lt;strong&gt;streetcams.py&lt;/strong&gt; application.&lt;/li&gt;&#xA;   &lt;li&gt;&lt;strong&gt;Store data into Milvus&lt;/strong&gt;: Learn to store data in Milvus, an efficient &lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-vector-databases&#34;&gt;vector database&lt;/a&gt; designed for high-speed similarity searches and AI applications. In this step, we are optimizing the data model with scalar and multiple vector fields — one for text and one for the camera image. We do this in the streetcams.py application.&lt;/li&gt;&#xA;   &lt;li&gt;&lt;strong&gt;Use open source models for data queries in a hybrid multi-modal, multi-vector search:&lt;/strong&gt; Discover how to use scalars and multiple vectors to query data stored in Milvus and re-rank the final results in this notebook.&lt;/li&gt;&#xA;   &lt;li&gt;&lt;strong&gt;Display resulting text and images:&amp;nbsp;&lt;/strong&gt;Build a quick output for validation and checking in this notebook.&lt;/li&gt;&#xA;   &lt;li&gt;&lt;strong&gt;Simple Retrieval-Augmented Generation (RAG) with LangChain&lt;/strong&gt;: Build a simple Python &lt;a href=&#34;https://milvus.io/docs/integrate_with_langchain.md&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;RAG&lt;/a&gt; application (streetcamrag.py) to use Milvus for asking about the current weather via &lt;a href=&#34;https://ollama.com/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Ollama&lt;/a&gt;. While outputing to the screen we also send the results to Slack formatted as Markdown.&lt;/li&gt;&#xA;  &lt;/ol&gt;&#xA;  &lt;h3&gt;Summary&lt;br&gt;&lt;a target=&#34;_self&#34; href=&#34;http://tspannmac:8881/lab/tree/multi2.ipynb#%F0%9F%94%8D-Summary&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&#xA;  &lt;p&gt;By the end of this application, you’ll have a comprehensive understanding of using Milvus, data ingest object semi-structured and unstructured data, and using open source models to build a robust and efficient data retrieval system. For future enhancements, we can use these results to build prompts for &lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-large-language-models&#34;&gt;LLM&lt;/a&gt;, Slack bots, streaming data to Apache Kafka, and as a Street Camera search engine.&lt;/p&gt;】&lt;div data-windowed-list-index=&#34;0&#34; tabindex=&#34;-1&#34;&gt;&#xA; &lt;div data-mime-type=&#34;text/markdown&#34;&gt;&#xA;  &lt;h2&gt;此应用程序的目标&lt;a target=&#34;_self&#34; href=&#34;http://tspannmac:8881/lab/tree/multi2.ipynb#Goal-of-this-Application&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA; &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div data-windowed-list-index=&#34;1&#34; tabindex=&#34;-1&#34;&gt;&#xA; &lt;div data-mime-type=&#34;text/markdown&#34;&gt;&#xA;  &lt;p&gt;在本文中，我们将构建一个高级数据模型并将其用于摄取和各种搜索选项。对于笔记本部分，我们将运行混合多向量搜索，对结果重新排名，并显示结果文本和图像。&lt;/p&gt;&#xA;  &lt;ol&gt;&#xA;   &lt;li&gt;&lt;strong&gt;提取数据字段、通过查找丰富数据并设置格式：&lt;/strong&gt;&lt;a target=&#34;_self&#34; href=&#34;http://tspannmac:8881/lab/tree/multi2.ipynb#1% EF%B8%8F%E2%83%A3-Ingest-Data-Fields,-Enrich-Data-With-Lookups,-and-Format:&#34;&gt;&lt;/a&gt;学习&lt;a href=&#34;https://dzone .com/articles/data-ingestion-the-definitive-guide&#34;&gt;提取数据&lt;/a&gt;，包括 JSON 和图像、格式和转换以优化混合搜索。这是在 &lt;strong&gt;streetcams.py&lt;/strong&gt; 应用程序内完成的。&lt;/li&gt;&#xA;   &lt;li&gt;&lt;strong&gt;将数据存储到 Milvus&lt;/strong&gt;：学习在 Milvus 中存储数据，这是一个高效的&lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-vector-databases&#34;&gt;矢量数据库&lt;/a&gt;专为高速相似性搜索和人工智能应用而设计。在此步骤中，我们将使用标量场和多个向量场优化数据模型 - 一个用于文本，一个用于相机图像。我们在 streetcams.py 应用程序中执行此操作。&lt;/li&gt;&#xA;   &lt;li&gt;&lt;strong&gt;使用开源模型在混合多模式、多向量搜索中进行数据查询：&lt;/strong&gt;了解如何使用标量和多个向量来查询 Milvus 中存储的数据并对最终结果重新排名在这个笔记本里。&lt;/li&gt;&#xA;   &lt;li&gt;&lt;strong&gt;显示生成的文本和图像：&lt;/strong&gt;构建快速输出，以便在此笔记本中进行验证和检查。&lt;/li&gt;&#xA;   &lt;li&gt;&lt;strong&gt;使用 LangChain 进行简单检索增强生成 (RAG)&lt;/strong&gt;：构建简单的 Python &lt;a href=&#34;https://milvus.io/docs/integrate_with_langchain.md&#34; rel=&#34;noopener&#34; 目标=&#34;_blank&#34;&gt;RAG&lt;/a&gt; 应用程序 (streetcamrag.py) 使用 Milvus 通过 &lt;a href=&#34;https://ollama.com/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank 询问当前天气”奥拉玛&lt;/a&gt;。在输出到屏幕的同时，我们还将结果以 Markdown 格式发送到 Slack。&lt;/li&gt;&#xA;  &lt;/ol&gt;&#xA;  &lt;h3&gt;摘要&lt;br&gt;&lt;a target=&#34;_self&#34; href=&#34;http://tspannmac:8881/lab/tree/multi2.ipynb#%F0%9F%94%8D-Summary&#34;&gt;&lt;/a&gt;&lt; /h3&gt;&#xA;  &lt;p&gt;完成本应用程序后，您将全面了解如何使用 Milvus、数据摄取对象半结构化和非结构化数据，以及使用开源模型构建强大而高效的数据检索系统。对于未来的增强功能，我们可以使用这些结果为 &lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-large-language-models&#34;&gt;LLM&lt;/a&gt;、Slack 机器人、将数据流式传输到 Apache Kafka，并作为街道摄像头搜索引擎。&lt;/p&gt;</description>
      <pubDate>Thu, 29 Aug 2024 14:00:11 +0000</pubDate>
    </item>
    <item>
      <title>【Achieving DevOps Harmony With Unified Log Monitoring for CI/CD】通过 CI/CD 的统一日志监控实现 DevOps 和谐</title>
      <link>https://dzone.com/articles/devops-harmony-with-unified-log-monitoring-for-cicd</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;In modern software development, DevOps methods have evolved into the pillar of dependable and effective product delivery. Two methods that particularly help automate and simplify the software release process are &lt;a href=&#34;https://dzone.com/articles/what-is-ci-cd&#34;&gt;continuous integration (CI) and continuous deployment (CD)&lt;/a&gt;. But as software systems get more complicated, so does the necessity for strong log monitoring systems that can unite and streamline log management at several CI/CD phases.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;This article explores the need for uniting log monitoring in DevOps, the associated difficulties, and approaches for achieving harmony in CI/CD processes.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;在现代软件开发中，DevOps 方法已发展成为可靠且有效的产品交付的支柱。特别有助于自动化和简化软件发布过程的两种方法是&lt;a href=&#34;https://dzone.com/articles/what-is-ci-cd&#34;&gt;持续集成 (CI) 和持续部署 (CD)&lt;/一个&gt;。但随着软件系统变得越来越复杂，强大的日志监控系统的必要性也随之增加，该系统可以在多个 CI/CD 阶段统一并简化日志管理。&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;本文探讨了在 DevOps 中统一日志监控的必要性、相关困难以及在 CI/CD 流程中实现和谐的方法。&lt;/p&gt;</description>
      <pubDate>Thu, 29 Aug 2024 18:30:05 +0000</pubDate>
    </item>
    <item>
      <title>【Advanced Techniques in Automated Threat Detection】自动威胁检测的先进技术</title>
      <link>https://dzone.com/articles/advanced-techniques-in-automated-threat-detection</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;In the fast-paced and constantly evolving digital landscape of today, bad actors are always looking for newer and better methods to launch their attacks. As cybercriminal tactics evolve, they develop more sophisticated malware, more convincing scams, and attacks that are designed specifically to evade known security measures.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;With this in mind, it is vital for organizations to invest in more advanced automated tools and solutions to go “from threat identification to eradication and remediation with as few humans in the loop as possible.” Taking advantage of emerging technologies and sophisticated measures can aid organizations in automating these processes to an extent and saving time, labor, and other resources that can run thin when relying solely on humans to handle threats.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;在当今快节奏且不断发展的数字环境中，不良行为者总是在寻找更新、更好的方法来发起攻击。随着网络犯罪策略的发展，他们开发出更复杂的恶意软件、更有说服力的骗局以及专门为逃避已知安全措施而设计的攻击。&lt;​​/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;考虑到这一点，组织投资更先进的自动化工具和解决方案至关重要，以“从威胁识别到消除和补救，并以尽可能少的人员参与”。利用新兴技术和复杂的措施可以帮助组织在一定程度上实现这些流程的自动化，并节省时间、劳动力和其他在仅依靠人类来处理威胁时可能会耗尽的资源。&lt;/p&gt;</description>
      <pubDate>Wed, 28 Aug 2024 16:00:06 +0000</pubDate>
    </item>
    <item>
      <title>【Team-as-Code: How to Apply Platform Engineering to DevOps’ Coding Stage】团队即代码：如何将平台工程应用到 DevOps 的编码阶段</title>
      <link>https://dzone.com/articles/team-as-code-how-to-apply-platform-engineering-to-devops-coding</link>
      <description>【&lt;h2 style=&#34;text-align: left;&#34;&gt;Why Apply a Platform Approach to the Coding Stage?&lt;/h2&gt;&#xA;&lt;p style=&#34;text-align: left;&#34;&gt;While both parts of the modern software development lifecycle, DevOps and platform engineering target distinct challenges.&lt;/p&gt;&#xA;&lt;p style=&#34;text-align: left;&#34;&gt;DevOps focuses on integration and continuous delivery (CI/CD) and teams track metrics such as code deployment frequency, lead time for changes, change failure rate, etc.&lt;/p&gt;】&lt;h2 style=&#34;text-align: left;&#34;&gt;为什么在编码阶段应用平台方法？&lt;/h2&gt;&#xA;&lt;p style=&#34;text-align: left;&#34;&gt;虽然现代软件开发生命周期的两个部分，DevOps 和平台工程都面临着不同的挑战。&lt;/p&gt;&#xA;&lt;p style=&#34;text-align: left;&#34;&gt;DevOps 专注于集成和持续交付 (CI/CD)，团队跟踪代码部署频率、变更交付时间、变更失败率等指标。&lt;/p&gt;</description>
      <pubDate>Thu, 29 Aug 2024 15:30:03 +0000</pubDate>
    </item>
    <item>
      <title>【High Fidelity Data: Balancing Privacy and Usage】高保真数据：平衡隐私和使用</title>
      <link>https://dzone.com/articles/high-fidelity-data-ensuring-privacy-and-usage</link>
      <description>【&lt;p&gt;The effective de-identification algorithms that balance data usage and privacy are critical. Industries like healthcare, finance, and advertising rely on accurate and secure data analysis. However, existing de-identification methods often compromise either the data usability or privacy protection and limit advanced applications like knowledge engineering and AI modeling.&lt;/p&gt;&#xA;&lt;p&gt;To address these challenges, we introduce High Fidelity (HiFi) data, a novel approach to meet the dual objectives of data usability and privacy protection. High-fidelity data maintains the original data&#39;s usability while ensuring compliance with stringent privacy regulations.&amp;nbsp;&lt;/p&gt;】&lt;p&gt;平衡数据使用和隐私的有效去识别算法至关重要。医疗保健、金融和广告等行业依赖于准确、安全的数据分析。然而，现有的去标识化方法往往会损害数据可用性或隐私保护，并限制知识工程和人工智能建模等高级应用。&lt;/p&gt;&#xA;&lt;p&gt;为了应对这些挑战，我们引入了高保真 (HiFi) 数据，这是一种满足数据可用性和隐私保护双重目标的新颖方法。高保真数据保持原始数据的可用性，同时确保遵守严格的隐私法规。 &lt;/p&gt;</description>
      <pubDate>Thu, 29 Aug 2024 20:00:06 +0000</pubDate>
    </item>
    <item>
      <title>【When (Not) to Write an Apache APISIX Plugin】何时（不）编写 Apache APISIX 插件</title>
      <link>https://dzone.com/articles/when-not-to-write-an-apache-apisix-plugin</link>
      <description>【&lt;p&gt;When I introduce Apache APISIX in my talks, I mention the &lt;a href=&#34;https://apisix.apache.org/plugins/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;massive number of existing plugins&lt;/a&gt;, and that each of them implements a specific feature. One of the key features of Apache APISIX is its flexibility. If a feature is missing, you can create your own plugin in Lua or a language compiled into Wasm, showcasing the platform&#39;s adaptability to your specific needs. In this post, I aim to provide practical alternatives to writing a custom plugin, offering solutions you can quickly implement in your projects.&lt;/p&gt;&#xA;&lt;h2&gt;Cons of Writing a Plugin&lt;/h2&gt;&#xA;&lt;p&gt;Before describing alternatives, let me explain the issues of writing a plugin.&lt;/p&gt;】&lt;p&gt;当我在演讲中介绍 Apache APISIX 时，我提到了&lt;a href=&#34;https://apisix.apache.org/plugins/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;大量现有插件&lt;/a&gt;，并且它们每个都实现一个特定的功能。 Apache APISIX 的关键特性之一是其灵活性。如果缺少某个功能，您可以使用 Lua 或编译成 Wasm 的语言创建自己的插件，展示该平台对您特定需求的适应性。在这篇文章中，我的目标是提供编写自定义插件的实用替代方案，提供可以在项目中快速实施的解决方案。&lt;/p&gt;&#xA;&lt;h2&gt;编写插件的缺点&lt;/h2&gt;&#xA;&lt;p&gt;在描述替代方案之前，让我解释一下编写插件的问题。&lt;/p&gt;</description>
      <pubDate>Thu, 29 Aug 2024 17:00:08 +0000</pubDate>
    </item>
    <item>
      <title>【How to Dockerize a React App With Vite: Step-by-Step Guide】如何使用 Vite 对 React 应用进行 Docker 化：分步指南</title>
      <link>https://dzone.com/articles/how-to-dockerize-a-react-app-with-vite</link>
      <description>【&lt;p&gt;In this article, I’ll show you how to Dockerize a React application built with Vite. We’ll go through:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA; &lt;li data-selectable-paragraph=&#34;&#34;&gt;Configuring Vite for Docker&lt;/li&gt;&#xA; &lt;li data-selectable-paragraph=&#34;&#34;&gt;Creating the Dockerfile&lt;/li&gt;&#xA; &lt;li data-selectable-paragraph=&#34;&#34;&gt;Creating the Docker Compose file&lt;/li&gt;&#xA; &lt;li data-selectable-paragraph=&#34;&#34;&gt;Building and running the Docker Container&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;By the end of this article, you’ll have a portable React app ready to deploy in any environment.&lt;/p&gt;】&lt;p&gt;在本文中，我将向您展示如何 Dockerize 使用 Vite 构建的 React 应用程序。我们将介绍：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA; &lt;li data-selectable-paragraph=&#34;&#34;&gt;为 Docker 配置 Vite&lt;/li&gt;&#xA; &lt;li data-selectable-paragraph=&#34;&#34;&gt;创建 Dockerfile&lt;/li&gt;&#xA; &lt;li data-selectable-paragraph=&#34;&#34;&gt;创建 Docker Compose 文件&lt;/li&gt;&#xA; &lt;li data-selectable-paragraph=&#34;&#34;&gt;构建并运行 Docker 容器&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;读完本文后，您将拥有一个可在任何环境中部署的便携式 React 应用。&lt;/p&gt;</description>
      <pubDate>Wed, 28 Aug 2024 17:00:08 +0000</pubDate>
    </item>
    <item>
      <title>【The Ultimate Guide To Evaluate RAG System Components: What You Need To Know】评估 RAG 系统组件的终极指南：您需要了解的内容</title>
      <link>https://dzone.com/articles/guide-to-evaluate-rag-system-components</link>
      <description>【&lt;p&gt;Retrieval-Augmented Generation (RAG)&lt;span&gt;&amp;nbsp;&lt;span class=&#34;sr-only&#34;&gt;(opens new window)&lt;/span&gt;&lt;/span&gt;systems have been designed to improve the response quality of a large language model (LLM). When a user submits a query, the RAG system extracts relevant information from a vector database and passes it to the LLM as context. The LLM then uses this context to generate a response for the user. This process significantly improves the quality of LLM responses with less “hallucination.”&lt;span&gt;&amp;nbsp;&lt;span class=&#34;sr-only&#34;&gt;(opens new win&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;div style=&#34;text-align:center;&#34;&gt;&#xA; &lt;img style=&#34;width: 808px;&#34; class=&#34;fr-fic fr-dib lazyload&#34; data-image=&#34;true&#34; data-new=&#34;false&#34; data-sizeformatted=&#34;159.1 kB&#34; data-mimetype=&#34;image/png&#34; data-creationdate=&#34;1724317571199&#34; data-creationdateformatted=&#34;08/22/2024 09:06 AM&#34; data-type=&#34;temp&#34; data-url=&#34;https://dz2cdn1.dzone.com/storage/temp/17868513-1724317570185.png&#34; data-modificationdate=&#34;null&#34; data-size=&#34;159110&#34; data-name=&#34;1724317570185.png&#34; data-id=&#34;17868513&#34; data-src=&#34;https://dz2cdn1.dzone.com/storage/temp/17868513-1724317570185.png&#34; alt=&#34;RAG system workflow&#34;&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;So, in the workflow above, there are two main components in a RAG system:&lt;/p&gt;】&lt;p&gt;检索增强生成 (RAG)&lt;span&gt; &lt;span class=&#34;sr-only&#34;&gt;（打开新窗口）&lt;/span&gt;&lt;/span&gt;系统旨在提高大型语言模型的响应质量（法学硕士）。当用户提交查询时，RAG 系统从向量数据库中提取相关信息并将其作为上下文传递给法学硕士。然后，LLM 使用此上下文为用户生成响应。此过程显着提高了 LLM 回复的质量，减少了“幻觉”。&lt;span&gt; &lt;span class=&#34;sr-only&#34;&gt;（打开新胜利&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;div style=&#34;text-align:center;&#34;&gt;&#xA; &lt;img 样式=“宽度：808px；” class =“fr-fic fr-dib lazyload”data-image =“true”data-new =“false”data-sizeformatted =“159.1 kB”data-mimetype =“image / png”data-creationdate =“1724317571199”数据-creationdateformatted=&#34;08/22/2024 09:06 AM&#34; data-type=&#34;temp&#34; data-url=&#34;https://dz2cdn1.dzone.com/storage/temp/17868513-1724317570185.png&#34; data-modificationdate= “null”data-size =“159110”data-name =“1724317570185.png”data-id =“17868513”data-src =“https://dz2cdn1.dzone.com/storage/temp/17868513-1724317570185.png” &#34; alt=&#34;RAG 系统工作流程&#34;&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;因此，在上面的工作流程中，RAG 系统中有两个主要组件：&lt;/p&gt;</description>
      <pubDate>Thu, 29 Aug 2024 11:00:09 +0000</pubDate>
    </item>
  </channel>
</rss>