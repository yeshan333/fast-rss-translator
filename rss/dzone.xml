<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【How to Build a Real API Gateway With Spring Cloud Gateway and Eureka】如何使用Spring Cloud Gateway和Eureka构建真正的API网关</title>
      <link>https://dzone.com/articles/how-to-build-a-real-api-gateway-with-spring-cloud</link>
      <description>【&lt;p&gt;API gateways are essential in a microservices architecture.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;But building one that&#39;s real-world-ready, secure, scalable, and service-aware will require more than just wiring a few annotations.&lt;/p&gt;】&lt;p&gt; API网关在微服务体系结构中至关重要。 &lt;/p&gt;&#xA;&lt;p&gt;但是，建立一个现实世界中的，安全，可扩展和服务意识的一个不仅仅需要一些注释。&lt;/p&gt; &lt;/p&gt;</description>
      <pubDate>Tue, 15 Jul 2025 15:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Advanced SSL Certificate Troubleshooting for Windows: Chain of Trust, Debugging, and Best Practices】窗口的高级SSL证书故障排除：信任链，调试和最佳实践</title>
      <link>https://dzone.com/articles/advanced-ssl-certificate-troubleshooting-windows</link>
      <description>【&lt;p&gt;SSL/TLS certificates are foundational to secure communications on the internet. However, Windows environments present unique challenges that go beyond basic certificate installation and troubleshooting.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;If you’re already familiar with SSL fundamentals, you’ll want to know how to handle complex certificate chain issues, trust store discrepancies, and advanced debugging scenarios. &lt;span style=&#34;margin: 0px; padding: 0px;&#34;&gt;&lt;span style=&#34;background-color:transparent;&#34;&gt;This article builds on the foundational knowledge discussed in my previously published article,&amp;nbsp;&lt;/span&gt;&lt;a href=&#34;https://hackernoon.com/troubleshooting-ssl-why-your-ssl-certificate-isnt-working-on-windows&#34; target=&#34;_blank&#34;&gt;Troubleshooting SSL: Why Your SSL Certificate Isn’t Working on Windows&lt;/a&gt;,&lt;span style=&#34;background-color:transparent;&#34;&gt;&amp;nbsp;and expands on the chain of trust concepts detailed in another article,&amp;nbsp;&lt;/span&gt;&lt;a href=&#34;https://medium.com/vmacwrites/chain-of-trust-decoding-ssl-certificate-security-architecture-2bde46655d37&#34; target=&#34;_blank&#34;&gt;Chain of Trust: Decoding SSL Certificate Security Architecture&lt;/a&gt;&lt;span style=&#34;background-color:transparent;&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;background-color: transparent;&#34;&gt;&amp;nbsp;Here, we dive deeper into enterprise-grade troubleshooting, real-world examples, and robust best practices for Windows administrators, developers, and security professionals.&lt;/span&gt;&lt;/p&gt;】&lt;p&gt; SSL/TLS证书是基本的，以确保在Internet上获得通信。但是，Windows环境提出了独特的挑战，这些挑战超出了基本证书安装和故障排除。 &lt;/p&gt;&#xA;&lt;p&gt;如果您已经熟悉SSL基本面，则需要知道如何处理复杂的证书链问题，信任商店差异和高级调试方案。 &lt;span style=&#34;margin: 0px; padding: 0px;&#34;&gt;&lt;span style=&#34;background-color:transparent;&#34;&gt;This article builds on the foundational knowledge discussed in my previously published article, &lt;/span&gt;&lt;a href=&#34;https://hackernoon.com/troubleshooting-ssl-why-your-ssl-certificate-isnt-working-on-windows&#34; target =“ _ blank”&gt;故障排除SSL：为什么您的SSL证书在Windows上不起作用&lt;/a&gt;，&lt;span style =“ background-color：transparent;”&gt; and在另一篇文章中详细介绍的信任链中扩展，&lt;/span&gt; &lt;a href=&#34;https://medium.com/vmacwrites/chain-of-trust-decoding-ssl-certificate-security-architecture-2bde46655d37&#34; target=&#34;_blank&#34;&gt;Chain of Trust: Decoding SSL Certificate Security Architecture&lt;/a&gt;&lt;span style=&#34;background-color:transparent;&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span style =“背景色：透明;”&gt;在这里，我们更深入地深入研究企业级故障排除，现实世界中的示例以及适用于Windows管理员，开发人员和安全专业人员的最佳实践。&lt;/span&gt; &lt;/span&gt; &lt;/p&gt;</description>
      <pubDate>Tue, 15 Jul 2025 13:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Memory Leak Due To Mutable Keys in Java Collections】由于Java集合中的可变钥匙而导致的内存泄漏</title>
      <link>https://dzone.com/articles/java-memory-leak-mutable-keys-collections</link>
      <description>【&lt;p&gt;Java Collections components (such as Map, List, Set) are widely used in our applications. When their keys are not properly handled, it will result in a memory leak. In this post, let’s discuss how incorrectly handled HashMap key results in OutOfMemoryError. We will also discuss how to diagnose such problems effectively and fix them.&lt;/p&gt;&#xA;&lt;h2&gt;HashMap Memory Leak&lt;/h2&gt;&#xA;&lt;p&gt;Below is a sample program that simulates a memory leak in a HashMap due to a mutated key:&lt;/p&gt;】&lt;p&gt; Java收集组件（例如MAP，LIST，SET）在我们的应用中广泛使用。当他们的键无法正确处理时，它将导致内存泄漏。在这篇文章中，让我们讨论如何在OutofMemoryError中进行错误处理的hashmap键结果。我们还将讨论如何有效诊断此类问题并解决这些问题。&lt;/p&gt;&#xA;&lt;H2&gt;哈希图内存泄漏&lt;/h2&gt;&#xA;&lt;p&gt;下面是一个示例程序，该程序模拟由于突变键而在哈希图中模拟内存泄漏：&lt;/p&gt;</description>
      <pubDate>Tue, 15 Jul 2025 11:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Dashboards Are Dead Weight Without Context: Why BI Needs More Than Visuals】仪表板是无背景的重量</title>
      <link>https://dzone.com/articles/build-bi-dashboards-that-get-used</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Every BI engineer has been there. You spend weeks crafting the perfect dashboard, KPIs are front and center, filters are flexible, and visuals are clean enough to present to the board. But months later, you discover that no one is actually using it. Not because it’s broken, but because it doesn’t drive action.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;This isn’t an isolated issue, it’s a systemic one. Somewhere between clean datasets and elegant dashboards, the *why* behind the data gets lost. &lt;a href=&#34;https://dzone.com/articles/business-intelligence-tools-amp-use-cases?fromrel=true&#34;&gt;Business Intelligence&lt;/a&gt;, in its current form, often stops at the surface: build reports, refresh data, and move on. But visuals aren’t enough. What matters is decision utility, the actual ability of a data asset to influence strategy, fix problems, or trigger workflows.&amp;nbsp;&lt;/p&gt;】&lt;p dir =“ ltr”&gt;每个BI工程师都在那里。您花了几周的时间来制作完美的仪表板，KPI是前部和中央，滤镜灵活的，并且视觉效果很干净，足以向板上呈现。但是几个月后，您发现没有人实际使用它。不是因为它被打破了，而是因为它不会驱动动作。&lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;这不是一个孤立的问题，而是系统性问题。在干净的数据集和优雅的仪表板之间的某个地方，数据背后的 *为什么被丢失。 &lt;a href =“ https://dzone.com/articles/business-intelligence-tools-amp-use-cases？fromrel = True”&gt;商业智能&lt;/a&gt;，以当前形式以当前形式停止：构建报告，构建报告，刷新数据，并继续前进。但是视觉效果还不够。重要的是决策实用程序，数据资产影响策略，解决问题或触发工作流的实际能力。 &lt;/p&gt;</description>
      <pubDate>Tue, 15 Jul 2025 18:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Migrating SQL Failover Clusters Without Downtime: A Practical Guide】迁移SQL故障转移集群没有停机时间：实用指南</title>
      <link>https://dzone.com/articles/migrating-sql-failover-clusters-without-downtime-a</link>
      <description>【&lt;p&gt;When your &lt;a href=&#34;https://dzone.com/articles/sql-server-from-zero-to-advanced-level&#34;&gt;SQL Server&lt;/a&gt; failover cluster is running on aging hardware or an older OS, migrating to something modern without breaking production can feel intimidating. I&#39;ve been there. Our team had to move a live SQL cluster to new servers running Windows Server 2022, backed by an HPE SAN, all while keeping the apps that depended on it happy and uninterrupted. Here&#39;s exactly how we pulled it off &amp;nbsp;and what we learned along the way.&lt;/p&gt;&#xA;&lt;p&gt;SQL downtime isn&#39;t just a minor disruption in many businesses, it&#39;s a full-on blocker. Reporting pipelines fail. ERP systems lock up. Even simple user-facing portals might end up in black hole. We couldn’t afford that kind of ripple effect, which is why this migration had to be seamless.&lt;/p&gt;】&lt;p&gt;当您的&lt;a href =“ https://dzone.com/articles/sql-server-server-from-zero-zero-to-advanced-level-level”&gt; sql Server &lt;/a&gt;故障转移群集正在运行在老化硬件或较旧的操作系统或较旧的操作系统上，不破坏现代生产而不破坏生产会感到令人恐惧。我去过那里。我们的团队不得不将实时SQL群集移至运行Windows Server 2022的新服务器，并由HPE SAN支持，同时使依赖它的应用程序保持快乐和不间断。这正是我们将其完成的方式以及我们在此过程中学到的知识。&lt;/p&gt;&#xA;&lt;p&gt; SQL停机时间不仅在许多企业中遭受轻微的破坏，而且是一个全面的阻止者。报告管道失败。 ERP系统锁定。即使是简单的面向用户的门户也可能最终进入黑洞。我们负担不起这种连锁反应，这就是为什么这种迁移必须无缝的原因。&lt;/p&gt;</description>
      <pubDate>Tue, 15 Jul 2025 17:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【The Architecture That Keeps Netflix and Slack Always Online】保持Netflix和Slack始终在线的架构</title>
      <link>https://dzone.com/articles/cell-based-architecture-scalable-resilient-cloud-design</link>
      <description>【&lt;h2 dir=&#34;ltr&#34;&gt;Takeaways&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA; &lt;li dir=&#34;ltr&#34;&gt;Cell-based architecture provides fault tolerance by breaking down the system into distinct, self-contained, independent cells that scale, perform function, and fail independently.&lt;/li&gt;&#xA; &lt;li dir=&#34;ltr&#34;&gt;These independent units minimize blast radius and allow for fast recovery, making them a best fit for high-availability setups where uptime is critical.&lt;/li&gt;&#xA; &lt;li dir=&#34;ltr&#34;&gt;Containers, and Docker specifically, facilitate standardized deployment and management of isolated cells across different environments and cloud zones.&lt;/li&gt;&#xA; &lt;li dir=&#34;ltr&#34;&gt;This style of architecture supports independent teams, faster deployment frequencies, and availability in many different domains of failures.&lt;/li&gt;&#xA; &lt;li dir=&#34;ltr&#34;&gt;The pattern does add system complexity, yet it creates more resilience in operations when routing, visibility, and rollbacks are well implemented.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;Introduction: Why Resilience Is Architectural&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;In the cloud infrastructure of the modern era, you cannot append resilience. It must be integrated into the very infrastructure of the system. When applications scale to tens of millions of users and across multiple world regions, the long-standing assumptions of high availability fail under the weight. Even with multi-AZ deployment, replication, and autoscaling, the systems will be brittle and prone to correlated failures.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;They are not just technical errors. They are system-wide failures that cascade through monolithic deployments, centralized control planes, and tightly coupled &lt;a href=&#34;https://dzone.com/articles/design-patterns-for-microservices&#34;&gt;microservices&lt;/a&gt;. A malfunctioning process in one region will cause a chain effect, flooding shared services, taking down dependency nodes, and blurring observability pipelines.&lt;/p&gt;】&lt;h2 dir =“ ltr”&gt;外卖&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA; &lt;li dir =“ ltr”&gt;基于单元的架构通过将系统分解为独立的独立，缩放，执行功能和失败的独特，独立的单元，从而提供容错。&lt;/li&gt;&#xA; &lt;li dir =“ ltr”&gt;这些独立的单元最小化爆炸半径并允许快速恢复，这使其最适合高可用性设置，而正常运行时间至关重要。&lt;/li&gt;&#xA; &lt;li dir =“ ltr”&gt;容器，并具体docker促进了在不同环境和云区域中孤立的单元的标准化部署和管理。&lt;/li&gt;&#xA; &lt;li dir =“ ltr”&gt;这种架构风格支持独立团队，更快的部署频率以及在许多不同的失败领域中的可用性。&lt;/li&gt;&#xA; &lt;li dir =“ ltr”&gt;该模式确实增加了系统的复杂性，但是在路由，可见性和回滚时，它在操作中产生了更多的弹性。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 dir =“ ltr”&gt;简介：为什么弹性是建筑&lt;/h2&gt;&#xA;&lt;p dir =“ ltr”&gt;在现代时代的云基础架构中，您无法附加弹性。它必须集成到系统的基础架构中。当应用程序扩展到数千万用户以及在多个世界区域的范围内时，长期以来，高可用性的假设失败了。即使进行多AZ部署，复制和自动化，系统也将很脆弱，容易与失败相关。&lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;它们不仅是技术错误。它们是整体部署，集中控制平面并紧密耦合&lt;a href =“ https://dzone.com/articles/design-patterns-patterns-for-microservices”&gt; Microservices &lt;/a&gt;的级联故障。一个区域中的故障过程将导致链条效应，洪水共享服务，删除依赖性节点和模糊可观察性管道。&lt;/p&gt;</description>
      <pubDate>Tue, 15 Jul 2025 14:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Analysis of the Data Processing Framework of Pandas and Snowpark Pandas API】熊猫和雪板熊猫API的数据处理框架的分析</title>
      <link>https://dzone.com/articles/pandas-vs-snowpark-pandas-api-data-processing</link>
      <description>【&lt;p&gt;This article explains the process of how to migrate existing Pandas Workflows to Snowpark Pandas API, allowing for efficient scaling up of data processing needs without needing a full code rewrite. It is a pretty much lift and shift approach to have the data processing workflows up and running in minimal time and in a highly secure environment.&lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA; &lt;li&gt;Expertise in Python Scripting of versions 3.8 and up&lt;/li&gt;&#xA; &lt;li&gt;Knowledge of basic and complex SQL for scripting&lt;/li&gt;&#xA; &lt;li&gt;Snowflake Account&lt;/li&gt;&#xA; &lt;li&gt;Snowflake Warehouse Usage permissions&lt;/li&gt;&#xA; &lt;li&gt;AWS S3/Cloud External Stage and Access Integration&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/pandas-dataframe-functions&#34;&gt;Pandas&lt;/a&gt; has been the go-to library for data manipulation and analysis. As datasets grow in volume and variety, the traditional Pandas can have implications with memory limitations and performance bottlenecks. &lt;strong&gt;Snowpark Pandas API&amp;nbsp;&lt;/strong&gt;— a promising tool that brings the power of distributed computing to the Pandas API, within the secure environment of Snowflake.&lt;/p&gt;】&lt;p&gt;本文解释了如何将现有的熊猫工作流迁移到Snowpark Pandas API的过程，从而可以有效地扩展数据处理需求，而无需完整的代码重写。这几乎是一种提升和转移方法，可以使数据处理工作流程在最少的时间和高度安全的环境中运行。&lt;/p&gt; &lt;/p&gt;&#xA;&lt;h2&gt; &lt;strong&gt;先决条件&lt;/strong&gt; &lt;/h2&gt;&#xA;&lt;ol&gt;&#xA; &lt;li&gt; Python脚本的专业知识3.8和UP &lt;/li&gt;&#xA; &lt;li&gt;脚本的基本和复杂SQL的知识&lt;/li&gt;&#xA; &lt;li&gt;雪花帐户&lt;/li&gt;&#xA; &lt;li&gt;雪花仓库使用权限&lt;/li&gt;&#xA; &lt;li&gt; AWS S3/云外部阶段和访问集成&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2&gt; &lt;strong&gt;简介&lt;/strong&gt; &lt;/h2&gt;&#xA;&lt;p&gt; &lt;a href =“ https://dzone.com/articles/pandas-dataframe-functions”&gt; pandas &lt;/a&gt;一直是用于数据操作和分析的首选库。随着数据集的数量和多样性的增长，传统的熊猫可能会影响记忆限制和性能瓶颈。 &lt;strong&gt; Snowpark Pandas Api &lt;/strong&gt;  - 一种有前途的工具，它将分布式计算的力量带到了雪花的安全环境中。&lt;/p&gt;</description>
      <pubDate>Tue, 15 Jul 2025 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Decoding Database Speed: Essential Server Resources and Their Impact】解码数据库速度：基本服务器资源及其影响</title>
      <link>https://dzone.com/articles/decoding-database-speed-essential-server-resources</link>
      <description>【&lt;p&gt;This article examines the critical server resources, including CPU, storage, throughput, &lt;a href=&#34;https://dzone.com/articles/block-size-and-its-impact-on-storage-performance&#34;&gt;IOPS&lt;/a&gt;, memory, disk queue depth, latency, and disk swapping, that collectively impact database performance. Using a &#34;restaurant kitchen&#34; analogy, it demystifies how each component contributes to data processing efficiency. The piece explains the consequences of resource bottlenecks. It offers practical tuning strategies, from query optimization and hardware upgrades to proper memory management and &lt;a href=&#34;https://dzone.com/articles/optimization-of-io-workloads-by-profiling-in-pytho&#34;&gt;I/O best practices&lt;/a&gt;, emphasizing the importance of continuous monitoring for optimal database health.&lt;/p&gt;Introduction&lt;/h3&gt;&#xA;&lt;p&gt;Databases are the silent workhorses powering everything from online shopping to critical business operations. Just like a high-performance car needs a finely tuned engine, a production database server relies on a delicate balance of computing resources to deliver optimal speed and reliability. When these resources are mismanaged or insufficient, the entire system can grind to a halt, leading to frustrated users and lost revenue. This article will delve into the core resources that impact database performance, including CPU, storage, storage throughput, IOPS, memory, disk queue depth, read/write IOPS, read/write latency, and disk swapping. It will explain their roles, how they affect database operations, and provide practical strategies for tuning them.&lt;/p&gt;】&lt;p&gt;本文研究了关键服务器资源，包括CPU，存储，吞吐量，&lt;a href =“ https://dzone.com/articles/block-size-size-size-size-size-ismact-inpact-on-storage-performance”&gt; iops &lt;/a&gt;，内存，磁盘排队排队深度，延迟，延迟以及磁盘交换了集体影响的数据持续效果，该表演效果。使用“餐厅厨房”的类比，它揭示了每个组件如何促进数据处理效率。该文章解释了资源瓶颈的后果。它提供了实用的调整策略，从查询优化和硬件升级到正确的内存管理和&lt;a href =“ https://dzone.com/articles/optimization-optimization-opio-io-workloads-by-by-profiling-in-pytho---i&gt; i/o最佳实践&lt;/a&gt; &lt;/a&gt; &lt;/a&gt; &lt;/a&gt; &lt;/a&gt; &lt;/a&gt; &lt;/a&gt; &lt;/a&gt; &lt;/a&gt; &lt;/a&gt; &lt;/oftir &lt;/a&gt;&#xA;&lt;p&gt;数据库是无声的主持人，从在线购物到关键业务运营的所有功能。就像高性能汽车需要精心调整的引擎一样，生产数据库服务器依赖于计算资源的微妙平衡来提供最佳的速度和可靠性。当这些资源管理不善或不足时，整个系统可能会陷入停顿，导致沮丧的用户并失去收入。本文将深入研究影响数据库性能的核心资源，包括CPU，存储，存储吞吐量，IOPS，内存，磁盘队列深度，读/写IOPS，读/写延迟和磁盘交换。它将解释他们的角色，如何影响数据库操作，并提供对其进行调整的实用策略。&lt;/p&gt;</description>
      <pubDate>Tue, 15 Jul 2025 19:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Securing Software Delivery: Zero Trust CI/CD Patterns for Modern Pipelines】确保软件交付：现代管道的零信任CI/CD模式</title>
      <link>https://dzone.com/articles/zero-trust-ci-cd-secure-pipelines</link>
      <description>【&lt;p data-end=&#34;713&#34; data-start=&#34;467&#34;&gt;Modern CI/CD pipelines are essential for rapid and reliable software delivery. But as pipelines automate more stages of the development lifecycle—from code validation to production deployment—they have also become a major target for exploitation.&lt;/p&gt;&#xA;&lt;p data-end=&#34;1053&#34; data-start=&#34;715&#34;&gt;Traditional pipelines often operate on broad trust: long-lived credentials, shared secrets, unverified execution environments, and permissive access controls. These assumptions introduce significant risks in today’s cloud-native infrastructure, where build agents may be ephemeral, distributed across regions, and provisioned dynamically.&lt;/p&gt;】&lt;p data-end =“ 713” data-start =“ 467”&gt;现代CI/CD管道对于快速可靠的软件交付至关重要。但是，随着管道自动化开发生命周期的更多阶段（从代码验证到生产部署），它们也已成为剥削的主要目标。&lt;/p&gt;&#xA;&lt;p data-end =“ 1053” data-start =“ 715”&gt;传统管道通常以广泛的信任运行：长期寿命的凭据，共享的秘密，未验证的执行环境和宽松的访问控制。这些假设在当今的云本地基础架构中引入了重大风险，在当今的基础架构中，建造代理可能是短暂的，分布在各个地区，并动态提供。&lt;/p&gt; &lt;/p&gt;</description>
      <pubDate>Tue, 15 Jul 2025 20:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【API Standards Are Data Standards】API标准是数据标准</title>
      <link>https://dzone.com/articles/api-standards-are-data-standards</link>
      <description>【&lt;p&gt;Aside from those who have ignored technology trends for the last twenty years, everyone else is aware of — and likely working with — service-based architectures, whether micro, domain-driven, modulith, integration, data, or something else. From service-based, we’ve evolved to API-First, where APIs are first-class deliverables around which all solutions are built: front-end, back-end, mobile, external integrations, whatever. The APIs are intended to be implemented before other development work starts, even if the initial implementation is stubbed out, dummy code that allows other work to begin. API-First revolves around the contract.&lt;/p&gt;&#xA;&lt;figure&gt;&#xA; &lt;figure&gt;&#xA;  &lt;div tabindex=&#34;0&#34;&gt;&#xA;   &lt;span class=&#34;fr-img-caption fr-fic fr-dib&#34; style=&#34;width: 700px;&#34;&gt;&lt;span class=&#34;fr-img-wrap&#34;&gt;&lt;img alt=&#34;“Amelia in Code” by donnierayjones is licensed under CC BY 2.0.&#34; height=&#34;469&#34; data-image=&#34;true&#34; data-new=&#34;false&#34; data-sizeformatted=&#34;648.2 kB&#34; data-mimetype=&#34;image/png&#34; data-creationdate=&#34;1751919636293&#34; data-creationdateformatted=&#34;07/07/2025 08:20 PM&#34; data-type=&#34;temp&#34; data-url=&#34;https://dz2cdn1.dzone.com/storage/temp/18511562-1751919635749.png&#34; data-modificationdate=&#34;null&#34; data-size=&#34;648209&#34; data-name=&#34;1751919635749.png&#34; data-id=&#34;18511562&#34; data-src=&#34;https://dz2cdn1.dzone.com/storage/temp/18511562-1751919635749.png&#34; class=&#34;lazyload&#34;&gt;&#xA;     &lt;figcaption class=&#34;fr-inner&#34;&gt;&#xA;      &lt;figcaption data-selectable-paragraph=&#34;&#34;&gt;&#xA;       &lt;em&gt;“Amelia in Code” by donnierayjones is licensed under CC BY 2.0.&lt;/em&gt;&#xA;      &lt;/figcaption&gt;&#xA;     &lt;/figcaption&gt;&lt;/span&gt;&lt;/span&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;p&gt;&lt;br&gt;&lt;/p&gt;】&lt;p&gt;除了那些在过去二十年中忽略技术趋势的人外，其他所有人都知道并可能与基于服务的建筑（无论是微型，域驱动，模量，模量，集成，数据，数据还是其他东西）都知道并使用。从基于服务的情况下，我们已经发展到API-First，API是一流的可交付成果，所有解决方案都围绕着所有解决方案：前端，后端，移动，移动，外部集成等。 API旨在在其他开发工作开始之前实施，即使初始实施是固定的，允许其他工作开始的虚拟代码。 API优先围绕合同。&lt;/p&gt;&#xA;&lt;figud&gt;&#xA; &lt;figud&gt;&#xA;  &lt;div tabindex =“ 0”&gt;&#xA;   &lt;span class =“ fr-img-caption fr-fic fr-dib” style =“ width：700px;”&gt; &lt;span class =“ fr-img-wrap”&gt; &lt;img alt = &lt;img alt =“ donnierayjones in Code”中的Amelia在CC下获得了2.0的许可。” height=&#34;469&#34; data-image=&#34;true&#34; data-new=&#34;false&#34; data-sizeformatted=&#34;648.2 kB&#34; data-mimetype=&#34;image/png&#34; data-creationdate=&#34;1751919636293&#34; data-creationdateformatted=&#34;07/07/2025 08:20 PM&#34; data-type=&#34;temp&#34; data-url=&#34;https://dz2cdn1.dzone.com/storage/temp/18511562-1751919635749.png&#34; data-modificationdate=&#34;null&#34; data-size=&#34;648209&#34; data-name=&#34;1751919635749.png&#34; data-id=&#34;18511562&#34; data-src =“ https://dz2cdn1.dzone.com/storage/temp/18511562-1751919635749.png” class =“ lazyload”&gt;&#xA;     &lt;figcaption class =“ fr-inner”&gt;&#xA;      &lt;figcaption数据选择 - 段落=“”&gt;&#xA;       &lt;em&gt; Donnierayjones的“代码中的Amelia”已获得CC的许可。&lt;/em&gt;&#xA;      &lt;/figcaption&gt;&#xA;     &lt;/figcaption&gt; &lt;/span&gt; &lt;/span&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;p&gt; &lt;br&gt; &lt;/p&gt;</description>
      <pubDate>Tue, 15 Jul 2025 12:00:06 +0000</pubDate>
    </item>
  </channel>
</rss>