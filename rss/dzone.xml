<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Building a Sample Kubernetes Operator on Minikube: A Step-by-Step Guide】在 Minikube 上构建示例 Kubernetes Operator：分步指南</title>
      <link>https://dzone.com/articles/building-sample-kubernetes-operator-minikube</link>
      <description>【&lt;p&gt;Operators are a powerful way to extend Kubernetes functionality by acting as custom controllers. They leverage the Kubernetes control loop to manage application lifecycles using declarative custom resources. In this guide, we’ll create a simple “Hello” Operator with the Operator SDK, deploy it on Minikube, and see it in action.&lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Before we begin, make sure you have the following installed and set up on your machine:&lt;/p&gt;】&lt;p&gt;操作员是通过充当自定义控制器来扩展 Kubernetes 功能的强大方法。他们利用 Kubernetes 控制循环使用声明性自定义资源来管理应用程序生命周期。在本指南中，我们将使用 Operator SDK 创建一个简单的“Hello”Operator，将其部署在 Minikube 上，并查看它的实际效果。&lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;先决条件&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;在开始之前，请确保您的计算机上已安装并设置以下软件：&lt;/p&gt;</description>
      <pubDate>Fri, 10 Jan 2025 13:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Optimizing SQL Server Performance With AI: Automating Query Optimization and Predictive Maintenance】利用 AI 优化 SQL Server 性能：自动化查询优化和预测维护</title>
      <link>https://dzone.com/articles/automate-query-optimization-predictive-maintenance</link>
      <description>【&lt;p&gt;SQL Server is a powerful relational database management system (RDBMS), but as datasets grow in size and complexity, optimizing their performance becomes critical. Leveraging AI can revolutionize query optimization and predictive maintenance, ensuring the database remains efficient, secure, and responsive.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;In this article, we will explore how AI can assist in these areas, providing code examples to tackle complex queries.&lt;/p&gt;】&lt;p&gt;SQL Server 是一个功能强大的关系数据库管理系统 (RDBMS)，但随着数据集规模和复杂性的增长，优化其性能变得至关重要。利用人工智能可以彻底改变查询优化和预测性维护，确保数据库保持高效、安全和响应能力。 &lt;/p&gt;&#xA;&lt;p&gt;在本文中，我们将探讨人工智能如何在这些领域提供帮助，并提供代码示例来解决复杂的查询。&lt;/p&gt;</description>
      <pubDate>Fri, 10 Jan 2025 09:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Mastering macOS Client-Server Application Testing: Tools and Key Differences】掌握 macOS 客户端-服务器应用程序测试：工具和主要区别</title>
      <link>https://dzone.com/articles/macos-client-server-application-testing</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;From the diversity in Apple’s hardware to its tightly controlled software environment, testing on macOS requires careful planning and execution. The quality of the application should be ensured at maximum, considering peculiarities that may be brought in with Apple’s ecosystem.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;Let’s explore some essential tools and workflows for macOS client-server application testing, with a key focus on how to balance the manual and automated strategies of testing, manage testing across different versions of macOS, and leverage automation for efficiency.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;从 Apple 硬件的多样性到严格控制的软件环境，macOS 上的测试需要仔细的规划和执行。考虑到苹果生态系统可能带来的特殊性，应最大限度地保证应用程序的质量。 &lt;/p&gt;&#xA;&lt;p&gt;让我们探索 macOS 客户端-服务器应用程序测试的一些基本工具和工作流程，重点关注如何平衡手动和自动测试策略、跨不同版本的 macOS 管理测试以及利用自动化提高效率。&lt;/ p&gt;</description>
      <pubDate>Fri, 10 Jan 2025 17:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Should Programmers Solve Business Problems?】程序员应该解决业务问题吗？</title>
      <link>https://dzone.com/articles/should-programmers-solve-business-problems</link>
      <description>【&lt;p&gt;I recently came across an article arguing that programmers shouldn&#39;t be involved in solving business problems, claiming it&#39;s a harmful myth perpetuated by the industry. The author believes that focusing on business needs corrupts the pure technical nature of programming. I strongly disagree with this perspective, and here&#39;s my response based on my experience as a web developer.&lt;/p&gt;&#xA;&lt;h2&gt;Developer Levels&lt;/h2&gt;&#xA;&lt;p&gt;Let&#39;s start with developer levels. Unfortunately, the three well-known grades (Junior, Middle, and Senior) lack clear definitions. Every person and company defines requirements individually, with blurred boundaries that sometimes take unexpected turns. So, first, let me explain how I understand these concepts.&lt;/p&gt;】&lt;p&gt;我最近看到一篇文章，认为程序员不应该参与解决业务问题，并声称这是该行业长期存在的有害神话。作者认为，专注于业务需求破坏了编程的纯粹技术本质。我强烈不同意这种观点，这是我根据我作为 Web 开发人员的经验做出的回应。&lt;/p&gt;&#xA;&lt;h2&gt;开发者级别&lt;/h2&gt;&#xA;&lt;p&gt;让我们从开发人员级别开始。不幸的是，三个著名的等级（初级、中级和高级）缺乏明确的定义。每个人和公司都单独定义需求，边界模糊，有时会出现意想不到的变化。因此，首先让我解释一下我是如何理解这些概念的。&lt;/p&gt;</description>
      <pubDate>Fri, 10 Jan 2025 15:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Maximizing AI Agents for Seamless DevOps and Cloud Success】最大化 AI 代理以实现无缝 DevOps 和云成功</title>
      <link>https://dzone.com/articles/maximizing-ai-agents-for-seamless-devops-and-cloud</link>
      <description>【&lt;p&gt;The fast growth of artificial intelligence (AI) has created new opportunities for businesses to improve and be more creative. A key development in this area is &lt;strong&gt;intelligent agents&lt;/strong&gt;. These agents are becoming critical in transforming DevOps and cloud delivery processes. They are designed to complete specific tasks and reach specific goals. This changes how systems work in today&#39;s dynamic tech environments.&lt;/p&gt;&#xA;&lt;p&gt;By using &lt;a href=&#34;https://github.blog/ai-and-ml/generative-ai/what-are-ai-agents-and-why-do-they-matter/&#34; target=&#34;_blank&#34;&gt;generative AI agents&lt;/a&gt;, organizations can get real-time insights and automate their processes. This helps them depend less on manual work and be more efficient and scalable. These agents are not just simple tools — they are &lt;strong&gt;flexible systems&lt;/strong&gt; that can make informed decisions by using the data they collect and their knowledge base. As a result, they provide great value, by optimizing how resources are used, lowering the risk of errors, and boosting overall productivity.&lt;/p&gt;】&lt;p&gt;人工智能 (AI) 的快速发展为企业改进和提高创造力创造了新的机会。该领域的一个关键发展是&lt;strong&gt;智能代理&lt;/strong&gt;。这些代理对于转变 DevOps 和云交付流程变得至关重要。它们旨在完成特定任务并实现特定目标。这改变了系统在当今动态技术环境中的工作方式。&lt;/p&gt;&#xA;&lt;p&gt;通过使用&lt;a href=&#34;https://github.blog/ai-and-ml/generative-ai/what-are-ai-agents-and-why-do-they-matter/&#34; target=&#34; _blank&#34;&gt;生成式人工智能代理&lt;/a&gt;，组织可以获取实时洞察并自动化其流程。这有助于他们减少对手动工作的依赖，并提高效率和可扩展性。这些代理不仅仅是简单的工具 - 它们是&lt;strong&gt;灵活的系统&lt;/strong&gt;，可以通过使用它们收集的数据和知识库做出明智的决策。因此，它们通过优化资源的使用方式、降低错误风险并提高整体生产力来提供巨大的价值。&lt;/p&gt;</description>
      <pubDate>Thu, 09 Jan 2025 21:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Revolutionizing Catalog Management for Data Lakehouse With Polaris Catalog】使用 Polaris Catalog 彻底改变 Data Lakehouse 的目录管理</title>
      <link>https://dzone.com/articles/catalog-management-data-lakehouse-polaris</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;The data engineering landscape is evolving at a rapid pace, like many other areas of the software industry. While much of the spotlight is currently on AI/ML advancements, fueled by breakthroughs in large language models (LLMs) and generative AI, data engineering remains a foundational force driving innovation in software development.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Polaris, a catalog implementation tool for &lt;a href=&#34;https://dzone.com/articles/a-new-era-of-data-analytics-exploring-the-innovati&#34;&gt;data lakehouse&lt;/a&gt;, is among the latest advancements in this field, accelerating progress in interoperability and enabling zero-data-copy architecture. At the recently concluded Snowflake Build conference in November 2024, Polaris Catalog was among the most talked about topics, along with Iceberg and AI/ML.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;与软件行业的许多其他领域一样，数据工程领域正在快速发展。虽然目前大部分注意力都集中在人工智能/机器学习的进步上，但在大语言模型 (LLM) 和生成式人工智能的突破的推动下，数据工程仍然是推动软件开发创新的基本力量。 &lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Polaris，&lt;a href=&#34;https://dzone.com/articles/a-new-era-of-data-analytics-exploring-the-innovati&#34;&gt;数据的目录实施工具Lakehouse&lt;/a&gt; 是该领域的最新进展之一，加速了互操作性的进步并实现了零数据复制架构。在 2024 年 11 月最近结束的 Snowflake Build 会议上，Polaris Catalog 与 Iceberg 和 AI/ML 一样是最受关注的话题之一。&lt;/p&gt;</description>
      <pubDate>Fri, 10 Jan 2025 11:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Top 5 Books to Enhance Your Software Design Skills in 2025】2025 年增强软件设计技能的 5 本书</title>
      <link>https://dzone.com/articles/top-5-books-to-enhance-your-software-design-skills</link>
      <description>【&lt;p data-pm-slice=&#34;1 1 []&#34;&gt;Welcome to 2025! A new year is the perfect time to learn new skills or refine existing ones, and for software developers, staying ahead means continuously improving your craft. Software design is not just a cornerstone of creating robust, maintainable, and scalable applications but also vital for your career growth.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p data-pm-slice=&#34;1 1 []&#34;&gt;Mastering &lt;a href=&#34;https://dzone.com/articles/the-seven-virtues-of-a-good-design&#34;&gt;software design&lt;/a&gt; helps you write code that solves real-world problems effectively, improves collaboration with teammates, and showcases your ability to handle complex systems — a skill highly valued by employers and clients alike.&lt;/p&gt;】&lt;p data-pm-slice=&#34;1 1 []&#34;&gt;欢迎来到 2025 年！新的一年是学习新技能或完善现有技能的最佳时机，对于软件开发人员来说，保持领先意味着不断提高自己的技术。软件设计不仅是创建健壮、可维护和可扩展的应用程序的基石，而且对您的职业发展也至关重要。 &lt;/p&gt;&#xA;&lt;p data-pm-slice=&#34;1 1 []&#34;&gt;掌握&lt;a href=&#34;https://dzone.com/articles/the-seven-virtues-of-a-good-design&#34;&gt;软件设计&lt;/ a&gt; 帮助您编写有效解决现实世界问题的代码，改善与队友的协作，并展示您处理复杂系统的能力 - 这是雇主和客户都高度重视的技能。&lt;/p&gt;</description>
      <pubDate>Fri, 10 Jan 2025 07:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Metaprogramming With Proxies and Reflect in JavaScript】使用代理进行元编程并在 JavaScript 中进行反射</title>
      <link>https://dzone.com/articles/metaprogramming-proxies-reflect-javascript</link>
      <description>【&lt;p&gt;Metaprogramming is a powerful programming paradigm that allows code to dynamically manipulate its behavior at runtime. JavaScript, with the introduction of &lt;strong&gt;Proxies&lt;/strong&gt; and the &lt;strong&gt;Reflect&lt;/strong&gt; API in ES6, has taken metaprogramming capabilities to a new level, enabling developers to intercept and redefine core object operations like property access, assignment, and function invocation.&lt;/p&gt;&#xA;&lt;p&gt;This blog post dives deep into these advanced JavaScript features, explaining their syntax, use cases, and how they work together to empower dynamic programming.&lt;/p&gt;】&lt;p&gt;元编程是一种强大的编程范例，允许代码在运行时动态地操纵其行为。 JavaScript 通过在 ES6 中引入 &lt;strong&gt;Proxies&lt;/strong&gt; 和 &lt;strong&gt;Reflect&lt;/strong&gt; API，将元编程功能提升到了一个新的水平，使开发人员能够拦截和重新定义核心对象操作，例如属性访问、赋值和函数调用。&lt;/p&gt;&#xA;&lt;p&gt;这篇博文深入探讨了这些高级 JavaScript 功能，解释了它们的语法、用例以及它们如何协同工作以支持动态编程。&lt;/p&gt;</description>
      <pubDate>Fri, 10 Jan 2025 19:00:01 +0000</pubDate>
    </item>
    <item>
      <title>【Quantum Machine Learning for Large-Scale Data-Intensive Applications】适用于大规模数据密集型应用的量子机器学习</title>
      <link>https://dzone.com/articles/quantum-ml-for-large-scale-data-intensive-apps</link>
      <description>【&lt;p&gt;The convergence of quantum computing and machine learning offers a promising pathway for tackling large-scale, data-intensive challenges across various domains. This article examines how quantum machine learning (QML) can harness the principles of quantum mechanics to achieve significant computational advantages over classical approaches.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;By employing quantum algorithms such as Grover&#39;s search, quantum annealing, and quantum principal component analysis, the study explores the potential of QML to accelerate tasks like data clustering, optimization, and dimensionality reduction. The paper further investigates the integration of quantum and classical techniques, highlighting how hybrid quantum-classical models can address the limitations of current quantum hardware in the Noisy Intermediate-Scale Quantum (NISQ) era. Emphasizing the potential of QML to revolutionize fields that demand high data processing power, such as finance, genomics, and artificial intelligence, this work provides a comprehensive analysis of the advancements, challenges, and future prospects of leveraging quantum computing in machine learning applications.&lt;/p&gt;】&lt;p&gt;量子计算和机器学习的融合为解决各个领域的大规模数据密集型挑战提供了一条有前途的途径。本文探讨了量子机器学习 (QML) 如何利用量子力学原理来实现相对于经典方法的显着计算优势。 &lt;/p&gt;&#xA;&lt;p&gt;通过采用 Grover 搜索、量子退火和量子主成分分析等量子算法，该研究探索了 QML 加速数据聚类、优化和降维等任务的潜力。该论文进一步研究了量子和经典技术的集成，强调混合量子经典模型如何解决嘈杂中尺度量子（NISQ）时代当前量子硬件的局限性。这项工作强调了 QML 彻底改变需要高数据处理能力的领域（例如金融、基因组学和人工智能）的潜力，对在机器学习应用中利用量子计算的进展、挑战和未来前景进行了全面分析。&lt; /p&gt;</description>
      <pubDate>Thu, 09 Jan 2025 19:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Low-Maintenance Backend Architectures for Scalable Applications】适用于可扩展应用程序的低维护后端架构</title>
      <link>https://dzone.com/articles/low-maintenance-backend-architectures</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;After years of working in the intricate world of software engineering, I learned that the most beautiful solutions are often those unseen: backends that hum along, scaling with grace and requiring very little attention. My own journey of redesigning numerous systems and optimizing their performance has taught me time and again that creating a truly low-maintenance backend is an art that goes far beyond simple technical implementation.&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;The Evolution of Back-End Complexity&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Until recently, &lt;a href=&#34;https://dzone.com/articles/the-invisible-artistry-of-backend-development&#34;&gt;back-end architectures&lt;/a&gt; were relatively straightforward: monolithic applications ruled the landscape, with everything neatly contained within a single codebase. Developers could understand and manage the entire system’s intricacies. But as digital transformation accelerated, the demands on back-end systems became increasingly sophisticated. Cloud-native environments, microservices, real-time data processing, and global user bases transformed back-end architecture from a simple technical challenge into a strategic business capability.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;在复杂的软件工程领域工作多年后，我了解到最美丽的解决方案往往是那些看不见的：后端嗡嗡作响，优雅地扩展并且不需要太多关注。我自己重新设计众多系统并优化其性能的经历一次又一次地告诉我，创建真正的低维护后端是一门艺术，远远超出了简单的技术实现。&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;后端复杂性的演变&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;直到最近，&lt;a href=&#34;https://dzone.com/articles/the-invisible-artistry-of-backend-development&#34;&gt;后端架构&lt;/a&gt;都相对简单：单体应用程序统治着整个领域，所有内容都整齐地包含在单个代码库中。开发人员可以理解和管理整个系统的复杂性。但随着数字化转型的加速，对后端系统的要求变得越来越复杂。云原生环境、微服务、实时数据处理和全球用户群将后端架构从简单的技术挑战转变为战略业务能力。&lt;/p&gt;</description>
      <pubDate>Fri, 10 Jan 2025 21:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>