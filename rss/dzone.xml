<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【React’s Unstoppable Rise: Why It’s Here to Stay】React不可阻挡的崛起：为什么它会留在这里</title>
      <link>https://dzone.com/articles/reacts-unstoppable-rise-why-its-here-to-stay</link>
      <description>【&lt;p&gt;React, introduced by Facebook (now Meta) in 2013, forever changed how developers build user interfaces. At that time, the front-end ecosystem already had heavyweights like AngularJS, Backbone.js, and jQuery, each solving specific needs. Yet React&#39;s approach — treating the UI as a function of state — stood out. Instead of manually orchestrating data and DOM updates, React lets developers describe how the UI should look given certain conditions. Then, using an internal mechanism called the Virtual DOM, it efficiently computed and applied the necessary changes. This innovation, along with React&#39;s component-based architecture and a massive community, catapulted it to the forefront of front-end development.&lt;/p&gt;&#xA;&lt;p&gt;Since its debut, &lt;a href=&#34;https://dzone.com/articles/advanced-react-js-concepts-a-deep-dive&#34;&gt;React has evolved significantly&lt;/a&gt;. Version after version introduced incremental improvements, with major shifts like the Fiber rewrite, Hooks, Concurrent Mode previews, and upcoming Server Components. The result is a library that stays modern while preserving backward compatibility. In what follows, we&#39;ll explore the factors that made React dominant, how it overcame early criticisms, and why it&#39;s likely to remain the top UI library for years to come.&lt;/p&gt;】&lt;p&gt;由Facebook（现为Meta）在2013年推出的React永远改变了开发人员构建用户界面的方式。当时，前端生态系统已经具有诸如AngularJS，Backbone.js和JQuery之类的重量级，每个都可以解决特定的需求。然而，React的方法（将UI视为状态的函数）脱颖而出。 React没有手动编排数据和DOM更新，而是让开发人员描述在某些条件下的UI的外观。然后，使用称为虚拟DOM的内部机制，它有效地计算并应用了必要的更改。这项创新以及React的基于组件的建筑和大型社区，将其跃升至前端开发的最前沿。&lt;/p&gt;&#xA;&lt;p&gt;自首次亮相以来，&lt;a href =“ https://dzone.com/articles/advanced-react-js-concepts-a-acepts-a-deep-dive”&gt; react的发展显着发展&lt;/a&gt;。版本后版本引入了增量改进，诸如光纤重写，挂钩，并发模式预览和即将到来的服务器组件之类的重大变化。结果是一个在保留向后兼容性的同时保持现代的库。在接下来的内容中，我们将探讨使反应占主导地位的因素，如何克服早期批评，以及为什么它可能在未来几年中成为顶级UI库。&lt;/p&gt;</description>
      <pubDate>Thu, 06 Feb 2025 14:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Community Over Code Keynotes Stress Open Source&#39;s Vital Role】社区代码主题演讲压力开源的重要作用</title>
      <link>https://dzone.com/articles/community-over-code-keynotes-open-source-role</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;At the ASF&#39;s flagship Community Over Code North America conference in October 2024, keynote speakers underscored the vital role of open-source communities in driving innovation, enhancing security, and adapting to new challenges.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;By highlighting the &lt;a href=&#34;https://dzone.com/articles/a-look-at-the-future-of-supply-chain-and-national&#34;&gt;Cybersecurity and Infrastructure Security Agency&#39;s&lt;/a&gt; (CISA) intensified focus on open source security, citing examples of open source-driven innovation, and reflecting on the ASF&#39;s 25-year journey, the keynotes showcased a thriving but rapidly changing ecosystem for open source. &amp;nbsp;&lt;/p&gt;】&lt;p dir =“ ltr”&gt;在2024年10月在北美大会上的ASF旗舰社区中，主题演讲者强调了开源社区在推动创新，增强安全性和适应新挑战方面的至关重要的作用。 &lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;通过突出显示&lt;a href =“ https://dzone.com/articles/a-look-at-the-future-of-supply-chain-and-national-national&gt;网络安全性和基础设施安全机构的&lt;/a&gt;（CISA）以开源驱动创新的示例以及反思ASF的25年旅程的示例加强了关注开源安全性的关注，Keynotes展示了一个开源的繁荣但迅速变化的生态系统。  &lt;/p&gt;</description>
      <pubDate>Thu, 06 Feb 2025 20:45:00 +0000</pubDate>
    </item>
    <item>
      <title>【Build a URL Shortener With Neon, Azure Serverless Functions】使用霓虹灯，无蓝色服务器功能构建URL缩短器</title>
      <link>https://dzone.com/articles/build-url-shortener-neon-azure-serverless-functions</link>
      <description>【&lt;p data-selectable-paragraph=&#34;&#34;&gt;Neon is now available on the Azure marketplace. The new integration between Neon and Azure allows you to manage your Neon subscription and billing through the Azure portal as if Neon were an Azure product. Azure serverless and Neon are a natural combination — Azure serverless frees you from managing your web server infrastructure. Neon does the same for databases, offering additional features like data branching and vector database extensions.&lt;/p&gt;&#xA;&lt;p data-selectable-paragraph=&#34;&#34;&gt;That said, let&#39;s try out this new integration by building a URL shortener API with &lt;a href=&#34;https://dzone.com/articles/a-first-look-at-neon&#34;&gt;Neon&lt;/a&gt;, &lt;a href=&#34;https://dzone.com/articles/azure-serverless-architecture&#34;&gt;Azure serverless&lt;/a&gt;, and &lt;a href=&#34;https://dzone.com/articles/watch-a-writer-learn-nodejs-part-1&#34;&gt;Node.js&lt;/a&gt;.&lt;/p&gt;】&lt;p数​​据选择 - 段落=“”&gt; NEON现在可以在Azure Marketplace上使用。霓虹灯和Azure之间的新集成使您可以通过Azure门户管理霓虹灯订阅和计费，就好像霓虹灯是Azure产品一样。 Azure无服务器和霓虹灯是一种自然组合 -  Azure无服务器可以使您无法管理Web服务器基础架构。霓虹灯在数据库中也这样做，提供了其他功能，例如数据分支和向量数据库扩展。&lt;/p&gt;&#xA;&lt;p data-selectable-paragraph =“”&gt;说，让我们通过用&lt;a href = https://dzone.com/articles/afirst-first-look-at---构建URL shortener api来尝试这种新的集成。 neon“&gt; neon &lt;/a&gt;，&lt;a href =” https://dzone.com/articles/azure-serverless-architection&gt; azure serverless &lt;/a&gt;和&lt;a href =“ https：// dzone。 com/articles/watch-a-writer-learn-nodejs-part-1“&gt; node.js &lt;/a&gt;。&lt;/p&gt;</description>
      <pubDate>Thu, 06 Feb 2025 12:00:11 +0000</pubDate>
    </item>
    <item>
      <title>【How Spring Boot Starters Integrate With Your Project】春季启动器如何与您的项目集成</title>
      <link>https://dzone.com/articles/how-spring-boot-starters-integrate-with-your-project</link>
      <description>【&lt;p&gt;When developers set up and integrate services, they often face challenges that can take up a lot of time. Starters help simplify this process by organizing code and making it easier to manage. Let&#39;s take a look at creating two starters, configuring their settings automatically, and using them in a service.&lt;/p&gt;&#xA;&lt;p&gt;So, what are Spring Boot Starters, exactly? What benefits do they provide?&lt;/p&gt;】&lt;p&gt;开发人员建立和集成服务时，他们经常面临可能需要大量时间的挑战。开胃菜通过组织代码和使其更易于管理来帮助简化此过程。让我们看一下创建两个启动器，自动配置其设置并在服务中使用它们。&lt;/p&gt;&#xA;&lt;p&gt;那么，到底是什么春季启动器？他们提供什么好处？&lt;/p&gt;</description>
      <pubDate>Wed, 05 Feb 2025 22:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Best Practices for Scaling Kafka-Based Workloads】扩展基于Kafka的工作量的最佳实践</title>
      <link>https://dzone.com/articles/best-practices-for-scaling-kafka-based-workloads</link>
      <description>【&lt;p&gt;Apache Kafka is known for its ability to process a huge quantity of events in real time. However, to handle millions of events, we need to follow certain best practices while implementing both Kafka producer services and consumer services.&lt;/p&gt;&#xA;&lt;p&gt;&lt;span data-huuid=&#34;15779352011706217370&#34;&gt;Before start&amp;nbsp;&lt;/span&gt;&lt;a href=&#34;https://dzone.com/articles/intro-to-apache-kafka-how-kafka-works&#34;&gt;&lt;span data-huuid=&#34;15779352011706217370&#34;&gt;using Kafka&lt;/span&gt;&lt;/a&gt;&lt;span data-huuid=&#34;15779352011706217370&#34;&gt;&amp;nbsp;in your projects, let&#39;s understand when to use Kafka:&lt;/span&gt;&lt;/p&gt;】&lt;p&gt; Apache Kafka以其实时处理大量事件的能力而闻名。但是，要处理数百万事件，我们需要遵循某些最佳实践，同时实施Kafka生产者服务和消费者服务。&lt;/p&gt;&#xA;&lt;p&gt; &lt;span data-huuid =“ 157779352011706217370”&gt; start &lt;/span&gt; &lt;a href =“ https://dzone.com/articles/articles/intro-to-to-paface-apache-kafka-kafka-how-kafka-kafka-works”&gt;跨度data-huuid =“ 15779352011706217370”&gt;使用kafka &lt;/span&gt; &lt;/a&gt; &lt;span data-huuid =“ 157779352011706217370”&gt;在您的项目中</description>
      <pubDate>Thu, 06 Feb 2025 19:30:05 +0000</pubDate>
    </item>
    <item>
      <title>【Chaos Engineering With Litmus: A CNCF Incubating Project】用石碑的混乱工程：CNCF孵化项目</title>
      <link>https://dzone.com/articles/chaos-engineering-litmus-cncf-incubating-project</link>
      <description>【&lt;p&gt;&lt;strong&gt;Problem statement&lt;/strong&gt;: Ensuring the resilience of a microservices-based e-commerce platform.&lt;/p&gt;&#xA;&lt;p&gt;System resilience stands as the key requirement for e-commerce platforms during scaling operations to keep services operational and deliver performance excellence to users. We have developed a microservices architecture platform that encounters sporadic system failures when faced with heavy traffic events. The problems with degraded service availability along with revenue impact occur mainly because of Kubernetes pod crashes along with resource exhaustion and network disruptions that hit during peak shopping seasons.&lt;/p&gt;】&lt;p&gt; &lt;strong&gt;问题声明&lt;/strong&gt;：确保基于微服务的电子商务平台的弹性。&lt;/p&gt;&#xA;&lt;p&gt;系统的弹性是在扩展操作过程中对电子商务平台的关键要求，以保持服务运行并为用户提供卓越的性能。我们已经开发了一个微服务架构平台，该平台在面临严重的交通事件时会遇到零星系统故障。降级服务可用性以及收入影响的问题主要是由于Kubernetes Pod崩溃以及在高峰购物季节遇到的资源耗尽和网络中断。&lt;/p&gt;</description>
      <pubDate>Thu, 06 Feb 2025 21:30:00 +0000</pubDate>
    </item>
    <item>
      <title>【How to Add Comments in Terraform Code】如何在Terraform代码中添加评论</title>
      <link>https://dzone.com/articles/how-to-add-comments-in-terraform-code</link>
      <description>【&lt;p&gt;In Terraform, comments are lines or sections of code that are ignored during execution but are useful for providing context, explanations, or notes within the code. They ensure team members can quickly grasp the purpose and functionality of configurations, reducing confusion and improving efficiency.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;In this article, we’ll cover the types of comments in Terraform, how to use them effectively, and best practices for writing clear, concise annotations.&lt;/p&gt;】&lt;p&gt;在Terraform中，注释是执行过程中被忽略的代码的行或部分，但对于在代码中提供上下文，说明或注释很有用。他们确保团队成员可以快速掌握配置的目的和功能，从而降低混乱并提高效率。 &lt;/p&gt;&#xA;&lt;p&gt;在本文中，我们将介绍Terraform中的评论类型，如何有效使用它们，以及编写清晰，简洁注释的最佳实践。&lt;/p&gt;</description>
      <pubDate>Thu, 06 Feb 2025 15:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Exploring Operator, OpenAI’s New AI Agent】探索操作员，OpenAI的新AI代理商</title>
      <link>https://dzone.com/articles/openai-operator-ai-agent</link>
      <description>【&lt;p data-selectable-paragraph=&#34;&#34;&gt;Testing is a critical yet often time-consuming process. Ensuring that every feature, flow, and edge case works as intended can take up significant resources — both in terms of time and manpower. Manual testing, while thorough, is prone to human error and inefficiency, especially when dealing with repetitive tasks or complex workflows. OpenAI recently introduced an advanced AI agent that would enhance our approach to software testing.&lt;/p&gt;&#xA;&lt;p data-selectable-paragraph=&#34;&#34;&gt;In this article, we’ll explore what Operator is, how it functions, and, most importantly, how it can drastically reduce manual testing time for developers and QA teams. We’ll also walk through some real-world examples to demonstrate its potential impact on testing various application flows and some potential limitations.&lt;/p&gt;】&lt;p数​​据选择 - 段落=“”&gt;测试是一个关键但通常耗时的过程。确保每个功能，流动和边缘案例都可以按预期工作，无论是在时间和人力方面都可以占用大量资源。手动测试虽然彻底易于人为错误和效率低下，尤其是在处理重复任务或复杂的工作流程时。 Openai最近引入了高级AI代理，该代理将增强我们的软件测试方法。&lt;/p&gt;&#xA;&lt;p数​​据可选 - 段落=“”&gt;在本文中，我们将探讨什么是运营商，其功能以及最重要的是，它如何大幅度减少开发人员和QA团队的手动测试时间。我们还将浏览一些现实世界的示例，以证明其对测试各种应用流和一些潜在局限性的潜在影响。&lt;/p&gt;</description>
      <pubDate>Thu, 06 Feb 2025 22:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【How to Maximize the Azure Cosmos DB Availability】如何最大化Azure Cosmos DB的可用性</title>
      <link>https://dzone.com/articles/how-to-maximize-the-azure-cosmos-db-availability</link>
      <description>【&lt;p style=&#34;text-align: left;&#34;&gt;Most of the e-commerce applications are zero-tolerant of any downtime. Any impact on application resources can impact the overall availability metrics of the site. Azure Cosmos database is one of the major NoSQL databases used across the industry. Though the Azure Cosmos itself provides 99.99% minimum availability for a single region without an availability zone, how do we further improve the database availability with the options available in the Azure Cosmos?&lt;/p&gt;&#xA;&lt;h2&gt;Multi-Region Read and Write&lt;/h2&gt;&#xA;&lt;p&gt;Single-region reads will impact the availability and will also lead to a single point of failure. So, read-heavy applications should at least have multi-region read enabled, though multi-region writes are not an option for an application. But, multi-region write provides a greater availability on both read and write-heavy applications.&lt;/p&gt;】&lt;p style =“ text-align：left;”&gt;大多数电子商务应用程序在任何停机时间中都耐零。对应用程序资源的任何影响都可能影响网站的整体可用性指标。 Azure Cosmos数据库是整个行业中使用的主要NOSQL数据库之一。尽管Azure Cosmos本身为没有可用性区域的单个区域提供了99.99％的最低可用性，但我们如何通过Azure Cosmos中的选项进一步改善数据库的可用性？&lt;/p&gt;&#xA;&lt;h2&gt;多区域读写&lt;/h2&gt;&#xA;&lt;p&gt;单区域读取将影响可用性，也会导致单点故障。因此，读取的应用程序至少应具有多区域读取功能，尽管多区域写入不是应用程序的选项。但是，多区域写作为读取和写入较重的应用程序提供了更大的可用性。&lt;/p&gt;</description>
      <pubDate>Thu, 06 Feb 2025 18:30:00 +0000</pubDate>
    </item>
    <item>
      <title>【Implementing Exponential Backoff With Spring Retry】通过重试实施指数向后</title>
      <link>https://dzone.com/articles/implementing-exponential-backoff-with-spring-retry</link>
      <description>【&lt;p&gt;Hi, engineers! Have you ever been asked to implement a retry algorithm for your Java code? Or maybe you saw something similar in the codebase of your project?&lt;/p&gt;&#xA;&lt;div class=&#34;codeMirror-wrapper&#34; contenteditable=&#34;false&#34;&gt;&#xA; &lt;div contenteditable=&#34;false&#34;&gt;&#xA;  &lt;div class=&#34;codeHeader&#34;&gt;&#xA;   &lt;div class=&#34;nameLanguage&#34;&gt;&#xA;    Java&#xA;   &lt;/div&gt;&lt;i class=&#34;icon-cancel-circled-1 cm-remove&#34;&gt;&amp;nbsp;&lt;/i&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;codeMirror-code--wrapper&#34; data-code=&#34;public void someActionWithRetries() {&#xA;  int maxRetries = 3;&#xA;  int attempt = 0;    &#xA;  while (true) {&#xA;    attempt++; &#xA;    try {&#xA;      System.out.println(&amp;quot;attempt number = &amp;quot; + attempt);&#xA;      performTask();&#xA;      System.out.println(&amp;quot;Task completed&amp;quot;);&#xA;      break; &#xA;    } catch (Exception e) {&#xA;      System.out.println(&amp;quot;Failure: &amp;quot; + e.getMessage());&#xA;      if (attempt &gt;= maxRetries) {&#xA;        System.out.println(&amp;quot;Max retries attempt”);&#xA;        throw new RuntimeException(&amp;quot;Unable to complete task after &amp;quot; + maxRetries + &amp;quot; attempts&amp;quot;, e);&#xA;      }&#xA;      System.out.println(&amp;quot;Retrying&amp;quot;);&#xA;    }&#xA;  }&#xA;}&#34; data-lang=&#34;text/x-java&#34;&gt;&#xA;   &lt;pre&gt;&lt;code lang=&#34;text/x-java&#34;&gt;public void someActionWithRetries() {&#xA;  int maxRetries = 3;&#xA;  int attempt = 0;    &#xA;  while (true) {&#xA;    attempt++; &#xA;    try {&#xA;      System.out.println(&#34;attempt number = &#34; + attempt);&#xA;      performTask();&#xA;      System.out.println(&#34;Task completed&#34;);&#xA;      break; &#xA;    } catch (Exception e) {&#xA;      System.out.println(&#34;Failure: &#34; + e.getMessage());&#xA;      if (attempt &amp;gt;= maxRetries) {&#xA;        System.out.println(&#34;Max retries attempt”);&#xA;        throw new RuntimeException(&#34;Unable to complete task after &#34; + maxRetries + &#34; attempts&#34;, e);&#xA;      }&#xA;      System.out.println(&#34;Retrying&#34;);&#xA;    }&#xA;  }&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA; &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div data-message-author-role=&#34;assistant&#34; data-message-id=&#34;c208e5ad-ef1b-4408-b062-24cf349ea1dd&#34; data-message-model-slug=&#34;gpt-4o&#34; dir=&#34;auto&#34;&gt;&#xA; &lt;p&gt;&lt;br&gt;&lt;/p&gt;】&lt;p&gt;嗨，工程师！是否曾经要求您为Java代码实现重试算法？或者，也许您在项目的代码库中看到了类似的东西？&lt;/p&gt;&#xA;&lt;div class =“ codemirror-wrapper” pontrentediable =“ false”&gt;&#xA; &lt;div contenteaditable =“ false”&gt;&#xA;  &lt;div class =“ codeheader”&gt;&#xA;   &lt;div class =“ namelanguage”&gt;&#xA;    爪哇&#xA;   &lt;/div&gt; &lt;i class =“ icon-cancel-circled-1 cm-remove”&gt; &lt;/i&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class =“ codemirror-code  -  wrapper” data-code =“ public void someactionWithRetries（）{&#xA;  int maxretries = 3;&#xA;  int尝试= 0;    &#xA;  而（true）{&#xA;    尝试++; &#xA;    尝试 {&#xA;      system.out.println（“尝试nubm =” +尝试）;&#xA;      perfermtask（）;&#xA;      system.out.println（“任务完成”）;&#xA;      休息; &#xA;    } catch（异常E）{&#xA;      system.out.println（“失败：” + e.getMessage（））;&#xA;      如果（尝试&gt; = maxRetries）{&#xA;        system.out.println（“最大重试尝试”）;&#xA;        抛出新的RuntimeException（“ + maxRetries +“ overs”之后，无法完成任务，e）;&#xA;      }&#xA;      system.out.println（“重试”）;&#xA;    }&#xA;  }&#xA;}“ data-lang =” text/x-java&gt;&#xA;   &lt;pre&gt; &lt;code lang =“ text/x-java”&gt; public void someactionWithRetries（）{&#xA;  int maxretries = 3;&#xA;  int尝试= 0;    &#xA;  而（true）{&#xA;    尝试++; &#xA;    尝试 {&#xA;      system.out.println（“尝试nubm =” +尝试）;&#xA;      perfermtask（）;&#xA;      system.out.println（“任务完成”）;&#xA;      休息; &#xA;    } catch（异常E）{&#xA;      system.out.println（“失败：” + e.getMessage（））;&#xA;      如果（尝试&gt; = maxRetries）{&#xA;        system.out.println（“最大重试尝试”）;&#xA;        抛出新的RuntimeException（“ + maxRetries +“ overs”之后，无法完成任务，e）;&#xA;      }&#xA;      system.out.println（“重试”）;&#xA;    }&#xA;  }&#xA;} &lt;/code&gt; &lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA; &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div div data-message-author-role =“助手” data-message-id =“ c208e5ad-ef1b-4408-b062-24cf349ea1dd” data-message-model-slug =“ gpt-4o&#xA; &lt;p&gt; &lt;br&gt; &lt;/p&gt;</description>
      <pubDate>Thu, 06 Feb 2025 13:00:14 +0000</pubDate>
    </item>
  </channel>
</rss>