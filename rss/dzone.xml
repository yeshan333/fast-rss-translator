<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Guide to Securing Your Software Supply Chain: Exploring SBOM and DevSecOps Concepts for Enhanced Application Security】软件供应链保护指南：探索 SBOM 和 DevSecOps 概念以增强应用程序安全性</title>
      <link>https://dzone.com/articles/guide-secure-software-supply-chain-sbom-devsecops</link>
      <description>【&lt;p style=&#34;font-size: 17px;&#34;&gt;&lt;em&gt;Editor&#39;s Note: The following is an article written for and published in DZone&#39;s 2024 Trend Report,&amp;nbsp;&lt;/em&gt;&lt;a href=&#34;https://dzone.com/link/2024-tr-security-contributor-article&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;Enterprise Security: Reinforcing Enterprise Application Defense&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;In today&#39;s cybersecurity landscape, securing the software supply chain has become increasingly crucial. The rise of complex software ecosystems and third-party dependencies has introduced new vulnerabilities and threats, making it imperative to adopt robust security measures. This article delves into the significance of a software bill of materials (SBOM) and DevSecOps practices for enhancing application security. We will cover key points such as the importance of software supply chain security, the role of SBOMs, the integration of DevSecOps, and practical steps to secure your software supply chain.&lt;/p&gt;】&lt;p style=&#34;font-size: 17px;&#34;&gt;&lt;em&gt;编者注：以下是为 DZone 2024 年趋势报告撰写并发表的文章，&lt;/em&gt;&lt;a href=&#34;https://dzone.com /link/2024-tr-security-contributor-article&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;企业安全：加强企业应用程序防御&lt;/em&gt;&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;小时&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;在当今的网络安全环境中，保护软件供应链变得越来越重要。复杂软件生态系统和第三方依赖项的兴起带来了新的漏洞和威胁，因此必须采取强大的安全措施。本文深入探讨了软件物料清单 (SBOM) 和 DevSecOps 实践对于增强应用程序安全性的重要性。我们将涵盖关键点，例如软件供应链安全的重要性、SBOM 的作用、DevSecOps 的集成以及确保软件供应链安全的实际步骤。&lt;/p&gt;</description>
      <pubDate>Sun, 01 Sep 2024 12:45:04 +0000</pubDate>
    </item>
    <item>
      <title>【High Fidelity Data: Balancing Privacy and Usage】高保真数据：平衡隐私和使用</title>
      <link>https://dzone.com/articles/high-fidelity-data-ensuring-privacy-and-usage</link>
      <description>【&lt;p&gt;The effective de-identification algorithms that balance data usage and privacy are critical. Industries like healthcare, finance, and advertising rely on accurate and secure data analysis. However, existing de-identification methods often compromise either the data usability or privacy protection and limit advanced applications like knowledge engineering and AI modeling.&lt;/p&gt;&#xA;&lt;p&gt;To address these challenges, we introduce High Fidelity (HiFi) data, a novel approach to meet the dual objectives of data usability and privacy protection. High-fidelity data maintains the original data&#39;s usability while ensuring compliance with stringent privacy regulations.&amp;nbsp;&lt;/p&gt;】&lt;p&gt;平衡数据使用和隐私的有效去识别算法至关重要。医疗保健、金融和广告等行业依赖于准确、安全的数据分析。然而，现有的去标识化方法往往会损害数据可用性或隐私保护，并限制知识工程和人工智能建模等高级应用。&lt;/p&gt;&#xA;&lt;p&gt;为了应对这些挑战，我们引入了高保真 (HiFi) 数据，这是一种满足数据可用性和隐私保护双重目标的新颖方法。高保真数据保持原始数据的可用性，同时确保遵守严格的隐私法规。 &lt;/p&gt;</description>
      <pubDate>Thu, 29 Aug 2024 20:00:06 +0000</pubDate>
    </item>
    <item>
      <title>【Day in the Life of a Developer With Google&#39;s Gemini Code Assist: Part 2】使用 Google Gemini Code Assist 的开发人员的一天：第 2 部分</title>
      <link>https://dzone.com/articles/ditl-of-a-developer-with-google-gemini-code-assist-pt2</link>
      <description>【&lt;p&gt;In this article, we will continue with the review of the remaining developer lifecycle activities: &lt;strong&gt;Deployment&lt;/strong&gt; and &lt;strong&gt;Operate&lt;/strong&gt; using Gemini Code Assist. We will wind up with approximate productivity improvement estimates&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;for all the lifecycle stages discussed in this article. Please refer to &#34;&lt;a href=&#34;https://dzone.com/articles/ditl-of-a-developer-with-google-gemini-code-assist-pt1&#34;&gt;Day in the Life of a Developer With Google’s Gemini Code Assist: Part 1&lt;/a&gt;&#34; for more details on &lt;strong&gt;Stages 1-4&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;5. Deployment&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Let&#39;s move over to the &lt;strong&gt;Deployment Stage&lt;/strong&gt; and use Gemini Code Assist to select the right GCP service.&lt;/p&gt;】&lt;p&gt;在本文中，我们将继续回顾其余的开发者生命周期活动：使用 Gemini Code Assist 进行&lt;strong&gt;部署&lt;/strong&gt;和&lt;strong&gt;操作&lt;/strong&gt;。我们最终将对本文讨论的所有生命周期阶段的生产力改进进行近似估计&lt;strong&gt;&lt;/strong&gt;。请参阅“&lt;a href=&#34;https://dzone.com/articles/ditl-of-a-developer-with-google-gemini-code-assist-pt1&#34;&gt;Google Gemini 开发人员的一天代码辅助：第 1 部分&lt;/a&gt;”，了解有关&lt;strong&gt;第 1-4 阶段&lt;/strong&gt;的更多详细信息。&lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;5。部署&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;让我们进入&lt;strong&gt;部署阶段&lt;/strong&gt;并使用 Gemini Code Assist 选择正确的 GCP 服务。&lt;/p&gt;</description>
      <pubDate>Fri, 30 Aug 2024 14:00:07 +0000</pubDate>
    </item>
    <item>
      <title>【Java Performance Tuning: Adjusting GC Threads for Optimal Results】Java 性能调优：调整 GC 线程以获得最佳结果</title>
      <link>https://dzone.com/articles/java-performance-tuning-adjusting-gc-threads</link>
      <description>【&lt;p&gt;Garbage Collection (GC) plays an important role in Java’s memory management. It helps to reclaim memory that is no longer in use. A garbage collector uses its own set of threads to reclaim memory. These threads are called GC threads. Sometimes JVM can end up either with too many or too few GC threads. In this post, we will discuss why JVM can end up having too many/too few GC threads, the consequences of it, and potential solutions to address them.&lt;/p&gt;&#xA;&lt;h2&gt;How To Find Your Application’s GC Thread Count&lt;/h2&gt;&#xA;&lt;p&gt;You can determine your application’s GC thread count by doing a thread dump analysis as outlined below:&lt;/p&gt;】&lt;p&gt;垃圾收集（GC）在Java的内存管理中扮演着重要的角色。它有助于回收不再使用的内存。垃圾收集器使用自己的一组线程来回收内存。这些线程称为 GC 线程。有时 JVM 可能会导致 GC 线程过多或过少。在这篇文章中，我们将讨论为什么 JVM 最终会出现过多/过少的 GC 线程、其后果以及解决这些问题的潜在解决方案。&lt;/p&gt;&#xA;&lt;h2&gt;如何查找应用程序的 GC 线程数&lt;/h2&gt;&#xA;&lt;p&gt;您可以通过执行线程转储分析来确定应用程序的 GC 线程数，如下所述：&lt;/p&gt;</description>
      <pubDate>Fri, 30 Aug 2024 16:00:08 +0000</pubDate>
    </item>
    <item>
      <title>【Full-Stack Security Guide: Best Practices and Challenges of Securing Modern Applications】全栈安全指南：保护现代应用程序的最佳实践和挑战</title>
      <link>https://dzone.com/articles/full-stack-security-guide-best-practices-challenges</link>
      <description>【&lt;p style=&#34;font-size: 17px;&#34;&gt;&lt;em&gt;Editor&#39;s Note: The following is an article written for and published in DZone&#39;s 2024 Trend Report,&amp;nbsp;&lt;/em&gt;&lt;a href=&#34;https://dzone.com/link/2024-tr-security-contributor-article&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;Enterprise Security: Reinforcing Enterprise Application Defense&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Full-stack security protects every layer of a software application, including the front end, back end, infrastructure, and network. It integrates robust security measures to address vulnerabilities by employing tools and practices to maintain data integrity, prevent unauthorized access, and ensure compliance, especially as applications expand and integrate with various technologies and platforms.&lt;/p&gt;】&lt;p style=&#34;font-size: 17px;&#34;&gt;&lt;em&gt;编者注：以下是为 DZone 2024 年趋势报告撰写并发表的文章，&lt;/em&gt;&lt;a href=&#34;https://dzone.com /link/2024-tr-security-contributor-article&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;企业安全：加强企业应用程序防御&lt;/em&gt;&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;小时&gt;&#xA;&lt;p&gt;全栈安全性可保护软件应用程序的每一层，包括前端、后端、基础设施和网络。它集成了强大的安全措施，通过使用工具和实践来维护数据完整性、防止未经授权的访问并确保合规性，特别是在应用程序扩展并与各种技术和平台集成时，来解决漏洞。&lt;/p&gt;</description>
      <pubDate>Sat, 31 Aug 2024 10:00:07 +0000</pubDate>
    </item>
    <item>
      <title>【The Enterprise Guide to Cloud Security Posture Management】云安全态势管理企业指南</title>
      <link>https://dzone.com/articles/enterprise-guide-cloud-security-posture-management</link>
      <description>【&lt;p style=&#34;font-size: 17px;&#34;&gt;&lt;em&gt;Editor&#39;s Note: The following is an article written for and published in DZone&#39;s 2024 Trend Report,&amp;nbsp;&lt;/em&gt;&lt;a href=&#34;https://dzone.com/link/2024-tr-security-contributor-article&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;Enterprise Security: Reinforcing Enterprise Application Defense&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Many companies wrongly believe that moving to the cloud means their cloud provider is fully responsible for security. However, most known cloud breaches are caused by &lt;a href=&#34;https://www.gartner.com/smarterwithgartner/is-the-cloud-secure&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;misconfigurations on the customer&#39;s end&lt;/a&gt;, not the provider&#39;s. Cloud security posture management (CSPM) helps organizations avoid this problem by implementing automated guardrails to manage compliance risks and identify potential misconfigurations that could lead to data breaches.&amp;nbsp;&lt;/p&gt;】&lt;p style=&#34;font-size: 17px;&#34;&gt;&lt;em&gt;编者注：以下是为 DZone 2024 年趋势报告撰写并发表的文章，&lt;/em&gt;&lt;a href=&#34;https://dzone.com /link/2024-tr-security-contributor-article&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;企业安全：加强企业应用程序防御&lt;/em&gt;&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;小时&gt;&#xA;&lt;p&gt;许多公司错误地认为迁移到云意味着他们的云提供商对安全负全部责任。然而，大多数已知的云漏洞都是由&lt;a href=&#34;https://www.gartner.com/smarterwithgartner/is-the-cloud-secure&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;客户的配置错误引起的end&lt;/a&gt;，不是提供商的。云安全态势管理 (CSPM) 通过实施自动护栏来管理合规性风险并识别可能导致数据泄露的潜在错误配置，从而帮助组织避免此问题。 &lt;/p&gt;</description>
      <pubDate>Fri, 30 Aug 2024 14:52:49 +0000</pubDate>
    </item>
    <item>
      <title>【Enhance Terraform Final Plan Output in GitHub Actions】增强 GitHub Actions 中的 Terraform 最终计划输出</title>
      <link>https://dzone.com/articles/enhance-terraform-final-plan-output-in-github-acti</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://dzone.com/articles/terraform-explained-in-5-minutes&#34;&gt;Terraform&lt;/a&gt; is an &lt;a href=&#34;https://dzone.com/articles/what-is-infrastructure-as-code&#34;&gt;Infrastructure as Code (IaC)&lt;/a&gt; tool that allows the DevOps engineer to automate the provision and management of infrastructure resources. It uses configuration files written in HashiCorp Config Language (HCL) to define the desired state of the infrastructure and has various commands to configure and apply the infra resources.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-github-actions&#34;&gt;GitHub Actions&lt;/a&gt; is a &lt;a href=&#34;https://dzone.com/articles/what-is-ci-cd&#34;&gt;continuous integration and delivery platform (CI/CD)&lt;/a&gt; that allows developers to automate build, test, and deployment pipelines. During the deployment configuration, we need to define a &lt;strong&gt;step&lt;/strong&gt;: a step is an individual action that GitHub Actions performs.&amp;nbsp;&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://dzone.com/articles/terraform-explained-in-5-minutes&#34;&gt;Terraform&lt;/a&gt; 是一个 &lt;a href=&#34;https:// dzone.com/articles/what-is-infrastruct-as-code&#34;&gt;基础设施即代码 (IaC)&lt;/a&gt; 工具，允许 DevOps 工程师自动配置和管理基础设施资源。它使用以 HashiCorp 配置语言 (HCL) 编写的配置文件来定义基础设施的所需状态，并具有各种命令来配置和应用基础设施资源。 &lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-github-actions&#34;&gt;GitHub 操作&lt;/a&gt; 是 &lt;a href=&#34;https://dzone.com/ articles/what-is-ci-cd&#34;&gt;持续集成和交付平台 (CI/CD)&lt;/a&gt; 允许开发人员自动构建、测试和部署管道。在部署配置过程中，我们需要定义一个&lt;strong&gt;步骤&lt;/strong&gt;：步骤是 GitHub Actions 执行的单个操作。 &lt;/p&gt;</description>
      <pubDate>Fri, 30 Aug 2024 11:00:08 +0000</pubDate>
    </item>
    <item>
      <title>【The Chaos of Mismatched Ord and PartialOrd Implementations in Rust&#39;s BTreeSet】Rust 的 BTreeSet 中 Ord 和 PartialOrd 实现不匹配的混乱</title>
      <link>https://dzone.com/articles/the-chaos-of-mismatched-ord-and-partialord-impleme</link>
      <description>【&lt;article&gt;&#xA; &lt;section&gt;&#xA;  &lt;p data-selectable-paragraph=&#34;&#34;&gt;Rust is known for its robust type system and powerful trait-based abstractions, which allow developers to write safe, efficient, and expressive code. &lt;code&gt;BTreeSet&lt;/code&gt; in Rust is a powerful data structure for maintaining a sorted collection of unique elements. It provides the guarantees of log(n) insertion, deletion, and lookup times while keeping the elements in a well-defined order. However, when the &lt;code&gt;Ord&lt;/code&gt; and &lt;code&gt;PartialOrd&lt;/code&gt; trait implementations for a type differ, it can lead to unpredictable and chaotic behavior. This article explores this subtle pitfall using a practical example.&lt;/p&gt;&#xA;  &lt;h2 data-selectable-paragraph=&#34;&#34;&gt;Understanding Ord and PartialOrd&lt;/h2&gt;&#xA;  &lt;h3 data-selectable-paragraph=&#34;&#34;&gt;The Ord Trait&lt;/h3&gt;&#xA;  &lt;p data-selectable-paragraph=&#34;&#34;&gt;The &lt;code&gt;Ord&lt;/code&gt; trait in Rust enforces a total order on elements. It’s used by collections like &lt;code&gt;BTreeSet&lt;/code&gt; to maintain a consistent ordering. When you implement &lt;code&gt;Ord&lt;/code&gt; for a type, you’re defining a complete ordering, which ensures that any two elements can be compared, and the ordering will always make sense.&lt;/p&gt;】&lt;文章&gt;&#xA; &lt;部分&gt;&#xA;  &lt;p data-selectable-paragraph=&#34;&#34;&gt;Rust 以其强大的类型系统和强大的基于特征的抽象而闻名，这使得开发人员能够编写安全、高效且富有表现力的代码。 Rust 中的 &lt;code&gt;BTreeSet&lt;/code&gt; 是一个强大的数据结构，用于维护唯一元素的排序集合。它保证了 log(n) 插入、删除和查找时间，同时保持元素处于明确定义的顺序。但是，当类型的 &lt;code&gt;Ord&lt;/code&gt; 和 &lt;code&gt;PartialOrd&lt;/code&gt; 特征实现不同时，可能会导致不可预测和混乱的行为。本文通过一个实际示例探讨了这个微妙的陷阱。&lt;/p&gt;&#xA;  &lt;h2 data-selectable-paragraph=&#34;&#34;&gt;了解 Ord 和 PartialOrd&lt;/h2&gt;&#xA;  &lt;h3 data-selectable-paragraph=&#34;&#34;&gt;Ord 特征&lt;/h3&gt;&#xA;  &lt;p data-selectable-paragraph=&#34;&#34;&gt;Rust 中的 &lt;code&gt;Ord&lt;/code&gt; 特征强制对元素进行总排序。 &lt;code&gt;BTreeSet&lt;/code&gt; 等集合使用它来维护一致的排序。当您为类型实现 &lt;code&gt;Ord&lt;/code&gt; 时，您正在定义一个完整的排序，这确保可以比较任何两个元素，并且排序始终有意义。&lt;/p&gt;</description>
      <pubDate>Fri, 30 Aug 2024 20:00:04 +0000</pubDate>
    </item>
    <item>
      <title>【Snowflake Administration: A Comprehensive Step-by-Step Guide】雪花管理：全面的分步指南</title>
      <link>https://dzone.com/articles/snowflake-administration-a-comprehensive-guide</link>
      <description>【&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/introduction-to-snowflake-for-junior-software-engi&#34;&gt;Snowflake&lt;/a&gt; is a powerful cloud-based &lt;a href=&#34;https://dzone.com/refcardz/data-warehousing&#34;&gt;data warehousing&lt;/a&gt; platform renowned for its &lt;a href=&#34;https://dzone.com/refcardz/scalability&#34;&gt;scalability&lt;/a&gt;, flexibility, and ease of use.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;As an &lt;a href=&#34;https://dzone.com/articles/database-administration-on-snowflake&#34;&gt;administrator&lt;/a&gt;, managing Snowflake involves overseeing various tasks to ensure:&lt;/p&gt;】&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/introduction-to-snowflake-for-junior-software-engi&#34;&gt;Snowflake&lt;/a&gt; 是一个强大的基于云的&lt;a href=&#34;https ://dzone.com/refcardz/data-warehousing&#34;&gt;数据仓库&lt;/a&gt;平台以其&lt;a href=&#34;https://dzone.com/refcardz/scalability&#34;&gt;可扩展性&lt;/a&gt;、灵活性、和易用性。 &lt;/p&gt;&#xA;&lt;p&gt;作为&lt;a href=&#34;https://dzone.com/articles/database-administration-on-snowflake&#34;&gt;管理员&lt;/a&gt;，管理 Snowflake 涉及监督各种任务，以确保：&lt;/p&gt;</description>
      <pubDate>Fri, 30 Aug 2024 18:00:07 +0000</pubDate>
    </item>
    <item>
      <title>【Achieving DevOps Harmony With Unified Log Monitoring for CI/CD】通过 CI/CD 的统一日志监控实现 DevOps 和谐</title>
      <link>https://dzone.com/articles/devops-harmony-with-unified-log-monitoring-for-cicd</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;In modern software development, DevOps methods have evolved into the pillar of dependable and effective product delivery. Two methods that particularly help automate and simplify the software release process are &lt;a href=&#34;https://dzone.com/articles/what-is-ci-cd&#34;&gt;continuous integration (CI) and continuous deployment (CD)&lt;/a&gt;. But as software systems get more complicated, so does the necessity for strong log monitoring systems that can unite and streamline log management at several CI/CD phases.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;This article explores the need for uniting log monitoring in DevOps, the associated difficulties, and approaches for achieving harmony in CI/CD processes.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;在现代软件开发中，DevOps 方法已发展成为可靠且有效的产品交付的支柱。特别有助于自动化和简化软件发布过程的两种方法是&lt;a href=&#34;https://dzone.com/articles/what-is-ci-cd&#34;&gt;持续集成 (CI) 和持续部署 (CD)&lt;/一个&gt;。但随着软件系统变得越来越复杂，强大的日志监控系统的必要性也随之增加，该系统可以在多个 CI/CD 阶段统一并简化日志管理。&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;本文探讨了在 DevOps 中统一日志监控的必要性、相关困难以及在 CI/CD 流程中实现和谐的方法。&lt;/p&gt;</description>
      <pubDate>Thu, 29 Aug 2024 18:30:05 +0000</pubDate>
    </item>
  </channel>
</rss>