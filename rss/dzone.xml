<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Understanding Server Error (5XX) in Azure Services: A Deep Dive Into Azure Logic Apps】了解 Azure 服务中的服务器错误 (5XX)：深入探讨 Azure 逻辑应用</title>
      <link>https://dzone.com/articles/understanding-server-error-5xx-in-azure-services</link>
      <description>【&lt;p&gt;Encountering 5XX errors in &lt;a href=&#34;https://dzone.com/refcardz/cloud-computing-windows-azure&#34;&gt;Azure&lt;/a&gt; services? These are server SKU issues such as high CPU and memory. We will focus on how design challenges in workflows as well can lead to 5XX response codes and the steps to mitigate them.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA; &lt;li&gt;&lt;strong&gt;Applies to:&lt;/strong&gt; &lt;a href=&#34;https://dzone.com/articles/when-to-use-logic-apps-and-azure-functions&#34;&gt;Azure Logic Apps&lt;/a&gt; (Consumption + Standard)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2&gt;&lt;strong&gt;What Are 5XX Errors?&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;A 5XX response code indicates a server-side error. When dealing with a chain of servers, an issue in one server — such as downtime — can cause cascading failures, resulting in 5XX errors. In the context of Azure Logic Apps, understanding the nuances of these errors is crucial.&lt;/p&gt;】&lt;p&gt;在 &lt;a href=&#34;https://dzone.com/refcardz/cloud-computing-windows-azure&#34;&gt;Azure&lt;/a&gt; 服务中遇到 5XX 错误？这些是服务器 SKU 问题，例如 CPU 和内存过高。我们将重点关注工作流程中的设计挑战如何导致 5XX 响应代码以及缓解这些问题的步骤。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA; &lt;li&gt;&lt;strong&gt;适用于：&lt;/strong&gt; &lt;a href=&#34;https://dzone.com/articles/when-to-use-logic-apps-and-azure-functions&#34;&gt;Azure 逻辑应用&lt;/ a&gt;（消费+标准）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2&gt;&lt;strong&gt;什么是 5XX 错误？&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;5XX 响应代码表示服务器端错误。在处理一系列服务器时，一台服务器中的问题（例如停机）可能会导致级联故障，从而导致 5XX 错误。在 Azure 逻辑应用的上下文中，了解这些错误的细微差别至关重要。&lt;/p&gt;</description>
      <pubDate>Wed, 23 Oct 2024 14:00:04 +0000</pubDate>
    </item>
    <item>
      <title>【Good Refactoring vs Bad Refactoring】好的重构与坏的重构</title>
      <link>https://dzone.com/articles/good-refactoring-vs-bad-refactoring</link>
      <description>【&lt;p&gt;I&#39;ve hired a lot of developers over the years. More than a few of them have come in with a strong belief that our code needed heavy refactoring. But here&#39;s the thing: in almost every case, their newly refactored code was found by the other developers to be harder to understand and maintain. It also was generally slower and buggier too.&lt;/p&gt;&#xA;&lt;p&gt;Now, don&#39;t get me wrong. Refactoring isn&#39;t inherently bad. It&#39;s a crucial part of keeping a codebase healthy. The problem is that bad refactoring is, well, bad. And it&#39;s surprisingly easy to fall into the trap of making things worse while trying to make them better.&lt;/p&gt;】&lt;p&gt;这些年来我雇佣了很多开发人员。他们中的不少人都坚信我们的代码需要大量重构。但事情是这样的：几乎在所有情况下，其他开发人员都发现他们新重构的代码更难理解和维护。它通常也更慢且错误更多。&lt;/p&gt;&#xA;&lt;p&gt;现在，请不要误会我的意思。重构本质上并不是坏事。这是保持代码库健康的关键部分。问题是糟糕的重构是非常糟糕的。而且，在试图让事情变得更好的同时，很容易陷入让事情变得更糟的陷阱。&lt;/p&gt;</description>
      <pubDate>Wed, 23 Oct 2024 21:00:05 +0000</pubDate>
    </item>
    <item>
      <title>【How Federal Agencies Are Achieving Zero Trust With Automation】联邦机构如何通过自动化实现零信任</title>
      <link>https://dzone.com/articles/how-federal-agencies-are-achieving-zero-trust</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;“Never trust, always verify.” This key principle has been ingrained into the cybersecurity lexicon since Forrester first popularized the concept of zero trust in 2009. Since then, zero trust has emerged as one of the most important frameworks in modern cybersecurity programs.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;For government agencies, the shift to zero trust is both crucial and inevitable. Tasked with protecting vital national infrastructure and driving scientific innovation, agencies are increasingly waking up to the fact that traditional security practices no longer cut it in today’s escalating, and increasingly complex, threat landscape.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;“永远不要相信，永远要验证。”自 Forrester 于 2009 年首次推广零信任概念以来，这一关键原则已深入网络安全词汇中。从那时起，零信任已成为现代网络安全计划中最重要的框架之一。&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;对于政府机构而言，向零信任的转变至关重要且不可避免。担负着保护重要国家基础设施和推动科学创新的任务的各机构越来越意识到，在当今不断升级且日益复杂的威胁形势下，传统的安全实践已不再有效。&lt;/p&gt;</description>
      <pubDate>Wed, 23 Oct 2024 17:00:07 +0000</pubDate>
    </item>
    <item>
      <title>【Automate Web Portal Deployment in Minutes Using GitHub Actions】使用 GitHub Actions 在几分钟内自动化 Web 门户部署</title>
      <link>https://dzone.com/articles/automate-web-portal-deployment-with-gitub-actions</link>
      <description>【&lt;p&gt;In today&#39;s fast-paced development environment, automating the deployment process is crucial for maintaining efficiency and reducing human error. &lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-github-actions&#34;&gt;GitHub Actions&lt;/a&gt; has emerged as a powerful tool for implementing &lt;a href=&#34;https://dzone.com/articles/how-to-build-an-effective-cicd-pipeline&#34;&gt;continuous integration and continuous deployment (CI/CD) pipelines&lt;/a&gt;, particularly for web applications. This article explores how to leverage GitHub Actions to deploy a feedback portal seamlessly and efficiently.&lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;The Power of GitHub Actions&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;GitHub Actions is more than just a &lt;a href=&#34;https://dzone.com/articles/what-is-ci-cd&#34;&gt;CI/CD&lt;/a&gt; tool; it&#39;s a complete automation platform that allows developers to create custom workflows for building, testing, and deploying their applications. These workflows are triggered by specific events in your GitHub repository, such as pushes, pull requests, or scheduled tasks.&lt;/p&gt;】&lt;p&gt;在当今快节奏的开发环境中，自动化部署过程对于保持效率和减少人为错误至关重要。 &lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-github-actions&#34;&gt;GitHub Actions&lt;/a&gt; 已成为实现 &lt;a href=&#34;https://dzone 的强大工具.com/articles/how-to-build-an- effective-cicd-pipeline&#34;&gt;持续集成和持续部署 (CI/CD) 管道&lt;/a&gt;，特别是对于 Web 应用程序。本文探讨了如何利用 GitHub Actions 无缝高效地部署反馈门户。&lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;GitHub Actions 的力量&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;GitHub Actions 不仅仅是一个 &lt;a href=&#34;https://dzone.com/articles/what-is-ci-cd&#34;&gt;CI/CD&lt;/a&gt; 工具；它是一个完整的自动化平台，允许开发人员创建自定义工作流程来构建、测试和部署其应用程序。这些工作流程由 GitHub 存储库中的特定事件触发，例如推送、拉取请求或计划任务。&lt;/p&gt;</description>
      <pubDate>Wed, 23 Oct 2024 19:00:04 +0000</pubDate>
    </item>
    <item>
      <title>【Will GenAI Force Coders to Switch Careers?】GenAI 会迫使程序员转行吗？</title>
      <link>https://dzone.com/articles/will-genai-force-coders-to-switch-careers</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;The world of software engineering is on the cusp of a transformation, driven largely by the rapid advancement of &lt;a href=&#34;https://dzone.com/articles/introduction-generative-ai-empowering-enterprises&#34;&gt;Generative AI (GenAI)&lt;/a&gt;. The AWS CEO recently suggested that developers might stop coding within two years as AI takes over coding tasks. Is this an accurate prediction? Will GenAI really force coders to abandon their careers?&amp;nbsp;&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;The answer isn&#39;t straightforward. GenAI will no doubt automate many coding jobs, which will cut down the need for some positions. However, it won&#39;t make software engineers a thing of the past. It&#39;s similar to how automation changed fields like manufacturing. GenAI will cause a shift, but not a total replacement. We&#39;ll still need software engineers — though in a more advanced and specialized way. They&#39;ll focus on jobs that AI can&#39;t handle by itself.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;软件工程世界正处于变革的风口浪尖，这在很大程度上是由 &lt;a href=&#34;https://dzone.com/articles/introduction-generative-ai-empowering 的快速发展推动的-enterprises&#34;&gt;生成式人工智能 (GenAI)&lt;/a&gt;。 AWS 首席执行官最近建议，随着人工智能接管编码任务，开发人员可能会在两年内停止编码。这是一个准确的预测吗？ GenAI 真的会迫使程序员放弃他们的职业吗？ &lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;答案并不简单。 GenAI 无疑将使许多编码工作实现自动化，这将减少对某些职位的需求。然而，它不会让软件工程师成为过去。这类似于自动化如何改变制造业等领域。 GenAI 将带来转变，但不会完全替代。我们仍然需要软件工程师——尽管以更先进和专业的方式。他们将专注于人工智能本身无法处理的工作。&lt;/p&gt;</description>
      <pubDate>Wed, 23 Oct 2024 20:00:04 +0000</pubDate>
    </item>
    <item>
      <title>【Leveraging Event-Driven Data Mesh Architecture With AWS for Modern Data Challenges】利用 AWS 的事件驱动数据网格架构应对现代数据挑战</title>
      <link>https://dzone.com/articles/event-driven-data-mesh-architecture-with-aws</link>
      <description>【&lt;p&gt;In today&#39;s data-driven world, businesses must adapt to rapid changes in how data is managed, analyzed, and utilized. Traditional centralized systems and monolithic architectures, while historically sufficient, are no longer adequate to meet the growing demands of organizations that need faster, real-time access to data insights. A revolutionary framework in this space is event-driven data mesh architecture, and when combined with AWS services, it becomes a robust solution for addressing complex data management challenges.&lt;/p&gt;&#xA;&lt;h2&gt;The Data Dilemma&lt;/h2&gt;&#xA;&lt;p&gt;Many organizations face significant challenges when relying on outdated data architectures. These challenges include:&lt;/p&gt;】&lt;p&gt;在当今数据驱动的世界中，企业必须适应数据管理、分析和利用方式的快速变化。传统的集中式系统和整体架构虽然在历史上已经足够，但已不再足以满足需要更快、实时访问数据洞察的组织不断增长的需求。该领域的一个革命性框架是事件驱动的数据网格架构，当与 AWS 服务相结合时，它成为解决复杂数据管理挑战的强大解决方案。&lt;/p&gt;&#xA;&lt;h2&gt;数据困境&lt;/h2&gt;&#xA;&lt;p&gt;许多组织在依赖过时的数据架构时面临着重大挑战。这些挑战包括：&lt;/p&gt;</description>
      <pubDate>Wed, 23 Oct 2024 13:00:06 +0000</pubDate>
    </item>
    <item>
      <title>【Building Predictive Analytics for Loan Approvals】为贷款审批建立预测分析</title>
      <link>https://dzone.com/articles/building-predictive-analytics-for-loan-approvals</link>
      <description>【&lt;p&gt;In this short article, we&#39;ll explore loan approvals using a variety of tools and techniques. We&#39;ll begin by analyzing loan data and applying Logistic Regression to predict loan outcomes. Building on this, we&#39;ll integrate BERT for Natural Language Processing to enhance prediction accuracy. To interpret the predictions, we&#39;ll use SHAP and LIME explanation frameworks, providing insights into feature importance and model behavior. Finally, we&#39;ll explore the potential of Natural Language Processing through LangChain to automate loan predictions, using the power of conversational AI.&lt;/p&gt;&#xA;&lt;p&gt;The notebook file used in this article is available on &lt;a href=&#34;https://github.com/VeryFatBoy/loan-approvals&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;】&lt;p&gt;在这篇短文中，我们将探讨使用各种工具和技术的贷款审批。我们将首先分析贷款数据并应用逻辑回归来预测贷款结果。在此基础上，我们将集成 BERT 进行自然语言处理，以提高预测准确性。为了解释预测，我们将使用 SHAP 和 LIME 解释框架，提供对特征重要性和模型行为的见解。最后，我们将通过 LangChain 探索自然语言处理的潜力，利用对话式人工智能的力量实现自动化贷款预测。&lt;​​/p&gt;&#xA;&lt;p&gt;本文中使用的笔记本文件可在 &lt;a href=&#34;https://github.com/VeryFatBoy/loan-approvals&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt; 上找到。&lt;/p&gt;</description>
      <pubDate>Wed, 23 Oct 2024 12:00:04 +0000</pubDate>
    </item>
    <item>
      <title>【Data Architectures With Emphasis on Emerging Trends】强调新兴趋势的数据架构</title>
      <link>https://dzone.com/articles/data-architectures-emphasis-on-emerging-trends</link>
      <description>【&lt;p&gt;In this emerging Generative AI era as a data architect, it is your responsibility to keep a tap on the emerging architectures that cater to Generative AI. From data management to data governance to data lineage, architectures need to emerge to handle volumes of data.&lt;/p&gt;&#xA;&lt;p&gt;In this article, you learn about emerging data architectures like data mesh, Generative AI, and Quantum-based along with the existing architectures like Data Fabric. The article will conclude by showing the key differences between the existing and the emerging data architectures.&lt;/p&gt;】&lt;p&gt;在这个新兴的生成式 AI 时代，作为数据架构师，您有责任把握适合生成式 AI 的新兴架构。从数据管理到数据治理再到数据沿袭，需要出现架构来处理大量数据。&lt;/p&gt;&#xA;&lt;p&gt;在本文中，您将了解数据网格、生成式 AI 和基于量子的新兴数据架构，以及 Data Fabric 等现有架构。本文最后将展示现有数据架构和新兴数据架构之间的主要差异。&lt;/p&gt;</description>
      <pubDate>Wed, 23 Oct 2024 18:00:02 +0000</pubDate>
    </item>
    <item>
      <title>【RAG Systems: A Brand New Architecture Tool】RAG Systems：全新的架构工具</title>
      <link>https://dzone.com/articles/rag-systems-a-brand-new-architecture-tool</link>
      <description>【&lt;p data-selectable-paragraph=&#34;&#34;&gt;Let’s cut to the chase: Retrieval-Augmented Generation (RAG) systems are reshaping how we approach AI-driven information processing. As architects, we need to understand the nuts and bolts of these systems to leverage their potential effectively.&lt;/p&gt;&#xA;&lt;h2 data-selectable-paragraph=&#34;&#34;&gt;What’s RAG?&lt;/h2&gt;&#xA;&lt;p data-selectable-paragraph=&#34;&#34;&gt;At its core, a RAG system enhances the capabilities of LLMs by integrating them with external knowledge sources. This integration allows the model to pull in relevant information dynamically, enabling it to generate responses that are not only coherent but also factually accurate and contextually relevant. The main components of a RAG system include:&lt;/p&gt;】&lt;p data-selectable-paragraph=&#34;&#34;&gt;让我们切入正题：检索增强生成 (RAG) 系统正在重塑我们处理人工智能驱动的信息的方式。作为架构师，我们需要了解这些系统的具体细节，以有效地发挥其潜力。&lt;/p&gt;&#xA;&lt;h2 data-selectable-paragraph=&#34;&#34;&gt;什么是 RAG？&lt;/h2&gt;&#xA;&lt;p data-selectable-paragraph=&#34;&#34;&gt;RAG 系统的核心是通过将法学硕士与外部知识源集成来增强法学硕士的能力。这种集成允许模型动态地提取相关信息，使其能够生成不仅连贯、而且事实上准确且上下文相关的响应。 RAG系统的主要组件包括：&lt;/p&gt;</description>
      <pubDate>Wed, 23 Oct 2024 15:00:03 +0000</pubDate>
    </item>
    <item>
      <title>【Minimizing Latency in Kafka Streaming Applications That Use External API or Database Calls】最大限度地减少使用外部 API 或数据库调用的 Kafka 流应用程序的延迟</title>
      <link>https://dzone.com/articles/minimizing-latency-in-kafka-streaming-applications</link>
      <description>【&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/intro-to-apache-kafka-how-kafka-works&#34;&gt;Kafka&lt;/a&gt; is widely adopted for building real-time streaming applications due to its fault tolerance, scalability, and ability to process large volumes of data. However, in general, Kafka streaming consumers work best only in an environment where they do not have to call external APIs or databases. In a situation when a &lt;a href=&#34;https://dzone.com/articles/kafka-consumer-overview&#34;&gt;Kafka consumer&lt;/a&gt; must make a synchronous database or API call, the latency introduced by network hops or I/O operations adds up and accumulates easily (especially when the streaming pipeline is performing an initial load of a large volume of data before starting CDC). This can significantly slow down the streaming pipeline and result in the blowing of system resources impacting the throughput of the pipeline. In extreme situations, this may even become unsustainable as Kafka consumers may not be able to commit offsets due to increased latency before the next polling call and get continuously rebalanced by the broker, practically not processing anything yet incrementally consuming more system resources as time passes.&lt;/p&gt;&#xA;&lt;p&gt;This is a real problem faced by many streaming applications. In this article, we’ll explore some effective strategies to minimize latency in Kafka streaming applications where external API or database calls are inevitable. We’ll also compare these strategies with the alternative approach of separating out the parts of the pipeline that require these external interactions into a separate publish/subscribe-based consumer.&lt;/p&gt;】&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/intro-to-apache-kafka-how-kafka-works&#34;&gt;Kafka&lt;/a&gt; 被广泛用于构建实时流应用程序，因为其容错性、可扩展性和处理大量数据的能力。然而，一般来说，Kafka 流消费者只有在不需要调用外部 API 或数据库的环境中才能最好地工作。在&lt;a href=&#34;https://dzone.com/articles/kafka-consumer-overview&#34;&gt;Kafka消费者&lt;/a&gt;必须进行同步数据库或API调用的情况下，网络跃点或I引入的延迟/O 操作很容易累加和积累（特别是当流管道在启动 CDC 之前执行大量数据的初始加载时）。这会显着减慢流传输管道的速度，并导致系统资源耗尽，从而影响管道的吞吐量。在极端情况下，这甚至可能变得不可持续，因为 Kafka 消费者可能由于下一次轮询调用之前的延迟增加而无法提交偏移量，并由代理不断重新平衡，实际上不处理任何内容，但随着时间的推移逐渐消耗更多的系统资源。 &lt;/p&gt;&#xA;&lt;p&gt;这是许多流应用程序面临的现实问题。在本文中，我们将探索一些有效的策略来最大限度地减少 Kafka 流应用程序中的延迟，因为外部 API 或数据库调用是不可避免的。我们还将这些策略与将需要这些外部交互的管道部分分离到单独的基于发布/订阅的消费者中的替代方法进行比较。&lt;/p&gt;</description>
      <pubDate>Wed, 23 Oct 2024 16:00:08 +0000</pubDate>
    </item>
  </channel>
</rss>