<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Scaling Boldly, Securing Relentlessly: A Tailored Approach to a Startup’s Cloud Security】大胆扩展，不懈保护：初创企业云安全的定制方法</title>
      <link>https://dzone.com/articles/startup-cloud-security-guide</link>
      <description>【&lt;p&gt;Launching a SaaS startup is like riding a rocket. At first, you’re just trying not to burn up in the atmosphere — delivering features, delighting users, hustling for feedback. But, as you start to scale, you realize: security isn’t just a cost center — it’s an accelerant for growth, trust, and resilience.&lt;/p&gt;&#xA;&lt;p&gt;For SaaS startups racing from MVP to unicorn, robust security isn’t just about compliance; it fuels innovation, safeguards reputation, and unlocks enterprise sales. But faced with fierce market demands and thin resources, how can founders, engineers, and security leads scale infrastructure and build trust — all without slowing the agile hustle?&lt;/p&gt;】&lt;p&gt;创办 SaaS 初创公司就像乘坐火箭。一开始，你只是想避免在这种氛围中焦头烂额——提供功能、取悦用户、争取反馈。但是，当您开始扩展时，您会意识到：安全性不仅仅是一个成本中心，它还是增长、信任和弹性的促进剂。&lt;/p&gt;&#xA;&lt;p&gt;对于从 MVP 到独角兽的 SaaS 初创公司来说，强大的安全性不仅仅涉及合规性；还涉及合规性。它促进创新、维护声誉并释放企业销售潜力。但面对激烈的市场需求和稀薄的资源，创始人、工程师和安全主管如何扩展基础设施并建立信任——同时又不减慢敏捷的步伐？&lt;/p&gt;</description>
      <pubDate>Tue, 21 Oct 2025 19:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Is My Application&#39;s Authentication and Authorization Secure and Scalable?】我的应用程序的身份验证和授权安全且可扩展吗？</title>
      <link>https://dzone.com/articles/secure-scalable-application-authentication-authorization</link>
      <description>【&lt;p&gt;Nowadays, most application requires authentication and authorization due to increased threat levels, and not only do they need to be secured, but also scalable due to increased traffic volume. It&#39;s not that the application doesn&#39;t have authentication and authorization in place, but the point is, does it provide security, scalability, and more features around this area? Authentication and authorization are a domain in themselves, and most developers/architects start by using a homegrown mechanism, which is not only less secure most of the time because of a lack of domain expertise, but also lots of time spent in non-core activity, and because of that, the product road-map gets a hit, and value addition in the product becomes slow. &amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;This blog will talk in detail about the common mistakes made in this area and how we can avoid or overcome them if we are already stuck.&lt;/p&gt;】&lt;p&gt;如今，由于威胁级别的增加，大多数应用程序都需要身份验证和授权，它们不仅需要受到保护，而且由于流量的增加而需要可扩展。这并不是说应用程序没有适当的身份验证和授权，而是问题是，它是否提供了安全性、可扩展性以及围绕该领域的更多功能？身份验证和授权本身就是一个领域，大多数开发人员/架构师从使用本土机制开始，这种机制不仅在大多数情况下由于缺乏领域专业知识而不太安全，而且还花费大量时间在非核心活动上，因此，产品路线图受到打击，产品的增值变得缓慢。  &lt;/p&gt;&#xA;&lt;p&gt;本博客将详细讨论该领域常见的错误，以及如果我们已经陷入困境，我们如何避免或克服这些错误。&lt;/p&gt;</description>
      <pubDate>Tue, 21 Oct 2025 18:00:04 +0000</pubDate>
    </item>
    <item>
      <title>【Next-Gen DevOps: Rule-Based AI Auto-Fixes for PMD, Veracode, and Test Failures】下一代 DevOps：针对 PMD、Veracode 和测试失败的基于规则的 AI 自动修复</title>
      <link>https://dzone.com/articles/ai-powered-devops-self-healing-pipelines</link>
      <description>【&lt;h2&gt;&lt;strong&gt;Let Your Pipeline Fix the Small Stuff: A Practical Guide to Self-Healing DevOps&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Think back to your last deployment. Everything looked great — until a small test failed or a static analysis tool threw a warning. Suddenly, the whole pipeline froze. Someone had to stop what they were doing, dig through logs, make a tiny fix, and restart the process. It’s not a disaster, but it’s death by a thousand cuts.&lt;/p&gt;&#xA;&lt;p&gt;Over the past decade, our &lt;a href=&#34;https://dzone.com/articles/what-is-a-cicd-pipeline&#34;&gt;CI/CD pipelines&lt;/a&gt; have gotten incredibly sophisticated. We run static analysis tools like PMD or SonarQube, security scanners such as Snyk or Veracode, and layer in unit and integration tests to catch regressions early. These gates keep our code safe and compliant, but they also introduce a familiar bottleneck: one small failure can stall the entire flow.&lt;/p&gt;】&lt;h2&gt;&lt;strong&gt;让您的管道修复小问题：自我修复 DevOps 实用指南&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;回想一下您上次的部署。一切看起来都很棒——直到一个小测试失败或者静态分析工具发出警告。突然，整个管道都冻结了。有人必须停止他们正在做的事情，挖掘日志，进行微小的修复，然后重新启动该过程。虽非灾难，却是千刀万剐。&lt;/p&gt;&#xA;&lt;p&gt;在过去的十年中，我们的&lt;a href=&#34;https://dzone.com/articles/what-is-a-cicd-pipeline&#34;&gt;CI/CD 管道&lt;/a&gt;变得异常复杂。我们运行 PMD 或 SonarQube 等静态分析工具、Snyk 或 Veracode 等安全扫描器，并分层进行单元和集成测试以尽早捕获回归。这些门保证了我们的代码安全和合规，但它们也引入了一个熟悉的瓶颈：一个小故障可能会阻碍整个流程。&lt;/p&gt;</description>
      <pubDate>Tue, 21 Oct 2025 17:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【A 5-Minute Fix to Our CI/CD Pipeline That Saved Us 5 Hours a Day】只需 5 分钟即可修复 CI/CD 管道，每天为我们节省 5 个小时</title>
      <link>https://dzone.com/articles/five-minute-cicd-pipeline-fix-saves-hours-daily</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;If you’ve ever worked at a startup, you know the rhythm: you’re in constant motion, juggling priorities, shipping fast, putting out small fires, and trying not to light new ones. It’s a bit like running a restaurant during dinner rush: the orders keep coming, and you’re too busy cooking to notice that the stove needs cleaning.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;After months of sprinting to ship new features, first &lt;a href=&#34;https://github.com/multiplayer-app/multiplayer-session-recorder-javascript/tree/main/packages/session-recorder-browser&#34;&gt;full-stack session recordings&lt;/a&gt;, then our &lt;a href=&#34;https://www.multiplayer.app/docs/ai/mcp-server&#34;&gt;MCP server&lt;/a&gt;, then support for annotated recording screens, and most recently, a browser extension and VS Code extension… We finally took a breath and looked at something we hadn’t touched in a while: our CI/CD pipelines.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;如果您曾经在初创公司工作过，您就会知道其中的节奏：您不断地行动，处理优先事项，快速交付，扑灭小火，并尽量不要点燃新的火。这有点像在晚餐高峰期经营一家餐馆：订单源源不断地传来，而你忙着做饭而没有注意到炉子需要清洁。&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;经过几个月的冲刺发布新功能，首先是&lt;a href=&#34;https://github.com/multiplayer-app/multiplayer-session-recorder-javascript/tree/main/packages/session-recorder-browser&#34;&gt;全栈会话录制&lt;/a&gt;，然后是我们的&lt;a href=&#34;https://www.multiplayer.app/docs/ai/mcp-server&#34;&gt;MCP 服务器&lt;/a&gt;，然后是对带注释的录制屏幕的支持，以及最近的浏览器扩展和 VS Code 扩展......我们终于喘了口气，看看我们已经有一段时间没有接触过的东西：我们的 CI/CD 管道。&lt;/p&gt;</description>
      <pubDate>Tue, 21 Oct 2025 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【The Rise of Passkeys】万能钥匙的兴起</title>
      <link>https://dzone.com/articles/rise-of-passkeys</link>
      <description>【&lt;h2 dir=&#34;ltr&#34;&gt;What Are Passkeys?&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;You know how annoying it is to remember all those different passwords for every single website? And how terrifying it is when you hear about a company getting hacked, and suddenly, your password for that site might be out there? Well, imagine logging into PayPal without a password, and even if PayPal&#39;s systems got totally breached, your login wouldn&#39;t be compromised. That&#39;s pretty much what passkeys are all about, and lets deep dive into the secret sauce behind them.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;If you&#39;re like billions of others with a smartphone, you might have already used passkeys on your phone. Companies like Apple, Microsoft, and Google have been rolling out passkeys widely recently. So what is it? PassKeys are a new, more secure way to sign in to websites and apps. They are a replacement for traditional passwords and are designed to be resistant to phishing, easier to use, and secure.&lt;/p&gt;】&lt;h2 dir=&#34;ltr&#34;&gt;什么是万能钥匙？&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;您知道记住每个网站的所有不同密码是多么烦人吗？当您听说一家公司遭到黑客攻击，而您该网站的密码突然泄露出去时，这是多么可怕的事情？好吧，想象一下在没有密码的情况下登录 PayPal，即使 PayPal 的系统完全被破坏，您的登录也不会受到损害。这几乎就是万能钥匙的全部内容，让我们深入了解它们背​​后的秘密。&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;如果您像数十亿拥有智能手机的其他人一样，您可能已经在手机上使用了密钥。苹果、微软和谷歌等公司最近广泛推出了密钥。那么它是什么？密钥是一种登录网站和应用程序的更安全的新方式。它们是传统密码的替代品，旨在抵御网络钓鱼、更易于使用且安全。&lt;/p&gt;</description>
      <pubDate>Tue, 21 Oct 2025 15:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Automating Storage Tiering and Lifecycle Policies in AWS S3 Using Python (Boto3)】使用 Python (Boto3) 在 AWS S3 中自动执行存储分层和生命周期策略</title>
      <link>https://dzone.com/articles/automating-storage-tiering-and-lifecycle-policies</link>
      <description>【&lt;p&gt;Managing cloud storage efficiently is essential for organizations of all sizes. Amazon Web Services (AWS) provides features like S3 Intelligent-Tiering and lifecycle policies to help automatically move files to the most cost-effective storage locations based on how often they are accessed.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;This article explains, in simple terms and with step-by-step code, how you can use Python and the Boto3 library to automate these processes — making sure your data is always stored in the right place at the right price. References to AWS documentation and helpful resources are provided throughout.&lt;/p&gt;】&lt;p&gt;有效管理云存储对于各种规模的组织都至关重要。 Amazon Web Services (AWS) 提供 S3 智能分层和生命周期策略等功能，帮助根据文件的访问频率自动将文件移动到最具成本效益的存储位置。 &lt;/p&gt;&#xA;&lt;p&gt;本文通过简单的术语和分步代码解释了如何使用 Python 和 Boto3 库来自动化这些过程 - 确保您的数据始终以合适的价格存储在正确的位置。全文提供了对 AWS 文档和有用资源的参考。&lt;/p&gt;</description>
      <pubDate>Tue, 21 Oct 2025 14:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【The Dangerous Middle: Agile Roles That AI Will Erode First】危险的中间：人工智能将首先侵蚀的敏捷角色</title>
      <link>https://dzone.com/articles/dangerous-middle-agile-roles-ai-erosion</link>
      <description>【&lt;h2&gt;TL; DR: Dangerous Middle and the Future of Scrum Masters and Agile Coaches&amp;nbsp;&lt;/h2&gt;&#xA;&lt;p&gt;AI is changing product and tech work. Peter Yang, a renowned product leader, argues that AI will split product roles into two groups: Generalists who can prototype end-to-end with AI, and specialists in the top 5% of their fields. Everyone else in the dangerous middle risks being squeezed.&lt;/p&gt;&#xA;&lt;p&gt;How does this apply to agile practitioners: Scrum Masters, Product Owners, Agile Coaches, and transformation leads? It does, with important nuances.&lt;/p&gt;】&lt;h2&gt;TL; DR：危险的中间以及 Scrum Master 和敏捷教练的未来&lt;/h2&gt;&#xA;&lt;p&gt;人工智能正在改变产品和技术工作。著名产品负责人 Peter Yang 认为，人工智能将把产品角色分为两类：可以用人工智能进行端到端原型设计的通才，以及各自领域排名前 5% 的专家。处于危险中间的其他人都面临着被挤压的风险。&lt;/p&gt;&#xA;&lt;p&gt;这如何适用于敏捷从业者：Scrum Master、产品负责人、敏捷教练和转型领导？确实如此，但有重要的细微差别。&lt;/p&gt;</description>
      <pubDate>Tue, 21 Oct 2025 13:00:06 +0000</pubDate>
    </item>
    <item>
      <title>【JavaScript Internals: Understanding Runtime Optimization and How to Write Performant Code】JavaScript 内部原理：了解运行时优化以及如何编写高性能代码</title>
      <link>https://dzone.com/articles/javascript-runtime-optimization-performance-guide</link>
      <description>【&lt;p&gt;From a straightforward browser scripting language, JavaScript has morphed into an ultra-flexible and versatile technology that powers everything from dynamic front-end UIs and back-end services (Node.js) to automation scripts and IoT devices (with libraries like Johnny-Five). Yet, that flexibility introduces a lot of complexity in writing efficient, performant code.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;Fortunately, &lt;a href=&#34;https://dzone.com/articles/the-role-of-javascript-in-front-end-and-back-end-d&#34;&gt;JavaScript&lt;/a&gt; engines working to execute your code employ a number of optimization strategies during runtime to improve performance. For these optimizations to be most effective, though, you as the developer must understand how the engines practically work and adopt coding practices that kowtow to their internal processes.&lt;/p&gt;】&lt;p&gt;JavaScript 从一种简单的浏览器脚本语言演变成一种超灵活且多功能的技术，为从动态前端 UI 和后端服务 (Node.js) 到自动化脚本和 IoT 设备（带有 Johnny-Five 等库）的一切提供支持。然而，这种灵活性给编写高效、高性能的代码带来了很多复杂性。 &lt;/p&gt;&#xA;&lt;p&gt;幸运的是，用于执行代码的 &lt;a href=&#34;https://dzone.com/articles/the-role-of-javascript-in-front-end-and-back-end-d&#34;&gt;JavaScript&lt;/a&gt; 引擎在运行时采用了多种优化策略来提高性能。不过，为了使这些优化最有效，您作为开发人员必须了解引擎的实际工作原理，并采用与其内部流程相适应的编码实践。&lt;/p&gt;</description>
      <pubDate>Tue, 21 Oct 2025 12:00:06 +0000</pubDate>
    </item>
    <item>
      <title>【A Practical Guide to Deploying Microservices on Kubernetes】在 Kubernetes 上部署微服务的实用指南</title>
      <link>https://dzone.com/articles/practical-guide-deploying-microservices-kubernetes</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;So, you&#39;re thinking about using Kubernetes to run microservices? You&#39;re not the only one. As of 2024, more than &lt;a href=&#34;https://datahubanalytics.com/kubernetes-adoption-and-market-trends/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;60% of businesses&lt;/a&gt; use Kubernetes, and by 2027, that percentage is predicted to climb to more than 90%. That&#39;s pretty crazy, huh?&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;But here&#39;s the deal. &lt;a href=&#34;https://dzone.com/articles/design-patterns-for-microservices&#34;&gt;Microservices&lt;/a&gt; provide us a lot of freedom and the opportunity to grow, but they can be hard to manage. Do you know what it means? There are dozens or perhaps hundreds of services floating around, and it can be hard to keep track of everything. That&#39;s where Kubernetes comes in. It&#39;s like having a really clever helper who takes care of all the scalability, deployment, and management for you.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;那么，您正在考虑使用 Kubernetes 来运行微服务吗？你不是唯一一个。截至 2024 年，超过 &lt;a href=&#34;https://datahubanalytics.com/kubernetes-adoption-and-market-trends/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;60% 的企业&lt;/a&gt;使用 Kubernetes，到 2027 年，该比例预计将攀升至 90% 以上。这太疯狂了，不是吗？&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;但是事情就是这样。 &lt;a href=&#34;https://dzone.com/articles/design-patterns-for-microservices&#34;&gt;微服务&lt;/a&gt;为我们提供了很多自由和成长机会，但它们可能很难管理。你知道这意味着什么吗？周围有数十个甚至数百个服务，并且很难跟踪所有内容。这就是 Kubernetes 的用武之地。这就像有一个非常聪明的帮手，为您处理所有可扩展性、部署和管理。&lt;/p&gt;</description>
      <pubDate>Tue, 21 Oct 2025 11:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Coarse Parallel Processing of Work Queues in Kubernetes: Advancing Optimization for Batch Processing】Kubernetes 中工作队列的粗并行处理：推进批处理优化</title>
      <link>https://dzone.com/articles/kubernetes-work-queue-parallel-processing</link>
      <description>【&lt;p style=&#34;text-align: left;&#34;&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;In today’s modern distributed systems landscape, many tasks consist of batch processing, and parallel processing divides the jobs into smaller portions and units that&amp;nbsp;&lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;can be executed&lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;&amp;nbsp;in parallel. Kubernetes, also known for its container orchestration, provides an object called Job to handle such cases.&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p style=&#34;text-align: left;&#34;&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;Not all batch jobs are similar. Depending on the details and nature of the task, some coordination&amp;nbsp;&lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;is required&lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;&amp;nbsp;between them; we might need different patterns for distributing such workloads. That is where the&amp;nbsp;&lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;coarse parallel processing&lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;&amp;nbsp;model fits in.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;】&lt;p style=&#34;text-align: left;&#34;&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;在当今的现代分布式系统环境中，许多任务都由批处理组成，并行处理将作业划分为更小的部分和单元，&lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;可以并行执行&lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;。 Kubernetes 也以其容器编排而闻名，它提供了一个名为 Job 的对象来处理此类情况。&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p style=&#34;text-align: left;&#34;&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;并非所有批处理作业都是相似的。根据任务的细节和性质，它们之间需要进行一些协调&lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;&lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;；我们可能需要不同的模式来分配此类工作负载。这就是&lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;粗略并行处理&lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;模型的用武之地。&lt;/span&gt;&lt;/p&gt;</description>
      <pubDate>Mon, 20 Oct 2025 19:00:03 +0000</pubDate>
    </item>
  </channel>
</rss>