<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Optimizing Container Synchronization for Frequent Writes】优化频繁写入的容器同步</title>
      <link>https://dzone.com/articles/optimizing-container-synchronization-for-frequent-writes</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Efficient &lt;a href=&#34;https://dzone.com/articles/what-is-why-we-need-and-how-to-do-data-synchroniza&#34;&gt;data synchronization&lt;/a&gt; is crucial in high-performance computing and multi-threaded applications. This article explores an optimization technique for scenarios where frequent writes to a container occur in a &lt;a href=&#34;https://dzone.com/articles/java-thread-tutorial-creating-threads-and-multithr&#34;&gt;multi-threaded environment&lt;/a&gt;. We’ll examine the challenges of traditional synchronization methods and present an advanced approach that significantly improves performance for write-heavy environments. The method in question is beneficial because it is easy to implement and versatile, unlike pre-optimized containers that may be platform-specific, require special data types, or bring additional library dependencies.&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;Traditional Approaches and Their Limitations&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Imagine a scenario where we have a cache of user transactions:&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;高效&lt;a href=&#34;https://dzone.com/articles/what-is-why-we-need-and-how-to-do-data-synchroniza&#34;&gt;数据同步&lt; /a&gt; 在高性能计算和多线程应用程序中至关重要。本文探讨了在多线程中频繁写入容器的场景的优化技术环境&lt;/a&gt;。我们将研究传统同步方法的挑战，并提出一种先进的方法，可以显着提高写入密集型环境的性能。所讨论的方法是有益的，因为它易于实现且用途广泛，与可能特定于平台、需要特殊数据类型或带来额外的库依赖项的预先优化的容器不同。&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;传统方法及其局限性&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;想象一下我们有用户事务缓存的场景：&lt;/p&gt;</description>
      <pubDate>Wed, 11 Sep 2024 15:15:02 +0000</pubDate>
    </item>
    <item>
      <title>【How To Set Up and Configure the Debugger in Visual Studio Code for React.js [Video]】如何在 Visual Studio Code 中为 React.js 设置和配置调试器 [视频]</title>
      <link>https://dzone.com/articles/set-up-and-configure-the-debugger-in-vsc-for-react</link>
      <description>【&lt;p&gt;In this article, we’re diving into a critical aspect of React development: setting up and configuring the debugger in Visual Studio Code. Debugging is a crucial part of development that allows you to step through your code, inspect variables, and quickly fix issues, without relying heavily on console logs. This makes the debugging process more efficient and enjoyable.&lt;/p&gt;&#xA;&lt;h2 name=&#34;44f5&#34;&gt;Getting Started&lt;/h2&gt;&#xA;&lt;p name=&#34;cf1e&#34;&gt;Before we begin, make sure you have the following tools installed:&lt;/p&gt;】&lt;p&gt;在本文中，我们将深入探讨 React 开发的一个关键方面：在 Visual Studio Code 中设置和配置调试器。调试是开发的关键部分，它允许您单步执行代码、检查变量并快速修复问题，而无需严重依赖控制台日志。这使得调试过程更加高效和愉快。&lt;/p&gt;&#xA;&lt;h2 name=&#34;44f5&#34;&gt;开始使用&lt;/h2&gt;&#xA;&lt;p name=&#34;cf1e&#34;&gt;在开始之前，请确保您已安装以下工具：&lt;/p&gt;</description>
      <pubDate>Wed, 11 Sep 2024 19:30:05 +0000</pubDate>
    </item>
    <item>
      <title>【Uncovering a Prototype Pollution Regression in the Core Node.js Project】揭示 Node.js 核心项目中的原型污染回归</title>
      <link>https://dzone.com/articles/uncovering-prototype-pollution-regression</link>
      <description>【&lt;p&gt;As a Node.js developer and security researcher, I recently stumbled upon an interesting security regression in the Node.js core project related to prototype pollution.&lt;/p&gt;&#xA;&lt;p&gt;This happened to be found while I was conducting an independent security research for my Node.js Secure Coding books and yet the discovery highlights the complex nature of security in open-source projects and the challenges of maintaining consistent security measures across a large codebase. Even at the scale of a project like Node.js, regressions can occur, potentially leaving parts of the codebase vulnerable to attack.&lt;/p&gt;】&lt;p&gt;作为一名 Node.js 开发人员和安全研究员，我最近在 Node.js 核心项目中偶然发现了一个与原型污染相关的有趣的安全回归。&lt;/p&gt;&#xA;&lt;p&gt;这是我在为我的 Node.js 安全编码书籍进行独立安全研究时发现的，但这一发现凸显了开源项目中安全性的复杂性以及在大型项目中保持一致的安全措施的挑战。代码库。即使像 Node.js 这样的项目规模，也可能会发生回归，从而可能导致部分代码库容易受到攻击。&lt;/p&gt;</description>
      <pubDate>Wed, 11 Sep 2024 21:00:07 +0000</pubDate>
    </item>
    <item>
      <title>【The Significance of Complex Event Processing (CEP) With RisingWave for Delivering Accurate Business Decisions】RisingWave 复杂事件处理 (CEP) 对于提供准确的业务决策的重要性</title>
      <link>https://dzone.com/articles/complex-event-processing-with-risingwave</link>
      <description>【&lt;h2&gt;About Complex Event Processing (CEP)&lt;/h2&gt;&#xA;&lt;p&gt;Complex event processing (CEP) is a highly effective and optimized mechanism that combines several sources of information and instantly determines and evaluates the relationships among events in real time. It is a real-time data and event identification, processing, and analysis approach. By gathering and combining across various IoT sensor feeds, CEP has a transformative effect by collecting IoT sensor streams for real-time monitoring, analytics, and troubleshooting. CEP provides insight into what&#39;s happening by continuously comparing incoming events to &lt;strong&gt;patterns&lt;/strong&gt;. This enables us to operate proactively and effectively.&lt;/p&gt;&#xA;&lt;p&gt;Although event stream processing (ESP) and CEP are often used interchangeably, they are not exactly the same. Traditional ESP applications typically handle a single stream of data that arrives in the correct time sequence. For instance, in algorithmic trading, an ESP application might analyze a stream of pricing data to decide whether to buy or sell a stock. However, ESP generally doesn&#39;t account for event causality or hierarchies. This limitation led to the development of CEP, which is essentially a more advanced and sophisticated version of ESP.&lt;/p&gt;】&lt;h2&gt;关于复杂事件处理 (CEP)&lt;/h2&gt;&#xA;&lt;p&gt;复杂事件处理（CEP）是一种高效且优化的机制，它结合了多个信息源，即时实时确定和评估事件之间的关系。它是一种实时数据和事件识别、处理和分析方法。通过收集和组合各种物联网传感器源，CEP 通过收集物联网传感器流进行实时监控、分析和故障排除，具有变革性的效果。 CEP 通过不断将传入事件与&lt;strong&gt;模式&lt;/strong&gt;进行比较，深入了解正在发生的情况。这使我们能够积极有效地运营。&lt;/p&gt;&#xA;&lt;p&gt;尽管事件流处理 (ESP) 和 CEP 经常互换使用，但它们并不完全相同。传统 ESP 应用程序通常处理按正确时间顺序到达的单个数据流。例如，在算法交易中，ESP 应用程序可能会分析一系列定价数据来决定是否买入或卖出股票。然而，ESP 通常不考虑事件因果关系或层次结构。这一限制导致了 CEP 的开发，它本质上是 ESP 的更高级和复杂的版本。&lt;/p&gt;</description>
      <pubDate>Wed, 11 Sep 2024 13:00:07 +0000</pubDate>
    </item>
    <item>
      <title>【Modes and Modality in Performance Testing】性能测试中的模式和形式</title>
      <link>https://dzone.com/articles/modes-and-modality-in-performance-testing-1</link>
      <description>【&lt;p&gt;When reporting summary statistics for &lt;a href=&#34;https://dzone.com/articles/types-of-performance-testing-and-when-it-should-be&#34;&gt;performance test&lt;/a&gt; results, there&#39;s a common assumption that the data follows a central tendency. But is this always true? What if the data does not exhibit a single central tendency? In such cases, the traditional metrics like averages might be misleading.&lt;/p&gt;&#xA;&lt;p&gt;This article explores why it&#39;s crucial to check for modality of performance test results, how to detect multimodal distributions, and how to handle them. For users of &lt;a href=&#34;https://jmeter.apache.org/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;JMeter&lt;/a&gt;, a new plugin is introduced to help automate this process.&lt;/p&gt;】&lt;p&gt;在报告&lt;a href=&#34;https://dzone.com/articles/types-of-performance-testing-and-when-it-should-be&#34;&gt;性能测试&lt;/a&gt;结果的汇总统计信息时，有一个常见的假设，即数据遵循集中趋势。但这总是正确的吗？如果数据没有表现出单一的集中趋势怎么办？在这种情况下，平均值等传统指标可能会产生误导。&lt;/p&gt;&#xA;&lt;p&gt;本文探讨了为什么检查性能测试结果的模态至关重要、如何检测多模态分布以及如何处理它们。对于 &lt;a href=&#34;https://jmeter.apache.org/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;JMeter&lt;/a&gt; 的用户，引入了一个新插件来帮助自动化此过程。&lt;/ p&gt;</description>
      <pubDate>Wed, 11 Sep 2024 11:00:07 +0000</pubDate>
    </item>
    <item>
      <title>【8 Practices Software Engineers Should Adopt and Champion for Cybersecurity】软件工程师应采用并倡导网络安全的 8 项实践</title>
      <link>https://dzone.com/articles/8-cybersecurity-practices-for-software-engineers</link>
      <description>【&lt;h2 dir=&#34;ltr&#34;&gt;The Importance of Cybersecurity&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;I firmly believe that in today&#39;s cybersecurity expectations, software engineers should prioritize the security of their computer systems and internal IT networks. I would consider it to be a mistake to rely heavily on technology due to the simple fact that a lot of risks are non-technical in nature. The Internet can leave businesses vulnerable to data breaches and ransomware attacks that can cause lasting reputational damage. These non-technical risks can indeed be addressed using technical solutions.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;These incidents can additionally result in significant financial losses and potential legal issues. In my opinion, &lt;a href=&#34;https://dzone.com/articles/building-resilient-security-systems-composable&#34;&gt;implementing strong cybersecurity measures&lt;/a&gt; is not just a technical requirement but a critical initiative for any business looking to strengthen its defenses and resilience.&lt;/p&gt;】&lt;h2 dir=&#34;ltr&#34;&gt;网络安全的重要性&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;我坚信，在当今的网络安全期望中，软件工程师应该优先考虑计算机系统和内部 IT 网络的安全。我认为严重依赖技术是一个错误，因为许多风险本质上是非技术性的。互联网可能使企业容易遭受数据泄露和勒索软件攻击，从而造成持久的声誉损害。这些非技术风险确实可以通过技术解决方案来解决。&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;这些事件还可能导致重大财务损失和潜在的法律问题。在我看来，&lt;a href=&#34;https://dzone.com/articles/building-resilient-security-systems-composable&#34;&gt;实施强有力的网络安全措施&lt;/a&gt;不仅仅是一项技术要求，而且对于任何人来说都是一项关键举措希望加强防御和恢复能力的企业。&lt;/p&gt;</description>
      <pubDate>Wed, 11 Sep 2024 14:00:06 +0000</pubDate>
    </item>
    <item>
      <title>【Real-Time GenAI With RAG Using Apache Kafka and Flink To Prevent Hallucinations】使用 RAG 的实时 GenAI 使用 Apache Kafka 和 Flink 来防止幻觉</title>
      <link>https://dzone.com/articles/real-time-genai-with-rag-using-apache-kafka-and-flink</link>
      <description>【&lt;p&gt;How do you prevent hallucinations from large language models (LLMs) in GenAI applications? LLMs need real-time, contextualized, and trustworthy data to generate the most reliable outputs. This blog post explains how RAG and a data streaming platform with Apache Kafka and Flink make that possible. A lightboard video shows how to build a context-specific real-time RAG architecture. Also, learn how the travel agency Expedia leverages data streaming with Generative AI using conversational chatbots to improve the customer experience and reduce the cost of service agents.&lt;/p&gt;&#xA;&lt;h2&gt;What Is Retrieval Augmented Generation (RAG) in GenAI?&lt;/h2&gt;&#xA;&lt;p&gt;Generative AI (GenAI) refers to artificial intelligence (AI) systems that can create new content, such as text, images, music, or code, often mimicking human creativity. These systems use advanced machine learning techniques, particularly deep learning models like neural networks, to generate data that resembles the training data they were fed. Popular examples include language models like GPT-3 for text generation and DALL-E for image creation.&lt;/p&gt;】&lt;p&gt;如何防止 GenAI 应用程序中大语言模型 (LLM) 产生幻觉？法学硕士需要实时、情境化且值得信赖的数据来生成最可靠的输出。这篇博文解释了 RAG 以及采用 Apache Kafka 和 Flink 的数据流平台如何实现这一目标。灯板视频展示了如何构建特定于上下文的实时 RAG 架构。此外，了解旅行社 Expedia 如何通过对话式聊天机器人利用数据流和生成式 AI 来改善客户体验并降低服务代理的成本。&lt;/p&gt;&#xA;&lt;h2&gt;GenAI 中的检索增强生成 (RAG) 是什么？&lt;/h2&gt;&#xA;&lt;p&gt;生成式人工智能 (GenAI) 是指能够创建新内容的人工智能 (AI) 系统，例如文本、图像、音乐或代码，通常模仿人类的创造力。这些系统使用先进的机器学习技术，特别是神经网络等深度学习模型，来生成与输入的训练数据类似的数据。流行的例子包括用于文本生成的 GPT-3 和用于图像创建的 DALL-E 等语言模型。&lt;/p&gt;</description>
      <pubDate>Wed, 11 Sep 2024 12:00:09 +0000</pubDate>
    </item>
    <item>
      <title>【How To Implement Specific Distributed System Patterns Using Spring Boot: Introduction】如何使用 Spring Boot 实现特定的分布式系统模式：简介</title>
      <link>https://dzone.com/articles/intro-to-distributed-system-patterns-in-spring-boot</link>
      <description>【&lt;p&gt;Regarding contemporary software architecture, &lt;a href=&#34;https://dzone.com/articles/demystifying-distributed-systems-a-beginners-guide&#34;&gt;distributed systems&lt;/a&gt; have been widely recognized for quite some time as the foundation for applications with high availability, scalability, and reliability goals. When systems shifted from a centralized structure, it became increasingly important to focus on the components and architectures that support a distributed structure. Regarding the choice of frameworks, &lt;a href=&#34;https://dzone.com/articles/spring-boot-nice-amp-easy-video-8&#34;&gt;Spring Boot&lt;/a&gt; is a widely adopted framework encompassing many tools, libraries, and components to support these patterns. This article will focus on the specific recommendations for implementing various distributed system patterns regarding Spring Boot, backed by sample code and professional advice.&lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;Spring Boot Overview&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;One of the most popular &lt;a href=&#34;https://dzone.com/articles/java-ee-past-present-and-future&#34;&gt;Java EE frameworks&lt;/a&gt; for creating apps is Spring. The Spring framework offers a comprehensive programming and configuration mechanism for the Java platform. It seeks to make Java EE programming easier and increase developers&#39; productivity in the workplace. Any type of deployment platform can use it. It tries to meet modern industry demands by making application development rapid and straightforward. While the Spring framework focuses on giving you flexibility, the goal of Spring Boot is to reduce the amount of code and give developers the most straightforward approach possible to create web applications. Spring Boot&#39;s default codes and annotation setup lessen the time it takes to design an application. It facilitates the creation of stand-alone applications with minimal, if any, configuration. It is constructed on top of a module of the Spring framework.&lt;/p&gt;】&lt;p&gt;就当代软件架构而言，&lt;a href=&#34;https://dzone.com/articles/demystifying-distributed-systems-a-beginners-guide&#34;&gt;分布式系统&lt;/a&gt;在相当长一段时间内已得到广泛认可作为具有高可用性、可扩展性和可靠性目标的应用程序的基础。当系统从集中式结构转变时，关注支持分布式结构的组件和架构变得越来越重要。关于框架的选择，&lt;a href=&#34;https://dzone.com/articles/spring-boot-nice-amp-easy-video-8&#34;&gt;Spring Boot&lt;/a&gt;是一个广泛采用的框架，包含许多工具、库和组件来支持这些模式。本文将重点介绍有关 Spring Boot 实现各种分布式系统模式的具体建议，并提供示例代码和专业建议。&lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;Spring Boot 概述&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;用于创建应用程序的最流行的&lt;a href=&#34;https://dzone.com/articles/java-ee-past-present-and-future&#34;&gt;Java EE 框架&lt;/a&gt;之一是 Spring。 Spring框架为Java平台提供了全面的编程和配置机制。它旨在使 Java EE 编程变得更容易并提高开发人员在工作场所的生产力。任何类型的部署平台都可以使用它。它试图通过使应用程序开发快速而直接来满足现代工业需求。虽然 Spring 框架专注于为您提供灵活性，但 Spring Boot 的目标是减少代码量并为开发人员提供创建 Web 应用程序的最直接的方法。 Spring Boot 的默认代码和注释设置减少了设计应用程序所需的时间。它有助于以最少的配置（如果有的话）创建独立的应用程序。它构建在 Spring 框架的模块之上。&lt;/p&gt;</description>
      <pubDate>Wed, 11 Sep 2024 16:15:05 +0000</pubDate>
    </item>
    <item>
      <title>【How Stalactite ORM Implements Its Fluent DSL】Stalactite ORM 如何实现其 Fluent DSL</title>
      <link>https://dzone.com/articles/how-stalactite-orm-implements-its-fluent-dsl</link>
      <description>【&lt;h2 dir=&#34;ltr&#34;&gt;“DX”, aka Developer Experience&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;One of the goals of Stalactite is to make developers aware of the impact of the mapping of their entities onto the database, and, as a consequence, onto performances. To fulfill this goal, the developer&#39;s experience, as a user of the Mapping API, is key to helping him express his intention.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;The idea is to guide the user-developer in the choices he can make while he describes its persistence. As you may already know, Stalactite doesn’t use annotation or XML files for that. It proposes a fluent API that constrains user choices according to the context. To clarify: available methods after a call to &lt;code&gt;mapOneToOne(..)&lt;/code&gt; are not the same as the ones after &lt;code&gt;mapOneToMany(..)&lt;/code&gt;. This capacity can be done in different ways. Stalactite chose to leverage &lt;a href=&#34;https://dzone.com/articles/using-proxy-design-pattern-in-java&#34;&gt;Java proxies&lt;/a&gt; for it and combines it with the multiple-inheritance capability of interfaces.&lt;/p&gt;】&lt;h2 dir=&#34;ltr&#34;&gt;“DX”，又名开发者体验&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Stalactite 的目标之一是让开发人员意识到将其实体映射到数据库的影响，从而影响性能。为了实现这一目标，开发者作为 Mapping API 用户的经验对于帮助他表达意图至关重要。&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;这个想法是在用户开发者描述其持久性时指导他可以做出的选择。您可能已经知道，Stalactite 不为此使用注释或 XML 文件。它提出了一个流畅的 API，根据上下文限制用户的选择。澄清一下：调用 &lt;code&gt;mapOneToOne(..)&lt;/code&gt; 后的可用方法与 &lt;code&gt;mapOneToMany(..)&lt;/code&gt; 后的可用方法不同。这种能力可以通过不同的方式来实现。 Stalactite 选择利用 &lt;a href=&#34;https://dzone.com/articles/using-proxy-design-pattern-in-java&#34;&gt;Java 代理&lt;/a&gt;，并将其与多重继承功能相结合接口。&lt;/p&gt;</description>
      <pubDate>Wed, 11 Sep 2024 17:30:05 +0000</pubDate>
    </item>
    <item>
      <title>【Optimizing Data Management for AI Success: Industry Insights and Best Practices】优化数据管理以实现人工智能的成功：行业洞察和最佳实践</title>
      <link>https://dzone.com/articles/optimizing-data-management-for-ai-success</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;As artificial intelligence (AI) continues transforming industries, organizations face increasing challenges in managing and utilizing data for AI initiatives. Recent industry surveys and expert insights highlight the critical role of effective data management in AI success. This article explores key trends, challenges, and best practices in data management for AI projects, providing valuable insights for developers, engineers, and architects based on a recent discussion with &lt;a href=&#34;https://www.linkedin.com/in/adrianestala/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Adrian Estala&lt;/a&gt;, VP and Field Chief Data Officer at Starburst.&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;The Imperative of Real-Time Data Access in AI&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Real-time data access has emerged as a crucial factor for AI success. Implementing &lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-real-time-analytics&#34;&gt;real-time analytics&lt;/a&gt; poses several challenges for organizations:&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;随着人工智能 (AI) 不断改变行业，组织在管理和利用 AI 计划数据方面面临着越来越多的挑战。最近的行业调查和专家见解强调了有效的数据管理在人工智能成功中的关键作用。本文探讨了 AI 项目数据管理的主要趋势、挑战和最佳实践，根据最近与 &lt;a href=&#34;https://www.linkedin.com/in 的讨论，为开发人员、工程师和架构师提供了宝贵的见解。 /adrianestala/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Adrian Estala&lt;/a&gt;，Starburst 副总裁兼现场首席数据官。&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;人工智能中实时数据访问的必要性&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;实时数据访问已成为人工智能成功的关键因素。实施&lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-real-time-analytics&#34;&gt;实时分析&lt;/a&gt;给组织带来了一些挑战：&lt;/p&gt;</description>
      <pubDate>Wed, 11 Sep 2024 20:00:05 +0000</pubDate>
    </item>
  </channel>
</rss>