<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【5 Life Hacks to Protect Your Project from Escaped Defects】5个生命黑客保护您的项目免受逃脱的缺陷</title>
      <link>https://dzone.com/articles/protect-your-project-from-escaped-defects</link>
      <description>【&lt;p&gt;Every project team knows that there is nothing worse than getting a message from an annoyed customer that there is a critical bug found in production.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&#39;How did you let this get through? Did you even test this build?!&#39;&lt;/em&gt;&amp;nbsp;These are common complaints that could make your team feel anxious and insecure.&amp;nbsp;&lt;/p&gt;】&lt;p&gt;每个项目团队都知道，没有什么比从烦人的客户那里得到一条消息更糟糕的了，即生产中发现了一个关键的错误。 &lt;/p&gt;&#xA;&lt;p&gt; &lt;em&gt;&#39;您是如何让它通过的？您甚至测试了这个构建吗？！&#39;&lt;/em&gt;这些都是常见的抱怨，可能会使您的团队感到焦虑和不安全。 &lt;/p&gt;</description>
      <pubDate>Mon, 24 Mar 2025 16:15:00 +0000</pubDate>
    </item>
    <item>
      <title>【Leverage Amazon BedRock Chat Model With Java and Spring AI】利用Java和Spring AI的亚马逊基岩聊天模型</title>
      <link>https://dzone.com/articles/amazon-bedrock-chat-model-java-spring-ai</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Hi community!&amp;nbsp;&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;This is my third article in a series of introductions to Spring AI. You may find the first two on the link below:&lt;/p&gt;】&lt;p dir =“ ltr”&gt;嗨社区！ &lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;这是我在Spring AI的一系列介绍中的第三篇文章。您可能会在下面的链接上找到前两个：&lt;/p&gt;</description>
      <pubDate>Mon, 24 Mar 2025 14:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Breaking AWS Lambda: Chaos Engineering for Serverless Devs】Breaking AWS Lambda：无服务器开发人员的混乱工程</title>
      <link>https://dzone.com/articles/art-of-breaking-aws-lambda-chaos-engineering</link>
      <description>【&lt;h2 dir=&#34;ltr&#34;&gt;The Day Our Serverless Dream Turned into a Nightmare&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;It was 3 PM on a Tuesday. Our &#34;serverless&#34; order processing system — built on AWS Lambda and API Gateway — was humming along, handling 1,000 transactions/minute. Then, disaster struck. A sudden spike in traffic caused Lambda timeouts, API Gateway threw 5xx errors, and customers started tweeting, “Why can’t I check out?!”&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;The post-mortem revealed the harsh truth: we’d never tested failure scenarios. Our “resilient” serverless setup had no fallbacks, retries, or plans for chaos.&lt;/p&gt;】&lt;h2 dir =“ ltr”&gt;我们无服务的梦想变成噩梦&lt;/h2&gt;&#xA;&lt;p dir =“ ltr”&gt;是星期二下午3点。我们的“无服务器”订单处理系统（建立在AWS Lambda和API网关上）正在嗡嗡作响，处理1,000件交易/分钟。然后，灾难袭来。流量突然引起了lambda超时，API网关丢下了5xx错误，客户开始发推文：“我为什么不能退房？！” &lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;验尸揭示了苛刻的事实：我们从未测试过故障场景。我们的“弹性”无服务器设置没有混乱的后备，检索或计划。&lt;/p&gt;</description>
      <pubDate>Mon, 24 Mar 2025 18:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Recommender Systems Best Practices: Collaborative Filtering】推荐系统最佳实践：协作过滤</title>
      <link>https://dzone.com/articles/recommender-systems-collaborative-filtering</link>
      <description>【&lt;p&gt;Recommender systems serve as the backbone of e-commerce, streaming platforms, and online marketplaces, enabling personalized user experiences by predicting preferences and suggesting items based on historical interactions. They are built using explicit and/or implicit feedback from users.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;Explicit feedback includes direct user inputs, such as ratings and reviews, which provide clear indications of preference but are often sparse. Implicit feedback, such as clicks, views, purchase history, and dwell time, is more abundant but requires specialized algorithms to interpret user intent accurately.&lt;/p&gt;】&lt;p&gt;推荐系统充当电子商务，流媒体平台和在线市场的骨干，通过预测偏好并根据历史互动提出项目来实现个性化的用户体验。它们是使用用户的明确和/或隐式反馈构建的。 &lt;/p&gt;&#xA;&lt;p&gt;显式反馈包括直接的用户输入，例如评级和评论，这些输入提供了明确的偏好指示，但通常很少。隐性反馈（例如点击，视图，购买历史记录和停留时间）更丰富，但需要专门的算法才能准确解释用户意图。&lt;/p&gt;</description>
      <pubDate>Mon, 24 Mar 2025 13:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【How to Build a React Native Chat App for Android】如何为Android构建React本地聊天应用程序</title>
      <link>https://dzone.com/articles/build-a-react-native-chat-app-for-android</link>
      <description>【&lt;p&gt;In this tutorial, we will walk you through the complete process of integrating the MirrorFly Chat SDK into your React Native app. With this &lt;a href=&#34;https://www.mirrorfly.com/react-native-chat-sdk.php&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;React Native Chat SDK&lt;/a&gt;, you can create a real-time chat app within &lt;strong&gt;10 minutes&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Moving forward, we&#39;ll cover the following steps:&lt;/p&gt;】&lt;p&gt;在本教程中，我们将带您完成将MirrorFly Chat SDK集成到您的React Antive应用程序中的完整过程。使用此&lt;a href =“ https://www.mirrorfly.com/reaect-native-chat-sdk.php” rel =“ noopener noreferrer” target =“ _ black”&gt; react本地聊天sdk &lt;/a&gt;，您可以在&lt;/prong&gt; 10分钟内创建一个实时聊天应用程序&lt;/p&gt;。&#xA;&lt;p&gt;前进，我们将介绍以下步骤：&lt;/p&gt;</description>
      <pubDate>Mon, 24 Mar 2025 17:15:00 +0000</pubDate>
    </item>
    <item>
      <title>【Introduce a New API Quickly Using Spring Boot and Gradle】使用Spring Boot和Gradle迅速引入新的API</title>
      <link>https://dzone.com/articles/introduce-new-api-spring-boot-gradle</link>
      <description>【&lt;p&gt;For the last five years, I’ve had the quote “Everything begins with an idea” on the wall of my office.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;My wife found this product on &lt;a href=&#34;https://www.etsy.com/listing/1606511468/everything-begins-with-an-idea-o&#34;&gt;Etsy&lt;/a&gt; shortly after I started developing an API collection for a fitness application. I love this statement because it captures the passion that consumes me during the creation stages of a new project. This is still my favorite aspect of being an engineer, even three decades into my career.&lt;/p&gt;】&lt;p&gt;在过去的五年中，我的办公室墙上有“一切都以一个想法开头”的报价。&lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;我的妻子在&lt;a href =“ https://www.etsy.com/listing/1606511468/everythe-begins-begins-withs-with-with-an-idea-o-o”&gt; eTsy&gt; eTsy &lt;/a&gt;我开始开发适合应用程序的API收集后不久。我喜欢这个声明，因为它捕捉了在新项目的创建阶段中消耗我的激情。这仍然是我最喜欢成为工程师的方面，即使是我职业生涯的三十年。&lt;/p&gt;</description>
      <pubDate>Mon, 24 Mar 2025 12:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Hybrid Backup Strategies: On-Premises vs Cloud for DevOps】混合备份策略：本地与DevOps的云</title>
      <link>https://dzone.com/articles/hybrid-backup-strategies-on-premises-vs-cloud-devops</link>
      <description>【&lt;p&gt;Where is it safer to keep your DevOps data backups — in the cloud or on-premise? For sure, when it comes to SMBs or large businesses, everything depends on their corporate, legal, or compliance requirements. Their security teams have a proper evaluation of the security issues of each of the deployment models for a backup and analyze which one suits them the most.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;However, while many companies opt for one of the variants, others are starting to rely more on a hybrid deployment model.&amp;nbsp;&lt;/p&gt;】&lt;p&gt;将DevOps数据备份保留在云或本地中，将DevOps数据备份保留在哪里？可以肯定的是，在中小型企业或大型企业方面，一切都取决于其公司，法律或合规性要求。他们的安全团队对备份的每个部署模型的安全问题进行了适当的评估，并分析了最适合他们的安全问题。 &lt;/p&gt;&#xA;&lt;p&gt;但是，尽管许多公司选择其中一个变体，但其他公司开始更多地依赖混合部署模型。 &lt;/p&gt;</description>
      <pubDate>Mon, 24 Mar 2025 20:30:00 +0000</pubDate>
    </item>
    <item>
      <title>【Text Clustering With Deepseek Reasoning】文本聚类与DeepSeek推理</title>
      <link>https://dzone.com/articles/text-clustering-with-deepseek-reasoning</link>
      <description>【&lt;p&gt;In this article, we will explore the world of reasoning in LLM. DeepSeek has provided us with an excellent tool to explain our inferences and build machine learning systems that inspire more confidence and trust from end users.&lt;/p&gt;&#xA;&lt;p&gt;Machine learning models are black boxes by default and do not provide out-of-box &lt;a href=&#34;https://dzone.com/articles/xai-building-trust-and-transparency&#34;&gt;explanations&lt;/a&gt; (XAI) for their decisions. We will use the &lt;a href=&#34;https://dzone.com/articles/deepseek-on-kubernetes-ai-powered-reasoning-at-sca&#34;&gt;DeepSeek model&lt;/a&gt; and try to add the explanation or reasoning aspect to our machine learning world.&lt;/p&gt;】&lt;p&gt;在本文中，我们将探索LLM中推理的世界。 DeepSeek为我们提供了一种很好的工具来解释我们的推论并建立机器学习系统，从而激发了最终用户的更信心和信任。&lt;/p&gt;&#xA;&lt;p&gt;机器学习模型默认情况下是黑匣子，并且不提供离框&lt;a href =“ https://dzone.com/articles/xai-building-trust-----------------------------------------transparency”&gt;说明&gt;（xai）&lt;/a&gt;（xai）的决定。我们将使用&lt;a href =“ https://dzone.com/articles/deepseek-on-kubernetes-ai-power-reasoning-reasoning-at-sca”&gt; DeepSeek模型&lt;/a&gt;，并尝试将解释或推理方面添加到我们的机器学习世界中。</description>
      <pubDate>Mon, 24 Mar 2025 19:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Supercharging Pytest: Integration With External Tools】增压pytest：与外部工具集成</title>
      <link>https://dzone.com/articles/supercharging-pytest-integration-external-tools</link>
      <description>【&lt;p&gt;Testing is a crucial aspect of software development, and while Python’s Pytest framework is powerful on its own, integrating it with external tools can significantly enhance the testing workflow.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;Let&#39;s explore how to supercharge &lt;a href=&#34;https://dzone.com/articles/purpose-of-pytest-fixtures-guide&#34;&gt;Pytest implementation&lt;/a&gt; by combining it with various complementary tools and systems.&lt;/p&gt;】&lt;p&gt;测试是软件开发的关键方面，尽管Python的Pytest框架本身具有强大的功能，但将其与外部工具集成在一起可以显着增强测试工作流程。 &lt;/p&gt;&#xA;&lt;p&gt;让我们探索如何增压&lt;a href =“ https://dzone.com/articles/purpose-of-pytest-fixtures-guide-guide”&gt; pytest实现&lt;/a&gt;通过将其与各种互补工具和系统相结合。&lt;/p&gt;</description>
      <pubDate>Mon, 24 Mar 2025 15:30:00 +0000</pubDate>
    </item>
    <item>
      <title>【The Role of Sanity Testing in Performance Engineering】理智测试在绩效工程中的作用</title>
      <link>https://dzone.com/articles/sanity-testing-performance-engineering</link>
      <description>【&lt;p data-pm-slice=&#34;1 1 []&#34;&gt;As a CTO, my role extends beyond overseeing technical solutions — I work closely with engineering teams to ensure performance testing strategies align with business goals. One of the recurring challenges I’ve observed is how sanity testing, despite being a simple step, often determines the success or failure of performance testing efforts.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p data-pm-slice=&#34;1 1 []&#34;&gt;Many teams focus on running large-scale performance tests, ensuring their applications can handle peak loads, but neglect the essential first step — validating the test scripts and basic system functionality before executing a full-scale load test. Over the years, I’ve seen how overlooking this step can lead to wasted time, misleading results, and frustration.&lt;/p&gt;】&lt;p data-pm-slice =“ 1 1 []&gt;作为CTO，我的角色不仅仅是监督技术解决方案 - 我与工程团队紧密合作，以确保绩效测试策略与业务目标保持一致。我观察到的反复挑战之一是，尽管是一个简单的步骤，但理智测试通常会决定绩效测试工作的成功或失败。 &lt;/p&gt;&#xA;&lt;p data-pm-slice =“ 1 1 []&gt;许多团队专注于运行大规模的性能测试，确保其应用程序可以处理峰值负载，但忽略了基本的第一步 - 在执行全尺度负载测试之前验证测试脚本和基本系统功能。多年来，我已经看到忽视这一步骤会导致浪费时间，误导成果和沮丧。&lt;/p&gt;。</description>
      <pubDate>Mon, 24 Mar 2025 22:15:00 +0000</pubDate>
    </item>
  </channel>
</rss>