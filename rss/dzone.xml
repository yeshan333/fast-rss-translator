<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Modern ETL Architecture: dbt on Snowflake With Airflow】现代ETL体系结构：DBT在雪花上与气流</title>
      <link>https://dzone.com/articles/dbt-on-snowflake-with-airflow</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;The modern discipline of data engineering considers ETL (extract, transform, load) one of the processes that must be done to manage and transform data effectively. This article explains how to create an ETL pipeline that can scale and uses dbt (Data Build Tool) for transformation, Snowflake as a data warehouse, and Apache Airflow for orchestration.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;The article will propose the architecture of the pipeline, provide the folder structure, and describe the deployment strategy that will help optimize data flows. In the end, you will have a clear roadmap on how to implement a scalable ETL solution with these powerful tools.&lt;/p&gt;】&lt;p dir =“ ltr”&gt;数据工程的现代学科认为ETL（提取，变换，加载）是有效管理和转换数据的过程之一。本文解释了如何创建可以扩展和使用DBT（数据构建工具）进行转换，雪花作为数据仓库的ETL管道以及用于编排的Apache气流。 &lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;文章将提出管道架构，提供文件夹结构，并描述将有助于优化数据流的部署策略。最后，您将在如何使用这些强大的工具实现可扩展的ETL解决方案方面有一个清晰的路线图。&lt;/p&gt;</description>
      <pubDate>Thu, 27 Feb 2025 23:15:00 +0000</pubDate>
    </item>
    <item>
      <title>【The Outbox Pattern: Reliable Messaging in Distributed Systems】输出模式：分布式系统中的可靠消息传递</title>
      <link>https://dzone.com/articles/outbox-pattern-reliable-messaging-distributed-systems</link>
      <description>【&lt;p&gt;The &lt;strong&gt;Outbox Pattern&lt;/strong&gt; is a design pattern in distributed systems that is used to ensure reliable event publishing and state consistency between different services or databases. It is primarily used in scenarios like when a system is required to update a database and publish events atomically.&lt;/p&gt;&#xA;&lt;p&gt;In distributed systems, there are often challenges in maintaining consistency during the process of writing to a database and sending messages. For example, consider a payment processing system where you are required to update the transaction status in the database and send an event to another service about the status that got updated (e.g., payment confirmation event). If either the database update fails or the message fails publishing fails, inconsistencies can arise in the current system or another system that failed to consume the event, potentially leading to business losses.&lt;/p&gt;】&lt;p&gt; &lt;strong&gt;输出模式&lt;/strong&gt;是分布式系统中的设计模式，用于确保可靠的事件发布和不同服务或数据库之间的状态一致性。它主要用于场景中，例如需要系统来更新数据库并在原子上发布事件。&lt;/p&gt;&#xA;&lt;p&gt;在分布式系统中，在编写数据库和发送消息的过程中保持一致性通常存在挑战。例如，考虑一个付款处理系统，要求您在数据库中更新交易状态，并将事件发送到另一个有关已更新状态的服务（例如，付款确认事件）。如果数据库更新失败或消息失败出版失败，则可能在当前系统中出现不一致或其他无法消耗事件的系统，可能导致业务损失。&lt;/p&gt;</description>
      <pubDate>Thu, 27 Feb 2025 15:00:28 +0000</pubDate>
    </item>
    <item>
      <title>【Handling Embedded Data in NoSQL With Java】使用Java处理NOSQL中的嵌入式数据</title>
      <link>https://dzone.com/articles/handling-embedded-data-in-nosql-with-java</link>
      <description>【&lt;p data-pm-slice=&#34;1 1 []&#34;&gt;NoSQL databases differ from relational databases by allowing more complex structures without requiring traditional relationships such as one-to-many or one-to-one. Instead, NoSQL databases leverage flexible types, such as arrays or subdocuments, to store related data efficiently within a single document. This flexibility enables developers to design models that suit their application&#39;s querying and performance needs.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/jakarta-nosql-the-main-idea-behind-the-api&#34;&gt;Jakarta NoSQL&lt;/a&gt; is a Java framework that simplifies interactions with NoSQL databases, including MongoDB. It provides annotations that determine how data is mapped and stored, allowing developers to control whether embedded objects are grouped or stored in a flat manner.&lt;/p&gt;】&lt;p data-pm-slice =“ 1 1 []&gt; NOSQL数据库与关系数据库不同，而允许更复杂的结构而不需要传统关系，例如一对多或一对一或一对一的关系。相反，NOSQL数据库利用灵活的类型（例如数组或子图表）有效地存储在单个文档中。这种灵活性使开发人员能够设计适合其应用程序查询和性能需求的模型。&lt;/p&gt;&#xA;&lt;p&gt; &lt;a href =“ https://dzone.com/articles/jakarta-nosql-the-main-idea-behind-the-api”&gt; jakarta nosql &lt;/a&gt;是一个Java框架，简化了与NOSQL数据库（包括Mongongodb）的交互。它提供了确定数据映射和存储方式的注释，从而允许开发人员控制嵌入式对象是否以平坦的方式进行分组或存储。&lt;/p&gt;</description>
      <pubDate>Thu, 27 Feb 2025 16:30:01 +0000</pubDate>
    </item>
    <item>
      <title>【The Tree of DevEx: Branching Out and Growing the Developer Experience】Devex的树：分支并增进开发人员的体验</title>
      <link>https://dzone.com/articles/developer-experience-branching-out-and-growing</link>
      <description>【&lt;p data-end=&#34;553&#34; data-start=&#34;106&#34;&gt;&lt;em&gt;Editor&#39;s Note: The following is an infographic written for and published in DZone&#39;s 2025 Trend Report,&amp;nbsp;&lt;/em&gt;&lt;a href=&#34;https://dzone.com/link/2025-tr-devex-contributor-article&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;Developer Experience: The Coalescence of Developer Productivity, Process Satisfaction, and Platform Engineering&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p data-end=&#34;553&#34; data-start=&#34;106&#34;&gt;Engineering teams are recognizing the importance of &lt;strong data-end=&#34;190&#34; data-start=&#34;158&#34;&gt;developer experience (DevEx)&lt;/strong&gt; and&lt;strong data-end=&#34;190&#34; data-start=&#34;158&#34;&gt;&amp;nbsp;&lt;/strong&gt;going beyond DevOps tooling to improve workflows, invest in infrastructure, and advocate for developers&#39; needs. By prioritizing things such as internal developer platforms, process automation, platform engineering, and feedback loops, organizations can remove friction from development workflows, and developers gain more control over their systems, teams, and processes.&lt;/p&gt;】&lt;p data-end=&#34;553&#34; data-start=&#34;106&#34;&gt;&lt;em&gt;Editor&#39;s Note: The following is an infographic written for and published in DZone&#39;s 2025 Trend Report, &lt;/em&gt;&lt;a href=&#34;https://dzone.com/link/2025-tr-devex-contributor-article&#34; rel=&#34;noopener noreferrer&#34; target =“ _ blank”&gt; &lt;em&gt;开发人员体验：开发人员生产力，过程满意度和平台工程的合并&lt;/em&gt; &lt;/a&gt;。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p data-end=&#34;553&#34; data-start=&#34;106&#34;&gt;Engineering teams are recognizing the importance of &lt;strong data-end=&#34;190&#34; data-start=&#34;158&#34;&gt;developer experience (DevEx)&lt;/strong&gt; and&lt;strong data-end=&#34;190&#34; data-start=&#34;158&#34;&gt; &lt;/strong&gt;going beyond DevOps tooling to improve workflows, invest in infrastructure, and advocate for developers&#39; needs.通过优先考虑内部开发人员平台，流程自动化，平台工程和反馈循环等内容，组织可以从开发工作流中消除摩擦，并获得对其系统，团队和流程的更多控制。&lt;/p&gt;</description>
      <pubDate>Thu, 27 Feb 2025 22:45:00 +0000</pubDate>
    </item>
    <item>
      <title>【Efficient Multimodal Data Processing: A Technical Deep Dive】有效的多模式数据处理：技术深入研究</title>
      <link>https://dzone.com/articles/efficient-multimodal-data-processing</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Multimodal data processing is the evolving need of the latest data platforms powering applications like recommendation systems, autonomous vehicles, and medical diagnostics. Handling multimodal data spanning text, images, videos, and sensor inputs requires resilient architecture to manage the diversity of formats and scale.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;In this article, I will walk through a comprehensive end-to-end architecture for efficient multimodal data processing while striking a balance in scalability, latency, and accuracy by leveraging GPU-accelerated pipelines, advanced &lt;a href=&#34;https://dzone.com/articles/understanding-the-basics-of-neural-networks-and-de&#34;&gt;neural networks&lt;/a&gt;, and hybrid storage platforms.&lt;/p&gt;】&lt;p dir =“ ltr”&gt;多模式数据处理是对最新数据平台的不断发展的需求，启动了推荐系统，自动驾驶汽车和医疗诊断。处理跨越文本，图像，视频和传感器输入的多模式数据需要弹性架构来管理格式和规模的多样性。&lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;在本文中，我将通过利用GPU-ACCELERERATED管道来实现可伸缩性，延迟和准确性的平衡，而Advanced &lt;a href &lt;a href =”网络&lt;/a&gt;和混合存储平台。&lt;/p&gt;</description>
      <pubDate>Thu, 27 Feb 2025 14:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Top Methods to Improve ETL Performance Using SSIS】使用SSI提高ETL性能的最佳方法</title>
      <link>https://dzone.com/articles/improve-etl-performance-ssis</link>
      <description>【&lt;p data-end=&#34;373&#34; data-start=&#34;0&#34;&gt;Extract, transform, and load (ETL) is the backbone of many data warehouses. In the data warehouse world, data is managed through the ETL process, which consists of three steps: &lt;strong data-end=&#34;188&#34; data-start=&#34;177&#34;&gt;extract&lt;/strong&gt;—pulling or acquiring data from sources, &lt;strong data-end=&#34;242&#34; data-start=&#34;229&#34;&gt;transform&lt;/strong&gt;—converting data into the required format, and &lt;strong data-end=&#34;297&#34; data-start=&#34;289&#34;&gt;load&lt;/strong&gt;—pushing data to the destination, typically a data warehouse or data mart.&lt;/p&gt;&#xA;&lt;p data-end=&#34;622&#34; data-is-last-node=&#34;&#34; data-is-only-node=&#34;&#34; data-start=&#34;375&#34;&gt;SQL Server Integration Services (SSIS) is an ETL tool widely used for developing and managing enterprise data warehouses. Given that data warehouses handle large volumes of data, performance optimization is a key challenge for architects and DBAs.&lt;/p&gt;】&lt;p data-end =“ 373” data-start =“ 0”&gt;提取，变换和负载（ETL）是许多数据仓库的骨干。 In the data warehouse world, data is managed through the ETL process, which consists of three steps: &lt;strong data-end=&#34;188&#34; data-start=&#34;177&#34;&gt;extract&lt;/strong&gt;—pulling or acquiring data from sources, &lt;strong data-end=&#34;242&#34; data-start=&#34;229&#34;&gt;transform&lt;/strong&gt;—converting data into the required format, and &lt;strong data-end=&#34;297&#34; data-start =“ 289”&gt; load &lt;/strong&gt;  - 将数据列入目的地，通常是数据仓库或数据集市。&lt;/p&gt;&#xA;&lt;p data-end =“ 622” data-is-last-node =“” data-is-inly-node =“” data-start =“ 375”&gt; SQL Server Integration Services（SSIS）是一种广泛用于开发和管理企业数据仓库的ETL工具。鉴于数据仓库处理大量数据，因此性能优化是建筑师和DBA的关键挑战。&lt;/p&gt;</description>
      <pubDate>Thu, 27 Feb 2025 21:45:00 +0000</pubDate>
    </item>
    <item>
      <title>【Micronaut vs Spring Boot: A Detailed Comparison】Micronaut vs Spring Boot：详细比较</title>
      <link>https://dzone.com/articles/micronaut-vs-spring-boot-detailed-comparison</link>
      <description>【&lt;p dir=&#34;ltr&#34; style=&#34;text-align: left;&#34;&gt;Micronaut and Spring Boot are popular frameworks for developing microservices in Java. They offer robust features for REST API, but their approach towards dependency injection, start-up time, and memory usage differ. This article presents a detailed comparison between both frameworks on various parameters such as implementation, performance metrics, and usefulness of each framework.&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34; style=&#34;text-align: left;&#34;&gt;&lt;strong&gt;The Micronaut Framework Overview&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34; style=&#34;text-align: left;&#34;&gt;This is a recently developed framework aimed to develop faster microservices and serverless services. Its main feature of compile-time dependency injection results in faster startup times and less memory usage. It has built-in support for cloud environments and serverless deployments and can be integrated with GraalVM. This makes the Micronaut framework suitable for applications where resource utilization is paramount.&lt;/p&gt;】&lt;p dir =“ ltr” style =“ text-align：left;”&gt; micronaut和spring靴是在Java中开发微服务的流行框架。它们为REST API提供了强大的功能，但是他们对依赖注入，启动时间和内存使用的方法有所不同。本文对两个框架之间的各种参数（例如实现，性能指标和每个框架的实用性）进行了详细的比较。&lt;/p&gt;&#xA;在&#xA;&lt;p dir =“ ltr” style =“ text-align：left;”&gt;这是一个最近开发的框架，旨在开发更快的微服务和无服务器服务。它的编译时间依赖注入的主要特征会导致更快的启动时间和更少的内存使用情况。它具有对云环境和无服务器部署的内置支持，并且可以与Graalvm集成。这使Micronaut框架适用于最重要的资源利用的应用。&lt;/p&gt;</description>
      <pubDate>Thu, 27 Feb 2025 17:30:00 +0000</pubDate>
    </item>
    <item>
      <title>【Psychological Safety as a Competitive Edge】心理安全作为竞争优势</title>
      <link>https://dzone.com/articles/psychological-safety-as-a-competitive-edge</link>
      <description>【&lt;p&gt;Psychological safety isn’t about fluffy “niceness” — it is the foundation of agile teams that innovate, adapt, and deliver.&lt;/p&gt;&#xA;&lt;p&gt;When teams fearlessly debate ideas, admit mistakes, challenge norms, and find ways to make progress, they can outperform most competitors. Yet, many organizations knowingly or unknowingly sabotage &lt;a href=&#34;https://dzone.com/articles/agile-teamwork&#34;&gt;psychological safety&lt;/a&gt; — a short-sighted and dangerous attitude in a time when knowledge is no longer the moat it used to be. Read on to learn how to keep your competitive edge.&lt;/p&gt;】&lt;p&gt;心理安全不是关于蓬松的“善良”，而是敏捷团队的基础，适应和交付。&lt;/p&gt;&#xA;&lt;p&gt;当团队无所畏惧地辩论想法，承认错误，挑战规范并找到取得进步的方法时，他们可以胜过大多数竞争对手。然而，许多组织在不知所措的情况下有意或在不知不觉中破坏&lt;a href =“ https://dzone.com/articles/agile-teamwork”&gt;心理安全&lt;/a&gt;  - 在知识不再是曾经曾经是的护城河的时候，短暂而危险的态度。继续阅读以了解如何保持竞争优势。&lt;/p&gt;</description>
      <pubDate>Thu, 27 Feb 2025 22:15:00 +0000</pubDate>
    </item>
    <item>
      <title>【How to Set Up Redis Properties Programmatically】如何以编程方式设置redis属性</title>
      <link>https://dzone.com/articles/how-to-set-up-redis-properties-programmatically</link>
      <description>【&lt;p&gt;Redis is a high-performance NoSQL database that is usually used as an in-memory caching solution. However, it is very useful as the primary datastore solution.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;In this article, we will see how to set up Redis properties programmatically on the example of a Spring application. In many use cases, &lt;a href=&#34;https://dzone.com/articles/how-to-search-for-java-objects-stored-in-redis&#34;&gt;objects stored in Redis&lt;/a&gt; may be valid only for a certain amount of time.&amp;nbsp;&lt;/p&gt;】&lt;p&gt; redis是一种高性能的NOSQL数据库，通常用作内存中的缓存解决方案。但是，它作为主要数据存储解决方案非常有用。 &lt;/p&gt;&#xA;&lt;p&gt;在本文中，我们将在Spring应用程序的示例中查看如何以编程方式设置Redis属性。在许多用例中，&lt;a href =“ https://dzone.com/articles/how-to-search-for-java-objects-stored-in-redis---------&gt; redis中存储的对象&lt;/a&gt;可能仅在一定时间内有效。 &lt;/p&gt;</description>
      <pubDate>Thu, 27 Feb 2025 21:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【STRIDE: A Guide to Threat Modeling and Secure Implementation】大步：威胁建模和安全实施的指南</title>
      <link>https://dzone.com/articles/stride-threat-modeling-guide-secure-implementation</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Threat modeling is often perceived as an intimidating exercise reserved for security experts. However, this perception is misleading. Threat modeling is designed to help envision a system or application from an attacker&#39;s perspective. Developers can also adopt this approach to design secure systems from the ground up. This article uses real-world implementation patterns to explore a practical threat model for a cloud monitoring system.&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;What Is Threat Modeling?&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Shostack (2014) states that &lt;a href=&#34;https://dzone.com/articles/what-is-threat-modeling&#34;&gt;threat modeling&lt;/a&gt; is &#34;a structured approach to identifying, evaluating, and mitigating risks to system security.&#34; Simply put, it requires developers and architects to visualize a system from an attacker’s perspective. Entry points, exit points, and system boundaries are evaluated to understand how they could be compromised. An effective threat model blends architectural precision with detective-like analysis. Threat modeling is not a one-time task but an ongoing process that evolves as systems change and new threats emerge.&lt;/p&gt;】&lt;p dir =“ ltr”&gt;威胁建模通常被认为是为安全专家保留的恐吓练习。但是，这种看法具有误导性。威胁建模旨在从攻击者的角度帮助设想系统或应用程序。开发人员还可以采用这种方法来从头开始设计安全系统。本文使用现实世界实现模式来探索云监视系统的实用威胁模型。&lt;/p&gt;&#xA;&lt;h2 dir =“ ltr”&gt;什么是威胁建模？&lt;/h2&gt;&#xA;&lt;p dir =“ ltr”&gt; Shostack（2014）指出，&lt;a href =“ https://dzone.com/articles/what-is-is-threat-modeling”&gt;威胁建模&lt;/a&gt;是“识别，评估和减轻系统安全风险的结构化方法”。简而言之，它要求开发人员和架构师从攻击者的角度来看系统。评估入口点，出口点和系统边界，以了解如何妥协它们。有效的威胁模型将建筑精确度与侦探样分析融为一体。威胁建模不是一次性任务，而是一个正在进行的过程，随着系统的变化和新威胁的出现。&lt;/p&gt;</description>
      <pubDate>Thu, 27 Feb 2025 20:15:00 +0000</pubDate>
    </item>
  </channel>
</rss>