<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Why I Started Using Dependency Injection in Python】为什么我开始在Python中使用依赖注入</title>
      <link>https://dzone.com/articles/why-i-started-using-dependency-injection-in-python</link>
      <description>【&lt;p data-line=&#34;3&#34; dir=&#34;auto&#34;&gt;When I first started building real-world projects in Python, I was excited just to get things working. I had classes calling other classes, services spun up inside constructors, and everything somehow held together.&lt;/p&gt;&#xA;&lt;p data-line=&#34;5&#34; dir=&#34;auto&#34;&gt;But deep down, I knew something was off.&lt;/p&gt;】&lt;p data-line =“ 3” dir =“ auto”&gt;我第一次开始在Python构建现实世界项目时，我很高兴只是为了使事情正常工作。我上课了其他课程，服务在构造函数内部旋转，并且一切都以某种方式结合在一起。&lt;/p&gt;&#xA;&lt;p data-line =“ 5” dir =“ auto”&gt;，但我知道有些事情发生了。&lt;/p&gt;</description>
      <pubDate>Mon, 28 Apr 2025 20:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Building a Simple Todo App With Model Context Protocol (MCP)】使用模型上下文协议（MCP）构建一个简单的TODO应用程序</title>
      <link>https://dzone.com/articles/building-to-do-app-with-mcp</link>
      <description>【&lt;h2&gt;What Is MCP?&lt;/h2&gt;&#xA;&lt;p&gt;The &lt;strong&gt;Model Context Protocol (MCP)&lt;/strong&gt; is an open protocol that standardizes how applications, tools, and AI models provide and access context. Think of MCP as the “USB-C port for AI applications”—just as USB-C lets you connect all sorts of devices with a single standard, MCP lets you connect AI models, desktop apps, and tools to a wide variety of data sources and capabilities in a consistent way.&lt;/p&gt;&#xA;&lt;p&gt;MCP is especially useful for &lt;a href=&#34;https://dzone.com/articles/building-custom-tools-model-context-protocol&#34;&gt;building agents and complex workflows&lt;/a&gt; on top of large language models (LLMs), making it easy to integrate your own data and tools into AI-powered environments.&lt;/p&gt;】&lt;h2&gt;什么是MCP？&lt;/h2&gt;&#xA;&lt;p&gt; &lt;strong&gt;模型上下文协议（MCP）&lt;/strong&gt;是一个开放协议，标准化了应用程序，工具和AI模型如何提供和访问上下文。将MCP视为“ AI应用程序的USB-C端口”，就像USB-C可以使您连接各种设备，MCP可让您以始终的方式连接AI模型，桌面应用程序和工具，并将工具连接到各种数据源和功能。&lt;/p&gt;。&lt;/p&gt;。&lt;/p&gt;&#xA;&lt;p&gt; mcp对于&lt;a href =“ https://dzone.com/articles/building-custom-tools-tools-model-context-protolocol”&gt;建筑物和复杂的工作流程&lt;/a&gt;大型语言模型（LLMS）（LLMS），使您可以轻松地将自己的数据和工具集成到环境中。</description>
      <pubDate>Mon, 28 Apr 2025 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Doris: Unifying SQL Dialects for a Seamless Data Query Ecosystem】多丽丝：无缝数据查询生态系统的SQL方言</title>
      <link>https://dzone.com/articles/doris-sql-dialects-unified-data-query</link>
      <description>【&lt;p&gt;In the field of big data, different database systems often use different SQL dialects. This is similar to people from different regions speaking different languages, which brings great trouble to data analysts and developers. When an enterprise needs to integrate multiple data sources for analysis, it may have to spend a great deal of time and effort switching between different SQL syntaxes.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;However, &lt;a href=&#34;https://dzone.com/articles/introduction-to-apache-doris-a-next-generation-rea&#34;&gt;Apache Doris&lt;/a&gt; breaks this barrier with its powerful SQL dialect compatibility and builds a unified data query ecosystem for users.&lt;/p&gt;】&lt;p&gt;在大数据领域，不同的数据库系统通常使用不同的SQL方言。这类似于来自不同地区的人说不同语言的人，这给数据分析师和开发人员带来了很大的麻烦。当企业需要集成多个数据源进行分析时，它可能必须花费大量时间和精力在不同的SQL语法之间切换。 &lt;/p&gt;&#xA;&lt;p&gt;然而，&lt;a href =“ https://dzone.com/articles/introduction-to--apache-doris-a-a-next-generation-rea--rea”&gt; apache doris &lt;/a&gt;通过其功能强大的SQL方言的能力打破了这一障碍，并构建了一个统一的数据Query EcoSystem for Users。</description>
      <pubDate>Mon, 28 Apr 2025 19:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Building Data Pipelines With Jira API】使用JIRA API构建数据管道</title>
      <link>https://dzone.com/articles/building-data-pipelines-with-jira-api</link>
      <description>【&lt;p&gt;I’ve spent years building data pipelines and connecting project management to technical workflows. Disconnected systems lead to manual errors and delays, problems that Jira’s API helps solve.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;This tool lets code interact directly with project boards, &lt;a href=&#34;https://www.atlassian.com/software/jira/guides/automation/overview#what-is-automation&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;automating tasks&amp;nbsp;&lt;/a&gt;&lt;span style=&#34;margin: 0px; padding: 0px;&#34;&gt;&lt;a href=&#34;https://www.atlassian.com/software/jira/guides/automation/overview#what-is-automation&#34; target=&#34;_blank&#34;&gt;such as creating tickets&lt;/a&gt;&amp;nbsp;when data checks fail or updating statuses after ETL&lt;/span&gt;.&lt;/p&gt;】&lt;p&gt;我花了多年的时间构建数据管道并将项目管理与技术工作流程联系起来。断开的系统会导致手动错误和延迟，这是JIRA API有助于解决的问题。 &lt;/p&gt;&#xA;&lt;p&gt;此工具让代码可以直接与项目委员会进行交互，&lt;a href =“ https://www.atlassian.com/software/jira/guides/guides/automation/overview#what-what-what-is-automation“ rel =” rel =“ noopener noreferrer noreferrer noreferrer nooreferrer” target =“ _ black”&gt; black&gt;自动任务， 0px;“&gt; &lt;a href =” https://www.atlassian.com/software/jira/guides/guides/automation/automation/overview#hat-what-is-automation&#39;target =“ _ black”&gt;，例如创建票证&lt;/a&gt;当数据检查或更新eTl &lt;/pass eTl &lt;/pass &lt;/pas &lt;/pas&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt;。</description>
      <pubDate>Mon, 28 Apr 2025 19:30:00 +0000</pubDate>
    </item>
    <item>
      <title>【Building Event-Driven Go Applications With Azure Cosmos DB and Azure Functions】使用Azure Cosmos DB和Azure功能建立事件驱动的GO应用程序</title>
      <link>https://dzone.com/articles/building-go-azure-functions-cosmos-db</link>
      <description>【&lt;p&gt;The Go programming language is a great fit for building serverless applications. Go applications can be easily compiled to a single, statically linked binary, making deployment simple and reducing external dependencies. They start up quickly, which is ideal for serverless environments where functions are frequently invoked from a cold start. Go applications also tend to use less memory compared to other languages, helping optimize resource usage and reduce costs in serverless scenarios.&lt;/p&gt;&#xA;&lt;p&gt;Azure Functions supports Go using &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/azure-functions/functions-custom-handlers&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;custom handlers&lt;/a&gt;, and you can use triggers and input and output bindings via extension bundles. Azure Functions is &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/azure-functions/functions-bindings-cosmosdb-v2?tabs=isolated-process%2Cextensionv4&amp;amp;pivots=programming-language-csharp&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;tightly integrated with Azure Cosmos DB&lt;/a&gt; using bindings (input, output) and triggers.&lt;/p&gt;】&lt;p&gt; GO编程语言非常适合构建无服务器应用程序。 GO应用程序可以轻松地编译到单个静态链接的二进制文件中，从而使部署简单而减少了外部依赖关系。它们快速启动，这是无服务器环境的理想选择，在冷启动中经常调用功能。与其他语言相比，GO应用程序还倾向于使用更少的内存，有助于优化资源使用情况并降低无服务器方案的成本。&lt;/p&gt;&#xA;&lt;p&gt;Azure Functions supports Go using &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/azure-functions/functions-custom-handlers&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;custom handlers&lt;/a&gt;, and you can use triggers and input and output bindings via extension bundles. Azure函数为&lt;a href =“ https://learn.microsoft.com/en-us/azure/azure-functions/functions/functions-bindings-bindings-cosmosdb-v2？ Azure Cosmos DB &lt;/a&gt;使用绑定（输入，输出）和触发器。&lt;/p&gt;</description>
      <pubDate>Mon, 28 Apr 2025 14:30:00 +0000</pubDate>
    </item>
    <item>
      <title>【Contextual AI Integration for Agile Product Teams】敏捷产品团队的上下文AI集成</title>
      <link>https://dzone.com/articles/contextual-ai-integration-for-agile-product-teams</link>
      <description>【&lt;h2&gt;TL; DR: Not Onboarding But Integration&lt;/h2&gt;&#xA;&lt;p&gt;Stop treating AI as a team member to “onboard.” Instead, give it just enough context for specific tasks, connect it to your existing artifacts, and create clear boundaries through team agreements. This lightweight, modular approach of contextual AI integration delivers immediate value without unrealistic expectations, letting AI enhance your team’s capabilities without pretending it’s human.&lt;/p&gt;&#xA;&lt;h2&gt;Contextual AI Integration for Agile Product Teams&lt;/h2&gt;&#xA;&lt;p&gt;Imagine this scenario: An empowered product team implements an AI assistant to help with feature prioritization and customer insights. Six weeks later, the Product Owner finds its ranking suggestions use irrelevant criteria, product designers notice it ignores established design patterns, and developers see it making technically sound suggestions that are misaligned with their architecture. Despite everyone using the same AI tool, it doesn’t understand how the product team actually works.&lt;/p&gt;】&lt;H2&gt; TL; DR：不是登机，而是集成&lt;/h2&gt;&#xA;&lt;p&gt;停止将AI视为团队成员进行“船上”。取而代之的是，为特定任务提供足够的上下文，将其连接到您现有的工件，并通过团队协议创建明确的界限。上下文AI集成的轻巧，模块化的方法可以在没有不现实期望的情况下提供直接的价值，让AI增强您的团队的能力，而不会假装自己的人类。&lt;/p&gt;&#xA;&lt;h2&gt;敏捷产品团队的上下文AI集成&lt;/h2&gt;&#xA;&lt;p&gt;想象一下这种情况：有能力的产品团队实施AI助手，以帮助功能优先级和客户见解。六个星期后，产品所有者发现其排名建议使用无关的标准，产品设计师注意到它忽略了既定的设计模式，并且开发人员看到它使技术上合理的建议与他们的架构不一致。尽管每个人都使用了相同的AI工具，但它并不了解产品团队的实际运作方式。&lt;/p&gt;</description>
      <pubDate>Mon, 28 Apr 2025 17:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【How to Convert Between PDF and TIFF in Java】如何在Java中的PDF和TIFF之间进行转换</title>
      <link>https://dzone.com/articles/how-to-convert-between-pdf-and-tiff-in-java</link>
      <description>【&lt;h2&gt;&lt;strong&gt;PDF and TIFF: Converting Between Document and Image in Java&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;We rarely encounter just one document format in enterprise applications. The longer a system has been in production, the more likely it is that file interoperability becomes a real concern. That’s especially true for file types that sit at the intersection of document and image processing, like PDF and TIFF.&lt;/p&gt;&#xA;&lt;p&gt;TIFF and PDF are both widely used in healthcare, insurance, and legal services (among other industries) where a premium is placed upon long-term file fidelity and visual accuracy. While PDF has a much wider range of use-cases, TIFF holds ground in archival contexts and systems that prefer image-based representations over embedded formatting.&lt;/p&gt;】&lt;H2&gt; &lt;strong&gt; PDF和TIFF：在Java中的文档和图像之间转换&lt;/strong&gt; &lt;/h2&gt;&#xA;&lt;p&gt;我们很少在企业应用程序中仅遇到一种文档格式。系统中的系统越长，文件互操作性就越有可能成为一个真正的问题。对于位于文档和图像处理交集的文件类型，例如PDF和TIFF。&lt;/p&gt;尤其如此。&lt;/p&gt;&#xA;&lt;p&gt; tiff和PDF既广泛用于医疗保健，保险和法律服务（以及其他行业），在这些行业中，在长期文件保真度和视觉准确性上都溢价了。虽然PDF的用例范围较宽，但TIFF在档案环境和系统中占据基础，这些档案和系统更喜欢基于图像的表示而不是嵌入式格式。&lt;/p&gt;</description>
      <pubDate>Mon, 28 Apr 2025 15:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Mastering Shift-Left: The Ultimate Guide to Input Validation in Jenkins Pipelines】掌握移位左：詹金斯管道中输入验证的最终指南</title>
      <link>https://dzone.com/articles/shift-left-guide-input-validation-jenkins-pipeline</link>
      <description>【&lt;p&gt;Successful software development hinges on maintaining a balance between speed and quality. To stay ahead, many organizations are progressively adopting a &lt;em&gt;shift-left&lt;/em&gt; approach. Rather than waiting until the end to catch bugs, this strategy emphasizes conducting quality checks and testing much earlier in the development process. One crucial aspect of this approach is input validation—ensuring that the configurations used in builds are correct right from the start.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;In this tutorial, we’ll walk through how to create a custom input validation framework for &lt;a href=&#34;https://dzone.com/articles/jenkins-pipelines-centralized-error-codes-fail-fast&#34;&gt;Jenkins pipeline&lt;/a&gt;. We’ll cover how to validate different input configurations such as JSON files, YAML files, and environment variables. With this system, shift-left framework can catch potential issues early and avoid delays in build and deployment process.&lt;/p&gt;】&lt;p&gt;成功的软件开发取决于保持速度和质量之间的平衡。为了保持领先地位，许多组织正在逐步采用&lt;em&gt;左左&lt;/em&gt;方法。该策略并没有等到结束捕获错误，而是强调进行质量检查并在开发过程中进行更早的时间进行测试。这种方法的一个关键方面是输入验证 - 确保构建中使用的配置从一开始就正确。 &lt;/p&gt;&#xA;&lt;p&gt;在本教程中，我们将介绍如何为&lt;a href =“ https://dzone.com/articles/jenkins-pipelines-centralized-error-codes-fail-fast-fail-fast-fast-fast-fast”创建自定义输入验证框架。我们将介绍如何验证不同的输入配置，例如JSON文件，YAML文件和环境变量。使用此系统，左翼框架可以尽早发现潜在的问题，并避免在构建和部署过程中延迟。&lt;/p&gt;</description>
      <pubDate>Mon, 28 Apr 2025 18:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Thermometer Continuation in Scala】Scala中的温度计延续</title>
      <link>https://dzone.com/articles/thermometer-continuation-in-scala</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;A continuation represents the control state of computation at a given point during evaluation. &lt;a href=&#34;https://en.wikipedia.org/wiki/Delimited_continuation&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Delimited Continuations&lt;/a&gt; is a programming mechanism that can be used to implement various control flow constructs. Thermometer continuations implement delimited continuation using exceptions and state, particularly focused on saving and resuming interactive or concurrent computations at specific points; they often require additional context or constructs to be fully realized.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;In a 2018 paper, “&lt;a href=&#34;https://arxiv.org/pdf/1710.10385&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Capturing the Future by Replaying the Past&lt;/a&gt;,” Koppel et al. showed that in any language with exception and state, thermometer continuations can be used. This allows most of the languages to implement thermometer continuations. Koppel provided Java, OCaml and &lt;a href=&#34;https://github.com/jkoppel/thermometer-continuations&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;SML reference implementations&lt;/a&gt; as part of the paper; Python implementation is available &lt;a href=&#34;https://github.com/calwoo/delimited&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;, where the author devised a way to overcome &lt;a href=&#34;https://dzone.com/articles/modern-python-patterns-features-and-strategies&#34;&gt;python generator&lt;/a&gt;’s inability to run the continuation multiple times.&lt;/p&gt;】&lt;p dir =“ ltr”&gt; a延续表示评估过程中给定点处的计算状态。 &lt;a href =“ https://en.wikipedia.org/wiki/delimited_continuation” rel =“ noopener noreferrer” target =“ _ black”&gt;界定延续&lt;/a&gt;是一种可以用于实施各种控制流动流的程序机制。温度计延续使用例外和状态实施界定延续，特别是在特定点上节省和恢复交互式或并发计算；他们通常需要完全实现其他上下文或构造。&lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;在2018年论文中，“ &lt;a href =” https://arxiv.org/pdf/1710.10385“ rel =“ noopener noreferrer” target =“ _ black”&gt;通过重播过去的&lt;/a&gt; koppel等来捕捉未来。表明在任何语言中，都可以使用温度计连续。这允许大多数语言实施温度计连续性。 Koppel提供了Java，Ocaml和&lt;a Href =“ https://github.com/jkoppel/thermmeter-continuations” rel =“ noopener noreferrer” target =“ _ blank”&gt; sml参考实现&lt;/a&gt;作为论文的一部分； Python实现可用&lt;a href =“ https://github.com/calwoo/delimited” rel =“ noopener noreferrer” target =“ _ black”&gt;在这里&lt;/a&gt;，作者在其中设计了一种克服&lt;a的方法href =“ https://dzone.com/articles/modern-python-patterns-features-and-strategies”&gt; Python Generator &lt;/a&gt;无法多次运行延续。&lt;/p&gt;</description>
      <pubDate>Fri, 25 Apr 2025 21:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Filtering Messages With Azure Content Safety and Spring AI】使用Azure内容安全和Spring AI过滤消息</title>
      <link>https://dzone.com/articles/filtering-messages-azure-content-safety-spring-ai</link>
      <description>【&lt;p&gt;As AI-powered applications like chatbots and virtual assistants become increasingly integrated into our daily lives, ensuring that they interact with users in a safe, respectful, and responsible manner is more important than ever.&lt;/p&gt;&#xA;&lt;p&gt;Unchecked user input or AI-generated content can lead to the spread of harmful language, including hate speech, sexually explicit content, or content promoting violence or self-harm. This can negatively affect the user experience and may also lead to legal or ethical problems.&lt;br&gt;&lt;img style=&#34;width: 384px;&#34; class=&#34;fr-fic fr-dib lazyload&#34; data-image=&#34;true&#34; data-new=&#34;false&#34; data-sizeformatted=&#34;118.7 kB&#34; data-mimetype=&#34;image/jpeg&#34; data-creationdate=&#34;1744383386384&#34; data-creationdateformatted=&#34;04/11/2025 02:56 PM&#34; data-type=&#34;temp&#34; data-url=&#34;https://dz2cdn1.dzone.com/storage/temp/18336349-01-featured-image.jpg&#34; data-modificationdate=&#34;null&#34; data-size=&#34;118677&#34; data-name=&#34;01-featured-image.jpg&#34; data-id=&#34;18336349&#34; alt=&#34;AI-generated content can lead to the spread of harmful language&#34; data-src=&#34;https://dz2cdn1.dzone.com/storage/temp/18336349-01-featured-image.jpg&#34;&gt;&lt;/p&gt;】&lt;p&gt;随着聊天机器人和虚拟助理等AI驱动的应用程序越来越多地整合到我们的日常生活中，确保他们以安全，尊重和负责的方式与用户互动比以往任何时候都更为重要。&lt;/p&gt;&#xA;&lt;p&gt;未经检查的用户输入或AI生成的内容可能会导致有害语言的传播，包括仇恨言论，性明确的内容或促进暴力或自我伤害的内容。这可能会对用户体验产生负面影响，也可能导致法律或道德问题。&lt;br&gt; &lt;img style =“ width：384px;” class =“ fr-fic fr-dib懒惰” data-image =“ true” data-new =“ false” data-sizeFormatted =“ 118.7 kb” data-mimetype =“ image/jpeg” data-creationdate =“ 174444383386384” data-Creationdate-data-CreationdateDateFormatted =“ 04/11/11/2025 02.56/11/2025 02：” data-url =“ https://dz2cdn1.dzone.com/storage/temp/183336349-01-featured-image.jpg” data-modificationdate =“ nul null” data-size =“ null” data-size =“ 118677” data-name =“ data-name =” 01-featured-image.image.jpg a a n =“可以导致有害语言的传播“ data-src =” https://dz2cdn1.dzone.com/storage/temp/18333349-01-featured-image.jpg&gt; &lt;/p&gt;</description>
      <pubDate>Mon, 28 Apr 2025 21:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>