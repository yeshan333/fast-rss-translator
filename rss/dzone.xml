<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Event Sourcing Explained: Building Robust Systems With Immutable Event Logs】事件溯源解释：使用不可变事件日志构建稳健的系统</title>
      <link>https://dzone.com/articles/event-sourcing-explained-building-robust-systems</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;An architectural pattern named &lt;a href=&#34;https://dzone.com/articles/why-do-you-need-to-move-from-crud-to-event-sourcin&#34;&gt;Event Sourcing&lt;/a&gt; is gaining more and more recognition from developers who aim for strong and scalable systems. In this article, we’ll take a closer look at the concept of it: what it entails, its benefits, general flow, and key concepts. Moreover, we will discuss how to implement ES — some details on the technologies that make adoption easy.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;This article is aimed at software architects, system developers, and project managers who might be contemplating or are already engaged in integrating Event Sourcing into their systems.&amp;nbsp;&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;名为 &lt;a href=&#34;https://dzone.com/articles/why-do-you-need-to-move-from-crud-to-event-sourcin&#34;&gt; 的架构模式事件溯源&lt;/a&gt;正在获得越来越多以强大且可扩展的系统为目标的开发人员的认可。在本文中，我们将仔细研究它的概念：它的含义、好处、一般流程和关键概念。此外，我们将讨论如何实现 ES——一些使采用变得容易的技术的细节。&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;本文面向可能正在考虑或已经参与将事件溯源集成到其系统中的软件架构师、系统开发人员和项目经理。 &lt;/p&gt;</description>
      <pubDate>Tue, 23 Jul 2024 13:30:00 +0000</pubDate>
    </item>
    <item>
      <title>【Build End-To-End RAG Applications Using Airbyte and Snowflake Cortex】使用 Airbyte 和 Snowflake Cortex 构建端到端 RAG 应用程序</title>
      <link>https://dzone.com/articles/build-end-to-end-rag-applications-using-airbyte</link>
      <description>【&lt;p&gt;As a practical example, this article shows how to build an AI Product assistant — an AI chatbot capable of answering product-related questions using data from multiple sources. With the AI Product Assistant, you can ask questions across all your company’s data in one place.&lt;/p&gt;&#xA;&lt;p&gt;You can utilize the Snowflake Cortex destination to load vector data into Snowflake, followed by leveraging Snowflake’s Cortex functions to perform Retrieval-Augmented Generation (RAG). &lt;a href=&#34;https://docs.snowflake.com/en/user-guide/snowflake-cortex/overview&#34; target=&#34;_blank&#34;&gt;Cortex&lt;/a&gt; offers general-purpose ML functions and LLM-specific functions, along with vector functions for semantic search, each backed by multiple models, all without needing to manage or host the underlying models or infrastructure.&lt;/p&gt;】&lt;p&gt;作为一个实际示例，本文展示了如何构建 AI 产品助手 - 一个能够使用多个来源的数据回答与产品相关的问题的 AI 聊天机器人。借助 AI 产品助手，您可以在一个地方针对公司的所有数据提出问题。&lt;/p&gt;&#xA;&lt;p&gt;您可以利用 Snowflake Cortex 目标将矢量数据加载到 Snowflake 中，然后利用 Snowflake 的 Cortex 函数执行检索增强生成 (RAG)。 &lt;a href=&#34;https://docs.snowflake.com/en/user-guide/snowflake-cortex/overview&#34; target=&#34;_blank&#34;&gt;Cortex&lt;/a&gt; 提供通用 ML 函数和 LLM 特定函数，以及用于语义搜索的矢量函数，每个函数都由多个模型支持，所有这些都不需要管理或托管底层模型或基础设施。&lt;/p&gt;</description>
      <pubDate>Tue, 23 Jul 2024 14:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【AI vs. Human: Who Detects Bugs Better?】人工智能与人类：谁能更好地检测错误？</title>
      <link>https://dzone.com/articles/ai-vs-human-who-detects-bugs-better</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Software testing processes are evolving with the interaction of AI technologies. The advancement in AI tech has helped organizations witness improvements in their testing capabilities. Robust testing enables the release of high-quality and reliable products and services, and bug detection assists.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Earlier bug detection and reporting processes required intensive manual labor, which was time-consuming and prone to human errors.&amp;nbsp;&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;软件测试流程随着人工智能技术的交互而不断发展。人工智能技术的进步帮助组织见证了测试能力的提高。强大的测试能够发布高质量和可靠的产品和服务，并协助错误检测。 &lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;早期的错误检测和报告流程需要大量的体力劳动，既耗时又容易出现人为错误。 &lt;/p&gt;</description>
      <pubDate>Tue, 23 Jul 2024 13:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【JUnit 5 Custom TestListeners】JUnit 5 自定义测试监听器</title>
      <link>https://dzone.com/articles/junit-5-listeners</link>
      <description>【&lt;p&gt;If you are using &lt;a href=&#34;https://dzone.com/articles/7-reasons-to-consider-junit-5&#34;&gt;JUnit5&lt;/a&gt; for your Automation and would like to post your test execution results directly from CI/CD to your Test Management System via Zephyr API, it is possible to do so via JUnit5 Test Execution Listeners.&lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;Custom Listener&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;You can create a custom Listener according to your needs. In our case, the API needs the results in a specific format and zipped. We will have to add custom logic for that and send the Test case name and key along with the execution result for a test. you can do this by using the following Listener methods.&lt;/p&gt;】&lt;p&gt;如果您使用 &lt;a href=&#34;https://dzone.com/articles/7-reasons-to-consider-junit-5&#34;&gt;JUnit5&lt;/a&gt; 进行自动化并希望发布您的测试执行结果通过 Zephyr API 直接从 CI/CD 发送到您的测试管理系统，可以通过 JUnit5 测试执行监听器来实现。&lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;自定义监听器&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;您可以根据需要创建自定义监听器。在我们的例子中，API 需要特定格式的结果并进行压缩。我们必须为此添加自定义逻辑，并发送测试用例名称和密钥以及测试的执行结果。您可以使用以下侦听器方法来执行此操作。&lt;/p&gt;</description>
      <pubDate>Tue, 23 Jul 2024 15:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Step-By-Step Guide To Setting up and Training GANs for Image Generation】设置和训练 GAN 以生成图像的分步指南</title>
      <link>https://dzone.com/articles/step-by-step-guide-to-setting-up-and-training</link>
      <description>【&lt;p&gt;Here is a basic tutorial on setting up and training image generation models using Generative Adversarial Networks (&lt;a href=&#34;https://dzone.com/articles/working-principles-of-generative-adversarial-netwo&#34;&gt;GANs&lt;/a&gt;) with TensorFlow and PyTorch. This guide assumes a fundamental understanding of Python and basic machine learning concepts.&lt;/p&gt;&#xA;&lt;h2&gt;1. Setting up Your Environment&lt;/h2&gt;&#xA;&lt;h3&gt;Install Necessary Libraries&lt;/h3&gt;&#xA;&lt;p&gt;Ensure you have Python installed. You will also need to install &lt;a href=&#34;https://dzone.com/articles/classification-of-neural-network-in-tensorflow&#34;&gt;TensorFlow&lt;/a&gt; or PyTorch along with some other essential libraries.&lt;/p&gt;】&lt;p&gt;这是有关使用生成对抗网络 (&lt;a href=&#34;https://dzone.com/articles/working-principles-of-generative-adversarial-netwo&#34;&gt;GAN) 设置和训练图像生成模型的基本教程&lt;/a&gt;）使用 TensorFlow 和 PyTorch。本指南假设您对 Python 和基本机器学习概念有基本的了解。&lt;/p&gt;&#xA;&lt;h2&gt;1。设置您的环境&lt;/h2&gt;&#xA;&lt;h3&gt;安装必要的库&lt;/h3&gt;&#xA;&lt;p&gt;确保您已安装 Python。您还需要安装 &lt;a href=&#34;https://dzone.com/articles/classification-of-neural-network-in-tensorflow&#34;&gt;TensorFlow&lt;/a&gt; 或 PyTorch 以及其他一些基本库。&lt;/ p&gt;</description>
      <pubDate>Tue, 23 Jul 2024 18:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【From Observability To Architectural Observability — Shifting Left for Resiliency】从可观察性到架构可观察性——左移以获得弹性</title>
      <link>https://dzone.com/articles/from-observability-to-architectural-observability</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;In my previous article, &lt;a href=&#34;https://dzone.com/articles/managing-architectural-tech-debt&#34;&gt;Managing Architectural Tech Debt&lt;/a&gt;, I talked about understanding and managing &lt;em&gt;architectural&lt;/em&gt; technical debt. Architectural technical debt is the often ignored, but ironically one of &lt;a href=&#34;https://insights.sei.cmu.edu/library/measure-it-manage-it-ignore-it-software-practitioners-and-technical-debt/&#34;&gt;the most damaging&lt;/a&gt;, categories of technical debt.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;In this article, I want to dive deeper into one way to manage architectural technical debt (and technical debt as a whole) — &lt;strong&gt;architectural observability (&lt;/strong&gt;&lt;a href=&#34;https://dzone.com/articles/finding-and-fixing-five-kinds-of-architectural-tec&#34;&gt;&lt;strong&gt;AO&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;. AO is a new category of observability that I believe is just as important, if not more so, as application performance management (&lt;a href=&#34;https://dzone.com/articles/frontend-application-performance-monitoring-apm&#34;&gt;APM&lt;/a&gt;). I believe we need to shift left observability — to the architectural stage — where we can not just see symptoms, but fix core problems.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;在我之前的文章&lt;a href=&#34;https://dzone.com/articles/managing-architectural-tech-debt&#34;&gt;管理架构技术债务&lt;/a&gt;中，我谈到了理解以及管理&lt;em&gt;架构&lt;/em&gt;技术债务。架构技术债务经常被忽视，但具有讽刺意味的是&lt;a href=&#34;https://insights.sei.cmu.edu/library/measure-it-manage-it-ignore-it-software-practitioners-and-technical之一-debt/&#34;&gt;最具破坏性&lt;/a&gt;，技术债务类别。&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;在本文中，我想更深入地探讨一种管理架构技术债务（以及整个技术债务）的方法 - &lt;strong&gt;架构可观察性 (&lt;/strong&gt;&lt;a href=&#34;https ://dzone.com/articles/finding-and-fixing- Five-kinds-of-architectural-tec&#34;&gt;&lt;strong&gt;AO&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;。 AO 是一种新的可观察性类别，我认为它与应用程序性能管理同样重要，甚至更重要 (&lt;a href=&#34;https://dzone.com/articles/frontend-application-performance-monitoring-apm&#34; &gt;APM&lt;/a&gt;）。我认为我们需要将左可观察性转移到架构阶段，在这里我们不仅可以看到症状，还可以解决核心问题。&lt;/p&gt;</description>
      <pubDate>Tue, 23 Jul 2024 20:00:02 +0000</pubDate>
    </item>
    <item>
      <title>【History and Future of LLMs】法学硕士的历史和未来</title>
      <link>https://dzone.com/articles/history-and-future-of-llms</link>
      <description>【&lt;h2&gt;Inception of LLMs: NLP and Neural Networks&lt;/h2&gt;&#xA;&lt;p&gt;The creation of Large Language Models didn’t happen overnight. Remarkably, the first concept of language models started with rule-based systems dubbed Natural Language Processing. These systems follow predefined rules that make decisions and infer conclusions based on text input. These systems rely on if-else statements processing keyword information and generating predetermined outputs. Think of a decision tree where output is a predetermined response if the input contains X, Y, Z, or none. For example: If the input includes keywords &#34;mother,&#34; output &#34;How is your mother?&#34; Else, output, &#34;Can you elaborate on that?&#34;&lt;/p&gt;&#xA;&lt;p&gt;The biggest early advancement was neural networks, which were considered when first introduced in 1943 inspired by neurons in human brain function, by mathematician Warren McCulloch. Neural networks even pre-date the term “artificial intelligence” by roughly 12 years. The network of neurons in each layer is organized in a specific manner, where each node holds a weight that determines its importance in the network. Ultimately, neural networks opened closed doors creating the foundation on which AI will forever be built.&lt;/p&gt;】&lt;h2&gt;法学硕士的创立：NLP 和神经网络&lt;/h2&gt;&#xA;&lt;p&gt;大型语言模型的创建并非一蹴而就。值得注意的是，语言模型的第一个概念始于被称为自然语言处理的基于规则的系统。这些系统遵循预定义的规则，根据文本输入做出决策并推断结论。这些系统依靠 if-else 语句处理关键字信息并生成预定的输出。考虑一个决策树，如果输入包含 X、Y、Z 或不包含 X、Y、Z，则输出是预定响应。例如：如果输入包含关键字“mother”，则输出“How is your mother?”否则，输出“你能详细说明一下吗？”&lt;/p&gt;&#xA;&lt;p&gt;早期最大的进步是神经网络，它是由数学家 Warren McCulloch 于 1943 年首次提出的，其灵感来自于人脑功能中的神经元。神经网络甚至比“人工智能”这个术语早了大约 12 年。每层神经元网络都以特定方式组织，其中每个节点都有一个权重，决定其在网络中的重要性。最终，神经网络打开了紧闭的大门，为人工智能的永远发展奠定了基础。&lt;/p&gt;</description>
      <pubDate>Tue, 23 Jul 2024 21:00:01 +0000</pubDate>
    </item>
    <item>
      <title>【Understanding Concurrency Patterns in Go】了解 Go 中的并发模式</title>
      <link>https://dzone.com/articles/understanding-concurrency-patterns-in-go</link>
      <description>【&lt;p&gt;&lt;a href=&#34;https://golang.org&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Go&lt;/a&gt;, also known as Golang, has become a popular language for developing concurrent systems due to its simple yet powerful concurrency model. Concurrency is a first-class citizen in Go, making it easier to write programs that efficiently use multicore processors. This article explores essential concurrency patterns in Go, demonstrating how to leverage goroutines and channels to build efficient and maintainable concurrent applications.&lt;/p&gt;&#xA;&lt;h2&gt;The Basics of Concurrency in Go&lt;/h2&gt;&#xA;&lt;h3&gt;Goroutines&lt;/h3&gt;&#xA;&lt;p&gt;A &lt;a href=&#34;https://go.dev/tour/concurrency/1&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;goroutine&lt;/a&gt; is a lightweight thread managed by the Go runtime. Goroutines are cheap to create and have a small memory footprint, allowing you to run thousands of them concurrently.&lt;/p&gt;】&lt;p&gt;&lt;a href=&#34;https://golang.org&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Go&lt;/a&gt;，也称为 Golang，由于以下原因已成为开发并发系统的流行语言：其简单而强大的并发模型。并发性是 Go 中的一等公民，使得编写高效使用多核处理器的程序变得更加容易。本文探讨了 Go 中的基本并发模式，演示了如何利用 goroutine 和通道来构建高效且可维护的并发应用程序。&lt;/p&gt;&#xA;&lt;h2&gt;Go 中并发的基础知识&lt;/h2&gt;&#xA;&lt;h3&gt;协程&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://go.dev/tour/concurrency/1&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;goroutine&lt;/a&gt; 是一个由 Go 运行时管理的轻量级线程。 Goroutine 的创建成本很低，内存占用也很小，允许您同时运行数千个 Goroutine。&lt;/p&gt;</description>
      <pubDate>Tue, 23 Jul 2024 19:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Cross-Platform Integration: Enabling Seamless Workflow Between AI, Microservices, and Azure Cloud】跨平台集成：实现 AI、微服务和 Azure 云之间的无缝工作流程</title>
      <link>https://dzone.com/articles/cross-platform-integration-enabling-seamless</link>
      <description>【&lt;h2&gt;Importance of Cross-Platform Integration in Modern IT Architectures&lt;/h2&gt;&#xA;&lt;p&gt;As digital transformation continues to accelerate, the demand for integrating various technological platforms is also increasing at a rapid pace. In today’s digital world organizations execute their operations in complex environments where multiple technologies need to work together seamlessly. The complexity of the environments can be dependent on the nature of the business and the services that the organizations are offering. Specific to IT architectures, &lt;a href=&#34;https://dzone.com/articles/cross-platform-app-development-exploring-the-essen&#34;&gt;cross-platform integration&lt;/a&gt; is crucial in enabling different systems to communicate and collaborate effectively, enhancing overall efficiency and productivity. Moreover, this integration is particularly critical and has to be effectively designed when combining AI capabilities, microservices architecture, and cloud platforms like &lt;a href=&#34;https://dzone.com/articles/5-arguments-why-microsoft-azure-is-the-best-option&#34;&gt;Azure&lt;/a&gt;. These components, when integrated, offer powerful solutions that drive innovation and efficiency across various domains.&amp;nbsp;&lt;/p&gt;&#xA;&lt;h2&gt;Benefits of Integrating AI, Microservices, and Azure Cloud&lt;/h2&gt;&#xA;&lt;p&gt;Applications of AI and integrating AI in IT architectures span multiple industries, including healthcare, where it aids in diagnostics and personalized medicine; finance, where it enhances fraud detection and algorithmic trading; and retail, where it drives personalized marketing and customer service automation. AI&#39;s ability to analyze vast amounts of data and derive meaningful insights makes it a transformative technology in modern enterprises.&lt;/p&gt;】&lt;h2&gt;现代 IT 架构中跨平台集成的重要性&lt;/h2&gt;&#xA;&lt;p&gt;随着数字化转型不断加速，整合各种技术平台的需求也在快速增长。在当今的数字世界中，组织在复杂的环境中执行运营，多种技术需要无缝协作。环境的复杂性可能取决于业务的性质和组织提供的服务。具体到 IT 架构，&lt;a href=&#34;https://dzone.com/articles/cross-platform-app-development-exploring-the-essen&#34;&gt;跨平台集成&lt;/a&gt;对于使不同系统能够有效沟通和协作，提高整体效率和生产力。此外，这种集成尤其重要，在结合人工智能功能、微服务架构和云平台（如 &lt;a href=&#34;https://dzone.com/articles/5-arguments-why-microsoft-azure-是最佳选择&#34;&gt;Azure&lt;/a&gt;。这些组件集成后可提供强大的解决方案，推动各个领域的创新和效率。 &lt;/p&gt;&#xA;&lt;h2&gt;集成人工智能、微服务和 Azure 云的好处&lt;/h2&gt;&#xA;&lt;p&gt;人工智能的应用以及将人工智能集成到 IT 架构中跨越多个行业，包括医疗保健，它有助于诊断和个性化医疗；金融，增强欺诈检测和算法交易；零售业，它推动个性化营销和客户服务自动化。人工智能分析大量数据并得出有意义的见解的能力使其成为现代企业的变革性技术。&lt;/p&gt;</description>
      <pubDate>Tue, 23 Jul 2024 17:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【How To Migrate From Godaddy DNS to AWS Route 53】如何从 Godaddy DNS 迁移到 AWS Route 53</title>
      <link>https://dzone.com/articles/how-to-migrate-from-godaddy-dns-to-aws-route-53</link>
      <description>【&lt;p&gt;In this post, we are going to learn about how to migrate from Godaddy to AWS Route53. First, it is necessary to buy a domain in Godaddy and later on migrate it to Amazon’s DNS system, which is Amazon Route 53. Transfer a Godaddy Domain to AWS Route53.&lt;/p&gt;&#xA;&lt;h2&gt;1. Godaddy DNS Management&lt;/h2&gt;&#xA;&lt;p&gt;Okay, so once we already have the Godaddy domain, we will log into our account and access it to manage our domain. On &lt;a href=&#34;https://account.godaddy.com/products/&#34;&gt;GoDaddy products,&amp;nbsp;&lt;/a&gt;we will be able to see the domains we own, additional products, and recommendations.&lt;/p&gt;】&lt;p&gt;在这篇文章中，我们将了解如何从 Godaddy 迁移到 AWS Route53。首先需要在Godaddy购买一个域名，然后将其迁移到亚马逊的DNS系统，即Amazon Route 53。将Godaddy域名转移到AWS Route53。&lt;/p&gt;&#xA;&lt;h2&gt;1。 Godaddy DNS 管理&lt;/h2&gt;&#xA;&lt;p&gt;好的，一旦我们拥有了 Godaddy 域名，我们将登录我们的帐户并访问它来管理我们的域名。在 &lt;a href=&#34;https://account.godaddy.com/products/&#34;&gt;GoDaddy 产品&lt;/a&gt;上，我们将能够查看我们拥有的域名、其他产品和推荐。&lt;/p&gt;</description>
      <pubDate>Tue, 23 Jul 2024 16:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>