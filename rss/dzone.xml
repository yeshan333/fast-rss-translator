<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【A Practical Guide to Creating a Spring Modulith Project】创建 Spring Modulith 项目的实用指南</title>
      <link>https://dzone.com/articles/creating-a-spring-modulith-project-practical-guide</link>
      <description>【&lt;p style=&#34;text-align: left;&#34;&gt;Spring Modulith empowers developers to define logical application modules in their code, facilitating the creation of well-structured, domain-aligned Spring Boot applications.&lt;/p&gt;&#xA;&lt;p style=&#34;text-align: left;&#34;&gt;This approach introduces modular design principles to the &lt;a href=&#34;https://dzone.com/articles/spring-framework-tutorial-for-beginners-2&#34;&gt;Spring Framework&lt;/a&gt;, providing a more organized way to develop applications. The General Availability (GA) version was released in August 2023, and the current stable version at the time of writing this article is 1.3.1.&lt;/p&gt;】&lt;p style=&#34;text-align: left;&#34;&gt;Spring Modulith 使开发人员能够在代码中定义逻辑应用程序模块，从而促进创建结构良好、领域一致的 Spring Boot 应用程序。&lt;/p&gt;&#xA;&lt;p style=&#34;text-align: left;&#34;&gt;这种方法向 &lt;a href=&#34;https://dzone.com/articles/spring-framework-tutorial-for-beginners-2&#34;&gt;Spring 引入了模块化设计原则框架&lt;/a&gt;，提供更有组织的方式来开发应用程序。通用 (GA) 版本于 2023 年 8 月发布，撰写本文时当前的稳定版本是 1.3.1。&lt;/p&gt;</description>
      <pubDate>Wed, 22 Jan 2025 17:00:08 +0000</pubDate>
    </item>
    <item>
      <title>【Implementing Zero Trust Security in Kubernetes】在 Kubernetes 中实施零信任安全</title>
      <link>https://dzone.com/articles/implementing-zero-trust-security-kubernetes</link>
      <description>【&lt;p&gt;Kubernetes has grown to become the go-to platform for container orchestration. While the flexibility and scalability that make Kubernetes interesting also present substantial security challenges, perimeter-based security has become outdated in these organizations, and thus, they are willing to switch to the zero-trust security paradigm.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;In this article, we will explore how to implement Zero Trust Security in &lt;a href=&#34;https://dzone.com/articles/demystifying-kubernetes&#34;&gt;Kubernetes&lt;/a&gt; to provide DevOps teams with actionable best practices on how to fortify their environment with respect to emerging threats.&lt;/p&gt;】&lt;p&gt;Kubernetes 已发展成为容器编排的首选平台。虽然 Kubernetes 的灵活性和可扩展性也带来了巨大的安全挑战，但在这些组织中，基于边界的安全性已经过时，因此，他们愿意转向零信任安全范例。 &lt;/p&gt;&#xA;&lt;p&gt;在本文中，我们将探讨如何在 &lt;a href=&#34;https://dzone.com/articles/demystifying-kubernetes&#34;&gt;Kubernetes&lt;/a&gt; 中实施零信任安全，为 DevOps 团队提供可行的最佳实践关于如何针对新出现的威胁强化其环境。&lt;/p&gt;</description>
      <pubDate>Wed, 22 Jan 2025 15:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Hybrid Search Using Postgres DB】使用 Postgres DB 的混合搜索</title>
      <link>https://dzone.com/articles/hybrid-search-using-postgres-db</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;&lt;span style=&#34;background-color: transparent;&#34;&gt;With a traditional&amp;nbsp;&lt;/span&gt;&lt;em style=&#34;background-color: transparent;&#34;&gt;&lt;strong&gt;lexical-based&lt;/strong&gt;&lt;/em&gt;&lt;span style=&#34;background-color: transparent;&#34;&gt;&amp;nbsp;(or keyword-based) search, we will find documents that contain the exact word we searched for.&lt;/span&gt; Keyword search excels at precision but struggles with alternate phrasing or natural language.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://dzone.com/articles/build-semantic-search-apps-with-genai&#34;&gt;Semantic search&lt;/a&gt; addresses these limitations by capturing the intent behind documents and user queries. This is typically done by leveraging vector embeddings to map documents and queries into a high dimensional space and computing vector similarity to retrieve relevant results.&amp;nbsp;&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;&lt;span style=&#34;background-color:透明;&#34;&gt;采用传统&lt;/span&gt;&lt;em style=&#34;background-color:透明;&#34;&gt;&lt;strong&gt;基于词汇&lt;/strong &gt;&lt;/em&gt;&lt;span style=&#34;background-color:透明;&#34;&gt;（或基于关键字的）搜索，我们将找到包含我们搜索的确切单词的文档。&lt;/span&gt;关键字搜索在精确度方面表现出色，但存在困难使用替代措辞或自然语言。 &lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://dzone.com/articles/build-semantic-search-apps-with-genai&#34;&gt;语义搜索&lt;/a&gt;通过捕获背后的意图来解决这些限制文档和用户查询。这通常是通过利用向量嵌入将文档和查询映射到高维空间并计算向量相似度来检索相关结果来完成的。 &lt;/p&gt;</description>
      <pubDate>Wed, 22 Jan 2025 14:00:13 +0000</pubDate>
    </item>
    <item>
      <title>【Practical Coding Principles for Sustainable Development】可持续发展实用编码原则</title>
      <link>https://dzone.com/articles/practical-coding-principles-for-sustainable-development</link>
      <description>【&lt;p&gt;As I look back at my journey in software development, spanning a little more than fifteen years, I can remember all the numerous moments when my decisions under the pressure of a deadline either set a project up for success in the long run or cursed it with chronic headaches. Sustainable software development, I&#39;ve come to realize, is little more than a buzzword. It&#39;s an overarching philosophy that informs how we write code, structure projects, and think about the future. Initially, I was lured by the excitement of delivering new features rapidly. But after seeing those same shortcuts morph into technical debt, I changed my approach: code that merely &#34;works&#34; today is not enough; it needs to remain robust and maintainable for years to come.&lt;/p&gt;&#xA;&lt;p&gt;Throughout this article, I&#39;ll share my firsthand experiences and the principles I&#39;ve adopted for sustainable development. We&#39;ll talk about the real cost of quick fixes, the importance of simplicity in code, the technical tools and techniques that keep quality high (like Git, SonarQube, and automated testing frameworks), and the practices, such as code reviews and refactoring, that help us pay down technical debt before it spirals out of control. If there is one underlying theme to all this, it&#39;s that &#34;less is more.&#34; Focusing on quality over quantity, and keeping our code lean, maintainable, and tested, we can solve problems not only for now but for the future.&lt;/p&gt;】&lt;p&gt;当我回顾我十五年多一点的软件开发历程时，我记得所有无数的时刻，当我在最后期限的压力下做出决定时，要么让项目从长远来看取得成功，要么用慢性头痛诅咒它。我逐渐意识到，可持续软件开发只不过是一个流行词。这是一种总体哲学，指导我们如何编写代码、构建项目和思考未来。最初，我被快速交付新功能的兴奋所吸引。但在看到这些相同的捷径演变成技术债务后，我改变了我的方法：今天仅仅“有效”的代码是不够的；必须要编写代码。它需要在未来几年保持稳健和可维护。&lt;/p&gt;&#xA;&lt;p&gt;在本文中，我将分享我的第一手经验以及我为可持续发展所采取的原则。我们将讨论快速修复的实际成本、代码简单性的重要性、保持高质量的技术工具和技术（例如 Git、SonarQube 和自动化测试框架）以及实践，例如代码审查和重构，这有助于我们在技术债务失控之前偿还债务。如果说这一切有一个基本主题的话，那就是“少即是多”。注重质量而不是数量，并保持代码精简、可维护和经过测试，我们不仅可以解决现在的问题，而且可以解决未来的问题。&lt;/p&gt;</description>
      <pubDate>Wed, 22 Jan 2025 13:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Context is King: How LLMs Are Going to Change Code Generation in Modern IDEs】上下文为王：法学硕士将如何改变现代 IDE 中的代码生成</title>
      <link>https://dzone.com/articles/how-llms-are-changing-code-generation-ides</link>
      <description>【&lt;p&gt;For years, developers have dreamed of having a coding buddy who would understand their projects well enough to automatically create intelligent code, not just pieces of it. We&#39;ve all struggled with the inconsistent naming of variables across files, trying to recall exactly what function signature was defined months ago, and wasted valuable hours manually stitching pieces of our codebase together. This is where large language models (LLMs) come in — not as chatbots, but as strong engines in our IDEs, changing how we produce code by finally grasping the context of our work.&lt;/p&gt;&#xA;&lt;p&gt;Traditional &lt;a href=&#34;https://dzone.com/articles/comparison-of-various-ai-code-generation-tools-ava&#34;&gt;code generation tools&lt;/a&gt;, and even basic features of IDE auto-completion, usually fall short because they lack a deep understanding of the broader context; hence, they usually operate in a very limited view, such as only the current file or a small window of code. The result is syntactically correct but semantically inappropriate suggestions, which need to be constantly manually corrected and integrated by the developer. Think about suggesting a variable name that is already used at some other crucial module with a different meaning — a frustrating experience we&#39;ve all encountered.&lt;/p&gt;】&lt;p&gt;多年来，开发人员一直梦想着拥有一个能够充分了解他们的项目的编码伙伴，能够自动创建智能代码，而不仅仅是代码片段。我们都曾为跨文件的变量命名不一致而苦苦挣扎，试图准确地回忆起几个月前定义的函数签名，并浪费了宝贵的时间手动将代码库的各个部分拼接在一起。这就是大型语言模型 (LLM) 的用武之地——不是作为聊天机器人，而是作为 IDE 中的强大引擎，通过最终掌握工作上下文来改变我们生成代码的方式。&lt;/p&gt;&#xA;&lt;p&gt;传统的&lt;a href=&#34;https://dzone.com/articles/comparison-of-various-ai-code- Generation-tools-ava&#34;&gt;代码生成工具&lt;/a&gt;，甚至还有IDE的基本功能自动完成，通常会失败，因为他们缺乏对更广泛背景的深入理解；因此，它们通常在非常有限的视图中运行，例如仅当前文件或一小段代码窗口。结果是语法正确但语义不恰当的建议，需要开发人员不断手动纠正和集成。考虑建议一个已经在其他一些关键模块中使用的具有不同含义的变量名称——我们都遇到过这种令人沮丧的经历。&lt;/p&gt;</description>
      <pubDate>Wed, 22 Jan 2025 21:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Caching Strategies for Resilient Distributed Systems】弹性分布式系统的缓存策略</title>
      <link>https://dzone.com/articles/caching-strategies-for-resilient-distributed-syste</link>
      <description>【&lt;blockquote&gt;&#xA; &lt;p dir=&#34;ltr&#34;&gt;There are only two hard things in Computer Science: cache invalidation and naming things. &lt;br&gt;&#xA;  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; - Phil Karlton&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Caching is an important technique in system design and offers several benefits. With caching, you can improve the performance and availability of your system while simultaneously reducing the cost of operating your service. Caching is the Swiss army knife of system design.&lt;/p&gt;】&lt;块引用&gt;&#xA; &lt;p dir=&#34;ltr&#34;&gt;计算机科学中只有两件难事：缓存失效和命名。 &lt;br&gt;&#xA;                                                                                                      - 菲尔·卡尔顿&lt;/p&gt;&#xA;&lt;/块引用&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;缓存是系统设计中的一项重要技术，具有多种优势。通过缓存，您可以提高系统的性能和可用性，同时降低服务的运营成本。缓存是系统设计的瑞士军刀。&lt;/p&gt;</description>
      <pubDate>Wed, 22 Jan 2025 19:00:03 +0000</pubDate>
    </item>
    <item>
      <title>【Streamline npm Packages: Optimize and Boost Performance】简化 npm 包：优化和提升性能</title>
      <link>https://dzone.com/articles/streamline-npm-packages</link>
      <description>【&lt;p&gt;Sluggish build times and bloated &lt;code&gt;node_modules&lt;/code&gt; folders are issues that many developers encounter but often overlook. Why does this happen? The answer lies in the intricate web of npm dependencies. With every npm install, your project inherits not only the packages you need but also their dependencies, leading to exponential growth in your codebase. As a result, it can slow down your daily workflow, making it ineffective and introducing security vulnerabilities.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;In this piece, we’ll examine practical methods for auditing and refining your &lt;a href=&#34;https://dzone.com/articles/a-beginners-guide-to-npm-the-node-package-manager&#34;&gt;npm packages&lt;/a&gt;. By the end, you’ll have a clearer understanding of how to keep your project efficient and secure.&lt;/p&gt;】&lt;p&gt;缓慢的构建时间和臃肿的 &lt;code&gt;node_modules&lt;/code&gt; 文件夹是许多开发人员遇到但经常忽视的问题。为什么会出现这种情况？答案在于错综复杂的 npm 依赖网络。每次安装 npm 时，您的项目不仅会继承您需要的包，还会继承它们的依赖项，从而导致代码库呈指数级增长。因此，它会减慢您的日常工作流程，使其效率低下并引入安全漏洞。 &lt;/p&gt;&#xA;&lt;p&gt;在本文中，我们将研究审核和完善您的 &lt;a href=&#34;https://dzone.com/articles/a-beginners-guide-to-npm-the-node-package-manager &#34;&gt;npm 包&lt;/a&gt;。最后，您将更清楚地了解如何保持项目的高效和安全。&lt;/p&gt;</description>
      <pubDate>Wed, 22 Jan 2025 20:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【How to Test QR Codes in Your Applications】如何在应用程序中测试 QR 码</title>
      <link>https://dzone.com/articles/test-qr-codes-in-your-applications</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Building quality software is only possible with quality tests. Whether you write test scripts for QA engineers or build automated tests, tests help to ensure that your applications continue to function as they grow and evolve.&lt;/p&gt;&#xA;&lt;p&gt;However, using automated testing to verify correct behavior can be challenging if your application generates &lt;strong&gt;visual artifacts&lt;/strong&gt;, such as QR codes. Granted, you can write unit tests to ensure your code for generating QR codes does what it should; however, the danger is that your tests will be too tightly coupled to your application code. You’ll need to update your tests whenever you change the application.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;只有通过质量测试才能构建高质量的软件。无论您为 QA 工程师编写测试脚本还是构建自动化测试，测试都有助于确保您的应用程序在增长和发展时继续正常运行。&lt;/p&gt;&#xA;&lt;p&gt;但是，如果您的应用程序生成&lt;strong&gt;视觉伪影&lt;/strong&gt;（例如 QR 码），那么使用自动化测试来验证正确行为可能会很困难。当然，您可以编写单元测试来确保生成 QR 码的代码执行其应有的功能；然而，危险在于您的测试与应用程序代码的耦合过于紧密。每当更改应用程序时，您都需要更新测试。&lt;/p&gt;</description>
      <pubDate>Wed, 22 Jan 2025 18:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Fresh Data for AI With Spring AI Function Calls】通过 Spring AI 函数调用为 AI 提供新鲜数据</title>
      <link>https://dzone.com/articles/fresh-data-ai-spring-ai-function-calls</link>
      <description>【&lt;p&gt;The LLM can work with the knowledge it has from its training data. To extend the knowledge retrieval-augmented generation (RAG) can be used that retrieves relevant information from a vector database and adds it to the prompt context. To provide really up-to-date information, function calls can be used to request the current information (flight arrival times, for example) from the responsible system. That enables the LLM to answer questions that require current information for an accurate response.&lt;/p&gt;&#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/Angular2Guy/AIDocumentLibraryChat&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;AIDocumentLibraryChat&lt;/a&gt; has been extended to show how to use the &lt;a href=&#34;https://docs.spring.io/spring-ai/reference/api/functions.html&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;function call&lt;/a&gt; API of &lt;a href=&#34;https://dzone.com/articles/spring-ai-how-to-write-genai-applications-with-jav?fromrel=true&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Spring AI&lt;/a&gt; to call the OpenLibrary API. The REST API provides book information for authors, titles, and subjects. The response can be a text answer or an LLM-generated JSON response. &lt;span style=&#34;background-color: transparent;&#34;&gt;For the JSON response, the&amp;nbsp;&lt;/span&gt;&lt;a href=&#34;https://docs.spring.io/spring-ai/reference/api/structured-output-converter.html&#34; target=&#34;_blank&#34;&gt;Structured Output&lt;/a&gt;&lt;span style=&#34;background-color: transparent;&#34;&gt;&amp;nbsp;feature of Spring AI is used to map the JSON in Java objects.&lt;/span&gt;&lt;/p&gt;】&lt;p&gt;法学硕士可以利用从培训数据中获得的知识。为了扩展知识检索增强生成（RAG），可以从向量数据库中检索相关信息并将其添加到提示上下文中。为了提供真正最新的信息，可以使用函数调用从负责的系统请求当前信息（例如航班到达时间）。这使得法学硕士能够回答需要当前信息才能准确回答的问题。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Angular2Guy/AIDocumentLibraryChat&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;AIDocumentLibraryChat&lt;/a&gt; 已进行扩展，以展示如何使用&lt;a href =&#34;https://docs.spring.io/spring-ai/reference/api/functions.html&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;函数调用&lt;/a&gt; &lt;a href=&#34;https://dzone.com/articles/spring-ai-how-to-write-genai-applications-with-jav?fromrel=true&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34; 的 API &gt;Spring AI&lt;/a&gt; 调用 OpenLibrary API。 REST API 提供作者、标题和主题的图书信息。响应可以是文本答案或 LLM 生成的 JSON 响应。 &lt;span style=&#34;background-color:透明;&#34;&gt;对于 JSON 响应，&lt;/span&gt;&lt;a href=&#34;https://docs.spring.io/spring-ai/reference/api/structed-output- converter.html&#34; target=&#34;_blank&#34;&gt;结构化输出&lt;/a&gt;&lt;span style=&#34;background-color:透明;&#34;&gt; Spring AI 的功能用于映射 Java 对象中的 JSON。&lt;/span&gt;&lt;/p &gt;</description>
      <pubDate>Wed, 22 Jan 2025 22:00:12 +0000</pubDate>
    </item>
    <item>
      <title>【Serverless AI Inference】无服务器人工智能推理</title>
      <link>https://dzone.com/articles/serverless-ai-inference</link>
      <description>【&lt;p style=&#34;text-align: left;&#34;&gt;Serverless computing is a cloud computing model where cloud providers like AWS, Azure, and GCP manage the server infrastructure, dynamically allocating resources as needed. Developers either invoke APIs directly or write code in the form of functions, and the cloud provider executes these functions in response to certain events. This means developers can scale applications automatically without worrying about server management and deployments, leading to cost savings and improved agility.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p style=&#34;text-align: left;&#34;&gt;The main advantage of serverless computing is that it abstracts away much of the complexity related to release management, and developers don’t need to worry about capacity planning, hardware management, or even operating systems. This simplicity frees up time and resources to focus more on building innovative applications and services on top of the deployed models.&lt;/p&gt;】&lt;p style=&#34;text-align: left;&#34;&gt;无服务器计算是一种云计算模型，其中 AWS、Azure 和 GCP 等云提供商管理服务器基础设施，根据需要动态分配资源。开发人员要么直接调用API，要么以函数的形式编写代码，云提供商响应某些事件来执行这些函数。这意味着开发人员可以自动扩展应用程序，而无需担心服务器管理和部署，从而节省成本并提高敏捷性。 &lt;/p&gt;&#xA;&lt;p style=&#34;text-align: left;&#34;&gt;无服务器计算的主要优势在于，它抽象了与发布管理相关的大部分复杂性，开发人员无需担心容量规划、硬件管理，甚至操作系统。这种简单性可以节省时间和资源，让您能够更多地专注于在已部署模型的基础上构建创新应用程序和服务。&lt;/p&gt;</description>
      <pubDate>Wed, 22 Jan 2025 16:00:06 +0000</pubDate>
    </item>
  </channel>
</rss>