<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【React Callback Refs: What They Are and How to Use Them】React回调裁判：它们是什么以及如何使用它们</title>
      <link>https://dzone.com/articles/react-callback-refs-guide</link>
      <description>【&lt;p&gt;During development, we often need direct interaction with DOM elements. In such cases, React provides us with a mechanism called &lt;strong&gt;refs&lt;/strong&gt;, which allows access to elements after they have been rendered. Most commonly, we use standard object refs via &lt;code&gt;useRef&lt;/code&gt; (let’s call them that), but there is another approach known as &lt;strong&gt;callback refs&lt;/strong&gt;. This method offers additional flexibility and control over the lifecycle of elements, enabling us to perform certain specific actions at precise moments when elements are attached or detached from the DOM.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;In this article, I want to explain what callback refs are and how they work, discuss the pitfalls you might encounter, and show examples of their usage.&lt;/p&gt;】&lt;p&gt;在开发过程中，我们通常需要与DOM元素直接相互作用。在这种情况下，React为我们提供了一种称为&lt;strong&gt; refs &lt;/strong&gt;的机制，该机制允许在渲染元素后访问它们。最常见的是，我们通过&lt;code&gt; useref &lt;/code&gt;使用标准对象参考（我们称其为称），但是另一种方法称为&lt;strong&gt; callback refs &lt;/strong&gt;。该方法提供了对元素生命周期的额外灵活性和控制，使我们能够在附加或与DOM脱离元素时在确切的时刻执行某些特定动作。 &lt;/p&gt;&#xA;&lt;p&gt;在本文中，我想解释什么是回调裁判以及它们的工作方式，讨论您可能遇到的陷阱，并显示其用法的示例。&lt;/p&gt;</description>
      <pubDate>Fri, 07 Feb 2025 22:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Relational DB Migration to S3 Data Lake Via AWS DMS, Part I】关系数据库通过AWS DMS迁移到S3数据湖，第一部分</title>
      <link>https://dzone.com/articles/relational-databases-migration-to-aws-environment</link>
      <description>【&lt;p&gt;AWS Database Migration Service is a cloud service that migrates relational databases, NoSQL databases, data warehouses, and all other types of data stores into AWS Cloud or between cloud and on-premises setups efficiently and securely. DMS supports several types of source and target databases such as Oracle, MS SQL Server, MySQL, Postgres SQL, Amazon Aurora, AWS RDS, Redshift, and S3, etc.&lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;Observations During the Data Migration&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;We worked on designing and creating an &lt;a href=&#34;https://dzone.com/articles/using-aws-data-lake-and-s3-with-sql-server&#34;&gt;AWS S3 data lake&lt;/a&gt; and data warehouse in AWS Redshift with the data sources from on-premises for Oracle, MS SQL Server, MySQL, Postgres SQL, and MongoDB for relational databases. We used AWS DMS for the initial full load and daily incremental data transfer from these sources into AWS S3.&amp;nbsp;&lt;/p&gt;】&lt;p&gt; AWS数据库迁移服务是一种云服务，它可以迁移关系数据库，NOSQL数据库，数据仓库以及所有其他类型的数据存储，或者在云中有效且在本地设置之间有效且安全。 DMS支持几种类型的源和目标数据库，例如Oracle，MS SQL Server，MySQL，Postgres SQL，Amazon Aurora，AWS RDS，RedShift和S3等。&lt;/p&gt;。&#xA;&lt;h2&gt; &lt;strong&gt; &lt;span&gt;数据迁移期间的观察&lt;/span&gt; &lt;/strong&gt; &lt;/h2&gt;&#xA;&lt;p&gt;我们致力于设计和创建&lt;a href =“ https://dzone.com/articles/usise-aws-data-lake-and-s3-with-sql-server”&gt; AWS S3 Data Data Lake &lt;/ A&gt;和数据仓库在AWS RedShift中使用来自Oracle的本地，MS SQL Server，MySQL，Postgres SQL和MongoDB的数据源用于关系数据库。我们将AWS DMS从这些来源转移到AWS S3中，将AWS DMS最初的全部负载和每日增量数据传输。 &lt;/p&gt;</description>
      <pubDate>Fri, 07 Feb 2025 17:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Control Your Services With OTEL, Jaeger, and Prometheus】通过Otel，Jaeger和Prometheus来控制您的服务</title>
      <link>https://dzone.com/articles/control-services-otel-jaeger-prometheus</link>
      <description>【&lt;p&gt;Let&#39;s discuss an important question: &lt;em&gt;how do we monitor our services if something goes wrong?&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;On the one hand, we have &lt;a href=&#34;https://dzone.com/articles/what-is-prometheus-and-why-you-should-use-it&#34;&gt;Prometheus&lt;/a&gt; with alerts and &lt;a href=&#34;https://dzone.com/articles/getting-started-with-kibana-advanced-searches&#34;&gt;Kibana&lt;/a&gt; for dashboards and other helpful features. We also know how to gather logs — the &lt;em&gt;ELK&lt;/em&gt; stack is our go-to solution. However, simple logging isn’t always enough: it doesn’t provide a holistic view of a request’s journey across the entire ecosystem of components.&lt;/p&gt;】&lt;p&gt;让我们讨论一个重要的问题：&lt;em&gt;如果出现问题，我们如何监视我们的服务？&lt;/em&gt; &lt;/p&gt;&#xA;&lt;p&gt;一方面，我们&lt;a href =“ https://dzone.com/articles/what-is-prometheus-and-why-you should-use-it-it--警报和&lt;a href =“ https://dzone.com/articles/getting-with-with-kibana-advanced-searches”&gt; kibana &lt;/a&gt;用于仪表板和其他有用的功能。我们也知道如何收集日志 -  &lt;em&gt; elk &lt;/em&gt;堆栈是我们的首选解决方案。但是，简单的日志记录并不总是足够的：它并不能够整体观看组件整个生态系统的旅程。&lt;/p&gt;</description>
      <pubDate>Fri, 07 Feb 2025 14:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Jackson vs Gson: Edge Cases in JSON Parsing for Java Apps】Jackson vs Gson：JSON解析Java应用程序的边缘案例</title>
      <link>https://dzone.com/articles/jackson-vs-gson-edge-cases-json-parsing-java</link>
      <description>【&lt;p dir=&#34;ltr&#34; style=&#34;text-align: left;&#34;&gt;JSON (Javascript Object Notation) is a collection of key-value pairs that can be easily parsed and generated by applications. It is a subset of JavaScript Programming Language Standard ECMA-262. The parsing of JSON is required in most applications, such as restful APIs or applications that need data serialization.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34; style=&#34;text-align: left;&#34;&gt;In the Java ecosystem, the two most popular libraries for handling &lt;a href=&#34;https://dzone.com/articles/patterns-of-reading-json&#34;&gt;JSON data&lt;/a&gt; are Jackson and Gson. Both are used widely and offer unique advantages. This article uses edge-case examples to explore the features of both libraries on different parameters.&lt;/p&gt;】&lt;p dir =“ ltr” style =“ text-align：left;”&gt; json（javaScript对象符号）是键值对的集合，可以通过应用程序轻松解析和生成。它是JavaScript编程语言标准ECMA-262的子集。在大多数应用程序中，需要解析JSON，例如RESTFUL API或需要数据序列化的应用程序。 &lt;/p&gt;&#xA;&lt;p dir =“ ltr” style =“ text-align：left;”&gt;在Java生态系统中，这两个最受欢迎的处理库&lt;a a href =“ https://dzone.com/articles.com/articles/patterns-of--patterns-of-reading -json“&gt; JSON数据&lt;/a&gt;是Jackson和Gson。两者都被广泛使用并提供独特的优势。本文使用边缘案例示例来探索两个库在不同参数上的特征。&lt;/p&gt;</description>
      <pubDate>Fri, 07 Feb 2025 12:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【AOP for Post-Processing REST Requests With Spring and AspectJ】aop用于春季和axpectj的后处理REST请求</title>
      <link>https://dzone.com/articles/aop-post-processing-rest-requests-spring-aspectj</link>
      <description>【&lt;p&gt;Aspect-oriented programming (AOP) is a programming paradigm that enables the modularisation of concerns that cut across multiple types and objects. It provides additional behavior to existing code without modifying the code itself.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/overview-of-spring-aspect-oriented-programming-aop&#34;&gt;AOP&lt;/a&gt; can solve many problems in a graceful way that is easy to maintain. One such common problem is adding some new behavior to a controller (&lt;code&gt;@Controller&lt;/code&gt;) so that it works “outside” the main logic of the controller. In this article, we will look at how to use AOP to add logic when an application returns a successful response (HTTP 200). An entity should be deleted after it is returned to a client.&lt;/p&gt;】&lt;p&gt;面向方面的编程（AOP）是一个编程范式，可实现跨多种类型和对象的关注模块化。它为现有代码提供了其他行为，而无需修改代码本身。 &lt;/p&gt;&#xA;&lt;p&gt; &lt;a href =“ https://dzone.com/articles/overview-ob-spring-aspect-iented-iented-programming-aop”&gt; aop &lt;/a&gt;可以以一种优雅的方式解决许多问题，很容易就可以解决维持。一个常见的问题是将一些新的行为添加到控制器（&lt;code&gt; @controller &lt;/code&gt;），以便“外部”控制器的主要逻辑工作。在本文中，我们将研究应用程序返回成功响应时如何使用AOP添加逻辑（HTTP 200）。将其返回客户端后，应删除实体。&lt;/p&gt;</description>
      <pubDate>Fri, 07 Feb 2025 21:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【A Guide to Using Amazon Bedrock Prompts for LLM Integration】使用Amazon Bedrock提示LLM集成的指南</title>
      <link>https://dzone.com/articles/amazon-bedrock-prompts-llm-integration-guide</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;As generative AI revolutionizes various industries, developers increasingly seek efficient ways to integrate large language models (LLMs) into their applications. Amazon Bedrock is a powerful solution. It offers a fully managed service that provides access to a wide range of foundation models through a unified API. This guide will explore key benefits of Amazon Bedrock, how to integrate different LLM models into your projects, how to simplify the management of the various LLM prompts your application uses, and best practices to consider for production usage.&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;Key Benefits of Amazon Bedrock&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://dzone.com/articles/building-powerful-ai-applications-with-amazon&#34;&gt;Amazon Bedrock&lt;/a&gt; simplifies the initial integration of LLMs into any application by providing all the foundational capabilities needed to get started.&lt;/p&gt;】&lt;p dir =“ ltr”&gt;作为生成AI彻底改变了各种行业，开发人员越来越多地寻求将大型语言模型（LLM）整合到其应用中的有效方法。亚马逊基岩是一个有力的解决方案。它提供了完全管理的服务，可通过统一的API访问广泛的基础模型。本指南将探讨亚马逊基岩的关键好处，如何将不同的LLM模型集成到您的项目中，如何简化各种LLM的管理提示您的应用程序使用以及考虑生产使用的最佳实践。&lt;/p&gt;&#xA;&lt;h2 dir =“ ltr”&gt;亚马逊基岩的关键好处&lt;/h2&gt;&#xA;&lt;p dir =“ ltr”&gt; &lt;a href =“ https://dzone.com/articles/building-powerful-ai-applications-with-amazon”&gt; Amazon Bedrock &lt;/a&gt;简化LLM的初始集成通过提供入门所需的所有基础功能来应用。&lt;/p&gt;</description>
      <pubDate>Fri, 07 Feb 2025 20:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Exploring Operator, OpenAI’s New AI Agent】探索操作员，OpenAI的新AI代理商</title>
      <link>https://dzone.com/articles/openai-operator-ai-agent</link>
      <description>【&lt;p data-selectable-paragraph=&#34;&#34;&gt;Testing is a critical yet often time-consuming process. Ensuring that every feature, flow, and edge case works as intended can take up significant resources — both in terms of time and manpower. Manual testing, while thorough, is prone to human error and inefficiency, especially when dealing with repetitive tasks or complex workflows. OpenAI recently introduced an advanced AI agent that would enhance our approach to software testing.&lt;/p&gt;&#xA;&lt;p data-selectable-paragraph=&#34;&#34;&gt;In this article, we’ll explore what Operator is, how it functions, and, most importantly, how it can drastically reduce manual testing time for developers and QA teams. We’ll also walk through some real-world examples to demonstrate its potential impact on testing various application flows and some potential limitations.&lt;/p&gt;】&lt;p数​​据选择 - 段落=“”&gt;测试是一个关键但通常耗时的过程。确保每个功能，流动和边缘案例都可以按预期工作，无论是在时间和人力方面都可以占用大量资源。手动测试虽然彻底易于人为错误和效率低下，尤其是在处理重复任务或复杂的工作流程时。 Openai最近引入了高级AI代理，该代理将增强我们的软件测试方法。&lt;/p&gt;&#xA;&lt;p数​​据可选 - 段落=“”&gt;在本文中，我们将探讨什么是运营商，其功能以及最重要的是，它如何大幅度减少开发人员和QA团队的手动测试时间。我们还将浏览一些现实世界的示例，以证明其对测试各种应用流和一些潜在局限性的潜在影响。&lt;/p&gt;</description>
      <pubDate>Thu, 06 Feb 2025 22:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Build an AI Browser Agent With LLMs, Playwright, Browser-Use】使用LLM，剧作家，浏览器使用来构建AI浏览器代理</title>
      <link>https://dzone.com/articles/build-ai-browser-agent-llms-playwright-browser-use</link>
      <description>【&lt;p data-selectable-paragraph=&#34;&#34;&gt;Browser Use is a tool or platform designed to enable AI agents (such as OpenAI’s GPT models or other large language models) to interact with and control web browsers in an intelligent and automated way. It essentially bridges the gap between AI capabilities and real-world browser interactions, making it possible for AI systems to perform tasks like navigating websites, extracting data, filling out forms, clicking buttons, and more — just as a human user would.&lt;/p&gt;&#xA;&lt;p data-selectable-paragraph=&#34;&#34;&gt;The primary goal of &lt;a href=&#34;https://browser-use.com/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Browser Use&lt;/a&gt;&lt;em&gt;&amp;nbsp;&lt;/em&gt;is to make websites accessible and actionable for AI agents by abstracting away the complexities of browser automation. Instead of requiring developers to write intricate scripts to locate and interact with webpage elements, Browser Use simplifies this process by extracting all interactive elements (like buttons, input fields, links, etc.) and providing a structured interface for AI agents to interact with.&lt;/p&gt;】&lt;p数​​据选择可选 -  paragraph =“”&gt;浏览器使用是一种工具或平台，旨在使AI代理（例如OpenAI的GPT模型或其他大型语言模型）以智能和自动化的方式与和控制Web浏览器进行交互。从本质上讲，它弥合了AI功能与现实世界浏览器交互之间的差距，使AI系统可以执行诸如导航网站，提取数据，填写表单，单击按钮等任务，就像人类用户一样。&lt;/ &lt;/ P&gt;&#xA;&lt;p data-selectable-paragraph =“”&gt; &lt;a href =“ https://browser-use.com/” rel =“ noopener noreferrer” target =“ _ blank”&gt;浏览器使用&lt;/a&gt; &lt; em&gt; &lt;/em&gt;是通过抽象浏览器自动化的复杂性来使网站可访问和操作。浏览器的使用并不要求开发人员编写复杂的脚本来定位和与网页元素进行交互，而是通过提取所有交互式元素（例如按钮，输入字段，链接等）来简化此过程，并提供一个结构化的接口供AI Adents与之互动。 &lt;/p&gt;</description>
      <pubDate>Fri, 07 Feb 2025 15:00:07 +0000</pubDate>
    </item>
    <item>
      <title>【A View on Understanding Non-Human Identities Governance】了解非人类身份治理的观点</title>
      <link>https://dzone.com/articles/understanding-non-human-identities-governance</link>
      <description>【&lt;p&gt;Can an identity exist without being referenced by another identity? How would we know?&lt;br&gt;&lt;br&gt;&#xA; That might seem a bit philosophical for a security tech article, but it is an important point to keep in mind when tackling the subject of &lt;a href=&#34;https://dzone.com/articles/nhi-security-strategy-zta&#34;&gt;non-human identities&lt;/a&gt;. A better question around security would actually be, &#34;&lt;em&gt;Should&lt;/em&gt; an identity exist if it can not be interacted with?&#34; We might not be able to reach the answer to that first question, as proving the nature of reality is a little out of scope for computer science. However, a lot of folks have been hard at work building the NHI Governance tools to determine if a machine identity exists, why it exists, and answer the question of whether it should exist.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;The future of eliminating secrets sprawl means getting a handle on the lifecycles and interdependencies of the non-human identities that rely on secrets. But why now? Let&#39;s step back and re-examine some of our assumptions about NHIs and their existence.&lt;/p&gt;】&lt;p&gt;可以在不被其他身份引用的情况下存在身份吗？我们怎么知道？&lt;br&gt; &lt;br&gt;&#xA; 对于安全技术文章来说，这似乎有些哲学，但是在解决&lt;a href =“ https://dzone.com/articles/nhi-security-strategy-zta”的主题时，要记住这一点要注意。 &gt;非人类身份&lt;/a&gt;。关于安全的一个更好的问题实际上是，“如果无法与之进行交互，&lt;em&gt;应该存在一个身份吗？”我们可能无法得出第一个问题的答案，因为证明现实的本质有点不合时宜。但是，许多人一直在努力构建NHI治理工具，以确定机器身份是否存在，为什么存在并回答该问题是否应该存在的问题。 &lt;/p&gt;&#xA;&lt;p&gt;消除秘密的未来蔓延意味着要处理依赖秘密的非人类身份的生命周期和相互依赖性。但是为什么现在呢？让我们退后一步，重新检查我们对NHIS及其存在的一些假设。&lt;/p&gt;</description>
      <pubDate>Fri, 07 Feb 2025 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Data Management With PostgreSQL Partitioning and pg_partman】带有PostgreSQL分区和PG_PARTMAN的数据管理</title>
      <link>https://dzone.com/articles/postgresql-partitioning-pg-partman-data-management</link>
      <description>【&lt;p style=&#34;text-align: left;&#34;&gt;Efficient database management is vital for handling large datasets while maintaining optimal performance and ease of maintenance. Table partitioning in PostgreSQL is a robust method for logically dividing a large table into smaller, manageable pieces called partitions. This technique helps improve query performance, simplify maintenance tasks, and reduce storage costs.&lt;/p&gt;&#xA;&lt;h4&gt;&lt;br&gt;&lt;/h4&gt;&#xA;&lt;p&gt;This article delves deeply into creating and managing table partitioning in &lt;a href=&#34;https://dzone.com/articles/postgresql-everywhere-and-for-everything&#34;&gt;PostgreSQL&lt;/a&gt;, focusing on the &lt;code&gt;pg_partman&lt;/code&gt; extension for time-based and serial-based partitioning. The types of partitions supported in PostgreSQL are discussed in detail, along with real-world use cases and practical examples to illustrate their implementation.&lt;/p&gt;】&lt;p style =“ text-align：left;”&gt;有效的数据库管理对于处理大型数据集至关重要，同时保持最佳性能和易于维护。 PostgreSQL中的表分区是一种可靠的方法，可将逻辑上的大表格分成较小的，易于管理的零件，称为分区。此技术有助于提高查询性能，简化维护任务并降低存储成本。&lt;/p&gt;&#xA;&lt;H4&gt; &lt;br&gt; &lt;/h4&gt;&#xA;&lt;p&gt;本文深入研究&lt;a href =“ https://dzone.com/articles/postgresql-everywernh-and-and-for-verything”&gt; PostgreSql &lt;/a&gt;，重点介绍&lt;&lt;/a&gt;代码&gt; PG_PARTMAN &lt;/code&gt;扩展基于时间和基于序列的分区。详细讨论了PostgreSQL支持的分区类型，以及现实世界中的用例和实际示例以说明其实施。&lt;/p&gt;</description>
      <pubDate>Fri, 07 Feb 2025 13:00:12 +0000</pubDate>
    </item>
  </channel>
</rss>