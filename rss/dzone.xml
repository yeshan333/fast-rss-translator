<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Java Is Greener on Arm】Arm 上的 Java 更环保</title>
      <link>https://dzone.com/articles/java-is-greener-on-arm</link>
      <description>【&lt;p dir=&#34;ltr&#34; style=&#34;text-align: left;&#34;&gt;Even those not particularly interested in computer technology have heard of microprocessor architectures. This is especially true with the recent news that&lt;a href=&#34;https://www.reuters.com/business/qualcomms-potential-bid-intel-turns-spotlight-their-products-2024-09-24/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt; Qualcomm is rumored to be examining the possibility of acquiring various parts of Intel&lt;/a&gt; and&lt;a href=&#34;https://www.cio.com/article/3513933/uber-embraces-the-cloud-with-customized-cpus.html&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt; Uber is partnering with Ampere Computing&lt;/a&gt;.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34; style=&#34;text-align: left;&#34;&gt;Hardware and software are evolving in parallel, and combining the best of modern software development with the latest Arm hardware can yield impressive performance, cost, and efficiency results.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34; style=&#34;text-align: left;&#34;&gt;即使是那些对计算机技术不是特别感兴趣的人也听说过微处理器架构。最近的新闻尤其如此&lt;a href=&#34;https://www.reuters.com/business/qualcomms-pottial-bid-intel-turns-spotlight-their-products-2024-09-24/&#34; rel =&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;据传高通正在研究收购英特尔各个部分的可能性&lt;/a&gt;和&lt;a href=&#34;https://www.cio.com/article/3513933/uber -embraces-the-cloud-with-customized-cpus.html&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt; Uber 正在与 AmpereComputing 合作&lt;/a&gt;。 &lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34; style=&#34;text-align: left;&#34;&gt;硬件和软件正在并行发展，将最好的现代软件开发与最新的 Arm 硬件相结合可以产生令人印象深刻的性能、成本和效率结果。 &lt;/p&gt;</description>
      <pubDate>Wed, 30 Oct 2024 21:00:03 +0000</pubDate>
    </item>
    <item>
      <title>【Navigating API Challenges in Kubernetes】应对 Kubernetes 中的 API 挑战</title>
      <link>https://dzone.com/articles/navigating-api-challenges-in-kubernetes</link>
      <description>【&lt;p&gt;Kubernetes has become the standard for container orchestration. Although APIs are a key part of most architectures, integrating API management directly into this ecosystem requires careful consideration and significant effort. Traditional API management solutions often struggle to cope with the dynamic, distributed nature of Kubernetes. This article explores these challenges, discusses solution paths, shares best practices, and proposes a reference architecture for Kubernetes-native API management.&lt;/p&gt;&#xA;&lt;h2&gt;The Complexities of API Management in Kubernetes&lt;/h2&gt;&#xA;&lt;p&gt;Kubernetes is a robust platform for managing containerized applications, offering self-healing, load balancing, and seamless scaling across distributed environments. This makes it ideal for microservices, especially in large, complex infrastructures where declarative configurations and automation are key. According to &lt;a href=&#34;https://www.cncf.io/reports/cncf-annual-survey-2023/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;a 2023 CNCF survey&lt;/a&gt;, 84% of organizations are adopting or evaluating Kubernetes, highlighting the growing demand for Kubernetes-native API management to improve scalability and control in cloud native environments. However, API management within Kubernetes brings its own complexities. Key tasks like routing, rate limiting, authentication, authorization, and monitoring must align with the Kubernetes architecture, often involving multiple components like ingress controllers (for external traffic) and service meshes (for internal communications). The overlap between these components raises questions about when and how to use them effectively in API management. While service meshes handle internal traffic security well, additional layers of API management may be needed to manage external access, such as authentication, rate limiting, and partner access controls.&lt;/p&gt;】&lt;p&gt;Kubernetes 已成为容器编排的标准。尽管 API 是大多数架构的关键部分，但将 API 管理直接集成到该生态系统中需要仔细考虑并付出巨大努力。传统的 API 管理解决方案通常难以应对 Kubernetes 的动态、分布式特性。本文探讨了这些挑战，讨论了解决方案路径，分享了最佳实践，并提出了 Kubernetes 原生 API 管理的参考架构。&lt;/p&gt;&#xA;&lt;h2&gt;Kubernetes 中 API 管理的复杂性&lt;/h2&gt;&#xA;&lt;p&gt;Kubernetes 是一个强大的平台，用于管理容器化应用程序，提供自我修复、负载平衡和跨分布式环境的无缝扩展。这使得它非常适合微服务，特别是在声明性配置和自动化是关键的大型复杂基础设施中。根据&lt;a href=&#34;https://www.cncf.io/reports/cncf-annual-survey-2023/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;2023 年 CNCF 调查&lt;/a&gt;，84 % 的组织正在采用或评估 Kubernetes，这突显了对 Kubernetes 原生 API 管理的需求不断增长，以提高云原生环境中的可扩展性和控制力。然而，Kubernetes 内的 API 管理也带来了其自身的复杂性。路由、速率限制、身份验证、授权和监控等关键任务必须与 Kubernetes 架构保持一致，通常涉及入口控制器（用于外部流量）和服务网格（用于内部通信）等多个组件。这些组件之间的重叠引发了有关何时以及如何在 API 管理中有效使用它们的问题。虽然服务网格可以很好地处理内部流量安全，但可能需要额外的 API 管理层来管理外部访问，例如身份验证、速率限制和合作伙伴访问控制。&lt;/p&gt;</description>
      <pubDate>Wed, 30 Oct 2024 16:00:03 +0000</pubDate>
    </item>
    <item>
      <title>【Challenges and Ethical Considerations of AI in Team Management】人工智能在团队管理中的挑战和道德考虑</title>
      <link>https://dzone.com/articles/challenges-and-ethics-of-ai-in-team-management</link>
      <description>【&lt;p&gt;Having spent years in the SaaS world, I&#39;ve seen how AI is transforming team management. But let&#39;s be honest — it&#39;s not all smooth sailing. There are real challenges and ethical dilemmas we need to unpack. So, let’s cut through the noise and get into what it really means to bring AI into the mix for managing teams.&lt;/p&gt;&#xA;&lt;h2&gt;The Double-Edged Sword of Efficiency&lt;/h2&gt;&#xA;&lt;p&gt;First things first: AI is a powerhouse when it comes to efficiency. It can crunch numbers, analyze patterns, and make predictions faster than any human ever could. Sounds great, right? Well, yes and no.&lt;/p&gt;】&lt;p&gt;在 SaaS 领域工作了多年，我已经看到人工智能如何改变团队管理。但说实话，这并不是一帆风顺的。我们需要解决真正的挑战和道德困境。因此，让我们抛开杂音，深入了解将人工智能纳入团队管理的真正含义。&lt;/p&gt;&#xA;&lt;h2&gt;效率的双刃剑&lt;/h2&gt;&#xA;&lt;p&gt;首先要注意的是：人工智能在效率方面是一个强大的力量。它可以比人类更快地处理数字、分析模式并做出预测。听起来不错，对吧？嗯，是的，也不是。&lt;/p&gt;</description>
      <pubDate>Wed, 30 Oct 2024 17:00:07 +0000</pubDate>
    </item>
    <item>
      <title>【How to Get Plain Text From Common Documents in Java】如何从 Java 中的常见文档中获取纯文本</title>
      <link>https://dzone.com/articles/how-to-get-plain-text-from-common-files-in-java</link>
      <description>【&lt;p&gt;In this article, we’ll learn how to extract plain text strings from a few of the most common file types (PDF, DOCX, XSLX, PPTX) we can expect to deal with on a day-to-day basis as programmers in an enterprise environment. &amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;We’ll briefly review when to use plain text extraction methods over Optical Character Recognition (OCR) text extraction methods, and we’ll discuss some use cases for retrieving plain text in a real-world scenario. Ultimately, we’ll cover a few open-source APIs that are perfect for handling plain text extraction on a one-off basis, at the end we’ll demonstrate a proprietary API that saves time by automatically detecting each different file type before extracting plain text content.&lt;/p&gt;】&lt;p&gt;在本文中，我们将学习如何从我们日常处理的一些最常见的文件类型（PDF、DOCX、XSLX、PPTX）中提取纯文本字符串，如下所示企业环境中的程序员。  &lt;/p&gt;&#xA;&lt;p&gt;我们将简要回顾何时使用纯文本提取方法而不是光学字符识别 (OCR) 文本提取方法，并将讨论在现实场景中检索纯文本的一些用例。最后，我们将介绍一些非常适合一次性处理纯文本提取的开源 API，最后我们将演示一种专有 API，它可以在提取纯文本之前自动检测每种不同的文件类型，从而节省时间。文本内容。&lt;/p&gt;</description>
      <pubDate>Wed, 30 Oct 2024 19:00:02 +0000</pubDate>
    </item>
    <item>
      <title>【Implementing LSM Trees in Golang: A Comprehensive Guide】在 Golang 中实现 LSM 树：综合指南</title>
      <link>https://dzone.com/articles/implementing-lsm-trees-in-golang</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Log-Structured Merge Trees (LSM trees) are a powerful data structure widely used in modern databases to efficiently handle write-heavy workloads. They offer significant performance benefits through batching writes and optimizing reads with sorted data structures. In this guide, we’ll walk through the implementation of an LSM tree in &lt;a href=&#34;https://dzone.com/articles/golang-tutorial-learn-golang-by-examples&#34;&gt;Golang&lt;/a&gt;, discuss features such as Write-Ahead Logging (&lt;code&gt;WAL&lt;/code&gt;), block compression, and &lt;code&gt;BloomFilters&lt;/code&gt;, and compare it with more traditional key-value storage systems and indexing strategies. We’ll also dive deeper into &lt;code&gt;SSTables&lt;/code&gt;, &lt;code&gt;MemTables&lt;/code&gt;, and compaction strategies for optimizing performance in high-load environments.&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;LSM Tree Overview&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;An LSM tree works by splitting data between an in-memory component and an on-disk component:&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;日志结构合并树（LSM 树）是现代数据库中广泛使用的强大数据结构，可有效处理写入繁重的工作负载。它们通过批量写入和使用排序数据结构优化读取来提供显着的性能优势。在本指南中，我们将逐步介绍 &lt;a href=&#34;https://dzone.com/articles/golang-tutorial-learn-golang-by-examples&#34;&gt;Golang&lt;/a&gt; 中 LSM 树的实现，讨论预写日志记录 (&lt;code&gt;WAL&lt;/code&gt;)、块压缩和 &lt;code&gt;BloomFilters&lt;/code&gt; 等功能，并将其与更传统的键值存储系统和索引策略进行比较。我们还将深入探讨 &lt;code&gt;SSTables&lt;/code&gt;、&lt;code&gt;MemTables&lt;/code&gt; 以及用于优化高负载环境中性能的压缩策略。&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;LSM 树概述&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;LSM 树的工作原理是在内存组件和磁盘组件之间分割数据：&lt;/p&gt;</description>
      <pubDate>Wed, 30 Oct 2024 18:00:04 +0000</pubDate>
    </item>
    <item>
      <title>【Snowflake Cortex Analyst: Unleashing the Power of Conversational AI for Text-to-SQL】Snowflake Cortex 分析师：释放对话式 AI 的力量，实现文本到 SQL</title>
      <link>https://dzone.com/articles/unleashing-the-power-of-conversational-ai-for-text</link>
      <description>【&lt;h2&gt;Conversational AI&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/evolution-of-conversational-ai&#34;&gt;Conversational AI&lt;/a&gt; refers to technologies that enable humans to interact with machines using natural language, either through text or voice. This includes chatbots, voice assistants, and other types of conversational interfaces.&lt;/p&gt;&#xA;&lt;p&gt;Conversational AI for SQL refers to natural language interfaces that enable users to interact with databases using everyday language instead of writing SQL code. This technology allows non-technical users to query and analyze data without requiring extensive SQL knowledge.&lt;/p&gt;】&lt;h2&gt;对话式人工智能&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/evolution-of-conversational-ai&#34;&gt;对话式人工智能&lt;/a&gt;是指使人类能够使用自然语言（通过文本）与机器进行交互的技术或声音。这包括聊天机器人、语音助手和其他类型的对话界面。&lt;/p&gt;&#xA;&lt;p&gt;SQL 对话式 AI 是指自然语言界面，使用户能够使用日常语言与数据库交互，而不是编写 SQL 代码。该技术允许非技术用户查询和分析数据，而无需广泛的 SQL 知识。&lt;/p&gt;</description>
      <pubDate>Wed, 30 Oct 2024 12:00:04 +0000</pubDate>
    </item>
    <item>
      <title>【Compliance Automated Standard Solution (COMPASS), Part 7: Compliance-to-Policy for IT Operation Policies Using Auditree】合规性自动化标准解决方案 (COMPASS)，第 7 部分：使用 Auditree 实现 IT 运营策略的合规性</title>
      <link>https://dzone.com/articles/compass-part-7-c2p-using-auditree</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;(Note: A list of links for all articles in this series can be found at the conclusion of this article.)&lt;/p&gt;&#xA;&lt;p&gt;In Part 4 of this multi-part series on continuous compliance, we presented designs for Compliance Policy Administration Centers (CPAC) which are typically part of larger platforms known in the industry under various names such as Cloud-Native Application Protection Platform (CNAPP), Cloud Security Posture Management (CSPM), Cloud Workload Protection Platforms (CWPP), or Cloud Infrastructure Entitlement Management (CIEM), bundled into those platforms to facilitate the management of the compliance artifacts connecting the Regulatory Policies expressed programmatically as Compliance-as-Code with technical policies implemented as Policy-as-Code. The separation of Compliance-as-Code and Policy-as-Code is purposeful, as different personas (see Part 1) need to independently manage their respective responsibilities according to their expertise; e.g., compliance controls and parameters selection, crosswalks mapping across regulations for compliance and auditor experts, or runtime evidence collectors and checks implementation for code developers or security focals.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;（注意：本系列所有文章的链接列表可以在本文的结尾处找到。）&lt;/p&gt;&#xA;&lt;p&gt;在这个关于持续合规性的多部分系列的第 4 部分中，我们介绍了合规性策略管理中心 (CPAC) 的设计，这些设计通常是业界已知的较大平台的一部分，名称各异，例如云原生应用程序保护平台 (CPAC) CNAPP）、云安全态势管理（CSPM）、云工作负载保护平台（CWPP）或云基础设施权利管理（CIEM），捆绑到这些平台中，以方便管理连接以编程方式表达的监管政策的合规性工件作为“合规即代码”，而技术政策则作为“政策即代码”实施。合规即代码和政策即代码的分离是有目的的，因为不同的角色（参见第 1 部分）需要根据自己的专业知识独立管理各自的职责；例如，合规性控制和参数选择、合规性和审计专家的跨法规交叉映射、或运行时证据收集器以及代码开发人员或安全焦点的检查实施情况。&lt;/p&gt;</description>
      <pubDate>Wed, 30 Oct 2024 15:00:03 +0000</pubDate>
    </item>
    <item>
      <title>【How to Create a Pokémon Breeding Gaming Calculator Using HTML, CSS, and JavaScript】如何使用 HTML、CSS 和 JavaScript 创建神奇宝贝育种游戏计算器</title>
      <link>https://dzone.com/articles/how-to-create-a-pokemon-breeding-gaming-calculator</link>
      <description>【&lt;p&gt;Gaming calculators can provide quick and useful features for gamers, such as calculating stats, damage, or compatibility between in-game elements. In this guide, I&#39;ll walk you through creating a simple, yet interactive Pokémon Breeding Calculator using &lt;a href=&#34;https://dzone.com/refcardz/core-html&#34;&gt;HTML&lt;/a&gt;, &lt;a href=&#34;https://dzone.com/refcardz/corecss-part1&#34;&gt;CSS&lt;/a&gt;, and &lt;a href=&#34;https://dzone.com/refcardz/object-oriented-javascript&#34;&gt;JavaScript&lt;/a&gt;. This project will fetch data from an API and determine if two Pokémon can breed based on their egg groups.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;You can see a live version of this calculator on Game On Trend (&lt;a href=&#34;https://gameontrend.com/pokemon-breeding-calculator/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Pokemon Breeding Calculator&lt;/a&gt;).&lt;/p&gt;】&lt;p&gt;游戏计算器可以为游戏玩家提供快速且有用的功能，例如计算统计数据、伤害或游戏内元素之间的兼容性。在本指南中，我将引导您使用 &lt;a href=&#34;https://dzone.com/refcardz/core-html&#34;&gt;HTML&lt;/a&gt;、&lt;a href= “https://dzone.com/refcardz/corecss-part1&#34;&gt;CSS&lt;/a&gt; 和 &lt;a href=&#34;https://dzone.com/refcardz/object-orient-javascript&#34;&gt;JavaScript&lt;/a&gt; 。该项目将从 API 获取数据，并根据卵组确定两个神奇宝贝是否可以繁殖。 &lt;/p&gt;&#xA;&lt;p&gt;您可以在 Game On Trend 上看到此计算器的实时版本 (&lt;a href=&#34;https://gameontrend.com/pokemon-breeding-calculator/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Pokemon育种计算器&lt;/a&gt;）。&lt;/p&gt;</description>
      <pubDate>Wed, 30 Oct 2024 13:00:03 +0000</pubDate>
    </item>
    <item>
      <title>【Multimodal RAG Is Not Scary, Ghosts Are Scary】多式联运 RAG 并不可怕，可怕的是鬼魂</title>
      <link>https://dzone.com/articles/multimodal-rag-is-not-scary-ghosts-are-scary</link>
      <description>【&lt;p name=&#34;0ea1&#34; style=&#34;text-align: left;&#34;&gt;I just gave a talk at &lt;a href=&#34;https://2024.allthingsopen.org/schedule&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;All Things Open&lt;/a&gt; and it is hard to believe that &lt;a href=&#34;https://dzone.com/articles/optimizing-generative-ai-with-retrieval-augmented&#34;&gt;Retrieval Augmented Generation&lt;/a&gt; (&lt;a href=&#34;https://milvus.io/docs/build-rag-with-milvus.md&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;RAG&lt;/a&gt;) now seems like it has been a technique that we have been doing for years.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p name=&#34;5715&#34;&gt;There is a good reason for that, as over the last two years it has exploded in depth and breadth as the utility of RAG is boundless. The ability to improve the results of generated results from &lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-large-language-models&#34;&gt;large language models&lt;/a&gt; is constantly improving as variations, improvements, and new paradigms are pushing things forward.&lt;/p&gt;】&lt;p name=&#34;0ea1&#34; style=&#34;text-align: left;&#34;&gt;我刚刚在 &lt;a href=&#34;https://2024.allthingsopen.org/schedule&#34; rel=&#34;noopener noreferrer&#34; target=&#34; 发表了演讲_blank&#34;&gt;万物皆开放&lt;/a&gt;，很难相信&lt;a href=&#34;https://dzone.com/articles/optimizing-generative-ai-with-retrieval-augmented&#34;&gt;检索增强一代&lt;/ a&gt; (&lt;a href=&#34;https://milvus.io/docs/build-rag-with-milvus.md&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;RAG&lt;/a&gt;) 现在看来是这样这是我们多年来一直在做的一项技术。 &lt;/p&gt;&#xA;&lt;p name=&#34;5715&#34;&gt;这是有充分理由的，因为在过去两年里，RAG 的实用性是无限的，其深度和广度都呈爆炸式增长。改进&lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-large-language-models&#34;&gt;大型语言模型&lt;/a&gt;生成的结果的能力随着变化而不断改进、改进和新范式正在推动事情向前发展。&lt;/p&gt;</description>
      <pubDate>Wed, 30 Oct 2024 20:00:12 +0000</pubDate>
    </item>
    <item>
      <title>【Hot Class Reload in Java: A Webpack HMR-Like Experience for Java Developers】Java 中的热类重载：为 Java 开发人员提供类似 Webpack HMR 的体验</title>
      <link>https://dzone.com/articles/hot-class-reload-in-java</link>
      <description>【&lt;p&gt;In the world of software development, time is everything. Every developer knows the frustration of waiting for a full application restart just to see a small change take effect. Java developers, in particular, have long dealt with this issue. But what if you didn’t have to stop and restart every time you updated a class? Enter Hot Class Reload (HCR) in Java — a technique that can keep you in the flow, reloading classes on the fly, much like Hot Module Reload (HMR) does in JavaScript.&lt;/p&gt;&#xA;&lt;p&gt;In this guide, we’ll walk through how to implement HCR and integrate it into your Java development workflow. By the end, you’ll have a powerful new tool to reduce those long, unproductive restart times.&lt;/p&gt;】&lt;p&gt;在软件开发领域，时间就是一切。每个开发人员都知道等待应用程序完全重新启动只是为了看到一个小更改生效的挫败感。尤其是 Java 开发人员，长期以来一直在处理这个问题。但是，如果您不必在每次更新类时停止并重新启动呢？ Java 中的热类重新加载 (HCR) 是一种可以让您保持流畅、动态重新加载类的技术，就像 JavaScript 中的热模块重新加载 (HMR) 所做的那样。&lt;/p&gt;&#xA;&lt;p&gt;在本指南中，我们将逐步介绍如何实现 HCR 并将其集成到您的 Java 开发工作流程中。到最后，您将拥有一个强大的新工具来减少那些漫长且无效的重启时间。&lt;/p&gt;</description>
      <pubDate>Wed, 30 Oct 2024 14:00:11 +0000</pubDate>
    </item>
  </channel>
</rss>