<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Designing a Blog Application Using Document Databases】使用文档数据库设计博客应用程序</title>
      <link>https://dzone.com/articles/design-a-blog-application-with-document-databases</link>
      <description>【&lt;p&gt;Let’s say you’re building a blog website.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;On the homepage, you need to display a list of the 10 most recent posts, with pagination allowing users to view older posts. When a user clicks on a post, they should see its content along with metadata, such as the author’s name and the creation date. Each post also supports comments, so at the bottom of a post, you’ll display the five earliest comments with an option to load more.&amp;nbsp;&lt;/p&gt;】&lt;p&gt;假设您正在建立一个博客网站。 &lt;/p&gt;&#xA;&lt;p&gt;在主页上，您需要显示10个最新帖子的列表，分页允许用户查看较旧的帖子。当用户单击帖子时，他们应该与元数据一起查看其内容，例如作者的姓名和创建日期。每个帖子还支持注释，因此，在帖子的底部，您将显示五个最早的评论，并可以选择更多。 &lt;/p&gt;</description>
      <pubDate>Fri, 21 Feb 2025 21:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Step-by-Step Reasoning Can Fix Madman Logic in Vision AI】逐步推理可以在AI中解决Madman逻辑</title>
      <link>https://dzone.com/articles/step-by-step-reasoning-fixes-madman-logic-in-vision-ai</link>
      <description>【&lt;p name=&#34;6378&#34;&gt;Vision AI models have a flaw. When shown a medical scan, they might correctly diagnose a condition while citing anatomically impossible reasons. Or they might solve a geometry problem with the right answer but skip essential theorems and rely on made-up ones instead. These models reach correct conclusions through reasoning that makes no sense.&lt;/p&gt;&#xA;&lt;h2 name=&#34;6378&#34;&gt;The Gap in Visual Reasoning Models&lt;/h2&gt;&#xA;&lt;p name=&#34;48e0&#34;&gt;This hints at a deeper problem. Current models don’t really think through visual problems  — they pattern-match their way to answers. The LlamaV-o1 team discovered this by doing something simple: they forced their model to show its work. The results revealed that most visual reasoning errors don’t come from failing to see what’s in an image. They come from skipping key logical steps between seeing and concluding.&lt;/p&gt;】&lt;p name =“ 6378”&gt;视觉AI模型有缺陷。当显示医疗扫描时，他们可能会在解剖学上不可能的原因中正确诊断病情。或者，他们可能会通过正确的答案解决一个几何问题，但要跳过基本定理并依靠化妆的定理。这些模型通过没有意义的推理得出正确的结论。&lt;/p&gt;&#xA;&lt;h2 name =“ 6378”&gt;视觉推理模型中的差距&lt;/h2&gt;&#xA;&lt;p name =“ 48e0”&gt;这暗示了一个更深的问题。当前的模型实际上并没有通过视觉问题进行思考，而是他们对答案的方式进行了模式。 Llamav-O1团队通过做一些简单的事情来发现这一点：他们强迫自己的模型展示其作品。结果表明，大多数视觉推理错误并不是由于未能看到图像中的内容而出现。它们来自跳过观察和结论之间的关键逻辑步骤。&lt;/p&gt;</description>
      <pubDate>Fri, 21 Feb 2025 15:15:00 +0000</pubDate>
    </item>
    <item>
      <title>【Hexagonal Architecture: A Lyrics App Example Using Java】六边形体系结构：使用Java的歌词应用程序示例</title>
      <link>https://dzone.com/articles/hexagonal-architecture-lyrics-app-example-java</link>
      <description>【&lt;p&gt;This architecture principle was created by Alistair Cockburn in 2005. This is one of the many forms of Domain-Driven Design (DDD) Architecture. The goal was to find a way to solve or otherwise mitigate general caveats introduced by object-oriented programming.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;This is also known as the &lt;a href=&#34;https://dzone.com/articles/hexagonal-architecture-it-works&#34;&gt;Ports and Adapters Architecture&lt;/a&gt;. The hexagon concept isn’t related to a six-side architecture, nor does it have anything to do with the geometrical form. A hexagon has six sides indeed, but the idea is to illustrate the concept of many ports.&amp;nbsp;&lt;/p&gt;】&lt;p&gt;该架构原理是由Alistair Cockburn在2005年创建的。这是域形驱动设计（DDD）架构的多种形式之一。目标是找到一种解决或以其他方式减轻面向对象的编程引入的一般警告的方法。 &lt;/p&gt;&#xA;&lt;p&gt;这也称为&lt;a href =“ https://dzone.com/articles/hexagonal-architecture-it-works”&gt;端口和适配器体系结构&lt;/a&gt;。六边形概念与六边的架构无关，也与几何形式没有任何关系。六角形确实有六个方面，但这个想法是说明许多港口的概念。 &lt;/p&gt;</description>
      <pubDate>Fri, 21 Feb 2025 19:30:04 +0000</pubDate>
    </item>
    <item>
      <title>【Microservices vs Monoliths: Picking the Right Architecture】微服务与整体：选择正确的体系结构</title>
      <link>https://dzone.com/articles/microservices-vs-monoliths-picking-right-architecture</link>
      <description>【&lt;p&gt;You’re building a new application, and suddenly, you’re stuck in an endless debate: &lt;em&gt;microservices or monolith?&lt;/em&gt; It’s the software equivalent of choosing between a Swiss Army knife and a specialized toolkit. Both get the job done, but the wrong choice could mean wasted time, budget, or technical debt. Having guided teams through both architectures for over a decade, here’s my no-BS take on the tradeoffs — and how to avoid regrets.&lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;Performance: It’s Not Just About Speed&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Let’s cut through the hype. Yes, &lt;a href=&#34;https://dzone.com/articles/what-is-microservices-an-introduction-to-microserv&#34;&gt;microservices&lt;/a&gt; &lt;em&gt;can&lt;/em&gt; scale effortlessly — in theory. Imagine an e-commerce app where the payment service autoscales during Black Friday traffic while the product catalog stays idle. That’s the dream. But here’s the kicker: those independently deployed services chat constantly over APIs. Every interaction introduces latency, and suddenly, your “scalable” system is bottlenecked by network calls. I’ve seen teams waste months optimizing service mesh configurations just to shave off milliseconds.&lt;/p&gt;】&lt;p&gt;您正在构建一个新的应用程序，突然之间，您陷入了无休止的辩论中：&lt;em&gt;微服务或Monolith？&lt;/em&gt;这是在瑞士军刀和专业工具包之间选择的软件。两者都完成工作，但是错误的选择可能意味着浪费时间，预算或技术债务。十多年来指导团队通过两个架构，这是我的无障碍权衡 - 以及如何避免后悔。&lt;/p&gt;&#xA;&lt;H2&gt; &lt;strong&gt;性能：不仅涉及速度&lt;/strong&gt; &lt;/h2&gt;&#xA;&lt;p&gt;让我们削减炒作。是的，&lt;a href =“ https://dzone.com/articles/what-is-microservices-microservices-an-introduction-to-microserv”&gt; microservices &lt;/a&gt; &lt;em&gt; 。想象一个电子商务应用程序，在黑色星期五流量中，付款服务在产品目录保持闲置时自动化。那是梦。但这是踢脚：那些独立部署的服务不断地通过API聊天。每种互动都会引入延迟，突然间，您的“可扩展”系统被网络调用瓶装。我已经看到团队浪费了几个月来优化服务网格配置，只是为了剃光毫秒。&lt;/p&gt;</description>
      <pubDate>Fri, 21 Feb 2025 17:00:03 +0000</pubDate>
    </item>
    <item>
      <title>【Terraform State File: Key Challenges and Solutions】Terraform状态文件：关键挑战和解决方案</title>
      <link>https://dzone.com/articles/terraform-state-file-challenges-and-solutions</link>
      <description>【&lt;h2&gt;&lt;strong&gt;Introduction of Terraform State File&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;The Terraform state file serves as a crucial bridge between the declarative configuration in the Terraform code and the resources deployed in the infrastructure. It maintains a detailed record of all the resources managed by Terraform, including their attributes, dependencies, and metadata. This information enables Terraform to perform intelligent operations such as incremental updates and resource tracking across multiple executions.&lt;/p&gt;&#xA;&lt;p&gt;When Terraform runs, it compares the desired state defined in the configuration files to the current state recorded in the state file. This comparison allows Terraform to determine which changes must be applied to align the infrastructure with the desired configuration.&amp;nbsp;&lt;/p&gt;】&lt;H2&gt; &lt;strong&gt;引入Terraform状态文件&lt;/strong&gt; &lt;/h2&gt;&#xA;&lt;p&gt; Terraform状态文件是Terraform代码中声明性配置与基础架构中部署的资源之间的重要桥梁。它保留了Terraform管理的所有资源的详细记录，包括其属性，依赖项和元数据。该信息使Terraform能够执行智能操作，例如跨多个执行的增量更新和资源跟踪。&lt;/p&gt;&#xA;&lt;p&gt;当Terraform运行时，它将配置文件中定义的所需状态与状态文件中记录的当前状态进行了比较。此比较允许Terraform确定必须应用哪些更改将基础结构与所​​需配置对齐。 &lt;/p&gt;</description>
      <pubDate>Fri, 21 Feb 2025 16:15:00 +0000</pubDate>
    </item>
    <item>
      <title>【Deduplication of Videos Using Fingerprints, CLIP Embeddings】使用指纹，剪辑嵌入视频重复数据删除</title>
      <link>https://dzone.com/articles/deduplication-of-videos-using-fingerprints-clip-embeddings</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Video deduplication is a crucial process for managing large-scale video inventory, where duplicates consume storage, increase processing costs, and affect data quality negatively.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;This article explores a robust architecture for deduplication using video segmentation, frame embedding extraction, and clustering techniques. It also highlights key methodologies like video hashing, CLIP embeddings, and temporal alignment for effective deduplication.&lt;/p&gt;】&lt;p dir =“ ltr”&gt;视频重复数据删除是管理大规模视频清单的关键过程，在该过程中，重复的消费存储，增加处理成本并对数据质量产生负面影响。 &lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;本文探讨了使用视频分割，框架嵌入提取和聚类技术重复数据删除的强大体系结构。它还突出了关键方法，例如视频哈希，剪辑嵌入和有效重复数据的时间对齐。&lt;/p&gt;</description>
      <pubDate>Fri, 21 Feb 2025 18:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Building a Simple RAG Application With Java and Quarkus】使用Java和Quarkus构建简单的RAG应用程序</title>
      <link>https://dzone.com/articles/simple-rag-application-java-quarkus</link>
      <description>【&lt;h2 dir=&#34;ltr&#34;&gt;Introduction to RAG and Quarkus&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Retrieval-augmented generation (RAG) is a technique that enhances AI-generated responses by retrieving relevant information from a knowledge source. In this tutorial, we’ll build a simple RAG-powered application using Java and Quarkus (a Kubernetes-native Java framework). Perfect for Java beginners!&lt;/p&gt;&#xA;&lt;h3 dir=&#34;ltr&#34;&gt;Why Quarkus?&lt;/h3&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Quarkus provides &lt;a href=&#34;https://quarkus.io/extensions/?search-regex=langchain4j&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;multiple LangChain4j extensions&lt;/a&gt; to simplify AI application development, especially RAG implementation by providing an &lt;a href=&#34;https://docs.quarkiverse.io/quarkus-langchain4j/dev/easy-rag.html&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Easy RAG module&lt;/a&gt; for building end-to-end RAG pipelines. Easy RAG acts as a bridge, connecting the retrieval components (like your document source) with the LLM interaction within the LangChain4j framework.&amp;nbsp;&lt;/p&gt;】&lt;h2 dir =“ ltr”&gt;抹布和Quarkus简介&lt;/h2&gt;&#xA;&lt;p dir =“ ltr”&gt;检索 - 演出的生成（RAG）是一种通过从知识源检索相关信息来增强AI生成的响应的技术。在本教程中，我们将使用Java和Quarkus（Kubernetes-native Java框架）构建一个简单的抹布功耗应用程序。非常适合Java初学者！&lt;/p&gt;&#xA;&lt;h3 dir =“ ltr”&gt;为什么？&lt;/h3&gt;&#xA;&lt;p dir =“ ltr”&gt; quarkus提供&lt;a href =“ https://quarkus.io/extensions/?search-regex = langchain4j” rel =“ noopener noreferrer” target =“ _ blank”&gt; &gt;为了简化AI应用程序的开发，尤其是通过提供&lt;a的RAG实施href =“ https://docs.quarkiverse.io/quarkus-langchain4j/dev/easy-rag.html” rel =“ noopener noreferrer” target =“ _ blank”&gt;易于抹布模块&lt;/a&gt;结束抹布管道。 Easy Rag充当桥梁，将检索组件（如文档源）与Langchain4J框架中的LLM交互联系起来。 &lt;/p&gt;</description>
      <pubDate>Fri, 21 Feb 2025 14:30:00 +0000</pubDate>
    </item>
    <item>
      <title>【A Comprehensive Guide to Generative AI Training】生成AI培训的综合指南</title>
      <link>https://dzone.com/articles/generative-ai-comprehensive-guide</link>
      <description>【&lt;p&gt;Large language models (LLMs) have impacted natural language processing (NLP) by introducing advanced applications such as text generation, summarization, and conversational AI. Models like ChatGPT use a specific neural architecture called a transformer to predict the next word in a sequence, learning from enormous text datasets through self-attention mechanisms.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;This guide breaks down the step-by-step process for training generative AI models, including pre-training, fine-tuning, alignment, and practical considerations.&lt;/p&gt;】&lt;p&gt;大语言模型（LLMS）通过引入高级应用程序（例如文本生成，摘要和对话AI）来影响自然语言处理（NLP）。诸如chatgpt之类的模型使用称为变压器的特定神经体系结构来预测顺序的下一个单词，通过自我发挥机制从巨大的文本数据集中学习。 &lt;/p&gt;&#xA;&lt;p&gt;本指南分解了训练生成AI模型的逐步过程，包括预训练，微调，对齐和实际考虑。&lt;/p&gt;</description>
      <pubDate>Fri, 21 Feb 2025 19:00:05 +0000</pubDate>
    </item>
    <item>
      <title>【Beating the 100-Scheduled-Job Limit in Salesforce】击败Salesforce中的100次训练有素的限制</title>
      <link>https://dzone.com/articles/beating-the-100-scheduled-job-limit-in-salesforce</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Salesforce’s 100-scheduled-job limit can sneak up on you when your org scales. You might think 100 scheduled jobs sounds like plenty — until various business units need daily batch runs, monthly triggers, specialized reporting tasks, and more. Suddenly, you’re stuck trying to figure out how to add more time-based processes without hitting that cap.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;To tackle this, I designed a dynamic scheduling framework that consolidates multiple jobs into just one. Instead of scheduling every single job separately, we rely on custom settings to instruct a “master” scheduled job which tasks to run and when.&lt;/p&gt;】&lt;p dir =“ ltr”&gt; Salesforce的100套件job限制可以在您的组织尺度上潜入您。您可能会认为100个预定的作业听起来很大 - 直到各个业务部门需要每日批次运行，每月触发器，专业报告任务等。突然，您一直在试图弄清楚如何添加更多时间基于时间的过程而不碰到该帽子。&lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;为了解决这个问题，我设计了一个动态的调度框架，将多个作业合并为一个。我们依靠自定义设置来指示“主”计划的工作，而不是单独安排每个作业，而是要运行的任务。&lt;/p&gt;。</description>
      <pubDate>Fri, 21 Feb 2025 22:15:00 +0000</pubDate>
    </item>
    <item>
      <title>【Controlling Access to Google BigQuery Data】控制访问Google BigQuery数据</title>
      <link>https://dzone.com/articles/control-access-to-google-bigquery-data</link>
      <description>【&lt;p dir=&#34;ltr&#34; style=&#34;text-align: left;&#34;&gt;Google BigQuery, Google Cloud&#39;s data warehouse, provides a comprehensive suite of tools to help you control who can access your valuable data and what they can do with it. This blog post dives into the essential principles and practical techniques for managing data access in BigQuery and covers everything from basic Identity and Access Management (IAM) to more advanced features like authorized datasets, views, routines, and materialized views.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34; style=&#34;text-align: left;&#34;&gt;We&#39;ll guide you through setting up granular permissions, ensuring your data remains secure and accessible only to authorized individuals and services. This guide will equip you with the knowledge you need to take control of your &lt;a href=&#34;https://dzone.com/articles/bigquery-data-frames-in-python-1&#34;&gt;BigQuery&lt;/a&gt; data.&lt;/p&gt;】&lt;p dir =“ ltr” style =“ text-align：left;”&gt; Google Bigquery，Google Cloud的数据仓库，提供了一套全面的工具，可帮助您控制谁可以访问您的宝贵数据以及他们可以使用它。这篇博客文章深入研究了BigQuery中数据访问的基本原理和实用技术，并涵盖了从基本身份和访问管理（IAM）到更高级功能的所有内容，例如授权的数据集，视图，例程，例程和物有的视图。&lt;/p&gt;&gt; &lt;/p&gt;&#xA;&lt;p dir =“ ltr” style =“ text-align：left;”&gt;我们将指导您设置粒状权限，确保您的数据保持安全且仅适用于授权的个人和服务。本指南将为您提供控制&lt;a href =“ https://dzone.com/articles/bigquery-data-frames-in-python-1”&gt; bigquery &lt;/a&gt;数据所需的知识。 &lt;/p&gt;</description>
      <pubDate>Fri, 21 Feb 2025 20:15:00 +0000</pubDate>
    </item>
  </channel>
</rss>