<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Designing Configuration-Driven Apache Spark SQL ETL Jobs with Delta Lake CDC】设计配置驱动的Apache Spark SQL ETL工作Delta Lake CDC</title>
      <link>https://dzone.com/articles/config-driven-spark-sql-etl-delta-cdc</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Modern data pipelines demand flexibility, maintainability, and efficient incremental processing. Hardcoding transformations into Spark applications leads to technical debt and brittle pipelines. A configuration-driven approach separates business logic from execution, allowing easy changes, collaboration between developers and analysts, and promoting scalable &lt;a href=&#34;https://dzone.com/articles/automating-etl-workflows&#34;&gt;ETL workflows&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;In this article, we&#39;ll explore how to build config-based Spark SQL ETL jobs that integrate &lt;a href=&#34;https://dzone.com/articles/handling-concurrent-data-load-challenges-in-delta&#34;&gt;Delta Lake&lt;/a&gt; Change Data Capture (CDC) for efficient upserts.&lt;/p&gt;】&lt;p dir =“ ltr”&gt;现代数据管道要求灵活性，可维护性和有效的增量处理。硬编码转换为火花应用导致技术债务和脆弱的管道。一种配置驱动的方法将业务逻辑与执行分开，允许简单更改，开发人员和分析师之间的协作以及促进可扩展&lt;a href =“ https://dzone.com/articles/articles/automation/automation-etl-workflows”&gt; etl workflows &lt;/a&gt;。&#xA;&lt;p dir =“ ltr”&gt;在本文中，我们将探讨如何构建基于配置的Spark SQL ETL作业，该作业&lt;a href =“ https://dzone.com/articles/handling-concurrent-concurrent-data-load-load-load-challenges-ingenges-in-delges-in-delta-</description>
      <pubDate>Mon, 14 Jul 2025 20:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Turn SQL into Conversation: Natural Language Database Queries With MCP】将SQL变成对话：使用MCP的自然语言数据库查询</title>
      <link>https://dzone.com/articles/natural-language-sql-queries-with-mcp</link>
      <description>【&lt;p&gt;A previous article [&lt;a href=&#34;https://imhoratiu.wordpress.com/2025/06/01/enriching-ai-with-real-time-insights-via-mcp/&#34; rel=&#34;noreferrer noopener&#34; target=&#34;_blank&#34;&gt;Resource 1&lt;/a&gt;] provided general insights regarding Model Context Protocol, more exactly, it outlined how MCP can act as an universal adapter that allows AI assistants to securely access external systems in order to bring in new context that is useful to the interacting LLMs.&lt;/p&gt;&#xA;&lt;p&gt;The current article continues this analysis and exemplifies how a dedicated MCP server that is able to access a database can enable LLMs to inspect them and offer their users useful pieces of information. Users on the other hand, are now given the opportunity to automatically obtain actual business insights inferred directly from the existing data by using just the natural language.&lt;/p&gt;】&lt;p&gt;上一篇文章[&lt;a href =“ https://imhoratiu.wordpress.com/2025/06/01/enriching-ai-with-with-with-real-time-ights-ingights-insights-via-mcp/” rel =“ noreferrer noopener noopener nooopener noopener” target =“ _通用适配器，允许AI助手安全访问外部系统，以引入对交互的LLM有用的新上下文。&lt;/p&gt;&#xA;&lt;p&gt;当前文章继续进行此分析，并举例说明了能够访问数据库的专用MCP服务器如何使LLMS能够检查它们并为用户提供有用的信息。另一方面，用户现在有机会通过仅使用自然语言自动从现有数据中直接从现有数据中推断出实际的业务见解。&lt;/p&gt;</description>
      <pubDate>Mon, 14 Jul 2025 18:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【The 7 Biggest Cloud Misconfigurations That Hackers Love (and How to Fix Them)】黑客喜欢的7个最大的云构造（以及如何修复）</title>
      <link>https://dzone.com/articles/biggest-cloud-misconfigurations-that-hackers-love</link>
      <description>【&lt;p style=&#34;text-align: left;&#34;&gt;Look, I&#39;ve been in cybersecurity for over a decade, and I&#39;m tired of seeing the same preventable disasters over and over again. Cloud security breaches aren&#39;t happening because of some sophisticated nation-state actor using a zero-day exploit. They&#39;re happening because someone forgot to flip a switch or left a door unlocked.&lt;/p&gt;&#xA;&lt;p style=&#34;text-align: left;&#34;&gt;The numbers are frankly depressing. According to Verizon&#39;s latest Data Breach Investigations Report, misconfiguration errors account for more than 65% of all cloud-related security incidents. IBM puts the average cost of a misconfiguration-related breach at $4.88 million. But here&#39;s what really gets me — these aren&#39;t just statistics. Behind every one of these numbers is a real company that had to explain to its customers why their personal data was sitting on the internet for anyone to grab.&lt;/p&gt;】&lt;p style =“ text-align：left;”&gt;看，我已经在网络安全上已经十多年了，我厌倦了一遍又一遍地看到相同的可预防灾难。云安全违规并没有发生，因为使用零日漏洞利用了一些复杂的民族国家演员。他们之所以发生，是因为有人忘记翻转开关或留下了一扇解锁。&lt;/p&gt;&#xA;&lt;p style =“ text-align：left;”&gt;数字坦率地令人沮丧。根据Verizon的最新数据泄露调查报告，错误配置错误占所有与云相关的安全事件的65％以上。 IBM将与配置有关的违规行为的平均成本定为488万美元。但这是真正吸引我的东西 - 这些不仅仅是统计数据。这些数字中的每一个背后都是一家真正的公司，必须向客户解释为什么他们的个人数据坐在互联网上供任何人抓住。&lt;/p&gt;</description>
      <pubDate>Mon, 14 Jul 2025 14:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【AI-Powered Ransomware and Malware Detection in Cloud Environments】AI驱动的勒索软件和恶意软件在云环境中检测</title>
      <link>https://dzone.com/articles/ai-ransomware-malware-detection-cloud</link>
      <description>【&lt;p&gt;&lt;span&gt;Cloud platforms have become prime targets for ransomware and malware attacks, which can paralyze businesses by encrypting data or exfiltrating sensitive information. Traditional security tools such as signature-based antivirus and rule-based systems often struggle to detect advanced threats that mutate or exploit unknown vulnerabilities. Organizations are increasingly turning to artificial intelligence (AI) and machine learning (ML) techniques to bolster cloud defenses. These models can analyze massive volumes of cloud logs and network traffic, spot subtle anomalies, and detect known malware and zero-day attacks in real time.&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;span&gt;This article reviews the leading AI models for cloud malware detection, outlines technical challenges, and explores cutting-edge innovations shaping AI-powered cybersecurity&#39;s future.&lt;/span&gt;&lt;/p&gt;】&lt;p&gt; &lt;span&gt;云平台已成为勒索软件和恶意软件攻击的主要目标，该目标可以通过加密数据或剥离敏感信息来使业务瘫痪。基于签名的防病毒和基于规则的系统等传统安全工具通常难以检测突变或利用未知脆弱性的先进威胁。组织越来越多地转向人工智能（AI）和机器学习（ML）技术来增强云防御能力。这些模型可以分析大量的云日志和网络流量，斑点微妙的异常，并实时检测已知的恶意软件和零日攻击。&lt;/span&gt; &lt;/pan&gt; &lt;/p&gt;&#xA;&lt;p&gt; &lt;span&gt;本文回顾了云恶意软件检测的领先AI模型，概述了技术挑战，并探索了塑造AI驱动的网络安全未来的尖端创新。&lt;/span&gt;</description>
      <pubDate>Mon, 14 Jul 2025 12:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Understanding Time Series Databases】了解时间序列数据库</title>
      <link>https://dzone.com/articles/understanding-time-series-databases</link>
      <description>【&lt;p&gt;Organizations now generate extensive amounts of time-stamped data through IoT devices as well as financial markets and application logs in the present data-driven world. &amp;nbsp;Time series databases function as dedicated solutions that optimize the storage, analysis, and processing of temporal data. This article examines the essential principles of time series databases while examining their distinctive traits and evaluating their performance against standard database management systems.&lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;What Is Time Series Data?&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Time series data represents tracked and monitored data points that get downscaled and aggregated throughout a chronological period. A time series contains data points where each entry has its corresponding timestamp, which determines the sequence of events. Such data exists extensively throughout our digital world and manifests as:&lt;/p&gt;】&lt;p&gt;组织现在通过物联网设备以及当前数据驱动的世界中的金融市场和应用日志生成大量的时间戳记数据。  时间序列数据库充当专用解决方案，可优化时间数据的存储，分析和处理。本文研究了时间序列数据库的基本原理，同时研究了其独特特征并评估其针对标准数据库管理系统的性能。&lt;/p&gt;&#xA;&lt;h2&gt; &lt;strong&gt;什么是时间序列数据？&lt;/strong&gt; &lt;/h2&gt;&#xA;&lt;p&gt;时间序列数据表示经过跟踪和监视的数据点，这些数据点在时间顺序上降低和汇总。时间序列包含每个条目具有相应时间戳的数据点，该时间戳确定事件的顺序。这样的数据在整个数字世界中广泛存在，并且表现为：&lt;/p&gt;</description>
      <pubDate>Mon, 14 Jul 2025 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Cloud Hardware Diagnostics for AI Workloads】AI工作负载的云硬件诊断</title>
      <link>https://dzone.com/articles/cloud-hardware-diagnostics-for-ai-workloads</link>
      <description>【&lt;p&gt;With the recent boom in AI, the footprint of AI workloads and AI-supported hardware servers deployed in cloud data centers has grown exponentially. This growth is spread across multiple regions worldwide over various data centers. To support this growth and to ensure leadership over various cloud competitors (like Azure, AWS, and GCP), they have started building a fleet of specialized high-performance computing servers. The AI workloads that perform a huge amount of data processing, training, and inference of data models require a special kind of hardware, unlike traditional general-purpose compute servers.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;Hence, all cloud service providers are investing heavily in GPU, TPU, and NPU-based servers that are effective in hosting AI workloads. The majority of these servers are of the Buy Model type, and cloud service providers are dependent on the ‘Other Equipment Manufacturer’ (OEM) for diagnostics and maintenance of the hardware. This dependency has caused a lot of pain for cloud service providers as the repair SLAs are uncertain and expensive, impacting the fleet&#39;s availability.&amp;nbsp;&lt;/p&gt;】&lt;p&gt;随着AI的最新繁荣，AI工作负载的足迹和部署在云数据中心中的AI支持的硬件服务器的足迹成倍增长。这种增长分布在全球各个数据中心的多个地区。为了支持这一增长并确保对各种云竞争者（例如Azure，AWS和GCP）的领导，他们已经开始建立一个专门的高性能计算服务器的机队。与传统的通用使用计算服务器不同的是，执行大量数据处理，培训和推理的AI工作负载需要一种特殊的硬件。 &lt;/p&gt;&#xA;&lt;p&gt;因此，所有云服务提供商都在GPU，TPU和基于NPU的服务器上进行大量投资，这些服务器可有效托管AI工作负载。这些服务器中的大多数都是购买模型类型的，云服务提供商依赖于“其他设备制造商”（OEM）用于诊断和维护硬件。由于修复SLA不确定且昂贵，因此这种依赖性引起了云服务提供商的痛苦，从而影响了车队的可用性。 &lt;/p&gt;</description>
      <pubDate>Mon, 14 Jul 2025 13:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【My Dive into Local LLMs, Part 2: Taming Personal Finance with Homegrown AI (and Why Privacy Matters)】我进入本地LLMS，第2部分：与本土AI一起驯服个人理财（以及为什么隐私很重要）</title>
      <link>https://dzone.com/articles/local-llm-finance-tracker</link>
      <description>【&lt;h4&gt;&lt;strong&gt;Key Takeaways:&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA; &lt;li&gt;Transform your local LLM setup into a practical personal finance analyzer&lt;/li&gt;&#xA; &lt;li&gt;Build a privacy-first solution that keeps sensitive financial data on your machine&lt;/li&gt;&#xA; &lt;li&gt;Learn batch processing strategies for handling large transaction datasets&lt;/li&gt;&#xA; &lt;li&gt;Get working code to create your own AI financial assistant&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4&gt;Prerequisites&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA; &lt;li&gt;Completed setup from &lt;a class=&#34;fr-green&#34; href=&#34;https://dzone.com/articles/ollama-ubuntu-local-llm-setup&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Part 1&lt;/a&gt; (Ollama installed, GPU configured)&lt;/li&gt;&#xA; &lt;li&gt;Basic Python knowledge&lt;/li&gt;&#xA; &lt;li&gt;Ubuntu/Linux system with NVIDIA GPU (8GB+ VRAM)&lt;/li&gt;&#xA; &lt;li&gt;A healthy paranoia about cloud services handling your financial data&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;If you read my last article, &#34;&lt;a href=&#34;https://dzone.com/articles/ollama-ubuntu-local-llm-setup&#34;&gt;My Dive into Local LLMs, Part 1: From Alexa Curiosity to Homegrown AI&lt;/a&gt;,&#34; you know I&#39;ve been on a bit of a journey, diving headfirst into the world of local Large Language Models (LLMs) on my trusty Ubuntu machine. That initial curiosity, spurred by my work on the Alexa team, quickly turned into a fascination with the raw power and flexibility of running AI right on your own hardware. But beyond the sheer &#34;cool factor&#34; of getting Llama 3 to hum on my GPU, I started thinking about practical applications – problems in my daily life where this homegrown AI could actually make a difference.&lt;/p&gt;&#xA;&lt;p&gt;That&#39;s when personal finance popped into my head. Now, before you mentally flag me for suggesting you feed your bank statements to an AI, hear me out. We&#39;re bombarded with cloud-based financial tools, and while convenient, they often come with a lingering question: Where exactly is my data going and what are they doing with it? For something as sensitive as personal finances, data privacy isn&#39;t just a buzzword; it&#39;s paramount. This is where the local LLM truly shines, offering a compelling alternative to cloud-dependent solutions.&lt;/p&gt;】&lt;H4&gt; &lt;strong&gt;关键要点：&lt;/strong&gt; &lt;/h4&gt;&#xA;&lt;ul&gt;&#xA; &lt;li&gt;将您当地的LLM设置转换为实用的个人理财分析仪&lt;/li&gt;&#xA; &lt;li&gt;建立一个隐私优先解决方案，以使您的机器保持敏感财务数据&lt;/li&gt;&#xA; &lt;li&gt;学习处理大型交易数据集的批处理处理策略&lt;/li&gt;&#xA; &lt;li&gt;获取工作代码以创建自己的AI财务助理&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;H4&gt;先决条件&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA; &lt;li&gt; &lt;li&gt;从&lt;a class =“ fr-green” href =“ https://dzone.com/articles/ollama-ubuntu-local-llm-setup” rel =“ noopener noreferrer” target =“ _ black”&gt; part 1 &lt;/a&gt;（gpu配置）&#xA; &lt;li&gt;基本的Python知识&lt;/li&gt;&#xA; &lt;li&gt; ubuntu/linux系统，带有NVIDIA GPU（8GB+ VRAM）&lt;/li&gt;&#xA; &lt;li&gt;关于云服务处理您的财务数据的健康偏执狂&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;If you read my last article, &#34;&lt;a href=&#34;https://dzone.com/articles/ollama-ubuntu-local-llm-setup&#34;&gt;My Dive into Local LLMs, Part 1: From Alexa Curiosity to Homegrown AI&lt;/a&gt;,&#34; you know I&#39;ve been on a bit of a journey, diving headfirst into the world of local Large Language Models (LLMs) on my trusty Ubuntu机器。我在Alexa团队上的工作激发了最初的好奇心，迅速变成了对您自己的硬件运行AI的原始力量和灵活性的迷恋。但是，除了让Llama 3在GPU上嗡嗡作响的纯粹的“很酷的因素”之外，我开始考虑实用应用 - 在我的日常生活中，这个本土AI实际上可以有所作为。&lt;/p&gt;&#xA;&lt;p&gt;那是个人理财突然出现在我脑海的时候。现在，在您在心理上提示我建议您将银行对帐单喂给AI之前，请听我说。我们受到基于云的财务工具的轰炸，尽管方便，但它们通常带有一个挥之不去的问题：我的数据到底在哪里，他们在做什么？对于像个人理财一样敏感的事情，数据隐私不仅仅是流行语。这很重要。这是本地LLM真正发光的地方，为云依赖性解决方案提供了令人信服的替代方案。&lt;/p&gt;</description>
      <pubDate>Mon, 14 Jul 2025 11:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Testing Distributed Microservices Using XState】使用Xstate测试分布式微服务</title>
      <link>https://dzone.com/articles/testing-distributed-microservices-using-xstate</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Distributed &lt;a href=&#34;https://dzone.com/articles/design-patterns-for-microservices&#34;&gt;microservice&lt;/a&gt; architectures bring scalability and modularity, but they also introduce complexity—especially when it comes to testing service orchestration. Coordinating multiple services with asynchronous dependencies, retries, and failure scenarios often leads to fragile or incomplete test coverage.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://dzone.com/articles/demystifying-react-middleware-bridging-apis-and-co&#34;&gt;XState&lt;/a&gt;, a JavaScript and TypeScript library for finite state machines and statecharts, offers a powerful solution for modeling and testing these workflows. By representing your microservices orchestration as a state machine, you gain a single source of truth for expected behavior—and a way to simulate and validate it systematically.&lt;/p&gt;】&lt;p dir =“ ltr”&gt;分布式&lt;a href =“ https://dzone.com/articles/design-patterns-for-microservices”&gt; Microservice &lt;/a&gt;架构带来可扩展性和模块化，但它们也引入了复杂性，尤其是在测试服务服务仪表仪式时。与异步依赖关系，检索和故障场景协调多个服务通常会导致脆弱或不完整的测试覆盖率。&lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt; &lt;a href =“ https://dzone.com/articles/demystifying-react-middleware-dleware-bridge-bridge-bridging-bridging-bridging-apis-and-co”&gt; xstate &lt;/a&gt;，一个JavaScript和Typescript库，用于有限的状态机器和Statecharts，提供强大的解决方案，用于建模和测试这些工作。通过将您的微服务编排表示为状态机器，您就可以为预期行为获得一个真实的来源，并可以系统地模拟和验证它。&lt;/p&gt;</description>
      <pubDate>Mon, 14 Jul 2025 19:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Building Resilient Go Apps: Mocking and Testing Database Error Responses】构建弹性GO应用程序：模拟和测试数据库错误响应</title>
      <link>https://dzone.com/articles/resilient-go-apps-mock-test-database-errors</link>
      <description>【&lt;p&gt;When building applications that rely on databases (which is &lt;em&gt;almost&lt;/em&gt; every application, right?), one of the biggest challenges developers face is testing how their code handles various error scenarios. What happens when the database returns a &lt;code&gt;HTTP 400&lt;/code&gt; error? How does your application respond to throttling? Will your retry logic work as expected?&lt;/p&gt;&#xA;&lt;p&gt;These questions are crucial because, in production, errors are inevitable. This holds true for Azure Cosmos DB as well. The database&#39;s distributed nature means that &lt;a href=&#34;https://learn.microsoft.com/en-us/rest/api/cosmos-db/http-status-codes-for-cosmosdb&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;errors can arise from various sources&lt;/a&gt;, including network issues (&lt;code&gt;503 Service Unavailable&lt;/code&gt;), request timeouts (&lt;code&gt;408 Request timeout&lt;/code&gt;), rate limits (&lt;code&gt;429 Too many requests&lt;/code&gt;), and more. Therefore, robust error handling and testing are essential to maintain a reliable application that handles these gracefully rather than crashing or losing data.&lt;/p&gt;】&lt;p&gt;构建依赖数据库的应用程序（几乎是每个应用程序，对吗？）时，开发人员面临的最大挑战之一就是测试其代码如何处理各种错误方案。当数据库返回&lt;code&gt; http 400 &lt;/code&gt;错误时会发生什么？您的申请如何响应节流？您的重试逻辑会按预期工作？&lt;/p&gt;&#xA;&lt;p&gt;这些问题至关重要，因为在生产中，错误是不可避免的。对于Azure Cosmos DB也是如此。数据库的分布性质是指&lt;a href =“ https://learn.microsoft.com/en-us/rest/rest/api/cosmos-db/http-statp-status-for-cosmosdb”不可用&lt;/code&gt;），请求超时（&lt;code&gt; 408请求超时&lt;/code&gt;），速率限制（&lt;code&gt; 429请求太多&lt;/code&gt;）等。因此，强大的错误处理和测试对于维护可靠的应用程序至关重要，该应用程序优雅地处理这些应用程序而不是崩溃或丢失数据。&lt;/p&gt;</description>
      <pubDate>Mon, 14 Jul 2025 17:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Vibe Coding: Conversational Software Development - Part 2, In Practice】VIBE编码：对话软件开发 - 第2部分，实际上</title>
      <link>https://dzone.com/articles/vibe-coding-in-practice</link>
      <description>【&lt;p&gt;In my &lt;a href=&#34;https://dzone.com/articles/vibe-coding-conversational-software-development&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;previous blog post&lt;/a&gt;, I introduced the concept of&lt;strong&gt;&amp;nbsp;v&lt;/strong&gt;&lt;strong&gt;ibe coding&lt;/strong&gt;. It is one of the new ways that is attracting even non-programmers. Users can describe their thoughts using natural language, and AI tools can convert that into a working application. Spotting this opportunity, I thought I should experiment and understand what that actually looks like in action. I took this opportunity to test out a few tools and see how they really impact my workflow.&amp;nbsp;&lt;/p&gt;&#xA;&lt;figcaption class=&#34;fr-inner&#34; contenteditable=&#34;true&#34;&gt;&#xA; &lt;div style=&#34;text-align: center;&#34;&gt;&#xA;  &lt;em&gt;Vibe coding is a declarative approach&lt;/em&gt;&#xA; &lt;/div&gt;&#xA;&lt;/figcaption&gt;&#xA;&lt;p&gt;&lt;br&gt;&lt;/p&gt;】在我的&lt;p&gt;中这是吸引甚至非程序员的新方法之一。用户可以使用自然语言描述他们的想法，而AI工具可以将其转换为工作应用程序。发现这个机会，我认为我应该试验并了解在行动中的实际情况。我借此机会测试了一些工具，看看它们如何真正影响我的工作流程。 &lt;/p&gt;&#xA;&lt;figcaption class =“ fr-inner” contenteaditable =“ true”&gt;&#xA; &lt;div style =“ text-align：center;”&gt;&#xA;  &lt;em&gt; Vibe编码是一种声明的方法&lt;/em&gt;&#xA; &lt;/div&gt;&#xA;&lt;/figcaption&gt;&#xA;&lt;p&gt; &lt;br&gt; &lt;/p&gt;</description>
      <pubDate>Mon, 14 Jul 2025 15:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>