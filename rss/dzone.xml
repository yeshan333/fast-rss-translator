<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Event-Driven Microservices: How Kafka and RabbitMQ Power Scalable Systems】事件驱动的微服务：KAFKA和RABBITMQ功率可扩展系统</title>
      <link>https://dzone.com/articles/event-driven-microservices-kafka-rabbitmq</link>
      <description>【&lt;p data-end=&#34;689&#34; data-start=&#34;269&#34; style=&#34;text-align: left;&#34;&gt;Event-driven microservices have revolutionized how modern applications handle data flow and communication. Using message brokers such as Apache Kafka and RabbitMQ, microservices can efficiently process and distribute events in a scalable, fault-tolerant manner.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p data-end=&#34;689&#34; data-start=&#34;269&#34; style=&#34;text-align: left;&#34;&gt;This tutorial will guide you through the fundamentals of event-driven microservices, focusing on how Kafka and &lt;a href=&#34;https://dzone.com/articles/rabbitmq-in-microservices&#34;&gt;RabbitMQ&lt;/a&gt; enable scalable architectures.&lt;/p&gt;】&lt;p data-end =“ 689” data-start =“ 269”样式=“ text-align：left;”&gt;事件驱动的微服务已彻底改变了现代应用程序如何处理数据流和通信。使用诸如Apache Kafka和RabbitMQ之类的消息经纪人，微服务可以有效地以可扩展的，容忍性的方式来处理和分发事件。 &lt;/p&gt;&#xA;&lt;p data-end=&#34;689&#34; data-start=&#34;269&#34; style=&#34;text-align: left;&#34;&gt;This tutorial will guide you through the fundamentals of event-driven microservices, focusing on how Kafka and &lt;a href=&#34;https://dzone.com/articles/rabbitmq-in-microservices&#34;&gt;RabbitMQ&lt;/a&gt; enable scalable architectures.&lt;/p&gt;</description>
      <pubDate>Fri, 23 May 2025 13:30:00 +0000</pubDate>
    </item>
    <item>
      <title>【Event Driven Architecture (EDA) - Optimizer or Complicator】事件驱动的体系结构（EDA） - 优化器或复杂机</title>
      <link>https://dzone.com/articles/event-driven-architecture-eda</link>
      <description>【&lt;h2 dir=&#34;ltr&#34;&gt;Abstract&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;This article explores the practical realities of &lt;a href=&#34;https://dzone.com/articles/event-driven-architectures-cloud-solutions&#34;&gt;Event-Driven Architecture (EDA)&lt;/a&gt;—a paradigm often celebrated for its scalability, responsiveness, and flexibility in modern software systems. Drawing from years of hands-on experience with technologies like Kafka, RabbitMQ, and AWS SNS, I present a balanced view of EDA&#39;s benefits and pitfalls. The article delves into its core advantages, including loose coupling, asynchronous processing, real-time responsiveness, and extensibility, and aligns it with complementary approaches like &lt;a href=&#34;https://dzone.com/refcardz/getting-started-domain-driven&#34;&gt;Domain-Driven Design&lt;/a&gt;. At the same time, it sheds light on lesser-discussed challenges such as observability gaps, schema versioning, testing complexity, event duplication, and message sequencing. Real-world success stories from companies like Netflix and Walmart illustrate its potential, and I would also like to emphasize the importance of guardrails, error-handling patterns, and security best practices to build resilient systems. Ultimately, this article advocates for a thoughtful, problem-first approach to adopting EDA and highlighting that, while it can optimize systems at scale, it must be applied judiciously to avoid unnecessary complexities.&amp;nbsp;&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Over the years I have used varied technologies and tools to build applications to meet customer or internal needs. I am a developer who has seen a transition from Titanic (water fall) &amp;nbsp;to Jet Ski (agile), from Gantt charts to stand ups and from giant bricks (Monoliths) to tiny boxes (Microservice). We are always riding the wave of technology. Every time we move to something new or more modern, it&#39;s glorified. We put technology ahead of a problem sometimes.&lt;/p&gt;】&lt;h2 dir =“ ltr”&gt;摘要&lt;/h2&gt;&#xA;&lt;p dir =“ ltr”&gt;本文探讨了&lt;a href =“ https://dzone.com/articles/event-driven-driven-architectures-cloud-solutions”&gt;事件驱动的体系结构（EDA）&lt;/a&gt;  - 经常为其范围的可扩展性，在现代软件系统中的灵活性而庆祝。从多年来的动手实践经验中，我对Kafka，RabbitMQ和AWS SNS等技术进行了平衡的视图，可以兑现EDA的好处和陷阱。文章深入研究了其核心优势，包括松散的耦合，异步处理，实时响应能力和可扩展性，并与&lt;a href =“ https://dzone.com/refcardz/getting-domain-domain-domain-domain-drovend domain-droven”&gt; domain-droven“&gt; domain-droven”“&gt; domain-drive” design design design design &lt;/a&gt;等互补方法对齐。同时，它阐明了较少讨论的挑战，例如可观察性差距，架构版本控制，测试复杂性，事件重复和消息测序。 Netflix和Walmart等公司的真实世界成功案例说明了其潜力，我还想强调护栏，错误处理模式和安全最佳实践的重要性，以建立弹性系统。最终，本文倡导采用经过深思熟虑的问题，以采用EDA并强调该方法，尽管它可以大规模优化系统，但必须明智地应用它，以避免不必要的复杂性。 &lt;/p&gt;&#xA;&lt;h2 dir =“ ltr”&gt;简介&lt;/h2&gt;&#xA;&lt;p dir =“ ltr”&gt;多年来，我使用了各种技术和工具来构建应用程序以满足客户或内部需求。我是一名开发人员，他已经看到从泰坦尼克号（水跌落）到摩托艇（敏捷），从甘特图表到站立，从巨大的砖头（整体）到微小的盒子（微服务）。我们一直在骑技术浪潮。每当我们转向新的或更现代的事物时，都会得到荣耀。有时我们将技术放在问题上。&lt;/p&gt;</description>
      <pubDate>Fri, 23 May 2025 20:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【After 9 Years, Microsoft Fulfills This Windows Feature Request】9年后，Microsoft履行了此Windows功能请求</title>
      <link>https://dzone.com/articles/microsoft-windows-feature-request</link>
      <description>【&lt;p&gt;Most of the source code for the Windows Subsystem for Linux (WSL) has now been released on GitHub. Microsoft announced on May 19 that developers and hobbyists can now build WSL from source, explore the code, experiment with modifications, and contribute directly to its development.&lt;/p&gt;&#xA;&lt;h2&gt;What is Windows Subsystem for Linux?&lt;/h2&gt;&#xA;&lt;p&gt;Windows Subsystem for &lt;a href=&#34;https://dzone.com/articles/linux-mint-debian-edition-makes-me-believe-its-fin&#34;&gt;Linux &lt;/a&gt;is a feature that allows users to run a Linux environment inside a Windows machine without requiring a virtual machine or dual boot setup. The first version, WSL, was released in 2016. Shortly after its launch, the first issue raised about WSL on GitHub questioned whether the feature would ever be open sourced; nearly a decade later, Microsoft has answered that request.&lt;/p&gt;】&lt;p&gt; Linux（WSL）Windows子系统的大多数源代码现已在GitHub上发布。微软于5月19日宣布，开发人员和业余爱好者现在可以从来源构建WSL，探索代码，实验修改并直接为其开发做出贡献。&lt;/p&gt;&#xA;&lt;h2&gt; Linux的Windows子系统是什么？&lt;/h2&gt;&#xA;&lt;p&gt; &lt;a href =“ https://dzone.com/articles/linux-mint-debian-edition-makes-makes-makes-mebelieve-its-fin”&gt; linux &lt;/a&gt;的Windows子系统是一个功能，它允许用户在Windows机器内运行Linux环境而不需要虚拟机或双启动设置。第一个版本WSL于2016年发行。发行后不久，Github上有关WSL的第一期质疑该功能是否会开放。将近十年后，微软回答了该请求。&lt;/p&gt;</description>
      <pubDate>Fri, 23 May 2025 14:30:00 +0000</pubDate>
    </item>
    <item>
      <title>【Software Delivery at Scale: Centralized Jenkins Pipeline for Optimal Efficiency】大规模交付软件：集中式詹金斯管道，以实现最佳效率</title>
      <link>https://dzone.com/articles/centralized-jenkins-pipeline</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Software engineers face immense pressure to deliver high-quality software quickly and efficiently. However, traditional software delivery processes often become bottlenecks, slowing progress with manual checks, repetitive testing, and cumbersome compliance procedures.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;This calls for an innovative solution—a way to automate, streamline workflows, and enable teams to focus on their true passion: writing great code. This article explores the concept, benefits, and implementation of centrally orchestrated pipelines, with a working example.&amp;nbsp;&lt;/p&gt;】&lt;p dir =“ ltr”&gt;软件工程师面临巨大的压力，可以快速有效地提供高质量的软件。但是，传统的软件交付过程通常会成为瓶颈，通过手动检查，重复测试和繁琐的合规性程序减慢进度。&lt;/p&gt; &lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;这需要一种创新的解决方案，这是一种自动化，简化工作流程并使团队能够专注于他们的真正热情的方式：编写出色的代码。本文以一个有效的例子探讨了中央精心策划的管道的概念，好处和实施。 &lt;/p&gt;</description>
      <pubDate>Fri, 23 May 2025 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Implementing Explainable AI in CRM Using Stream Processing】使用流处理在CRM中实施可解释的AI</title>
      <link>https://dzone.com/articles/explainable-ai-crm-stream-processing</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Modern-day customer relationship management (CRM) systems have become a vital element of the business ecosystem, orchestrating engagement at a personalized level and scale. Transparency becomes necessary in automated systems and machine-learning environments, especially when these systems have an increasing prominence in operations.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Thus, &lt;a href=&#34;https://dzone.com/articles/explainable-ai-interpreting-complex-ai-and-ml-models&#34;&gt;explainable AI&lt;/a&gt; can be a solution: it makes model decisions interpretable and justifiable. This proved very powerful when combined with stream processing, allowing responsiveness in real time. Hence, together, they may remodel CRM platforms into intelligent systems: automated and yet understandable and controllable.&lt;/p&gt;】&lt;p dir =“ ltr”&gt;现代客户关系管理（CRM）系统已成为业务生态系统的重要组成部分，并在个性化的水平和规模上进行了协调参与。在自动化系统和机器学习环境中需要透明度，尤其是当这些系统在操作中越来越突出时。 &lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;因此，&lt;a href =“ https://dzone.com/articles/explainable-i-interpreting-complex-ai-and-ml-models”&gt;可解释的AI &lt;/a&gt;可以是解决方案：它可以解释和合理地做出模型决策。当与流处理结合使用时，这证明这是非常强大的，从而实时响应能力。因此，它们一起可以将CRM平台重塑为智能系统：自动化却可以理解和可控。&lt;/p&gt;</description>
      <pubDate>Fri, 23 May 2025 14:00:12 +0000</pubDate>
    </item>
    <item>
      <title>【Enhancing Business Decision-Making Through Advanced Data Visualization Techniques】通过高级数据可视化技术增强业务决策</title>
      <link>https://dzone.com/articles/advanced-data-visualization-techniques-for-business</link>
      <description>【&lt;p&gt;Today&#39;s world is fast-paced and data-driven, where effectively interpreting complex datasets can mean the difference between business success and stagnation. &lt;a href=&#34;https://dzone.com/articles/a-comprehensive-guide-to-data-visualization-an-eff&#34;&gt;Data visualization&lt;/a&gt; has emerged as a crucial tool in transforming raw data into actionable insights that enable organizations to make informed decisions to enhance operational efficiency and strategic planning. This article explores the role of advanced data visualization techniques in driving business success, offering insights, examples, and best practices to help you maximize the potential of your data.&lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;Importance of Data Visualization in Business&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Data visualization bridges the gap between raw data and decision-makers. It provides an intuitive understanding of complex datasets. By representing data visually, organizations can:&lt;/p&gt;】&lt;p&gt;当今世界是快节奏且数据驱动的，其中有效地解释复杂的数据集可能意味着业务成功与停滞之间的差异。 &lt;a href =“ https://dzone.com/articles/a-comprehens-guide-to-data-visualization-an-fisalization-an-eff”&gt;数据可视化&lt;/a&gt;已成为将原始数据转换为可行的洞察力中的至关重要的工具，使其能够使组织能够提高操作效率和战略性计划。本文探讨了高级数据可视化技术在推动业务成功，提供见解，示例和最佳实践中的作用，以帮助您最大程度地发挥数据的潜力。&lt;/p&gt;&#xA;&lt;h2&gt; &lt;strong&gt;业务中数据可视化的重要性&lt;/strong&gt; &lt;/h2&gt;&#xA;&lt;p&gt;数据可视化桥接原始数据和决策者之间的差距。它提供了对复杂数据集的直观理解。通过以视觉表示数据，组织可以：&lt;/p&gt;</description>
      <pubDate>Fri, 23 May 2025 21:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Implementing API Design First in .NET for Efficient Development, Testing, and CI/CD】首先在.NET中实施API设计，以进行有效开发，测试和CI/CD</title>
      <link>https://dzone.com/articles/implementing-api-design-first-ci-cd-testing</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;In today&#39;s agile software landscape, building robust and scalable applications hinges on well-defined APIs. The API design-first approach offers a structured methodology where the API contract is meticulously crafted &lt;em&gt;before&amp;nbsp;&lt;/em&gt;any code is written. This strategy is powered by the OpenAPI Specification (OAS) for Synchronous APIs and AsyncAPI Specification for Asynchronous APIs.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;This article (an opinionanted tutorial) provides a practical guide to implementing API design-first in Synchronous .NET API projects, with a strong focus on its benefits for development, testing, and seamless integration into &lt;a href=&#34;https://dzone.com/devops-and-cicd&#34;&gt;DevOps CI/CD pipelines&lt;/a&gt;. I will follow up with an AsyncAPI article later.&lt;/p&gt;】&lt;p dir =“ ltr”&gt;在当今的敏捷软件景观中，构建可靠和可扩展的应用在定义明确的API上。 API设计优先的方法提供了一种结构化的方法，在编写任何代码之前，精心制作API合同。该策略由用于异步API的同步API和异步规范的OpenAPI规范（OAS）提供动力。&lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;本文（观点教程）提供了在同步.NET .NET API项目中实施API设计 - 先进的实用指南，其重点是其对开发，测试和无缝集成的好处，并无缝集成到&lt;a href =“我将稍后跟进一篇异步文章。&lt;/p&gt;</description>
      <pubDate>Fri, 23 May 2025 17:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Proactive Security in Distributed Systems: A Developer’s Approach】分布式系统中的主动安全性：开发人员的方法</title>
      <link>https://dzone.com/articles/proactive-security-distributed-systems</link>
      <description>【&lt;p&gt;Once the product becomes famous and the customer base increases, it is no longer viable to serve the customers using simple systems without too many bottlenecks. &lt;a href=&#34;https://dzone.com/articles/demystifying-distributed-systems-a-beginners-guide&#34;&gt;Distributed software systems&lt;/a&gt; are inevitable, and it is directly related to the growth of the product. Building distributed systems is hard, and at the same time, it is fun. It is solving one big never-ending puzzle that gives you one unique challenge every day or every week depending on the size of the system. You cannot imagine any systems being built without security under consideration since for most organizations security is &#34;job zero&#34; or &#34;job one,&#34; whichever order they follow. Now building the security into distributed systems being a big challenge is an understatement.&lt;/p&gt;&#xA;&lt;p&gt;Software developers previously primarily focused on getting the product to work and tried to fit the security into the product later. This approach came with a lot of overhead cost and reworks. It has changed a lot in recent times since organizations started to focus on it more than before. Developers started considering security in the early stage of the project. However, this kind of adoption varies across various sizes of the organization and their maturity. This article is going to talk about a few common distributed security trends from recent security reports and how developers can try to defend them when building.&lt;/p&gt;】&lt;p&gt;一旦产品闻名并且客户群增加，使用简单的系统而没有太多瓶颈就不再可行。 &lt;a href =“ https://dzone.com/articles/demystifying-distributed-systems-a-beginners-guide”&gt;分布式软件系统&lt;/a&gt;不可避免，并且与产品的增长直接相关。构建分布式系统很难，与此同时，这很有趣。它正在解决一个永无止境的难题，该难题每天或每周都会根据系统的大小为您带来一个独特的挑战。您无法想象未经考虑的安全性构建的任何系统，因为对于大多数组织而言，安全性是“零”或“作业一个”，无论他们遵循哪个订单。现在，将安全性建立在分布式系统中是一个巨大的挑战。&lt;/p&gt;&#xA;&lt;p&gt;软件开发人员以前主要致力于使产品运行，并试图将安全性适应以后的产品。这种方法带有许多高架成本和返工。自组织开始比以前更多地关注它以来，它最近发生了很多变化。开发人员开始在项目的早期考虑安全。但是，这种采用在组织的各种规模及其成熟度之间各不相同。本文将讨论最近的安全报告中的一些共同的分布式安全趋势，以及开发人员在构建时如何试图捍卫它们。&lt;/p&gt;</description>
      <pubDate>Fri, 23 May 2025 18:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Rust, WASM, and Edge: Next-Level Performance】Rust，Wasm和Edge：下一级性能</title>
      <link>https://dzone.com/articles/rust-wasm-and-edge-next-level-performance</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Performance used to be something we worried about last. Now, it’s part of the foundation.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;&lt;strong&gt;&lt;em&gt;What’s “Fast Enough” Anymore?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;】&lt;p dir =“ ltr”&gt;表演曾经是我们最后担心的事情。现在，它是基金会的一部分。&lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt; &lt;strong&gt; &lt;em&gt;什么是“足够快”了吗？&lt;/em&gt; &lt;/strong&gt; &lt;/p&gt;</description>
      <pubDate>Fri, 23 May 2025 19:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Navigating Change Management: A Guide for Engineers】导航变更管理：工程师指南</title>
      <link>https://dzone.com/articles/navigating-change-management-a-guide-for-engineers</link>
      <description>【&lt;p&gt;Change is a constant in tech. As an Engineering Manager, I&#39;ve had the opportunity to guide teams through evolving priorities, emerging technologies, and organizational adaptations. This isn&#39;t just abstract management theory—it&#39;s practical experience I apply daily to help talented engineers thrive during transitions.&lt;/p&gt;&#xA;&lt;p&gt;In this guide, I&#39;ll share practical strategies for engineers dealing with various forms of workplace change—from team restructuring to shifting priorities and career uncertainty. These approaches have helped me and many engineers I&#39;ve worked with maintain focus, motivation, and growth even during significant transitions.&lt;/p&gt;】&lt;p&gt;更改是技术的常数。作为工程经理，我有机会指导团队通过不断发展的优先事项，新兴技术和组织适应。这不仅仅是抽象管理理论，它的实用经验我每天都在过渡期间帮助才华横溢的工程师蓬勃发展。&lt;/p&gt;&#xA;&lt;p&gt;在本指南中，我将分享针对各种形式的工作场所变化的工程师的实用策略，从团队重组到改变优先级和职业不确定性。这些方法也帮助了我和我工作的许多工程师，即使在重大过渡期间，我也能保持专注，动力和成长。&lt;/p&gt;</description>
      <pubDate>Fri, 23 May 2025 15:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>