<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Building an IoT Framework: Essential Components for Success】建立物联网框架：成功的基本组成部分</title>
      <link>https://dzone.com/articles/building-iot-framework-essential-components-success</link>
      <description>【&lt;p&gt;Before you can build an Internet of Things (IoT) application, you need a solid foundation. An IoT framework acts as the scaffolding, ensuring that your system works smoothly and can connect with other devices. A well-structured framework makes it easier for devices to communicate, scale, and stay secure.&lt;/p&gt;&#xA;&lt;p&gt;From picking the right hardware to choosing communication protocols, from setting up edge computing to securing your network, each piece plays a role in creating a reliable and future-ready IoT system. In this guide, we’ll walk through the key steps to building a strong, scalable IoT framework that’s built for performance, security, and real-world application.&lt;/p&gt;】&lt;p&gt;在构建物联网（IoT）应用程序之前，您需要坚实的基础。物联网框架充当脚手架，确保您的系统正常工作并可以与其他设备连接。结构良好的框架使设备更容易通信，扩展和保持安全。&lt;/p&gt;&#xA;&lt;p&gt;从选择正确的硬件到选择通信协议，从设置边缘计算到保护您的网络，每件作品都在创建可靠且可将来的物联网系统中发挥作用。在本指南中，我们将详细介绍为性能，安全性和现实世界应用而构建的强大，可扩展的物联网框架。&lt;/p&gt;</description>
      <pubDate>Fri, 20 Jun 2025 19:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【How to Marry MDC With Spring Integration】如何将MDC与春季整合结婚</title>
      <link>https://dzone.com/articles/mdc-in-spring-integration</link>
      <description>【&lt;p&gt;In modern enterprise applications, effective logging and traceability are critical for debugging and monitoring business processes. Mapped Diagnostic Context (MDC) provides a mechanism to enrich logging statements with contextual information, making it easier to trace requests across different components.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;This article explores the challenges of MDC propagation in Spring integration and presents strategies to ensure that the diagnostic context remains intact as messages traverse these channels.&lt;br&gt;&lt;br&gt;&#xA; Let&#39;s start with a very brief overview of both technologies. If you are already familiar with them, you can go straight to the &#39;Marry Spring Integration with MDC&#39; section.&lt;/p&gt;】&lt;p&gt;在现代企业应用程序中，有效的记录和可追溯性对于调试和监视业务流程至关重要。映射的诊断上下文（MDC）提供了一种用上下文信息丰富记录语句的机制，使得更容易在不同组件上追踪请求。&lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;本文探讨了春季整合中MDC传播的挑战，并提出了策略，以确保随着消息遍历这些渠道，诊断环境保持完整。&lt;br&gt; &lt;br&gt; &lt;br&gt; &lt;br&gt; &lt;br&gt; &lt;br&gt;&#xA; 让我们从两种技术的非常简要概述开始。如果您已经熟悉它们，则可以直接进入“与MDC的婚姻结合”部分。&lt;/p&gt;</description>
      <pubDate>Fri, 20 Jun 2025 11:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Your Kubernetes Survival Kit: Master Observability, Security, and Automation】您的Kubernetes生存套件：大师可观察性，安全性和自动化</title>
      <link>https://dzone.com/articles/kubernetes-survival-kit</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Kubernetes has become the de facto standard for &lt;a href=&#34;https://dzone.com/articles/kubernetes-vs-docker-differences-explained&#34;&gt;orchestrating containerized applications&lt;/a&gt;. As organizations increasingly embrace cloud-native architectures, ensuring observability, security, policy enforcement, progressive delivery, and autoscaling is like ensuring your spaceship has enough fuel, oxygen, and a backup plan before launching into the vastness of production.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;With the rise of multi-cloud and hybrid cloud environments, Kubernetes observability and control mechanisms must be as adaptable as a chameleon, scalable like your favorite meme stock, and technology-agnostic like a true DevOps pro. Whether you&#39;re managing workloads on AWS, Azure, GCP, or an on-premises Kubernetes cluster, having a robust ecosystem of tools is not a luxury — it&#39;s a survival kit for monitoring applications, enforcing security policies, automating deployments, and optimizing performance.&lt;/p&gt;】&lt;p dir =“ ltr”&gt; kubernetes已成为&lt;a href =“ https://dzone.com/articles/kubernetes-vs-vs-docker-differences-explence-explaining”&gt;编排容器化应用&lt;/a&gt;的事实上的标准。随着组织越来越多地拥护云本地体系结构，确保可观察性，安全性，政策执法，渐进式交付和自动化就像确保您的宇宙飞船具有足够的燃料，氧气和备用计划，然后才能启动生产广泛。&lt;/p&gt; &lt;/p&gt; &lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;随着多云和混合云环境的兴起，kubernetes的可观察性和控制机制必须像变色龙一样适应性，像您最喜欢的模因库存一样可扩展，以及像True DevOps Pro一样的技术敏捷。无论您是管理AWS，Azure，GCP还是在本地的Kubernetes群集上的工作负载，拥有强大的工具生态系统都不是一种奢侈的生态系统 - 它是用于监视应用程序，执行安全策略，自动化部署和优化性能的生存套件。</description>
      <pubDate>Fri, 20 Jun 2025 17:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【MCP Client Agent: Architecture and Implementation】MCP客户代理：体系结构和实施</title>
      <link>https://dzone.com/articles/mcp-client-agent-architecture-amp-implementation</link>
      <description>【&lt;p data-end=&#34;260&#34; data-start=&#34;134&#34;&gt;In this post, we’ll go deeper into the overall &lt;a href=&#34;https://dzone.com/articles/lakehouse-manus-mcp-lets-talk-about-lakehouse&#34;&gt;MCP architecture&lt;/a&gt; and client flow, and we’ll also implement an MCP client agent.&lt;/p&gt;&#xA;&lt;p data-end=&#34;429&#34; data-start=&#34;262&#34;&gt;The goal is to provide some clarity on &lt;em data-end=&#34;371&#34; data-start=&#34;301&#34;&gt;“What happens when you submit your request to MCP powered with LLMs”&lt;/em&gt;—breaking down what’s actually going on behind the scenes.&lt;/p&gt;】&lt;p data-end =“ 260” data-start =“ 134”&gt;在这篇文章中，我们将深入整体&lt;a href =“ https://dzone.com/articles/lakehouse-manus-manus-manus-manus-manus-manus-manus-mcp-lets-talk-about-lakehouse--lake-lake-lake-lake-lake-mcp架构&gt;&#xA;&lt;p data-end =“ 429” data-start =“ 262”&gt;目的是在&lt;em data-end =“ 371” data-start =“ 301”&gt;上提供一些清晰度</description>
      <pubDate>Fri, 20 Jun 2025 14:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【DevOps Backup: Top Reasons for DevOps and Management】DevOps备份：DevOps和管理的主要原因</title>
      <link>https://dzone.com/articles/top-reasons-for-devops-and-management</link>
      <description>【&lt;p&gt;Traditional backup of endpoints, servers, or databases has become almost synonymous with cybersecurity. However, there is increasing discussion about the need to secure data stored in SaaS or DevOps solutions, such as GitHub, GitLab, Bitbucket, Jira, or Azure DevOps.&lt;/p&gt;&#xA;&lt;p&gt;Why are we questioning additional security for DevOps or SaaS data? And what implications might this have on the intellectual property, source code, metadata, and projects stored within these tools?&lt;/p&gt;】&lt;p&gt;端点，服务器或数据库的传统备份几乎已成为网络安全的代名词。但是，关于确保存储在SaaS或DevOps解决方案中的数据（例如GitHub，Gitlab，Bitbucket，Jira或Azure Devops）的数据的讨论越来越多。&lt;/p&gt;&#xA;&lt;p&gt;为什么我们要质疑DevOps或SaaS数据的其他安全性？这对这些工具中存储的知识产权，源代码，元数据和项目有什么影响？&lt;/p&gt;</description>
      <pubDate>Fri, 20 Jun 2025 12:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Exploring Cloud-Based Testing With the Elastic Execution Grid】使用弹性执行网格探索基于云的测试</title>
      <link>https://dzone.com/articles/cloud-based-testing-elastic-execution-grid</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;You know those regression packs that used to finish while you grabbed coffee? Are they now taking hours? And that testing box you requisitioned six months ago? Is it already maxed out? And do you find yourself complaining about how resources are idling 90% of the day?&amp;nbsp;&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Yes, it’s time to look at cloud-based testing, which is exactly what I recently started doing. I wanted to find a testing solution that was fast, easy, and gave me flexible capacity. And one that took minimal effort for me to maintain.&lt;/p&gt;】&lt;p dir =“ ltr”&gt;您知道那些在喝咖啡时用来完成的回归包吗？他们现在需要几个小时吗？您六个月前申请了那个测试盒？它已经最大化了吗？您是否发现自己抱怨资源如何闲置90％？ &lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;是的，是时候查看基于云的测试了，这正是我最近开始做的事情了。我想找到一种快速，容易的测试解决方案，并给了我灵活的容量。而我花了很少的努力才能维持。&lt;/p&gt;</description>
      <pubDate>Fri, 20 Jun 2025 13:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Innovation at Speed: How Cloud-Native Development Accelerates Time-to-Market】速度的创新：云原生的发展如何加速市场的时间</title>
      <link>https://dzone.com/articles/innovation-at-speed-how-cloud-native-development-a</link>
      <description>【&lt;p dir=&#34;ltr&#34; style=&#34;text-align: left;&#34;&gt;Digital transformation empowers businesses, enabling them to create new value from their core capabilities. Time is the latest dollar, and companies that can get their products and services to market faster than their competitors hold remarkable advantages.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34; style=&#34;text-align: left;&#34;&gt;Cloud-native development is the key enabler of this rapid innovation, empowering businesses with agility, scalability, and resilience that accelerate time-to-market. This blog explores how you can speed up your time to market process by using cloud-native development services.&lt;/p&gt;】&lt;p dir =“ ltr” style =“ text-align：left;”&gt;数字转换使企业能够从其核心功能中创建新价值。时间是最新的美元，而且可以将其产品和服务销售的公司比其竞争对手拥有显着优势更快。&lt;/p&gt;&#xA;&lt;p dir =“ ltr” style =“ text-align：left;”&gt;云本地开发是这种快速创新的关键推动力，使企业具有敏捷性，可伸缩性和弹性，加速了上市时间。该博客探讨了如何通过使用云本地开发服务加快时间来加速市场流程。&lt;/p&gt;</description>
      <pubDate>Fri, 20 Jun 2025 18:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Breaking to Build Better: Platform Engineering With Chaos Experiments】打破更好的建造：通过混乱实验的平台工程</title>
      <link>https://dzone.com/articles/platform-engineering-chaos-experiments-resilience</link>
      <description>【&lt;p style=&#34;text-align: left;&#34;&gt;Imagine you&#39;re on a high-speed train—sleek, automated, and trusted by thousands every day. It rarely misses a beat. But behind that smooth ride is a team that constantly simulates disasters: brake failures, signal losses, and power surges. Why? Because when lives depend on reliability, you don’t wait for failure to happen—you plan for it. The same principle applies in today’s cloud-native platforms.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p style=&#34;text-align: left;&#34;&gt;As platform engineers, we design systems to be resilient, scalable, and reliable. But here’s the truth—no matter how perfect your YAMLs or &lt;a href=&#34;https://dzone.com/articles/everything-you-need-to-know-about-cicd-pipeline-pa&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;CI/CD&lt;/a&gt; pipelines are, failure is inevitable. &lt;a href=&#34;https://dzone.com/articles/chaos-engineering-tutorial-comprehensive-guide-wit&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Chaos engineering&lt;/a&gt;, a discipline born out of necessity, is not about causing random destruction, but it’s about intentionally injecting failure into your systems in a controlled environment to understand how they behave under stress. Like fire drills for your platform. In this blog, we’ll explore how you can bring this into your &lt;a href=&#34;https://dzone.com/articles/revealing-the-core-of-platform-engineering&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Platform Engineering&lt;/a&gt; practices using &lt;code&gt;LitmusChaos&lt;/code&gt;, an open-source chaos engineering framework built for Kubernetes.&lt;/p&gt;】&lt;p style =“ text-align：left;”&gt;想象您每天都在高速火车上，自动化，自动化和信任。它很少会错过节拍。但是，在那个平稳的骑行之后，一支不断模拟灾难的团队：刹车故障，信号损失和电力激增。为什么？因为当生命取决于可靠性时，您不会等待未能发生的事情 - 您为此计划。同样的原则适用于当今的云原生平台。 &lt;/p&gt;&#xA;&lt;p style =“ text-align：left;”&gt;作为平台工程师，我们设计了具有弹性，可扩展和可靠的系统。但这是事实 - 无关您的chamls或&lt;a href =“ https://dzone.com/articles/everything-you-need-to-need-to-know-bout-cicd-cicd-pipeline-pa---------- &lt;a href =“ https://dzone.com/articles/chaos-eendering-tutorial-comprehenial-guide-wit” rel =“ noopener noreferrer” target =“ _ black”&gt; chaos工程&lt;/a&gt;，&lt;/a&gt;，这是一种障碍，而不必造成驱动器的方式，但要触发它的幻想，但要触发该系统的影响，该系统的运行方式是幻想的，它是在进行的方式。 压力。像您平台的消防演习。在此博客中，我们将探讨如何将其引入您的&lt;a href =“ https://dzone.com/articles/revealing-the-core-the-core-core-of-platform-eentform-eenterming- rel =“ noopener noreferrer” target =“ _ blank”&gt;平台工程&lt;/a&gt;使用&lt;code&gt; litmuschaos &lt;/cope &lt;/a&gt;练习&lt;/a&gt; kubernetes。&lt;/p&gt;</description>
      <pubDate>Fri, 20 Jun 2025 20:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Building Smarter Chatbots: Using AI to Generate Reflective and Personalized Responses】构建更智能的聊天机器人：使用AI产生反思性和个性化响应</title>
      <link>https://dzone.com/articles/chatbot-empathy-ai-nlp</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;With the advent of artificial intelligence-based tools, chatbots have been integral for user interactions. However, in most cases, chatbots provide users with a generic response to their queries. This lack of personalization does not capture any behavioral signals from the user. This not only leads to a suboptimal user experience but also a lot of missed opportunities for the organizations to convert these users from being return customers. This is a critical bottleneck for a lot of organizations to solve, as this prevents free users from becoming paid customers.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;The first interaction these users have with these chatbots is more often than not the only opportunity to capture the user’s attention. For example, for a user visiting a mental health support application and interacting with its chatbot, it&#39;s vital to capture the user’s emotional state and potential needs and provide an empathetic response to make the user feel heard. Missing this window of opportunity is not only impacting the organization’s customer acquisition but also, leading to users not being led to a care pathway that could help improve their lives significantly.&lt;/p&gt;】&lt;p dir =“ ltr”&gt;随着基于人工智能的工具的出现，聊天机器人是用户交互不可或缺的。但是，在大多数情况下，聊天机器人为用户提供对其查询的通用响应。缺乏个性化并不能捕获用户的任何行为信号。这不仅导致了次优的用户体验，而且还导致了许多组织将这些用户转换为返回客户的机会。对于许多组织来说，这是一个关键的瓶颈，因为这阻止了自由用户成为付费客户。&lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;这些用户与这些聊天机器人进行的第一次交互通常是唯一吸引用户注意的机会。例如，对于访问心理健康支持应用程序并与聊天机器人进行互动的用户，捕获用户的情绪状态和潜在需求并提供善解人意的响应以使用户感到听到至关重要。缺少这种机会之窗不仅会影响组织的客户收购，而且还会导致用户被导致可以大大改善生活的护理途径。&lt;/p&gt;</description>
      <pubDate>Fri, 20 Jun 2025 15:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Lessons Learned in Test-Driven Development】在测试驱动的开发中汲取的教训</title>
      <link>https://dzone.com/articles/lessons-learned-in-test-driven-development</link>
      <description>【&lt;p&gt;When I began my career as a test engineer about a decade ago, fresh out of school, I was not aware of formal approaches to testing. Then, as I worked with developers on teams of various sizes, I learned about several different approaches, including &lt;a href=&#34;https://dzone.com/articles/the-importance-of-test-driven-development-in-softw&#34; rel=&#34;noopener noreferrer nofollow&#34; target=&#34;_blank&#34;&gt;test-driven development (TDD)&lt;/a&gt;.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;I hope to share some insights into when I’ve found TDD to be effective. I’ll also share my experience with situations where traditional testing or a hybrid approach worked better than using TDD alone.&lt;/p&gt;】&lt;p&gt;大约十年前，当我开始担任测试工程师的职业生涯，刚从学校毕业时，我不知道正式的测试方法。 Then, as I worked with developers on teams of various sizes, I learned about several different approaches, including &lt;a href=&#34;https://dzone.com/articles/the-importance-of-test-driven-development-in-softw&#34; rel=&#34;noopener noreferrer nofollow&#34; target=&#34;_blank&#34;&gt;test-driven development (TDD)&lt;/a&gt;. &lt;/p&gt;&#xA;&lt;p&gt;我希望在发现TDD有效时分享一些见解。我还将分享我的经验，即传统测试或混合方法比单独使用TDD更好。&lt;/p&gt;。&lt;/p&gt;</description>
      <pubDate>Fri, 20 Jun 2025 16:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>