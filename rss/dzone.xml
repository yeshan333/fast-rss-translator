<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【How To Set Up and Configure the Debugger in Visual Studio Code for React.js [Video]】如何在 Visual Studio Code 中为 React.js 设置和配置调试器 [视频]</title>
      <link>https://dzone.com/articles/set-up-and-configure-the-debugger-in-vsc-for-react</link>
      <description>【&lt;p&gt;In this article, we’re diving into a critical aspect of React development: setting up and configuring the debugger in Visual Studio Code. Debugging is a crucial part of development that allows you to step through your code, inspect variables, and quickly fix issues, without relying heavily on console logs. This makes the debugging process more efficient and enjoyable.&lt;/p&gt;&#xA;&lt;h2 name=&#34;44f5&#34;&gt;Getting Started&lt;/h2&gt;&#xA;&lt;p name=&#34;cf1e&#34;&gt;Before we begin, make sure you have the following tools installed:&lt;/p&gt;】&lt;p&gt;在本文中，我们将深入探讨 React 开发的一个关键方面：在 Visual Studio Code 中设置和配置调试器。调试是开发的关键部分，它允许您单步执行代码、检查变量并快速修复问题，而无需严重依赖控制台日志。这使得调试过程更加高效和愉快。&lt;/p&gt;&#xA;&lt;h2 name=&#34;44f5&#34;&gt;开始使用&lt;/h2&gt;&#xA;&lt;p name=&#34;cf1e&#34;&gt;在开始之前，请确保您已安装以下工具：&lt;/p&gt;</description>
      <pubDate>Wed, 11 Sep 2024 19:30:05 +0000</pubDate>
    </item>
    <item>
      <title>【Optimizing Data Management for AI Success: Industry Insights and Best Practices】优化数据管理以实现人工智能的成功：行业洞察和最佳实践</title>
      <link>https://dzone.com/articles/optimizing-data-management-for-ai-success</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;As artificial intelligence (AI) continues transforming industries, organizations face increasing challenges in managing and utilizing data for AI initiatives. Recent industry surveys and expert insights highlight the critical role of effective data management in AI success. This article explores key trends, challenges, and best practices in data management for AI projects, providing valuable insights for developers, engineers, and architects based on a recent discussion with &lt;a href=&#34;https://www.linkedin.com/in/adrianestala/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Adrian Estala&lt;/a&gt;, VP and Field Chief Data Officer at Starburst.&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;The Imperative of Real-Time Data Access in AI&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Real-time data access has emerged as a crucial factor for AI success. Implementing &lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-real-time-analytics&#34;&gt;real-time analytics&lt;/a&gt; poses several challenges for organizations:&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;随着人工智能 (AI) 不断改变行业，组织在管理和利用 AI 计划数据方面面临着越来越多的挑战。最近的行业调查和专家见解强调了有效的数据管理在人工智能成功中的关键作用。本文探讨了 AI 项目数据管理的主要趋势、挑战和最佳实践，根据最近与 &lt;a href=&#34;https://www.linkedin.com/in 的讨论，为开发人员、工程师和架构师提供了宝贵的见解。 /adrianestala/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Adrian Estala&lt;/a&gt;，Starburst 副总裁兼现场首席数据官。&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;人工智能中实时数据访问的必要性&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;实时数据访问已成为人工智能成功的关键因素。实施&lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-real-time-analytics&#34;&gt;实时分析&lt;/a&gt;给组织带来了一些挑战：&lt;/p&gt;</description>
      <pubDate>Wed, 11 Sep 2024 20:00:05 +0000</pubDate>
    </item>
    <item>
      <title>【Understanding the Purposes of Key Terraform Files and How to Structure Their Folders】了解关键 Terraform 文件的用途以及如何构建其文件夹</title>
      <link>https://dzone.com/articles/understanding-the-purposes-of-key-terraform-files</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Terraform is &lt;a href=&#34;https://dzone.com/articles/infrastructure-as-code-exploring-terraforms-domina&#34;&gt;the go-to platform&lt;/a&gt; for deploying and managing &lt;a href=&#34;https://dzone.com/articles/a-beginners-guide-to-infrastructure-as-code&#34;&gt;infrastructure as code (IaC)&lt;/a&gt;. But for Terraform to function, &lt;a href=&#34;https://collabnix.com/using-variables-to-create-dynamic-and-reusable-infrastructure-configurations/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;it needs a set of configuration files&lt;/a&gt; that specify the resources, settings, and structure of your infrastructure. How you create and organize IaC files will have a big impact on how effective and efficient your IaC deployment becomes, especially as your environment scales and evolves.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;The goal of this article is to help you understand the role and function of some of the most critical Terraform files, and how you can structure their folders to optimize the efficiency and scalability of your cloud resources. Learn about the importance of keeping Terraform files in order, and explore some tips for making sure your setup serves your IaC operations well.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;Terraform 是&lt;a href=&#34;https://dzone.com/articles/infrastruct-as-code-exploring-terraforms-domina&#34;&gt;用于部署和部署的首选平台&lt;/a&gt;管理&lt;a href=&#34;https://dzone.com/articles/a-beginners-guide-to-infrastruct-as-code&#34;&gt;基础设施即代码 (IaC)&lt;/a&gt;。但要使 Terraform 正常运行， &lt;a href=&#34;https://collabnix.com/using-variables-to-create-dynamic-and-reusable-infrastruct-configurations/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;它需要一组配置文件&lt;/a&gt;来指定基础设施的资源、设置和结构。如何创建和组织 IaC 文件将对 IaC 部署的有效性和效率产生重大影响，尤其是随着您的环境扩展和发展。&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;本文的目标是帮助您了解一些最关键的 Terraform 文件的角色和功能，以及如何构建其文件夹以优化云资源的效率和可扩展性。了解保持 Terraform 文件有序的重要性，并探索一些技巧以确保您的设置能够很好地服务于 IaC 操作。&lt;/p&gt;</description>
      <pubDate>Thu, 12 Sep 2024 17:00:07 +0000</pubDate>
    </item>
    <item>
      <title>【Designing a Secure Architecture for Distributed Systems】为分布式系统设计安全架构</title>
      <link>https://dzone.com/articles/designing-a-secure-architecture-for-distributed-systems</link>
      <description>【&lt;p&gt;Securing distributed systems is a complex challenge due to the diversity and scale of components involved. With multiple services interacting across potentially unsecured networks, the risk of unauthorized access and data breaches increases significantly. This article explores a practical approach to securing distributed systems using an open-source project. The project demonstrates how to integrate several security mechanisms and technologies to tackle common security challenges such as authentication, authorization, and secure communication.&lt;/p&gt;&#xA;&lt;h2&gt;&lt;a name=&#34;understanding-security-challenges-in-distributed-systems&#34; href=&#34;https://dev.to/apssouza22/designing-a-secure-architecture-for-distributed-systems-3nb0#understanding-security-challenges-in-distributed-systems&#34;&gt;&lt;/a&gt;Understanding Security Challenges in Distributed Systems&lt;/h2&gt;&#xA;&lt;p&gt;Distributed systems involve multiple services or microservices that must communicate securely across a network. Key security challenges in such architectures include:&lt;/p&gt;】&lt;p&gt;由于所涉及组件的多样性和规模，确保分布式系统的安全是一项复杂的挑战。由于多个服务在可能不安全的网络上交互，未经授权的访问和数据泄露的风险显着增加。本文探讨了使用开源项目保护分布式系统的实用方法。该项目演示了如何集成多种安全机制和技术来应对常见的安全挑战，例如身份验证、授权和安全通信。&lt;/p&gt;&#xA;&lt;h2&gt;&lt;a name=&#34;understanding-security-challenges-in-distributed-systems&#34; href=&#34;https://dev.to/apssouza22/designing-a-secure-architecture-for-distributed-systems-3nb0#understanding -security-challenges-in-distributed-systems&#34;&gt;&lt;/a&gt;了解分布式系统中的安全挑战&lt;/h2&gt;&#xA;&lt;p&gt;分布式系统涉及必须通过网络安全通信的多个服务或微服务。此类架构中的主要安全挑战包括：&lt;/p&gt;</description>
      <pubDate>Thu, 12 Sep 2024 15:00:08 +0000</pubDate>
    </item>
    <item>
      <title>【How To Build an OpenAI Custom GPT With a Third-Party API】如何使用第三方 API 构建 OpenAI 自定义 GPT</title>
      <link>https://dzone.com/articles/how-to-build-an-openai-custom-gpt-with-3rd-party-api</link>
      <description>【&lt;p&gt;With the advent of &lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-large-language-models&#34;&gt;Large Language Models (LLM)&lt;/a&gt;, the conversational user interface has become very popular. You simply ask what you&#39;re seeking, and ChatGPT produces an output. In addition, the model can perform actions in response to your command or question and present you with the result. This opened up a huge opportunity to build a new kind of interface where the only input is the user&#39;s words — written or spoken.&lt;/p&gt;&#xA;&lt;p&gt;This is fantastic, as you can imagine the limitless possibilities. What we need is for LLMs to have access to as many complex, real-world actions as possible, which they can then invoke appropriately. This is where third-party APIs come into the picture.&lt;/p&gt;】&lt;p&gt;随着&lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-large-language-models&#34;&gt;大型语言模型 (LLM)&lt;/a&gt; 的出现，会话式用户界面已经变得非常流行。您只需询问您要寻找的内容，ChatGPT 就会生成输出。此外，模型可以响应您的命令或问题执行操作并向您显示结果。这为构建一种新型界面提供了巨大的机会，其中唯一的输入是用户的文字（书面或口头）。&lt;/p&gt;&#xA;&lt;p&gt;这太棒了，因为你可以想象无限的可能性。我们需要的是法学硕士能够访问尽可能多的复杂的、现实世界的操作，然后他们可以适当地调用这些操作。这就是第三方 API 发挥作用的地方。&lt;/p&gt;</description>
      <pubDate>Thu, 12 Sep 2024 14:00:06 +0000</pubDate>
    </item>
    <item>
      <title>【10 Things To Avoid in Domain-Driven Design (DDD)】领域驱动设计 (DDD) 中要避免的 10 件事</title>
      <link>https://dzone.com/articles/10-things-to-avoid-in-domain-driven-design</link>
      <description>【&lt;p&gt;&lt;a href=&#34;https://dzone.com/refcardz/getting-started-domain-driven&#34;&gt;Domain-Driven Design (DDD)&lt;/a&gt; is an important strategic approach to software development. It involves deeply understanding and modeling a business domain, particularly beneficial in complex domains with intricate business rules, processes, and interactions. However, effectively implementing DDD requires discipline, a strong grasp of the domain, and the avoidance of common pitfalls that can lead to suboptimal designs and technical debt. In this article, we&#39;ll explore 10 things to avoid in DDD and examples to illustrate these pitfalls.&lt;/p&gt;&#xA;&lt;h2&gt;1. Focusing Too Much on Technical Patterns&lt;/h2&gt;&#xA;&lt;h3&gt;&lt;strong&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;Sample Scenario&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;A team begins a project by excessively creating repositories, aggregates, and value objects without fully grasping the business domain. For example, they develop a complicated repository for managing Customer entities without understanding how customers are represented and utilized within the business. Consequently, the repository contains numerous unnecessary methods that do not align with the domain&#39;s actual use cases and requirements.&lt;/span&gt;&lt;/p&gt;】&lt;p&gt;&lt;a href=&#34;https://dzone.com/refcardz/getting-started-domain-driven&#34;&gt;领域驱动设计 (DDD)&lt;/a&gt; 是软件开发的一种重要战略方法。它涉及对业务领域的深入理解和建模，特别是在具有复杂业务规则、流程和交互的复杂领域中。然而，有效实施 DDD 需要纪律、对领域的强有力掌握，并避免可能导致次优设计和技术债务的常见陷阱。在本文中，我们将探讨 DDD 中需要避免的 10 件事，并通过示例来说明这些陷阱。&lt;/p&gt;&#xA;&lt;h2&gt;1。过于关注技术模式&lt;/h2&gt;&#xA;&lt;h3&gt;&lt;strong&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;示例场景&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;团队在开始项目时会过度创建存储库、聚合和值对象，而没有完全掌握业务领域。例如，他们开发了一个复杂的存储库来管理客户实体，但不了解客户在业务中的表示和利用方式。因此，存储库包含许多不必要的方法，这些方法与域的实际用例和要求不符。&lt;/span&gt;&lt;/p&gt;</description>
      <pubDate>Thu, 12 Sep 2024 13:00:07 +0000</pubDate>
    </item>
    <item>
      <title>【Uncovering a Prototype Pollution Regression in the Core Node.js Project】揭示 Node.js 核心项目中的原型污染回归</title>
      <link>https://dzone.com/articles/uncovering-prototype-pollution-regression</link>
      <description>【&lt;p&gt;As a Node.js developer and security researcher, I recently stumbled upon an interesting security regression in the Node.js core project related to prototype pollution.&lt;/p&gt;&#xA;&lt;p&gt;This happened to be found while I was conducting an independent security research for my Node.js Secure Coding books and yet the discovery highlights the complex nature of security in open-source projects and the challenges of maintaining consistent security measures across a large codebase. Even at the scale of a project like Node.js, regressions can occur, potentially leaving parts of the codebase vulnerable to attack.&lt;/p&gt;】&lt;p&gt;作为一名 Node.js 开发人员和安全研究员，我最近在 Node.js 核心项目中偶然发现了一个与原型污染相关的有趣的安全回归。&lt;/p&gt;&#xA;&lt;p&gt;这是我在为我的 Node.js 安全编码书籍进行独立安全研究时发现的，但这一发现凸显了开源项目中安全性的复杂性以及在大型项目中保持一致的安全措施的挑战。代码库。即使像 Node.js 这样的项目规模，也可能会发生回归，从而可能导致部分代码库容易受到攻击。&lt;/p&gt;</description>
      <pubDate>Wed, 11 Sep 2024 21:00:07 +0000</pubDate>
    </item>
    <item>
      <title>【Understanding Floating-Point Precision Issues in Java】了解 Java 中的浮点精度问题</title>
      <link>https://dzone.com/articles/understanding-floating-points-number-in-java</link>
      <description>【&lt;h2&gt;Java Floating Numbers Look Familiar&lt;/h2&gt;&#xA;&lt;p&gt;In &lt;a href=&#34;https://dzone.com/refcardz/core-java&#34;&gt;Java&lt;/a&gt;, we have two types of floating-point numbers: &lt;code&gt;float&lt;/code&gt; and &lt;code&gt;double&lt;/code&gt;. All &lt;a href=&#34;https://dzone.com/articles/how-to-stay-happy-and-relevant-as-a-java-developer&#34;&gt;Java developers&lt;/a&gt; know them but can&#39;t answer a simple question described in the following meme:&lt;br&gt;&lt;img data-image=&#34;true&#34; data-new=&#34;false&#34; data-sizeformatted=&#34;349.9 kB&#34; data-mimetype=&#34;image/png&#34; data-creationdate=&#34;1726083059551&#34; data-creationdateformatted=&#34;09/11/2024 07:30 PM&#34; data-type=&#34;temp&#34; data-url=&#34;https://dz2cdn1.dzone.com/storage/temp/17912933-1726083058471.png&#34; data-modificationdate=&#34;null&#34; data-size=&#34;349948&#34; data-name=&#34;1726083058471.png&#34; data-id=&#34;17912933&#34; data-src=&#34;https://dz2cdn1.dzone.com/storage/temp/17912933-1726083058471.png&#34; class=&#34;fr-fic fr-dib lazyload&#34; style=&#34;width: 495px;&#34; alt=&#34;Prove you are robot&#34;&gt;&lt;/p&gt;&#xA;&lt;p contenteditable=&#34;true&#34;&gt;Are you robot enough?&lt;/p&gt;】&lt;h2&gt;Java 浮点数看起来很熟悉&lt;/h2&gt;&#xA;&lt;p&gt;在&lt;a href=&#34;https://dzone.com/refcardz/core-java&#34;&gt;Java&lt;/a&gt;中，我们有两种类型的浮点数：&lt;code&gt;float&lt;/code&gt;和&lt;代码&gt;双&lt;/代码&gt;。所有 &lt;a href=&#34;https://dzone.com/articles/how-to-stay-happy-and-relevant-as-a-java-developer&#34;&gt;Java 开发人员&lt;/a&gt;都知道这些问题，但无法回答以下模因中描述的一个简单问题：&lt;br&gt;&lt;img data-image=&#34;true&#34; data-new=&#34;false&#34; data-sizeformatted=&#34;349.9 kB&#34; data-mimetype=&#34;image/png&#34; data-creationdate=&#34; 1726083059551&#34; data-creationdateformatted=&#34;09/11/2024 07:30 PM&#34; data-type=&#34;temp&#34; data-url=&#34;https://dz2cdn1.dzone.com/storage/temp/17912933-1726083058471.png&#34; 数据-modificationdate =“null”data-size =“349948”data-name =“1726083058471.png”data-id =“17912933”data-src =“https://dz2cdn1.dzone.com/storage/temp/17912933- 1726083058471.png&#34; class=&#34;fr-fic fr-diblazyload&#34; style=&#34;width: 495px;&#34; alt=&#34;证明你是机器人&#34;&gt;&lt;/p&gt;&#xA;&lt;p contenteditable=&#34;true&#34;&gt;你够机器人吗？&lt;/p&gt;</description>
      <pubDate>Thu, 12 Sep 2024 11:00:07 +0000</pubDate>
    </item>
    <item>
      <title>【Modern Authentication on .NET: OpenID Connect, BFF, SPA】.NET 上的现代身份验证：OpenID Connect、BFF、SPA</title>
      <link>https://dzone.com/articles/modern-authentication-on-dotnet</link>
      <description>【&lt;p&gt;As web technologies continue to advance, so do the methods and protocols designed to secure them. The OAuth 2.0 and OpenID Connect protocols have significantly evolved in response to emerging security threats and the growing complexity of web applications. Traditional authentication methods, once effective, are now becoming outdated for modern Single Page Applications (SPAs), which face new security challenges. In this context, the Backend-For-Frontend (BFF) architectural pattern has emerged as a recommended solution for organizing interactions between SPAs and their backend systems, offering a more secure and manageable approach to authentication and session management. This article explores the BFF pattern in depth, demonstrating its practical application through a minimal solution implemented with .NET and React. By the end, you&#39;ll have a clear understanding of how to leverage the BFF pattern to enhance the security and functionality of your web applications.&lt;/p&gt;&#xA;&lt;h2&gt;Historical Context&lt;/h2&gt;&#xA;&lt;p&gt;The history of OAuth 2.0 and OpenID Connect reflects the ongoing evolution of Internet technologies. Let’s take a closer look at these protocols and their impact on modern web applications.&lt;/p&gt;】&lt;p&gt;随着网络技术的不断进步，旨在保护网络技术安全的方法和协议也在不断进步。为了应对新出现的安全威胁和 Web 应用程序日益复杂的情况，OAuth 2.0 和 OpenID Connect 协议已经发生了显着的发展。传统的身份验证方法曾经有效，但对于面临新安全挑战的现代单页应用程序 (SPA) 来说现在已经过时了。在此背景下，后端前端 (BFF) 架构模式已成为组织 SPA 及其后端系统之间交互的推荐解决方案，为身份验证和会话管理提供更安全、更易于管理的方法。本文深入探讨了 BFF 模式，通过使用 .NET 和 React 实现的最小解决方案展示了其实际应用。最后，您将清楚地了解如何利用 BFF 模式来增强 Web 应用程序的安全性和功能。&lt;/p&gt;&#xA;&lt;h2&gt;历史背景&lt;/h2&gt;&#xA;&lt;p&gt;OAuth 2.0 和 OpenID Connect 的历史反映了互联网技术的不断发展。让我们仔细看看这些协议及其对现代 Web 应用程序的影响。&lt;/p&gt;</description>
      <pubDate>Thu, 12 Sep 2024 12:00:03 +0000</pubDate>
    </item>
    <item>
      <title>【Open-Source Data Management Practices and Patterns】开源数据管理实践和模式</title>
      <link>https://dzone.com/refcardz/open-source-data-management-practices-and-patterns</link>
      <description>【Open-source data architectures offer organizations and teams significant benefits, ranging from reduced vendor lock-in and improved cost effectiveness to greater scalability, availability, and flexibility. In this Refcard, you&#39;ll learn core practices for building an open-source data architecture stack, along with design patterns for infrastructure components, high availability, scalability, security, and more.】开源数据架构为组织和团队提供了显着的好处，从减少供应商锁定和提高成本效益到提高可扩展性、可用性和灵活性。在此参考卡中，您将学习构建开源数据架构堆栈的核心实践，以及基础架构组件、高可用性、可扩展性、安全性等的设计模式。</description>
      <pubDate>Thu, 12 Sep 2024 13:13:03 +0000</pubDate>
    </item>
  </channel>
</rss>