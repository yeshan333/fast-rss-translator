<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Lifecycle Microservices With GenAI Tools】使用 GenAI 工具的生命周期微服务</title>
      <link>https://dzone.com/articles/lifecycle-microservices-with-genai-tools</link>
      <description>【&lt;h2 dir=&#34;ltr&#34;&gt;Lifecycle Development With AI&lt;/h2&gt;&#xA;&lt;p&gt;We have seen a huge shift in the way developers and consultants are using &lt;a href=&#34;https://dzone.com/articles/introduction-generative-ai-empowering-enterprises&#34;&gt;Generative AI (GenAI)&lt;/a&gt; tools to create working microservices. A new tool named WebGenAI begins the process with a simple prompt to create a complete API microservice with a running React-Admin user interface and has the ability to iterate and add new features or even logic.&lt;/p&gt;&#xA;&lt;p&gt;WebGenAI is built on top of the existing &lt;a href=&#34;https://dzone.com/refcardz/core-python&#34;&gt;Python&lt;/a&gt; open-source framework ApiLogicServer. &amp;nbsp;The entire project can be downloaded as runnable Python code or a &lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-docker-1&#34;&gt;Docker&lt;/a&gt; container to use locally. It also pushes each iteration to GitHub and you can run the application using &lt;a href=&#34;https://dzone.com/articles/instant-apps-customize-in-codespaces&#34;&gt;Codespaces&lt;/a&gt;. This is usually where the beginning of the full microservice lifecycle starts.&lt;br&gt;&lt;img style=&#34;width: 780px;&#34; class=&#34;fr-fic fr-dib lazyload&#34; data-image=&#34;true&#34; data-new=&#34;false&#34; data-sizeformatted=&#34;157.3 kB&#34; data-mimetype=&#34;image/png&#34; data-creationdate=&#34;1728832332953&#34; data-creationdateformatted=&#34;10/13/2024 03:12 PM&#34; data-type=&#34;temp&#34; data-url=&#34;https://dz2cdn1.dzone.com/storage/temp/17976783-1728832332650.png&#34; data-modificationdate=&#34;null&#34; data-size=&#34;157329&#34; data-name=&#34;1728832332650.png&#34; data-id=&#34;17976783&#34; data-src=&#34;https://dz2cdn1.dzone.com/storage/temp/17976783-1728832332650.png&#34; alt=&#34;DevOps visual loop&#34;&gt;&lt;/p&gt;】&lt;h2 dir=&#34;ltr&#34;&gt;人工智能的生命周期开发&lt;/h2&gt;&#xA;&lt;p&gt;我们看到开发人员和顾问使用&lt;a href=&#34;https://dzone.com/articles/introduction-generative-ai-empowering-enterprises&#34;&gt;生成式人工智能 (GenAI) 的方式发生了巨大转变&lt;/ a&gt; 创建工作微服务的工具。名为 WebGenAI 的新工具以一个简单的提示开始该过程，通过运行的 React-Admin 用户界面创建完整的 API 微服务，并能够迭代和添加新功能甚至逻辑。&lt;/p&gt;&#xA;&lt;p&gt;WebGenAI 构建在现有 &lt;a href=&#34;https://dzone.com/refcardz/core-python&#34;&gt;Python&lt;/a&gt; 开源框架 ApiLogicServer 之上。  整个项目可以作为可运行的 Python 代码或 &lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-docker-1&#34;&gt;Docker&lt;/a&gt; 容器下载以在本地使用。它还将每次迭代推送到 GitHub，您可以使用 &lt;a href=&#34;https://dzone.com/articles/instant-apps-customize-in-codespaces&#34;&gt;Codespaces&lt;/a&gt; 运行应用程序。这通常是完整微服务生命周期的开始。&lt;br&gt;&lt;img style=&#34;width: 780px;&#34; class =“fr-fic fr-dib lazyload”data-image =“true”data-new =“false”data-sizeformatted =“157.3 kB”data-mimetype =“image / png”data-creationdate =“1728832332953”数据-creationdateformatted=&#34;10/13/2024 03:12 PM&#34; data-type=&#34;temp&#34; data-url=&#34;https://dz2cdn1.dzone.com/storage/temp/17976783-1728832332650.png&#34; data-modificationdate= “null”data-size =“157329”data-name =“1728832332650.png”data-id =“17976783”data-src =“https://dz2cdn1.dzone.com/storage/temp/17976783-1728832332650.png” &#34; alt=&#34;DevOps 视觉循环&#34;&gt;&lt;/p&gt;</description>
      <pubDate>Mon, 28 Oct 2024 19:00:02 +0000</pubDate>
    </item>
    <item>
      <title>【How to Repair Corrupt MySQL Database Tables Step-by-Step】如何逐步修复损坏的 MySQL 数据库表</title>
      <link>https://dzone.com/articles/repair-corrupt-mysql-database-tables-step-by-step</link>
      <description>【&lt;p&gt;In the modern world, companies are not solely dependent on a specific database server platform. There are many database platforms available that are adequate to handle moderate workloads and client requirements of high availability and disaster recovery. &lt;a href=&#34;https://dzone.com/refcardz/essential-mysql&#34;&gt;MySQL&lt;/a&gt; is one of those database platforms which provides a lot of features and high performance.&lt;/p&gt;&#xA;&lt;p&gt;Just like other &lt;a href=&#34;https://dzone.com/articles/a-look-at-the-history-of-rdbms&#34;&gt;RDBMS&lt;/a&gt;, MySQL is also prone to database and table corruption. The recent outage caused by Microsoft and CrowdStrike also impacted MySQL database servers. Due to operating system failures, the tables of the database or entire databases get corrupted.&lt;/p&gt;】&lt;p&gt;在现代世界，公司不仅仅依赖于特定的数据库服务器平台。有许多可用的数据库平台足以处理中等工作负载以及客户对高可用性和灾难恢复的要求。 &lt;a href=&#34;https://dzone.com/refcardz/essential-mysql&#34;&gt;MySQL&lt;/a&gt; 是提供大量功能和高性能的数据库平台之一。&lt;/p&gt;&#xA;&lt;p&gt;就像其他&lt;a href=&#34;https://dzone.com/articles/a-look-at-the-history-of-rdbms&#34;&gt;RDBMS&lt;/a&gt;一样，MySQL也容易出现数据库和表腐败。最近由 Microsoft 和 CrowdStrike 造成的中断也影响了 MySQL 数据库服务器。由于操作系统故障，数据库的表或整个数据库被损坏。&lt;/p&gt;</description>
      <pubDate>Mon, 28 Oct 2024 17:00:02 +0000</pubDate>
    </item>
    <item>
      <title>【Using AUTHID Parameter in Oracle PL/SQL】在 Oracle PL/SQL 中使用 AUTHID 参数</title>
      <link>https://dzone.com/articles/authid-parameter-in-oracle-plsql</link>
      <description>【&lt;p style=&#34;text-align: left;&#34;&gt;In Oracle, the &lt;code&gt;AUTHID&lt;/code&gt; clause is a powerful option to manage &lt;a href=&#34;https://dzone.com/articles/database-security&#34;&gt;DB security&lt;/a&gt; and access control. It defines who is considered a current user for execution purposes within stored procedures and functions. This article explores the basics of &lt;code&gt;AUTHID&lt;/code&gt;, different settings, and how to use it effectively.&lt;/p&gt;&#xA;&lt;h2 style=&#34;text-align: left;&#34;&gt;About AUTHID&lt;/h2&gt;&#xA;&lt;p style=&#34;text-align: left;&#34;&gt;The &lt;code&gt;AUTHID&lt;/code&gt; clause specifies whether the current user for authorization checks is the owner of the procedure or function (&lt;code&gt;AUTHID DEFINER&lt;/code&gt;) or the user who invokes it (&lt;code&gt;AUTHID CURRENT_USER&lt;/code&gt;).&lt;/p&gt;】&lt;p style=&#34;text-align: left;&#34;&gt;在 Oracle 中，&lt;code&gt;AUTHID&lt;/code&gt; 子句是管理 &lt;a href=&#34;https://dzone.com/articles/database-security &#34;&gt;数据库安全&lt;/a&gt;和访问控制。它定义了在存储过程和函数中执行目的时谁被视为当前用户。本文探讨了 &lt;code&gt;AUTHID&lt;/code&gt; 的基础知识、不同的设置以及如何有效地使用它。&lt;/p&gt;&#xA;&lt;h2 style=&#34;text-align: left;&#34;&gt;关于 AUTHID&lt;/h2&gt;&#xA;&lt;p style=&#34;text-align: left;&#34;&gt;&lt;code&gt;AUTHID&lt;/code&gt; 子句指定进行授权检查的当前用户是否是过程或函数的所有者 (&lt;code&gt;AUTHID DEFINER&lt;/code&gt;)或调用它的用户 (&lt;code&gt;AUTHID CURRENT_USER&lt;/code&gt;)。&lt;/p&gt;</description>
      <pubDate>Mon, 28 Oct 2024 13:00:02 +0000</pubDate>
    </item>
    <item>
      <title>【Filtering Java Collections via Annotation-Driven Introspection】通过注释驱动的内省过滤 Java 集合</title>
      <link>https://dzone.com/articles/filtering-java-collections-via-annotations</link>
      <description>【&lt;p&gt;Since &lt;a href=&#34;https://dzone.com/articles/j%CE%BBv%CE%BB-8-a-comprehensive-look&#34;&gt;Java 8&lt;/a&gt;, the programming workload of iterating over collections and selecting a subcollection (filtering) based on defined constraints (&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/?java/util/function/Predicate.html&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;predicates&lt;/a&gt;) has been considerably simplified using the new &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/?java/util/stream/Stream.html&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Stream API&lt;/a&gt;. Despite this new feature, some scenarios can still overwhelm developers by requiring them to implement a significant amount of very specific code to meet the filtering conditions. A common example in enterprise systems is the need to filter:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA; &lt;p&gt;&#34;. . . a collection where each object is an element of a large graph and the attributes to be considered in the filters belong to distinct objects.&#34;&lt;/p&gt;】&lt;p&gt;自&lt;a href=&#34;https://dzone.com/articles/j%CE%BBv%CE%BB-8-a-compressive-look&#34;&gt;Java 8&lt;/a&gt;以来，迭代的编程工作量基于定义的约束（&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/?java/util/function/Predicate.html&#34; rel= “noopener noreferrer” target=&#34;_blank&#34;&gt;谓词&lt;/a&gt;）已使用新的 &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/?java/util /stream/Stream.html&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;流 API&lt;/a&gt;。尽管有这个新功能，但某些场景仍然会让开发人员不知所措，因为要求他们实现大量非常具体的代码来满足过滤条件。企业系统中的一个常见示例是需要过滤：&lt;/p&gt;&#xA;&lt;块引用&gt;&#xA; &lt;p&gt;“...一个集合，其中每个对象都是大图的一个元素，并且过滤器中要考虑的属性属于不同的对象。”&lt;/p&gt;</description>
      <pubDate>Mon, 28 Oct 2024 21:00:03 +0000</pubDate>
    </item>
    <item>
      <title>【Kumologica Container Inside AWS ECS Fargate】AWS ECS Fargate 内的 Kumologica 容器</title>
      <link>https://dzone.com/articles/kumologica-container-inside-aws-ecs-fargate</link>
      <description>【&lt;p style=&#34;text-align: left;&#34;&gt;We have seen multiple examples and use cases of building a low code API using Kumologica and running it on AWS lambda and on Azure function. In this article, we will be taking through the build and deployment of a simple hello world service &lt;a href=&#34;https://www.docker.com/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Docker&lt;/a&gt; container inside &lt;a href=&#34;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS_Fargate.html&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;AWS Elastic Container Service&lt;/a&gt; (ECS) Fargate.&lt;br&gt;&lt;br&gt;&lt;img data-image=&#34;true&#34; data-new=&#34;false&#34; data-sizeformatted=&#34;75.1 kB&#34; data-mimetype=&#34;image/jpeg&#34; data-creationdate=&#34;1729115447402&#34; data-creationdateformatted=&#34;10/16/2024 09:50 PM&#34; data-type=&#34;temp&#34; data-url=&#34;https://dz2cdn1.dzone.com/storage/temp/17985237-1729115445512.jpeg&#34; data-modificationdate=&#34;null&#34; data-size=&#34;75146&#34; data-name=&#34;1729115445512.jpeg&#34; data-id=&#34;17985237&#34; data-src=&#34;https://dz2cdn1.dzone.com/storage/temp/17985237-1729115445512.jpeg&#34; class=&#34;fr-fic fr-dib lazyload&#34; style=&#34;width: 665px;&#34; alt=&#34;Container ship in water&#34;&gt;&lt;/p&gt;&#xA;&lt;figcaption class=&#34;fr-inner&#34; contenteditable=&#34;true&#34;&gt;&#xA; &lt;div style=&#34;text-align: center;&#34;&gt;&#xA;  &lt;em&gt;Photo by &lt;/em&gt;&lt;a href=&#34;https://unsplash.com/@chrislinnett&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;Chris Linnett&lt;/em&gt;&lt;/a&gt;&#xA; &lt;/div&gt;&#xA;&lt;/figcaption&gt;&#xA;&lt;h2 style=&#34;text-align: left;&#34;&gt;Architecture&lt;/h2&gt;&#xA;&lt;p style=&#34;text-align: left;&#34;&gt;Based on the design defined in the diagram (Figure 1), we will be building Kumologica applications as a Docker container. Once the Docker image is ready, we will push it into the AWS Elastic Container Registry (ECR). ECR holds all the Docker images. The Elastic Container Service is an AWS container management platform. The workload availability, scaling, and network are managed by ECS. In order to deploy a workload to ECS, an ECS task definition needs to be created, which will define the Docker image that needs to be used, the name of the service, and the type of launch. In this case, we will be choosing the launch type as Fargate.&amp;nbsp;&lt;/p&gt;】&lt;p style=&#34;text-align: left;&#34;&gt;我们已经看到了使用 Kumologica 构建低代码 API 并在 AWS lambda 和 Azure 函数上运行它的多个示例和用例。在本文中，我们将构建和部署一个简单的 hello world 服务 &lt;a href=&#34;https://www.docker.com/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Docker&lt;/ a&gt; &lt;a href=&#34;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS_Fargate.html&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;AWS Elastic Container Service&lt;/a 内的容器&gt; (ECS) Fargate。&lt;br&gt;&lt;br&gt;&lt;img data-image=&#34;true&#34; data-new=&#34;false&#34; data-sizeformatted=&#34;75.1 kB&#34; data-mimetype=&#34;image/jpeg&#34; data-creationdate=&#34; 1729115447402&#34; data-creationdateformatted=&#34;10/16/2024 09:50 PM&#34; data-type=&#34;temp&#34; data-url=&#34;https://dz2cdn1.dzone.com/storage/temp/17985237-1729115445512.jpeg&#34; 数据-modificationdate =“null”data-size =“75146”data-name =“1729115445512.jpeg”data-id =“17985237”data-src =“https://dz2cdn1.dzone.com/storage/temp/17985237- 1729115445512.jpeg“类=“fr-fic fr-dib懒加载”样式=“宽度：665px;” alt=&#34;水中集装箱船&#34;&gt;&lt;/p&gt;&#xA;&lt;figcaption class=&#34;fr-inner&#34; contenteditable=&#34;true&#34;&gt;&#xA; &lt;div style=&#34;text-align: center;&#34;&gt;&#xA;  &lt;em&gt;摄影&lt;/em&gt;&lt;a href=&#34;https://unsplash.com/@chrislinnett&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;Chris Linnett&lt;/em&gt;&lt;/a&gt;&#xA; &lt;/div&gt;&#xA;&lt;/图标题&gt;&#xA;&lt;h2 style=&#34;text-align: left;&#34;&gt;架构&lt;/h2&gt;&#xA;&lt;p style=&#34;text-align: left;&#34;&gt;根据图表（图 1）中定义的设计，我们将构建 Kumologica 应用程序作为 Docker 容器。 Docker 镜像准备就绪后，我们会将其推送到 AWS Elastic Container Registry (ECR)。 ECR 保存所有 Docker 镜像。 Elastic Container Service 是一个 AWS 容器管理平台。工作负载可用性、扩展和网络由 ECS 管理。为了将工作负载部署到 ECS，需要创建 ECS 任务定义，该定义将定义需要使用的 Docker 映像、服务名称和启动类型。在本例中，我们将选择 Fargate 作为启动类型。 &lt;/p&gt;</description>
      <pubDate>Mon, 28 Oct 2024 16:00:04 +0000</pubDate>
    </item>
    <item>
      <title>【Refining Automated Testing: Balancing Speed and Reliability in Modern Test Suites】完善自动化测试：在现代测试套件中平衡速度和可靠性</title>
      <link>https://dzone.com/articles/refining-automated-testing</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Traditionally, automated tests are classified as &lt;a href=&#34;https://dzone.com/articles/the-anatomy-of-good-unit-testing&#34;&gt;unit tests&lt;/a&gt;, &lt;a href=&#34;https://dzone.com/articles/integration-testing-tutorial-a-comprehensive-guide&#34;&gt;integration tests&lt;/a&gt;, and &lt;a href=&#34;https://dzone.com/refcardz/end-to-end-testing-automation-essentials&#34;&gt;end-to-end&lt;/a&gt; tests. This classification is based on the scope of a test, though the distinction between the different types is not always clear. Unit tests have a narrow scope and usually exercise a single method or class. Integration tests validate the interaction between different components. End-to-end tests often exercise complete user flows on a platform or web application, involving several disparate systems.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;As a codebase grows, slow and flaky tests start affecting developer productivity. It’s instructive to examine test suites from another dimension — speed and determinism.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;传统上，自动化测试被分类为&lt;a href=&#34;https://dzone.com/articles/the-anatomy-of-good-unit-testing&#34;&gt;单元测试&lt;/a&gt;， &lt;a href=&#34;https://dzone.com/articles/integration-testing-tutorial-a-compressive-guide&#34;&gt;集成测试&lt;/a&gt;和&lt;a href=&#34;https://dzone.com/refcardz /end-to-end-testing-automation-essentials&#34;&gt;端到端&lt;/a&gt;测试。这种分类是基于测试的范围，尽管不同类型之间的区别并不总是很清楚。单元测试的范围很窄，通常测试单个方法或类。集成测试验证不同组件之间的交互。端到端测试通常在平台或 Web 应用程序上执行完整的用户流程，涉及多个不同的系统。&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;随着代码库的增长，缓慢且不稳定的测试开始影响开发人员的工作效率。从另一个维度（速度和确定性）检查测试套件是有启发性的。&lt;/p&gt;</description>
      <pubDate>Mon, 28 Oct 2024 18:00:09 +0000</pubDate>
    </item>
    <item>
      <title>【How to Design Event Streams, Part 1】如何设计事件流，第 1 部分</title>
      <link>https://dzone.com/articles/how-to-design-event-streams-part-1</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=7Bh10yAycws&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Event streaming&lt;/a&gt; is becoming increasingly common in the world today. An event is a single piece of data that describes, as a snapshot in time, something important that happened in your business. We record that data to an event stream (typically using an Apache Kafka topic), which provides the basis for other applications and business processes to respond and react accordingly — also known as &lt;a href=&#34;https://dzone.com/articles/event-driven-architecture-as-a-strategy&#34;&gt;event-driven architecture (EDA)&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Event-driven architectures (EDA) rely extensively on events. To be successful with EDA, you’ll need to know how to properly design your events because this will significantly affect not only what you can do today, but also tomorrow.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=7Bh10yAycws&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;事件流式传输&lt;/a&gt;变得越来越普遍当今世界很常见。事件是一条数据，它以时间快照的形式描述了您的业务中发生的重要事件。我们将该数据记录到事件流（通常使用 Apache Kafka 主题），这为其他应用程序和业务流程做出相应的响应和反应提供了基础 - 也称为 &lt;a href=&#34;https://dzone.com/articles /event-driven-architecture-as-a-strategy&#34;&gt;事件驱动架构 (EDA)&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;事件驱动架构 (EDA) 广泛依赖于事件。为了在 EDA 方面取得成功，您需要知道如何正确设计您的活动，因为这不仅会严重影响您今天可以做的事情，还会影响明天的事情。&lt;/p&gt;</description>
      <pubDate>Mon, 28 Oct 2024 15:00:04 +0000</pubDate>
    </item>
    <item>
      <title>【So, You Want a Career in DevOps? Here&#39;s Where to Begin】那么，您想从事 DevOps 职业吗？从这里开始</title>
      <link>https://dzone.com/articles/career-in-devops-heres-where-to-begin</link>
      <description>【&lt;p&gt;&lt;span data-contrast=&#34;auto&#34; lang=&#34;EN-US&#34;&gt;Once during an interview for a senior DevOps position, I had an amusing experience. I had covered everything the interviewer expected, anticipating their questions, when boredom suddenly swooped in. To switch things up, I handed a marker to the two engineers at the interview who were assessing my knowledge and asked them to explain how their DevOps processes were organized. As they walked me through the setup, I started asking why certain decisions were made. The engineers and the interviewer were surprised but raised no objections.&lt;/span&gt;&lt;span data-ccp-props=&#34;{&amp;quot;335559738&amp;quot;:240}&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;span data-contrast=&#34;auto&#34; lang=&#34;EN-US&#34;&gt;I got that job. Yet, the lesson between the lines is that there are no ready-made templates for job interviews, and unexpected twists are inevitable&amp;nbsp;—&amp;nbsp;especially for a DevOps position.&lt;/span&gt;&lt;span data-ccp-props=&#34;{}&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;】&lt;p&gt;&lt;span data-contrast=&#34;auto&#34; lang=&#34;EN-US&#34;&gt;有一次在面试高级 DevOps 职位时，我有过一次有趣的经历。我已经涵盖了面试官期望的所有内容，预料到了他们的问题，突然感到无聊。为了改变情况，我向面试时正在评估我的知识的两位工程师递了一个记号笔，并要求他们解释他们的 DevOps 流程是如何组织的。当他们引导我完成设置时，我开始问为什么做出某些决定。工程师和面试官都很惊讶，但没有提出异议。&lt;/span&gt;&lt;span data-ccp-props=&#34;{&#34;335559738&#34;:240}&#34;&gt; &lt;/span&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;span data-contrast=&#34;auto&#34; lang=&#34;EN-US&#34;&gt;我得到了那份工作。然而，字里行间的教训是，工作面试没有现成的模板，意外的曲折是不可避免的——尤其是对于 DevOps 职位。&lt;/span&gt;&lt;span data-ccp-props=&#34;{}&#34;&gt; &lt; /跨度&gt;&lt;/p&gt;</description>
      <pubDate>Mon, 28 Oct 2024 20:00:03 +0000</pubDate>
    </item>
    <item>
      <title>【AI-Driven Intent-Based Networking: The Future of Network Management Using AI】人工智能驱动的基于意图的网络：使用人工智能进行网络管理的未来</title>
      <link>https://dzone.com/articles/ai-driven-intent-based-networking</link>
      <description>【&lt;p&gt;We are living in a world where the internet is an inseparable part of our lives, and with the growth of Cloud computing and increased demand for AI/ML-based applications, the demand for network capacity is unstoppable. As networks scale exponentially, classical topologies and designs are struggling to keep in sync with the rapidly evolving demands of the modern IT infrastructure. Network management is getting complex due to the sheer amount of network infrastructure and links. AI-driven intent-based networking emerges as a potential solution, promising to reshape our approach to network management — but is it truly the solution to this problem it claims to be? Let’s dive into its details to understand how intent-based networking will be shaping the future of network management.&lt;/p&gt;&#xA;&lt;h2&gt;What Is Intent-Based Networking?&lt;/h2&gt;&#xA;&lt;p&gt;Traditional intent-based networking (IBN) evolved from software-defined networking (SDN). SDN is a very popular approach in network automation where software-defined controllers and APIs communicate with the physical Infrastructure. IBN is a natural progression of SDN that combines intelligence, analytics, &lt;a href=&#34;https://dzone.com/refcardz/machine-learning-predictive&#34;&gt;machine learning&lt;/a&gt;, and orchestration to automate network management. It translates high-level business intent into network policies to configure the underlying network. IBN abstracts the complex part of underlying hardware, and network configuration to allow users to express their desired intent in natural language.&amp;nbsp;&lt;/p&gt;】&lt;p&gt;我们生活在一个互联网与我们生活密不可分的世界，随着云计算的增长和基于人工智能/机器学习的应用需求的增加，对网络容量的需求是不可阻挡的。随着网络呈指数级扩展，传统拓扑和设计正在努力与现代 IT 基础设施快速发展的需求保持同步。由于网络基础设施和链路数量庞大，网络管理变得越来越复杂。人工智能驱动的基于意图的网络作为一种潜在的解决方案出现，有望重塑我们的网络管理方法——但它真的能解决它所声称的这个问题吗？让我们深入了解其细节，了解基于意图的网络将如何塑造网络管理的未来。&lt;/p&gt;&#xA;&lt;h2&gt;什么是基于意图的网络？&lt;/h2&gt;&#xA;&lt;p&gt;传统的基于意图的网络 (IBN) 从软件定义网络 (SDN) 演变而来。 SDN 是网络自动化中非常流行的方法，其中软件定义的控制器和 API 与物理基础设施进行通信。 IBN 是 SDN 的自然发展，它结合了智能、分析、&lt;a href=&#34;https://dzone.com/refcardz/machine-learning-predictive&#34;&gt;机器学习&lt;/a&gt;和编排以实现网络管理自动化。它将高级业务意图转换为网络策略以配置底层网络。 IBN抽象了底层硬件和网络配置的复杂部分，允许用户用自然语言表达他们想要的意图。 &lt;/p&gt;</description>
      <pubDate>Mon, 28 Oct 2024 12:00:12 +0000</pubDate>
    </item>
    <item>
      <title>【Advanced CI/CD Pipeline Optimization Techniques Using GitHub Actions】使用 GitHub Actions 的高级 CI/CD 管道优化技术</title>
      <link>https://dzone.com/articles/advanced-cicd-pipeline-optimization-techniques</link>
      <description>【&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/how-to-build-an-effective-cicd-pipeline&#34;&gt;Continuous Integration and Continuous Deployment (CI/CD) pipelines&lt;/a&gt; are crucial for modern software development. This article explores advanced techniques to optimize these pipelines, enhancing efficiency and reliability for enterprise-level operations.&lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;Parallelization Using Matrix Builds&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-github-actions&#34;&gt;GitHub Actions&lt;/a&gt; CI tests using the matrix strategy to run jobs in parallel:&lt;/p&gt;】&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/how-to-build-an- effective-cicd-pipeline&#34;&gt;持续集成和持续部署 (CI/CD) 管道&lt;/a&gt;至关重要用于现代软件开发。本文探讨了优化这些管道的先进技术，从而提高企业级运营的效率和可靠性。&lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;使用矩阵构建进行并行化&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-github-actions&#34;&gt;GitHub Actions&lt;/a&gt; CI 测试使用矩阵策略并行运行作业：&lt;/p &gt;</description>
      <pubDate>Mon, 28 Oct 2024 14:00:04 +0000</pubDate>
    </item>
  </channel>
</rss>