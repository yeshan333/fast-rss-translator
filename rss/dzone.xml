<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【TFVC to Git Migration: Step-by-Step Guide for Modern DevOps Teams】TFVC到GIT迁移：现代DevOps团队的分步指南</title>
      <link>https://dzone.com/articles/migrating-from-tfvc-to-git-repositories</link>
      <description>【&lt;h2&gt;The Challenge&lt;/h2&gt;&#xA;&lt;p&gt;Our organization has maintained a large monolithic codebase in Team Foundation Version Control (TFVC) for over a decade. As development velocity has increased and teams have moved toward agile methodologies, microservices, and cloud-native architectures, the limitations of TFVC have become increasingly apparent. The centralized version control model hinders collaboration, branching, and automation, and our existing classic build and release pipelines in TFS are tightly coupled with legacy tooling that no longer aligns with modern DevOps practices.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;We have observed significant bottlenecks in:&lt;/p&gt;】&lt;h2&gt;挑战&lt;/h2&gt;&#xA;&lt;p&gt;我们的组织在Team Foundation版本控制（TFVC）中维持了一个大量的单片代码库，已有十多年了。随着发展速度的提高，团队已经朝着敏捷的方法，微服务和云本地体系结构转向，TFVC的局限性变得越来越明显。集中式版本控制模型阻碍了协作，分支和自动化，而我们现有的TFS中现有的经典构建和释放管道与不再与现代DevOps实践保持一致的旧工具紧密相结合。 &lt;/p&gt;&#xA;&lt;p&gt;我们观察到：&lt;/p&gt;</description>
      <pubDate>Fri, 06 Jun 2025 13:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【When Caching Goes Wrong: How One Misconfigured Cache Took Down an Entire System】当缓存出现问题时：一个错误配置的缓存如何拆除了整个系统</title>
      <link>https://dzone.com/articles/when-caching-goes-wrong-how-one-misconfigured-cach</link>
      <description>【&lt;p&gt;Caching is a cornerstone of modern software architecture. By temporarily storing frequently accessed data in fast storage (memory or dedicated cache servers), applications can serve repeated requests quickly without hitting slower back-end systems each time. In high-traffic systems, caching dramatically reduces database load and improves response times. A well-tuned cache can be the difference between a snappy user experience and a sluggish one.&lt;/p&gt;&#xA;&lt;p&gt;However, &lt;a href=&#34;https://dzone.com/articles/choosing-the-right-caching-strategy&#34;&gt;caching&lt;/a&gt; is a double-edged sword. When configured correctly, it accelerates performance and enables systems to scale. But if something goes wrong in the cache layer—a subtle bug or misconfiguration—the consequences can ripple throughout the entire stack. In this case study, we’ll explore a fictional scenario where a single misconfigured cache brought down an entire system, illustrating how critical caching is and how easily it can become a single point of failure.&lt;/p&gt;】&lt;p&gt;缓存是现代软件体系结构的基石。通过将经常访问的数据临时存储在快速存储（内存或专用的高速缓存服务器）中，应用程序可以快速提供重复的请求，而无需每次击中较慢的后端系统。在高流量系统中，缓存会大大减少数据库负载并改善响应时间。调整良好的缓存可能是活泼的用户体验和缓慢的缓存。&lt;/p&gt;&#xA;&lt;p&gt;但是，&lt;a href =“ https://dzone.com/articles/choosing-the-right-caching-strategy”&gt;缓存&lt;/a&gt;是一把双刃剑。正确配置后，它会加速性能并使系统能够扩展。但是，如果缓存层中出现问题（一个微妙的错误或错误配置），后果可能会在整个堆栈中荡漾。在此案例研究中，我们将探讨一个虚构的方案，其中一个错误配置的缓存降低了整个系统，说明了临时缓存的程度以及它如何容易成为单一的失败点。&lt;/p&gt;。&lt;/p&gt;</description>
      <pubDate>Fri, 06 Jun 2025 11:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【How to Create a Custom React Component in Vaadin Flow】如何在vaadin流中创建自定义反应组件</title>
      <link>https://dzone.com/articles/create-custom-react-component-vaadin-flow</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Vaadin Flow is a Java-based, backend-driven UI framework that is best suited for admin UIs, where the number of active users is predictable and bounded. Within this controlled context, the UI state can be managed on the backend, sharing only the necessary diffs with the user for rendering.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;From a developer’s perspective, all UI configuration remains in Java code. There is no need to manually create separate REST endpoints, as the UI component state is managed directly within Java.&lt;/p&gt;】&lt;p dir =“ ltr”&gt; vaadin Flow是一个基于Java的，由后端驱动的UI框架，最适合Admin UI，其中有效用户的数量是可预测和有限的。在此受控上下文中，可以在后端管理UI状态，仅与用户共享必要的差异以进行渲染。&lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;从开发人员的角度来看，所有UI配置都保留在Java代码中。由于UI组件状态直接在Java内管理。&lt;/p&gt;，因此无需手动创建单独的REST端点。&lt;/p&gt;</description>
      <pubDate>Fri, 06 Jun 2025 20:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【How to Identify the Underlying Causes of Connection Timeout Errors for MongoDB With Java】如何确定MongoDB与Java的连接超时错误的根本原因</title>
      <link>https://dzone.com/articles/connection-time-out-errors-mongodb-java</link>
      <description>【&lt;p&gt;Java developers and &lt;a href=&#34;https://dzone.com/refcardz/mongodb&#34;&gt;MongoDB&lt;/a&gt; are like Aladdin and the Genie from Arabian Nights. Developers rub the lamp with their wildest NoSQL wishes, and MongoDB swoops in, granting &lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-spring-boot-and-microservices&#34;&gt;Spring Boot microservices&lt;/a&gt; and REST APIs the magic they need to soar. But every so often, a Jafar-like menace swoops in, forcing our Aladdin (Java devs) to wrestle with sleepless nights. One such villainous foe is the connection timeout, locking APIs in a cave of wonders with no escape, leaving developers yearning for a magic carpet fix.&lt;/p&gt;&#xA;&lt;p&gt;So, what’s a connection timeout error? Imagine Aladdin, the developer, sending Abu, his trusty monkey, to fetch a shiny treasure—data—from MongoDB’s palace vault. Abu’s got 30 seconds to scamper over and back. But if the palace is packed with guards (server overload), the gates are jammed shut (network issues), or Abu’s running to the wrong hideout (bad address), and he doesn’t make it in time. That’s a timeout: MongoClient can’t grab the data, the mission fails, and your app’s stuck with a MongoTimeoutException, leaving your API as empty-handed as Aladdin without his loot. In simple terms, it’s when your MongoClient—the trusty bridge between your Java app and MongoDB—can’t reach the server before the clock runs out.&lt;/p&gt;】&lt;p&gt; java开发人员和&lt;a href =“ https://dzone.com/refcardz/mongodb”&gt; mongodb &lt;/a&gt;就像阿拉德丁（Aladdin）和阿拉伯之夜的精灵一样。开发人员以最疯狂的nosql愿望擦拭灯，并散发出Mongodb swops，并授予&lt;a href =“ https://dzone.com/refcardz/refcardz/getting-started-with-with-with-spring-boot-boot-and-microservices一下”&gt; spring boot microservices &lt;/a&gt; &lt;/a&gt;和spris apis and Apis and Apis the op the Opis to soar to soar。但是，每隔一段时间，类似Jafar的威胁都会涌入，迫使我们的Aladdin（Java Devs）与不眠之夜搏斗。这样一个恶棍的敌人就是连接超时，将API锁在没有逃脱的奇观洞穴中，使开发人员渴望魔术地毯修复。&lt;/p&gt;&#xA;&lt;p&gt;那么，连接超时错误是什么？想象一下，开发商阿拉丁（Aladdin）派遣他可信赖的猴子阿布（Abu）从蒙​​古德（Mongodb）的宫殿库（Palace Vault）那里获取闪亮的宝藏（Data）。阿布（Abu）有30秒钟的时间扫描。但是，如果宫殿装满了警卫（服务器过载），则大门会被堵塞（网络问题），或者ABU运行到错误的藏身处（不良地址），而他没有及时地做到这一点。这是一个超时：Mongoclient无法抓住数据，任务失败，并且您的应用程序被Mongotimeoutexception陷入困境，使您的API像Aladdin一样空手不及，没有他的战利品。简而言之，这是您的杂种（Java App和MongoDB之间的可信赖桥梁）在时钟耗尽之前无法到达服务器。&lt;/p&gt;</description>
      <pubDate>Fri, 06 Jun 2025 14:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Secure IaC With a Shift-Left Approach】通过左翼方法固定IAC</title>
      <link>https://dzone.com/articles/secure-iac-with-a-shift-left-approach</link>
      <description>【&lt;p style=&#34;text-align: left;&#34;&gt;Imagine you&#39;re building a skyscraper—not just quickly, but with precision. You rely on blueprints to make sure every beam and every bolt is exactly where it should be. That’s what &lt;a href=&#34;https://dzone.com/articles/what-is-infrastructure-as-code&#34;&gt;Infrastructure as Code (IaC)&lt;/a&gt; is for today’s cloud-native organizations—a blueprint for the cloud. As businesses race to innovate faster, IaC helps them automate and standardize how cloud resources are built. But here’s the catch: speed without security is like skipping the safety checks on that skyscraper. One misconfigured setting, an exposed secret, or a non-compliant resource can bring the whole thing down—or at least cause serious trouble in production. That’s why the shift-left approach to secure IaC matters more than ever.&amp;nbsp;&lt;/p&gt;&#xA;&lt;h2 style=&#34;text-align: left;&#34;&gt;What Does “Shift-Left” Mean in IaC?&lt;/h2&gt;&#xA;&lt;p style=&#34;text-align: left;&#34;&gt;&lt;a href=&#34;https://dzone.com/refcardz/shifting-left-with-continuous-delivery&#34;&gt;Shifting left&lt;/a&gt; refers to moving security and compliance checks earlier in the development process. Rather than waiting until deployment or runtime to detect issues, teams validate security policies, compliance rules, and access controls as code is written—enabling faster feedback, reduced rework, and stronger cloud governance.&lt;/p&gt;】&lt;p style =“ text-align：left;”&gt;想象您正在建造一个摩天大楼 - 不是很快，而是精确。您依靠蓝图来确保每个光束和每个螺栓都应在哪里。这就是&lt;a href =“ https://dzone.com/articles/what-is-infrastructure-as-code”&gt;基础架构作为代码（IAC）&lt;/a&gt;是针对当今的云形式组织 - 云的蓝图。随着企业竞争更快的创新，IAC可以帮助他们自动化并标准化云资源的构建方式。但是，这就是捕获：没有安全感的速度就像跳过那个摩天大楼的安全检查一样。一个错误配置的设置，一个暴露的秘密或不合规的资源可以使整个事情降低，或者至少在生产中造成严重麻烦。这就是为什么左翼保护IAC的方法比以往任何时候都重要的原因。 &lt;/p&gt;&#xA;&lt;h2 style =“ text-align：left;”&gt;“ shift-left”在iac？&lt;/h2&gt;中意味着什么&#xA;&lt;p style =“ text-align：left;”&gt; &lt;a href =“ https：//dzone.com/refcardz/refcardz/shifting-left-with-with-continous-delivery”&gt;左移动&lt;/a&gt;是指在开发过程中移动安全性和合规性检查。团队不再等待部署或运行​​时验证安全策略，合规性规则和访问控件作为编写代码的编写，以实现更快的反馈，减少的返工和更强大的云政策。&lt;/p&gt;</description>
      <pubDate>Fri, 06 Jun 2025 18:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Measuring What Matters: The True Impact of Platform Teams】衡量重要的事情：平台团队的真正影响</title>
      <link>https://dzone.com/articles/measuring-the-true-impact-of-platform-teams</link>
      <description>【&lt;h2 dir=&#34;ltr&#34;&gt;The Growing Importance of Platform Teams&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Platform teams have emerged as a crucial component in modern software development, bridging the gap between development and operations, streamlining processes, and enhancing productivity. Before becoming essential in modern software development, platform teams were often viewed as optional support units, primarily focused on maintaining infrastructure and providing basic tools for developers.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Now, cloud adoption, growing software complexity, and increased market competition have highlighted the need for streamlined processes and improved &lt;a href=&#34;https://dzone.com/articles/redefining-developer-productivity&#34;&gt;developer productivity&lt;/a&gt;.&amp;nbsp;&lt;/p&gt;】&lt;h2 dir =“ ltr”&gt;平台团队的重要性&lt;/h2&gt;&#xA;&lt;p dir =“ ltr”&gt;平台团队已成为现代软件开发中的关键组成部分，弥合了开发和运营之间的差距，简化流程并提高生产率。在成为现代软件开发至关重要之前，平台团队通常被视为可选的支持单元，主要侧重于维护基础架构并为开发人员提供基本工具。 &lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;现在，采用云，软件的复杂性以及增加的市场竞争已经强调了对简化过程的需求，并改进了&lt;a href =“ https://dzone.com/articles/redefince/redefining-develinger-productivity”&gt;开发者的生产力&lt;/a&gt;。 &lt;/p&gt;</description>
      <pubDate>Fri, 06 Jun 2025 21:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Data Storage and Indexing in PostgreSQL: Practical Guide With Examples and Performance Insights】PostgreSQL中的数据存储和索引：实践指南，示例和绩效见解</title>
      <link>https://dzone.com/articles/data-storage-indexing-postgresql-guide-examples</link>
      <description>【&lt;p&gt;PostgreSQL employs sophisticated techniques for data storage and indexing to ensure efficient data management and fast query performance. This guide explores PostgreSQL&#39;s mechanisms, showcases practical examples, and includes simulated performance metrics to illustrate the impact of indexing.&lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;Data Storage in PostgreSQL&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;h3&gt;&lt;strong&gt;Table Structure and TOAST (The Oversized-Attribute Storage Technique)&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;Table Structure: &lt;a href=&#34;https://dzone.com/refcardz/essential-postgresql&#34;&gt;PostgreSQL&lt;/a&gt; stores table data in a format known as a heap. Each table&#39;s heap contains one or more pages (blocks), where each page is typically 8KB in size. This size can be altered when compiling PostgreSQL from source. PostgreSQL organizes table data in a heap structure with 8KB pages by &lt;strong&gt;default&lt;/strong&gt;. Rows exceeding a page size are handled using &lt;strong&gt;TOAST&lt;/strong&gt;, which compresses and stores oversized attributes in secondary storage.&lt;/p&gt;】&lt;p&gt; PostgreSQL采用复杂的技术来存储和索引，以确保有效的数据管理和快速查询性能。本指南探讨了GostgreSQL的机制，展示了实际示例，并包括模拟性能指标以说明索引的影响。&lt;/p&gt;&#xA;&lt;H2&gt; &lt;strong&gt; PostgreSQL中的数据存储&lt;/strong&gt; &lt;/h2&gt;&#xA;&lt;h3&gt; &lt;strong&gt;表结构和吐司（超大属性存储技术）&lt;/strong&gt; &lt;/h3&gt;&#xA;&lt;p&gt;表结构：&lt;a href =“ https://dzone.com/refcardz/esential-postgresql”&gt; PostgreSQL &lt;/a&gt;以一种称为堆的格式存储表数据。每个表的堆包含一个或多个页面（块），其中每个页面通常大小为8KB。从源来编译PostgreSQL时，可以更改此尺寸。 PostgreSQL通过&lt;strong&gt;默认&lt;/strong&gt;在堆结构中以8KB页面组织表数据。超过页面大小的行使用&lt;strong&gt;吐司&lt;/strong&gt;进行处理，该行压缩和存储次要存储中的超大属性。&lt;/p&gt;</description>
      <pubDate>Fri, 06 Jun 2025 15:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【How to Improve Software Architecture in a Cloud Environment】如何在云环境中改善软件体系结构</title>
      <link>https://dzone.com/articles/how-to-improve-software-architecture</link>
      <description>【&lt;p&gt;The need for software architecture today has grown more critical due to the increasing complexity, scale, and expectations of modern software systems. Applications today aren&#39;t simple. They involve multiple layers: frontend, backend, databases, integrations, microservices, and sometimes even &lt;a href=&#34;https://dzone.com/ai-ml&#34;&gt;AI/ML&lt;/a&gt; components. A strong architecture provides a roadmap for organizing this complexity into manageable pieces, making it easier to develop, maintain, and scale.&lt;/p&gt;&#xA;&lt;p&gt;This article explains how we can improve the existing architecture on a project to make it more robust and powerful for all of today’s challenges.&lt;/p&gt;】&lt;p&gt;由于现代软件系统的复杂性，规模和期望的增加，今天对软件体系结构的需求变得越来越重要。今天的应用并不简单。它们涉及多个层：前端，后端，数据库，集成，微服务，有时甚至&lt;a href =“ https://dzone.com/ai-ml”&gt; ai/ml &lt;/a&gt;组件。强大的建筑为将这种复杂性组织成可管理的部分提供了路线图，从而更容易开发，维护和扩展。&lt;/p&gt; &lt;/p&gt;&#xA;&lt;p&gt;本文解释了我们如何改善项目上的现有体系结构，以使其在当今的所有挑战中更加强大和强大。&lt;/p&gt;</description>
      <pubDate>Fri, 06 Jun 2025 19:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Finding Needles in Digital Haystacks: The Distributed Tracing Revolution】在数字干草堆中找到针头：分布式追踪革命</title>
      <link>https://dzone.com/articles/distributed-tracing-precise-debugging-microservices</link>
      <description>【&lt;p&gt;It&#39;s 3 AM. Your phone buzzes with an alert. A critical API is responding slowly, with angry customer tweets already appearing. Your architecture spans dozens of &lt;a href=&#34;https://dzone.com/microservices&#34;&gt;microservices&lt;/a&gt; across multiple cloud providers. Where do you even begin?&lt;/p&gt;&#xA;&lt;p&gt;Without distributed tracing, you&#39;re reduced to:&lt;/p&gt;】&lt;p&gt;是凌晨3点。您的手机嗡嗡作响。关键的API响应缓慢，愤怒的客户推文已经出现。您的体系结构跨越了数十个&lt;a href =“ https://dzone.com/microservices”&gt; Microservices &lt;/a&gt;在多个云提供商中。你甚至从哪里开始？&lt;/p&gt;&#xA;&lt;p&gt;没有分布式跟踪，您将缩小为：&lt;/p&gt;</description>
      <pubDate>Fri, 06 Jun 2025 17:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Evaluating the Evaluators: Building Reliable LLM-as-a-Judge Systems】评估评估人员：建立可靠的LLM-AS-A-A-Gudge系统</title>
      <link>https://dzone.com/articles/llm-as-a-judge-ai-evaluation</link>
      <description>【&lt;p&gt;The emergence of &lt;a href=&#34;https://dzone.com/articles/guide-to-developing-llms-pretraining&#34;&gt;Large Language Models (LLMs)&lt;/a&gt; as evaluators, termed “LLM-as-a-Judge,” represents a significant advancement in the field of artificial intelligence. Traditionally, evaluation tasks have relied on human judgment or automated metrics, each with distinct strengths and limitations, you must have seen this while working with traditional ML models. Now, LLMs offer a compelling alternative, combining the nuanced reasoning of human evaluators with the scalability and consistency of automated tools. However, building reliable LLM-as-a-Judge systems requires addressing key challenges related to reliability, biases, and scalability.&lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;Why LLM-as-a-Judge?&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Evaluation tasks often involve assessing the quality, relevance, or accuracy of outputs, such as grading academic submissions, reviewing creative content, or ranking search results. Historically, human evaluators have been the gold standard due to their contextual understanding and holistic reasoning. However, human evaluations are time-consuming, costly, and prone to inconsistencies.&lt;/p&gt;】&lt;p&gt; &lt;a href =“ https://dzone.com/articles/guide-to-developing-llms-pretraining”&gt;大语言模型（LLMS）&lt;/a&gt;作为评估者，称为“ LLM-AS-A-A-Judge”，代表了艺术人工知识领域的重大进步。传统上，评估任务依赖于人类的判断或自动指标，每个指标都有独特的优势和局限性，您必须在使用传统ML模型时看到了这一点。现在，LLMS提供了一种引人注目的替代方案，将人类评估者的细微推理与自动工具的可扩展性和一致性相结合。但是，构建可靠的LLM-AS-A-a-Gudge系统需要解决与可靠性，偏见和可扩展性有关的关键挑战。&lt;/p&gt;&#xA;&lt;H2&gt; &lt;strong&gt;为什么要llm-as-a-a-gudge？&lt;/strong&gt; &lt;/h2&gt;&#xA;&lt;p&gt;评估任务通常涉及评估产出的质量，相关性或准确性，例如对学术提交，审查创意内容或对搜索结果进行排名。从历史上看，由于人类评估者的上下文理解和整体推理，人类评估者一直是黄金标准。但是，人类评估既耗时，昂贵又容易出现不一致。&lt;/p&gt;</description>
      <pubDate>Fri, 06 Jun 2025 16:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>