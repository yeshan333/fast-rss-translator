<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【How and Why the Developer-First Approach Is Changing the Observability Landscape】开发者优先的方法如何以及为何改变可观察性格局</title>
      <link>https://dzone.com/articles/how-and-why-the-developer-first-approach-is-changing</link>
      <description>【&lt;p data-pm-slice=&#34;1 1 []&#34;&gt;Developers play a crucial role in modern companies. If we want our product to be successful, we need to have a developer-first approach and include observability from day one. Read on to understand why.&lt;/p&gt;&#xA;&lt;h2&gt;The World Has Changed&lt;/h2&gt;&#xA;&lt;p&gt;Many things have changed in the last decade. In our quest for greater scalability, resilience, and flexibility within the digital infrastructure of our organization, there has been a strategic pivot away from traditional monolithic application architectures towards embracing modern software engineering practices such as microservices architecture coupled with cloud-native applications. This shift acknowledges that in today&#39;s fast-paced technological landscape, building isolated and independently deployable services offers significant advantages over the legacy of intertwined codebases characteristic of monolithic systems.&lt;/p&gt;】&lt;p data-pm-slice=&#34;1 1 []&#34;&gt;开发人员在现代公司中发挥着至关重要的作用。如果我们希望我们的产品取得成功，我们需要采用开发人员优先的方法，并从第一天起就包括可观察性。请继续阅读以了解原因。&lt;/p&gt;&#xA;&lt;h2&gt;世界已经改变&lt;/h2&gt;&#xA;&lt;p&gt;过去十年里，很多事情都发生了变化。在我们组织的数字基础设施中寻求更大的可扩展性、弹性和灵活性的过程中，我们的战略重点是从传统的整体应用程序架构转向采用现代软件工程实践，例如微服务架构与云原生应用程序相结合。这种转变承认，在当今快节奏的技术环境中，构建独立且可独立部署的服务比单一系统的相互交织的代码库特征具有显着的优势。&lt;/p&gt;</description>
      <pubDate>Wed, 11 Dec 2024 22:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【DuckDB Optimization: A Developer&#39;s Guide to Better Performance】DuckDB 优化：提高性能的开发人员指南</title>
      <link>https://dzone.com/articles/developers-guide-to-duckdb-optimization</link>
      <description>【&lt;p&gt;If you are already using DuckDB, this guide will help you with some optimization techniques that can improve your application&#39;s performance. If you are new to DuckDB, don&#39;t fret — you&#39;ll still learn something new. I will share some of the practical tips that helped me optimize my applications. Let&#39;s dive in!&lt;/p&gt;&#xA;&lt;h2&gt;Why DuckDB?&lt;/h2&gt;&#xA;&lt;p&gt;Before we jump into optimization techniques, let&#39;s quickly discuss what makes DuckDB stand out. In the official &lt;a href=&#34;https://duckdb.org/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;DuckDB documentation&lt;/a&gt;, many benefits are listed. Give it a read.&lt;/p&gt;】&lt;p&gt;如果您已经在使用 DuckDB，本指南将帮助您了解一些可以提高应用程序性能的优化技术。如果您是 DuckDB 新手，请不要担心 - 您仍然会学到新东西。我将分享一些帮助我优化应用程序的实用技巧。让我们开始吧！&lt;/p&gt;&#xA;&lt;h2&gt;为什么选择 DuckDB？&lt;/h2&gt;&#xA;&lt;p&gt;在我们开始讨论优化技术之前，让我们快速讨论一下是什么让 DuckDB 脱颖而出。在官方&lt;a href=&#34;https://duckdb.org/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;DuckDB文档&lt;/a&gt;中，列出了许多好处。读一读。&lt;/p&gt;</description>
      <pubDate>Wed, 11 Dec 2024 18:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Optimizing MuleSoft Performance With HikariCP: A Complete Guide】使用 HikariCP 优化 MuleSoft 性能：完整指南</title>
      <link>https://dzone.com/articles/optimizing-mulesoft-performance-with-hikaricp</link>
      <description>【&lt;p&gt;MuleSoft is a powerful integration platform that often deals with high-throughput workloads that require robust database connection management. One solution that stands out in optimizing database interactions is HikariCP, a high-performance JDBC connection pool known for its speed and reliability. HikariCP is widely used in applications that require efficient connection management.&lt;/p&gt;&#xA;&lt;p&gt;In this article, we&#39;ll discuss the integration of HikariCP with &lt;a href=&#34;https://dzone.com/articles/what-is-mulesoft-features-certifications-amp-integ&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;MuleSoft&lt;/a&gt;, its benefits, and best practices for configuring it to maximize performance.&lt;/p&gt;】&lt;p&gt;MuleSoft 是一个功能强大的集成平台，通常处理需要强大数据库连接管理的高吞吐量工作负载。 HikariCP 是一种在优化数据库交互方面脱颖而出的解决方案，它是一种以其速度和可靠性而闻名的高性能 JDBC 连接池。 HikariCP 广泛应用于需要高效连接管理的应用中。&lt;/p&gt;&#xA;&lt;p&gt;在本文中，我们将讨论 HikariCP 与 &lt;a href=&#34;https://dzone.com/articles/what-is-mulesoft-features-certifications-amp-integ&#34; rel=&#34;noopener noreferrer 的集成“ target=&#34;_blank&#34;&gt;MuleSoft&lt;/a&gt;、它的优点以及配置它以最大限度地提高性能的最佳实践。&lt;/p&gt;</description>
      <pubDate>Wed, 11 Dec 2024 19:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Data Processing With Python: Choosing Between MPI and Spark】使用 Python 进行数据处理：在 MPI 和 Spark 之间进行选择</title>
      <link>https://dzone.com/articles/data-processing-with-python-mpi-vs-spark</link>
      <description>【&lt;p&gt;Message Passing Interface (MPI) and Apache Spark are two popular frameworks used for parallel and distributed computing, and while both offer ways to scale applications across multiple machines, they are designed to meet different needs.&lt;/p&gt;&#xA;&lt;p&gt;In this article, I will highlight key differences between MPI and Spark with the aim of helping you choose the right tool for your big data processing.&lt;/p&gt;】&lt;p&gt;消息传递接口 (MPI) 和 Apache Spark 是用于并行和分布式计算的两个流行框架，虽然两者都提供了跨多台机器扩展应用程序的方法，但它们旨在满足不同的需求。&lt;/p&gt;&#xA;&lt;p&gt;在本文中，我将重点介绍 MPI 和 Spark 之间的主要区别，旨在帮助您选择适合大数据处理的工具。&lt;/p&gt;</description>
      <pubDate>Wed, 11 Dec 2024 20:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【How to Test PUT Requests for API Testing With Playwright Java】如何使用 Playwright Java 测试 API 测试的 PUT 请求</title>
      <link>https://dzone.com/articles/testing-put-requests-for-api-testing-with-playwright-java</link>
      <description>【&lt;p&gt;API testing is a process that confirms that the API under test is working as expected. Generally, in Agile teams, due to shift left testing, API testing is performed earlier in the SDLC as it provides major benefits, like faster feedback and allowing the team to fix the bugs early in the phase.&lt;/p&gt;&#xA;&lt;p&gt;There are multiple tools and frameworks available these days that help perform API testing quickly. Playwright is one such test automation framework that has gained a lot of popularity. Backed by Microsoft, it supports web and API automation testing in multiple programming languages.&lt;/p&gt;】&lt;p&gt;API 测试是一个确认被测 API 是否按预期工作的过程。一般来说，在敏捷团队中，由于左移测试，API 测试在 SDLC 中较早执行，因为它提供了主要好处，例如更快的反馈并允许团队在阶段的早期修复错误。&lt;/p&gt;&#xA;&lt;p&gt;现在有多种工具和框架可以帮助快速执行 API 测试。 Playwright 就是这样一种非常受欢迎的测试自动化框架。在 Microsoft 的支持下，它支持多种编程语言的 Web 和 API 自动化测试。&lt;/p&gt;</description>
      <pubDate>Wed, 11 Dec 2024 21:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Solving Parallel Writing Issues in MuleSoft With Distributed Locking】使用分布式锁定解决 MuleSoft 中的并行写入问题</title>
      <link>https://dzone.com/articles/parallel-writing-issues-in-mulesoft-with-distributed-locking</link>
      <description>【&lt;p&gt;In MuleSoft applications running in &lt;strong&gt;multi-threaded&lt;/strong&gt; or &lt;strong&gt;multi-worker environments&lt;/strong&gt;, the risk of &lt;strong&gt;parallel writing issues&lt;/strong&gt; arises when multiple threads or workers attempt to access or update the same shared resource simultaneously. These issues can lead to data corruption, inconsistencies, or unexpected behavior, especially in distributed systems where Mule applications are deployed across multiple workers in a cluster.&lt;/p&gt;&#xA;&lt;h2&gt;The Problem: Parallel Writing&lt;/h2&gt;&#xA;&lt;p data-selectable-paragraph=&#34;&#34;&gt;Let me illustrate the problem first. I created a simple &lt;a href=&#34;https://github.com/nahidshahin/lock-poc/blob/main/counter/src/main/mule/counter.xml&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;counter application&lt;/a&gt; that supports &lt;code&gt;/inc&lt;/code&gt; and &lt;code&gt;/get&lt;/code&gt; operations. The &lt;code&gt;/inc&lt;/code&gt; operation increases the counter by 1, and the &lt;code&gt;/get&lt;/code&gt; operation returns the current value.&lt;/p&gt;】&lt;p&gt;在&lt;strong&gt;多线程&lt;/strong&gt;或&lt;strong&gt;多工作环境&lt;/strong&gt;中运行的 MuleSoft 应用程序中，当多个线程或工作人员时，会出现&lt;strong&gt;并行写入问题&lt;/strong&gt;的风险尝试同时访问或更新同一共享资源。这些问题可能会导致数据损坏、不一致或意外行为，尤其是在 Mule 应用程序跨集群中的多个工作进程部署的分布式系统中。&lt;/p&gt;&#xA;&lt;h2&gt;问题：并行写入&lt;/h2&gt;&#xA;&lt;p data-selectable-paragraph=&#34;&#34;&gt;让我先说明一下问题。我创建了一个简单的 &lt;a href=&#34;https://github.com/nahidshahin/lock-poc/blob/main/counter/src/main/mule/counter.xml&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34; &gt;支持&lt;code&gt;/inc&lt;/code&gt;和&lt;code&gt;/get&lt;/code&gt;操作的计数器应用程序&lt;/a&gt;。 &lt;code&gt;/inc&lt;/code&gt; 操作将计数器加 1，&lt;code&gt;/get&lt;/code&gt; 操作返回当前值。&lt;/p&gt;</description>
      <pubDate>Thu, 12 Dec 2024 20:30:00 +0000</pubDate>
    </item>
    <item>
      <title>【Laravel vs. Next.js: What&#39;s the Right Framework for Your Web App?】Laravel 与 Next.js：什么是适合您的 Web 应用程序的框架？</title>
      <link>https://dzone.com/articles/laravel-vs-nextjs-whats-the-right-framework-for-your-web-app</link>
      <description>【&lt;p data-pm-slice=&#34;1 1 []&#34;&gt;When it comes to building dynamic, scalable, and feature-rich web applications, selecting the right framework can make all the difference. Laravel, a PHP-based back-end framework, and Next.js, a React-based front-end framework, are two of the most popular choices among developers. While both are powerful in their domains, the question arises: which one is better for your project?&lt;/p&gt;&#xA;&lt;p&gt;In this blog, we’ll compare Laravel and Next.js, exploring their core features, strengths, weaknesses, and use cases. With detailed examples and code snippets, this article will help you decide which platform suits your needs.&lt;/p&gt;】&lt;p data-pm-slice=&#34;1 1 []&#34;&gt;在构建动态、可扩展且功能丰富的 Web 应用程序时，选择正确的框架可以发挥重要作用。 Laravel（基于 PHP 的后端框架）和 Next.js（基于 React 的前端框架）是开发人员中最流行的两个选择。虽然两者在各自的领域都很强大，但问题来了：哪一个更适合您的项目？&lt;/p&gt;&#xA;&lt;p&gt;在本博客中，我们将比较 Laravel 和 Next.js，探索它们的核心功能、优点、缺点和用例。本文通过详细的示例和代码片段，将帮助您确定哪个平台适合您的需求。&lt;/p&gt;</description>
      <pubDate>Thu, 12 Dec 2024 18:30:00 +0000</pubDate>
    </item>
    <item>
      <title>【Databricks 101: An Introductory Guide on Navigating and Optimizing This Data Powerhouse】Databricks 101：有关导航和优化此数据中心的入门指南</title>
      <link>https://dzone.com/articles/databricks-101-an-introductory-guide</link>
      <description>【&lt;p&gt;In an era where data reigns supreme, the tools and platforms that businesses utilize to harness and analyze their data can make or break their competitive edge. Among these, Databricks stands out as a powerhouse, yet navigating its complexities often feels like deciphering cryptic code. With businesses generating an average of 2.5 quintillion bytes of data daily, the need for a robust, efficient, and cost-effective data cloud has never been more critical.&lt;br&gt;&lt;br&gt;&lt;img style=&#34;width: 808px;&#34; class=&#34;fr-fic fr-dib lazyload&#34; data-image=&#34;true&#34; data-new=&#34;false&#34; data-sizeformatted=&#34;419.5 kB&#34; data-mimetype=&#34;image/png&#34; data-creationdate=&#34;1731443061654&#34; data-creationdateformatted=&#34;11/12/2024 08:24 PM&#34; data-type=&#34;temp&#34; data-url=&#34;https://dz2cdn1.dzone.com/storage/temp/18035878-hero.png&#34; data-modificationdate=&#34;null&#34; data-size=&#34;419463&#34; data-name=&#34;hero.png&#34; data-id=&#34;18035878&#34; data-src=&#34;https://dz2cdn1.dzone.com/storage/temp/18035878-hero.png&#34; alt=&#34;Dev relaxing at desk&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;In this post, we demystify Databricks, with a focus on Job Clusters. Readers will gain insight into the platform’s workspace, the pivotal role of workflows, and the nuanced world of compute resources including All-Purpose Compute (APC) clusters vs Jobs Compute clusters. We’ll also shed light on how to avoid costly errors and optimize resource allocation for data workloads.&amp;nbsp;&lt;/p&gt;】&lt;p&gt;在数据占主导地位的时代，企业用来利用和分析数据的工具和平台可以创造或破坏其竞争优势。其中，Databricks 作为一个强大的工具脱颖而出，但驾驭其复杂性通常感觉就像破译神秘的代码。随着企业每天平均生成 2.5 万亿字节的数据，对强大、高效且经济高效的数据云的需求变得前所未有的迫切。&lt;br&gt;&lt;br&gt;&lt;img style=&#34;width: 808px;&#34; class =“fr-fic fr-dib lazyload”data-image =“true”data-new =“false”data-sizeformatted =“419.5 kB”data-mimetype =“image / png”data-creationdate =“1731443061654”数据-creationdateformatted =“11/12/2024 08:24 PM”数据类型=“temp” data-url=&#34;https://dz2cdn1.dzone.com/storage/temp/18035878-hero.png&#34; data-modificationdate=&#34;null&#34; data-size=&#34;419463&#34; data-name=&#34;hero.png&#34; data- id =“18035878”data-src =“https://dz2cdn1.dzone.com/storage/temp/18035878-hero.png” alt=&#34;开发人员在办公桌前放松&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在这篇文章中，我们将揭开 Databricks 的神秘面纱，重点关注作业集群。读者将深入了解平台的工作区、工作流程的关键作用以及计算资源的微妙世界，包括通用计算 (APC) 集群与作业计算集群。我们还将阐明如何避免代价高昂的错误并优化数据工作负载的资源分配。 &lt;/p&gt;</description>
      <pubDate>Thu, 12 Dec 2024 14:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Mastering Seamless Single Sign-On: Design, Challenges, and Implementation】掌握无缝单点登录：设计、挑战和实施</title>
      <link>https://dzone.com/articles/mastering-seamless-single-sign-on</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Being a backend developer and having worked for years in the jungle of authentication and identity management, I can attest to the fact that implementing seamless SSO is often way more complex than it seems. I have witnessed how organizations struggle to integrate diverse applications, balance strict security requirements with user expectations, and maintain system performance across a heterogeneous enterprise environment.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;I want to share what I have learned about the design of &lt;a href=&#34;https://dzone.com/articles/identity-federation-and-sso-the-fundamentals&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;SSO systems&lt;/a&gt;, understand the main protocols like OAuth2 and SAML, address challenges in integration (legacy infrastructures are the most tricky,) and eventually provide an authentication ecosystem that would balance the needs of security mandates with user convenience.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;作为一名后端开发人员，在身份验证和身份管理的丛林中工作了多年，我可以证明实现无缝 SSO 通常比看起来复杂得多。我亲眼目睹了组织如何努力集成不同的应用程序、平衡严格的安全要求与用户期望以及在异构企业环境中维护系统性能。&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;我想分享我所学到的关于 &lt;a href=&#34;https://dzone.com/articles/identity-federation-and-sso-the-fundamentals&#34; rel=&#34; 设计的知识noopener noreferrer&#34; target=&#34;_blank&#34;&gt;SSO 系统&lt;/a&gt;，了解 OAuth2 和 SAML 等主要协议，解决集成挑战（遗留基础设施是最棘手的），并最终提供一个平衡需求的身份验证生态系统安全要求与用户方便。&lt;/p&gt;</description>
      <pubDate>Thu, 12 Dec 2024 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Idempotency and Reliability in Event-Driven Systems: A Practical Guide】事件驱动系统中的幂等性和可靠性：实用指南</title>
      <link>https://dzone.com/articles/idempotency-and-reliability-in-event-driven-systems</link>
      <description>【&lt;h2&gt;Introduction to Event-Driven Architectures and Idempotency&lt;/h2&gt;&#xA;&lt;h3&gt;The Rise of Event-Driven Architectures&lt;/h3&gt;&#xA;&lt;p&gt;Modern e-commerce systems often depend on &lt;a href=&#34;https://dzone.com/articles/event-driven-architecture-as-a-strategy&#34;&gt;event-driven architectures&lt;/a&gt; to ensure scalability and responsiveness. For instance, when a user places an order, events like &#34;Order Placed,&#34; &#34;Payment Processed,&#34; and &#34;Inventory Updated&#34; are triggered asynchronously. &amp;nbsp;&lt;/p&gt;&#xA;&lt;h3&gt;Why Idempotency Matters in Distributed Systems&lt;/h3&gt;&#xA;&lt;p&gt;In &lt;a href=&#34;https://dzone.com/articles/demystifying-distributed-systems-a-beginners-guide&#34;&gt;distributed systems&lt;/a&gt;, events can be duplicated or retried due to network failures, leading to problems like duplicate orders or incorrect inventory adjustments. Idempotency ensures that processing an event multiple times yields the same result as processing it once. &amp;nbsp;&lt;/p&gt;】&lt;h2&gt;事件驱动架构和幂等性简介&lt;/h2&gt;&#xA;&lt;h3&gt;事件驱动架构的兴起&lt;/h3&gt;&#xA;&lt;p&gt;现代电子商务系统通常依赖&lt;a href=&#34;https://dzone.com/articles/event-driven-architecture-as-a-strategy&#34;&gt;事件驱动架构&lt;/a&gt;来确保可扩展性和反应能力。例如，当用户下订单时，会异步触发“订单已下”、“付款已处理”和“库存已更新”等事件。  &lt;/p&gt;&#xA;&lt;h3&gt;为什么幂等性在分布式系统中很重要&lt;/h3&gt;&#xA;&lt;p&gt;在&lt;a href=&#34;https://dzone.com/articles/demystifying-distributed-systems-a-beginners-guide&#34;&gt;分布式系统&lt;/a&gt;中，事件可能会因网络故障而重复或重试，导致重复订单或不正确的库存调整等问题。幂等性确保多次处理事件会产生与处理一次相同的结果。  &lt;/p&gt;</description>
      <pubDate>Thu, 12 Dec 2024 12:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>