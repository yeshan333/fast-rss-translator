<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Summary of the AJAX Frameworks Comparison】AJAX 框架比较总结</title>
      <link>https://dzone.com/articles/summary-of-the-ajax-frameworks-comparison</link>
      <description>【&lt;p&gt;In previous weeks, I&#39;ve analyzed several libraries and frameworks that augment the client with AJAX capabilities.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA; &lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/augmenting-the-client-with-vuejs&#34;&gt;Vue.js&lt;/a&gt;&lt;/li&gt;&#xA; &lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/augmenting-the-client-with-alpinejs&#34;&gt;Alpine.js&lt;/a&gt;&lt;/li&gt;&#xA; &lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/augmenting-the-client-with-htmx&#34;&gt;HTMX&lt;/a&gt;&lt;/li&gt;&#xA; &lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/vaadin-the-battery-included-server-side-ajax-frame&#34;&gt;Vaadin&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;In this post, I&#39;ll compare them across several axes.&lt;/p&gt;】&lt;p&gt;在前几周，我分析了几个通过 AJAX 功能增强客户端的库和框架。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA; &lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/augmenting-the-client-with-vuejs&#34;&gt;Vue.js&lt;/a&gt;&lt;/li&gt;&#xA; &lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/augmenting-the-client-with-alpinejs&#34;&gt;Alpine.js&lt;/a&gt;&lt;/li&gt;&#xA; &lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/augmenting-the-client-with-htmx&#34;&gt;HTMX&lt;/a&gt;&lt;/li&gt;&#xA; &lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/vaadin-the-battery-included-server-side-ajax-frame&#34;&gt;Vaadin&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;在这篇文章中，我将在多个轴上对它们进行比较。&lt;/p&gt;</description>
      <pubDate>Thu, 24 Oct 2024 18:00:04 +0000</pubDate>
    </item>
    <item>
      <title>【Good Refactoring vs Bad Refactoring】好的重构与坏的重构</title>
      <link>https://dzone.com/articles/good-refactoring-vs-bad-refactoring</link>
      <description>【&lt;p&gt;I&#39;ve hired a lot of developers over the years. More than a few of them have come in with a strong belief that our code needed heavy refactoring. But here&#39;s the thing: in almost every case, their newly refactored code was found by the other developers to be harder to understand and maintain. It also was generally slower and buggier too.&lt;/p&gt;&#xA;&lt;p&gt;Now, don&#39;t get me wrong. Refactoring isn&#39;t inherently bad. It&#39;s a crucial part of keeping a codebase healthy. The problem is that bad refactoring is, well, bad. And it&#39;s surprisingly easy to fall into the trap of making things worse while trying to make them better.&lt;/p&gt;】&lt;p&gt;这些年来我雇佣了很多开发人员。他们中的不少人都坚信我们的代码需要大量重构。但事情是这样的：几乎在所有情况下，其他开发人员都发现他们新重构的代码更难理解和维护。它通常也更慢且错误更多。&lt;/p&gt;&#xA;&lt;p&gt;现在，请不要误会我的意思。重构本质上并不是坏事。这是保持代码库健康的关键部分。问题是糟糕的重构是非常糟糕的。而且在试图让事情变得更好的同时，很容易陷入让事情变得更糟的陷阱。&lt;/p&gt;</description>
      <pubDate>Wed, 23 Oct 2024 21:00:05 +0000</pubDate>
    </item>
    <item>
      <title>【Ending Microservices Chaos: How Architecture Governance Keeps Your Microservices on Track】结束微服务混乱：架构治理如何让您的微服务步入正轨</title>
      <link>https://dzone.com/articles/ending-microservices-chaos-architecture-governance</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;A &lt;a href=&#34;https://dzone.com/articles/microservice-architecture-2&#34;&gt;microservices architecture&lt;/a&gt; is the gold standard for building scalable web applications. Gartner estimates that &lt;a href=&#34;https://www.gartner.com/peer-community/oneminuteinsights/microservices-architecture-have-engineering-organizations-found-success-u6b&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;74% of organizations use microservices for their web applications&lt;/a&gt;, with another 23% planning to use them soon.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;If you’re an IT leader, architect, or developer, you might have experienced the faster deployments, better fault isolation, and easier scaling that come with microservices.&amp;nbsp;&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://dzone.com/articles/microservice-architecture-2&#34;&gt;微服务架构&lt;/a&gt;是构建可扩展 Web 应用程序的黄金标准。 Gartner 估计 &lt;a href=&#34;https://www.gartner.com/peer-community/onemillioninsights/microservices-architecture-have-engineering-organizations-found-success-u6b&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank &#34;&gt;74% 的组织在其 Web 应用程序中使用微服务&lt;/a&gt;，另外 23% 的组织计划很快使用它们。 &lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;如果您是 IT 领导者、架构师或开发人员，您可能已经体验过微服务带来的更快的部署、更好的故障隔离和更轻松的扩展。 &lt;/p&gt;</description>
      <pubDate>Thu, 24 Oct 2024 12:00:09 +0000</pubDate>
    </item>
    <item>
      <title>【Right-Sizing GPU and CPU Resources For Training and Inferencing Using Kubernetes】使用 Kubernetes 调整 GPU 和 CPU 资源以进行训练和推理</title>
      <link>https://dzone.com/articles/right-sizing-gpu-and-cpu-resources-using-kubernetes</link>
      <description>【&lt;p&gt;The rapid rise of AI services has created a massive demand for computing resources, making efficient management of those resources a critical challenge. While running AI workloads with Kubernetes has come a long way, optimizing scheduling based on dynamic demand continues to be an area for improvement. Many organizations face constraints related to the cost &lt;em&gt;and&lt;/em&gt; availability of GPU clusters worldwide and often rely on the same compute clusters for inference workloads and continuous model training and fine-tuning. &amp;nbsp;&lt;/p&gt;&#xA;&lt;h2&gt;&amp;nbsp;AI Model Training and Model Inferencing in Kubernetes&lt;/h2&gt;&#xA;&lt;p&gt;Training typically requires far more computational power than inferencing. On the other hand, inferencing is far more frequent than training as it is used to make predictions repeatedly across many applications. Let’s explore how we can harness the best of what the cloud has to offer with advances in Kubernetes to optimize resource allocation by prioritizing workloads dynamically and efficiently based on need.&amp;nbsp;&lt;/p&gt;】&lt;p&gt;人工智能服务的快速崛起对计算资源产生了巨大的需求，使这些资源的高效管理成为一项严峻的挑战。虽然使用 Kubernetes 运行人工智能工作负载已经取得了长足的进步，但根据动态需求优化调度仍然是一个需要改进的领域。许多组织面临与全球 GPU 集群的成本和可用性相关的限制，并且通常依赖相同的计算集群来进行推理工作负载以及持续的模型训练和微调。  &lt;/p&gt;&#xA;&lt;h2&gt; Kubernetes 中的 AI 模型训练和模型推理&lt;/h2&gt;&#xA;&lt;p&gt;训练通常需要比推理更多的计算能力。另一方面，推理比训练更频繁，因为它用于在许多应用程序中重复进行预测。让我们探索如何利用云所提供的最佳功能以及 Kubernetes 的进步，通过根据需要动态、高效地确定工作负载的优先级来优化资源分配。 &lt;/p&gt;</description>
      <pubDate>Fri, 25 Oct 2024 11:00:03 +0000</pubDate>
    </item>
    <item>
      <title>【Accelerating Connection Handshakes in Trusted Network Environments】加速可信网络环境中的连接握手</title>
      <link>https://dzone.com/articles/accelerating-connection-handshakes</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;In this article, I aim to discuss modern approaches used to reduce the time required to establish a data transmission channel between two nodes. I will be examining both plain TCP and TLS-over-TCP.&amp;nbsp;&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;What Is a Handshake?&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;First, let’s define what a handshake is, and for that, an illustration of the TCP handshake serves very well:&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;在本文中，我的目标是讨论用于减少在两个节点之间建立数据传输通道所需时间的现代方法。我将研究普通 TCP 和 TLS-over-TCP。 &lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;什么是握手？&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;首先，让我们定义什么是握手，为此，TCP 握手的说明非常有用：&lt;/p&gt;</description>
      <pubDate>Thu, 24 Oct 2024 14:15:06 +0000</pubDate>
    </item>
    <item>
      <title>【12 Expert Tips for Secure Cloud Deployments】安全云部署的 12 条专家提示</title>
      <link>https://dzone.com/articles/12-expert-tips-for-secure-cloud-deployments</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;According to the&lt;a href=&#34;https://cpl.thalesgroup.com/cloud-security-research&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt; Thales 2024 Cloud Security Study&lt;/a&gt;, 31% of cyberattacks prioritize SaaS applications, followed closely by 30% targeting cloud storage and 26% aimed at cloud management infrastructure. Cloud resources have become the prime targets for hackers — no surprise, considering the vast amount of data companies are now storing there. And these aren’t just small-scale incidents. In June 2023,&lt;a href=&#34;https://global.toyota/en/newsroom/corporate/39241625.html&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt; Toyota Motor Corporation issued an apology&lt;/a&gt; for a major data breach due to a cloud misconfiguration, potentially exposing the information of millions of customers.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Whether you&#39;re managing sensitive customer data or operating critical business applications, securing your cloud deployment isn’t a luxury — it’s essential. This guide offers 12 &lt;a href=&#34;https://dzone.com/articles/understanding-the-cloud-security-landscape&#34;&gt;cloud security&lt;/a&gt; tips for AWS, Google Cloud, and Azure to safeguard your environment.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;根据&lt;a href=&#34;https://cpl.thalesgroup.com/cloud-security-research&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;泰雷兹 2024 年云安全研究&lt; /a&gt;，31% 的网络攻击优先考虑 SaaS 应用程序，紧随其后的是 30% 针对云存储的网络攻击，26% 针对云管理基础设施的网络攻击。云资源已成为黑客的主要目标——考虑到公司现在存储的大量数据，这并不奇怪。这些不仅仅是小规模事件。 2023 年 6 月，&lt;a href=&#34;https://global.toyota/en/newsroom/corporate/39241625.html&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;丰田汽车公司就以下问题发表道歉&lt;/a&gt;：云配置错误导致重大数据泄露，可能会泄露数百万客户的信息。&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;无论您是管理敏感的客户数据还是运营关键业务应用程序，保护云部署的安全都不是一件奢侈的事情，而是至关重要的。本指南为 AWS、Google Cloud 和 Azure 提供了 12 个&lt;a href=&#34;https://dzone.com/articles/understanding-the-cloud-security-landscape&#34;&gt;云安全&lt;/a&gt;提示，以保护您的环境。 &lt;/p&gt;</description>
      <pubDate>Fri, 25 Oct 2024 19:00:02 +0000</pubDate>
    </item>
    <item>
      <title>【High-Speed Real-Time Streaming Data Processing】高速实时流数据处理</title>
      <link>https://dzone.com/articles/high-speed-real-time-streaming-data-processing</link>
      <description>【&lt;p style=&#34;text-align: left;&#34;&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;From&amp;nbsp;&lt;/span&gt;&lt;a href=&#34;https://dzone.com/articles/data-ingestion-the-definitive-guide&#34;&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;data ingestion&lt;/span&gt;&lt;/a&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;&amp;nbsp;to reporting, the primary goal is to convert data into actionable information. Online data is growing at a much faster rate than data processing speeds. For businesses to stay competitive, data must be readily available for making informed decisions as early as possible. Live data streaming software is becoming a vital part of data infrastructures to get data to processing systems as early as possible. While different streaming software are available, it is crucial to understand the domain context and available infrastructure.&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p style=&#34;text-align: left;&#34;&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;Each business use case is unique and should be treated with white-glove treatment. The critical thing to remember is that cheap, fast, and good will never make a feasible combination. The affordable solution may be quick but not good; a fast solution may be good but not cheap, and so on. An ideal example of this concept would be real-time streaming data processing.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;】&lt;p style=&#34;text-align: left;&#34;&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;来自&lt;/span&gt;&lt;a href=&#34;https://dzone.com/articles/data-ingestion-the -definitive-guide&#34;&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;数据提取&lt;/span&gt;&lt;/a&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt; 到报告，主要目标是转换数据转化为可操作的信息。在线数据的增长速度远远快于数据处理速度。为了让企业保持竞争力，必须随时提供数据，以便尽早做出明智的决策。实时数据流软件正在成为数据基础设施的重要组成部分，以尽早将数据传输到处理系统。虽然可以使用不同的流媒体软件，但了解领域上下文和可用的基础设施至关重要。&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p style=&#34;text-align: left;&#34;&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;每个业务用例都是独一无二的，应该谨慎对待。需要记住的关键一点是，廉价、快速和优质永远不会成为可行的组合。经济实惠的解决方案可能会很快，但效果并不好；快速的解决方案可能很好，但并不便宜，等等。这个概念的一个理想例子是实时流数据处理。 &lt;/span&gt;&lt;/p&gt;</description>
      <pubDate>Thu, 24 Oct 2024 16:00:08 +0000</pubDate>
    </item>
    <item>
      <title>【Understanding the Differences Between Repository and Data Access Object (DAO)】了解存储库和数据访问对象 (DAO) 之间的差异</title>
      <link>https://dzone.com/articles/differences-between-repository-and-dao</link>
      <description>【&lt;p data-line-end=&#34;3&#34; data-line-start=&#34;2&#34;&gt;Repository and Data Access Object (DAO) play crucial roles in software development and data handling. However, their purposes and contexts differ, especially when we consider how they relate to the business logic of an application. Let’s explore the key differences between these concepts, where they originate, and when you should choose one.&lt;/p&gt;&#xA;&lt;h2 data-line-end=&#34;3&#34; data-line-start=&#34;2&#34;&gt;About Repository and Data Access Object (DAO) Patterns&lt;/h2&gt;&#xA;&lt;p data-line-end=&#34;6&#34; data-line-start=&#34;5&#34;&gt;The &lt;strong&gt;Repository&lt;/strong&gt; pattern originates from &lt;a href=&#34;https://dzone.com/refcardz/getting-started-domain-driven&#34;&gt;Domain-Driven Design (DDD)&lt;/a&gt;, as described by Eric Evans in his book, &#34;&lt;em&gt;Domain-Driven Design: Tackling Complexity in the Heart of Software&lt;/em&gt;.&#34; Repositories are not just about managing data; they encapsulate business logic, ensuring that operations adhere to the Ubiquitous Language of the domain.&lt;/p&gt;】&lt;p data-line-end=&#34;3&#34; data-line-start=&#34;2&#34;&gt;存储库和数据访问对象 (DAO) 在软件开发和数据处理中发挥着至关重要的作用。然而，它们的目的和上下文不同，特别是当我们考虑它们与应用程序的业务逻辑如何相关时。让我们探讨一下这些概念之间的主要区别、它们的起源以及何时应该选择一个。&lt;/p&gt;&#xA;&lt;h2 data-line-end=&#34;3&#34; data-line-start=&#34;2&#34;&gt;关于存储库和数据访问对象 (DAO) 模式&lt;/h2&gt;&#xA;&lt;p data-line-end=&#34;6&#34; data-line-start=&#34;5&#34;&gt;&lt;strong&gt;存储库&lt;/strong&gt;模式源自&lt;a href=&#34;https://dzone.com/refcardz/getting- start-domain-driven&#34;&gt;领域驱动设计 (DDD)&lt;/a&gt;，如 Eric Evans 在他的著作“领域驱动设计：解决软件核心的复杂性&lt;/em&gt;”中所述。存储库不仅仅用于管理数据；还用于管理数据。它们封装业务逻辑，确保操作遵循域的通用语言。&lt;/p&gt;</description>
      <pubDate>Thu, 24 Oct 2024 20:00:03 +0000</pubDate>
    </item>
    <item>
      <title>【Exploring Foundations of Large Language Models (LLMs): Tokenization and Embeddings】探索大型语言模型 (LLM) 的基础：标记化和嵌入</title>
      <link>https://dzone.com/articles/llms-tokenization-and-embeddings</link>
      <description>【&lt;p&gt;Have you ever wondered how various &lt;a href=&#34;https://dzone.com/articles/introduction-generative-ai-empowering-enterprises&#34;&gt;Gen AI&lt;/a&gt; tools like ChatGPT or Bard efficiently answer all our complicated questions? What goes behind the scenes to process our question and generate a human-like response with the size of data in magnitudes? Let’s dive deep.&lt;/p&gt;&#xA;&lt;p&gt;In the era of Generative AI, &lt;a href=&#34;https://dzone.com/articles/transforming-translation-the-power-of-context-in-n-1&#34;&gt;natural language processing&lt;/a&gt; plays a crucial role in how machines understand and generate human language. The applications for this cut through various implementations like smart chatbots, translation, sentimental analysis, developing knowledge basis, and many more. The central theme in implementing this Gen AI application is to store the data from various sources and query those to generate human language responses. But how does this work internally? In this article, we will explore concepts of tokenization and embeddings, which play a vital role in understanding human queries and converting knowledge bases to generate responses.&lt;/p&gt;】&lt;p&gt;您有没有想过ChatGPT或Bard等各种&lt;a href=&#34;https://dzone.com/articles/introduction-generative-ai-empowering-enterprises&#34;&gt;Gen AI&lt;/a&gt;工具如何有效地回答我们所有的问题复杂的问题？幕后是什么来处理我们的问题并生成具有数量级数据大小的类似人类的响应？让我们深入探讨一下。&lt;/p&gt;&#xA;&lt;p&gt;在生成式 AI 时代，&lt;a href=&#34;https://dzone.com/articles/transforming-translation-the-power-of-context-in-n-1&#34;&gt;自然语言处理&lt;/a &gt; 在机器如何理解和生成人类语言方面发挥着至关重要的作用。此应用程序涉及各种实现，例如智能聊天机器人、翻译、情感分析、开发知识基础等等。实现这一 Gen AI 应用程序的中心主题是存储来自各种来源的数据并查询这些数据以生成人类语言响应。但这在内部是如何运作的呢？在本文中，我们将探讨标记化和嵌入的概念，它们在理解人类查询和转换知识库以生成响应方面发挥着至关重要的作用。&lt;/p&gt;</description>
      <pubDate>Fri, 25 Oct 2024 16:00:02 +0000</pubDate>
    </item>
    <item>
      <title>【Reactive Kafka With Spring Boot】带有 Spring Boot 的反应式 Kafka</title>
      <link>https://dzone.com/articles/reactive-kafka-with-spring-boot</link>
      <description>【&lt;p&gt;Event-driven architectures are at the core of modern, scalable systems. &lt;strong&gt;Reactive Kafka&lt;/strong&gt;, when combined with &lt;a href=&#34;https://dzone.com/articles/spring-boot-nice-amp-easy-video-8&#34;&gt;&lt;strong&gt;Spring Boot&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://dzone.com/articles/embracing-reactive-programming-with-spring-webflux&#34;&gt;&lt;strong&gt;WebFlux&lt;/strong&gt;&lt;/a&gt;, offers a powerful approach to building non-blocking, high-throughput services. In this article, we’ll focus on building generic, easily configurable consumers and producers, managing dead letter topics (DLT), and writing integration tests with Testcontainers.&lt;/p&gt;&#xA;&lt;p&gt;To demonstrate these principles, I’ve created a microservice, &lt;strong&gt;bootiful-reactive-kafka&lt;/strong&gt;, which processes user-related events from an external system. While this microservice is simple, it illustrates key concepts that you can apply to more complex real-world use cases.&amp;nbsp;&lt;/p&gt;】&lt;p&gt;事件驱动架构是现代可扩展系统的核心。 &lt;strong&gt;Reactive Kafka&lt;/strong&gt;，与&lt;a href=&#34;https://dzone.com/articles/spring-boot-nice-amp-easy-video-8&#34;&gt;&lt;strong&gt;Spring Boot&lt;/strong&gt;结合使用strong&gt;&lt;/a&gt; 和 &lt;a href=&#34;https://dzone.com/articles/embracing-reactive-programming-with-spring-webflux&#34;&gt;&lt;strong&gt;WebFlux&lt;/strong&gt;&lt;/a&gt; 提供了构建无阻塞、高吞吐量服务的强大方法。在本文中，我们将重点关注构建通用的、易于配置的消费者和生产者、管理死信主题 (DLT) 以及使用测试容器编写集成测试。&lt;/p&gt;&#xA;&lt;p&gt;为了演示这些原则，我创建了一个微服务 &lt;strong&gt;bootiful-reactive-kafka&lt;/strong&gt;，它处理来自外部系统的用户相关事件。虽然此微服务很简单，但它说明了可以应用于更复杂的实际用例的关键概念。 &lt;/p&gt;</description>
      <pubDate>Fri, 25 Oct 2024 13:30:03 +0000</pubDate>
    </item>
  </channel>
</rss>