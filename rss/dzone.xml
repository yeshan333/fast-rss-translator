<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Streaming Data Joins: A Deep Dive Into Real-Time Data Enrichment】流数据连接：深入研究实时数据丰富</title>
      <link>https://dzone.com/articles/streaming-data-joins-a-deep-dive-into-real-time-da</link>
      <description>【&lt;h2&gt;Introduction to Data Joins&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;In the world of data, a &#34;join&#34; is like merging information from different sources into a unified result. To do this, it needs a condition – typically a shared column – to link the sources together. Think of it as finding common ground between different datasets.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;In SQL, these sources are referred to as &#34;tables,&#34; and the result of using a &lt;code&gt;JOIN&lt;/code&gt; clause is a new table. Fundamentally, traditional (batch) SQL joins operate on static datasets, where you have prior knowledge of the number of rows and the content within the source tables before executing the &lt;code&gt;Join&lt;/code&gt;. These join operations are typically simple to implement and computationally efficient. However, the dynamic and unbounded nature of streaming data presents unique challenges for performing joins in near-real-time scenarios.&lt;/p&gt;】&lt;h2&gt;数据连接简介&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;在数据世界中，“连接”就像将不同来源的信息合并为统一的结果。为此，它需要一个条件（通常是共享列）将源链接在一起。将其视为寻找不同数据集之间的共同点。&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;在 SQL 中，这些源称为“表”，使用 &lt;code&gt;JOIN&lt;/code&gt; 子句的结果是一个新表。从根本上讲，传统（批量）SQL 连接对静态数据集进行操作，在执行连接之前，您事先了解源表中的行数和内容。这些连接操作通常易于实现并且计算效率高。然而，流数据的动态和无界本质给在近实时场景中执行连接带来了独特的挑战。&lt;/p&gt;</description>
      <pubDate>Mon, 05 Aug 2024 15:00:01 +0000</pubDate>
    </item>
    <item>
      <title>【How To Setup OAuth JWT in the Salesforce Connector】如何在 Salesforce 连接器中设置 OAuth JWT</title>
      <link>https://dzone.com/articles/how-to-setup-oauth-jwt-in-the-salesforce-connector</link>
      <description>【&lt;p data-original-attrs=&#34;{&amp;quot;style&amp;quot;:&amp;quot;&amp;quot;}&#34; dir=&#34;ltr&#34;&gt;In this post, we&#39;ll explain all the steps required to connect a Mule application to Salesforce using the Salesforce connector with the OAuth JWT flow. You can also create your own certificate for the OAuth JWT flow with Salesforce or with OpenSSL (signed by a CA or self-signed). Both options are very well explained in the video at the conclusion of the article from Stefano Bernardini, MuleSoft Ambassador.&lt;/p&gt;&#xA;&lt;p data-original-attrs=&#34;{&amp;quot;style&amp;quot;:&amp;quot;&amp;quot;}&#34; dir=&#34;ltr&#34;&gt;&lt;img data-new=&#34;false&#34; data-mimetype=&#34;image/png&#34; data-creationdateformatted=&#34;08/01/2024 07:38 PM&#34; data-url=&#34;https://dz2cdn1.dzone.com/storage/temp/17828660-1722541086386.png&#34; data-size=&#34;657538&#34; data-id=&#34;17828660&#34; class=&#34;fr-fic fr-dib lazyload&#34; data-image=&#34;true&#34; data-sizeformatted=&#34;657.5 kB&#34; data-creationdate=&#34;1722541087307&#34; data-type=&#34;temp&#34; data-modificationdate=&#34;null&#34; data-name=&#34;1722541086386.png&#34; alt=&#34;Salesforce and MuleSoft logos&#34; data-src=&#34;https://dz2cdn1.dzone.com/storage/temp/17828660-1722541086386.png&#34;&gt;In this post, we’ll be using a self-signed certificate created by Salesforce but, keep in mind, that for production environments, a certificate issued by a Trusted Certificate Authority is always recommended.&lt;/p&gt;】&lt;p data-original-attrs=&#34;{&#34;style&#34;:&#34;&#34;}&#34; dir=&#34;ltr&#34;&gt;在这篇文章中，我们将解释使用 Salesforce 连接器和 OAuth 将 Mule 应用程序连接到 Salesforce 所需的所有步骤智威汤逊流。您还可以使用 Salesforce 或 OpenSSL（由 CA 签名或自签名）为 OAuth JWT 流创建自己的证书。 MuleSoft 大使 Stefano Bernardini 在文章结尾处的视频中对这两个选项进行了很好的解释。&lt;/p&gt;&#xA;&lt;p data-original-attrs=&#34;{&#34;style&#34;:&#34;&#34;}&#34; dir=&#34;ltr&#34;&gt;&lt;img data-new=&#34;false&#34; data-mimetype=&#34;image/png&#34; data-creationdateformatted=&#34;08/01 /2024 07:38 PM&#34; data-url=&#34;https://dz2cdn1.dzone.com/storage/temp/17828660-1722541086386.png&#34; data-size=&#34;657538&#34; data-id=&#34;17828660&#34; class=&#34;fr -fic fr-dib 延迟加载&#34; data-image=&#34;true&#34; data-sizeformatted=&#34;657.5 kB&#34; data-creationdate=&#34;1722541087307&#34; data-type=&#34;temp&#34; data-modificationdate=&#34;null&#34; data-name=&#34;1722541086386. png&#34; alt=&#34;Salesforce 和 MuleSoft 徽标&#34; data-src=&#34;https://dz2cdn1.dzone.com/storage/temp/17828660-1722541086386.png&#34;&gt;在本文中，我们将使用自签名证书由 Salesforce 创建，但请记住，对于生产环境，始终建议使用受信任的证书颁发机构颁发的证书。&lt;/p&gt;</description>
      <pubDate>Mon, 05 Aug 2024 16:00:02 +0000</pubDate>
    </item>
    <item>
      <title>【Scaling Prometheus With Thanos】使用 Thanos 扩展 Prometheus</title>
      <link>https://dzone.com/articles/scaling-prometheus-with-thanos</link>
      <description>【&lt;p&gt;Observability is a crucial pillar of any application, and monitoring is an essential component of it. Having a well-suited, robust monitoring system is crucial. It can help you detect issues in your application and provide insights once it is deployed. It aids in performance, resource management, and observability. Most importantly, it can help you save costs by identifying issues in your infrastructure. One of the most popular tools in monitoring is &lt;a href=&#34;https://prometheus.io/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Prometheus&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;It sets a de facto standard with its straightforward and powerful query language PromQL, but it has limitations that make it unsuitable for long-term monitoring. Querying historical metrics in Prometheus is challenging because it is not designed for this purpose. Obtaining a global metrics view in Prometheus can be complex. While Prometheus can scale horizontally with ease on a small scale, it faces challenges when dealing with hundreds of clusters. In such scenarios, Prometheus requires significant disk space to store metrics, typically retaining data for around 15 days. For instance, generating 1TB of metrics per week can lead to increased costs when scaling horizontally, especially with the Horizontal Pod Autoscaler (HPA). Additionally, querying data beyond 15 days without downsampling further escalates these costs.&lt;/p&gt;】&lt;p&gt;可观察性是任何应用程序的重要支柱，而监控是其中的重要组成部分。拥有一个合适、强大的监控系统至关重要。它可以帮助您检测应用程序中的问题并在部署后提供见解。它有助于提高性能、资源管理和可观察性。最重要的是，它可以通过识别基础设施中的问题来帮助您节省成本。监控中最受欢迎的工具之一是 &lt;a href=&#34;https://prometheus.io/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Prometheus&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;它以其简单而强大的查询语言 PromQL 设定了事实上的标准，但它有一些局限性，使其不适合长期监控。在 Prometheus 中查询历史指标具有挑战性，因为它不是为此目的而设计的。在 Prometheus 中获取全局指标视图可能很复杂。虽然 Prometheus 可以轻松地进行小规模水平扩展，但在处理数百个集群时面临着挑战。在这种情况下，Prometheus 需要大量磁盘空间来存储指标，通常将数据保留 15 天左右。例如，每周生成 1TB 的指标可能会导致水平扩展时成本增加，尤其是使用 Horizo​​ntal Pod Autoscaler (HPA)。此外，查询超过 15 天的数据而不进行下采样会进一步增加这些成本。&lt;/p&gt;</description>
      <pubDate>Mon, 05 Aug 2024 19:00:01 +0000</pubDate>
    </item>
    <item>
      <title>【Buh-Bye, Webpack and Node.js; Hello, Rails and Import Maps】再见，Webpack 和 Node.js；你好，Rails 和导入地图</title>
      <link>https://dzone.com/articles/buh-bye-webpack-and-nodejs-hello-rails-and-import-maps</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;I enjoy spending time learning new technologies. However, often the biggest drawback of working with new technologies is the inevitable pain points that come with early adoption. I saw this quite a bit when I was getting up to speed with Web3 in “&lt;a href=&#34;https://dzone.com/articles/moving-from-full-stack-developer-to-web3-pioneer&#34;&gt;Moving From Full-Stack Developer To Web3 Pioneer&lt;/a&gt;.”&lt;/p&gt;&#xA;&lt;p&gt;As software engineers, we’re accustomed to accepting these early-adopter challenges when giving new tech a test drive. What works best for me is to keep a running list of notes and commands I’ve executed, since seemingly illogical steps don’t remain in my memory.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;我喜欢花时间学习新技术。然而，使用新技术的最大缺点往往是早期采用时不可避免的痛点。当我在“&lt;a href=&#34;https://dzone.com/articles/moving-from-full-stack-developer-to-web3-pioneer&#34;&gt;Moving”中快速了解 Web3 时，我经常看到这种情况从全栈开发人员到 Web3 先锋&lt;/a&gt;。”&lt;/p&gt;&#xA;&lt;p&gt;作为软件工程师，我们在试用新技术时习惯于接受这些早期采用者的挑战。对我来说最有效的方法是保留我执行过的注释和命令的运行列表，因为看似不合逻辑的步骤不会保留在我的记忆中。&lt;/p&gt;</description>
      <pubDate>Mon, 05 Aug 2024 21:00:02 +0000</pubDate>
    </item>
    <item>
      <title>【Building an IoT-based Waste Management System: A Software Architect&#39;s Guide】构建基于物联网的废物管理系统：软件架构师指南</title>
      <link>https://dzone.com/articles/building-an-iot-based-waste-management-system</link>
      <description>【&lt;p&gt;The Internet of Things is a network of physical devices. These devices can be anything, like smart bins or home appliances. They have sensors that collect information. They also have software that processes this information. These devices are connected to the internet. This allows them to share the data they collect. For example, a smart bin can tell how full it is and send this information to a cloud platform.&lt;/p&gt;&#xA;&lt;p&gt;We can use IoT to manage waste better. &lt;a href=&#34;https://dzone.com/articles/introduction-to-iot-sensors&#34;&gt;Sensors&lt;/a&gt; can gather data about waste levels. This helps in organizing waste collection more efficiently.&lt;/p&gt;】&lt;p&gt;物联网是物理设备的网络。这些设备可以是任何东西，例如智能垃圾箱或家用电器。他们有收集信息的传感器。他们还有处理这些信息的软件。这些设备连接到互联网。这使他们能够共享他们收集的数据。例如，智能垃圾箱可以知道它有多满，并将此信息发送到云平台。&lt;/p&gt;&#xA;&lt;p&gt;我们可以利用物联网更好地管理废物。 &lt;a href=&#34;https://dzone.com/articles/introduction-to-iot-sensors&#34;&gt;传感器&lt;/a&gt;可以收集有关废物水平的数据。这有助于更有效地组织废物收集。&lt;/p&gt;</description>
      <pubDate>Mon, 05 Aug 2024 17:00:01 +0000</pubDate>
    </item>
    <item>
      <title>【Free Tier API With Apache APISIX】带有 Apache APISIX 的免费层 API</title>
      <link>https://dzone.com/articles/free-tier-api-with-apache-apisix</link>
      <description>【&lt;p&gt;Lots of service providers offer a free tier of their service. The idea is to let you kick their service&#39;s tires freely. If you need to go above the free tier at any point, you&#39;ll likely stay on the service and pay. In this day and age, most services are online and accessible via an API. Today, we will implement a free tier with &lt;a href=&#34;https://apisix.apache.org/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Apache APISIX&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2&gt;A Naive Approach&lt;/h2&gt;&#xA;&lt;p&gt;I implemented a free tier in my post, &#34;&lt;a href=&#34;https://dzone.com/articles/evolving-your-restful-apis-a-step-by-step-approach&#34;&gt;Evolving Your RESTful APIs: A Step-by-Step Approach&lt;/a&gt;,&#34; albeit in a very naive way. I copy-pasted the &lt;a href=&#34;https://apisix.apache.org/docs/apisix/plugins/limit-count/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;limit-count&lt;/a&gt; plugin and added my required logic.&lt;/p&gt;】&lt;p&gt;许多服务提供商都提供免费服务。我们的想法是让您自由地使用他们的服务。如果您需要随时超出免费套餐，您可能会继续使用该服务并付费。在当今时代，大多数服务都是在线的，并且可以通过 API 访问。今天，我们将使用 &lt;a href=&#34;https://apisix.apache.org/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Apache APISIX&lt;/a&gt; 实施免费套餐。&lt;/p&gt;&#xA;&lt;h2&gt;一种幼稚的方法&lt;/h2&gt;&#xA;&lt;p&gt;我在帖子“&lt;a href=&#34;https://dzone.com/articles/evolving-your-restful-apis-a-step-by-step-approach&#34;&gt;发展您的 RESTful 中实施了免费套餐API：循序渐进的方法&lt;/a&gt;”，尽管这是一种非常幼稚的方式。我复制粘贴了 &lt;a href=&#34;https://apisix.apache.org/docs/apisix/plugins/limit-count/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;limit-count&lt;/a&gt;插件并添加了我所需的逻辑。&lt;/p&gt;</description>
      <pubDate>Mon, 05 Aug 2024 13:30:01 +0000</pubDate>
    </item>
    <item>
      <title>【Go Serverless: Unleash Next-Gen Computing】走向无服务器：释放下一代计算的潜力</title>
      <link>https://dzone.com/articles/go-serverless-unleash-next-gen-computing</link>
      <description>【&lt;p align=&#34;justify&#34; style=&#34;text-align: left;&#34;&gt;In the digital revolution, where bytes fly faster than thoughts, one concept is bringing a paradigm shift in the tech cosmos: serverless computing. The thought of dealing with servers often makes us freak out. Server maintenance, scalability issues, and huge infrastructure costs can all be part of our nightmares. This is where &lt;a href=&#34;https://dzone.com/articles/step-into-serverless-computing&#34;&gt;serverless computing&lt;/a&gt; can be a game-changer. It aims to virtually save modern-day technology trouble so we can just focus on coding.&lt;/p&gt;&#xA;&lt;p align=&#34;justify&#34; style=&#34;text-align: left;&#34;&gt;“Serverless” doesn&#39;t literally mean the servers completely vanish. Instead, they are hidden behind the curtains until summoned. Think of it like a magic genie that is always at your beck and call to grant your computing wishes without the hassles of hardware management.&lt;/p&gt;】&lt;palign=&#34;justify&#34; style=&#34;text-align: left;&#34;&gt;在数字革命中，字节飞得比思想更快，一个概念正在给科技宇宙带来范式转变：无服务器计算。与服务器打交道的想法常常让我们感到害怕。服务器维护、可扩展性问题和巨大的基础设施成本都可能成为我们噩梦的一部分。这就是&lt;a href=&#34;https://dzone.com/articles/step-into-serverless-computing&#34;&gt;无服务器计算&lt;/a&gt;可以改变游戏规则的地方。它的目的是从根本上避免现代技术的麻烦，这样我们就可以专注于编码。&lt;/p&gt;&#xA;&lt;palign=&#34;justify&#34;style=&#34;text-align: left;&#34;&gt;“无服务器”字面意思并不意味着服务器完全消失。相反，他们隐藏在窗帘后面，直到被召唤。可以把它想象成一个神奇的精灵，随时听从您的召唤，满足您的计算愿望，而无需硬件管理的麻烦。&lt;/p&gt;</description>
      <pubDate>Mon, 05 Aug 2024 20:00:01 +0000</pubDate>
    </item>
    <item>
      <title>【Building a To-Do List With MongoDB and Golang】使用 MongoDB 和 Golang 构建待办事项列表</title>
      <link>https://dzone.com/articles/build-a-to-do-list-with-mongodb-and-golang</link>
      <description>【&lt;p&gt;Hi, there! Many have wondered how a simple task sheet or applications that provide such functionality work. In this article, I invite you to consider how you can write your small service in Go in a couple of hours and put everything in a database.&lt;/p&gt;&#xA;&lt;p&gt;Let&#39;s start our journey with Golang and MongoDB.&lt;/p&gt;】&lt;p&gt;嗨，那里！许多人想知道提供此类功能的简单任务表或应用程序如何工作。在本文中，我邀请您考虑如何在几个小时内用 Go 编写小型服务并将所有内容放入数据库中。&lt;/p&gt;&#xA;&lt;p&gt;让我们开始我们的 Golang 和 MongoDB 之旅。&lt;/p&gt;</description>
      <pubDate>Mon, 05 Aug 2024 14:00:01 +0000</pubDate>
    </item>
    <item>
      <title>【Finding Your Voice: Navigating Tech as a Solo Female Engineer on Your Team】找到你的声音：作为团队中的女性工程师探索技术</title>
      <link>https://dzone.com/articles/navigating-tech-as-a-solo-female-engineer</link>
      <description>【&lt;p&gt;For most of my career, I have been the only female engineer on my team. You may wonder, what’s so significant about that? As I navigated the tech industry as the only female engineer on my team, I often felt isolated and lonely. The lack of community and a sense of belonging led to a growing imposter syndrome, and unfortunately, many women in tech resonate with this feeling.&lt;/p&gt;&#xA;&lt;p&gt;Throughout my 5+ years of experience as a software engineer, I have realized the importance of having a strategy and a supportive network to navigate this landscape. Here are some of my tips to tackle this head-on:&lt;/p&gt;】&lt;p&gt;在我职业生涯的大部分时间里，我是团队中唯一的女性工程师。您可能想知道，这有什么重要意义？当我作为团队中唯一的女性工程师涉足科技行业时，我经常感到孤立和孤独。缺乏社区和归属感导致冒名顶替综合症日益严重，不幸的是，许多科技行业的女性都有这种感觉。&lt;/p&gt;&#xA;&lt;p&gt;在我作为软件工程师 5 年多的经验中，我意识到拥有策略和支持性网络来驾驭这一局面的重要性。以下是我解决这个问题的一些技巧：&lt;/p&gt;</description>
      <pubDate>Mon, 05 Aug 2024 13:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Reimagining AI: Ensuring Trust, Security, and Ethical Use】重新构想人工智能：确保信任、安全和合乎道德的使用</title>
      <link>https://dzone.com/articles/reimagining-ai-ensuring-trust-security-and-ethics</link>
      <description>【&lt;p name=&#34;1ffa&#34;&gt;The birth of AI dates back to the 1950s when Alan Turing asked, &#34;Can machines think?&#34; Since then, 73 years have passed, and technological advancements have led to the development of unfathomably intelligent systems that can recreate everything from images and voices to emotions (deep fake).&lt;/p&gt;&#xA;&lt;p name=&#34;0eba&#34;&gt;These innovations have greatly benefited professionals in countless fields, be they &lt;a href=&#34;https://dzone.com/articles/the-role-of-data-engineering-in-building-scalable&#34;&gt;data engineers,&lt;/a&gt; healthcare professionals, or finance personnel. However, this increased convergence of AI within our daily operations has also posed certain challenges and risks, and the assurance of &lt;a href=&#34;https://dzone.com/articles/embracing-responsible-ai-principles-and-practices&#34;&gt;reliable AI&lt;/a&gt; systems has become a growing concern nowadays.&lt;/p&gt;】&lt;p name=&#34;1ffa&#34;&gt;人工智能的诞生可以追溯到 20 世纪 50 年代，当时艾伦·图灵问道：“机器能思考吗？”从那时起，73 年过去了，技术进步推动了深不可测的智能系统的发展，这些系统可以重建从图像、声音到情感（深度伪造）的一切内容。&lt;/p&gt;&#xA;&lt;p name=&#34;0eba&#34;&gt;这些创新使无数领域的专业人士受益匪浅，&lt;a href=&#34;https://dzone.com/articles/the-role-of-data-engineering-in-building-scalable &#34;&gt;数据工程师、&lt;/a&gt;医疗保健专业人员或财务人员。然而，人工智能在我们日常运营中的日益融合也带来了一定的挑战和风险，并且保证了&lt;a href=&#34;https://dzone.com/articles/embracing-responsible-ai-principles-and-practices&#34; &gt;可靠的人工智能&lt;/a&gt;系统如今已成为人们日益关注的问题。&lt;/p&gt;</description>
      <pubDate>Mon, 05 Aug 2024 18:00:01 +0000</pubDate>
    </item>
  </channel>
</rss>