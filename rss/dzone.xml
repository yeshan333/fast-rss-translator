<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Unlocking Local AI: Build RAG Apps Without Cloud or API Keys】解锁本地AI：构建无云或API密钥的抹布应用程序</title>
      <link>https://dzone.com/articles/build-rag-apps-local-ai</link>
      <description>【&lt;p&gt;Retrieval-augmented generation (RAG) is transforming how we interact with AI models by combining retrieval techniques with generative models. But what if you could build RAG applications locally, without API keys or cloud dependencies?&lt;/p&gt;&#xA;&lt;p&gt;Let&#39;s meet &lt;strong&gt;Chipper&lt;/strong&gt;, an open-source framework that makes building &lt;a href=&#34;https://dzone.com/articles/how-to-use-rag-locally&#34;&gt;local RAG apps&lt;/a&gt; simple. No more struggling with document chunking, vector databases, LLM integration, and UI setups separately. With Chipper, you can set up a self-contained RAG system on your local machine in minutes.&lt;/p&gt;】&lt;p&gt;检索增强生成（RAG）正在通过将检索技术与生成模型相结合，从而改变了我们与AI模型的相互作用。但是，如果您可以在本地构建抹布应用程序，而无需API键或云依赖项？&lt;/p&gt;&#xA;&lt;p&gt;让我们见面&lt;strong&gt; Chipper &lt;/strong&gt;，一个开源框架，使建筑物&lt;a href =“ https://dzone.com/articles/how-to-to-use-rag-lag-locally”&gt; local rag应用&lt;/a&gt;简单。在文档块，矢量数据库，LLM集成和UI设置方面，不再有更多的努力。使用CREIPPER，您可以在几分钟内在本地机器上设置一个独立的抹布系统。&lt;/p&gt;</description>
      <pubDate>Fri, 14 Feb 2025 14:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【ETL Generation Using GenAI】使用Genai的ETL生成</title>
      <link>https://dzone.com/articles/etl-generation-using-genai</link>
      <description>【&lt;p&gt;&lt;span&gt;Generating ETL data pipelines using generative AI (GenAI) involves leveraging the capabilities of large language models to automatically create the code and logic for extracting, transforming, and loading data from various sources, significantly reducing manual coding efforts and accelerating pipeline development by allowing users to describe their desired data transformations in natural language prompts, which the AI then translates into executable code.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;What Is ETL Pipeline?&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/what-is-a-data-pipeline&#34;&gt;&lt;span&gt;Data pipelines&lt;/span&gt;&lt;/a&gt;&lt;span&gt; are the hidden engines that keep modern businesses running smoothly. They quietly transport data from various sources to warehouses and lakes, where it can be stored and used for decision-making. These pipelines perform the essential task of moving and organizing data behind the scenes, rarely noticed — until something breaks down.&lt;/span&gt;&lt;/p&gt;】&lt;p&gt; &lt;span&gt;使用生成AI（genai）生成ETL数据管道涉及利用大型语言模型的能力自动创建代码和逻辑，以提取，转换和加载来自各种来源的数据，从而大大减少人工编码工作和加速性加速。管道开发通过允许用户在自然语言提示中描述所需的数据转换，然后AI转换为可执行的代码。 &lt;/span&gt; &lt;/p&gt;&#xA;&lt;h2&gt; &lt;strong&gt; &lt;span&gt;什么是ETL管道？&lt;/span&gt; &lt;/strong&gt; &lt;/h2&gt;&#xA;在保持现代企业的运行顺利。他们将数据从各种来源传输到仓库和湖泊，在那里可以存储并用于决策。这些管道执行了在幕后移动和组织数据的重要任务，很少注意到 - 直到某些东西分解。&lt;/span&gt; &lt;/p&gt;</description>
      <pubDate>Fri, 14 Feb 2025 17:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【How to Backup SQL Server RDS to an S3 Bucket】如何将SQL Server RDS备份到S3存储桶</title>
      <link>https://dzone.com/articles/how-to-backup-sql-server-rds-to-an-s3-bucket</link>
      <description>【&lt;p&gt;Managing backups for SQL Server RDS instances is crucial to ensuring data availability and disaster recovery. AWS provides tools to facilitate this process, including commands to back up SQL Server RDS databases directly to Amazon S3. This article walks you through the commands and configurations needed to perform backups and restores.&lt;/p&gt;&#xA;&lt;h2&gt;Backing Up SQL Server RDS to S3&lt;/h2&gt;&#xA;&lt;p&gt;The primary stored procedure used for creating backups is &lt;code&gt;msdb.dbo.rds_backup_database&lt;/code&gt;. This command allows you to specify the database to back up and the &lt;a href=&#34;https://dzone.com/articles/7-aws-data-stores-you-can-use-to-store-and-manage&#34;&gt;S3 location&lt;/a&gt; where the backup will be stored.&lt;/p&gt;】&lt;p&gt;管理SQL Server RDS实例的备份对于确保数据可用性和灾难恢复至关重要。 AWS提供了促进此过程的工具，包括将SQL Server RDS数据库直接备份到Amazon S3的命令。本文将带您浏览执行备份和还原所需的命令和配置。&lt;/p&gt;&#xA;&lt;H2&gt;将SQL Server RDS备份到S3 &lt;/H2&gt;&#xA;&lt;p&gt;用于创建备份的主要存储过程是&lt;code&gt; msdb.dbo.rds_backup_database &lt;/code&gt;。此命令允许您指定数据库备份和&lt;a href =“ https://dzone.com/articles/7-aws-data-sto--stores-you-can-use-use-can-use-to-store-store-and-manage” &gt; S3位置&lt;/a&gt;将存储备份的位置。&lt;/p&gt;</description>
      <pubDate>Thu, 13 Feb 2025 21:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【gRPC and Its Role in Microservices Communication】GRPC及其在微服务通信中的作用</title>
      <link>https://dzone.com/articles/understanding-grpc-and-its-role-in-microservices-c</link>
      <description>【&lt;p data-selectable-paragraph=&#34;&#34;&gt;gRPC (gRPC Remote Procedure Calls) is a modern, open-source, high-performance RPC (Remote Procedure Call) framework developed by Google. It is designed to facilitate efficient communication between distributed systems, making it particularly well-suited for microservices architectures. Below is an explanation of gRPC and its role in microservices communication:&lt;/p&gt;&#xA;&lt;h2 data-selectable-paragraph=&#34;&#34;&gt;What Is gRPC?&lt;/h2&gt;&#xA;&lt;p data-selectable-paragraph=&#34;&#34;&gt;&lt;a href=&#34;https://dzone.com/articles/understanding-grpc-concepts-use-cases-amp-best-pra&#34;&gt;gRPC is a protocol&lt;/a&gt; that enables client and server applications to communicate transparently, making it easier to build distributed systems. It uses HTTP/2 for transport, &lt;a href=&#34;https://dzone.com/articles/what-are-protocol-buffers&#34;&gt;Protocol Buffers&lt;/a&gt; (Protobuf) as its interface definition language (IDL), and provides features like authentication, load balancing, and more.&amp;nbsp;&lt;/p&gt;】&lt;p数​​据选择 -  paragraph =“”&gt; grpc（GRPC远程过程调用）是由Google开发的现代，开源的，高性能的RPC（远程过程调用）框架。它旨在促进分布式系统之间有效的沟通，使其特别适合微服务架构。以下是GRPC及其在微服务通信中的作用的解释：&lt;/p&gt;&#xA;&lt;H2数据选择 - 段落=“”&gt;什么是grpc？&lt;/h2&gt;&#xA;&lt;p data-selectable-paragraph =“”&gt; &lt;a href =“ https://dzone.com/articles/understanding-grpc-concepts-use-case-cases-cases-amp-best-best-pra”&gt; grpc是协议&lt;/a &gt;使客户端和服务器应用程序能够透明地通信，从而更容易构建分布式系统。它使用http/2进行运输，&lt;a href =“ https://dzone.com/articles/what-are-are-protocol-buffers”&gt;协议缓冲器&lt;/a&gt;（protobuf）作为其接口定义语言（IDL），并提供身份验证，负载平衡等功能。 &lt;/p&gt;</description>
      <pubDate>Fri, 14 Feb 2025 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Robust Integration Solutions With Apache Camel and Spring Boot】与Apache Camel和Spring Boot的强大集成解决方案</title>
      <link>https://dzone.com/articles/apache-camel-spring-boot-robust-integration-solutions</link>
      <description>【&lt;p data-selectable-paragraph=&#34;&#34;&gt;In today’s interconnected world, integrating systems, applications, and data is a critical requirement for businesses. However, building reliable and scalable integration solutions can be challenging due to the complexity of handling different protocols, data formats, and error scenarios. &lt;strong&gt;Apache Camel&lt;/strong&gt;, combined with &lt;strong&gt;Spring Boot&lt;/strong&gt;, provides a powerful and flexible framework to address these challenges.&lt;/p&gt;&#xA;&lt;p data-selectable-paragraph=&#34;&#34;&gt;In this article, we’ll explore how to use Apache Camel with Spring Boot to solve real-world integration problems, including data integration, messaging routing, file processing, and API orchestration. We’ll also enhance these solutions with error handling and retry mechanisms to ensure robustness and fault tolerance.&lt;/p&gt;】&lt;p数​​据可选 - 段落=“”&gt;在当今的互连世界中，集成系统，应用程序和数据是企业的关键要求。但是，由于处理不同协议，数据格式和错误方案的复杂性，构建可靠且可扩展的集成解决方案可能会具有挑战性。 &lt;strong&gt; Apache骆驼&lt;/strong&gt;与&lt;strong&gt;春季靴子结合使用，提供了一个强大而灵活的框架来应对这些挑战。&lt;/p&gt;&#xA;&lt;P数据选择 - 段落=“”&gt;在本文中，我们将探讨如何将Apache Camel与Spring Boot一起解决现实世界中的集成问题，包括数据集成，消息路由，文件处理，文件处理和API编排。我们还将通过错误处理和重试机制增强这些解决方案，以确保稳健性和容错性。&lt;/p&gt;</description>
      <pubDate>Fri, 14 Feb 2025 18:00:01 +0000</pubDate>
    </item>
    <item>
      <title>【Optimizing Database Performance in Middleware Applications】在中间件应用程序中优化数据库性能</title>
      <link>https://dzone.com/articles/database-performance-in-middleware-applications</link>
      <description>【&lt;p&gt;In the realm of modern software architecture, middleware plays a pivotal role in connecting various components of distributed systems. One of the most significant challenges faced by middleware applications is optimizing database interactions. This is crucial because middleware often serves as the bridge between client applications and backend databases, handling a high volume of requests and data processing tasks.&lt;/p&gt;&#xA;&lt;p&gt;Efficient database operations in middleware can dramatically improve overall system performance, reduce latency, and enhance user experience. This blog post explores various techniques to optimize &lt;a href=&#34;https://dzone.com/articles/api-and-database-performance-optimization-strategi&#34;&gt;database performance&lt;/a&gt;, specifically in the context of middleware applications.&lt;/p&gt;】&lt;p&gt;在现代软件体系结构的领域中，中间件在连接分布式系统的各种组件中起关键作用。中间件应用程序面临的最重要的挑战之一是优化数据库交互。这是至关重要的，因为中间件通常用作客户端应用程序和后端数据库之间的桥梁，处理大量请求和数据处理任务。&lt;/p&gt;&#xA;&lt;p&gt;中间件中有效的数据库操作可以大大提高整体系统性能，降低延迟并增强用户体验。这篇博客文章探讨了各种技术来优化&lt;a href =“ https://dzone.com/articles/api-and-and-database-performance-performance-performance-optimization-strategi”&gt;数据库性能&lt;/a&gt;，特别是在中间件应用程序的上下文中。&lt;/p&gt;</description>
      <pubDate>Fri, 14 Feb 2025 19:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Reactive Programming in React With RxJS】与RXJ的反应性编程</title>
      <link>https://dzone.com/articles/reactive-programming-in-react-with-rxjs</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;ReactJS has become a go-to library for building dynamic and responsive user interfaces. However, as applications grow, managing asynchronous data streams becomes more challenging. Enter RxJS, a powerful library for reactive programming using observables. RxJS operators simplify handling complex asynchronous data flows, making your React components more manageable and efficient.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;In this article, we&#39;ll explore RxJS operators within the context of ReactJS. We&#39;ll walk through step-by-step examples, demonstrating how to integrate RxJS into your React applications. By the end of this guide, you&#39;ll have a solid understanding of RxJS operators and how they can enhance your ReactJS projects.&lt;/p&gt;】&lt;p dir =“ ltr”&gt; reactjs已成为用于构建动态和响应用户界面的首选库。但是，随着应用程序的增长，管理异步数据流变得更具挑战性。输入RXJS，这是一个功能强大的库，用于使用可观察到的反应性编程。 RXJS操作员简化处理复杂的异步数据流，使您的反应组件更易于管理和高效。&lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;在本文中，我们将在ReactJ的背景下探索RXJS运算符。我们将逐步浏览示例，演示如何将RXJ集成到您的React应用程序中。在本指南结束时，您将对RXJS运营商有深入的了解以及他们如何增强您的ReactJS项目。&lt;/p&gt;</description>
      <pubDate>Fri, 14 Feb 2025 22:30:00 +0000</pubDate>
    </item>
    <item>
      <title>【Redis as a Primary Database for Complex Applications】重新作为复杂应用程序的主要数据库</title>
      <link>https://dzone.com/articles/redis-as-a-primary-database-for-complex-applications</link>
      <description>【&lt;section name=&#34;4016&#34;&gt;&#xA; &lt;p name=&#34;bdde&#34;&gt;First, we will see what Redis is and its usage, as well as why it is suitable for modern complex microservice applications. We will talk about how Redis supports storing multiple data formats for different purposes through its modules. Next, we will see how Redis, as an in-memory database, can persist data and recover from data loss. We’ll also talk about how Redis optimizes memory storage costs using Redis on Flash.&lt;/p&gt;&#xA; &lt;p name=&#34;a23e&#34;&gt;Then, we will see very interesting use cases of scaling Redis and replicating it across multiple geographic regions. Finally, since one of the most popular platforms for running micro-services is Kubernetes, and since running stateful applications in Kubernetes is a bit challenging, we will see how you can easily run Redis on Kubernetes.&lt;/p&gt;】&lt;部分名称=“ 4016”&gt;&#xA; &lt;p name =“ bdde”&gt;首先，我们将看到Redis是什么及其用法，以及为什么它适用于现代复杂的微服务应用程序。我们将讨论REDIS如何支持通过其模块来存储多种数据格式。接下来，我们将看到Redis作为内存数据库如何持续数据并从数据丢失中恢复。我们还将讨论REDIS在Flash上​​使用REDIS优化内存存储成本。&lt;/p&gt;&#xA; &lt;p name =“ a23e”&gt;然后，我们将看到缩放redis并在多个地理区域复制它的非常有趣的用例。最后，由于运行微服务的最受欢迎的平台之一是Kubernetes，并且由于在Kubernetes中运行状态应用程序有些挑战，因此我们将看到如何轻松地在Kubernetes上运行Redis。&lt;/p&gt; &lt;/p&gt;</description>
      <pubDate>Fri, 14 Feb 2025 22:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【AI Summarization: Extractive and Abstractive Techniques】AI摘要：提取和抽象技术</title>
      <link>https://dzone.com/articles/ai-summarization-extractive-abstractive-techniques</link>
      <description>【&lt;p&gt;&lt;span&gt;The proliferation of digital content has made it more difficult to comprehend and interpret lengthy texts, such as reports, research papers, and news items. An answer is offered by AI-powered summarizing tools, which make it simpler to extract essential information from lengthy texts. Shortening the text is only one aspect of summarization; another is maintaining the original material&#39;s context, tone, and intent.&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;span&gt;This tutorial introduces two complementary techniques — &lt;strong&gt;extractive summarization&lt;/strong&gt; and &lt;strong&gt;abstractive summarization&amp;nbsp;&lt;/strong&gt;— and shows you how to combine them for robust results. You&#39;ll use pre-trained models from Hugging Face for extractive tasks and OpenAI&#39;s GPT for abstractive rewriting, resulting in summaries that are both concise and contextually accurate.&lt;/span&gt;&lt;/p&gt;】&lt;p&gt; &lt;span&gt;数字内容的扩散使理解和解释冗长的文本，例如报告，研究论文和新闻项目变得更加困难。 AI驱动的汇总工具提供了答案，这使得从冗长的文本中提取基本信息变得更加简单。缩短文本只是摘要的一个方面。另一个正在维护原始材料的上下文，音调和意图。&lt;/span&gt; &lt;/p&gt;&#xA;&lt;p&gt; &lt;span&gt;本教程介绍了两种互补技术 -  &lt;strong&gt;提取性摘要&lt;/strong&gt;和&lt;strong&gt;抽象性摘要&lt;/strong&gt;  - 并向您展示了如何将它们结合起来以获得可靠的结果。您将使用预训练的模型来拥抱面孔进行提取任务和OpenAI的GPT进行抽象重写，从而导致摘要既简洁又准确。&lt;/span&gt; &lt;/span&gt; &lt;/p&gt;</description>
      <pubDate>Thu, 13 Feb 2025 22:00:02 +0000</pubDate>
    </item>
    <item>
      <title>【Git Tags vs AWS Tags: A Tag-Tastic Showdown!】git标签vs AWS标签：标签摊牌！</title>
      <link>https://dzone.com/articles/git-tags-vs-aws-tags-a-tag-tastic-showdown</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Welcome to the ultimate showdown between Git Tags and AWS Tags, two contenders with nothing in common except their love for the word &#34;&lt;strong&gt;tag&lt;/strong&gt;.&#34; Let&#39;s put them head-to-head and see who wins the battle of confusion and utility!&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;Round 1: Who They Are&lt;/h2&gt;&#xA;&lt;h3 dir=&#34;ltr&#34;&gt;Git Tags&lt;/h3&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;The historians of the software world. They don&#39;t care about the present; they just like to bookmark essential events (like releases) so you can travel back in time. Think of them as your &lt;a href=&#34;https://dzone.com/articles/git-tags-version-control-made-easy&#34;&gt;version control time machine&lt;/a&gt; — without the risk of encountering your past coding mistakes… oh wait. Good luck debugging v1.0.0-final-final-definitely-final-this-time!&lt;/p&gt;】&lt;p dir =“ ltr”&gt;欢迎参加git标签和AWS标签之间的终极摊牌，两个竞争者没有共同的竞争者，除了他们对“ &lt;strong&gt; tag &lt;/strong&gt;”一词的热爱。让我们将他们面对面，看看谁赢得了混乱和实用战役！&lt;/p&gt;&#xA;&lt;h2 dir =“ ltr”&gt;第1轮：他们是谁&lt;/h2&gt;&#xA;&lt;h3 dir =“ ltr”&gt; git标签&lt;/h3&gt;&#xA;&lt;p dir =“ ltr”&gt;软件界的历史学家。他们不在乎现在；他们只是喜欢添加书签基本事件（例如发行版），以便您可以回到过去。将它们视为您的&lt;a href =“ https://dzone.com/articles/git-tags-version-control-made-easy-”&gt;版本控制时间机器&lt;/a&gt;  - 没有遇到过去编码的风险错误……哦，等等。祝您好运，调试v1.​​0.0.0-最后一部 - 最终最终的比赛！&lt;/p&gt;</description>
      <pubDate>Fri, 14 Feb 2025 12:30:00 +0000</pubDate>
    </item>
  </channel>
</rss>