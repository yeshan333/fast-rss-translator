<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Security at the Onset: Stabilizing CSPM and DevSecOps】从头开始的安全：稳定 CSPM 和 DevSecOps</title>
      <link>https://dzone.com/articles/stabilizing-cspm-and-devsecops</link>
      <description>【&lt;p style=&#34;text-align: left;&#34;&gt;&lt;span data-contrast=&#34;auto&#34; lang=&#34;EN-IN&#34;&gt;The time for rapid technology development and cloud computing is perhaps the most sensitive time when security issues are of great importance. It is here that security will have to be injected into a process right from the beginning — be it software development or cloud infrastructure deployment. Two concepts that are very influential in doing so are&amp;nbsp;&lt;/span&gt;&lt;span data-contrast=&#34;auto&#34; lang=&#34;EN-IN&#34;&gt;CSPM&lt;/span&gt;&lt;span data-contrast=&#34;auto&#34; lang=&#34;EN-IN&#34;&gt;&amp;nbsp;and&amp;nbsp;&lt;/span&gt;&lt;span data-contrast=&#34;auto&#34; lang=&#34;EN-IN&#34;&gt;DevSecOps&lt;/span&gt;&lt;span data-contrast=&#34;auto&#34; lang=&#34;EN-IN&#34;&gt;.&lt;/span&gt;&lt;span data-ccp-props=&#34;{&amp;quot;335551550&amp;quot;:6,&amp;quot;335551620&amp;quot;:6}&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p style=&#34;text-align: left;&#34;&gt;&lt;span data-contrast=&#34;auto&#34; lang=&#34;EN-IN&#34;&gt;Don&#39;t worry if these terms seem complicated — all they really mean is the inclusion of security within how companies build and manage their cloud environments and software pipelines.&amp;nbsp;&lt;/span&gt;&lt;span data-ccp-props=&#34;{&amp;quot;335551550&amp;quot;:6,&amp;quot;335551620&amp;quot;:6}&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;】&lt;p style=&#34;text-align: left;&#34;&gt;&lt;span data-contrast=&#34;auto&#34; lang=&#34;EN-IN&#34;&gt;技术飞速发展和云计算的时代或许是安全问题最敏感的时代非常重要。正是在这里，安全性必须从一开始就注入到流程中——无论是软件开发还是云基础设施部署。对此影响很大的两个概念是&lt;/span&gt;&lt;span data-contrast=&#34;auto&#34; lang=&#34;EN-IN&#34;&gt;CSPM&lt;/span&gt;&lt;span data-contrast=&#34;auto&#34; lang=&#34;EN- IN&#34;&gt; 和&lt;/span&gt;&lt;span data-contrast=&#34;auto&#34; lang=&#34;EN-IN&#34;&gt;DevSecOps&lt;/span&gt;&lt;span data-contrast=&#34;auto&#34; lang=&#34;EN-IN&#34;&gt;。&lt;/ span&gt;&lt;span data-ccp-props=&#34;{&#34;335551550&#34;:6,&#34;335551620&#34;:6}&#34;&gt; &lt;/span&gt;&lt;/p&gt;&#xA;&lt;p style=&#34;text-align: left;&#34;&gt;&lt;span data-contrast=&#34;auto&#34; lang=&#34;EN-IN&#34;&gt;如果这些术语看起来很复杂，请不要担心 - 它们真正的意思是将安全性包含在其中公司如何构建和管理其云环境和软件管道。 &lt;/span&gt;&lt;span data-ccp-props=&#34;{&#34;335551550&#34;:6,&#34;335551620&#34;:6}&#34;&gt; &lt;/span&gt;&lt;/p&gt;</description>
      <pubDate>Tue, 08 Oct 2024 15:00:09 +0000</pubDate>
    </item>
    <item>
      <title>【PostgreSQL Everywhere and for Everything】PostgreSQL 无处不在，无所不能</title>
      <link>https://dzone.com/articles/postgresql-everywhere-and-for-everything</link>
      <description>【&lt;p data-pm-slice=&#34;1 1 []&#34;&gt;PostgreSQL is one of the most popular SQL databases. It’s a go-to database for many projects dealing with Online Transaction Processing systems. However, PostgreSQL is much more versatile and can successfully handle less popular SQL scenarios and workflows that don’t use SQL at all. In this blog post, we’ll see other scenarios where PostgreSQL shines and will explain how to use it in these cases.&lt;/p&gt;&#xA;&lt;h2&gt;How It All Started&lt;/h2&gt;&#xA;&lt;p&gt;Historically, we focused on two distinct database workflows: Online Transaction Processing (OLTP) and Online Analytical Processing (OLAP).&lt;/p&gt;】&lt;p data-pm-slice=&#34;1 1 []&#34;&gt;PostgreSQL 是最流行的 SQL 数据库之一。它是许多涉及在线事务处理系统的项目的首选数据库。然而，PostgreSQL 的用途要广泛得多，可以成功处理不太流行的 SQL 场景和根本不使用 SQL 的工作流程。在这篇博文中，我们将看到 PostgreSQL 的其他应用场景，并将解释如何在这些情况下使用它。&lt;/p&gt;&#xA;&lt;h2&gt;这一切是如何开始的&lt;/h2&gt;&#xA;&lt;p&gt;过去，我们专注于两种不同的数据库工作流程：在线事务处理 (OLTP) 和在线分析处理 (OLAP)。&lt;/p&gt;</description>
      <pubDate>Tue, 08 Oct 2024 16:00:06 +0000</pubDate>
    </item>
    <item>
      <title>【Secret Management and Rotation】秘密管理和轮换</title>
      <link>https://dzone.com/articles/secret-management-and-rotation</link>
      <description>【&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/keep-your-application-secrets-secret&#34;&gt;Secrets&lt;/a&gt; are the keys to manage and enhance the security of a software application. Secret keys play a pivotal role in the authentication, authorization, &lt;a href=&#34;https://dzone.com/articles/what-is-encryption-and-how-does-it-work&#34;&gt;encryption&lt;/a&gt;/decryption, etc. of data flowing through the application. There are various types of secrets and few of them are:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA; &lt;li&gt;&lt;strong&gt;Encryption/Decryption keys&lt;/strong&gt;: Keys to encrypt/decrypt data at various levels; e.g., REST, database, etc.&lt;/li&gt;&#xA; &lt;li&gt;&lt;strong&gt;API keys&lt;/strong&gt;: Keys to provide access to an exposed API&lt;/li&gt;&#xA; &lt;li&gt;&lt;strong&gt;Credentials&lt;/strong&gt;: Keys to provide credentials; e.g., database connection strings&lt;/li&gt;&#xA; &lt;li&gt;&lt;strong&gt;SSH keys&lt;/strong&gt;: Keys to provide &lt;a href=&#34;https://dzone.com/articles/ssh-tutorial-nice-amp-easy-video&#34;&gt;SSH&lt;/a&gt; communication to server&lt;/li&gt;&#xA; &lt;li&gt;&lt;strong&gt;Passwords&lt;/strong&gt;: Keys to store passwords&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;It is very important to store these keys and ensure &lt;a href=&#34;https://dzone.com/articles/securing-secrets-a-guide-to-implementing-secrets&#34;&gt;safety of the stored keys&lt;/a&gt;. A compromised key could lead to data leak, system compromise, etc., and to raise the security bar, it is required to ensure the secrets&#39; rotation and expiry. A manual secret rotation is cumbersome and challenging problem to solve. In this post, I will discuss about implementing an automated key rotation for &lt;a href=&#34;https://aws.amazon.com/secrets-manager/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;AWS Secrets Manager&lt;/a&gt;.&lt;/p&gt;】&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/keep-your-application-secrets-secret&#34;&gt;机密&lt;/a&gt;是管理和增强软件应用程序安全性的关键。密钥在身份验证、授权、&lt;a href=&#34;https://dzone.com/articles/what-is-encryption-and-how-does-it-work&#34;&gt;加密&lt;/a&gt;/中发挥着关键作用对流经应用程序的数据进行解密等。秘密有多种类型，其中很少有：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA; &lt;li&gt;&lt;strong&gt;加密/解密密钥&lt;/strong&gt;：各级加密/解密数据的密钥；例如，REST、数据库等&lt;/li&gt;&#xA; &lt;li&gt;&lt;strong&gt;API 密钥&lt;/strong&gt;：提供对公开 API 的访问的密钥&lt;/li&gt;&#xA; &lt;li&gt;&lt;strong&gt;凭据&lt;/strong&gt;：提供凭据的密钥；例如，数据库连接字符串&lt;/li&gt;&#xA; &lt;li&gt;&lt;strong&gt;SSH 密钥&lt;/strong&gt;：提供 &lt;a href=&#34;https://dzone.com/articles/ssh-tutorial-nice-amp-easy-video&#34;&gt;SSH&lt;/a&gt; 通信的密钥到服务器&lt;/li&gt;&#xA; &lt;li&gt;&lt;strong&gt;密码&lt;/strong&gt;：存储密码的密钥&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;存储这些密钥并确保&lt;a href=&#34;https://dzone.com/articles/securing-secrets-a-guide-to-implementing-secrets&#34;&gt;存储的密钥的安全&lt;/一个&gt;。密钥泄露可能导致数据泄露、系统泄露等，为了提高安全性，需要确保密钥的轮换和过期。手动秘密轮换是一个麻烦且具有挑战性的问题。在这篇文章中，我将讨论如何为 &lt;a href=&#34;https://aws.amazon.com/secrets-manager/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;AWS Secrets Manager&lt; 实施自动密钥轮换/a&gt;.&lt;/p&gt;</description>
      <pubDate>Tue, 08 Oct 2024 13:00:09 +0000</pubDate>
    </item>
    <item>
      <title>【Enhancing Performance With Data Modeling: Techniques and Best Practices for Optimization in Snowflake】通过数据建模提高性能：Snowflake 优化的技术和最佳实践</title>
      <link>https://dzone.com/articles/snowflake-enhancing-performance-with-data-modeling</link>
      <description>【&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/introduction-to-snowflake-for-junior-software-engi&#34;&gt;Snowflake&lt;/a&gt; is a powerful cloud-based &lt;a href=&#34;https://dzone.com/refcardz/data-warehousing&#34;&gt;data warehousing&lt;/a&gt; platform known for its scalability and flexibility. To fully leverage its capabilities and improve efficient data processing, it&#39;s crucial to optimize query performance.&amp;nbsp;&lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;Understanding Snowflake Architecture&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Let’s briefly cover Snowflake architecture before we deal with data modeling and optimization techniques. Snowflake’s architecture consists of three main layers:&lt;/p&gt;】&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/introduction-to-snowflake-for-junior-software-engi&#34;&gt;Snowflake&lt;/a&gt; 是一个强大的基于云的&lt;a href=&#34;https ://dzone.com/refcardz/data-warehousing&#34;&gt;数据仓库&lt;/a&gt;平台以其可扩展性和灵活性而闻名。为了充分利用其能力并提高数据处理效率，优化查询性能至关重要。 &lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;理解雪花架构&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;在讨论数据建模和优化技术之前，让我们先简要介绍一下 Snowflake 架构。 Snowflake 的架构由三个主要层组成：&lt;/p&gt;</description>
      <pubDate>Tue, 08 Oct 2024 19:00:10 +0000</pubDate>
    </item>
    <item>
      <title>【Redefining Java Object Equality】重新定义 Java 对象平等</title>
      <link>https://dzone.com/articles/redefining-java-object-equality</link>
      <description>【&lt;h2&gt;Equality in Java&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/object-identity-and-equality-in-java&#34;&gt;Object equality&lt;/a&gt; is often a hot topic for assessing concepts and one of the pillars (the other is- &lt;code&gt;hashCode()&lt;/code&gt;) of how many of the implementations of &lt;a href=&#34;https://dzone.com/articles/an-introduction-to-the-java-collections-framework&#34;&gt;Collection Frameworks&lt;/a&gt; work. We check equality by providing our own implementation for &amp;nbsp;the method &lt;code&gt;public boolean&lt;/code&gt;&lt;code&gt;java.lang.Object#equals(java.lang.Object other)&lt;/code&gt;. According to &lt;a href=&#34;https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Oracle documentation&lt;/a&gt;, the following mandates should be adhered to:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA; &lt;li&gt;It is &lt;strong&gt;reflexive&lt;/strong&gt;: For any non-null reference value &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;x.equals(x)&lt;/code&gt; should return &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;&#xA; &lt;li&gt;It is &lt;strong&gt;symmetric&lt;/strong&gt;: For any non-null reference values &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;x.equals(y)&lt;/code&gt; should return &lt;code&gt;true&lt;/code&gt; if and only if &lt;code&gt;y.equals(x)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;&#xA; &lt;li&gt;It is &lt;strong&gt;transitive&lt;/strong&gt;: For any non-null reference values &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, and &lt;code&gt;z&lt;/code&gt;, if &lt;code&gt;x.equals(y)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;y.equals(z)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, then &lt;code&gt;x.equals(z)&lt;/code&gt; should return &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;&#xA; &lt;li&gt;It is &lt;strong&gt;consistent&lt;/strong&gt;: For any non-null reference values &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, multiple invocations of &lt;code&gt;x.equals(y)&lt;/code&gt; consistently return &lt;code&gt;true&lt;/code&gt; or consistently return &lt;code&gt;false&lt;/code&gt;, provided no information used in &lt;code&gt;equals&lt;/code&gt; comparisons on the objects are modified.&lt;/li&gt;&#xA; &lt;li&gt;For any non-null reference value &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;x.equals(null)&lt;/code&gt; should return &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Please note&lt;/strong&gt; that there exist a few more related to using it along with &lt;code&gt;hashCode()&lt;/code&gt;, but we do not discuss them here for brevity, assuming the readers are already aware of them.&lt;/p&gt;】&lt;h2&gt;Java 中的平等&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/object-identity-and-equality-in-java&#34;&gt;对象平等&lt;/a&gt;通常是评估概念的热门话题，也是支柱之一（另一个是 - &lt;code&gt;hashCode()&lt;/code&gt;）有多少个 &lt;a href=&#34;https://dzone.com/articles/an-introduction-to-the-java-collections- 的实现框架&#34;&gt;集合框架&lt;/a&gt;工作。我们通过为 &lt;code&gt;public boolean&lt;/code&gt;&lt;code&gt;java.lang.Object#equals(java.lang.Object other)&lt;/code&gt; 方法提供自己的实现来检查相等性。根据 &lt;a href=&#34;https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Oracle 文档&lt;/a&gt;，应遵守以下要求：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA; &lt;li&gt;它是&lt;strong&gt;自反&lt;/strong&gt;：对于任何非空引用值&lt;code&gt;x&lt;/code&gt;，&lt;code&gt;x.equals(x)&lt;/code&gt;应该返回&lt;code&gt;true&lt; /代码&gt;。&lt;/li&gt;&#xA; &lt;li&gt;它是&lt;strong&gt;对称&lt;/strong&gt;：对于任何非空引用值&lt;code&gt;x&lt;/code&gt;和&lt;code&gt;y&lt;/code&gt;，&lt;code&gt;x.equals(y)&lt;/当且仅当 &lt;code&gt;y.equals(x)&lt;/code&gt; 返回 &lt;code&gt;true&lt;/code&gt; 时，code&gt; 才应返回 &lt;code&gt;true&lt;/code&gt;。&lt;/li&gt;&#xA; &lt;li&gt;它是&lt;strong&gt;传递&lt;/strong&gt;的：对于任何非空引用值&lt;code&gt;x&lt;/code&gt;、&lt;code&gt;y&lt;/code&gt;和&lt;code&gt;z&lt;/code&gt;，如果&lt;code&gt;x.equals(y)&lt;/code&gt; 返回 &lt;code&gt;true&lt;/code&gt; 且 &lt;code&gt;y.equals(z)&lt;/code&gt; 返回 &lt;code&gt;true&lt;/code&gt;，然后 &lt;code&gt; x.equals(z)&lt;/code&gt; 应返回 &lt;code&gt;true&lt;/code&gt;。&lt;/li&gt;&#xA; &lt;li&gt;它是&lt;strong&gt;一致的&lt;/strong&gt;：对于任何非空引用值&lt;code&gt;x&lt;/code&gt;和&lt;code&gt;y&lt;/code&gt;，多次调用&lt;code&gt;x.equals(y )&lt;/code&gt; 一致返回 &lt;code&gt;true&lt;/code&gt; 或一致返回 &lt;code&gt;false&lt;/code&gt;，前提是对象的 &lt;code&gt;equals&lt;/code&gt; 比较中使用的信息没有被修改。&lt;/li &gt;&#xA; &lt;li&gt;对于任何非空引用值&lt;code&gt;x&lt;/code&gt;，&lt;code&gt;x.equals(null)&lt;/code&gt; 应返回&lt;code&gt;false&lt;/code&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;请注意&lt;/strong&gt;，还有一些与将其与 &lt;code&gt;hashCode()&lt;/code&gt; 一起使用相关的内容，但为了简洁起见，我们不在这里讨论它们，假设读者已经了解了意识到他们。&lt;/p&gt;</description>
      <pubDate>Tue, 08 Oct 2024 21:00:10 +0000</pubDate>
    </item>
    <item>
      <title>【Starting to Care About Security】开始关心安全</title>
      <link>https://dzone.com/articles/starting-to-care-about-security</link>
      <description>【&lt;p&gt;In &lt;a href=&#34;https://dzone.com/articles/nobody-cares-about-security&#34;&gt;my last post&lt;/a&gt;, I discussed the issue of getting people to care about security, and how it’s largely due to a focus on security behaviors rather than security outcomes. In this post, I’m picking up where I left off, and will talk about…&lt;/p&gt;&#xA;&lt;h2&gt;&lt;a name=&#34;forging-a-path-forward&#34; href=&#34;https://dev.to/adatole/starting-to-care-about-security-2fe4#forging-a-path-forward&#34;&gt;&lt;/a&gt;Forging a Path Forward&lt;/h2&gt;&#xA;&lt;p&gt;Obviously, the point of sharing this post (and the last one) is to do more than just complain about the situation. This will only be useful if it offers ideas and suggestions for approaching the problem differently and moving past it to a more successful outcome. So, what &lt;strong&gt;actionable&lt;/strong&gt; advice do I have?&lt;/p&gt;】&lt;p&gt;在&lt;a href=&#34;https://dzone.com/articles/nobody-cares-about-security&#34;&gt;我的上一篇文章&lt;/a&gt;中，我讨论了让人们关心安全的问题，以及如何这主要是由于关注安全行为而不是安全结果。在这篇文章中，我将从上次停下的地方继续，并将讨论……&lt;/p&gt;&#xA;&lt;h2&gt;&lt;a name=&#34;forging-a-path-forward&#34; href=&#34;https://dev.to/adatole/starting-to-care-about-security-2fe4#forging-a-path-forward&#34;&gt; &lt;/a&gt;开拓前进的道路&lt;/h2&gt;&#xA;&lt;p&gt;显然，分享这篇文章（以及最后一篇文章）的目的不仅仅是抱怨这种情况。只有当它提供以不同方式处理问题并超越它以获得更成功结果的想法和建议时，这才会有用。那么，我有哪些&lt;strong&gt;可行&lt;/strong&gt;建议？&lt;/p&gt;</description>
      <pubDate>Tue, 08 Oct 2024 20:00:05 +0000</pubDate>
    </item>
    <item>
      <title>【Cloud Cost Optimization: New Strategies for the AI Era】云成本优化：AI时代新策略</title>
      <link>https://dzone.com/articles/cloud-cost-optimization-new-strategies</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;In today&#39;s volatile economic landscape, enterprises are scrutinizing their cloud bills more than ever. &lt;a href=&#34;https://dzone.com/articles/how-to-structure-a-platform-team-an-illustrative-m&#34;&gt;Platform teams&lt;/a&gt; are at the forefront of this challenge, tasked with finding innovative ways to optimize usage and drive down costs. To gain insights into this evolving field, we spoke with &lt;a href=&#34;https://www.linkedin.com/in/kapilvt/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Kapil Thangavelu&lt;/a&gt;, co-founder and CTO of Stacklet and the creator and lead maintainer of Cloud Custodian. Let&#39;s dive into his perspectives on the latest trends in cloud cost optimization.&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;The Changing Landscape of Cloud Costs&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA; &lt;p dir=&#34;ltr&#34;&gt;&lt;strong&gt;Q: What&#39;s different about the cloud cost outlook today compared to recent years, from your point of view?&lt;/strong&gt;&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;在当今动荡的经济形势下，企业比以往任何时候都更加仔细地审查其云账单。 &lt;a href=&#34;https://dzone.com/articles/how-to-struct-a-platform-team-an-illustrative-m&#34;&gt;平台团队&lt;/a&gt;处于这一挑战的最前沿，其任务是寻找创新方法来优化使用并降低成本。为了深入了解这个不断发展的领域，我们采访了 &lt;a href=&#34;https://www.linkedin.com/in/kapilvt/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Kapil Thangavelu&lt;/a&gt;， Stacklet 的联合创始人兼首席技术官以及 Cloud Custodian 的创建者和主要维护者。让我们深入探讨他对云成本优化最新趋势的看法。&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;云成本的变化格局&lt;/h2&gt;&#xA;&lt;块引用&gt;&#xA; &lt;p dir=&#34;ltr&#34;&gt;&lt;strong&gt;问：从您的角度来看，当今的云成本前景与近年来有何不同？&lt;/strong&gt;&lt;/p&gt;</description>
      <pubDate>Tue, 08 Oct 2024 18:00:24 +0000</pubDate>
    </item>
    <item>
      <title>【Jenkins in the Age of Kubernetes: Strengths, Weaknesses, and Its Future in CI/CD】Kubernetes 时代的 Jenkins：CI/CD 的优势、劣势及其未来</title>
      <link>https://dzone.com/articles/jenkins-in-the-age-of-kubernetes</link>
      <description>【&lt;h2 dir=&#34;ltr&#34;&gt;What Is Jenkins, and Why Does It Matter?&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;In the world of software development, speed and efficiency are everything. That&#39;s where &lt;a href=&#34;https://dzone.com/articles/getting-started-with-jenkins&#34;&gt;Jenkins&lt;/a&gt;, a popular open-source automation server, steps in. Jenkins plays a key role in streamlining workflows by automating the building, testing, and deployment of code — tasks that would otherwise take up countless developer hours.&lt;br&gt;&lt;img data-image=&#34;true&#34; data-new=&#34;false&#34; data-sizeformatted=&#34;101.4 kB&#34; data-mimetype=&#34;image/png&#34; data-creationdate=&#34;1727192239675&#34; data-creationdateformatted=&#34;09/24/2024 03:37 PM&#34; data-type=&#34;temp&#34; data-url=&#34;https://dz2cdn1.dzone.com/storage/temp/17941167-1727192239125.png&#34; data-modificationdate=&#34;null&#34; data-size=&#34;101405&#34; data-name=&#34;1727192239125.png&#34; data-id=&#34;17941167&#34; data-src=&#34;https://dz2cdn1.dzone.com/storage/temp/17941167-1727192239125.png&#34; class=&#34;fr-fic fr-dib lazyload&#34; style=&#34;width: 203px;&#34; alt=&#34;Jenkins logo&#34;&gt;&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;But why does Jenkins matter in the larger context of DevOps and &lt;a href=&#34;https://dzone.com/articles/what-is-ci-cd&#34;&gt;CI/CD (Continuous Integration/Continuous Deployment)&lt;/a&gt;? Well, if you&#39;re part of a development team, you&#39;re likely familiar with these terms. DevOps aims to break down barriers between development and operations teams, enabling faster, more reliable software releases. &lt;a href=&#34;https://dzone.com/articles/how-to-build-an-effective-cicd-pipeline&#34;&gt;CI/CD pipelines&lt;/a&gt;, in turn, automate the process of integrating new code and delivering updates to users, minimizing downtime and reducing errors.&lt;span contenteditable=&#34;false&#34; draggable=&#34;false&#34;&gt;&lt;br&gt;&lt;img data-new=&#34;false&#34; data-mimetype=&#34;image/png&#34; data-creationdateformatted=&#34;09/29/2024 11:41 PM&#34; data-url=&#34;https://dz2cdn1.dzone.com/storage/temp/17950563-1727653264364.png&#34; data-size=&#34;128257&#34; data-id=&#34;17950563&#34; data-image=&#34;true&#34; data-sizeformatted=&#34;128.3 kB&#34; data-creationdate=&#34;1727653265291&#34; data-type=&#34;temp&#34; data-modificationdate=&#34;null&#34; data-name=&#34;1727653264364.png&#34; class=&#34;fr-fic fr-dib lazyload&#34; data-src=&#34;https://dz2cdn1.dzone.com/storage/temp/17950563-1727653264364.png&#34;&gt;&lt;/span&gt;&lt;/p&gt;】&lt;h2 dir=&#34;ltr&#34;&gt;什么是 Jenkins，为什么它很重要？&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;在软件开发领域，速度和效率就是一切。这就是流行的开源自动化服务器 &lt;a href=&#34;https://dzone.com/articles/getting-started-with-jenkins&#34;&gt;Jenkins&lt;/a&gt; 的用武之地。Jenkins 在简化流程方面发挥着关键作用通过自动构建、测试和部署代码来实现工作流程，否则这些任务将占用开发人员无数的时间。&lt;br&gt;&lt;img data-image=&#34;true&#34; data-new=&#34;false&#34; data-sizeformatted=&#34;101.4 kB&#34; data-mimetype=&#34;image/png&#34; data-creationdate=&#34;1727192239675&#34; data-creationdateformatted=&#34;09/24/2024 03:37 PM&#34; data-type=&#34;temp&#34; data-url=&#34;https://dz2cdn1.dzone .com/storage/temp/17941167-1727192239125.png&#34; data-modificationdate=&#34;null&#34; data-size=&#34;101405&#34; data-name=&#34;1727192239125.png&#34; data-id=&#34;17941167&#34; data-src=&#34;https: //dz2cdn1.dzone.com/storage/temp/17941167-1727192239125.png&#34; class=&#34;fr-fic fr-diblazyload&#34; style=&#34;width: 203px;&#34; alt=&#34;詹金斯徽标&#34;&gt;&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;但是为什么 Jenkins 在 DevOps 和 CI/CD（持续集成）的大背景下很重要/持续部署）&lt;/a&gt;？好吧，如果您是开发团队的一员，您可能会熟悉这些术语。 DevOps 旨在打破开发和运营团队之间的障碍，实现更快、更可靠的软件发布。 &lt;a href=&#34;https://dzone.com/articles/how-to-build-an- effective-cicd-pipeline&#34;&gt;CI/CD 管道&lt;/a&gt;反过来，可以自动化集成新代码和向用户提供更新，最大限度地减少停机时间并减少错误。&lt;span contenteditable=&#34;false&#34; Draggable=&#34;false&#34;&gt;&lt;br&gt;&lt;img data-new=&#34;false&#34; data-mimetype=&#34;image/png&#34; data-creationdateformatted=&#34; 2024 年 9 月 29 日晚上 11:41&#34; data-url=&#34;https://dz2cdn1.dzone.com/storage/temp/17950563-1727653264364.png&#34; data-size=&#34;128257&#34; data-id=&#34;17950563&#34; 数据-image =“true”data-sizeformatted =“128.3 kB”data-creationdate =“1727653265291”data-type =“temp”data-modificationdate =“null”data-name =“1727653264364.png”class =“fr-fic” fr-dib 延迟加载&#34; data-src=&#34;https://dz2cdn1.dzone.com/storage/temp/17950563-1727653264364.png&#34;&gt;&lt;/span&gt;&lt;/p&gt;</description>
      <pubDate>Tue, 08 Oct 2024 14:00:08 +0000</pubDate>
    </item>
    <item>
      <title>【The Shift Left Architecture: From Batch and Lakehouse to Data Streaming】左移架构：从批处理和 Lakehouse 到数据流</title>
      <link>https://dzone.com/articles/shift-left-from-batch-and-lakehouse-to-streaming</link>
      <description>【&lt;p&gt;Data integration is a hard challenge in every enterprise. Batch processing and Reverse ETL are common practices in a data warehouse, data lake, or lakehouse. Data inconsistency, high compute costs, and stale information are the consequences. This blog post introduces a new design pattern to solve these problems: the Shift Left Architecture enables a data mesh with real-time data products to unify transactional and analytical workloads with Apache Kafka, Flink, and Iceberg. Consistent information is handled with streaming processing or ingested into Snowflake, Databricks, Google BigQuery, or any other analytics/AI platform to increase flexibility, reduce cost, and enable a data-driven company culture with faster time-to-market building innovative software applications.&lt;/p&gt;&#xA;&lt;h2&gt;Data Products: The Foundation of a Data Mesh&lt;/h2&gt;&#xA;&lt;p&gt;A data product is a crucial concept in the context of a data mesh that represents a shift from traditional centralized data management to a decentralized approach.&lt;/p&gt;】&lt;p&gt;数据集成对于每个企业来说都是一项艰巨的挑战。批处理和反向 ETL 是数据仓库、数据湖或 Lakehouse 中的常见做法。其后果是数据不一致、计算成本高和信息陈旧。这篇博文介绍了一种新的设计模式来解决这些问题：左移架构支持具有实时数据产品的数据网格，以将事务和分析工作负载与 Apache Kafka、Flink 和 Iceberg 统一起来。通过流处理来处理一致的信息，或将其引入 Snowflake、Databricks、Google BigQuery 或任何其他分析/人工智能平台，以提高灵活性、降低成本，并通过更快的上市时间构建创新软件应用程序，从而实现数据驱动的公司文化.&lt;/p&gt;&#xA;&lt;h2&gt;数据产品：数据网格的基础&lt;/h2&gt;&#xA;&lt;p&gt;数据产品是数据网格环境中的一个关键概念，它代表着从传统的集中式数据管理到分散式方法的转变。&lt;/p&gt;</description>
      <pubDate>Tue, 08 Oct 2024 12:00:09 +0000</pubDate>
    </item>
    <item>
      <title>【Understanding the Differences Between Rate Limiting, Debouncing, and Throttling】了解速率限制、去抖和节流之间的差异</title>
      <link>https://dzone.com/articles/understanding-rate-limiting-debouncing-throttling</link>
      <description>【&lt;p&gt;When developing, we often encounter rate limiting, debouncing, and throttling concepts, such as &lt;strong&gt;debouncing&lt;/strong&gt; and &lt;strong&gt;throttling&lt;/strong&gt; in the front end with event listeners and &lt;strong&gt;rate limiting&lt;/strong&gt; when working with third-party APIs. These three concepts are at the core of any queueing system, enabling us to configure the frequency at which functions must be invoked over a given period.&lt;/p&gt;&#xA;&lt;p&gt;While this definition sounds simple, the distinction between the three approaches can take time to grasp. If my Inngest function is calling the OpenAI API, should I use rate limiting or throttling? Similarly, should I use debouncing or rate limiting if my Inngest Function is performing some costly operation?&lt;/p&gt;】&lt;p&gt;在开发的时候，我们经常会遇到速率限制、去抖动、节流的概念，比如前端的&lt;strong&gt;去抖动&lt;/strong&gt;和&lt;strong&gt;节流&lt;/strong&gt;，用事件监听器和&lt;strong&gt;速率限制&lt;/strong&gt; 使用第三方 API 时。这三个概念是任何排队系统的核心，使我们能够配置在给定时间段内必须调用函数的频率。&lt;/p&gt;&#xA;&lt;p&gt;虽然这个定义听起来很简单，但这三种方法之间的区别可能需要时间才能掌握。如果我的 Inngest 函数正在调用 OpenAI API，我应该使用速率限制还是节流？同样，如果我的 Ingest 函数正在执行一些成本高昂的操作，我是否应该使用去抖或速率限制？&lt;/p&gt;</description>
      <pubDate>Tue, 08 Oct 2024 17:00:03 +0000</pubDate>
    </item>
  </channel>
</rss>