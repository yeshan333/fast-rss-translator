<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Distributed Systems 101】分布式系统101</title>
      <link>https://dzone.com/articles/distributed-systems-101</link>
      <description>【&lt;p data-end=&#34;335&#34; data-start=&#34;118&#34;&gt;Distributed systems are all around us: Facebook, Uber, Revolut — even the Google search engine is one of them. One search in Google can trigger tens (or hundreds) of calls to different microservices owned by Google.&lt;/p&gt;&#xA;&lt;p data-end=&#34;558&#34; data-start=&#34;337&#34;&gt;What is more, they are the core of what we work with: multiple services working together, or maybe a database, or just a service or two with some cache layer, or even some service that connects via an async message queue.&lt;/p&gt;】&lt;p data-end =“ 335” data-start =“ 118”&gt;分布式系统遍布我们：Facebook，Uber，Revolut  - 甚至Google搜索引擎也是其中之一。 Google中的一次搜索可以触发数十个（或数百个）的电话，以触发Google拥有的不同微服务。&lt;/p&gt;&#xA;&lt;p data-end =“ 558” data-start =“ 337”&gt;更重要的是，它们是我们使用的工作的核心：多个服务，或者是数据库，或者只是一个或两个带有缓存层的服务，甚至是通过异步消息队列连接的一些服务，</description>
      <pubDate>Fri, 18 Apr 2025 19:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【The Rise of Shadow AI: When Innovation Outpaces Governance】影子AI的崛起：当创新超过治理时</title>
      <link>https://dzone.com/articles/rise-of-shadow-ai-innovation-vs-governance</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;As technologies evolve and become accessible to non-technical users, companies are increasingly confronted with practices that remain invisible yet very real: Shadow IT yesterday, Shadow AI today. Two sides of the same phenomenon: the appropriation of innovation flying under the radar, a need for agility that comes before governance, and a growing disconnect between users and control over their own information systems.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;What happens when employees get a head start on their own IT department?&lt;/p&gt;】&lt;p dir =“ ltr”&gt;随着技术的发展并可以被非技术用户访问，公司越来越面对这种实践，这些实践仍然是看不见但非常真实的：昨天Shadow It，Shadow AI今天。同一现象的两个方面：在雷达下飞行的创新，需要在治理前进行敏捷性，以及用户之间的脱节和对自己的信息系统的控制越来越多。&lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;当员工独立IT部门开始时会发生什么？&lt;/p&gt;</description>
      <pubDate>Mon, 21 Apr 2025 18:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【AI Interview Analysis】AI面试分析</title>
      <link>https://dzone.com/articles/ai-interview-analysis</link>
      <description>【&lt;h2&gt;TL, DR: AI Interview Analysis&lt;/h2&gt;&#xA;&lt;p&gt;When you step into a new role as Scrum Master or agile coach for a team under pressure, you’re immediately confronted with a challenging reality: you need to understand the complex dynamics at play, but have limited time to process all the available information.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;This article explores how AI interview analysis can be a powerful sense-making tool for agile practitioners who need to quickly synthesize unstructured, qualitative data, particularly when joining a team mid-crisis.&lt;/p&gt;】&lt;H2&gt; TL，DR：AI访谈分析&lt;/H2&gt;&#xA;&lt;p&gt;当您在压力下担任团队的Scrum Master或Agile Coach的新角色时，您会立即面临充满挑战的现实：您需要了解起作用的复杂动态，但是处理所有可用信息的时间有限。 &lt;/p&gt;&#xA;&lt;p&gt;本文探讨了AI访谈分析如何成为需要快速综合非结构化的定性数据的敏捷从业者的有力感知工具，尤其是在加入中等危机中的团队时。&lt;/p&gt; &lt;/p&gt;</description>
      <pubDate>Mon, 21 Apr 2025 15:00:02 +0000</pubDate>
    </item>
    <item>
      <title>【Simplifying Vector Embeddings With Go, Cosmos DB, and OpenAI】用GO，Cosmos DB和OpenAI简化矢量嵌入</title>
      <link>https://dzone.com/articles/vector-embeddings-go-cosmosdb-openai</link>
      <description>【&lt;p&gt;When working on applications that require vector, semantic, or similarity search, it&#39;s often useful to have a quick and easy way to create vector embeddings of data and save them in a vector database for further querying.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;This blog will walk you through a simple web application that allows you to quickly generate vector embeddings for various document types and store them directly in &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/cosmos-db/nosql/vector-search&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Azure Cosmos DB&lt;/a&gt;. Once stored, this data can be leveraged by other applications for tasks like vector search, part of a Retrieval-Augmented Generation (RAG) workflow, and more.&lt;/p&gt;】&lt;p&gt;在需要矢量，语义或相似性搜索的应用程序时，使用快速简便的方法来创建数据的矢量嵌入并将其保存在矢量数据库中以进行进一步查询通常很有用。 &lt;/p&gt;&#xA;&lt;p&gt;此博客将引导您浏览一个简单的Web应用程序，该应用程序允许您快速生成各种文档类型的向量嵌入，并将它们直接存储在&lt;a href =“ https://learn.microsoft.com/en-us/azure/azure/cosmos-db/nosql/nosql/nosql/nosql/noseach/vector-search-search-search-search” rel = noor =“ rel =” noorepener norefrerer norefrerere tarts = ag ag a。存储后，可以通过其他应用程序来利用此数据来用于诸如vector搜索之类的任务，一个检索生成（RAG）工作流程的一部分。&lt;/p&gt;。&lt;/p&gt;</description>
      <pubDate>Mon, 21 Apr 2025 17:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Securing Your Infrastructure and Services During the Distribution Phase】在分销阶段确保您的基础架构和服务</title>
      <link>https://dzone.com/articles/secure-infrastructure-during-distribution-phase</link>
      <description>【&lt;p&gt;In the &lt;a href=&#34;https://dzone.com/articles/building-security-into-design-phase&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;previous article&lt;/a&gt;, we discussed how to incorporate security during the design phase of the software development life cycle. Some of the strategies included threat modeling, static analysis, and code reviews. Now it is time to move past the design phase to the distribution phase.&lt;br&gt;&lt;br&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;br&gt;&#xA;  The distribution phase involves three different steps again.&lt;/p&gt;】&lt;p&gt;在&lt;a href =“ https://dzone.com/articles/building-security-into-into-design-phase-- rel =” noopener noreferrer“ target =“ _ blank”&gt;上一篇文章&lt;/a&gt;我们讨论了如何在软件开发生命周期的设计阶段中结合安全性。一些策略包括威胁建模，静态分析和代码评论。现在是时候将设计阶段移至分布阶段了。&lt;br&gt; &lt;br&gt; &lt;/p&gt;&#xA;&lt;p&gt; &lt;br&gt;&#xA;  分布阶段再次涉及三个不同的步骤。&lt;/p&gt;</description>
      <pubDate>Mon, 21 Apr 2025 19:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Stateless vs Stateful Stream Processing With Kafka Streams and Apache Flink】带有Kafka流和Apache Flink的无状态与状态流处理</title>
      <link>https://dzone.com/articles/stateless-vs-stateful-stream-processing-with-kafka</link>
      <description>【&lt;p&gt;In data-driven applications, the rise of stream processing has changed how we handle and act on data. While traditional databases, data lakes, and warehouses are effective for many batch-based use cases, they fall short in scenarios demanding low latency, scalability, and real-time decision-making.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;This post explores the key concepts of &lt;strong&gt;stateless&lt;/strong&gt; and &lt;strong&gt;stateful stream processing&lt;/strong&gt;, using &lt;strong&gt;Kafka Streams&lt;/strong&gt; and &lt;strong&gt;Apache Flink&lt;/strong&gt; as examples. These principles apply to any stream processing engine, whether open-source or a cloud service.&amp;nbsp;&lt;/p&gt;】&lt;p&gt;在数据驱动的应用程序中，流处理的兴起改变了我们处理和对数据的作用。尽管传统的数据库，数据湖泊和仓库对于许多基于批处理的用例都有效，但它们在要求低潜伏期，可扩展性和实时决策的情况下跌落。 &lt;/p&gt;&#xA;&lt;p&gt;使用&lt;strong&gt; &lt;strong&gt; &lt;strong&gt; kafka流&lt;/strong&gt;和&lt;strong&gt; apache flink &lt;/strong&gt;作为示例，这篇文章探讨了&lt;strong&gt;无状态&lt;/strong&gt;和&lt;strong&gt;状态流处理&lt;/strong&gt;的关键概念。这些原理适用于任何流处理引擎，无论是开源还是云服务。 &lt;/p&gt;</description>
      <pubDate>Mon, 21 Apr 2025 21:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Platform Engineering for Cloud Teams】云团队的平台工程</title>
      <link>https://dzone.com/articles/platform-engineering-for-cloud-teams</link>
      <description>【&lt;p&gt;Platform engineering has emerged as a key practice for cloud teams, providing self-service capabilities, automation, and governance to streamline software delivery. This practice has evolved out of scaling out DevOps at a large scale. In this blog, we will explore the role of platform engineering, its benefits, and how Cloud teams can successfully implement it.&lt;/p&gt;&#xA;&lt;h2&gt;What Is Platform Engineering?&lt;/h2&gt;&#xA;&lt;p&gt;Platform engineering is the practice of designing and building &lt;a href=&#34;https://dzone.com/articles/is-2021-the-year-of-the-internal-developer-platfor&#34;&gt;internal developer platforms&lt;/a&gt; (IDPs) that enable software teams to develop, deploy, and manage applications efficiently. These platforms integrate tools, infrastructure, and workflows to reduce cognitive load on developers, allowing them to focus on writing code rather than managing complex cloud environments and learning the processes to manage them.&amp;nbsp;&lt;/p&gt;】&lt;p&gt;平台工程已成为云团队的关键实践，提供了自助功能，自动化和治理来简化软件交付。这种做法已经大规模地扩大了Devops的发展。在此博客中，我们将探讨平台工程的作用，其好处以及云团队如何成功实施它。&lt;/p&gt;&#xA;&lt;h2&gt;什么是平台工程？&lt;/h2&gt;&#xA;&lt;p&gt;平台工程是设计和构建&lt;a href =“ https://dzone.com/articles/is-2021-the-of-the-of-the--the-internal-developer-platfor”&gt;内部开发人员平台&lt;/a&gt;（IDPS）&lt;/a&gt; IDPS &lt;/a&gt; IDPS &lt;/a&gt; IDPS &lt;/a&gt; IDPS &lt;/a&gt; IDPS &lt;/a&gt; IDPS &lt;/a&gt; IDPS &lt;/a&gt; IDPS &lt;/a&gt; IDPS &lt;/a&gt; IDPS（IDPS），可以高效地开发，部署和管理应用程序。这些平台集成了工具，基础架构和工作流程，以减少开发人员的认知负担，从而使他们专注于编写代码，而不是管理复杂的云环境并学习管理这些过程以管理它们。 &lt;/p&gt;</description>
      <pubDate>Mon, 21 Apr 2025 20:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Python curses, Part 1: Drawing With Text】Python诅咒，第1部分：用文字绘画</title>
      <link>https://dzone.com/articles/python-curses-drawing-text</link>
      <description>【&lt;p&gt;Most user interaction with Linux is done from afar via SSH connections and console applications. This, of course, is the continuing legacy of Linux’s “text only” roots, and many of these console applications tend to be “boring” workhorses which spit out line after line of output, with the occasional user input breaking up the monotony.&lt;/p&gt;&#xA;&lt;p&gt;However, there is no reason console applications cannot be “spiced up” with windowed interfaces that feature colors, formatted text, and text placed — and updated‚ at various locations in a terminal window.&lt;/p&gt;】&lt;p&gt;大多数用户与Linux的交互是通过SSH连接和控制台应用程序从远处完成的。当然，这是Linux的“仅文本”根的持续遗产，其中许多这些控制台应用程序往往是“无聊的”主持人，它们在输出线之后吐出线，偶尔的用户输入破坏单调。&lt;/p&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt;&#xA;&lt;p&gt;但是，没有理由的控制台应用程序无法通过窗口颜色，格式的文本和放置的窗户接口“加价”，并在终端窗口中的各个位置进行了更新。&lt;/p&gt;</description>
      <pubDate>Mon, 21 Apr 2025 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Thumbnail Generator Microservice for PDF in Spring Boot】PDF的缩略图生成器微服务在春季启动</title>
      <link>https://dzone.com/articles/thumbnail-generator-spring-boot-pdf</link>
      <description>【&lt;p&gt;In this article, we will delve into converting a PDF to individual PNG image files for each page. Typically, if we have a PDF document shared with our customers and need to preview the first page for users in push notifications, this article will help us create a preview thumbnail image from the PDF document.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;In this article, we will cover the Spring microservice for converting PDF documents to PNG images.&lt;/p&gt;】&lt;p&gt;在本文中，我们将研究每个页面的PDF转换为单个PNG图像文件。通常，如果我们与客户共享了PDF文档，并且需要在推送通知中预览用户的第一页，则本文将帮助我们从PDF文档创建预览缩略图。 &lt;/p&gt;&#xA;&lt;p&gt;在本文中，我们将介绍将PDF文档转换为PNG图像的春季微服务。&lt;/p&gt;</description>
      <pubDate>Mon, 21 Apr 2025 14:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Unlocking AI Coding Assistants Part 1: Real-World Use Cases】解锁AI编码助手第1部分：现实世界用例</title>
      <link>https://dzone.com/articles/ai-coding-assistant-use-case</link>
      <description>【&lt;div&gt;&#xA; &lt;p&gt;Do you think that AI coding assistants are not working for you? Do you constantly get the wrong responses and now you have given up using them? This blog will cover some use cases where AI coding assistants are helpful and will help you during your daily work. Enjoy!&lt;/p&gt;&#xA; &lt;h2&gt;Introduction&lt;/h2&gt;&#xA; &lt;p&gt;Nowadays, many &lt;a href=&#34;https://dzone.com/articles/agentic-ai-and-generative-ai&#34;&gt;AI coding &lt;/a&gt;assistants are available. These are demonstrated during conferences, in videos, described in blogs, etc. The demos are often impressive and it seems that AI is able to generate almost all of the source code for you, and all you need to do is review it. However, when you start using AI coding assistants at work, it just seems that it is not working for you and it only costs you more time. The truth lies somewhere in between. AI coding assistants can save you a lot of time for certain tasks, but they also have some limitations. It is important to learn which tasks will help you and how to recognize when you hit the limits of AI. Be aware that AI is evolving at a fast pace, so the limitations of today may be resolved in the near future.&lt;/p&gt;】&lt;div&gt;&#xA; &lt;p&gt;您认为AI编码助手不为您工作吗？您是否经常得到错误的响应，现在您已经放弃了使用它们？该博客将涵盖AI编码助手有帮助的一些用例，并在您的日常工作中为您提供帮助。享受！&lt;/p&gt;&#xA; &lt;h2&gt;简介&lt;/h2&gt;&#xA; &lt;p&gt;如今，许多&lt;a href =“ https://dzone.com/articles/agentic-aiai-ai-and-and-generative-ai”&gt; ai编码&lt;/a&gt;助理。这些在会议期间，在博客等中描述的视频中证明了这些。演示通常令人印象深刻，并且似乎AI能够为您生成几乎所有的源代码，而您需要做的就是查看它。但是，当您开始使用工作中的AI编码助手时，似乎它对您不起作用，只花费您更多的时间。真相在介于两者之间。 AI编码助手可以为您节省大量时间来完成某些任务，但他们也有一些局限性。了解哪些任务将帮助您以及如何识别您何时达到AI的限制，这一点很重要。请注意，AI正在快速发展，因此今天的局限性可能会在不久的将来解决。&lt;/p&gt;</description>
      <pubDate>Mon, 21 Apr 2025 21:30:00 +0000</pubDate>
    </item>
  </channel>
</rss>