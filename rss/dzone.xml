<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【In-Depth Analysis of MySQL 8.0 Performance Degradation】MySQL 8.0性能下降深度分析</title>
      <link>https://dzone.com/articles/mysql-80-performance-degradation-analysis</link>
      <description>【&lt;p&gt;Users tend to notice a decline in low-concurrency performance more easily, while improvements in high-concurrency performance are often harder to perceive. Therefore, maintaining low-concurrency performance is crucial, as it directly affects user experience and the willingness to upgrade [1].&lt;/p&gt;&#xA;&lt;p&gt;According to extensive user feedback, after upgrading to MySQL 8.0, users have generally perceived a decline in performance, particularly in batch insert and join operations. This downward trend has become more evident in higher versions of &lt;a href=&#34;https://dzone.com/articles/introduction-to-mysql-1&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;MySQL&lt;/a&gt;. Additionally, some MySQL enthusiasts and testers have reported performance degradation in multiple sysbench tests after upgrading.&lt;/p&gt;】&lt;p&gt;用户往往更容易注意到低并发性能的下降，而高并发性能的提升往往更难察觉。因此，维持低并发性能至关重要，它直接影响用户体验和升级意愿[1]。&lt;/p&gt;&#xA;&lt;p&gt;根据广泛的用户反馈，升级到MySQL 8.0后，用户普遍感觉到性能下降，尤其是批量插入和连接操作。这种下降趋势在较高版本的 &lt;a href=&#34;https://dzone.com/articles/introduction-to-mysql-1&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;MySQL&lt;/a 中变得更加明显&gt;。此外，一些 MySQL 爱好者和测试人员报告升级后在多个 sysbench 测试中性能下降。&lt;/p&gt;</description>
      <pubDate>Tue, 10 Dec 2024 15:00:04 +0000</pubDate>
    </item>
    <item>
      <title>【How to Automate Blob Deletion in Azure Storage Using PowerShell】如何使用 PowerShell 自动删除 Azure 存储中的 Blob</title>
      <link>https://dzone.com/articles/how-to-automate-blob-deletion-azure-storage-powershell</link>
      <description>【&lt;p&gt;Azure storage accounts are a cornerstone for data storage solutions in the Azure ecosystem, supporting various workloads, from storing SQL backups to serving media files. Automating tasks like deleting outdated or redundant blobs from storage containers can optimize storage costs and ensure efficiency.&lt;/p&gt;&#xA;&lt;p&gt;&amp;nbsp;This guide will walk you through using &lt;a href=&#34;https://dzone.com/articles/is-powershell-a-programming-language&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;PowerShell&lt;/a&gt; to safely and effectively delete blobs from an Azure storage account. Whether you&#39;re managing SQL backups, application logs, or other unstructured data, this process can be applied to a wide range of scenarios where cleanup is a routine requirement.&lt;/p&gt;】&lt;p&gt;Azure 存储帐户是 Azure 生态系统中数据存储解决方案的基石，支持从存储 SQL 备份到提供媒体文件等各种工作负载。自动化任务（例如从存储容器中删除过时或冗余的 blob）可以优化存储成本并确保效率。&lt;/p&gt;&#xA;&lt;p&gt; 本指南将引导您使用 &lt;a href=&#34;https://dzone.com/articles/is-powershell-a-programming-language&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;PowerShell&lt;/ a&gt; 安全有效地从 Azure 存储帐户中删除 blob。无论您是管理 SQL 备份、应用程序日志还是其他非结构化数据，此过程都可以应用于需要进行常规清理的各种场景。&lt;/p&gt;</description>
      <pubDate>Tue, 10 Dec 2024 16:00:01 +0000</pubDate>
    </item>
    <item>
      <title>【Angular Input/Output Signals: The New Component Communication】角度输入/输出信号：新的组件通信</title>
      <link>https://dzone.com/articles/angular-input-output-signals</link>
      <description>【&lt;p&gt;Angular 17 brings a lot of brand-new features. Some focus on performance, others on tooling and build improvements, but perhaps one of the most exciting enhancements is in component interaction. This version officially introduces &lt;strong&gt;signals&lt;/strong&gt; — a revolutionary way of managing reactivity in Angular applications.&lt;/p&gt;&#xA;&lt;p&gt;In this article, we’ll explore how to use signals for parent-child component communication. We’ll dive into what signals are, how they simplify inputs and outputs, and the additional features they bring to the table.&lt;/p&gt;】&lt;p&gt;Angular 17 带来了很多全新的功能。有些关注性能，有些关注工具和构建改进，但也许最令人兴奋的增强之一是组件交互。此版本正式引入了&lt;strong&gt;信号&lt;/strong&gt;——一种在 Angular 应用程序中管理反应性的革命性方法。&lt;/p&gt;&#xA;&lt;p&gt;在本文中，我们将探讨如何使用信号进行父子组件通信。我们将深入探讨什么是信号、它们如何简化输入和输出，以及它们带来的附加功能。&lt;/p&gt;</description>
      <pubDate>Tue, 10 Dec 2024 19:00:03 +0000</pubDate>
    </item>
    <item>
      <title>【Serverless Computing: The Future of Programming and Application Deployment Innovations】无服务器计算：编程和应用程序部署创新的未来</title>
      <link>https://dzone.com/articles/serverless-computing-the-future-of-application-deployment</link>
      <description>【&lt;p&gt;Serverless computing is known as the cloud computing model, which enhances management infrastructure with transformative forces in application development. This aspect eliminated the need for provision and management services by developers, which contributed to a shift in focus on application design and deployment procedures. This computing delivers function-as-a-service by providing infrastructure and allocation of computing resources in cloud services.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;The &lt;a href=&#34;https://scienceacadpress.com/index.php/jaasd/article/dow&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;serverless computing model&lt;/a&gt; adopted by Cloud architecture in the creation of scalable cloud solutions is used by &amp;nbsp;Microsoft and Amazon in the construction of in-house products. This aspect guides the promotion of its function through exceptions from the nearest servers to reduce response time in cloud service and its application. &amp;nbsp;&lt;span class=&#34;fr-img-caption fr-fic fr-dib lazyloaded&#34; style=&#34;width: 535px;&#34;&gt;&lt;span class=&#34;fr-img-wrap&#34;&gt;&lt;img border=&#34;0&#34; data-image=&#34;true&#34; data-new=&#34;false&#34; data-sizeformatted=&#34;66.6 kB&#34; data-mimetype=&#34;image/png&#34; data-creationdate=&#34;1727794060786&#34; data-creationdateformatted=&#34;10/01/2024 02:47 PM&#34; data-type=&#34;temp&#34; data-url=&#34;https://dz2cdn1.dzone.com/storage/temp/17953070-1727794060055.png&#34; data-modificationdate=&#34;null&#34; data-size=&#34;66614&#34; data-name=&#34;1727794060055.png&#34; data-id=&#34;17953070&#34; data-src=&#34;https://dz2cdn1.dzone.com/storage/temp/17953070-1727794060055.png&#34; alt=&#34;Serverless usage in cloud services&#34; class=&#34;lazyload&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;】&lt;p&gt;无服务器计算被称为云计算模型，它通过应用程序开发中的变革力量来增强管理基础设施。这方面消除了开发人员提供和管理服务的需要，这有助于将重点转移到应用程序设计和部署过程上。这种计算通过在云服务中提供基础设施和计算资源分配来提供功能即服务。 &lt;/p&gt;&#xA;&lt;p&gt;云架构采用的&lt;a href=&#34;https://scienceacadpress.com/index.php/jaasd/article/dow&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;无服务器计算模型&lt;/a&gt; Microsoft 和 Amazon 在构建内部产品时使用了创建可扩展云解决方案的方法。这方面指导通过就近服务器的异常来提升其功能，以减少云服务及其应用的响应时间。  &lt;span class=&#34;fr-img-caption fr-fic fr-diblazyloaded&#34; style=&#34;width: 535px;&#34;&gt;&lt;span class=&#34;fr-img-wrap&#34;&gt;&lt;img border=&#34;0&#34; data-image= “真”数据新=“假”数据大小格式化=“66.6 kB”数据mimetype=“图像/ png”数据创建日期=“1727794060786” data-creationdateformatted=&#34;10/01/2024 02:47 PM&#34; data-type=&#34;temp&#34; data-url=&#34;https://dz2cdn1.dzone.com/storage/temp/17953070-1727794060055.png&#34; data-modificationdate =“空”数据大小=“66614” data-name=&#34;1727794060055.png&#34; data-id=&#34;17953070&#34; data-src=&#34;https://dz2cdn1.dzone.com/storage/temp/17953070-1727794060055.png&#34; alt=&#34;云服务中的无服务器使用&#34;类=“lazyload”&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;</description>
      <pubDate>Tue, 10 Dec 2024 20:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Why I&#39;ll Never Go Back to GZIP After Trying ZSTD】为什么我在尝试 ZSTD 后再也不会回到 GZIP</title>
      <link>https://dzone.com/articles/why-ill-never-go-back-to-gzip-after-trying-zstd</link>
      <description>【&lt;p data-selectable-paragraph=&#34;&#34;&gt;Data processing speed and efficiency matter most with big datasets. GZIP and ZLIB compressed data for years. But ZSTD often works much better now.&lt;/p&gt;&#xA;&lt;p data-selectable-paragraph=&#34;&#34;&gt;Let us investigate a compression experiment comparing &lt;strong&gt;ZSTD&lt;/strong&gt;, &lt;strong&gt;GZIP&lt;/strong&gt;, and &lt;strong&gt;ZLIB&lt;/strong&gt; regarding speed, compression ratio, and decompression efficiency. By the end, you’ll see why ZSTD should be your go-to choice when compressing large data.&lt;/p&gt;】&lt;p data-selectable-paragraph=&#34;&#34;&gt;对于大型数据集，数据处理速度和效率最为重要。 GZIP 和 ZLIB 压缩数据多年。但 ZSTD 现在通常效果更好。&lt;/p&gt;&#xA;&lt;p data-selectable-paragraph=&#34;&#34;&gt;让我们研究一个压缩实验，比较 &lt;strong&gt;ZSTD&lt;/strong&gt;、&lt;strong&gt;GZIP&lt;/strong&gt; 和 &lt;strong&gt;ZLIB&lt;/strong&gt; 的速度、压缩比和减压效率。最后，您将了解为什么 ZSTD 应该成为压缩大数据时的首选。&lt;/p&gt;</description>
      <pubDate>Tue, 10 Dec 2024 13:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Demystifying Kubernetes in 5 Minutes】5 分钟揭秘 Kubernetes</title>
      <link>https://dzone.com/articles/demystifying-kubernetes</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://dzone.com/refcardz/getting-started-kubernetes&#34;&gt;Kubernetes&lt;/a&gt; is not new and has been a de-facto standard of deployments and &lt;a href=&#34;https://dzone.com/articles/what-is-ci-cd&#34;&gt;CI/CD&lt;/a&gt; at most companies for a while. The goal of this article is to make you &lt;em&gt;familiar&lt;/em&gt; with all the terms and jargon that Kubernetes experts use, in approximately 5 minutes!&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;Introduction to Kubernetes&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Kubernetes provides a scalable framework to &lt;a href=&#34;https://dzone.com/articles/components-of-container-management&#34;&gt;manage containers&lt;/a&gt;, offering features that span basic cluster architecture to advanced workload orchestration. This piece goes over both the basic and advanced features of Kubernetes. It talks about architecture, resource management, layered security, and networking solutions. It ends with looking at service meshes and persistent storage.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://dzone.com/refcardz/getting-started-kubernetes&#34;&gt;Kubernetes&lt;/a&gt; 并不是什么新鲜事，而且已经成为事实上的部署标准，&lt;大多数公司都会使用 href=&#34;https://dzone.com/articles/what-is-ci-cd&#34;&gt;CI/CD&lt;/a&gt; 一段时间。本文的目标是让您在大约 5 分钟内&lt;em&gt;熟悉&lt;/em&gt; Kubernetes 专家使用的所有术语和行话！&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;Kubernetes 简介&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Kubernetes 提供了一个可扩展的框架来&lt;a href=&#34;https://dzone.com/articles/components-of-container-management&#34;&gt;管理容器&lt;/a&gt;，提供涵盖基本功能的功能集群架构到高级工作负载编排。本文介绍了 Kubernetes 的基本和高级功能。它讨论了架构、资源管理、分层安全和网络解决方案。最后我们将研究服务网格和持久存储。&lt;/p&gt;</description>
      <pubDate>Tue, 10 Dec 2024 14:00:01 +0000</pubDate>
    </item>
    <item>
      <title>【Understanding Functional Programming: A Quick Guide for Beginners】了解函数式编程：初学者快速指南</title>
      <link>https://dzone.com/articles/understanding-functional-programming</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Imagine you&#39;re working on a complex puzzle. There are two ways to solve it:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA; &lt;li dir=&#34;ltr&#34;&gt;&#xA;  &lt;p dir=&#34;ltr&#34;&gt;&lt;strong&gt;The first way&lt;/strong&gt;: You keep rearranging all the pieces directly on the table, moving them around, and sometimes the pieces you&#39;ve already arranged get disturbed. This is like traditional imperative programming, where we directly modify data and state as we go.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;想象一下您正在解决一个复杂的谜题。有两种方法可以解决：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA; &lt;li 目录=“ltr”&gt;&#xA;  &lt;p dir=&#34;ltr&#34;&gt;&lt;strong&gt;第一种方法&lt;/strong&gt;：你不断地直接在桌子上重新排列所有棋子，移动它们，有时你已经排列好的棋子会被打乱。这就像传统的命令式编程，我们直接修改数据和状态。&lt;/p&gt;</description>
      <pubDate>Tue, 10 Dec 2024 18:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【A Practical Guide to Securing NodeJS APIs With JWT】使用 JWT 保护 NodeJS API 的实用指南</title>
      <link>https://dzone.com/articles/a-practical-guide-to-securing-nodejs-apis-with-jwt</link>
      <description>【&lt;p&gt;NodeJS is a very popular platform for building backend services and creating API endpoints. Several large companies use NodeJS in their microservices tech stack, which makes it a very useful platform to learn and know, similar to other popular languages like Java and Python. ExpressJS is a leading framework used for building APIs, and TypeScript provides necessary strict typing support, which is very valuable in large enterprise application development. TypeScript and ExpressJS combined together allow the development of robust distributed backend systems. Securing access to such a system is very critical.&lt;/p&gt;&#xA;&lt;p&gt;The &lt;a href=&#34;https://dzone.com/articles/a-comprehensive-exploration-of-nodejs-a-practical&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;NodeJS platform&lt;/a&gt; offers several options for securing APIs, such as JWT (JSON Web Token), OAuth2, Session-based authentication, and more. JWT has seen a rise in adoption due to several key characteristics when it comes to securing the APIs. Some of the noteworthy benefits of &amp;nbsp;using JWT to secure APIs are noted below:&amp;nbsp;&lt;/p&gt;】&lt;p&gt;NodeJS 是一个非常流行的平台，用于构建后端服务和创建 API 端点。几家大公司在其微服务技术堆栈中使用 NodeJS，这使其成为一个非常有用的学习和了解平台，类似于 Java 和 Python 等其他流行语言。 ExpressJS是用于构建API的领先框架，而TypeScript提供了必要的严格类型支持，这在大型企业应用程序开发中非常有价值。 TypeScript 和 ExpressJS 结合在一起可以开发健壮的分布式后端系统。确保对此类系统的访问安全非常关键。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/a-compressive-exploration-of-nodejs-a-practical&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;NodeJS 平台&lt;/a &gt; 提供多种用于保护 API 的选项，例如 JWT（JSON Web 令牌）、OAuth2、基于会话的身份验证等。由于在保护 API 方面的几个关键特征，JWT 的采用率有所上升。下面列出了使用 JWT 保护 API 的一些值得注意的好处：&lt;/p&gt;</description>
      <pubDate>Tue, 10 Dec 2024 17:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Advancing Explainable Natural Language Generation (NLG): Techniques, Challenges, and Applications】推进可解释自然语言生成 (NLG)：技术、挑战和应用</title>
      <link>https://dzone.com/articles/advancing-explainable-natural-language-generation</link>
      <description>【&lt;p&gt;Natural language generation (NLG) lies at the core of applications ranging from conversational agents to content creation. Despite its advances, NLG systems often operate as &#34;black boxes,&#34; leaving developers and users uncertain about their decision-making processes. Explainable AI (XAI) bridges this gap by making NLG models more interpretable and controllable.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;This article explores practical techniques and tools for enhancing the transparency of &lt;a href=&#34;https://dzone.com/articles/what-is-natural-language-interaction&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;NLG systems&lt;/a&gt;, offering detailed code snippets and step-by-step explanations to guide developers in understanding and improving model behavior. Topics include attention visualization, controllable generation, feature attribution, and integrating explainability into workflows. By focusing on real-world examples, this article serves as an educational guide for building more interpretable NLG systems.&lt;/p&gt;】&lt;p&gt;自然语言生成 (NLG) 是从对话代理到内容创建等应用程序的核心。尽管 NLG 系统取得了进步，但它通常作为“黑匣子”运行，使开发人员和用户无法确定其决策过程。可解释的人工智能 (XAI) 通过使 NLG 模型更具可解释性和可控性来弥补这一差距。 &lt;/p&gt;&#xA;&lt;p&gt;本文探讨了增强&lt;a href=&#34;https://dzone.com/articles/what-is-natural-language-interaction&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank 透明度的实用技术和工具&#34;&gt;NLG 系统&lt;/a&gt;，提供详细的代码片段和分步说明，指导开发人员理解和改进模型行为。主题包括注意力可视化、可控生成、特征归因以及将可解释性集成到工作流程中。通过关注现实世界的示例，本文可作为构建更具可解释性的 NLG 系统的教育指南。&lt;/p&gt;</description>
      <pubDate>Tue, 10 Dec 2024 21:00:05 +0000</pubDate>
    </item>
    <item>
      <title>【Protecting Your API Ecosystem: The Role of Rate Limiting in Service Stability】保护您的 API 生态系统：速率限制在服务稳定性中的作用</title>
      <link>https://dzone.com/articles/the-role-of-rate-limiting-in-service-stability</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;In modern web and mobile applications, APIs are the backbone of communication between different components, services, and users. However, as API usage grows, there is a risk of overloading the system, causing degraded performance or even service outages. One of the most effective ways to prevent such issues is through API rate limiting.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://dzone.com/articles/rate-limiting-strategies-for-efficient-traffic-man&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Rate limiting&lt;/a&gt; refers to the practice of restricting the number of requests a user or system can make to an API within a specific timeframe, which is measured in requests per second or per minute. This ensures that no single user or client overwhelms the API, allowing for fair usage and protecting the backend from being flooded with excessive traffic.&amp;nbsp;&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;在现代网络和移动应用程序中，API 是不同组件、服务和用户之间通信的支柱。然而，随着 API 使用量的增长，存在系统过载的风险，导致性能下降甚至服务中断。防止此类问题的最有效方法之一是通过 API 速率限制。&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://dzone.com/articles/rate-limiting-strategies-for-efficient-traffic-man&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;费率限制是指限制用户或系统在特定时间范围内可以向 API 发出的请求数量的做法，以每秒或每分钟的请求数来衡量。这可确保没有任何单个用户或客户端淹没 API，从而实现公平使用并保护后端免遭过多流量的淹没。 &lt;/p&gt;</description>
      <pubDate>Tue, 10 Dec 2024 22:00:02 +0000</pubDate>
    </item>
  </channel>
</rss>