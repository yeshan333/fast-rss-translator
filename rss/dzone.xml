<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【The Future of Data Lies in Transformer Models vs. Big Data Transformations】数据的未来在于 Transformer 模型与大数据转换</title>
      <link>https://dzone.com/articles/the-future-of-data-lies-in-transformer-models-vs-b</link>
      <description>【&lt;p data-sourcepos=&#34;1:1-1:76&#34;&gt;Last year, we witnessed the explosive rise of large models, generating global enthusiasm and making AI seem like a solution to all problems. This year, as the hype subsides, large models have entered a deeper phase, aiming to reshape the foundational logic of various industries. In the realm of big data processing, the collision between large models and traditional ETL (Extract, Transform, Load) processes has sparked new debates.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p data-sourcepos=&#34;1:1-1:76&#34;&gt;&lt;a href=&#34;https://dzone.com/articles/understanding-llm-technology&#34;&gt;Large models&lt;/a&gt; feature “Transformers,” while ETL relies on “Transform” processes — similar names representing vastly different paradigms. Some voices boldly predict: &lt;em&gt;&#34;ETL will be completely replaced in the future, as large models can handle all data!&#34;&lt;/em&gt; Does this signal the end of the decades-old ETL framework underpinning data processing? Or is it merely a misunderstood prediction? Behind this conflict lies a deeper contemplation of technology&#39;s future.&lt;/p&gt;】&lt;p data-sourcepos=&#34;1:1-1:76&#34;&gt;去年，我们见证了大型模型的爆炸性崛起，引发了全球的热情，让人工智能似乎成为了所有问题的解决方案。今年，随着炒作的消退，大模型进入更深层次，旨在重塑各行业的基础逻辑。在大数据处理领域，大型模型与传统ETL（提取、转换、加载）流程之间的冲突引发了新的争论。 &lt;/p&gt;&#xA;&lt;p data-sourcepos=&#34;1:1-1:76&#34;&gt;&lt;a href=&#34;https://dzone.com/articles/understanding-llm-technology&#34;&gt;大型模型&lt;/a&gt;具有“变形金刚”功能，而ETL 依赖于“转换”过程——相似的名称代表截然不同的范式。一些声音大胆预测：“ETL在未来将被完全取代，因为大型模型可以处理所有数据！”这是否标志着支撑数据处理的已有数十年历史的ETL框架的终结？或者这只是一个被误解的预测？这场冲突的背后，隐藏着对技术未来的更深层次的思考。&lt;/p&gt;</description>
      <pubDate>Wed, 25 Dec 2024 13:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Addressing the Problem of Drift Detection and Drift Cause Analysis】解决漂移检测和漂移原因分析问题</title>
      <link>https://dzone.com/articles/the-problem-of-drift-detection-and-drift-cause-analysis</link>
      <description>【&lt;p&gt;Anyone working in DevOps today would likely agree that codifying resources makes it easier to observe, govern, and automate. However, most engineers would also acknowledge that this transformation brings with it a new set of challenges.&lt;/p&gt;&#xA;&lt;p&gt;Perhaps the biggest challenge of &lt;a href=&#34;https://dzone.com/articles/infrastructure-as-code-everything-you-need-to-know&#34;&gt;IaC operations&lt;/a&gt; is drifts — a scenario where runtime environments deviate from their IaC-defined states, creating a festering issue that could have serious long-term implications. These discrepancies undermine the consistency of cloud environments, leading to potential issues with infrastructure reliability and maintainability and even significant security and compliance risks.&amp;nbsp;&lt;/p&gt;】&lt;p&gt;当今从事 DevOps 工作的任何人都可能会同意，对资源进行编码可以使观察、管理和自动化变得更容易。然而，大多数工程师也承认这种转变带来了一系列新的挑战。&lt;/p&gt;&#xA;&lt;p&gt;IaC 运营的最大挑战也许是漂移——在这种情况下，运行时环境偏离 IaC 定义的状态，从而产生可能产生严重长期影响的恶化问题。这些差异破坏了云环境的一致性，导致基础设施可靠性和可维护性方面的潜在问题，甚至严重的安全和合规性风险。 &lt;/p&gt;</description>
      <pubDate>Wed, 25 Dec 2024 15:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【How to Build a YouTube Clone With Svelte.js, Firebase, and Permit.io】如何使用 Svelte.js、Firebase 和 Permit.io 构建 YouTube 克隆</title>
      <link>https://dzone.com/articles/build-a-youtube-clone-with-sveltejs-firebase-permitio</link>
      <description>【&lt;p data-line=&#34;2&#34; dir=&#34;auto&#34;&gt;Creating a video-sharing application like YouTube is not just about front-end design and data storage; you need to have secure dynamic control over what users can see and do. With Svelte.js handling the interface and Firebase supporting backend functionalities, integrating Permit.io enables robust access control, using role-based access control (RBAC) to enforce detailed permissions.&lt;/p&gt;&#xA;&lt;p data-line=&#34;4&#34; dir=&#34;auto&#34;&gt;In this tutorial, you will build a secure YouTube clone that allows users to interact only within limited boundaries, according to their role and context.&lt;/p&gt;】&lt;p data-line=&#34;2&#34; dir=&#34;auto&#34;&gt;创建像 YouTube 这样的视频共享应用程序不仅仅涉及前端设计和数据存储；还涉及前端设计和数据存储。您需要对用户可以看到的内容和可以执行的操作进行安全的动态控制。通过 Svelte.js 处理界面和 Firebase 支持后端功能，集成 Permit.io 可实现强大的访问控制，并使用基于角色的访问控制 (RBAC) 来强制实施详细的权限。&lt;/p&gt;&#xA;&lt;p data-line=&#34;4&#34; dir=&#34;auto&#34;&gt;在本教程中，您将构建一个安全的 YouTube 克隆，允许用户根据其角色和上下文仅在有限的范围内进行交互。&lt;/p&gt;</description>
      <pubDate>Wed, 25 Dec 2024 17:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【AWS Performance Tuning: Why EC2 Autoscaling Isn’t a Silver Bullet】AWS 性能调优：为什么 EC2 自动扩展不是灵丹妙药</title>
      <link>https://dzone.com/articles/why-ec2-autoscaling-isnt-a-silver-bullet</link>
      <description>【&lt;p&gt;AWS EC2 Autoscaling is frequently regarded as the ideal solution for managing fluctuating workloads. It offers automatic adjustments of computing resources in response to demand, theoretically removing the necessity for manual involvement. Nevertheless, depending exclusively on &lt;a href=&#34;https://aws.amazon.com/ec2/autoscaling/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;EC2 Autoscaling&lt;/a&gt; can result in inefficiencies, overspending, and performance issues. Although Autoscaling is an effective tool, it does not serve as a one-size-fits-all remedy.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;Here’s a comprehensive exploration of why Autoscaling isn’t a guaranteed fix and suggestions for engineers to improve its performance and cost-effectiveness.&lt;/p&gt;】&lt;p&gt;AWS EC2 Autoscaling 通常被认为是管理波动工作负载的理想解决方案。它可以根据需求自动调整计算资源，理论上消除了手动参与的必要性。然而，完全依赖 &lt;a href=&#34;https://aws.amazon.com/ec2/autoscaling/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;EC2 Autoscaling&lt;/a&gt; 可能会导致效率低下、超支、和性能问题。尽管自动缩放​​是一种有效的工具，但它并不是万能的补救措施。 &lt;/p&gt;&#xA;&lt;p&gt;这里全面探讨了为什么自动缩放不能保证修复，并为工程师提供了提高其性能和成本效益的建议。&lt;/p&gt;</description>
      <pubDate>Wed, 25 Dec 2024 22:00:04 +0000</pubDate>
    </item>
    <item>
      <title>【Top Platforms for End-to-End Testing in 2024】2024 年端到端测试的顶级平台</title>
      <link>https://dzone.com/articles/top-platforms-for-end-to-end-testing-in-2024</link>
      <description>【&lt;p&gt;With the app production rate matching the huge user demand, we see millions of apps released every year. Statista states that the total revenue from the app market may reach a projected market volume of &lt;a href=&#34;https://www.statista.com/outlook/amo/app/worldwide&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;US$673.80 billion by 2027&lt;/a&gt;. As users expect the best experience in every app, each new software is being released with more innovative features and benefits for added convenience. This makes it crucial for the different app components, including UI and API layers, networks, and external databases, to perform well together.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;Malfunctions in even a single component can have a cascading effect, leading to the app crashing. App developers realize that the only way to ensure the smooth functioning of their applications is to perform comprehensive testing with an end-to-end testing tool. The technique called &lt;a href=&#34;https://dzone.com/articles/what-is-end-to-end-testing-3&#34;&gt;end-to-end testing&lt;/a&gt; verifies an application’s functionality from the users’ perspective, ensuring that all its components work as intended.&amp;nbsp;&lt;/p&gt;】&lt;p&gt;随着应用程序的生产率与巨大的用户需求相匹配，我们每年都会看到数以百万计的应用程序发布。 Statista 表示，应用程序市场的总收入可能达到预计的市场规模 &lt;a href=&#34;https://www.statista.com/outlook/amo/app/worldwide&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank &#34;&gt;到 2027 年将达到 6738 亿美元&lt;/a&gt;。由于用户期望每个应用程序都能获得最佳体验，因此每个新软件的发布都具有更多创新功能和优势，以增加便利性。这使得不同的应用程序组件（包括 UI 和 API 层、网络和外部数据库）能够良好地协同工作至关重要。 &lt;/p&gt;&#xA;&lt;p&gt;即使是单个组件的故障也会产生连锁效应，导致应用程序崩溃。应用程序开发人员意识到，确保应用程序顺利运行的唯一方法是使用端到端测试工具执行全面测试。称为&lt;a href=&#34;https://dzone.com/articles/what-is-end-to-end-testing-3&#34;&gt;端到端测试&lt;/a&gt;的技术可验证用户的应用程序功能&#39; 的角度，确保其所有组件按预期工作。 &lt;/p&gt;</description>
      <pubDate>Wed, 25 Dec 2024 19:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Ulyp: Recording Java Execution Flow for Faster Debugging】Ulyp：记录 Java 执行流程以加快调试速度</title>
      <link>https://dzone.com/articles/ulyp-recording-java-execution-flow-for-faster-debugging</link>
      <description>【&lt;p&gt;The article presents &lt;a href=&#34;https://github.com/0xaa4eb/ulyp&#34; rel=&#34;noopener ugc nofollow&#34; target=&#34;_blank&#34;&gt;Ulyp&lt;/a&gt;, which is an open-source instrumentation agent that records method calls (including arguments and return values) of all third-party libraries of JVM apps. Software engineers can later upload a recording file to the UI desktop app in order to better understand the internals of libraries and even all the applications. The tool can help developers understand the internals of frameworks faster, gain deeper insights, find inefficiencies in software, and debug more effectively.&lt;/p&gt;&#xA;&lt;p data-selectable-paragraph=&#34;&#34;&gt;In a few words, Ulyp allows to run this code, which sets up a database source, a cache over the source, and then queries the cache:&lt;/p&gt;】&lt;p&gt;本文介绍了 &lt;a href=&#34;https://github.com/0xaa4eb/ulyp&#34; rel=&#34;noopener ugc nofollow&#34; target=&#34;_blank&#34;&gt;Ulyp&lt;/a&gt;，它是一个开源检测代理记录JVM应用程序的所有第三方库的方法调用（包括参数和返回值）。软件工程师稍后可以将录制文件上传到 UI 桌面应用程序，以便更好地了解库甚至所有应用程序的内部结构。该工具可以帮助开发人员更快地了解框架的内部结构，获得更深入的见解，发现软件中的低效问题并更有效地进行调试。&lt;/p&gt;&#xA;&lt;p data-selectable-paragraph=&#34;&#34;&gt;简而言之，Ulyp 允许运行此代码，该代码设置数据库源、源上的缓存，然后查询缓存：&lt;/p&gt;</description>
      <pubDate>Wed, 25 Dec 2024 18:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Strengthening Cloud Security: Privacy-Preserving Techniques for Compliance With Regulations and the NIST Framework】加强云安全：遵守法规和 NIST 框架的隐私保护技术</title>
      <link>https://dzone.com/articles/privacy-preserving-techniques-for-regulatory-compliance</link>
      <description>【&lt;p&gt;As cloud adoption continues to accelerate, securing sensitive data while complying with regulations like &lt;strong&gt;GDPR&amp;nbsp;&lt;/strong&gt;(General Data Protection Regulation), &lt;strong&gt;CCPA&amp;nbsp;&lt;/strong&gt;(California Consumer Privacy Act), and &lt;strong&gt;HIPAA&amp;nbsp;&lt;/strong&gt;(Health Insurance Portability and Accountability Act) is paramount. The flexibility and scalability that cloud environments offer also introduce complex security challenges. Organizations must balance these benefits with the need to protect user data using privacy-preserving techniques such as encryption, blockchain, machine learning, and more.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;In this article, we explore how these techniques enhance cloud security and help achieve regulatory compliance, all while aligning with the &lt;strong&gt;NIST Cybersecurity Framework&lt;/strong&gt; for a comprehensive security strategy.&lt;/p&gt;】&lt;p&gt;随着云采用的不断加速，保护敏感数据的同时遵守&lt;strong&gt;GDPR&lt;/strong&gt;（一般数据保护条例）、&lt;strong&gt;CCPA&lt;/strong&gt;（加州消费者隐私法案）和&lt; strong&gt;HIPAA（健康保险流通与责任法案）至关重要。云环境提供的灵活性和可扩展性也带来了复杂的安全挑战。组织必须平衡这些好处与使用加密、区块链、机器学习等隐私保护技术保护用户数据的需求。 &lt;/p&gt;&#xA;&lt;p&gt;在本文中，我们将探讨这些技术如何增强云安全性并帮助实现监管合规性，同时与&lt;strong&gt;NIST 网络安全框架&lt;/strong&gt;保持一致以实现全面的安全策略。&lt;/p&gt;</description>
      <pubDate>Wed, 25 Dec 2024 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Spring Boot WebClient: Performance Optimization and Resilience】Spring Boot WebClient：性能优化和弹性</title>
      <link>https://dzone.com/articles/spring-boot-webclient-optimizing-performance-and-resilience</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Spring WebClient is a reactive, non-blocking HTTP (HyperText Transfer Protocol) client designed for making requests to external services. It belongs to the Spring WebFlux framework and provides advanced, scalable handling of HTTP requests more efficiently than the RestTemplate.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://dzone.com/articles/spring-webclient-and-java-date-time-fields&#34;&gt;WebClient&lt;/a&gt; also supports parallel and reactive programming, making it suitable to perform a large volume of operations without blocking requests. It is ideal when you want to build high-performance applications, either by making external API calls or having thousands of concurrent requests.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;Spring WebClient 是一个反应式、非阻塞 HTTP（超文本传输​​协议）客户端，设计用于向外部服务发出请求。它属于 Spring WebFlux 框架，比 RestTemplate 更有效地提供高级、可扩展的 HTTP 请求处理。 &lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://dzone.com/articles/spring-webclient-and-java-date-time-fields&#34;&gt;WebClient&lt;/a&gt; 还支持并行和反应式编程，使其适合在不阻塞请求的情况下执行大量操作。当您想要通过进行外部 API 调用或处理数千个并发请求来构建高性能应用程序时，它是理想的选择。&lt;/p&gt;</description>
      <pubDate>Wed, 25 Dec 2024 21:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Bitmaps in Dragonfly: Compact Data With Powerful Analytics】Dragonfly 中的位图：具有强大分析功能的紧凑数据</title>
      <link>https://dzone.com/articles/bitmaps-in-dragonfly-compact-data-with-powerful-analytics</link>
      <description>【&lt;p&gt;Do you know that you can represent huge amounts of binary data super compactly by using just a few commands? That&#39;s where the &lt;strong&gt;Bitmap&lt;/strong&gt; data type in Dragonfly comes in. Under the hood, bitmaps are stored as &lt;strong&gt;String&lt;/strong&gt; values, but what makes them special is the ability to perform powerful bit-level operations. Whether you&#39;re counting active users across millions of entries or performing complex bitwise calculations, bitmaps offer a super-efficient way to handle binary data.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;Let&#39;s dive in and explore the related commands and use cases in this post.&lt;/p&gt;】&lt;p&gt;您知道只需使用几个命令就可以超级紧凑地表示大量二进制数据吗？这就是 Dragonfly 中的&lt;strong&gt;位图&lt;/strong&gt;数据类型的用武之地。在幕后，位图存储为&lt;strong&gt;字符串&lt;/strong&gt;值，但它们的特别之处在于能够执行强大的位级操作运营。无论您是计算数百万个条目中的活跃用户数，还是执行复杂的按位计算，位图都提供了一种处理二进制数据的超高效方法。 &lt;/p&gt;&#xA;&lt;p&gt;让我们深入探讨本文中的相关命令和用例。&lt;/p&gt;</description>
      <pubDate>Wed, 25 Dec 2024 20:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【How OpenAI’s Downtime Incident Teaches Us to Build More Resilient Systems】OpenAI 的停机事件如何教会我们构建更具弹性的系统</title>
      <link>https://dzone.com/articles/what-we-should-learn-from-openais-downtime-incident</link>
      <description>【&lt;p&gt;On December 11, 2024, OpenAI services experienced significant downtime due to an issue stemming from a new telemetry service deployment. This incident impacted API, ChatGPT, and Sora services, resulting in service disruptions that lasted for several hours. As a company that aims to provide accurate and efficient AI solutions, OpenAI has shared a detailed post-mortem report to transparently discuss what went wrong and how they plan to prevent similar occurrences in the future.&lt;/p&gt;&#xA;&lt;p&gt;In this article, I will describe the technical aspects of the incident, break down the root causes, and explore key lessons that developers and organizations managing distributed systems can take away from this event.&lt;/p&gt;】&lt;p&gt;2024 年 12 月 11 日，由于新遥测服务部署出现问题，OpenAI 服务出现严重停机。此事件影响了 API、ChatGPT 和 Sora 服务，导致服务中断持续数小时。作为一家致力于提供准确高效的人工智能解决方案的公司，OpenAI 分享了一份详细的事后分析报告，以透明地讨论出了什么问题以及他们计划如何防止未来发生类似情况。&lt;/p&gt;&#xA;&lt;p&gt;在本文中，我将描述该事件的技术方面，分解根本原因，并探讨管理分布式系统的开发人员和组织可以从该事件中汲取的重要教训。&lt;/p&gt;</description>
      <pubDate>Wed, 25 Dec 2024 14:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>