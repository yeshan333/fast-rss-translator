<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Jakarta EE 11 and the Road Ahead With Jakarta EE 12】雅加达EE 11和雅加达EE前方的道路12</title>
      <link>https://dzone.com/articles/jakarta-ee-11-12-release-enterprise-java</link>
      <description>【&lt;p data-pm-slice=&#34;1 1 []&#34;&gt;&lt;a href=&#34;https://jakarta.ee/release/11/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Jakarta EE 11 is now available&lt;/a&gt;, and it’s more than just a version update. It’s the beginning of a new era in enterprise Java—one that aligns with modern Java standards, simplifies the platform, and positions it for the future of cloud-native development. But it doesn’t stop there. Jakarta EE 12 is already shaping up to push the platform even further.&lt;/p&gt;&#xA;&lt;p&gt;Let’s explore what Jakarta EE 11 delivers and how Jakarta EE 12 is preparing us for a more powerful and modern Java ecosystem.&lt;/p&gt;】&lt;p data-pm-slice =“ 1 1 []”&gt; &lt;a href =“ https://jakarta.ee/release/11/11/” rel =“ noopener noreferrer” target =“ _ blank”&gt; jakarta ee 11现在可用&lt;/a&gt;，而且它比仅仅是版本更新更新。这是Enterprise Java的新时代的开始，它符合现代Java标准，简化了平台，并将其定位为云本地发展的未来。但这并不止于此。雅加达EE 12已经在塑造以进一步推动平台。&lt;/p&gt;&#xA;&lt;p&gt;让我们探索雅加达EE 11提供的内容以及雅加达EE 12如何为我们做好准备更强大，更现代的Java生态系统。&lt;/p&gt;</description>
      <pubDate>Tue, 01 Jul 2025 11:00:05 +0000</pubDate>
    </item>
    <item>
      <title>【A Keycloak Example: Building My First MCP Server Tools With Quarkus】一个KeyCloak示例：使用Quarkus构建我的第一个MCP服务器工具</title>
      <link>https://dzone.com/articles/keycloak-mcp-server-tools-quarkus</link>
      <description>【&lt;p&gt;Recently, I explored how the Model Context Protocol (MCP) is gaining traction in the Java ecosystem, with frameworks like Spring AI, &lt;a href=&#34;https://dzone.com/articles/processing-images-in-java-with-opencv-and-quarkus&#34;&gt;Quarkus&lt;/a&gt;, and LangChain4j starting to adopt it for integrating language models via standardized interfaces. It was also time to start experimenting with writing an MCP Server myself (well maybe not the &lt;a href=&#34;https://youtu.be/LCzeb61bU9A?si=7mwaSEcaoEWuUB2z&amp;amp;t=5255&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;first time&lt;/a&gt;). Certainly, I don’t want to be left out of all the cool things being demonstrated by the community. The goal for me is to learn, and creating perhaps a more practical example.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;In this post I am going to choose &lt;a href=&#34;https://www.keycloak.org/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Keycloak&lt;/a&gt;, and write an experimental MCP server implementation for Keycloak. The post is also to spark interest around this topic: Will it be useful to have an MCP server for Keycloak?&lt;/p&gt;】&lt;p&gt;Recently, I explored how the Model Context Protocol (MCP) is gaining traction in the Java ecosystem, with frameworks like Spring AI, &lt;a href=&#34;https://dzone.com/articles/processing-images-in-java-with-opencv-and-quarkus&#34;&gt;Quarkus&lt;/a&gt;, and LangChain4j starting to adopt it for integrating language models via standardized接口。现在是时候开始尝试编写MCP服务器了（也许不是&lt;a href =“ https://youtu.be/lczeb61bu9a?si = 7mwasecaoewuub2z&amp;t=52555”当然，我不想被社区所展示的所有酷事物排除在外。对我来说，目标是学习，并创建一个更实用的例子。 &lt;/p&gt;&#xA;&lt;p&gt;在这篇文章中，我将选择&lt;a href =“ https://www.keycloak.org/” rel =“ noopener noreferrer” target =“ _ black”&gt; keycloak &lt;/a&gt;，并为KeyCloak编写实验性MCP服务器实现。该帖子也引发了有关此主题的兴趣：拥有KeyCloak的MCP服务器会很有用？&lt;/p&gt;</description>
      <pubDate>Tue, 01 Jul 2025 19:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Zero-Click CRM: The Future of Predictive Customer Management With Autonomous AI】零单击CRM：具有自动AI的预测客户管理的未来</title>
      <link>https://dzone.com/articles/zero-click-crm-predictive-ai</link>
      <description>【&lt;p&gt;As the digital economy matures and customer expectations evolve, businesses are seeking not only faster, but also smarter ways to manage relationships. Traditional customer relationship management (CRM) systems have undergone a major transformation in recent years, with AI playing a central role in enabling automation, personalization, and predictive insights. However, the next frontier is emerging — Zero-Click CRM — a concept that pushes AI integration even further, aiming to remove the need for manual interaction altogether in many customer-facing tasks.&lt;/p&gt;&#xA;&lt;p&gt;This article explores the core technological, architectural, and ethical aspects of Zero-Click CRM and outlines how it will transform how businesses interact with customers, making these systems not just reactive, but truly proactive and autonomous.&lt;/p&gt;】&lt;p&gt;随着数字经济的成熟和客户期望的发展，企业不仅在寻求更快的速度，而且在管理人际关系的方式上也更加聪明。近年来，传统的客户关系管理（CRM）系统经历了重大转变，AI在实现自动化，个性化和预测性见解方面发挥了核心作用。但是，下一个边界是新兴的 - 零单击CRM，这一概念将进一步推动AI集成，旨在消除许多面向客户的任务中的手动互动的需求。&lt;/p&gt;&#xA;&lt;p&gt;本文探讨了零单击CRM的核心技术，建筑和道德方面，并概述了它将如何改变企业与客户互动的方式，使这些系统不仅具有反应性，而且是真正的积极主动和自动的。&lt;/p&gt;&gt; &lt;/p&gt;</description>
      <pubDate>Tue, 01 Jul 2025 15:00:05 +0000</pubDate>
    </item>
    <item>
      <title>【Squid Game: The Clean Code Trials — A Java Developer&#39;s Survival Story】鱿鱼游戏：干净的代码试验 -  Java开发人员的生存故事</title>
      <link>https://dzone.com/articles/squid-game-clean-code-trials</link>
      <description>【&lt;p data-pm-slice=&#34;1 1 [&amp;quot;blockquote&amp;quot;,{&amp;quot;start&amp;quot;:76,&amp;quot;end&amp;quot;:148}]&#34;&gt;&#34;In the world of code, there are only two outcomes: evolve or perish.&#34;&lt;/p&gt;&#xA;&lt;h2 data-pm-slice=&#34;1 1 []&#34;&gt;Episode 1: The Red Light of Rigid Code&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Scene&lt;/strong&gt;: A vast ODC filled with desks, whiteboards, and terminals. The chairs are marked with red and green stickers. Software contestants sitting, trembling, gazing at a giant robot doll that watches them intently.&lt;/p&gt;】&lt;p data-pm-slice =“ 1 1 [“ blockquote”，{“ start”：76，“ end”：148}]”&gt;“在代码世界中，只有两个结果：进化或灭亡。” &lt;/p&gt;。” &lt;/p&gt;&#xA;&lt;H2 data-pm-slice =“ 1 1 []”&gt;第1集：刚性代码的红灯&lt;/h2&gt;&#xA;&lt;p&gt; &lt;strong&gt;场景&lt;/strong&gt;：一个充满桌子，白板和终端的巨大ODC。椅子上标有红色和绿色贴纸。软件参赛者坐着，颤抖，凝视着一个巨大的机器人娃娃，专心地看着它们。&lt;/p&gt;</description>
      <pubDate>Tue, 01 Jul 2025 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Spring Cloud LoadBalancer vs Netflix Ribbon】春季云负载者与Netflix丝带</title>
      <link>https://dzone.com/articles/spring-cloud-load-balancer-vs-netflix-ribbon</link>
      <description>【&lt;p&gt;The Spring Cloud ecosystem has been evolving significantly over the years. At first, it was mainly based on the Netflix stack, then it started shifting towards its own solutions. One of the components that has been substituted is &lt;a href=&#34;https://dzone.com/articles/microservices-tutorial-ribbon-as-a-load-balancer-1&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Netflix Ribbon&lt;/a&gt;. &lt;em&gt;Ribbon&lt;/em&gt; is a client-side load balancer and has been replaced by &amp;nbsp;&lt;a href=&#34;https://codingstrain.com/how-to-implement-client-side-load-balancing-with-spring-cloud/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Spring Cloud LoadBalancer&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Spring Cloud LoadBalancer&lt;/em&gt; is a more modern and maintainable solution. In this article, you will learn the differences between the two, their designs, and practical examples in &lt;em&gt;Java&lt;/em&gt;.&lt;/p&gt;】&lt;p&gt;多年来，春云生态系统一直在显着发展。起初，它主要基于Netflix堆栈，然后开始转向自己的解决方案。被替换的组件之一是&lt;a href =“ https://dzone.com/articles/microservices-tutorial-tutorial-ribbon-as-a-a-load-balancer-1” rel =“ noopener noreferrer” target =“ _ black”&gt; netflix cibbon &lt;/a&gt;。 &lt;em&gt; ribbon &lt;/em&gt;是一种客户端负载平衡器，已被&lt;a href =“ https://codingstrain.com/how-to-implement-client-client-client-side-side-load-side-load-balancing-with-spring-cloud/-spring-cloud/”&#xA;&lt;p&gt; &lt;em&gt;春季云负载器&lt;/em&gt;是一种更现代和可维护的解决方案。在本文中，您将在&lt;em&gt; java &lt;/em&gt;中学习两者，它们的设计和实际示例之间的区别。&lt;/p&gt;。</description>
      <pubDate>Tue, 01 Jul 2025 18:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Replacing Legacy Systems With Data Streaming: The Strangler Fig Approach】用数据流替换旧系统：扼杀者无花果方法</title>
      <link>https://dzone.com/articles/replacing-legacy-systems-one-step-at-a-time-with-d</link>
      <description>【&lt;p&gt;Organizations looking to modernize legacy applications often face a high-stakes dilemma: Do they attempt a complete rewrite or find a more gradual, low-risk approach? Enter the Strangler Fig Pattern, a method that &lt;strong&gt;systematically replaces legacy components&amp;nbsp;while keeping the existing system running&lt;/strong&gt;. Unlike the “Big Bang” approach, where companies try to rewrite everything at once, the Strangler Fig Pattern ensures smooth transitions, minimizes disruptions, and allows businesses to modernize at their own pace. &lt;strong&gt;Data streaming transforms the Strangler Fig Pattern into a more powerful, scalable, and truly decoupled approach.&amp;nbsp;&lt;/strong&gt;Let’s explore why this approach is superior to traditional migration strategies.&lt;/p&gt;&#xA;&lt;h2&gt;&lt;br&gt;&lt;/h2&gt;&#xA;&lt;h2&gt;What Is the Strangler Fig Design Pattern?&lt;/h2&gt;&#xA;&lt;p&gt;The &lt;strong&gt;Strangler Fig Pattern&lt;/strong&gt; is a &lt;strong&gt;gradual modernization approach&lt;/strong&gt; that allows organizations to replace legacy systems &lt;strong&gt;incrementally&lt;/strong&gt;. The pattern was &lt;a href=&#34;https://martinfowler.com/bliki/StranglerFigApplication.html&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;coined and popularized by Martin Fowler&lt;/a&gt; to &lt;strong&gt;avoid risky “big bang” system rewrites&lt;/strong&gt;.&lt;/p&gt;】&lt;p&gt;希望现代化旧应用程序现代化的组织通常会面临高风险的困境：他们是否尝试完整地重写或找到一种更渐进的低风险方法？输入“宿主无花果模式”，该方法&lt;strong&gt;系统地替代了旧组件，同时保持现有系统运行&lt;/strong&gt;。与“大爆炸”方法不同，公司试图立即重写所有内容，宿主的无花果模式可确保平稳的过渡，最大程度地减少干扰并允许企业以自己的节奏现代化。 &lt;strong&gt;数据流将宿主无花果模式转变为更强大，可扩展且真正的脱钩方法。 &lt;/strong&gt;让我们探讨为什么这种方法优于传统的移民策略。&lt;/p&gt;&#xA;&lt;H2&gt; &lt;br&gt; &lt;/h2&gt;&#xA;&lt;h2&gt;什么是宿主无花果设计模式？&lt;/h2&gt;&#xA;&lt;p&gt; &lt;strong&gt;扼杀者无花果模式&lt;/strong&gt;是&lt;strong&gt;逐渐的现代化方法&lt;/strong&gt;，它允许组织替换旧系统&lt;strong&gt;逐步&lt;/strong &lt;/strong&gt;。该模式为&lt;a href =“ https://martinfowler.com/bliki/stranglerfigapplication.html” rel =“ noopener” target =“ _ black”&gt;由马丁·福勒（Martin Fowler）造成并普及，&lt;strong &lt;/a&gt; &lt;strong&gt; &lt;strong&gt;避免了“大爆炸”的“大爆炸”系统REWRITES REWRITES REWRITES REWRITES REWRITES &lt;/p&gt;。&lt;/p&gt;。&lt;/p&gt;。&lt;/p&gt;。&lt;/p&gt;。</description>
      <pubDate>Tue, 01 Jul 2025 20:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【CRITICAL_PROCESS_DIED: How to Fix This Windows Blue Screen Error】calter_process_died：如何修复此Windows蓝屏错误</title>
      <link>https://dzone.com/articles/critical-process-died-fix-windows-blue-screen-error</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;CRITICAL_PROCESS_DIED is a notorious Windows error that triggers the dreaded Blue Screen of Death (BSOD), often leaving users frustrated and unsure of how to proceed. This error typically indicates that a critical system process has unexpectedly terminated, causing Windows to halt to prevent further damage. Encountering this error can disrupt your workflow and raise concerns about your system&#39;s stability. In this comprehensive guide, we&#39;ll explore the causes, solutions, and preventive measures for the CRITICAL_PROCESS_DIED error, ensuring you can get your system back on track quickly.&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;Key Takeaways&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA; &lt;li dir=&#34;ltr&#34;&gt;The CRITICAL_PROCESS_DIED error is a BSOD caused by the failure of essential system processes.&lt;/li&gt;&#xA; &lt;li dir=&#34;ltr&#34;&gt;Common causes include faulty drivers, corrupted system files, hardware issues, or malware.&lt;/li&gt;&#xA; &lt;li dir=&#34;ltr&#34;&gt;Solutions range from updating drivers and running system scans to performing a system restore or reset.&lt;/li&gt;&#xA; &lt;li dir=&#34;ltr&#34;&gt;Preventive measures include regular system maintenance, driver updates, and malware protection.&lt;/li&gt;&#xA; &lt;li dir=&#34;ltr&#34;&gt;Always back up data before attempting advanced troubleshooting to avoid data loss.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;What Is the CRITICAL_PROCESS_DIED Error?&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;The CRITICAL_PROCESS_DIED error, identified by the stop code 0x000000EF, occurs when a critical Windows process—such as those managing memory, I/O operations, or system services — stops functioning. This forces Windows to crash to protect the system from potential data corruption or hardware damage. The error is most common in Windows 10 and 11 but can also appear in older versions like Windows 7 and 8.&lt;/p&gt;】&lt;p dir =“ ltr”&gt; crialical_process_died是一个臭名昭著的Windows错误，触发了可怕的死亡蓝屏（BSOD），常常使用户感到沮丧，并且不确定如何继续进行。此错误通常表明关键的系统过程已意外终止，导致窗户停止以防止进一步损坏。遇到此错误可能会破坏您的工作流程，并引起人们对系统稳定性的担忧。在本综合指南中，我们将探讨Critical_process_died错误的原因，解决方案和预防措施，以确保您可以快速使系统重回正轨。&lt;/p&gt;&#xA;&lt;h2 dir =“ ltr”&gt;键外卖&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA; &lt;li dir =“ ltr”&gt; criality_process_died错误是由基本系统过程失败引起的BSOD。&lt;/li&gt;&#xA; &lt;li dir =“ ltr”&gt;常见原因包括故障驱动程序，损坏的系统文件，硬件问题或恶意软件。&lt;/li&gt;&#xA; &lt;li dir =“ ltr”&gt;解决方案范围从更新驱动程序和运行系统扫描到执行系统还原或重置。&lt;/li&gt;&#xA; &lt;li dir =“ ltr”&gt;预防措施包括常规系统维护，驾驶员更新和恶意软件保护。&lt;/li&gt;&#xA; &lt;li dir =“ ltr”&gt;在尝试高级故障排除以避免数据丢失之前始终备份数据。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 dir =“ ltr”&gt;什么是calter_process_died错误？&lt;/h2&gt;&#xA;&lt;p dir =“ ltr”&gt;由停止代码0x000000EF标识的criality_process_died错误发生在关键的Windows进程（例如管理内存，I/O操作或系统服务）停止运行时。这迫使窗户崩溃以保护系统免受潜在的数据损坏或硬件损害。该错误在Windows 10和11中最常见，但也可以出现在Windows 7和8等旧版本中。&lt;/p&gt;。</description>
      <pubDate>Tue, 01 Jul 2025 12:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Microservices for Machine Learning】机器学习微服务</title>
      <link>https://dzone.com/articles/microservices-for-ml</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;My latest personal project, a personal finance tracker with ML-powered insights, started with a simple feature to categorize expense but quickly got expanded to accommodate multiple features including handling everything from transaction classification to spending predictions (I was greedy to get into ML based investment recommendations but oh boy I don’t think I’m there yet to believe in making ML recommended investments :D). When one model failed, everything failed.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;So I decided to do what I&#39;d been putting off for months: break the monolith apart. Here&#39;s what I learned decomposing my personal ML project into focused microservices, and why, I think, you might want to consider the same approach for your own projects.&lt;/p&gt;】&lt;p dir =“ ltr”&gt;我的最新个人项目是带有ML驱动见解的个人财务追踪器，从一个简单的功能开始，以对费用进行分类，但很快就可以扩展到多个功能，包括处理从交易分类到支出预测的所有内容（我贪婪地基于ML的投资建议，但是我认为我不认为我在那里尚未相信ML推荐ML的投资：D）。当一个模型失败时，一切都失败了。&lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;所以我决定做我几个月来推迟的事情：将整体分开。这是我学到的东西，将我的个人ML项目分解为专注的微服务，为什么我认为，您可能想考虑自己的项目的相同方法。&lt;/p&gt;</description>
      <pubDate>Tue, 01 Jul 2025 13:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【The Death of REST? Why gRPC and GraphQL Are Taking Over】休息的死亡？为什么GRPC和GraphQl接管</title>
      <link>https://dzone.com/articles/death-of-rest-grpc-graphql-takeover</link>
      <description>【&lt;p&gt;For two decades, REST has been the undisputed monarch of API architecture. Stateless. Cacheable. Universally understood. Yet beneath this seemingly unshakeable foundation, tectonic shifts are occurring — and they&#39;re happening fast.&lt;/p&gt;&#xA;&lt;p&gt;Walk into any modern tech company today, and you&#39;ll witness a quiet revolution. Engineers are abandoning REST endpoints in favor of something entirely different. gRPC calls zip through internal networks at breakneck speeds. &lt;a href=&#34;https://dzone.com/articles/what-is-graphql-2&#34;&gt;GraphQL queries&lt;/a&gt; slice through data with surgical precision. The question isn&#39;t whether change is coming — it&#39;s whether REST can survive it.&lt;/p&gt;】&lt;p&gt;二十年来，休息一直是API架构的无可争议的君主。无状态。可缓存。普遍理解。然而，在这个看似不可动摇的基础之下，发生了构造转变 - 它们发生了很快。&lt;/p&gt;&#xA;&lt;p&gt;今天走进任何现代科技公司，您将目睹一场安静的革命。工程师放弃了休息端点，而支持完全不同的东西。 GRPC以惊人的速度通过内部网络调用ZIP。 &lt;a href =“ https://dzone.com/articles/what-is-graphql-2”&gt; GraphQl查询&lt;/a&gt;通过手术精度切成数据。问题不是变化是否来了 - 休息是否可以生存。&lt;/p&gt;</description>
      <pubDate>Tue, 01 Jul 2025 14:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Ethical AI for Product Owners and Product Managers】产品所有者和产品经理的道德AI</title>
      <link>https://dzone.com/articles/ethical-ai-for-product-owners-product-managers</link>
      <description>【&lt;h2&gt;TL; DR: Ethical AI or Risk?&lt;/h2&gt;&#xA;&lt;p&gt;Without ethical AI, Product Owners and Product Managers (PO/PMs) face a dilemma: balancing AI’s potential with its risks in product discovery and delivery. Unchecked AI can introduce bias, compromise data, and erode empathy.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;To navigate this, implement four guardrails: ensuring data privacy, preserving human value, validating AI outputs, and transparently attributing AI’s role. This approach transforms PO/PMs into &lt;a href=&#34;https://dzone.com/articles/ethical-ai&#34;&gt;ethical AI leaders&lt;/a&gt;, blending AI’s power with indispensable human judgment and empathy.&lt;/p&gt;】&lt;H2&gt; TL; DR：道德AI或风险？&lt;/h2&gt;&#xA;&lt;p&gt;没有道德AI，产品所有者和产品经理（PO/PMS）面临困境：平衡AI的潜力与产品发现和交付中的风险。未选中的AI可以引入偏见，妥协数据和ERODE同理心。 &lt;/p&gt;&#xA;&lt;p&gt;要导航，实施四个护栏：确保数据隐私，保留人为价值，验证AI输出并透明地归因于AI的角色。这种方法将po/pms转换为&lt;a href =“ https://dzone.com/articles/ethical-ai”&gt;道德AI领导者&lt;/a&gt;，将AI的力量与必不可少的人类判断和同情融为一体。&lt;/p&gt;。&lt;/p&gt;</description>
      <pubDate>Tue, 01 Jul 2025 17:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>