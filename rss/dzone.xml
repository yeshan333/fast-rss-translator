<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【More Than Just Buttons: A Frontend Engineer&#39;s Exploration of Accessibility Frameworks】不仅仅是按钮：前端工程师对可访问性框架的探索</title>
      <link>https://dzone.com/articles/accessibility-in-frontend-architecture</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://dzone.com/articles/dev-guide-to-mastering-accessibility-in-web-development&#34;&gt;Accessibility&lt;/a&gt; is often treated as actions that have to be implemented like checkboxes. In this scenario, contrast, alt images, and tagging will create structure. However, in real-world scenarios that involve advanced frontend systems, accessible interfaces are products of architectural decisions.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;In a practical scenario, as a senior engineer, there are multiple factors of influence apart from the coding aspects. The impact radiates to the workflows of development, component systems, and patterns, which are used or created by others. If there is no strategy incorporated during construction for accessibility, there will be difficulties or bridge gaps that need to be crossed when trying to patch this problem later on, causing multiple regressions.&lt;/p&gt;】&lt;p dir =“ ltr”&gt; &lt;a href =“ https://dzone.com/articles/dev-guide-to-mastering-accessibility-in-web-development”&gt;可访问性&lt;/a&gt;通常被视为必须像复选框一样实现的动作。在这种情况下，对比度，ALT图像和标记将创建结构。但是，在涉及高级前端系统的实际场景中，可访问的接口是建筑决策的产品。&lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;在实际情况下，作为高级工程师，除了编码方面，还有许多影响因素。影响辐射到由他人使用或创建的开发，组件系统和模式的工作流程。如果在施工期间没有策略纳入策略，则在以后试图修补此问题时，将需要跨越困难或桥梁差距，从而导致多次回归。&lt;/p&gt;</description>
      <pubDate>Tue, 22 Jul 2025 19:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Why Microservices Teams Struggle to Ship Independently】为什么微服务团队难以独立发货</title>
      <link>https://dzone.com/articles/microservices-teams-shipping-challenges</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;At a glance, the benefits of microservices seem obvious: independent teams can move faster, deploy more frequently, and scale systems more effectively. In theory, this architecture should unlock agility. But for many teams, that promise hasn’t materialized — not because their systems are flawed, but because their processes haven’t evolved in step.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;If your team still relies on heavy coordination for a single &lt;a href=&#34;https://thenewstack.io/microservices/primer-microservices-explained/&#34;&gt;microservice&lt;/a&gt; change, waits days for staging access, or juggles PRs through slow, serialized pipelines, you may have a distributed system — but you’re still operating like a monolith.&lt;/p&gt;】&lt;p dir =“ ltr”&gt;一目了然，微服务的好处似乎很明显：独立团队可以更快地移动，更频繁地部署并更有效地进行扩展系统。从理论上讲，该体系结构应解锁敏捷性。但是对于许多团队而言，这一承诺并没有实现 - 不是因为他们的系统存在缺陷，而是因为他们的流程没有进化。&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;If your team still relies on heavy coordination for a single &lt;a href=&#34;https://thenewstack.io/microservices/primer-microservices-explained/&#34;&gt;microservice&lt;/a&gt; change, waits days for staging access, or juggles PRs through slow, serialized pipelines, you may have a distributed system — but you’re still operating like a整体。&lt;/p&gt;</description>
      <pubDate>Tue, 22 Jul 2025 15:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Lock-Free Programming: From Primitives to Working Structures】无锁编程：从原语到工作结构</title>
      <link>https://dzone.com/articles/lock-free-programming-primitives-to-structures</link>
      <description>【&lt;p&gt;Working with multiple threads is one of the most complex problems we may encounter in our daily work. When put against the wall of multithreading, most people right away reach out for blocking approaches. In Java, it takes the form of the synchronized keyword, or some other less painful mechanisms, like ReentrantLock. Locks are not the only option: Lock-free programming is also the way.&lt;/p&gt;&#xA;&lt;p&gt;In this text, I will show problems, techniques, and best practices related to Lock-Free Programming. I will also provide a real-life example of how to implement a Lock-Free stack. Besides, I will share common patterns on moving from Lock-Free to Wait-Free.&lt;/p&gt;】&lt;p&gt;使用多个线程是我们在日常工作中可能遇到的最复杂的问题之一。当靠在多线程的墙壁上时，大多数人都立即伸出手来阻止方法。在Java中，它采用同步关键字的形式，或其他一些不太痛苦的机制，例如Reentrantlock。锁不是唯一的选择：无锁编程也是方式。&lt;/p&gt;&#xA;&lt;p&gt;在本文中，我将显示与无锁编程有关的问题，技术和最佳实践。我还将提供一个现实生活中的示例，说明如何实现无锁的堆栈。此外，我将共享从无锁到无锁的通用模式。&lt;/p&gt;</description>
      <pubDate>Tue, 22 Jul 2025 11:00:11 +0000</pubDate>
    </item>
    <item>
      <title>【Implementing Least Privilege in AWS IAM: Principles, Practices, and Automation】在AWS IAM中实施最少特权：原则，实践和自动化</title>
      <link>https://dzone.com/articles/least-privilege-aws-iam-best-practices</link>
      <description>【&lt;p&gt;The principle of &lt;a href=&#34;https://dzone.com/articles/securing-your-cloud-with-zero-trust-and-least-priv-1&#34;&gt;least privilege&lt;/a&gt; is fundamental to securing cloud environments by ensuring that identities have only the permissions necessary to perform their tasks. In &lt;a href=&#34;https://dzone.com/articles/aws-iam-basics-identity-and-access-management&#34;&gt;AWS Identity and Access Management&lt;/a&gt; (IAM), sticking to the principle of least privilege is one of the smartest ways to reduce the chances of unauthorized access, data leaks, or someone getting more permissions than they should. This paper dives into how to apply the principle of least privilege in AWS IAM, covering key best practices, common challenges, and ways to automate policy management. It also highlights AWS tools that help with analyzing, validating, and enforcing IAM policies at scale.&lt;/p&gt;&#xA;&lt;h2&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;As organizations increasingly adopt AWS cloud services, managing access control becomes a critical aspect of maintaining a secure and compliant environment. IAM lets you control exactly who can access which resources in your AWS environment and under what conditions they can do it. However, without careful policy design, users and services may accumulate excessive permissions, thereby violating the principle of least privilege and introducing security risks. This paper outlines approaches for achieving least privilege in AWS IAM and highlights automation techniques that enhance efficiency and accuracy in policy management.&lt;/p&gt;】&lt;p&gt; &lt;a href =“ https://dzone.com/articles/securing-your-cloud-with-with-with-with-with-with-trust-and-priv-1”&gt;至少特权&lt;/a&gt;对于确保云环境的基础是确保身份仅具有执行其任务所必需的限制，这是至关重要的。在&lt;a href =“ https://dzone.com/articles/aws-iam-basics-indistity-and-sidity-and-access-managation”&gt; aws身份和访问管理&lt;/a&gt;（iam），坚持最低特权的原则是减少无授权访问机会的最聪明的方式之一，或者是某人允许的机会，或者应该获得更多允许的机会。本文介绍了如何在AWS IAM中运用最少特权的原则，涵盖了关键的最佳实践，共同的挑战以及自动化政策管理的方式。它还突出显示了AWS工具，可帮助分析，验证和执行IAM策略。&lt;/p&gt; &lt;/p&gt;&#xA;&lt;h2&gt;简介&lt;/h2&gt;&#xA;&lt;p&gt;随着组织越来越多地采用AWS云服务，管理访问控制成为维护安全和合规环境的关键方面。 IAM让您确切地控制谁可以在AWS环境中访问哪些资源，以及在什么条件下可以做到的。但是，如果没有仔细的政策设计，用户和服务可能会积累过多的权限，从而违反了特权最少的原则并引入安全风险。本文概述了在AWS IAM中获得至少特权的方法，并强调了自动化技术，从而提高了政策管理的效率和准确性。&lt;/p&gt;</description>
      <pubDate>Tue, 22 Jul 2025 18:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【How to Create Loki Alerts via PrometheusRule Resource】如何通过Prometheusrule资源创建LOKI警报</title>
      <link>https://dzone.com/articles/create-loki-alerts-via-prometheusrule</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;In modern observability stacks, log-based alerts are often more immediate and actionable than those based on metrics, especially when you&#39;re tracking down anomalies, security incidents, or sudden application failures. While tools like &lt;strong&gt;Loki&lt;/strong&gt; simplify log aggregation, turning those logs into meaningful, automated alerts remains a challenge.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;In the world of metrics, many engineers are familiar with Prometheus and its &lt;code&gt;PrometheusRule&lt;/code&gt; resource for Kubernetes. But what if you could apply that same flexible, declarative alerting model to &lt;a href=&#34;https://dzone.com/articles/grafana-loki-fundamentals-and-architecture&#34;&gt;Loki logs&lt;/a&gt;?&amp;nbsp;&lt;/p&gt;】&lt;p dir =“ ltr”&gt;在现代可观察性堆栈中，基于日志的警报通常比基于指标的警报更直接和可行，尤其是当您跟踪异常，安全事件或突然的应用程序失败时。虽然&lt;strong&gt; loki &lt;/strong&gt;的工具简化了日志聚合，但将这些日志变成有意义的自动警报仍然是一个挑战。&lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;在指标世界中，许多工程师熟悉kubernetes的Prometheus及其&lt;code&gt; Prometheusrule &lt;/code&gt;资源。但是，如果您可以将相同的灵活性警报模型应用于&lt;a href =“ https://dzone.com/articles/grafana-loki-fundamentals-and-architecture”&gt; loki logs &lt;/a&gt;怎么办？ &lt;/p&gt;</description>
      <pubDate>Tue, 22 Jul 2025 12:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Building a Multi Tenancy Platform Using Camunda】使用Camunda建立多租赁平台</title>
      <link>https://dzone.com/articles/building-a-multi-tenancy-platform-using-camunda</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Camunda is an open-source workflow and decision automation platform for the modeling, execution, and monitoring of business processes following BPMN (Business Process Model and Notation), DMN (Decision Model and Notation), and CMMN. It is used for the orchestration of complex workflows among microservices, APIs, human tasks, and external systems. Camunda is embedded by developers into their applications to automate business logic, monitor process state, and bring operational transparency.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Camunda enables companies to orchestrate processes across people, systems, and devices to tame complexity continuously and drive efficiency. A common visual language enables business and IT teams to collaborate seamlessly in designing, automating, and optimizing end-to-end processes with the speed, scale, and resilience required to compete.&lt;/p&gt;】&lt;p dir =“ ltr”&gt; Camunda是一个开源工作流程和决策自动化平台，用于建模，执行和监视BPMN（业务流程模型和符号），DMN（决策模型和符号）和CMMN之后的业务流程。它用于在微服务，API，人类任务和外部系统之间编排复杂的工作流程。开发人员将Camunda嵌入其应用程序中，以使业务逻辑自动化，监视过程状态并带来操作透明度。&lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt; Camunda使公司能够在人员，系统和设备之间协调过程，以连续驯服复杂性并提高效率。一种通用的视觉语言使企业和IT团队能够以竞争所需的速度，规模和弹性来设计，自动化和优化端到端流程以无缝协作。&lt;/p&gt;</description>
      <pubDate>Tue, 22 Jul 2025 17:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Debugging Distributed Flight Search: What Logs Alone Won’t Tell You】调试分布式飞行搜索：单独的日志不会告诉您什么</title>
      <link>https://dzone.com/articles/debugging-distributed-flight-search</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Modern flight-search systems juggle dozens of services — search APIs, fare engines, cache clusters, and partner gateways — all to assemble a single price quote in milliseconds. When something goes wrong (say, a price anomaly or missing fare), sifting through siloed logs can leave engineers blind. True visibility comes from observability: correlating logs with metrics and traces across the architecture. In practice, senior teams have learned that without request tracing and rich metrics, elusive faults in fare pricing often defy diagnosis.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Here we describe a typical flight‐search flow, show why plain logging falls short, and share how Datadog-powered observability (metrics, tracing, correlation IDs, alerts) saves the day. We draw on anonymized incidents — intermittent mismatches, provider glitches, race conditions — to underscore practical lessons and concrete debugging strategies.&lt;/p&gt;】&lt;p dir =“ ltr”&gt;现代飞行搜索系统杂乱无章的数十种服务 - 搜索API，票价引擎，缓存簇和合作伙伴网关 - 都以毫秒为单一的价格报价。当出现问题时（例如，价格异常或票价丢失）时，筛选孤立的原木可能会使工程师失明。真正的可见性来自可观察性：将日志与整个体系结构之间的指标和痕迹相关联。实际上，高级团队了解到，不需要追踪和丰富的指标，票价定价中难以捉摸的缺点通常会违背诊断。 &lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;在这里，我们描述了典型的飞行搜索流，显示为什么普通的日志记录不足，并分享datadog驱动的可观察性（指标，跟踪，相关ID，警报）节省一天。我们利用匿名事件（间歇性不匹配，提供者的故障，种族条件）来强调实践课程和具体调试策略。&lt;/p&gt;</description>
      <pubDate>Tue, 22 Jul 2025 13:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Implementing ΔE-ITP in Python: Accurate Color Difference Metric for Image Processing】在Python中实施ΔE-ITP：图像处理的准确色差度量</title>
      <link>https://dzone.com/articles/image-difference-deltae-itp-python</link>
      <description>【&lt;p&gt;Image difference analysis is essential in &lt;a href=&#34;https://dzone.com/articles/computer-vision-101&#34;&gt;computer vision&lt;/a&gt;, graphics processing, and media quality assessment. Whether you&#39;re evaluating compression artifacts, detecting subtle regressions, or comparing perceptual similarity, various metrics help quantify differences between images.&lt;/p&gt;&#xA;&lt;p&gt;This article discusses popular image difference metrics, their pros and cons, and recommends &lt;strong&gt;ΔE-&lt;/strong&gt;&lt;strong&gt;ITP&lt;/strong&gt;, a modern, perceptually optimized color difference metric. We’ll also look at how to implement DeltaE ITP—including transforming images from SDR, HLG, and PQ into ITP—and interpreting the reported color differences effectively.&lt;/p&gt;】&lt;p&gt;图像差异分析在&lt;a href =“ https://dzone.com/articles/computer-vision-101”中至关重要。无论您是评估压缩工件，检测微妙的回归还是比较感知相似性，各种指标都有助于量化图像之间的差异。&lt;/p&gt;&#xA;&lt;p&gt;本文讨论了流行的图像差异指标，其优点和缺点，并建议&lt;strong&gt;ΔE-&lt;/strong&gt; &lt;strong&gt; itp &lt;/strong&gt;，一种现代化的，具有感知优化的色彩差异度量。我们还将研究如何实现Deltae ITP，包括将SDR，HLG和PQ转换为ITP的图像，并有效地解释报告的颜色差异。&lt;/p&gt;</description>
      <pubDate>Tue, 22 Jul 2025 20:00:13 +0000</pubDate>
    </item>
    <item>
      <title>【Building a Proactive Cloud Environment Using AWS Monitoring】使用AWS监控建立主动的云环境</title>
      <link>https://dzone.com/articles/proactive-cloud-monitoring-with-aws</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Cloud applications need to run smoothly and reliably more than ever. Building a proactive cloud means monitoring your AWS resources continuously to detect and resolve issues before they hit users. With AWS’s monitoring tools, you can get real-time visibility, automate responses, and achieve optimal performance.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;This article will show you how to do that, combining strategic best practices with practical tips to help cloud architects, DevOps engineers, and CTOs keep their AWS infrastructure resilient and efficient.&lt;/p&gt;】&lt;p dir =“ ltr”&gt;云应用程序比以往任何时候都需要平稳，可靠地运行。构建主动云意味着在击中用户之前，不断监视您的AWS资源以检测和解决问题。借助AWS的监视工具，您可以获得实时可见性，自动化响应并实现最佳性能。&lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;本文将向您展示如何做到这一点，将战略最佳实践与实用技巧相结合，以帮助云建筑师，DevOps工程师和CTOS保持其AWS基础架构的弹性和高效。&lt;/p&gt;</description>
      <pubDate>Tue, 22 Jul 2025 14:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Agile-Based Fine-Tuning of AI Agents for Domain-Specific User Feedback Loops】针对特定域用户反馈循环的AI代理的基于敏捷的微调</title>
      <link>https://dzone.com/articles/agile-fine-tuning-ai-agents</link>
      <description>【&lt;p&gt;Since &lt;a href=&#34;https://dzone.com/articles/ai-agentic-101-understanding-ai-agents&#34;&gt;AI agents&lt;/a&gt; are becoming an inseparable part of various applications across financial, healthcare, customer service, and engineering domains, one issue remains at the forefront: how to keep models accurate, relevant, and aligned with the changing demands of users. Powerful standard pre-trained models usually fail to perform well in narrow tasks without a continuous tuning process. This has given impetus to Agile-based fine-tuning—a feedback-driven process in which AI agents are aligned through iterative, short cycles, similar to those used in agile software development (Tupsakhare, 2022). Such a strategy encourages constant change and step-by-step evolution, steered by actual user &lt;a href=&#34;https://dzone.com/articles/agile-frameworks-in-action-enhancing-flexibility-i&#34;&gt;feedback loops&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2&gt;Agile Meets AI: A Synergistic Framework&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/the-agile-the-fragile-and-the-iron-fist-of-branchi&#34;&gt;Agile&lt;/a&gt; practices focus on sprints, quick iterations, stakeholder comments, and unceasing delivery. This, together with the AI fine-tuning, becomes a dynamic process: gather user feedback, retrain or adjust the model, roll out the adjustments, repeat. An agile approach to AI systems could reduce time-to-market on model updates by 30% and maintain accuracy through a drift in the data (LinkedIn, 2024).&amp;nbsp;&lt;/p&gt;】&lt;p&gt;Since &lt;a href=&#34;https://dzone.com/articles/ai-agentic-101-understanding-ai-agents&#34;&gt;AI agents&lt;/a&gt; are becoming an inseparable part of various applications across financial, healthcare, customer service, and engineering domains, one issue remains at the forefront: how to keep models accurate, relevant, and aligned with the changing demands of users.强大的标准预训练模型通常无法在狭窄的任务中表现出色，而无需连续调整过程。这为基于敏捷的微调提供了动力，这是一个反馈驱动的过程，其中AI代理通过迭代，短周期对齐，类似于敏捷软件开发中使用的过程（Tupsakhare，2022年）。这种策略鼓励不断变化和逐步演变，由实际用户&lt;a href =“ https://dzone.com/articles/agile-frameworks-frameworks-incation-action-action-action-enhancing-flexibility-i”&gt;反馈循环&lt;/a&gt; &lt;/p&gt;。&#xA;&lt;h2&gt;敏捷遇到AI：协同框架&lt;/h2&gt;&#xA;&lt;p&gt; &lt;a href =“ https://dzone.com/articles/the-agile-the-agile-the-fragile-and-the-ragile--------------------of-branchi”&gt;敏捷&lt;/a&gt;练习着重于冲刺，快速迭代，利益相关者的评论和不断交付。这与AI微调一起成为一个动态的过程：收集用户反馈，重新训练或调整模型，推出调整，重复。 AI系统的敏捷方法可以将模型更新上市的市场销售时间降低30％，并通过数据漂移（LinkedIn，2024）保持准确性。 &lt;/p&gt;</description>
      <pubDate>Tue, 22 Jul 2025 16:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>