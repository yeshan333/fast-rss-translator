<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Observability for Browsers】浏览器的可观察性</title>
      <link>https://dzone.com/articles/observability-for-browsers</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Browser agents are essential tools for &lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-real-user-monitoring&#34;&gt;monitoring&lt;/a&gt; and observability in modern web applications, especially with the increasing complexity of both Single Page Applications (SPAs) and traditional multi-page sites. A browser agent operates within a user’s browser, collecting data on performance metrics, errors, user interactions, and network requests, providing real-time insights into the application’s behavior.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;For &lt;a href=&#34;https://dzone.com/articles/the-comparison-of-single-page-and-multi-page-appli&#34;&gt;SPAs&lt;/a&gt;, browser agents face unique challenges due to the dynamic nature of page transitions, which occur without full reloads. This makes tracking performance metrics, memory leaks, and state changes over time more complex, as data needs to persist and update continuously without the typical page lifecycle events seen in multi-page applications. Conversely, in traditional multi-page websites, challenges arise around data loss due to ephemeral web pages, where navigating away from a page could result in the loss of unsent data.&amp;nbsp;&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;浏览器代理是&lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-real-user-monitoring&#34;&gt;监控&lt;/a&gt;和可观察性的重要工具现代 Web 应用程序，尤其是随着单页应用程序 (SPA) 和传统多页网站的复杂性不断增加。浏览器代理在用户的浏览器中运行，收集有关性能指标、错误、用户交互和网络请求的数据，提供对应用程序行为的实时洞察。 &lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;对于&lt;a href=&#34;https://dzone.com/articles/the-comparison-of-single-page-and-multi-page-appli&#34;&gt;SPA&lt;/a&gt;，浏览器由于页面转换的动态性质（无需完全重新加载），代理面临着独特的挑战。这使得跟踪性能指标、内存泄漏和状态随时间的变化变得更加复杂，因为数据需要持续保存和更新，而不需要多页面应用程序中出现的典型页面生命周期事件。相反，在传统的多页面网站中，由于短暂的网页而导致数据丢失，因此离开页面可能会导致未发送的数据丢失。 &lt;/p&gt;</description>
      <pubDate>Wed, 09 Oct 2024 20:00:05 +0000</pubDate>
    </item>
    <item>
      <title>【Microservice Proliferation: Too Many Microservices】微服务激增：微服务太多</title>
      <link>https://dzone.com/articles/microservice-proliferation-too-many-microservices</link>
      <description>【&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/microservice-architecture-2&#34;&gt;Microservices architecture&lt;/a&gt; promotes the development of applications, as suites of small, independent, loosely coupled services. Because of its numerous advantages (e.g., scalability, reliability, faster development cycles, easier maintenance of individual services, etc., detailed in &lt;a href=&#34;https://dzone.com/articles/software-architectural-patterns&#34;&gt;this article&lt;/a&gt;), it has gained significant traction in the software industry lately and organizations are building their applications following microservices architecture. However, it comes with a few pitfalls as well.&lt;/p&gt;&#xA;&lt;p&gt;Recently while working on a use case at work, I observed the other side of microservices architecture, i.e., microservices proliferation. This article is an attempt to detail the pitfalls associated with the excessive creation of microservices (microservices proliferation), offering insights on their causes, implications, and potential strategies for mitigation.&lt;/p&gt;】&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/microservice-architecture-2&#34;&gt;微服务架构&lt;/a&gt;促进应用程序的开发，作为小型、独立、松散耦合的服务套件。由于其众多优势（例如，可扩展性、可靠性、更快的开发周期、更容易维护单个服务等，详细信息请参见&lt;a href=&#34;https://dzone.com/articles/software-architectural-patterns&#34;&gt;此文章&lt;/a&gt;），它最近在软件行业中获得了巨大的关注，组织正在按照微服务架构构建他们的应用程序。然而，它也存在一些缺陷。&lt;/p&gt;&#xA;&lt;p&gt;最近在处理工作用例时，我观察到了微服务架构的另一面，即微服务扩散。本文试图详细介绍与过度创建微服务（微服务扩散）相关的陷阱，并提供有关其原因、影响和潜在缓解策略的见解。&lt;/p&gt;</description>
      <pubDate>Wed, 09 Oct 2024 19:00:08 +0000</pubDate>
    </item>
    <item>
      <title>【Being the Glue: Managing a Zero-to-One Software Project Across Multiple Teams】成为粘合剂：跨多个团队管理从零到一的软件项目</title>
      <link>https://dzone.com/articles/being-the-glue</link>
      <description>【&lt;p data-line-end=&#34;3&#34; data-line-start=&#34;2&#34;&gt;In software engineering, the role of a “Glue” is vital yet often overlooked. This term refers to the person who connects various teams, ensuring that a complex project with many moving parts comes together seamlessly. If you’re leading a &lt;a href=&#34;https://dzone.com/articles/intricacies-of-zero-to-one-software-projects&#34;&gt;zero-to-one software project&lt;/a&gt; that spans more than a couple of teams, your role as the Glue becomes even more critical. This article explores strategies for managing team dependencies, scheduling demos, building alignments, and adapting to pivots while maintaining focus on user needs.&lt;/p&gt;&#xA;&lt;h2 data-line-end=&#34;6&#34; data-line-start=&#34;5&#34;&gt;&lt;a&gt;&lt;/a&gt;&lt;strong&gt;1. Managing Team Dependencies&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p data-line-end=&#34;7&#34; data-line-start=&#34;6&#34;&gt;When working across multiple teams, &lt;a href=&#34;https://dzone.com/articles/ways-to-avoid-dependencies-tips-for-product-engine&#34;&gt;managing dependencies&lt;/a&gt; is one of the biggest challenges. Each team might have its own goals, timelines, and constraints, which can create friction if not carefully coordinated. Here’s how to effectively manage these dependencies:&lt;/p&gt;】&lt;p data-line-end=&#34;3&#34; data-line-start=&#34;2&#34;&gt;在软件工程中，“粘合剂”的作用至关重要，但常常被忽视。该术语指的是连接各个团队的人，确保具有许多移动部分的复杂项目无缝地结合在一起。如果您正在领导一个涵盖多个领域的&lt;a href=&#34;https://dzone.com/articles/intricacies-of-zero-to-one-software-projects&#34;&gt;零到一软件项目&lt;/a&gt;与几个团队相比，你作为粘合剂的角色变得更加重要。本文探讨了管理团队依赖性、安排演示、构建一致性以及适应枢纽的策略，同时保持对用户需求的关注。&lt;/p&gt;&#xA;&lt;h2 data-line-end=&#34;6&#34; data-line-start=&#34;5&#34;&gt;&lt;a&gt;&lt;/a&gt;&lt;strong&gt;1.管理团队依赖性&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p data-line-end=&#34;7&#34; data-line-start=&#34;6&#34;&gt;跨多个团队工作时，&lt;a href=&#34;https://dzone.com/articles/ways-to-avoid-dependencies- Tips-for-product-engine&#34;&gt;管理依赖项&lt;/a&gt;是最大的挑战之一。每个团队可能都有自己的目标、时间表和限制，如果不仔细协调，可能会产生摩擦。以下是有效管理这些依赖关系的方法：&lt;/p&gt;</description>
      <pubDate>Wed, 09 Oct 2024 15:00:10 +0000</pubDate>
    </item>
    <item>
      <title>【The Importance Of Verifying Your GitHub Environment’s Security Controls】验证 GitHub 环境安全控制的重要性</title>
      <link>https://dzone.com/articles/verifying-your-github-environment-security-controls</link>
      <description>【&lt;p&gt;Security is a top priority of every company. It’s not surprising: source code, the most critical asset of any organization, should be under reliable protection — especially in view of constantly rising threats. Ransomware, infrastructure outages, vulnerabilities, and other threats can strike your GitHub repository at any time.&lt;/p&gt;&#xA;&lt;p&gt;Organizations, especially those that operate in the most regulated industries, can face a few main challenges regarding their GitHub data protection. The first one, we have already mentioned — it’s the value of the data stored in the repositories. The second one is their ability to forecast any event of failure and take proactive measures to make sure that their data is available and recoverable in any event of failure.&lt;/p&gt;】&lt;p&gt;安全是每个公司的首要任务。这并不奇怪：源代码是任何组织最重要的资产，应该受到可靠的保护——尤其是考虑到威胁不断增加。勒索软件、基础设施中断、漏洞和其他威胁随时可能攻击您的 GitHub 存储库。&lt;/p&gt;&#xA;&lt;p&gt;组织，尤其是那些在监管最严格的行业中运营的组织，可能会面临有关 GitHub 数据保护的一些主要挑战。第一个，我们已经提到过——它是存储在存储库中的数据的价值。第二个是他们能够预测任何故障事件并采取主动措施以确保其数据在任何故障情况下可用且可恢复。&lt;/p&gt;</description>
      <pubDate>Wed, 09 Oct 2024 18:00:13 +0000</pubDate>
    </item>
    <item>
      <title>【Modify JSON Data in Postgres and Hibernate 6】修改 Postgres 和 Hibernate 6 中的 JSON 数据</title>
      <link>https://dzone.com/articles/modify-json-data-in-postgres-and-hibernate</link>
      <description>【&lt;p&gt;This is another article in the series related to supporting the&lt;span style=&#34;background-color: transparent;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&#34;https://www.postgresql.org/docs/14/functions-json.html&#34; target=&#34;_blank&#34;&gt;Postgres JSON functions&lt;/a&gt; &lt;span style=&#34;background-color: transparent;&#34;&gt;in a project using the&amp;nbsp;&lt;/span&gt;&lt;a href=&#34;https://hibernate.org/&#34; target=&#34;_blank&#34;&gt;Hibernate framework&lt;/a&gt;&lt;span style=&#34;background-color: transparent;&#34;&gt;&amp;nbsp;with version 6.&lt;/span&gt; The topic for the article is modification operations on JSON records. As in the previous article, it is worth mentioning that Postgres might now have such comprehensive operations as other NoSQL databases like &lt;a href=&#34;https://dzone.com/refcardz/mongodb&#34;&gt;MongoDB&lt;/a&gt; for JSON modification (although, with the proper function constructions, it is possible to achieve the same effect). It still suits most projects that require JSON modification. Plus, with transaction support (not support in a NoSQL database at such a level), it is a pretty good idea to use Postgres with JSON data. Of course, NoSQL databases have other benefits that might suit better projects.&lt;/p&gt;&#xA;&lt;p&gt;There are generally many articles on Postgres&#39; support for &lt;a href=&#34;https://dzone.com/refcardz/core-json&#34;&gt;JSON&lt;/a&gt;. This article focuses on integrating this support with the Hibernate 6 library.&amp;nbsp;&lt;/p&gt;】&lt;p&gt;这是该系列中与支持&lt;span style=&#34;background-color:透明;&#34;&gt; &lt;/span&gt;&lt;a href=&#34;https://www.postgresql.org/docs/14/ functions-json.html&#34; target=&#34;_blank&#34;&gt;Postgres JSON 函数&lt;/a&gt; &lt;span style=&#34;background-color:透明;&#34;&gt;在使用&lt;/span&gt;的项目中&lt;a href=&#34;https:// hibernate.org/&#34; target=&#34;_blank&#34;&gt;Hibernate 框架&lt;/a&gt;&lt;span style=&#34;background-color:透明;&#34;&gt;版本 6。&lt;/span&gt;本文的主题是对 JSON 记录的修改操作。和上一篇文章一样，值得一提的是，Postgres 现在可能拥有像其他 NoSQL 数据库一样全面的操作，例如用于 JSON 修改的 &lt;a href=&#34;https://dzone.com/refcardz/mongodb&#34;&gt;MongoDB&lt;/a&gt; (尽管通过适当的函数构造，可以达到相同的效果）。它仍然适合大多数需要 JSON 修改的项目。另外，由于事务支持（在这种级别的 NoSQL 数据库中不支持），将 Postgres 与 JSON 数据结合使用是一个非常好的主意。当然，NoSQL 数据库还有其他优点，可能适合更好的项目。&lt;/p&gt;&#xA;&lt;p&gt;通常有很多关于 Postgres 对 &lt;a href=&#34;https://dzone.com/refcardz/core-json&#34;&gt;JSON&lt;/a&gt; 支持的文章。本文重点介绍将此支持与 Hibernate 6 库集成。 &lt;/p&gt;</description>
      <pubDate>Wed, 09 Oct 2024 16:00:11 +0000</pubDate>
    </item>
    <item>
      <title>【Optimizing IoT Performance in Industrial Environments】优化工业环境中的物联网性能</title>
      <link>https://dzone.com/articles/optimizing-iot-performance-in-industrial-environments</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Internet of Things (IoT) devices have become common in industrial environments, giving users better visibility, control, and capabilities. However, making the IoT product work well requires knowing how to optimize software and hardware-related aspects.&amp;nbsp;&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;1. Ensure the IoT Device Has Adequate Hardware&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;People must first consider how they will use the IoT device and then evaluate whether it has the appropriate hardware capabilities to meet relevant current and future needs. A good starting point is to examine the storage, memory, and processing performance and verify that it aligns with the proposed use cases.&amp;nbsp;&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;物联网 (IoT) 设备在工业环境中已变得常见，为用户提供了更好的可见性、控制和功能。然而，要使物联网产品良好运行，需要了解如何优化软件和硬件相关方面。 &lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;1.确保物联网设备有足够的硬件&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;人们必须首先考虑如何使用物联网设备，然后评估它是否具有适当的硬件功能来满足当前和未来的相关需求。一个好的起点是检查存储、内存和处理性能，并验证其是否与建议的用例相符。 &lt;/p&gt;</description>
      <pubDate>Wed, 09 Oct 2024 12:00:04 +0000</pubDate>
    </item>
    <item>
      <title>【DocAI: PDFs/Scanned Docs to Structured Data】DocAI：PDF/扫描文档到结构化数据</title>
      <link>https://dzone.com/articles/docai-pdfs-scanned-docs-to-structured-data</link>
      <description>【&lt;h2&gt;Problem Statement&lt;/h2&gt;&#xA;&lt;p&gt;The &#34;why&#34; of this AI solution is very important and prevalent across multiple fields.&lt;/p&gt;&#xA;&lt;p&gt;Imagine you have multiple scanned PDF documents:&lt;/p&gt;】&lt;h2&gt;问题陈述&lt;/h2&gt;&#xA;&lt;p&gt;这个人工智能解决方案的“原因”非常重要，并且在多个领域都很普遍。&lt;/p&gt;&#xA;&lt;p&gt;假设您有多个扫描的 PDF 文档：&lt;/p&gt;</description>
      <pubDate>Wed, 09 Oct 2024 14:00:05 +0000</pubDate>
    </item>
    <item>
      <title>【Introducing the New Dapr Jobs API and Scheduler Service】推出新的 Dapr Jobs API 和调度程序服务</title>
      <link>https://dzone.com/articles/new-dapr-jobs-api-and-scheduler-service</link>
      <description>【&lt;p&gt;The &lt;a href=&#34;https://www.diagrid.io/blog/dapr-1-14-release-highlights&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Dapr 1.14 release&lt;/a&gt; last month included many new capabilities and was feature-packed. This included the addition of a new Jobs API and Scheduler control plane service for managing jobs. Over the years, the Dapr project was often requested to include a Jobs API. The Scheduler service enables this and is designed to address the performance and scalability improvements on Actor reminders and the Workflow API. In this post, I am going to deep dive into the details of how the Scheduler service was designed and its implementation to give you some background.&lt;br&gt;&lt;br&gt;&lt;img style=&#34;width: 676px;&#34; class=&#34;fr-fic fr-dib lazyload&#34; data-image=&#34;true&#34; data-new=&#34;false&#34; data-sizeformatted=&#34;505.1 kB&#34; data-mimetype=&#34;image/png&#34; data-creationdate=&#34;1726770170579&#34; data-creationdateformatted=&#34;09/19/2024 06:22 PM&#34; data-type=&#34;temp&#34; data-url=&#34;https://dz2cdn1.dzone.com/storage/temp/17931484-1726770168801.png&#34; data-modificationdate=&#34;null&#34; data-size=&#34;505051&#34; data-name=&#34;1726770168801.png&#34; data-id=&#34;17931484&#34; data-src=&#34;https://dz2cdn1.dzone.com/storage/temp/17931484-1726770168801.png&#34; alt=&#34;Jobs and Dapr Scheduler logos&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Prior to v1.14 if you wanted to schedule a job, you could use the Cron binding component to implement recurring jobs on a regular defined schedule; for example, automating database backups, sending out recurring email notifications, running routine maintenance tasks, data processing, and ETL, running system updates and batch processing. However, the binding approach lacked in the areas of durability and scalability, and more importantly, could not be combined with other Dapr APIs. For example, another frequent request is to be able to have delayed messages for pub/sub, and there will undoubtedly be other delayed job scenarios that will emerge.&lt;/p&gt;】&lt;p&gt;&lt;a href=&#34;https://www.diagrid.io/blog/dapr-1-14-release-highlights&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Dapr 1.14 版本&lt;/a&gt;上个月包含了许多新功能并且功能丰富。其中包括添加新的作业 API 和用于管理作业的调度程序控制平面服务。多年来，Dapr 项目经常被要求包含 Jobs API。 Scheduler 服务实现了这一点，旨在解决 Actor 提醒和工作流 API 的性能和可扩展性改进问题。在这篇文章中，我将深入探讨 Scheduler 服务的设计方式及其实现的细节，为您提供一些背景知识。&lt;br&gt;&lt;br&gt;&lt;img style=&#34;width: 676px;&#34; class =“fr-fic fr-dib lazyload”data-image =“true”data-new =“false”data-sizeformatted =“505.1 kB”data-mimetype =“image / png”data-creationdate =“1726770170579”数据-creationdateformatted=&#34;09/19/2024 06:22 PM&#34; data-type=&#34;temp&#34; data-url=&#34;https://dz2cdn1.dzone.com/storage/temp/17931484-1726770168801.png&#34; data-modificationdate= “null”data-size =“505051”data-name =“1726770168801.png”data-id =“17931484”data-src =“https://dz2cdn1.dzone.com/storage/temp/17931484-1726770168801.png” &#34; alt=&#34;Jobs 和 Dapr Scheduler 徽标&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在 v1.14 之前，如果您想安排作业，您可以使用 Cron 绑定组件按照定期定义的时间表实现重复作业；例如，自动化数据库备份、发送定期电子邮件通知、运行日常维护任务、数据处理和 ETL、运行系统更新和批处理。然而，这种绑定方法在持久性和可扩展性方面缺乏，更重要的是，无法与其他 Dapr API 结合使用。例如，另一个常见的请求是能够有延迟的消息发布/订阅，毫无疑问还会出现其他延迟的工作场景。&lt;/p&gt;</description>
      <pubDate>Wed, 09 Oct 2024 13:00:10 +0000</pubDate>
    </item>
    <item>
      <title>【Leveraging Seekable OCI: AWS Fargate for Containerized Microservices】利用 Seekable OCI：AWS Fargate 实现容器化微服务</title>
      <link>https://dzone.com/articles/seekable-oci-aws-fargate-for-containerized-microservices</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;AWS Fargate&#39;s Seekable OCI (SOCI) introduces significant performance enhancement for containerized applications by enabling lazy loading of &lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-docker-1&#34;&gt;Docker&lt;/a&gt; container images. This reduces startup time for Fargate tasks, particularly for large container images, and makes it ideal for applications that need rapid scaling.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;AWS Fargate is a serverless compute engine that offers many different capabilities:&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;AWS Fargate 的 Seekable OCI (SOCI) 通过启用延迟加载 &lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-docker- ，显着增强了容器化应用程序的性能1&#34;&gt;Docker&lt;/a&gt; 容器镜像。这减少了 Fargate 任务的启动时间，特别是大型容器映像的启动时间，使其成为需要快速扩展的应用程序的理想选择。&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;AWS Fargate 是一个无服务器计算引擎，提供许多不同的功能：&lt;/p&gt;</description>
      <pubDate>Wed, 09 Oct 2024 21:00:04 +0000</pubDate>
    </item>
    <item>
      <title>【Decoding LLM Parameters, Part 2: Top-P (Nucleus Sampling)】解码 LLM 参数，第 2 部分：Top-P（核采样）</title>
      <link>https://dzone.com/articles/decoding-llm-parameters-top-p</link>
      <description>【&lt;h2&gt;LLM Parameters&lt;/h2&gt;&#xA;&lt;p&gt;Like any &lt;a href=&#34;https://dzone.com/refcardz/machine-learning-predictive&#34;&gt;machine learning&lt;/a&gt; model, &lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-large-language-models&#34;&gt;large language models&lt;/a&gt; have various parameters that control the variance of the generated text output. We have &lt;a href=&#34;https://dzone.com/articles/decoding-llm-parameters-temperature&#34;&gt;started a multi-part series&lt;/a&gt; to explain the impact of these parameters in detail. We will conclude by striking the perfect balance in content generation using all of these parameters discussed in our multi-part series.&lt;/p&gt;&#xA;&lt;p&gt;Welcome to the second part, where we discuss another well-known parameter, &#34;Top-P.&#34;&lt;/p&gt;】&lt;h2&gt;法学硕士参数&lt;/h2&gt;&#xA;&lt;p&gt;与任何&lt;a href=&#34;https://dzone.com/refcardz/machine-learning-predictive&#34;&gt;机器学习&lt;/a&gt;模型一样，&lt;a href=&#34;https://dzone.com/refcardz/ Getting-started-with-large-language-models&#34;&gt;大型语言模型&lt;/a&gt;具有各种参数来控制生成的文本输出的方差。我们&lt;a href=&#34;https://dzone.com/articles/decoding-llm-parameters-Temperature&#34;&gt;启动了一个多部分系列&lt;/a&gt;来详细解释这些参数的影响。最后，我们将使用我们的多部分系列中讨论的所有这些参数来实现内容生成的完美平衡。&lt;/p&gt;&#xA;&lt;p&gt;欢迎来到第二部分，我们将讨论另一个众所周知的参数“Top-P”。&lt;/p&gt;</description>
      <pubDate>Wed, 09 Oct 2024 17:00:06 +0000</pubDate>
    </item>
  </channel>
</rss>