<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【PostgreSQL Support for Large Object Replication】PostgreSQL 对大对象复制的支持</title>
      <link>https://dzone.com/articles/postgresql-support-for-large-object-replication</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Replication of large objects isn&#39;t currently supported by the community version of PostgreSQL logical replication. If you try to replicate a large object with logical replication, PostgreSQL will return: &lt;code&gt;Large objects aren’t supported by logical replication.&lt;/code&gt; It&#39;s a meaningful error (always nice), but not helpful if you have large objects that you need to replicate.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;pgEdge has developed an extension named &lt;code&gt;LargeObjectLOgicalReplication&lt;/code&gt; (LOLOR) that provides support for replicating large objects. The primary goal of LOLOR is to provide seamless replication of large objects with pgEdge Spock multi-master distributed replication.&amp;nbsp;&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;社区版本的 PostgreSQL 逻辑复制目前不支持大型对象的复制。如果您尝试使用逻辑复制来复制大对象，PostgreSQL 将返回： &lt;code&gt;逻辑复制不支持大对象。&lt;/code&gt; 这是一个有意义的错误（总是很好），但如果您有大对象，则没有帮助您需要复制。&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;pgEdge 开发了一个名为 &lt;code&gt;LargeObjectLOgicalReplication&lt;/code&gt; (LOLOR) 的扩展，为复制大型对象提供支持。 LOLOR 的主要目标是通过 pgEdge Spock 多主分布式复制提供大型对象的无缝复制。 &lt;/p&gt;</description>
      <pubDate>Mon, 12 Aug 2024 15:00:01 +0000</pubDate>
    </item>
    <item>
      <title>【OpenTelemetry Tracing on Spring Boot: Java Agent vs. Micrometer Tracing】Spring Boot 上的 OpenTelemetry 跟踪：Java 代理与 Micrometer 跟踪</title>
      <link>https://dzone.com/articles/opentelemetry-tracing-on-spring-boot-java-agent-vs-micrometer-testing</link>
      <description>【&lt;p&gt;My &lt;a href=&#34;https://github.com/nfrankel/opentelemetry-tracing&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;demo&lt;/a&gt; of OpenTelemetry Tracing features two Spring Boot components. One uses the Java agent, and I noticed a different behavior when I recently upgraded it from v1.x to v2.x. In the other one, I&#39;m using Micrometer Tracing because I compile to GraalVM native, and it can&#39;t process Java agents.&lt;/p&gt;&#xA;&lt;p&gt;I want to compare these three different ways in this post: Java agent v1, Java agent v2, and Micrometer Tracing.&lt;/p&gt;】&lt;p&gt;我的 OpenTelemetry Tracing 的&lt;a href=&#34;https://github.com/nfrankel/opentelemetry-tracing&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;演示&lt;/a&gt;具有两个 Spring Boot 组件。其中一个使用 Java 代理，当我最近将其从 v1.x 升级到 v2.x 时，我注意到了一种不同的行为。在另一例中，我使用 Micrometer Tracing，因为我编译为 GraalVM 本机，并且它无法处理 Java 代理。&lt;/p&gt;&#xA;&lt;p&gt;我想在这篇文章中比较这三种不同的方式：Java 代理 v1、Java 代理 v2 和 Micrometer Tracing。&lt;/p&gt;</description>
      <pubDate>Mon, 12 Aug 2024 16:00:03 +0000</pubDate>
    </item>
    <item>
      <title>【A Deep Dive Into Recommendation Algorithms With Netflix Case Study and NVIDIA Deep Learning Technology】通过 Netflix 案例研究和 NVIDIA 深度学习技术深入探讨推荐算法</title>
      <link>https://dzone.com/articles/a-deep-dive-into-recommendation-algorithms-with-ne</link>
      <description>【&lt;h2 dir=&#34;ltr&#34;&gt;What Are Recommendation Algorithms?&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://dzone.com/articles/demystify-ai-based-recommender-systems-an-in-depth&#34;&gt;Recommendation Engines&lt;/a&gt; are the secret behind every Internet transaction, be it Amazon, Netflix, Flipkart, YouTube, TikTok, even LinkedIn, Facebook, X(Twitter), Snapchat, Medium, Substack, HackerNoon. . . all of these sites and nearly every content curation or product marketplace site on the Internet make their big bucks from recommendation algorithms.&lt;/p&gt;&#xA;&lt;p&gt;Simply put, a recommendation algorithm builds a model of your likes, dislikes, favorites, things you prefer, genres you prefer, and items you prefer, and when one transaction is made on the site, they practically almost read your mind and predict the next product you are most likely to buy. Some of the recommendation algorithms on YouTube and TikTok are so accurate that they can keep users hooked for hours. I would be surprised if even one reader did not report a YouTube binge that came out of just scrolling and clicking/tapping for around ten minutes.&lt;/p&gt;】&lt;h2 dir=&#34;ltr&#34;&gt;什么是推荐算法？&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://dzone.com/articles/demystify-ai-based-recommender-systems-an-in-deep&#34;&gt;推荐引擎&lt;/a&gt;是背后的秘密每笔互联网交易，无论是 Amazon、Netflix、Flipkart、YouTube、TikTok，甚至 LinkedIn、Facebook、X(Twitter)、Snapchat、Medium、Substack、HackerNoon。 。 。所有这些网站以及互联网上几乎所有内容管理或产品市场网站都通过推荐算法赚了大钱。&lt;/p&gt;&#xA;&lt;p&gt;简单地说，推荐算法构建了一个关于您的喜欢、不喜欢、最喜欢的东西、您喜欢的类型和您喜欢的物品的模型，当在网站上进行一笔交易时，他们几乎会读懂您的想法并预测您最有可能购买的下一个产品。 YouTube 和 TikTok 上的一些推荐算法非常准确，可以让用户着迷几个小时。如果甚至有一位读者没有报告仅通过滚动和点击/点击大约十分钟而导致的 YouTube 狂欢，我会感到惊讶。&lt;/p&gt;</description>
      <pubDate>Mon, 12 Aug 2024 17:00:01 +0000</pubDate>
    </item>
    <item>
      <title>【Over-Architected? Maybe, Maybe Not】过度架构？也许，也许不是</title>
      <link>https://dzone.com/articles/over-architected-maybe-maybe-not</link>
      <description>【&lt;p&gt;An oft-heard criticism of way-to-many software solutions is that &lt;em&gt;it&#39;s over-architected&lt;/em&gt;, implying that the design, abstractions, implementation, deployment, or whatever is unnecessarily complex, difficult to understand, unmaintainable, unnecessary, or wrong. Criticisms are often thrown into the ether without context or supporting narrative; criticisms that often stick.&lt;/p&gt;&#xA;&lt;p&gt;So what&#39;s gained by labeling a solution as &lt;em&gt;over-architected&lt;/em&gt;?&lt;br&gt;&lt;br&gt;&lt;img alt=&#34;Software architecture comparisons&#34; class=&#34;fr-fic fr-dib lazyload&#34; data-image=&#34;true&#34; data-new=&#34;false&#34; data-sizeformatted=&#34;625.8 kB&#34; data-mimetype=&#34;image/png&#34; data-creationdate=&#34;1723225522732&#34; data-creationdateformatted=&#34;08/09/2024 05:45 PM&#34; data-type=&#34;temp&#34; data-url=&#34;https://dz2cdn1.dzone.com/storage/temp/17847843-1723225522065.png&#34; data-modificationdate=&#34;null&#34; data-size=&#34;625791&#34; data-name=&#34;1723225522065.png&#34; data-id=&#34;17847843&#34; data-src=&#34;https://dz2cdn1.dzone.com/storage/temp/17847843-1723225522065.png&#34;&gt;&lt;/p&gt;】&lt;p&gt;对多方式软件解决方案的一个经常听到的批评是，它的架构过于复杂，这意味着设计、抽象、实现、部署或任何不必要的复杂、难以理解的内容、不可维护、不必要或错误。批评常常在没有背景或支持性叙述的情况下被抛入空中；经常存在的批评。&lt;/p&gt;&#xA;&lt;p&gt;那么，将解决方案标记为&lt;em&gt;过度架构&lt;/em&gt;会带来什么好处？&lt;br&gt;&lt;br&gt;&lt;img alt=&#34;软件架构比较&#34; class=&#34;fr-fic fr-diblazyload&#34; data- image=&#34;true&#34; data-new=&#34;false&#34; data-sizeformatted=&#34;625.8 kB&#34; data-mimetype=&#34;image/png&#34; data-creationdate=&#34;1723225522732&#34; data-creationdateformatted=&#34;08/09/2024 05:45 PM “ data-type =“temp”data-url =“https://dz2cdn1.dzone.com/storage/temp/17847843-1723225522065.png”data-modificationdate =“null”data-size =“625791”数据名称=&#34;1723225522065.png&#34; data-id=&#34;17847843&#34; data-src=&#34;https://dz2cdn1.dzone.com/storage/temp/17847843-1723225522065.png&#34;&gt;&lt;/p&gt;</description>
      <pubDate>Mon, 12 Aug 2024 18:00:01 +0000</pubDate>
    </item>
    <item>
      <title>【How to Document Your AWS Cloud Infrastructure Using Multicloud-Diagrams Framework】如何使用多云图框架记录您的 AWS 云基础设施</title>
      <link>https://dzone.com/articles/how-to-document-your-cloud-infrastructure-architecture</link>
      <description>【&lt;h2&gt;The Importance of Infrastructure Diagrams in Architecture&lt;/h2&gt;&#xA;&lt;p&gt;In the world of cloud computing and complex &lt;a href=&#34;https://dzone.com/articles/demystifying-distributed-systems-a-beginners-guide&#34;&gt;distributed systems&lt;/a&gt;, creating infrastructure diagrams is vital for understanding, designing, and communicating the architecture of our applications. These diagrams serve as visual blueprints that help teams grasp the layout, connections, and workflows within their systems. They also play a crucial role in documentation, troubleshooting, and scaling operations.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;This article explores the importance of infrastructure diagrams, introduces the multicloud-diagrams framework, and explains the &lt;a href=&#34;https://dzone.com/articles/diagrams-as-code-the-complete-how-to-use-guide&#34;&gt;concept of Diagrams as Code&lt;/a&gt;. We will use AWS cloud nodes and services, but on-prem nodes are also available for usage.&lt;/p&gt;】&lt;h2&gt;基础架构图在架构中的重要性&lt;/h2&gt;&#xA;&lt;p&gt;在云计算和复杂&lt;a href=&#34;https://dzone.com/articles/demystifying-distributed-systems-a-beginners-guide&#34;&gt;分布式系统&lt;/a&gt;的世界中，创建基础架构图是对于理解、设计和交流应用程序的架构至关重要。这些图表充当视觉蓝图，帮助团队掌握系统内的布局、连接和工作流程。它们还在文档记录、故障排除和扩展操作中发挥着至关重要的作用。 &lt;/p&gt;&#xA;&lt;p&gt;本文探讨了基础架构图的重要性，介绍了多云图框架，并解释了&lt;a href=&#34;https://dzone.com/articles/diagrams-as-code-the-complete-how-to -use-guide&#34;&gt;图表即代码的概念&lt;/a&gt;。我们将使用 AWS 云节点和服务，但本地节点也可供使用。&lt;/p&gt;</description>
      <pubDate>Mon, 12 Aug 2024 19:00:01 +0000</pubDate>
    </item>
    <item>
      <title>【Istio Ambient Mesh Performance Test and Benchmarking】Istio 环境网格性能测试和基准测试</title>
      <link>https://dzone.com/articles/istio-ambient-mesh-performance-test-and-benchmarking</link>
      <description>【&lt;p&gt;Istio is the most popular service mesh, but the DevOps and SREs community constantly complain about its performance. Istio Ambient is a sidecar-less approach by the Istio committee (majorly driven by SOLO.io) to improve performance. Since there are many promotions about Ambient mesh being production-ready, many of our prospects and enterprises are generally eager to try or migrate to Ambient mesh.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;Architecturally, the Istio Ambient mesh is a great design that improves performance. But whether it performs quickly is still a question. We have tried Istio Ambient Mesh and observed the performance countless times between January 2024 and July 2024, and we have yet to see any significant performance gains.&amp;nbsp;&lt;/p&gt;】&lt;p&gt;Istio 是最受欢迎的服务网格，但 DevOps 和 SRE 社区不断抱怨其性能。 Istio Ambient 是 Istio 委员会（主要由 SOLO.io 推动）提出的一种无 sidecar 方法，旨在提高性能。由于有很多关于 Ambient Mesh 已投入生产的宣传，我们的许多潜在客户和企业普遍渴望尝试或迁移到 Ambient Mesh。 &lt;/p&gt;&#xA;&lt;p&gt;从架构上来说，Istio Ambient 网格是一个可以提高性能的出色设计。但它是否能快速执行仍然是一个问题。我们已经尝试了 Istio Ambient Mesh，并在 2024 年 1 月到 2024 年 7 月期间无数次观察了性能，但我们尚未看到任何显着的性能提升。 &lt;/p&gt;</description>
      <pubDate>Mon, 12 Aug 2024 11:00:01 +0000</pubDate>
    </item>
    <item>
      <title>【Data Fusion: Enhancing Interoperability, Privacy, and Security】数据融合：增强互操作性、隐私和安全性</title>
      <link>https://dzone.com/articles/data-fusion-enhancing-interoperability-privacy-security</link>
      <description>【&lt;section name=&#34;02b8&#34;&gt;&#xA; &lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/why-a-data-ecosystem-is-essential-for-enterprises&#34;&gt;Data is the backbone of AI systems&lt;/a&gt;, and though the concept of Big Data quenches the data thirst of most AI systems, most of the data is not fit for use readily. To fully understand the problem at hand, accurate and all-encompassing datasets are still needed.&amp;nbsp;&lt;/p&gt;&#xA; &lt;p&gt;Data fusion has gained a lot of traction in digital applications in recent years because the systems feeding on fusion data have higher efficiency and better decision-making skills. The following narrative explains how this multifaceted approach not only streamlines various data utilization needs but also addresses the increasing challenges in the data management landscape.&lt;/p&gt;】&lt;节名称=“02b8”&gt;&#xA; &lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/why-a-data-ecosystem-is-essential-for-enterprises&#34;&gt;数据是人工智能系统的支柱&lt;/a&gt;，尽管大数据的概念满足了大多数人工智能系统对数据的渴求，但大多数数据并不适合立即使用。为了充分理解当前的问题，仍然需要准确且全面的数据集。 &lt;/p&gt;&#xA; 近年来，数据融合在数字应用中获得了很大的关注，因为以融合数据为基础的系统具有更高的效率和更好的决策能力。以下叙述解释了这种多方面的方法如何不仅简化了各种数据利用需求，而且还解决了数据管理领域日益严峻的挑战。&lt;/p&gt;</description>
      <pubDate>Mon, 12 Aug 2024 14:00:01 +0000</pubDate>
    </item>
    <item>
      <title>【The Need for Application Security Testing】应用程序安全测试的必要性</title>
      <link>https://dzone.com/articles/the-need-for-application-security-testing</link>
      <description>【&lt;p dir=&#34;auto&#34;&gt;Security plays a key role whether you are onboarding customer workloads to the &lt;a href=&#34;https://dzone.com/refcardz/cloud-native-application-security-1&#34;&gt;cloud&lt;/a&gt;, designing and developing a new product, or upgrading an existing service. Security is critical in every leg of the software development life cycle (SDLC).&lt;/p&gt;&#xA;&lt;p dir=&#34;auto&#34;&gt;Application security is important, as attackers and cybercriminals will target your software looking for vulnerabilities with the intent to steal data or disrupt operations. In the quest to cater to these challenges, the software industry came up with defending &lt;a href=&#34;https://dzone.com/articles/application-testing-explained&#34;&gt;approaches to Application Security Testing&lt;/a&gt; which are broadly divided into three categories: SAST (static application security testing), DAST (dynamic application security testing), and IAST (interactive application security testing).&lt;/p&gt;】&lt;p dir=&#34;auto&#34;&gt;无论您是否将客户工作负载加载到&lt;a href=&#34;https://dzone.com/refcardz/cloud-native-application-security-1&#34;&gt;云&lt;/ a&gt;，设计和开发新产品，或升级现有服务。安全性在软件开发生命周期 (SDLC) 的每个阶段都至关重要。&lt;/p&gt;&#xA;&lt;p dir=&#34;auto&#34;&gt;应用程序安全非常重要，因为攻击者和网络犯罪分子会针对您的软件寻找漏洞，意图窃取数据或破坏操作。为了应对这些挑战，软件行业提出了保护&lt;a href=&#34;https://dzone.com/articles/application-testing-explained&#34;&gt;应用程序安全测试方法&lt;/a&gt;，这些方法广泛应用于分为三类：SAST（静态应用安全测试）、DAST（动态应用安全测试）、IAST（交互式应用安全测试）。&lt;/p&gt;</description>
      <pubDate>Mon, 12 Aug 2024 13:00:01 +0000</pubDate>
    </item>
    <item>
      <title>【DynamoDB: How To Move Out】DynamoDB：如何移出</title>
      <link>https://dzone.com/articles/dynamodb-how-to-move-out</link>
      <description>【&lt;p&gt;Moving data from one place to another is conceptually simple. You simply read from one datasource and write to another. However, doing that consistently and safely is another story. There are a variety of mistakes you can make if you overlook important details.&lt;/p&gt;&#xA;&lt;p&gt;We recently discussed the top reasons so many organizations are currently seeking DynamoDB alternatives. Beyond costs (the most frequently mentioned factor), aspects such as throttling, hard limits, and vendor lock-in are frequently cited as motivation for a switch.&lt;/p&gt;】&lt;p&gt;将数据从一个地方移动到另一个地方在概念上很简单。您只需从一个数据源读取数据并写入另一个数据源即可。然而，持续、安全地做到这一点又是另一回事了。如果忽略重要细节，您可能会犯各种错误。&lt;/p&gt;&#xA;&lt;p&gt;我们最近讨论了许多组织目前寻求 DynamoDB 替代方案的主要原因。除了成本（最常提到的因素）之外，限制、硬限制和供应商锁定等方面也经常被认为是转换的动机。&lt;/p&gt;</description>
      <pubDate>Mon, 12 Aug 2024 20:00:01 +0000</pubDate>
    </item>
    <item>
      <title>【Java Concurrency: The Happens-Before Guarantee】Java 并发：Happens-Before 保证</title>
      <link>https://dzone.com/articles/java-concurrency-the-happens-before-guarantee</link>
      <description>【&lt;p&gt;Usually, when we write code, we have the assumption that the code is executed in the same sequence as it was written. This is not the case, since for optimization purposes, a re-ordering of the statements happens either on compile time or runtime.&lt;a href=&#34;https://egkatzioura.com/wp-content/uploads/2019/11/javalogo.png&#34;&gt;&lt;img data-permalink=&#34;https://egkatzioura.com/2019/11/03/atomicinteger-on-java/javalogo/&#34; data-orig-size=&#34;1200,2195&#34; data-image-meta=&#34;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&#34; data-image-description=&#34;&#34; data-medium-file=&#34;https://egkatzioura.com/wp-content/uploads/2019/11/javalogo.png?w=164&#34; tabindex=&#34;0&#34; alt=&#34;Java logo&#34; width=&#34;175&#34; height=&#34;320&#34; class=&#34;fr-fic fr-dib lazyload&#34; data-image=&#34;true&#34; data-new=&#34;false&#34; data-sizeformatted=&#34;122.9 kB&#34; data-mimetype=&#34;image/jpeg&#34; data-creationdate=&#34;1723195670493&#34; data-creationdateformatted=&#34;08/09/2024 09:27 AM&#34; data-type=&#34;temp&#34; data-url=&#34;https://dz2cdn1.dzone.com/storage/temp/17845445-1723195669707.jpeg&#34; data-modificationdate=&#34;null&#34; data-size=&#34;122855&#34; data-name=&#34;1723195669707.jpeg&#34; data-id=&#34;17845445&#34; data-src=&#34;https://dz2cdn1.dzone.com/storage/temp/17845445-1723195669707.jpeg&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Regardless when a thread runs a program, the result should be as if all of the actions occurred in the order they appear in the program. The execution of the single thread program should follow as-if-serial semantics. Optimizations and re-orderings can be introduced as long as the result is guaranteed to be the same as the results of the program should the statements have been executed sequentially.&lt;/p&gt;】&lt;p&gt;通常，当我们编写代码时，我们会假设代码的执行顺序与编写时的顺序相同。情况并非如此，因为出于优化目的，语句的重新排序发生在编译时或运行时。&lt;a href=&#34;https://egkatzioura.com/wp-content/uploads/2019/11/javalogo .png&#34;&gt;&lt;img data-permalink=&#34;https://egkatzioura.com/2019/11/03/atomicinteger-on-java/javalogo/&#34; data-orig-size=&#34;1200,2195&#34; data-image-meta =&#34;{&#34;光圈&#34;:&#34;0&#34;,&#34;信用&#34;:&#34;&#34;,&#34;相机&#34;:&#34;&#34;,&#34;标题&#34;:&#34;&#34;,&#34;created_timestamp&#34;:&#34;0&#34;,&#34;版权&#34;:&#34;&#34;,&#34;focal_length&#34; :&#34;0&#34;,&#34;iso&#34;:&#34;0&#34;,&#34;shutter_speed&#34;:&#34;0&#34;,&#34;title&#34;:&#34;&#34;,&#34;orientation&#34;:&#34;0&#34;}&#34; data-image-description=&#34;&#34; data-medium-file =&#34;https://egkatzioura.com/wp-content/uploads/2019/11/javalogo.png?w=164&#34; tabindex=&#34;0&#34; alt=&#34;Java 徽标&#34; width=&#34;175&#34; height=&#34;320&#34; 类=&#34;fr-fic fr-dib lazyload&#34; data-image=&#34;true&#34; data-new=&#34;false&#34; data-sizeformatted=&#34;122.9 kB&#34; data-mimetype=&#34;image/jpeg&#34; data-creationdate=&#34;1723195670493&#34; data-创建日期格式 =“08/09/2024 09:27 AM” data-type =“temp”data-url =“https://dz2cdn1.dzone.com/storage/temp/17845445-1723195669707.jpeg”data-modificationdate =“ null&#34; data-size=&#34;122855&#34; data-name=&#34;1723195669707.jpeg&#34; data-id=&#34;17845445&#34; data-src=&#34;https://dz2cdn1.dzone.com/storage/temp/17845445-1723195669707.jpeg&#34; &gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;无论线程何时运行程序，结果都应该是所有操作都按照它们在程序中出现的顺序发生。单线程程序的执行应该遵循as-if-serial语义。只要保证语句顺序执行的结果与程序的结果相同，就可以引入优化和重新排序。&lt;/p&gt;</description>
      <pubDate>Mon, 12 Aug 2024 12:00:01 +0000</pubDate>
    </item>
  </channel>
</rss>