<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【The Quest for HA and DR in Loki】洛基的HA和DR</title>
      <link>https://dzone.com/articles/the-quest-for-ha-and-dr-in-loki</link>
      <description>【&lt;p&gt;According to the 2016 Ponemon Institute research, the average downtime cost is nearly $9,000 per minute. These downtimes not only cost money, but also hurt the competitive edge and brand reputation. The organization can prepare for downtime by identifying the root causes. For that, they need information on how the software and infrastructure is running. Many software programs help aggregate this information, and one of the popular and most used tools is Loki.&lt;/p&gt;&#xA;&lt;p&gt;However, keeping Loki active under pressure is another problem. Recently, our team ran the single monolith instance of Loki as a private logging solution for our application microservices rather than for observing Kubernetes clusters. The logs were stored in the EBS filesystem. We wanted our system to be more robust and resilient, so we implemented &lt;a href=&#34;https://dzone.com/articles/disaster-recovery-and-high-availability-solutions&#34;&gt;High Availability (HA) and Disaster Recovery (DR)&lt;/a&gt; for our microservice application.&lt;/p&gt;】&lt;p&gt;根据2016年Ponemon Institute研究，平均停机时间为每分钟9,000美元。这些下降不仅要花钱，而且损害了竞争优势和品牌声誉。组织可以通过识别根本原因来为停机做准备。为此，他们需要有关软件和基础架构如何运行的信息。许多软件程序有助于汇总此信息，而流行和最常用的工具之一是Loki。&lt;/p&gt;。&#xA;&lt;p&gt;但是，保持Loki在压力下的活动是另一个问题。最近，我们的团队将Loki的单个Monolith实例作为我们的应用程序微服务的私人记录解决方案，而不是观察Kubernetes簇。日志存储在EBS文件系统中。我们希望我们的系统更加稳健和弹性，因此我们实现了&lt;a href =“ https://dzone.com/articles/disaster-recovery-and-high-availability-solations”&gt;高可用性（HA）和灾难恢复（DR）&lt;/a&gt;用于我们的微服务应用程序。&lt;/p&gt;</description>
      <pubDate>Fri, 31 Jan 2025 22:00:01 +0000</pubDate>
    </item>
    <item>
      <title>【Creating a Service for Sensitive Data With Spring and Redis】用Spring和Redis创建敏感数据的服务</title>
      <link>https://dzone.com/articles/creating-service-sensitive-data-spring-redis</link>
      <description>【&lt;p&gt;Many companies work with user-sensitive data that can’t be stored permanently due to legal restrictions. Usually, this can happen in fintech companies. The data must not be stored for longer than a predefined time period and should preferably be deleted after it has been used for service purposes. There are multiple possible options to solve this problem. In this post, I would like to present a simplified example of an application that handles sensitive data leveraging Spring and Redis.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/10-traits-of-redis&#34;&gt;Redis&lt;/a&gt; is a high-performance NoSQL database. Usually, it is used as an in-memory caching solution because of its speed. However, in this example, we will be using it as the primary datastore. It perfectly fits our problem’s needs and has a good integration with Spring Data.&lt;/p&gt;】&lt;p&gt;许多公司使用对用户敏感的数据，由于法律限制，无法永久存储。通常，这可能在金融科技公司中发生。不得将数据存储的时间比预定义的时间段更长，并且在用于服务目的之后最好将其删除。解决此问题有多种可能的选项。在这篇文章中，我想提出一个简化的示例，该应用程序处理了利用Spring和Redis的敏感数据。&lt;/p&gt;。&#xA;&lt;p&gt; &lt;a href =“ https://dzone.com/articles/10-wraits-of-redis”&gt; redis &lt;/a&gt;是一个高性能的NOSQL数据库。通常，由于其速度，它被用作内存缓存解决方案。但是，在此示例中，我们将使用它作为主要数据存储。它非常适合我们问题的需求，并与春季数据有良好的整合。&lt;/p&gt;</description>
      <pubDate>Fri, 31 Jan 2025 18:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Page Transactions: A New Approach to Test Automation】页面交易：一种新的测试自动化方法</title>
      <link>https://dzone.com/articles/page-transactions-test-automation</link>
      <description>【&lt;p data-selectable-paragraph=&#34;&#34;&gt;&lt;strong&gt;Guará&lt;/strong&gt; is the Python implementation of the design pattern &lt;strong&gt;Page Transactions&lt;/strong&gt;. It is more of a programming pattern than a tool. As a pattern, it can be bound to any driver other than Selenium, including the ones used for Linux, Windows, and Mobile automation.&lt;/p&gt;&#xA;&lt;p data-selectable-paragraph=&#34;&#34;&gt;The intent of this pattern is to simplify test automation. It was inspired by Page Objects, App Actions, and Screenplay. Page Transactions focus on the operations (transactions) a user can perform on an application, such as Login, Logout, or Submit Forms.&lt;/p&gt;】&lt;p数​​据选择 - 段落=“”&gt; &lt;strong&gt;guará&lt;/strong&gt;是设计模式的python实现&lt;strong&gt;页面交易&lt;/strong&gt;。它更像是一种编程模式，而不是工具。作为一种模式，它可以绑定到硒以外的任何驱动程序，包括用于Linux，Windows和移动自动化的驱动程序。&lt;/p&gt;&#xA;&lt;p数​​据可选 - 段落=“”&gt;此模式的目的是简化测试自动化。它的灵感来自页面对象，应用程序操作和剧本。页面交易的重点是用户可以在应用程序上执行的操作（交易），例如登录，注销或提交表单。&lt;/p&gt;</description>
      <pubDate>Fri, 31 Jan 2025 15:00:11 +0000</pubDate>
    </item>
    <item>
      <title>【Front-End Debugging Part 3: Networking】前端调试第3部分：网络</title>
      <link>https://dzone.com/articles/front-end-debugging-part-three-networking</link>
      <description>【&lt;p data-pm-slice=&#34;1 1 []&#34;&gt;Debugging network communication issues is a critical skill for any front-end developer. While tools like Wireshark provide low-level insight into network traffic, modern browsers like Chrome and Firefox offer developer tools with powerful features tailored for web development.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p data-pm-slice=&#34;1 1 []&#34;&gt;In this post, we will discuss using browser-based tools to debug network communication issues effectively. This is a far better approach than using Wireshark for the vast majority of simple cases.&lt;/p&gt;】&lt;p data-pm-slice =“ 1 1 []&gt;调试网络通信问题对于任何前端开发人员来说都是一项关键技能。尽管Wireshark之​​类的工具可为网络流量提供低水平的见解，但Chrome和Firefox（Firefox）等现代浏览器为开发人员工具提供了针对Web开发量身定制的功能。 &lt;/p&gt;&#xA;&lt;p data-pm-slice =“ 1 1 []&gt;在这篇文章中，我们将讨论使用基于浏览器的工具有效调试网络通信问题。这是一种比在绝大多数简单情况下使用Wireshark的方法要好得多。&lt;/p&gt;</description>
      <pubDate>Fri, 31 Jan 2025 12:00:08 +0000</pubDate>
    </item>
    <item>
      <title>【Web Scraping With LLMs, ScrapeGraphAI, and LangChain】与LLM，Scrapegraphai和Langchain的网络刮擦</title>
      <link>https://dzone.com/articles/web-scraping-with-llm-scrapegraphai-langchain</link>
      <description>【&lt;p data-selectable-paragraph=&#34;&#34;&gt;Now that we can &lt;a href=&#34;https://dzone.com/articles/scrape-amazon-product-reviews-with-python&#34;&gt;scrape websites using Python&lt;/a&gt; and its libraries like BeautifulSoup, Requests, and Pandas, let’s take a step ahead and learn how we could simplify it further using LLM. Before we talk about the scraping part, let us understand the terminologies and what an LLM is. You are in the right place to learn about all these words if you are unfamiliar with LangChain, AI, or NLP.&lt;/p&gt;&#xA;&lt;h2 data-selectable-paragraph=&#34;&#34;&gt;What Is LLM?&lt;/h2&gt;&#xA;&lt;p data-selectable-paragraph=&#34;&#34;&gt;LLM stands for &lt;a href=&#34;https://dzone.com/articles/understanding-llm-technology&#34;&gt;large language model&lt;/a&gt;. It is a machine learning model trained on a large amount of data, referred to as a corpus, which consists of vast textual data. Large in the sense that there is a lot of data — terabytes — contained in the data. For example, an LLM may have seen terabytes of data, while a file on your computer system may be sized in gigabytes (GB). LLMs are able to respond to inquiries based on such textual data because of their thorough training. By utilizing them wisely, large language models may be applied to a variety of tasks, including summaries, Q&amp;amp;As, and translations. Just as Python provides libraries and frameworks, LLMs also have these resources.&lt;/p&gt;】&lt;p data-selectable-paragraph =“”&gt;现在我们可以&lt;a href =“ https://dzone.com/articles/scrape-amazon-product-reviews-with-python&gt; scrape网站使用python &lt;/a &gt;及其图书馆，例如Beautifulsoup，请求和Pandas，让我们迈出一步，学习如何使用LLM进一步简化它。在谈论刮擦部分之前，让我们了解术语和LLM是什么。如果您不熟悉Langchain，AI或NLP。&#xA;&lt;H2数据选择 - 段落=“”&gt;什么是llm？&lt;/h2&gt;&#xA;&lt;P Data-Selectable-paragraph =“”&gt; llm代表&lt;a href =“ https://dzone.com/articles/understanding-llm-technology”&gt;大语言模型&lt;/a&gt;。这是一种基于大量数据的机器学习模型，称为语料库，由大量的文本数据组成。从某种意义上说，数据中包含许多数据（Terabytes）。例如，LLM可能已经看到了数据的数据，而您的计算机系统上的文件可能会大小为Gigabytes（GB）。由于其彻底培训，LLM能够根据此类文本数据对询问进行响应。通过明智地利用它们，可以将大型语言模型应用于各种任务，包括摘要，问答和翻译。正如Python提供库和框架一样，LLM也有这些资源。&lt;/p&gt;</description>
      <pubDate>Fri, 31 Jan 2025 19:30:00 +0000</pubDate>
    </item>
    <item>
      <title>【Getting Started With Agentic AI】开始使用Agentic AI</title>
      <link>https://dzone.com/refcardz/getting-started-with-agentic-ai</link>
      <description>【Advancements in AI and automation have paved the way toward agentic automation. Integrating advanced AI techniques, agentic automation enables autonomous agents to handle complex, unstructured tasks with minimal human intervention. In this Refcard, you will learn about the key components of AI agents, design principles for building intelligent agents, and practical applications of agentic automation — all demonstrated via a real-world use case.】AI和自动化的进步已经铺平了朝着代理自动化的道路。集成了先进的AI技术，代理自动化使自主代理能够以最少的人为干预处理复杂的非结构化任务。在此回避中，您将了解AI代理的关键组件，构建智能代理的设计原则以及代理自动化的实际应用 - 所有这些都是通过现实世界中用例证明的。</description>
      <pubDate>Fri, 31 Jan 2025 15:18:56 +0000</pubDate>
    </item>
    <item>
      <title>【Magic of Aspects: How AOP Works in Spring】方面的魔力：AOP在春季的工作方式</title>
      <link>https://dzone.com/articles/magic-of-aspects-how-aop-works-in-spring</link>
      <description>【&lt;p&gt;It is from modern applications that one expects a clean and maintainable codebase in order to be able to manage the growing complexity. This is where Aspect Oriented Programming (AOP) comes in. AOP is a paradigm that enables the developers to separate the cross-cutting concerns (such as logging, metrics, and security) from the business logic of the application, making the code both modular and easy to maintain.&lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;Why Is It Important to Know AOP?&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;I’ll begin with a simple analogy: There are some things that you should do when building a house: you should think about the design of the house, about the rooms and the decor of the rooms.&amp;nbsp;&lt;/p&gt;】&lt;p&gt;从现代应用程序中，人们期望有一个干净可维护的代码库，以便能够管理日益增长的复杂性。这是面向方面的编程（AOP）出现的地方。AOP是一个范式，使开发人员能够将跨剪切问题（例如记录，指标和安全性）与应用程序的业务逻辑分开易于维护。&lt;/p&gt;&#xA;&lt;h2&gt; &lt;strong&gt;为什么了解AOP？&lt;/strong&gt; &lt;/h2&gt;&#xA;&lt;p&gt;我将以一个简单的类比开始：在建造房屋时，您应该做一些事情：您应该考虑房屋的设计，房间和房间的装饰。 &lt;/p&gt;</description>
      <pubDate>Fri, 31 Jan 2025 16:30:02 +0000</pubDate>
    </item>
    <item>
      <title>【Building Custom Tools With Model Context Protocol】使用模型上下文协议构建自定义工具</title>
      <link>https://dzone.com/articles/building-custom-tools-model-context-protocol</link>
      <description>【&lt;p&gt;Model Context Protocol (MCP) is becoming increasingly important in the AI development landscape, enabling seamless integration between AI models and external tools. In this guide, we&#39;ll explore how to create an MCP server that enhances AI capabilities through custom tool implementations.&lt;/p&gt;&#xA;&lt;h2&gt;What Is Model Context Protocol?&lt;/h2&gt;&#xA;&lt;p&gt;MCP is a protocol that allows AI models to interact with external tools and services in a standardized way. It enables AI assistants like Claude to execute custom functions, process data, and interact with external services while maintaining a consistent interface.&lt;/p&gt;】&lt;p&gt;模型上下文协议（MCP）在AI开发环境中变得越来越重要，从而使AI模型和外部工具之间无缝集成。在本指南中，我们将探讨如何创建通过自定义工具实现增强AI功能的MCP服务器。&lt;/p&gt;&#xA;&lt;h2&gt;什么是模型上下文协议？&lt;/h2&gt;&#xA;&lt;p&gt; MCP是一种协议，允许AI模型以标准化的方式与外部工具和服务进行交互。它使像Claude这样的AI助手可以执行自定义功能，处理数据并与外部服务进行交互，同时保持一致的接口。&lt;/p&gt;</description>
      <pubDate>Fri, 31 Jan 2025 21:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【CAP and PACELC Theorems in Plain English】帽子和pacelc定理简单英语</title>
      <link>https://dzone.com/articles/cap-and-pacelc-theorems-in-plain-english</link>
      <description>【&lt;p&gt;Modern distributed systems are all about tradeoffs. Performance, reliability, scalability, and consistency don&#39;t come for free — you always pay a price somewhere. That&#39;s where the CAP theorem comes in: it&#39;s the starting point for understanding the unavoidable compromises in distributed design.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;Why is the &lt;a href=&#34;https://dzone.com/articles/understanding-the-cap-theorem&#34;&gt;CAP theorem&lt;/a&gt; true? What does it actually explain? And, most importantly, is it enough? In this post, we&#39;ll explore the CAP theorem, its limitations, the critiques it has faced, and how newer ideas like PACELC are pushing the conversation forward. Let&#39;s dive in.&lt;/p&gt;】&lt;p&gt;现代分布式系统都与权衡有关。性能，可靠性，可伸缩性和一致性并非免费出现 - 您总是在某个地方支付价格。这就是Cap Therorem所在的地方：这是理解分布式设计中不可避免的妥协的起点。 &lt;/p&gt;&#xA;&lt;p&gt;为什么&lt;a href =“ https://dzone.com/articles/understanding-the-cap theorem”&gt; cap定理&lt;/a&gt;是吗？它实际上解释了什么？而且，最重要的是，足够了吗？在这篇文章中，我们将探讨帽子定理，其局限性，它所面临的批评以及诸如Pacelc之类的新想法如何推动对话的前进。让我们潜入。&lt;/p&gt;</description>
      <pubDate>Fri, 31 Jan 2025 13:30:07 +0000</pubDate>
    </item>
    <item>
      <title>【Understanding the Two Schools of Unit Testing】了解两所单元测试的学校</title>
      <link>https://dzone.com/articles/two-schools-of-unit-testing</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Unit testing is an essential part of software development. Unit tests help to check the correctness of newly written logic as well as prevent a system from regression by testing old logic every time (preferably with every build). However, there are two different approaches (or schools) to writing unit tests: Classical (a.k.a Detroit) and Mockists (or London) schools of unit testing.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;In this article, we’ll explore these two schools, compare their methodologies, and analyze their pros and cons. By the end, you should have a clearer understanding of which approach might work best for your needs.&lt;/p&gt;】&lt;p dir =“ ltr”&gt;单元测试是软件开发的重要组成部分。单位测试有助于检查新书面​​逻辑的正确性，并通过每次测试旧逻辑（最好在每个构建中）来防止系统回归。但是，有两种不同的方法（或学校）来编写单位测试：古典（又称底特律）和单位测试的户外学派（或伦敦）。&lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;在本文中，我们将探索这两所学校，比较他们的方法论并分析他们的利弊。最后，您应该更清楚地了解哪种方法可能最适合您的需求。&lt;/p&gt;</description>
      <pubDate>Thu, 30 Jan 2025 22:00:08 +0000</pubDate>
    </item>
  </channel>
</rss>