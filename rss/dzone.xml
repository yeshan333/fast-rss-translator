<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Observability for Browsers】浏览器的可观察性</title>
      <link>https://dzone.com/articles/observability-for-browsers</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Browser agents are essential tools for &lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-real-user-monitoring&#34;&gt;monitoring&lt;/a&gt; and observability in modern web applications, especially with the increasing complexity of both Single Page Applications (SPAs) and traditional multi-page sites. A browser agent operates within a user’s browser, collecting data on performance metrics, errors, user interactions, and network requests, providing real-time insights into the application’s behavior.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;For &lt;a href=&#34;https://dzone.com/articles/the-comparison-of-single-page-and-multi-page-appli&#34;&gt;SPAs&lt;/a&gt;, browser agents face unique challenges due to the dynamic nature of page transitions, which occur without full reloads. This makes tracking performance metrics, memory leaks, and state changes over time more complex, as data needs to persist and update continuously without the typical page lifecycle events seen in multi-page applications. Conversely, in traditional multi-page websites, challenges arise around data loss due to ephemeral web pages, where navigating away from a page could result in the loss of unsent data.&amp;nbsp;&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;浏览器代理是&lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-real-user-monitoring&#34;&gt;监控&lt;/a&gt;和可观察性的重要工具现代 Web 应用程序，尤其是随着单页应用程序 (SPA) 和传统多页网站的复杂性不断增加。浏览器代理在用户的浏览器中运行，收集有关性能指标、错误、用户交互和网络请求的数据，提供对应用程序行为的实时洞察。 &lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;对于&lt;a href=&#34;https://dzone.com/articles/the-comparison-of-single-page-and-multi-page-appli&#34;&gt;SPA&lt;/a&gt;，浏览器由于页面转换的动态性质（无需完全重新加载），代理面临着独特的挑战。这使得跟踪性能指标、内存泄漏和状态随时间的变化变得更加复杂，因为数据需要持续保存和更新，而不需要多页面应用程序中出现的典型页面生命周期事件。相反，在传统的多页面网站中，由于短暂的网页而导致数据丢失，因此离开页面可能会导致未发送的数据丢失。 &lt;/p&gt;</description>
      <pubDate>Wed, 09 Oct 2024 20:00:05 +0000</pubDate>
    </item>
    <item>
      <title>【The Importance Of Verifying Your GitHub Environment’s Security Controls】验证 GitHub 环境安全控制的重要性</title>
      <link>https://dzone.com/articles/verifying-your-github-environment-security-controls</link>
      <description>【&lt;p&gt;Security is a top priority of every company. It’s not surprising: source code, the most critical asset of any organization, should be under reliable protection — especially in view of constantly rising threats. Ransomware, infrastructure outages, vulnerabilities, and other threats can strike your GitHub repository at any time.&lt;/p&gt;&#xA;&lt;p&gt;Organizations, especially those that operate in the most regulated industries, can face a few main challenges regarding their GitHub data protection. The first one, we have already mentioned — it’s the value of the data stored in the repositories. The second one is their ability to forecast any event of failure and take proactive measures to make sure that their data is available and recoverable in any event of failure.&lt;/p&gt;】&lt;p&gt;安全是每个公司的首要任务。这并不奇怪：源代码是任何组织最重要的资产，应该受到可靠的保护——尤其是考虑到威胁不断增加。勒索软件、基础设施中断、漏洞和其他威胁随时可能攻击您的 GitHub 存储库。&lt;/p&gt;&#xA;&lt;p&gt;组织，尤其是那些在监管最严格的行业中运营的组织，可能会面临有关 GitHub 数据保护的一些主要挑战。第一个，我们已经提到过——它是存储在存储库中的数据的价值。第二个是他们能够预测任何故障事件并采取主动措施以确保其数据在任何故障情况下可用且可恢复。&lt;/p&gt;</description>
      <pubDate>Wed, 09 Oct 2024 18:00:13 +0000</pubDate>
    </item>
    <item>
      <title>【MariaDB Vector Edition: Designed for AI】MariaDB 矢量版：专为 AI 设计</title>
      <link>https://dzone.com/articles/mariadb-vector-edition-hands-on-review</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;As a solutions architect with over two decades of experience in &lt;a href=&#34;https://dzone.com/articles/a-look-at-the-history-of-rdbms&#34;&gt;relational database systems&lt;/a&gt;, I recently started exploring MariaDB&#39;s new Vector Edition to see if it could address some of the AI data challenges we&#39;re facing. A quick look seemed pretty convincing, especially with how it could bring AI magic right into a regular database setup. However, I wanted to test it with a simple use case to see how it performs in practice.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;In this article, I will share my hands-on experience and observations about MariaDB&#39;s &lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-vector-databases&#34;&gt;vector capabilities&lt;/a&gt; by running a simple use case. Specifically, I will be loading sample customer reviews into MariaDB and performing fast similarity searches to find related reviews.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;作为一名在&lt;a href=&#34;https://dzone.com/articles/a-look-at-the-history-of-rdbms&#34;&gt;关系数据库方面拥有二十多年经验的解决方案架构师数据库系统&lt;/a&gt;，我最近开始探索 MariaDB 的新矢量版本，看看它是否可以解决我们面临的一些人工智能数据挑战。快速浏览一下似乎很有说服力，特别是它如何将人工智能魔法直接带入常规数据库设置中。但是，我想用一个简单的用例来测试它，看看它在实践中的表现如何。 &lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;在本文中，我将分享我对 MariaDB &lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-vector-databases&#34;&gt; 的实践经验和观察通过运行一个简单的用例来实现矢量功能&lt;/a&gt;。具体来说，我将把示例客户评论加载到 MariaDB 中，并执行快速相似性搜索来查找相关评论。&lt;/p&gt;</description>
      <pubDate>Thu, 10 Oct 2024 18:00:14 +0000</pubDate>
    </item>
    <item>
      <title>【Augmenting the Client With HTMX】使用 HTMX 增强客户端</title>
      <link>https://dzone.com/articles/augmenting-the-client-with-htmx</link>
      <description>【&lt;p&gt;This post is part of a series comparing different ways to implement asynchronous requests on the client to augment the latter. So far, I described the process with &lt;a href=&#34;https://dzone.com/articles/augmenting-the-client-with-vuejs&#34;&gt;Vue.js&lt;/a&gt; and &lt;a href=&#34;https://dzone.com/articles/augmenting-the-client-with-alpinejs&#34;&gt;Alpine.js&lt;/a&gt;. Both are similar from the developers&#39; point of view: they involve JavaScript.&lt;/p&gt;&#xA;&lt;p&gt;In this post, I&#39;ll focus on &lt;a href=&#34;https://htmx.org/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;HTMX&lt;/a&gt;, whose approach is quite different.&lt;/p&gt;】&lt;p&gt;这篇文章是一系列比较在客户端上实现异步请求以增强后者的不同方法的一部分。到目前为止，我使用 &lt;a href=&#34;https://dzone.com/articles/augmenting-the-client-with-vuejs&#34;&gt;Vue.js&lt;/a&gt; 和 &lt;a href=&#34;https:/ 描述了该过程/dzone.com/articles/augmenting-the-client-with-alpinejs&#34;&gt;Alpine.js&lt;/a&gt;。从开发人员的角度来看，两者很相似：它们都涉及 JavaScript。&lt;/p&gt;&#xA;&lt;p&gt;在这篇文章中，我将重点关注 &lt;a href=&#34;https://htmx.org/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;HTMX&lt;/a&gt;，其方法非常不同。 &lt;/p&gt;</description>
      <pubDate>Thu, 10 Oct 2024 16:00:09 +0000</pubDate>
    </item>
    <item>
      <title>【Microservice Proliferation: Too Many Microservices】微服务激增：微服务太多</title>
      <link>https://dzone.com/articles/microservice-proliferation-too-many-microservices</link>
      <description>【&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/microservice-architecture-2&#34;&gt;Microservices architecture&lt;/a&gt; promotes the development of applications, as suites of small, independent, loosely coupled services. Because of its numerous advantages (e.g., scalability, reliability, faster development cycles, easier maintenance of individual services, etc., detailed in &lt;a href=&#34;https://dzone.com/articles/software-architectural-patterns&#34;&gt;this article&lt;/a&gt;), it has gained significant traction in the software industry lately and organizations are building their applications following microservices architecture. However, it comes with a few pitfalls as well.&lt;/p&gt;&#xA;&lt;p&gt;Recently while working on a use case at work, I observed the other side of microservices architecture, i.e., microservices proliferation. This article is an attempt to detail the pitfalls associated with the excessive creation of microservices (microservices proliferation), offering insights on their causes, implications, and potential strategies for mitigation.&lt;/p&gt;】&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/microservice-architecture-2&#34;&gt;微服务架构&lt;/a&gt;促进应用程序的开发，作为小型、独立、松散耦合的服务套件。由于其众多优势（例如，可扩展性、可靠性、更快的开发周期、更容易维护单个服务等，详细信息请参见&lt;a href=&#34;https://dzone.com/articles/software-architectural-patterns&#34;&gt;此文章&lt;/a&gt;），它最近在软件行业中获得了巨大的关注，组织正在按照微服务架构构建他们的应用程序。然而，它也存在一些缺陷。&lt;/p&gt;&#xA;&lt;p&gt;最近在处理工作用例时，我观察到了微服务架构的另一面，即微服务扩散。本文试图详细介绍与过度创建微服务（微服务扩散）相关的陷阱，并提供有关其原因、影响和潜在缓解策略的见解。&lt;/p&gt;</description>
      <pubDate>Wed, 09 Oct 2024 19:00:08 +0000</pubDate>
    </item>
    <item>
      <title>【Automating PMO Meetings With n8n Automation】使用 n8n Automation 自动化 PMO 会议</title>
      <link>https://dzone.com/articles/automating-pmo-meetings-with-n8n-automation</link>
      <description>【&lt;p&gt;In today&#39;s world data and time are two of the most valuable things. The power of data is always in the news, but what about time? There are a ton of operations that are still being done manually which can easily be automated. Today, I am going to talk about one of those manual tasks that take an eternity to be completed.&lt;/p&gt;&#xA;&lt;p&gt;Yes, I am talking about the prep for &lt;a href=&#34;https://dzone.com/articles/10-project-manager-objectives-to-improve-performan&#34;&gt;PMO&lt;/a&gt; meetings. But you may ask: how can you automate it? Well, here is how I did it using n8n automation.&lt;/p&gt;】&lt;p&gt;在当今世界，数据和时间是最有价值的两个东西。数据的力量总是出现在新闻中，但时间呢？有大量操作仍然需要手动完成，但可以轻松实现自动化。今天，我将讨论一项需要花费很长时间才能完成的手动任务。&lt;/p&gt;&#xA;&lt;p&gt;是的，我说的是&lt;a href=&#34;https://dzone.com/articles/10-project-manager-objectives-to-improve-performan&#34;&gt;PMO&lt;/a&gt;会议的准备工作。但您可能会问：如何实现自动化？嗯，这是我使用 n8n 自动化的方法。&lt;/p&gt;</description>
      <pubDate>Thu, 10 Oct 2024 20:00:05 +0000</pubDate>
    </item>
    <item>
      <title>【Custom Domains for HTTP/2 on Heroku】Heroku 上 HTTP/2 的自定义域</title>
      <link>https://dzone.com/articles/custom-domains-for-http2-on-heroku</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Several months ago, &lt;a href=&#34;https://blog.heroku.com/heroku-http2-public-beta&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Heroku announced HTTP/2 support&lt;/a&gt; from browser to router. This is pretty awesome, as it means our Heroku applications can now reap the benefits of multiplexing and stream prioritization. It looks like Heroku’s roadmap will eventually get HTTP/2 all the way to the dyno, which means we’ll get &lt;a href=&#34;https://dzone.com/articles/grpc-basics&#34;&gt;gRPC&lt;/a&gt; down the road, too. Sweet.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;But, as I read the announcement more closely, I noticed something that’s worth paying attention to:&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;几个月前，&lt;a href=&#34;https://blog.heroku.com/heroku-http2-public-beta&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Heroku 宣布了 HTTP /2 支持&lt;/a&gt;从浏览器到路由器。这非常棒，因为这意味着我们的 Heroku 应用程序现在可以获得多路复用和流优先级的好处。看起来 Heroku 的路线图最终将把 HTTP/2 一直带到 dyno，这意味着我们将使用 &lt;a href=&#34;https://dzone.com/articles/grpc-basics&#34;&gt;gRPC&lt;/a&gt;道路也是如此。甜甜的。&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;但是，当我更仔细地阅读该公告时，我注意到一些值得关注的事情：&lt;/p&gt;</description>
      <pubDate>Thu, 10 Oct 2024 12:00:13 +0000</pubDate>
    </item>
    <item>
      <title>【Leveraging Seekable OCI: AWS Fargate for Containerized Microservices】利用 Seekable OCI：AWS Fargate 实现容器化微服务</title>
      <link>https://dzone.com/articles/seekable-oci-aws-fargate-for-containerized-microservices</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;AWS Fargate&#39;s Seekable OCI (SOCI) introduces significant performance enhancement for containerized applications by enabling lazy loading of &lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-docker-1&#34;&gt;Docker&lt;/a&gt; container images. This reduces startup time for Fargate tasks, particularly for large container images, and makes it ideal for applications that need rapid scaling.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;AWS Fargate is a serverless compute engine that offers many different capabilities:&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;AWS Fargate 的 Seekable OCI (SOCI) 通过启用延迟加载 &lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-docker- ，显着增强了容器化应用程序的性能1&#34;&gt;Docker&lt;/a&gt; 容器镜像。这减少了 Fargate 任务的启动时间，特别是大型容器映像的启动时间，使其成为需要快速扩展的应用程序的理想选择。&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;AWS Fargate 是一个无服务器计算引擎，提供许多不同的功能：&lt;/p&gt;</description>
      <pubDate>Wed, 09 Oct 2024 21:00:04 +0000</pubDate>
    </item>
    <item>
      <title>【Decoding LLM Parameters, Part 2: Top-P (Nucleus Sampling)】解码 LLM 参数，第 2 部分：Top-P（核采样）</title>
      <link>https://dzone.com/articles/decoding-llm-parameters-top-p</link>
      <description>【&lt;h2&gt;LLM Parameters&lt;/h2&gt;&#xA;&lt;p&gt;Like any &lt;a href=&#34;https://dzone.com/refcardz/machine-learning-predictive&#34;&gt;machine learning&lt;/a&gt; model, &lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-large-language-models&#34;&gt;large language models&lt;/a&gt; have various parameters that control the variance of the generated text output. We have &lt;a href=&#34;https://dzone.com/articles/decoding-llm-parameters-temperature&#34;&gt;started a multi-part series&lt;/a&gt; to explain the impact of these parameters in detail. We will conclude by striking the perfect balance in content generation using all of these parameters discussed in our multi-part series.&lt;/p&gt;&#xA;&lt;p&gt;Welcome to the second part, where we discuss another well-known parameter, &#34;Top-P.&#34;&lt;/p&gt;】&lt;h2&gt;法学硕士参数&lt;/h2&gt;&#xA;&lt;p&gt;与任何&lt;a href=&#34;https://dzone.com/refcardz/machine-learning-predictive&#34;&gt;机器学习&lt;/a&gt;模型一样，&lt;a href=&#34;https://dzone.com/refcardz/ Getting-started-with-large-language-models&#34;&gt;大型语言模型&lt;/a&gt;具有各种参数来控制生成的文本输出的方差。我们&lt;a href=&#34;https://dzone.com/articles/decoding-llm-parameters-Temperature&#34;&gt;启动了一个多部分系列&lt;/a&gt;来详细解释这些参数的影响。最后，我们将使用我们的多部分系列中讨论的所有这些参数来实现内容生成的完美平衡。&lt;/p&gt;&#xA;&lt;p&gt;欢迎来到第二部分，我们将讨论另一个众所周知的参数“Top-P”。&lt;/p&gt;</description>
      <pubDate>Wed, 09 Oct 2024 17:00:06 +0000</pubDate>
    </item>
    <item>
      <title>【Operationalize a Scalable AI With LLMOps Principles and Best Practices】利用 LLMOps 原则和最佳实践实施可扩展的人工智能</title>
      <link>https://dzone.com/articles/llmops-principles-and-best-practices</link>
      <description>【&lt;p&gt;Organizations are fully adopting Artificial Intelligence (AI) and proving that AI is valuable. Enterprises are looking for valuable AI use cases that abound in their industry and functional areas to reap more benefits. Organizations are responding to opportunities and threats, gain improvements in sales, and lower costs. Organizations are recognizing the special requirements of AI workloads and enabling them with purpose-built infrastructure that supports the consolidated demands of multiple teams across the organization. Organizations adopting a shift-left paradigm by planning for good governance early in the AI process will minimize AI efforts for data movement to accelerate model development.&lt;/p&gt;&#xA;&lt;p&gt;In an era of rapidly evolving AI, data scientists should be flexible in choosing platforms that provide flexibility, collaboration, and governance to maximize adoption and productivity. Let&#39;s dive into the workflow automation and pipeline orchestration world. Recently, two prominent terms have appeared in the artificial intelligence and machine learning world: MLOps and LLMOps.&amp;nbsp;&lt;/p&gt;】&lt;p&gt;各组织正在全面采用人工智能 (AI)，并证明人工智能的价值。企业正在寻找其行业和功能领域中丰富的有价值的人工智能用例，以获得更多收益。组织正在应对机遇和威胁，提高销售并降低成本。组织正在认识到人工智能工作负载的特殊要求，并为其提供专门构建的基础设施，以支持组织内多个团队的综合需求。通过在人工智能流程的早期规划良好的治理来采用左移范式的组织将最大限度地减少人工智能在数据移动方面的工作，从而加速模型开发。&lt;/p&gt;&#xA;&lt;p&gt;在人工智能快速发展的时代，数据科学家应该灵活地选择提供灵活性、协作和治理的平台，以最大限度地提高采用率和生产力。让我们深入了解工作流自动化和管道编排世界。最近，人工智能和机器学习领域出现了两个著名术语：MLOps 和 LLMOps。 &lt;/p&gt;</description>
      <pubDate>Thu, 10 Oct 2024 14:00:09 +0000</pubDate>
    </item>
  </channel>
</rss>