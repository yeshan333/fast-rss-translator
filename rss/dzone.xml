<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Indexed Views in SQL Server: A Production DBA&#39;s Complete Guide】SQL Server中的索引视图：生产DBA的完整指南</title>
      <link>https://dzone.com/articles/indexed-views-in-sql-server</link>
      <description>【&lt;p&gt;After fifteen years of wrestling with SQL Server performance challenges in production environments, I can confidently say that indexed views remain one of the most underutilized yet powerful features for optimizing query performance.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;Introduced in SQL Server 2000 and significantly enhanced in subsequent versions, indexed views (also known as materialized views) allow you to physically store the result set of a view on disk with a clustered index, dramatically improving query performance for complex aggregations and joins.&amp;nbsp;&lt;/p&gt;】&lt;p&gt;在生产环境中与SQL Server性能挑战进行了15年的搏斗之后，我可以自信地说，索引视图仍然是最少且功能最强的功能之一，用于优化查询性能。 &lt;/p&gt;&#xA;&lt;p&gt;在SQL Server 2000中引入并在随后的版本中显着增强了索引视图（也称为实体视图），您可以将视图的结果集在磁盘上使用群集索引，从而大大提高了复杂聚合和连接的查询性能。 &lt;/p&gt;</description>
      <pubDate>Fri, 11 Jul 2025 12:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【When MySQL, PostgreSQL, and Oracle Argue: Doris JDBC Catalog Acts as the Peacemaker】当MySQL，Postgresql和Oracle争论时：Doris JDBC目录是和平缔造者</title>
      <link>https://dzone.com/articles/when-mysql-postgresql-and-oracle-argue-doris-jdbc</link>
      <description>【&lt;p&gt;At noon, Xiao Wang was staring at his computer screen, looking worried.&lt;/p&gt;&#xA;&lt;p&gt;He is in charge of the company&#39;s data platform and recently received a task: to perform real-time analysis on data from three different databases—&lt;a href=&#34;https://dzone.com/refcardz/essential-mysql&#34;&gt;MySQL&lt;/a&gt;, PostgreSQL, and Oracle.&lt;/p&gt;】&lt;p&gt;中午，王王盯着他的电脑屏幕，看上去很担心。&lt;/p&gt;&#xA;&lt;p&gt;他负责公司的数据平台，最近收到了一项任务：对来自三个不同数据库的数据进行实时分析 -  &lt;a href =“ https://dzone.com/refcardz/refcardz/esential-mysql”&gt; mysql“&gt; mysql”&gt; mysql &lt;/a&gt;</description>
      <pubDate>Fri, 11 Jul 2025 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【How to Reduce Technical Debt With Artificial Intelligence (AI)】如何通过人工智能（AI）减少技术债务</title>
      <link>https://dzone.com/articles/ai-powered-technical-debt-reduction-saas</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Technical debt covertly slows down business progress that builds up over time through rushed software development, outdated systems, and old tools. Companies find it difficult to grow, stay competitive, and keep up with new technology due to technical debt. In today’s digital landscape, wherein the majority of businesses rely on SaaS architecture, technical debt can significantly impact agility, scalability, and efficiency.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Outdated software and systems don’t just slow down performance—they also stop companies from using smarter tools like predictive software. These tools can improve how teams work, spot issues before they happen, and even suggest better ways to run operations.&lt;/p&gt;】&lt;p dir =“ ltr”&gt;技术债务秘密地减慢了业务进步，这种进步随着时间的流逝而通过急需的软件开发，过时的系统和旧工具而累积。公司发现由于技术债务，很难成长，保持竞争力并跟上新技术。在当今的数字景观中，大多数企业都依赖SaaS建筑，技术债务会严重影响敏捷性，可伸缩性和效率。&lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;过时的软件和系统不仅会降低性能，还可以阻止公司使用诸如预测软件之类的智能工具。这些工具可以改善团队的工作方式，在发生问题之前发现问题，甚至提出更好的操作方法。&lt;/p&gt;</description>
      <pubDate>Fri, 11 Jul 2025 20:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【The Cybersecurity Blind Spot in DevOps Pipelines】DevOps管道中的网络安全盲点</title>
      <link>https://dzone.com/articles/cybersecurity-blind-spot-devops-pipelines</link>
      <description>【&lt;p&gt;Speed kills. In software development, that axiom has never been more literal.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/everything-you-need-to-know-about-cicd-pipeline-pa&#34;&gt;DevOps pipelines&lt;/a&gt; surge through modern enterprises like digital bloodstreams — pumping code, configurations, and deployments at breakneck velocity. Continuous integration and continuous delivery are the promises of rapid iteration and market responsiveness that transformed how we build, test, and ship software. Yet beneath this technological marvel lurks a terrifying reality: every pipeline becomes a potential superhighway for cybercriminals.&lt;/p&gt;】&lt;p&gt;速度杀死。在软件开发中，该公理从来都不是字面上的。&lt;/p&gt;&#xA;&lt;p&gt; &lt;a href =“ https://dzone.com/articles/everything-you-need-to-need-need-cout-cicd-pipeline-pa--pipeline-pa”&gt; devops Pipelines &lt;/a&gt;通过现代企业（如数字血统）（例如泵种代码，配置，配置和部署）在Breakneck Velocity上激发现代企业。持续的集成和持续交付是快速迭代和市场响应能力的承诺，这改变了我们的构建，测试和船舶软件的方式。然而，在这一技术奇迹之下，潜伏着一个可怕的现实：每个管道都成为网络犯罪分子的潜在超高速公路。&lt;/p&gt;</description>
      <pubDate>Fri, 11 Jul 2025 14:00:04 +0000</pubDate>
    </item>
    <item>
      <title>【Testing the MongoDB MCP Server Using SingleStore Kai】使用SINGLESTORE KAI测试MongoDB MCP服务器</title>
      <link>https://dzone.com/articles/testing-mongodb-mcp-server-with-singlestore-kai</link>
      <description>【&lt;p&gt;MongoDB recently announced the release of an official MCP Server. At the time of writing this article, the release version was shown as 0.1.0. In this article, we&#39;ll test this early release version against SingleStore Kai, a MongoDB-compatible API developed by SingleStore, designed to enable applications built for MongoDB to run on SingleStore with minimal changes. We&#39;ll configure and test the MongoDB MCP Server using a freely available tool called &lt;a href=&#34;https://github.com/mark3labs/mcphost&#34; target=&#34;_blank&#34;&gt;MCPHost&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The notebook file used in this article is available on &lt;a href=&#34;https://github.com/VeryFatBoy/singlestore-kai-mcp-example&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;】&lt;p&gt; MongoDB最近宣布发布官方MCP服务器。在撰写本文时，发行版本显示为0.1.0。在本文中，我们将测试此早期版本，针对Singlestore Singlestore Kai（由Singlestore开发的MongoDB兼容API），旨在启用为MongoDB构建的应用程序，以最小的更改在Singlestore上运行。我们将使用称为&lt;a href =“ https://github.com/mark3labs/mcphost” target =“ _ black”&gt; mcphost &lt;/a&gt;。&#xA;&lt;p&gt;本文中使用的笔记本文件可在&lt;a href =“ https://github.com/veryfatboy/singlestore-kai-kai-mcp-example” target =“ _ black”&gt; github &lt;/a&gt;。&lt;/p&gt;</description>
      <pubDate>Fri, 11 Jul 2025 11:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Secret Recipe of the Template Method: Po Learns the Art of Structured Cooking】模板方法的秘方：PO学习结构化烹饪的艺术</title>
      <link>https://dzone.com/articles/template-method-pattern-java-kung-fu-panda</link>
      <description>【&lt;p data-pm-slice=&#34;1 1 []&#34;&gt;A grand gala was being held at the Jade Palace. The Furious Five were preparing, and Po was helping his father, Mr. Ping, in the kitchen. But as always, Po had questions.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Po&lt;/strong&gt; (curious): &#34;Dad, how do you always make the perfect noodle soup no matter what the ingredients are?&#34;&lt;/p&gt;】&lt;p data-pm-slice =“ 1 1 []”&gt;在玉宫举行了一个大庆典。愤怒的五人正在准备，Po在厨房里帮助他的父亲Ping先生。但是和往常一样，PO有疑问。&lt;/p&gt;&#xA;&lt;p&gt; &lt;strong&gt; po &lt;/strong&gt;（好奇）：“爸爸，无论食材是什么，您如何总是制作完美的面条汤？” &lt;/p&gt;</description>
      <pubDate>Fri, 11 Jul 2025 15:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Beyond the Glass Slab: How AI Voice Assistants are Morphing Into Our Real-Life JARVIS】超越玻璃板：AI语音助手如何变形到我们的真实生活</title>
      <link>https://dzone.com/articles/jarvis-agentic-ai-voice-assistants-future</link>
      <description>【&lt;p&gt;Remember JARVIS? Tony Stark&#39;s ever-present, hyper-intelligent AI, seamlessly managing his life, his suits, and even his quips. For years, it felt like a distant sci-fi fantasy. But here&#39;s the thing—as someone who&#39;s been building the future of &lt;a href=&#34;https://dzone.com/articles/what-is-voice-ai-how-does-it-work&#34;&gt;voice AI&lt;/a&gt; as a Software Development Manager on the Alexa team, I can tell you we&#39;re closer than you might think. If you&#39;re like me, constantly tapping and swiping your phone, you&#39;ve probably caught yourself wondering: are we on the cusp of AI voice assistants becoming our JARVIS, so much so that they might just make our beloved mobile phones obsolete?&lt;/p&gt;&#xA;&lt;p&gt;It&#39;s a bold claim, I know. Our smartphones are basically extensions of ourselves at this point, right? Indispensable tools for communication, information, and let&#39;s face it—endless scrolling. But what if the next leap isn&#39;t just better smartphones, but something entirely different? I&#39;m talking about a paradigm shift where the interface melts away, and truly intelligent, proactive AI becomes our primary digital companion.&lt;/p&gt;】&lt;p&gt;还记得贾维斯吗？托尼·史塔克（Tony Stark）永远存在，超级智能的AI，无缝管理自己的生活，西装，甚至是他的讽刺。多年来，感觉就像是一个遥远的科幻幻想。但这就是事实 - 作为一个一直在建立&lt;a href =“ https://dzone.com/articles/what-is-is-voice-voice-voice-ai-how-does-it-work”&gt; Voice AI &lt;/a&gt;作为Alexa团队的软件开发经理的人，我可以告诉您，我们比您可能想像的更接近。如果您像我一样，不断地敲击手机，您可能会想知道：我们是否在AI语音助手的风口浪尖上成为我们的jarvis，以至于他们可能只是使我们心爱的手机过时了吗？&lt;/p&gt;&#xA;&lt;p&gt;我知道这是一个大胆的主张。目前，我们的智能手机基本上是我们自己的扩展，对吗？不可或缺的工具用于通信，信息和让我们面对现实 - 无端滚动。但是，如果下一个飞跃不仅是更好的智能手机，还可以完全不同呢？我说的是范式融化的范式变化，真正聪明，主动的AI成为我们的主要数字伴侣。&lt;/p&gt;</description>
      <pubDate>Fri, 11 Jul 2025 17:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Server-Driven UI: Agile Interfaces Without App Releases】服务器驱动的UI：没有应用程序的敏捷接口</title>
      <link>https://dzone.com/articles/server-driven-ui-agile-interfaces-without-app-releases</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Mobile development presents unique challenges in delivering new features and UI changes to users. We often find ourselves waiting on App Store or Play Store review cycles for even minor UI updates. Even after an update is approved, not all users install the latest version right away. This lag means some portion of our audience might be stuck on older UIs, leading to inconsistent user experiences across app versions. In traditional native development, any change to the interface — from a simple text tweak to a full layout overhaul — requires releasing a new app version. Combined with lengthy QA and release processes, this slows down our ability to respond to feedback or run timely experiments.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Teams have explored workarounds to make apps more flexible. Some have tried loading portions of the UI in a web view, essentially embedding web pages in the app to avoid full releases. Cross-platform frameworks like &lt;a href=&#34;https://dzone.com/articles/flutter-vs-react-native-development-comparison-and&#34;&gt;React Native and Flutter&lt;/a&gt; reduce duplicated effort across iOS and Android, but they still package a fixed UI that requires redeployment for changes. In short, mobile UIs have historically been locked in code at build time. This rigidity clashes with the fast pace of modern product iterations. We need a way to change app interfaces on the fly — one that doesn’t sacrifice native performance or user experience. This is where server-driven UI (SDUI) enters the picture.&lt;/p&gt;】&lt;p dir =“ ltr”&gt;移动开发在向用户提供新功能和UI更改方面提出了独特的挑战。我们经常发现自己在App Store上等待，或者在播放商店的评论周期甚至次要的UI更新。即使在批准更新后，并非所有用户都会立即安装最新版本。这一滞后意味着我们的某些受众可能会被困在较旧的UI上，从而导致应用版本的用户体验不一致。在传统的本地开发中，对界面的任何更改（从简单的文本调整到完整的布局大修）都需要发布新的应用程序版本。结合冗长的质量检查和发布过程，这减慢了我们对反馈或及时实验的反应能力。&lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;团队已经探索了解决方法以使应用程序更加灵活。有些人尝试在Web视图中加载UI的部分，从本质上嵌入了应用程序中的网页，以避免完整发行。跨平台框架，例如&lt;a href =“ https://dzone.com/articles/flutter-vs-react-native-development-comparison--comparison------&gt; React Native and Flutter &lt;/a&gt; &lt;/a&gt;减少了iOS和Android的重复努力，但他们仍然包装了固定的UI，需要更改重新支配的UI。简而言之，移动UI在构建时间历史上已被锁定在代码中。这种刚性与现代产品迭代的快速相冲突。我们需要一种即时更改应用程序接口的方法 - 不会牺牲本地性能或用户体验。这是服务器驱动的UI（SDUI）进入图片的地方。&lt;/p&gt;</description>
      <pubDate>Fri, 11 Jul 2025 19:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Scaling Multi-Tenant Go Apps: Choosing the Right Database Partitioning Approach】缩放多租户GO应用：选择正确的数据库分区方法</title>
      <link>https://dzone.com/articles/scaling-multi-tenant-go-applications</link>
      <description>【&lt;p&gt;Consider the typical scenario where your platform serves both enterprise clients with hundreds of thousands of users, as well as small businesses with just a handful. With traditional database partitioning strategies, you are likely to run into these common issues:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA; &lt;li&gt;&lt;strong&gt;Partition imbalance&lt;/strong&gt;: Large tenants create oversized partitions while small tenants waste allocated resources&lt;/li&gt;&#xA; &lt;li&gt;&lt;strong&gt;Hot partitions&lt;/strong&gt;: High-activity tenants overwhelm individual database partitions, creating performance bottlenecks&lt;/li&gt;&#xA; &lt;li&gt;&lt;strong&gt;Inefficient queries&lt;/strong&gt;: User-specific lookups require scanning entire tenant datasets&lt;/li&gt;&#xA; &lt;li&gt;&lt;strong&gt;Resource contention&lt;/strong&gt;: Mixed workloads compete for the same database resources&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Azure Cosmos DB has been a go-to solution for &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/architecture/guide/multitenant/service/cosmos-db&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;multi-tenant applications&lt;/a&gt; due to its global distribution, automatic scaling, and flexible data models. Its partition-based architecture naturally aligns with tenant isolation requirements, making it attractive for SaaS platforms, IoT applications, and content management systems.&lt;/p&gt;】&lt;p&gt;考虑您的平台为拥有数十万用户的企业客户提供服务的典型情况，以及只有少数用户的小型企业。有了传统的数据库分区策略，您可能会遇到这些常见问题：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA; &lt;li&gt; &lt;strong&gt;分区不平衡&lt;/strong&gt;：大租户创建超大分区，而小租户浪费了分配的资源&lt;/li&gt;&#xA; &lt;li&gt; &lt;strong&gt;热分区&lt;/strong&gt;：高活动租户压倒了单个数据库分区，创建绩效瓶颈&lt;/li&gt;&#xA; &lt;li&gt; &lt;strong&gt;效率低下的查询&lt;/strong&gt;：特定于用户的查找需要扫描整个租户数据集&lt;/li&gt;&#xA; &lt;li&gt; &lt;strong&gt;资源争夺&lt;/strong&gt;：混合工作负载竞争相同的数据库资源&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; azure cosmos db一直是&lt;a href =“ https://learn.microsoft.com/en-us/azure/azure/azure/azure/azure/guide/guide/guide/guide/multitenant/mmultitenant/service/cosmos/cosmos/cosmos-db” rel =“ rel =” noopener noreferrer noOpener noreferrer“ noOpener noreferrer” noore noreferrer“ target =” tobless =“ _ _ blank sprannications to Multonications”灵活的数据模型。其基于分区的架构自然与租户隔离要求保持一致，使其对SaaS平台，IoT应用程序和内容管理系统具有吸引力。&lt;/p&gt;</description>
      <pubDate>Fri, 11 Jul 2025 13:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【MongoDB Change Streams and Go】mongodb改变流并去</title>
      <link>https://dzone.com/articles/mongodb-change-streams-and-go</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://www.mongodb.com/docs/manual/changeStreams/&#34;&gt;Change streams&lt;/a&gt; allow you to subscribe to real-time updates in your MongoDB collections and databases. With the &lt;a href=&#34;https://github.com/mongodb/mongo-go-driver&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;MongoDB Go Driver&lt;/a&gt;, you can tap into these streams and build reactive applications that respond to data changes in MongoDB instantly. You can build features like real-time notifications and collaborative apps or kick off different workflows based on changes to your data.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;In this tutorial, we’ll take a look at how you can work with MongoDB change streams when building Go applications. We’ll use the native MongoDB Go Driver and MongoDB Atlas to showcase various use cases that rely on change streams.&amp;nbsp;&lt;/p&gt;】&lt;p dir =“ ltr”&gt; &lt;a href =“ https://www.mongodb.com/docs/manual/changestreams/”&gt;更改流&lt;/a&gt; &lt;/a&gt;允许您在MongoDB集合和数据库中订阅以实时更新。使用&lt;a href =“ https://github.com/mongodb/mongo-go-driver” rel =“ noopener noreferrer” target =“ _ black”&gt; mongodb go droge &lt;/a&gt;，您可以点击这些流并构建对Mongongodb Intelly响应数据变化的反应性应用程序。您可以构建实时通知和协作应用程序之类的功能，也可以根据数据的更改启动不同的工作流程。&lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;在本教程中，我们将研究如何在构建GO应用程序时如何使用MongoDB更改流。我们将使用本机MongoDB Go驱动程序和MongoDB Atlas展示依赖变化流的各种用例。 &lt;/p&gt;</description>
      <pubDate>Fri, 11 Jul 2025 18:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>