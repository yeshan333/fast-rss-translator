<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Understanding Infrastructure as Code at Scale】将基础架构理解为规模的代码</title>
      <link>https://dzone.com/articles/understanding-infrastructure-as-code-at-scale</link>
      <description>【&lt;p&gt;Infrastructural as Code is an IT approach where the process involved in infrastructure configuration, deployment, and monitoring are checked through coded expressions. IaC also increases the deployment rate and is significant when applied with cloud resources.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;&#34;IaC at scale&#34; means using this approach for massive cloud infrastructures, for thousands of resources in single or multiple environments. That is why &lt;a href=&#34;https://dzone.com/articles/infrastructure-as-code-everything-you-need-to-know&#34;&gt;adopting IaC&lt;/a&gt; to scale up its use brings into focus the aspects of agility, efficiency, and consistency in the infrastructure. However, it also creates problems regarding the organization of the dependencies and the coordination of the configurations that are to be in place across several resources.&lt;/p&gt;】&lt;p&gt;基础架构作为代码是一种IT方法，通过编码表达式检查基础结构配置，部署和监视的过程。 IAC还提高了部署率，并在与云资源一起应用时很重要。 &lt;/p&gt;&#xA;&lt;p&gt;“大规模IAC”是指在单个或多个环境中使用这种方法用于大规模的云基础架构，用于数千个资源。这就是为什么&lt;a a href =“ https://dzone.com/articles/infrastructure-as-code-code-everything-you-need-need-to-know-”&gt;采用IAC &lt;/a&gt; &lt;/a&gt;以扩大其用途，从而使焦点成为焦点敏捷性，效率和基础设施一致性的各个方面。但是，它也会引起有关依赖关系的组织以及要在几个资源中存在的配置的协调的问题。&lt;/p&gt; &lt;/p&gt;</description>
      <pubDate>Mon, 17 Feb 2025 22:30:00 +0000</pubDate>
    </item>
    <item>
      <title>【From Data to Decisions: Visualizing SAP Insights With Python】从数据到决策：用Python可视化SAP见解</title>
      <link>https://dzone.com/articles/visualizing-sap-insights-with-python</link>
      <description>【&lt;p&gt;SAP has always enjoyed the position of being the most trusted enterprise resource planning software where it brings in all the departments in an organization like sales, inventory, production, quality, human resources, and more. Data that resides in SAP ERP data is the bedrock for all decision-making as it provides a single source of truth to the entire organization. Visualizing this data can uncover market trends and patterns and provide actionable insights to the leadership team.&lt;/p&gt;&#xA;&lt;p&gt;While SAP itself has business objects as its flagship visualization tool, as developers, we are going to explore how Python, with its robust ecosystem of libraries, can be as powerful and can be consumed freely by any developer.&lt;/p&gt;】&lt;p&gt; SAP始终享受成为最受信任的企业资源计划软件的地位，它可以将其带入诸如销售，库存，生产，质量，人力资源等组织中的所有部门。位于SAP ERP数据中的数据是所有决策的基础，因为它为整个组织提供了一个真实的来源。可视化这些数据可以发现市场趋势和模式，并为领导团队提供可行的见解。&lt;/p&gt;&#xA;&lt;p&gt;尽管SAP本身将业务对象作为其旗舰可视化工具，但作为开发人员，我们将探讨Python如何具有强大的图书馆生态系统，可以具有强大的功能，并且可以被任何开发人员自由消费。&lt;/p&gt; &lt;/p&gt; &lt;/p&gt;</description>
      <pubDate>Mon, 17 Feb 2025 13:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Apache Flink: Full Checkpoint vs Incremental Checkpoint】Apache Flink：完整检查点与增量检查点</title>
      <link>https://dzone.com/articles/apache-flink-full-checkpoint-vs-incremental-checkpoint</link>
      <description>【&lt;p style=&#34;text-align: left;&#34;&gt;Apache Flink is a real-time data stream processing engine. Most of the stream processing applications are ‘stateful.’ This means the state is stored and used for further processing. In Apache Flink, the state is managed through a configured state backend. Flink supports two-state backends in production. One is the &lt;code&gt;HashMapStateBackend&lt;/code&gt;, and the other one is the &lt;code&gt;EmbeddedRocksDBStateBackend&lt;/code&gt;.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p style=&#34;text-align: left;&#34;&gt;To prevent data loss and achieve fault tolerance, Flink can persist snapshots of the state to a durable storage. Flink can be configured to snapshot either the entire state into a durable location or the delta since the last snapshot. The former is called full checkpoint, and the latter is known as the incremental checkpoint.&amp;nbsp;&lt;/p&gt;】&lt;p style =“ text-align：left;”&gt; apache flink是一种实时数据流处理引擎。大多数流处理应用程序都是“陈述的”。这意味着该状态被存储并用于进一步处理。在Apache Flink中，该状态通过配置的状态后端进行管理。 Flink支持生产的两国后端。一个是&lt;code&gt; hashmapstatebackend &lt;/code&gt;，另一个是&lt;code&gt; EmbeddedRockSdbStateBackend &lt;/code&gt;。 &lt;/p&gt;&#xA;&lt;p style =“ text-align：left;”&gt;为了防止数据丢失并实现容错，Flink可以将状态的快照持续到耐用的存储空间。自上次快照以来，可以将FLINK配置为快照整个状态或耐用位置或三角洲。前者称为完整检查点，后者称为增量检查点。 &lt;/p&gt;</description>
      <pubDate>Mon, 17 Feb 2025 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Integrating Apex With Lightning Web Components】将顶点与闪电网络组件集成</title>
      <link>https://dzone.com/articles/integrating-apex-lightning-web-components</link>
      <description>【&lt;p style=&#34;text-align: left;&#34;&gt;Salesforce’s Lightning Web Component (LWC) is a modern UI framework that developers use to create custom pages and functionalities on the Salesforce Lightning platform. While LWC allows developers to build powerful and interactive user interfaces, it often requires back-end integration to fetch or update data from Salesforce. This back-end support is provided by &lt;strong&gt;Apex&lt;/strong&gt;, Salesforce&#39;s server-side programming language.&lt;/p&gt;&#xA;&lt;p style=&#34;text-align: left;&#34;&gt;In this article, we will explore three common methods for &lt;a href=&#34;https://dzone.com/articles/lightning-strikes-the-web-unraveling-the-open-sour&#34;&gt;integrating LWC&lt;/a&gt; with Apex:&lt;/p&gt;】&lt;p style =“ text-align：left;”&gt; Salesforce的Lightning Web组件（LWC）是一个现代的UI框架，开发人员使用它在Salesforce Lightning平台上创建自定义页面和功能。尽管LWC允许开发人员构建功能强大的交互式用户界面，但通常需要后端集成才能从Salesforce获取或更新数据。此后端支持由Salesforce的服务器端编程语言提供&lt;strong&gt; Apex &lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p style =“ text-align：left;”&gt;在本文中，我们将探索&lt;a href =“ https://dzone.com/articles/lightning-strikes-strikes-theb-unravel-the-the-the-the-the-the-the-the-the-the-the-the-the，我们将探索三种常见方法 - 开机“&gt;集成LWC &lt;/a&gt;与Apex：&lt;/p&gt;</description>
      <pubDate>Mon, 17 Feb 2025 20:00:06 +0000</pubDate>
    </item>
    <item>
      <title>【Creating a Web Project: Key Steps to Identify Issues】创建一个Web项目：确定问题的关键步骤</title>
      <link>https://dzone.com/articles/creating-a-web-project-key-steps-to-identify-issue</link>
      <description>【&lt;p dir=&#34;ltr&#34; style=&#34;text-align: left;&#34;&gt;When developing a product, issues inevitably arise that can impact both its performance and stability. Slow system response times, error rate increases, bugs, and failed updates can all damage the reputation and efficiency of your project.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34; style=&#34;text-align: left;&#34;&gt;However, before addressing these problems, it is essential to gather and analyze statistics on their occurrence. This data will help you make informed decisions regarding refactoring, optimization, and error-fixing strategies.&lt;/p&gt;】&lt;p dir =“ ltr” style =“ text-align：left;”&gt;开发产品时，不可避免地会出现会影响其性能和稳定性的问题。系统响应时间缓慢，错误率增加，错误和失败更新可能会损害项目的声誉和效率。 &lt;/p&gt;&#xA;&lt;p dir =“ ltr” style =“ text-align：left;”&gt;但是，在解决这些问题之前，必须收集和分析其发生的统计信息。这些数据将帮助您做出有关重构，优化和固定错误策略的明智决定。&lt;/p&gt;</description>
      <pubDate>Mon, 17 Feb 2025 18:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Build a Data Analytics Platform With Flask, SQL, and Redis】使用烧瓶，SQL和Redis构建数据分析平台</title>
      <link>https://dzone.com/articles/build-data-analytics-platform-flask-sql-redis</link>
      <description>【&lt;p&gt;In this article, I’ll walk through the development of a Flask-based web application that interacts with an SQL Server database to analyze population data. The application allows users to query population ranges, fetch counties by state, and retrieve states within specific population ranges. I shall also discuss how to integrate Redis for caching query results to improve performance.&lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;Why Flask, SQL Server, and Redis?&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/python-flask-code-generator&#34;&gt;Flask&lt;/a&gt; is a lightweight and flexible Python web framework that is perfect for building small to medium-sized web applications. It provides the necessary tools to create RESTful APIs, render dynamic HTML templates, and interact with databases. On the other hand, &lt;a href=&#34;https://dzone.com/articles/sql-server-from-zero-to-advanced-level&#34;&gt;SQL Server&lt;/a&gt; is a robust relational database management system (RDBMS) that is widely used in enterprise applications. Combining Flask with SQL Server allows us to build a powerful application for data analysis and visualization.&lt;/p&gt;】&lt;p&gt;在本文中，我将介绍基于烧瓶的Web应用程序的开发，该应用程序与SQL Server数据库进行交互以分析总体数据。该应用程序允许用户查询人口范围，按州提取县，并在特定人口范围内检索状态。我还将讨论如何整合redis以进行缓存查询结果以提高性能。&lt;/p&gt;&#xA;&lt;H2&gt; &lt;strong&gt;为什么要烧瓶，S​​QL Server和Redis？&lt;/strong&gt; &lt;/h2&gt;&#xA;&lt;p&gt; &lt;a href =“ https://dzone.com/articles/python-flask-code-generator”&gt;烧瓶&lt;/a&gt;是一个轻巧且灵活的python网络框架，非常适合构建小型至中型的构建Web应用程序。它提供了必要的工具来创建静止的API，渲染动态的HTML模板并与数据库进行交互。另一方面，&lt;a href =“ https://dzone.com/articles/sql-server-server-from-zero-zero-wom-zere-to-advanced-level”&gt; sql Server &lt;/a&gt;是一个可靠的关系数据库管理系统（RDBMS） ）广泛用于企业应用程序中。将烧瓶与SQL Server相结合，使我们能够构建一个强大的应用程序来进行数据分析和可视化。&lt;/p&gt;</description>
      <pubDate>Mon, 17 Feb 2025 14:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Have LLMs Solved the Search Problem?】LLM解决了搜索问题吗？</title>
      <link>https://dzone.com/articles/have-llms-solved-the-search-problem</link>
      <description>【&lt;p data-pm-slice=&#34;1 1 []&#34;&gt;The advent of large language models (LLMs) has catalyzed a paradigm shift in information retrieval and human-computer interaction. These models, trained on vast corpora of text and optimized for predictive linguistic tasks, have demonstrated substantial efficacy in responding to queries, summarizing textual content, and generating contextually relevant information.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p data-pm-slice=&#34;1 1 []&#34;&gt;However, despite their impressive generative capabilities, LLMs do not inherently resolve the complexities of &lt;a href=&#34;https://dzone.com/articles/parent-document-retrieval-useful-technique-in-rag&#34;&gt;search and retrieval&lt;/a&gt; in structured and unstructured data landscapes. Instead, they require augmentation with advanced techniques such as semantic chunking, vector embeddings, and context-aware personalization to optimize precision and recall.&lt;/p&gt;】&lt;p data-pm-slice =“ 1 1 []&gt;大语言模型（LLMS）的出现已经催化了信息检索和人类计算机交互的范式转移。这些模型经过广泛的文本培训并针对预测性语言任务进行了优化，在响应查询，汇总文本内容并生成上下文相关的信息方面已经证明了很大的功效。 &lt;/p&gt;&#xA;&lt;p data-pm-slice =“ 1 1 []&gt;但是，尽管具有令人印象深刻的生成能力，但LLMS并不能固有地解决&lt;a href =的复杂性，在结构化和非结构化的数据景观中，检索可用的技术&gt;搜索和检索&lt;/a&gt;。取而代之的是，它们需要使用高级技术（例如语义块，矢量嵌入和上下文感知的个性化）进行增强，以优化精度和回忆。&lt;/p&gt;</description>
      <pubDate>Mon, 17 Feb 2025 17:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【The Slides of Hands-On Agile 2025】动手敏捷2025的幻灯片</title>
      <link>https://dzone.com/articles/the-slides-of-hands-on-agile-2025</link>
      <description>【&lt;p&gt;If you weren’t at the virtual Hands-on Agile 2025 conference earlier this month, you missed an incredible opportunity to explore the shift from concept-based to context-based agility with nearly 800 fellow agilists. But don’t worry — I’m here to share some of the key takeaways and insights!&lt;/p&gt;&#xA;&lt;p&gt;Check out the slides from the live-stream speakers below; I will keep you posted on the availability of the recordings.&lt;/p&gt;】&lt;p&gt;如果您不是本月初的虚拟动手动手敏捷2025会议，那么您错过了一个令人难以置信的机会，可以探索与近800名敏捷派的基于基于概念的敏捷性转变为基于上下文的敏捷性的转变。但请放心 - 我在这里分享一些关键的收获和见解！&lt;/p&gt;&#xA;&lt;p&gt;查看下面的现场流扬声器的幻灯片；我会及时通知您录音的可用性。&lt;/p&gt;</description>
      <pubDate>Mon, 17 Feb 2025 21:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Page Transactions and Page Object Model】页面交易和页面对象模型</title>
      <link>https://dzone.com/articles/page-transactions-and-page-object-model</link>
      <description>【&lt;p data-selectable-paragraph=&#34;&#34;&gt;&lt;span style=&#34;background-color: transparent;&#34;&gt;Recently, I wrote an article on Page Transactions as a new approach to test automation&lt;/span&gt;&lt;span style=&#34;background-color: transparent;&#34;&gt;, focusing on simplicity, readability, and flexibility.&lt;/span&gt; Now, I present a structured comparison of &lt;span style=&#34;margin: 0px; padding: 0px;&#34;&gt;&lt;strong&gt;Page Transactions&lt;/strong&gt; &lt;strong&gt;(PT)&amp;nbsp;&lt;/strong&gt;and &lt;strong&gt;P&lt;/strong&gt;&lt;strong&gt;age Object Model&lt;/strong&gt; &lt;strong&gt;(POM)&lt;/strong&gt;,&lt;/span&gt; explaining the pros and cons of each pattern. Finally, I will give some tips on migrating from POM to PT in simple steps.&lt;/p&gt;&#xA;&lt;p&gt;To those who are not familiar with POM, in a nutshell, it is a &lt;a href=&#34;https://dzone.com/articles/page-object-model-pom-with-playwright&#34;&gt;design pattern used in testing automation&lt;/a&gt; where the objects on a UI page are represented as methods in a class and where each class represents the UI page itself.&lt;/p&gt;】&lt;p数​​据选择 -  paragraph =“”&gt; &lt;span style =“背景色：透明;”&gt;最近，我在页面交易上写了一篇文章，作为测试自动化的新方法&lt;/span&gt; &lt;span style =“背景-Color：透明;“&gt;，重点是简单，可读性和灵活性。&lt;/span&gt;现在，我提出了&lt;span样式的结构化比较=“ margin：0px; 0px;”&gt; &lt;strong&gt; page transactions &lt; /strong&gt; &lt;strong&gt;（pt）&lt;/strong&gt;和&lt;strong&gt; p &lt;/strong&gt; &lt;strong&gt;年龄对象模型&lt;/strong&gt; &lt;strong&gt;（pom）&lt;/strong&gt;，&lt;/span&gt;解释优点和每种模式的缺点。最后，我将以简单的步骤提供一些从POM迁移到PT的技巧。&lt;/p&gt;&#xA;&lt;p&gt;简而言之，对于那些不熟悉pom的人，它是&lt;a href =“ https://dzone.com/articles/page-object-model-pom-pom-with-playwright”&gt;设计模式在测试自动化&lt;/a&gt;中，UI页面上的对象表示为类中的方法，而每个类代表UI页面本身。&lt;/p&gt;</description>
      <pubDate>Mon, 17 Feb 2025 15:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Scaling ML Models Efficiently With Shared Neural Networks】通过共享神经网络有效地缩放ML模型</title>
      <link>https://dzone.com/articles/scaling-ml-models-with-shared-neural-networks</link>
      <description>【&lt;p&gt;As machine learning models grow in complexity and size, organizations face increasing challenges in deploying and scaling these models efficiently. A particularly pressing challenge is balancing hardware memory constraints with the expanding size of ML models while maintaining high performance and cost-effectiveness. This article explores an innovative architectural solution that addresses these challenges through a hybrid approach combining shared neural encoders with specialized prediction heads.&lt;/p&gt;&#xA;&lt;h2&gt;The Challenge: Memory Constraints in ML Model Deployment&lt;/h2&gt;&#xA;&lt;p&gt;Traditional machine learning deployments often require loading complete models into memory for each distinct use case or customer application. For example, in &lt;a href=&#34;https://dzone.com/articles/what-is-natural-language-interaction&#34;&gt;natural language understanding&lt;/a&gt; (NLU) applications using BERT-based models, each model typically consumes around 210-450 MB of memory. When serving thousands of customers, this leads to significant scaling challenges. A typical server with 72 GB of CPU memory can only support approximately 100 models simultaneously, creating a hard ceiling on service capacity.&lt;/p&gt;】&lt;p&gt;随着机器学习模型的复杂性和规模的增长，组织在有效地部署和扩展这些模型方面面临着越来越多的挑战。一个特别紧迫的挑战是将硬件内存约束与ML模型的扩大尺寸保持平衡，同时保持高性能和成本效益。本文探讨了一种创新的体系结构解决方案，该解决方案通过将共享神经编码器与专门预测头相结合的混合方法来解决这些挑战。&lt;/p&gt;&#xA;&lt;h2&gt;挑战：ML模型部署中的内存约束&lt;/h2&gt;&#xA;&lt;p&gt;传统的机器学习部署通常需要为每个不同的用例或客户应用程序加载完整的模型。例如，在&lt;a href =“ https://dzone.com/articles/what-is-natural-language-interaction”&gt;使用基于Bert的模型的应用程序&lt;/a&gt;（NLU）应用程序，通常每个模型，通常是消耗大约210-450 mb的内存。在为数千个客户提供服务时，这会带来重大扩展挑战。具有72 GB CPU内存的典型服务器只能同时支持大约100个型号，从而在服务能力上创建硬上限。&lt;/p&gt;</description>
      <pubDate>Mon, 17 Feb 2025 19:00:06 +0000</pubDate>
    </item>
  </channel>
</rss>