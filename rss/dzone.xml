<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Mastering AI Agents: How Agentic Design Patterns Make Agents Smarter】掌握人工智能代理：代理设计模式如何使代理变得更聪明</title>
      <link>https://dzone.com/articles/agentic-design-patterns</link>
      <description>【&lt;p&gt;&#34;What&#39;s the point of agents? Why use something like AutoGen when I can code it myself?&#34; Sounds familiar? If you have ever thought about this, you&#39;re not alone. I hear this all the time. And I know exactly where this is coming from.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;In this post, we’re going to dive into the world of &lt;a href=&#34;https://dzone.com/articles/ai-agentic-101-understanding-ai-agents&#34;&gt;&lt;strong&gt;agentic design patterns&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;— a powerful approach that goes beyond simple code. These patterns can help you build AI systems where agents don’t just complete tasks; they delegate, verify, and even work together to tackle complex challenges. Ready to level up your AI game? Let’s go!&lt;/p&gt;】&lt;p&gt;“代理有什么意义？当我可以自己编写代码时为什么要使用像 AutoGen 这样的东西？”听起来很熟悉吗？如果您曾经想过这个问题，那么您并不孤单。我一直听到这个。我确切地知道这是从哪里来的。 &lt;/p&gt;&#xA;&lt;p&gt;在这篇文章中，我们将深入探讨&lt;a href=&#34;https://dzone.com/articles/ai-agentic-101-understanding-ai-agents&#34;&gt;&lt;strong&gt;代理设计的世界模式&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; &lt;/strong&gt;——一种超越简单代码的强大方法。这些模式可以帮助您构建人工智能系统，其中代理不仅可以完成任务，还可以完成任务。他们授权、验证，甚至共同努力应对复杂的挑战。准备好升级你的 AI 游戏了吗？我们走吧！&lt;/p&gt;</description>
      <pubDate>Mon, 07 Oct 2024 20:02:53 +0000</pubDate>
    </item>
    <item>
      <title>【Dynamic File Upload Component in Salesforce LWC】Salesforce LWC 中的动态文件上传组件</title>
      <link>https://dzone.com/articles/dynamic-file-upload-component-in-salesforce-lwc</link>
      <description>【&lt;p&gt;In Salesforce, the ability to import and export data dynamically is crucial for many business processes. While standard Salesforce tools provide basic import/export functionality, custom solutions can offer enhanced flexibility and user experience. In this blog, we will build a &lt;a href=&#34;https://dzone.com/articles/internationalizing-your-lightning-web-component-lw&#34;&gt;Lightning Web Component (LWC)&lt;/a&gt; that allows users to dynamically configure the object and fields they want to upload data to, download a template for these fields, and then upload data. Furthermore, we’ll display error and success messages in a popup modal to improve user interaction.&lt;/p&gt;&#xA;&lt;p&gt;By the end of this tutorial, you will have a reusable component that simplifies data imports and guides users through the process with clear feedback.&lt;/p&gt;】&lt;p&gt;在 Salesforce 中，动态导入和导出数据的能力对于许多业务流程至关重要。虽然标准 Salesforce 工具提供基本的导入/导出功能，但自定义解决方案可以提供增强的灵活性和用户体验。在此博客中，我们将构建一个 &lt;a href=&#34;https://dzone.com/articles/internationalizing-your-lightning-web-component-lw&#34;&gt;Lightning Web 组件 (LWC)&lt;/a&gt;，允许用户动态配置要上传数据的对象和字段，下载这些字段的模板，然后上传数据。此外，我们将在弹出模式中显示错误和成功消息，以改善用户交互。&lt;/p&gt;&#xA;&lt;p&gt;在本教程结束时，您将拥有一个可重用的组件，该组件可以简化数据导入并通过清晰的反馈引导用户完成整个过程。&lt;/p&gt;</description>
      <pubDate>Mon, 07 Oct 2024 14:00:07 +0000</pubDate>
    </item>
    <item>
      <title>【Implementing SLOs in Microservices: A Comprehensive Guide to Reliability and Performance】在微服务中实施 SLO：可靠性和性能综合指南</title>
      <link>https://dzone.com/articles/implementing-slos-in-microservices</link>
      <description>【&lt;p&gt;Microservices are revolutionizing modern enterprise architectures. They allow businesses to scale quickly and innovate without the constraints of monolithic systems. However, this transformation isn&#39;t without its challenges. Maintaining reliability across a web of interconnected services can be complex. Each microservice is a vital component, and a single failure can disrupt the entire system.&lt;/p&gt;&#xA;&lt;p&gt;According to a &lt;a data-faitracker-click-bind=&#34;true&#34; data-lf-fd-inspected-yegkb8lgjkvaep3z=&#34;true&#34; href=&#34;https://www.nobl9.com/hubfs/PDF/Nobl9%202023%20State-Of-SLOs%20Report.pdf&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;report by Nobl9&lt;/a&gt;, 76% of companies using SLOs have successfully prevented business interruptions. The report also indicates companies are increasingly mapping SLOs directly to business operations, with 96% either having done so or planning to. This trend underscores the importance of SLOs in aligning technical performance with business goals.&lt;/p&gt;】&lt;p&gt;微服务正在彻底改变现代企业架构。它们允许企业快速扩展和创新，而不受单一系统的限制。然而，这种转变并非没有挑战。在互连服务网络中维护可靠性可能很复杂。每个微服务都是至关重要的组件，单个故障可能会破坏整个系统。&lt;/p&gt;&#xA;&lt;p&gt;根据&lt;a data-faitracker-click-bind=&#34;true&#34; data-lf-fd-inspected-yegkb8lgjkvaep3z=&#34;true&#34; href=&#34;https://www.nobl9.com/hubfs/PDF/Nobl9 %202023%20State-Of-SLOs%20Report.pdf&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Nobl9 的报告&lt;/a&gt;，76% 使用 SLO 的公司已成功防止业务中断。该报告还表明，越来越多的公司正在将 SLO 直接映射到业务运营，其中 96% 的公司已经这样做或计划这样做。这一趋势强调了 SLO 在使技术性能与业务目标保持一致方面的重要性。&lt;/p&gt;</description>
      <pubDate>Mon, 07 Oct 2024 12:00:11 +0000</pubDate>
    </item>
    <item>
      <title>【Transformation to Agile Primitives】向敏捷原语的转变</title>
      <link>https://dzone.com/articles/transformation-to-agile-primitives</link>
      <description>【&lt;h2&gt;TL;DR: A Guide to Escape Agile Framework Fatigue&lt;/h2&gt;&#xA;&lt;p&gt;Undergoing a transformation to Agile Primitives from a botched [insert your failed agile framework of choice here] isn’t about adopting another framework; it’s about returning to core principles that empower teams and deliver real value. (Please note: If you haven’t read the &lt;a href=&#34;https://dzone.com/articles/agile-primitives&#34;&gt;article on Agile Primitives&lt;/a&gt;, please do so now.)&lt;/p&gt;&#xA;&lt;p&gt;This journey requires leaders to model desired behaviors, embrace vulnerability, and foster a culture where failure is a learning opportunity. Middle management should be engaged as enablers, not obstacles. It’s not a quick fix but a commitment to genuine agility through people-centric practices.&lt;/p&gt;】&lt;h2&gt;TL;DR：摆脱敏捷框架疲劳的指南&lt;/h2&gt;&#xA;&lt;p&gt;从一个拙劣的[在此处插入您选择的失败的敏捷框架]经历向敏捷原语的转变并不是要采用另一个框架；而是要采用另一个框架。这是关于回归赋予团队权力并提供真正价值的核心原则。 （请注意：如果您还没有阅读&lt;a href=&#34;https://dzone.com/articles/agile-primitives&#34;&gt;有关敏捷原语的文章&lt;/a&gt;，请立即阅读。）&lt;/p&gt;&#xA;&lt;p&gt;这一历程要求领导者树立理想行为榜样，拥抱脆弱性，并培育一种将失败视为学习机会的文化。中层管理人员应该充当推动者，而不是障碍。这不是一个快速解决方案，而是通过以人为本的实践实现真正敏捷性的承诺。&lt;/p&gt;</description>
      <pubDate>Mon, 07 Oct 2024 21:00:05 +0000</pubDate>
    </item>
    <item>
      <title>【Integrate Spring Boot With jOOQ, Liquibase, and Testcontainers】将 Spring Boot 与 jOOQ、Liquibase 和 Testcontainers 集成</title>
      <link>https://dzone.com/articles/integrate-spring-boot-with-jooq-liquibase-and-testcontainers</link>
      <description>【&lt;p&gt;In this blog, you will learn how to get started with jOOQ, Liquibase, and Testcontainers. You will create a basic Spring Boot application and integrate the aforementioned techniques including a test setup. Furthermore, you will use Spring Boot Docker Compose support to run the application in no time. Enjoy!&lt;/p&gt;&#xA;&lt;h2&gt;1. Introduction&lt;/h2&gt;&#xA;&lt;p&gt;The starting point for this blog was to get more acquainted with &lt;a href=&#34;https://www.jooq.org/&#34; rel=&#34;noreferrer noopener&#34; target=&#34;_blank&#34;&gt;jOOQ&lt;/a&gt;, a database-first approach instead of using an Object Relation Mapper (ORM) framework. Being able to just write SQL including typesafety is very appealing and interesting. However, during the setup of the application, some extra requirements popped up. Note that these requirements are my own requirements and choices — these are not imposed by jOOQ.&lt;/p&gt;】&lt;p&gt;在本博客中，您将学习如何开始使用 jOOQ、Liquibase 和 Testcontainers。您将创建一个基本的 Spring Boot 应用程序并集成上述技术（包括测试设置）。此外，您将使用 Spring Boot Docker Compose 支持立即运行应用程序。享受吧！&lt;/p&gt;&#xA;&lt;h2&gt;1。简介&lt;/h2&gt;&#xA;&lt;p&gt;写这个博客的出发点是为了更加熟悉 &lt;a href=&#34;https://www.jooq.org/&#34; rel=&#34;noreferrer noopener&#34; target=&#34;_blank&#34;&gt;jOOQ&lt;/a&gt;，数据库优先方法而不是使用对象关系映射器 (ORM) 框架。能够只编写包含类型安全的 SQL 是非常有吸引力和有趣的。然而，在应用程序的设置过程中，出现了一些额外的要求。请注意，这些要求是我自己的要求和选择 - 这些不是 jOOQ 强加的。&lt;/p&gt;</description>
      <pubDate>Mon, 07 Oct 2024 19:00:07 +0000</pubDate>
    </item>
    <item>
      <title>【In-House Model Serving Infrastructure for GPU Flexibility】用于实现 GPU 灵活性的内部模型服务基础设施</title>
      <link>https://dzone.com/articles/in-house-model-serving-infrastructure-for-gpu-flexibility</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;As &lt;a href=&#34;https://dzone.com/articles/practitioners-guide-to-deep-learning-projects&#34;&gt;deep learning&lt;/a&gt; models evolve, their growing complexity demands high-performance GPUs to ensure efficient inference serving. Many organizations rely on cloud services like AWS, Azure, or GCP for these GPU-powered workloads, but a growing number of businesses are opting to build their own in-house model serving infrastructure. This shift is driven by the need for greater control over costs, data privacy, and system customization. By designing an infrastructure capable of handling multiple GPU SKUs (such as NVIDIA, AMD, and potentially Intel), businesses can achieve a flexible and cost-efficient system that is resilient to supply chain delays and able to leverage diverse hardware capabilities. This article explores the essential components of such infrastructure, focusing on the technical considerations for GPU-agnostic design, container optimization, and workload scheduling.&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;Why Choose In-House Model Serving Infrastructure?&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;While &lt;a href=&#34;https://dzone.com/articles/unleashing-ai-potential-the-rise-of-cloud-gpus&#34;&gt;cloud GPU instances&lt;/a&gt; offer scalability, many organizations prefer in-house infrastructure for several key reasons:&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;随着&lt;a href=&#34;https://dzone.com/articles/practitioners-guide-to-deep-learning-projects&#34;&gt;深度学习&lt;/a&gt;模型的发展，其复杂性需求不断增长高性能GPU，确保高效的推理服务。许多组织依赖 AWS、Azure 或 GCP 等云服务来处理这些 GPU 驱动的工作负载，但越来越多的企业选择构建自己的内部模型服务基础设施。这种转变是由于需要更好地控制成本、数据隐私和系统定制而驱动的。通过设计能够处理多个 GPU SKU（例如 NVIDIA、AMD 和可能的英特尔）的基础设施，企业可以实现灵活且经济高效的系统，该系统能够适应供应链延迟并能够利用不同的硬件功能。本文探讨了此类基础设施的基本组件，重点关注与 GPU 无关的设计、容器优化和工作负载调度的技术考虑因素。&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;为什么选择内部模型服务基础设施？&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;虽然&lt;a href=&#34;https://dzone.com/articles/unleashing-ai-potial-the-rise-of-cloud-gpus&#34;&gt;云 GPU 实例&lt;/a&gt;提供可扩展性，许多组织更喜欢内部基础设施，原因如下：&lt;/p&gt;</description>
      <pubDate>Mon, 07 Oct 2024 17:00:06 +0000</pubDate>
    </item>
    <item>
      <title>【Natural Language SQL Query Application】自然语言SQL查询应用</title>
      <link>https://dzone.com/articles/natural-language-sql-query-application</link>
      <description>【&lt;p&gt;In today&#39;s data-driven world, the ability to query databases effectively is a crucial skill. However, for many, the steep learning curve of SQL (Structured Query Language) can be a significant barrier. Imagine a world where you could simply ask, “Show me all employees with a salary above $50,000,” and instantly get the results without writing a single line of SQL code. This isn&#39;t just a dream — it&#39;s possible with the integration of cutting-edge technologies such as React, Node.js, PostgreSQL, and the AI-powered capabilities of OpenAI.&lt;/p&gt;&#xA;&lt;section&gt;&#xA; &lt;p&gt;In this blog, we’ll walk you through building a powerful and intuitive web application that converts natural language into SQL queries and retrieves data from a PostgreSQL database. This tool empowers users of all technical levels to interact with complex datasets seamlessly, bypassing the traditional complexities of database querying.&lt;/p&gt;】&lt;p&gt;在当今数据驱动的世界中，有效查询数据库的能力是一项至关重要的技能。然而，对于许多人来说，SQL（结构化查询语言）陡峭的学习曲线可能是一个重大障碍。想象一下这样一个世界，您可以简单地询问“显示所有薪水超过 50,000 美元的员工”，然后立即获得结果，而无需编写任何 SQL 代码。这不仅仅是一个梦想 - 通过集成 React、Node.js、PostgreSQL 和 OpenAI 的 AI 驱动功能等尖端技术，这是可能的。&lt;/p&gt;&#xA;&lt;部分&gt;&#xA; &lt;p&gt;在本博客中，我们将引导您构建一个功能强大且直观的 Web 应用程序，该应用程序将自然语言转换为 SQL 查询并从 PostgreSQL 数据库检索数据。该工具使所有技术级别的用户都能与复杂的数据集无缝交互，从而绕过传统的数据库查询复杂性。&lt;/p&gt;</description>
      <pubDate>Mon, 07 Oct 2024 18:00:16 +0000</pubDate>
    </item>
    <item>
      <title>【Functional Programming Principles Powering Python’s itertools Module】函数式编程原理为 Python 的 itertools 模块提供支持</title>
      <link>https://dzone.com/articles/functional-programming-principles-in-python-itertools</link>
      <description>【&lt;p&gt;Understanding some of the concepts of &lt;a href=&#34;https://dzone.com/articles/functional-programming-is-not-what-you-probably-th&#34;&gt;functional programming&lt;/a&gt; that form the basis for the functions within the &lt;code&gt;itertools&lt;/code&gt; module helps in understanding how such functions work. These concepts provide insight into the way the module functions operate and their conformance with regard to the paradigm that makes them powerful and efficient tools in &lt;a href=&#34;https://dzone.com/refcardz/core-python&#34;&gt;Python&lt;/a&gt;. This article is going to explain some concepts related to functional programming through specific functions of the &lt;code&gt;itertools&lt;/code&gt; module. The article can&#39;t possibly talk about all the methods in detail. Instead, it will show how the ideas work in functions like:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA; &lt;li&gt;&lt;code&gt;takewhile&lt;/code&gt;&lt;/li&gt;&#xA; &lt;li&gt;&lt;code&gt;dropwhile&lt;/code&gt;&lt;/li&gt;&#xA; &lt;li&gt;&lt;code&gt;groupby&lt;/code&gt;&lt;/li&gt;&#xA; &lt;li&gt;&lt;code&gt;partial&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2&gt;&lt;strong&gt;Higher-Order Functions (HOF)&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;A higher-order function is a function that does at least one of the following:&lt;/p&gt;】&lt;p&gt;了解构成itertools 模块中函数的基础有助于理解这些函数的工作原理。这些概念提供了对模块功能操作方式及其与范式的一致性的深入了解，这使得它们成为 &lt;a href=&#34;https://dzone.com/refcardz/core-python&#34;&gt;Python 中强大而高效的工具&lt;/一个&gt;。本文将通过itertools模块的具体函数来解释一些与函数式编程相关的概念。本文不可能详细讨论所有方法。相反，它将展示这些想法如何在以下函数中发挥作用：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA; &lt;li&gt;&lt;code&gt;takewhile&lt;/code&gt;&lt;/li&gt;&#xA; &lt;li&gt;&lt;code&gt;下降&lt;/code&gt;&lt;/li&gt;&#xA; &lt;li&gt;&lt;code&gt;分组&lt;/code&gt;&lt;/li&gt;&#xA; &lt;li&gt;&lt;code&gt;部分&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2&gt;&lt;strong&gt;高阶函数 (HOF)&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;高阶函数是至少执行以下操作之一的函数：&lt;/p&gt;</description>
      <pubDate>Mon, 07 Oct 2024 16:00:19 +0000</pubDate>
    </item>
    <item>
      <title>【Get Ready for Android 15: Must-Have Testing Strategies for Effective Updates】为 Android 15 做好准备：有效更新的必备测试策略</title>
      <link>https://dzone.com/articles/android-15-testing-strategies</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Google has recently released the fourth and final version of Android 15 beta, also known by the internal codename of Vanilla Ice Cream. This update introduces enhanced privacy, intuitive gestures, and seamless smart home integration. Google is also prioritizing performance, battery life, and AI-powered features for a personalized user experience.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;While the official release date remains unannounced, it’s expected to arrive between September and October, following the timeline of last year’s Android 14 launch.&amp;nbsp;&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;Google 最近发布了 Android 15 Beta 版的第四个也是最后一个版本，内部代号也为 Vanilla Ice Cream。此更新引入了增强的隐私、直观的手势和无缝的智能家居集成。 Google 还优先考虑性能、电池寿命和人工智能支持的功能，以提供个性化的用户体验。&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;虽然官方发布日期尚未公布，但预计将按照去年 Android 14 发布的时间表在 9 月至 10 月之间发布。 &lt;/p&gt;</description>
      <pubDate>Mon, 07 Oct 2024 15:00:14 +0000</pubDate>
    </item>
    <item>
      <title>【Low Code AI Agent Using Kumologica and Anthropic AI for Customer Feedback Sentiment Analysis】使用 Kumologica 和 Anthropic AI 进行客户反馈情绪分析的低代码 AI 代理</title>
      <link>https://dzone.com/articles/low-code-ai-agent-using-kumologica-and-anthropic-ai</link>
      <description>【&lt;p style=&#34;text-align: left;&#34;&gt;Customers are the backbone of any business. Understanding customer experience is key for every company, and conducting customer feedback analysis is always a vital tool for elevating your brand. In this article, we will explore how an &lt;a href=&#34;https://dzone.com/articles/ai-agentic-101-understanding-ai-agents&#34;&gt;artificial intelligence agent&lt;/a&gt; can be used to perform customer feedback extraction and analysis easily and efficiently. We will build the AI agent using Kumologica, a low-code development platform, and the Anthropic AI platform.&lt;/p&gt;&#xA;&lt;h2 style=&#34;text-align: left;&#34;&gt;Use Case&lt;/h2&gt;&#xA;&lt;p style=&#34;text-align: left;&#34;&gt;ABC restaurant chain has decided to add a feedback feature to their menu and ordering mobile app. Along with the conventional star rating model, they introduced a simple free-text box allowing customers to provide feedback in their own words. This offers more flexibility for customers to share detailed comments. It enables management to better understand customer expectations. &amp;nbsp;&lt;/p&gt;】&lt;p style=&#34;text-align: left;&#34;&gt;客户是任何企业的支柱。了解客户体验对于每个公司来说都是关键，而进行客户反馈分析始终是提升品牌的重要工具。在本文中，我们将探讨如何使用&lt;a href=&#34;https://dzone.com/articles/ai-agentic-101-understanding-ai-agents&#34;&gt;人工智能代理&lt;/a&gt;来执行客户任务轻松高效地提取和分析反馈。我们将使用低代码开发平台 Kumologica 和 Anthropic AI 平台构建 AI 代理。&lt;/p&gt;&#xA;&lt;h2 style=&#34;text-align: left;&#34;&gt;用例&lt;/h2&gt;&#xA;&lt;p style=&#34;text-align: left;&#34;&gt;ABC 连锁餐厅已决定在其菜单和订购移动应用程序中添加反馈功能。除了传统的星级评定模型之外，他们还引入了一个简单的自由文本框，允许客户用自己的话提供反馈。这为客户分享详细评论提供了更大的灵活性。它使管理层能够更好地了解客户的期望。  &lt;/p&gt;</description>
      <pubDate>Mon, 07 Oct 2024 13:00:13 +0000</pubDate>
    </item>
  </channel>
</rss>