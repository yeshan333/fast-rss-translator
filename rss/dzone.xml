<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Buh-Bye, Webpack and Node.js; Hello, Rails and Import Maps】再见，Webpack 和 Node.js；你好，Rails 和导入地图</title>
      <link>https://dzone.com/articles/buh-bye-webpack-and-nodejs-hello-rails-and-import-maps</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;I enjoy spending time learning new technologies. However, often the biggest drawback of working with new technologies is the inevitable pain points that come with early adoption. I saw this quite a bit when I was getting up to speed with Web3 in “&lt;a href=&#34;https://dzone.com/articles/moving-from-full-stack-developer-to-web3-pioneer&#34;&gt;Moving From Full-Stack Developer To Web3 Pioneer&lt;/a&gt;.”&lt;/p&gt;&#xA;&lt;p&gt;As software engineers, we’re accustomed to accepting these early-adopter challenges when giving new tech a test drive. What works best for me is to keep a running list of notes and commands I’ve executed, since seemingly illogical steps don’t remain in my memory.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;我喜欢花时间学习新技术。然而，使用新技术的最大缺点往往是早期采用时不可避免的痛点。当我在“&lt;a href=&#34;https://dzone.com/articles/moving-from-full-stack-developer-to-web3-pioneer&#34;&gt;Moving”中快速了解 Web3 时，我经常看到这种情况从全栈开发人员到 Web3 先锋&lt;/a&gt;。”&lt;/p&gt;&#xA;&lt;p&gt;作为软件工程师，我们在试用新技术时习惯于接受这些早期采用者的挑战。对我来说最有效的方法是保留我执行过的注释和命令的运行列表，因为看似不合逻辑的步骤不会保留在我的记忆中。&lt;/p&gt;</description>
      <pubDate>Mon, 05 Aug 2024 21:00:02 +0000</pubDate>
    </item>
    <item>
      <title>【Go Serverless: Unleash Next-Gen Computing】走向无服务器：释放下一代计算的潜力</title>
      <link>https://dzone.com/articles/go-serverless-unleash-next-gen-computing</link>
      <description>【&lt;p align=&#34;justify&#34; style=&#34;text-align: left;&#34;&gt;In the digital revolution, where bytes fly faster than thoughts, one concept is bringing a paradigm shift in the tech cosmos: serverless computing. The thought of dealing with servers often makes us freak out. Server maintenance, scalability issues, and huge infrastructure costs can all be part of our nightmares. This is where &lt;a href=&#34;https://dzone.com/articles/step-into-serverless-computing&#34;&gt;serverless computing&lt;/a&gt; can be a game-changer. It aims to virtually save modern-day technology trouble so we can just focus on coding.&lt;/p&gt;&#xA;&lt;p align=&#34;justify&#34; style=&#34;text-align: left;&#34;&gt;“Serverless” doesn&#39;t literally mean the servers completely vanish. Instead, they are hidden behind the curtains until summoned. Think of it like a magic genie that is always at your beck and call to grant your computing wishes without the hassles of hardware management.&lt;/p&gt;】&lt;palign=&#34;justify&#34; style=&#34;text-align: left;&#34;&gt;在数字革命中，字节飞得比思想更快，一个概念正在给科技宇宙带来范式转变：无服务器计算。与服务器打交道的想法常常让我们感到害怕。服务器维护、可扩展性问题和巨大的基础设施成本都可能成为我们噩梦的一部分。这就是&lt;a href=&#34;https://dzone.com/articles/step-into-serverless-computing&#34;&gt;无服务器计算&lt;/a&gt;可以改变游戏规则的地方。它的目的是从根本上避免现代技术的麻烦，这样我们就可以专注于编码。&lt;/p&gt;&#xA;&lt;palign=&#34;justify&#34;style=&#34;text-align: left;&#34;&gt;“无服务器”字面意思并不意味着服务器完全消失。相反，他们隐藏在窗帘后面，直到被召唤。可以把它想象成一个神奇的精灵，随时听从您的召唤，满足您的计算愿望，而无需硬件管理的麻烦。&lt;/p&gt;</description>
      <pubDate>Mon, 05 Aug 2024 20:00:01 +0000</pubDate>
    </item>
    <item>
      <title>【Quick Scrum Gains】快速 Scrum 收益</title>
      <link>https://dzone.com/articles/quick-scrum-gains</link>
      <description>【&lt;h2&gt;TL; DR: Quick Scrum Gains&lt;/h2&gt;&#xA;&lt;p&gt;Suppose you are a Scrum Master or Agile Coach. Have you recently been asked to explain your contribution to the organization’s value creation? In other words, does management want to know whether you are pulling your weight or if your salary is an expendable expenditure? This article points to ten quick Scrum gains you can pull off without asking for permission or budget to prove your contribution to your organization’s survival in these challenging times.&lt;/p&gt;&#xA;&lt;h2&gt;Ten Quick Scrum Gains You Can Start Tomorrow&lt;/h2&gt;&#xA;&lt;p&gt;A few years ago, when money was cheap, valuations high, and profits more than decent, no one questioned the necessity of a Scrum Master or Agile Coach.&amp;nbsp;&lt;/p&gt;】&lt;h2&gt;TL; DR：快速 Scrum 收益&lt;/h2&gt;&#xA;&lt;p&gt;假设您是 Scrum Master 或敏捷教练。您最近是否被要求解释您对组织价值创造的贡献？换句话说，管理层是否想知道你是否尽职尽责，或者你的薪水是否属于消耗性支出？本文指出了十个无需请求许可或预算即可快速实现的 Scrum 收益，以证明您对组织在这个充满挑战的时代生存的贡献。&lt;/p&gt;&#xA;&lt;h2&gt;明天就可以开始的十个快速 Scrum 收获&lt;/h2&gt;&#xA;&lt;p&gt;几年前，当资金便宜、估值高、利润高的时候，没有人质疑 Scrum Master 或敏捷教练的必要性。 &lt;/p&gt;</description>
      <pubDate>Tue, 06 Aug 2024 13:00:01 +0000</pubDate>
    </item>
    <item>
      <title>【Idempotency in Data Pipelines: Overview】数据管道中的幂等性：概述</title>
      <link>https://dzone.com/articles/idempotency-in-data-pipelines-overview</link>
      <description>【&lt;p&gt;Idempotency is an important concept in data engineering, particularly when working with distributed systems or databases. In simple terms, an operation is said to be idempotent if running it multiple times has the same effect as running it once. This can be incredibly useful when dealing with unpredictable network conditions, errors, or other types of unexpected behavior, as it ensures that even if something goes wrong, the system can be brought back to a consistent state by simply running the operation again.&lt;/p&gt;&#xA;&lt;p&gt;In this blog post, we will take a look at some examples of how idempotency can be achieved in data engineering using Python.&lt;/p&gt;】&lt;p&gt;幂等性是数据工程中的一个重要概念，特别是在使用分布式系统或数据库时。简单来说，如果多次运行某个操作与运行一次具有相同的效果，则称该操作是幂等的。在处理不可预测的网络状况、错误或其他类型的意外行为时，这非常有用，因为它确保即使出现问题，只需再次运行操作即可将系统恢复到一致状态。&lt;/ p&gt;&#xA;&lt;p&gt;在这篇博文中，我们将看一些如何使用 Python 在数据工程中实现幂等性的示例。&lt;/p&gt;</description>
      <pubDate>Tue, 06 Aug 2024 11:30:01 +0000</pubDate>
    </item>
    <item>
      <title>【Creating a Command Line Tool With JBang and PicoCLI To Generate Release Notes】使用 JBang 和 PicoCLI 创建命令行工具来生成发行说明</title>
      <link>https://dzone.com/articles/creating-a-command-line-tool-with-jbang-and-picocli</link>
      <description>【&lt;div&gt;&#xA; &lt;p&gt;Lately, I have been playing with JBang and PicoCLI, and I am pretty amazed at what we can do with these tools. I needed to create a script that would go to a specified repository on GitHub, check the commit range, and verify if any tickets were associated with them. Additionally, I wanted to check if the ticket was accepted and if the commit was approved or not. The idea was to integrate this script along with the CI/CD pipeline.&lt;/p&gt;&#xA; &lt;p&gt;While the traditional approach might involve using bash scripts or Python, as a Java developer, I feel more at home doing this in Java. This is where JBang comes into the picture. And since I want this to be a command-line tool, PicoCLI comes in handy.&lt;/p&gt;】&lt;div&gt;&#xA; &lt;p&gt;最近，我一直在使用 JBang 和 PicoCLI，我对我们可以用这些工具做的事情感到非常惊讶。我需要创建一个脚本，该脚本将转到 GitHub 上的指定存储库，检查提交范围，并验证是否有任何票证与它们关联。此外，我想检查票证是否被接受以及提交是否被批准。我们的想法是将此脚本与 CI/CD 管道集成。&lt;/p&gt;&#xA; &lt;p&gt;虽然传统方法可能涉及使用 bash 脚本或 Python，但作为 Java 开发人员，我觉得用 Java 来做这件事更自在。这就是 JBang 发挥作用的地方。由于我希望它成为一个命令行工具，PicoCLI 就派上用场了。&lt;/p&gt;</description>
      <pubDate>Tue, 06 Aug 2024 11:00:01 +0000</pubDate>
    </item>
    <item>
      <title>【What Is &#34;Progressive Disclosure&#34; and How Does It Impact Developer Portals?】什么是“渐进式披露”以及它如何影响开发者门户？</title>
      <link>https://dzone.com/articles/what-is-progressive-disclosure</link>
      <description>【&lt;div data-hook=&#34;rcv-block3&#34; type=&#34;heading&#34;&gt;&#xA; &lt;p dir=&#34;auto&#34;&gt;Progressive disclosure is a UX design pattern that reduces cognitive load by gradually revealing more complex information or features as the user progresses through the UI of a digital product (such as a portal).&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div data-breakout=&#34;normal&#34;&gt;&#xA; &lt;h2 dir=&#34;auto&#34;&gt;Why Should Platform Engineers Care?&lt;/h2&gt;&#xA;&lt;/div&gt;&#xA;&lt;div data-hook=&#34;rcv-block6&#34; type=&#34;heading&#34;&gt;&#xA; &lt;p dir=&#34;auto&#34;&gt;I&#39;ve encountered the term a few times, but its value really hit home in July during two panels I participated in. First, in the LeadDev panel &#34;&lt;a data-hook=&#34;WebLink&#34; href=&#34;https://www.youtube.com/watch?v=gMBDstc1P5g&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;How to implement platform engineering at scale&lt;/a&gt;,&#34; &lt;a data-hook=&#34;WebLink&#34; href=&#34;https://www.linkedin.com/in/smrutirp/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Smruti Patel&lt;/a&gt; mentioned this. Then, in a panel that I hosted with &lt;a data-hook=&#34;WebLink&#34; href=&#34;https://www.linkedin.com/in/abbybangser/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Abby Bangser&lt;/a&gt;, &#34;&lt;a data-hook=&#34;WebLink&#34; href=&#34;https://youtu.be/k87wukNGo70&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;When Terraform Met Backstage&lt;/a&gt;,&#34; our guest, &lt;a data-hook=&#34;WebLink&#34; href=&#34;https://www.linkedin.com/in/sevedkim/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Seve Kim&lt;/a&gt;, also mentioned progressive disclosure.&lt;/p&gt;】&lt;div data-hook=&#34;rcv-block3&#34; type=&#34;heading&#34;&gt;&#xA; &lt;p dir=&#34;auto&#34;&gt;渐进式披露是一种用户体验设计模式，当用户在数字产品（例如门户）的 UI 中进行操作时，它会逐渐显示更复杂的信息或功能，从而减少认知负荷。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div data-breakout=&#34;正常&#34;&gt;&#xA; &lt;h2 dir=&#34;auto&#34;&gt;为什么平台工程师应该关心？&lt;/h2&gt;&#xA;&lt;/div&gt;&#xA;&lt;div data-hook=&#34;rcv-block6&#34; type=&#34;heading&#34;&gt;&#xA; &lt;p dir=&#34;auto&#34;&gt;我曾多次遇到过这个术语，但在 7 月份我参加的两次小组讨论中，它的价值才真正体现出来。首先，在 LeadDev 小组中“&lt;a data-hook=&#34;WebLink&#34; href =&#34;https://www.youtube.com/watch?v=gMBDstc1P5g&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;如何大规模实施平台工程&lt;/a&gt;,&#34; &lt;a data-hook=&#34; WebLink&#34; href=&#34;https://www.linkedin.com/in/smrutirp/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Smruti Patel&lt;/a&gt; 提到了这一点。然后，在我用 &lt;a data-hook=&#34;WebLink&#34; href=&#34;https://www.linkedin.com/in/abbybangser/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Abby Bangser 主持的小组中&lt;/a&gt;, &#34;&lt;a data-hook=&#34;WebLink&#34; href=&#34;https://youtu.be/k87wukNGo70&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;当 Terraform 遇见后台&lt;/a&gt;,&#34;我们的客人，&lt;a data-hook=&#34;WebLink&#34; href=&#34;https://www.linkedin.com/in/sevedkim/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Seve Kim&lt;/a&gt;，也提到渐进式披露。&lt;/p&gt;</description>
      <pubDate>Tue, 06 Aug 2024 15:00:01 +0000</pubDate>
    </item>
    <item>
      <title>【Harnessing DevOps Potential: Why Backup Is a Missing Piece】发挥 DevOps 潜力：为何备份是缺失的一环</title>
      <link>https://dzone.com/articles/harnessing-devops-potential</link>
      <description>【&lt;p&gt;We often hear about the importance of developers and the role they play in the success of a business. After all, they are those craftsmen who create the software and apps that make businesses run smoothly.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;However, there is one key element of development that is still overlooked – backup. Why? DevOps is constantly focused on delivering the best user experience and making sure the apps they build are bug-free. Yet what if something goes wrong one day or another? Let’s move on step-by-step.&lt;/p&gt;】&lt;p&gt;我们经常听说开发人员的重要性以及他们在企业成功中所扮演的角色。毕竟，他们是那些创造使企业顺利运营的软件和应用程序的工匠。 &lt;/p&gt;&#xA;&lt;p&gt;然而，开发的一个关键要素仍然被忽视——备份。为什么？ DevOps 始终致力于提供最佳的用户体验并确保他们构建的应用程序没有错误。但万一有一天出了问题怎么办？让我们一步一步地继续。&lt;/p&gt;</description>
      <pubDate>Tue, 06 Aug 2024 14:00:01 +0000</pubDate>
    </item>
    <item>
      <title>【Oracle: Migrate PDB to Another Database】Oracle：将 PDB 迁移到另一个数据库</title>
      <link>https://dzone.com/articles/oracle-migrate-pdb-to-another-database-1</link>
      <description>【&lt;p&gt;If you want to migrate or relocate the PDB from one database to another, there are multiple options available in &lt;a href=&#34;https://dzone.com/articles/oracle-advanced-queue-a-guide&#34;&gt;Oracle&lt;/a&gt;. Here, we will discuss a few of them. The source and target database can be in a standalone database, RAC, cloud, or autonomous database. After verifying the PDB is on the target, open it for customer access and remove it from the source database based on company policy.&amp;nbsp;&lt;/p&gt;&#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA; &lt;li&gt;The target database version should same or higher than the source database.&lt;/li&gt;&#xA; &lt;li&gt;The source database should be accessible from the target.&lt;/li&gt;&#xA; &lt;li&gt;The degree of parallelism should be calculated properly.&lt;/li&gt;&#xA; &lt;li&gt;Aware of &lt;a href=&#34;https://dzone.com/articles/reflections-from-a-dba&#34;&gt;DBA &lt;/a&gt;privileged username/password on the source to create DB link&lt;/li&gt;&#xA; &lt;li&gt;The encryption key is different from the user password. Must have access to the encryption key - it may be either database or tablespace or table level&lt;/li&gt;&#xA; &lt;li&gt;The user in the remote database that the database link connects to, must have the &lt;code&gt;CREATE PLUGGABLE DATABASE&lt;/code&gt; privilege.&lt;/li&gt;&#xA; &lt;li&gt;The character set on source and target should be compatible.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2&gt;Known Issues&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA; &lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/how-to-check-oracle-database-tablespace&#34;&gt;Tablespace&lt;/a&gt; may be in a big file.&lt;/li&gt;&#xA; &lt;li&gt;Tablespace may be encrypted.&lt;/li&gt;&#xA; &lt;li&gt;Using a database link, the target database should be able to access the source database. Create an Access Control List (ACL) or whitelist the IP address and port if required.&lt;/li&gt;&#xA; &lt;li&gt;To access the DB link, either enter the source database information in &lt;strong&gt;TNSnames.ora&lt;/strong&gt; or give a full connection string.&lt;/li&gt;&#xA; &lt;li&gt;Stable network connectivity between source and target&lt;/li&gt;&#xA; &lt;li&gt;RMAN jobs may interfere with refreshable cloning.&lt;/li&gt;&#xA; &lt;li&gt;Port from source to target should be opened to copy the files or to access the DB&amp;nbsp;link&lt;/li&gt;&#xA; &lt;li&gt;Remote CDB uses local undo mode. Otherwise, remote PDB may be opened in read-only mode.&amp;nbsp;&lt;/li&gt;&#xA; &lt;li&gt;Copy/cloning/synchronization between source and target may vary by network traffic and speed.&amp;nbsp;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;A few of the approaches are as follows:&lt;/p&gt;】&lt;p&gt;如果您想要将 PDB 从一个数据库迁移或重新定位到另一个数据库，&lt;a href=&#34;https://dzone.com/articles/oracle-advanced-queue-a-guide&#34;&gt; 中提供了多个选项甲骨文&lt;/a&gt;。在这里，我们将讨论其中的一些。源数据库和目标数据库可以位于独立数据库、RAC、云或自治数据库中。验证 PDB 位于目标上后，将其打开以供客户访问，并根据公司策略将其从源数据库中删除。 &lt;/p&gt;&#xA;&lt;h2&gt;先决条件&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA; &lt;li&gt;目标数据库版本应与源数据库相同或更高。&lt;/li&gt;&#xA; &lt;li&gt;源数据库应可从目标访问。&lt;/li&gt;&#xA; &lt;li&gt;要合理计算并行度。&lt;/li&gt;&#xA; &lt;li&gt;了解&lt;a href=&#34;https://dzone.com/articles/reflections-from-a-dba&#34;&gt;DBA&lt;/a&gt;源上用于创建数据库链接的特权用户名/密码&lt;/li&gt;&#xA; &lt;li&gt;加密密钥与用户密码不同。必须有权访问加密密钥 - 它可以是数据库、表空间或表级别&lt;/li&gt;&#xA; &lt;li&gt;数据库链接连接到的远程数据库中的用户必须具有&lt;code&gt;CREATE PLUGGABLE DATABASE&lt;/code&gt; 权限。&lt;/li&gt;&#xA; &lt;li&gt;源和目标上的字符集应兼容。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2&gt;已知问题&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA; &lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/how-to-check-oracle-database-tablespace&#34;&gt;表空间&lt;/a&gt;可能位于一个大文件中。&lt;/li&gt;&#xA; &lt;li&gt;表空间可能已加密。&lt;/li&gt;&#xA; &lt;li&gt;使用数据库链接，目标数据库应该能够访问源数据库。如果需要，创建访问控制列表 (ACL) 或将 IP 地址和端口列入白名单。&lt;/li&gt;&#xA; &lt;li&gt;要访问数据库链接，请在 &lt;strong&gt;TNSnames.ora&lt;/strong&gt; 中输入源数据库信息或提供完整的连接字符串。&lt;/li&gt;&#xA; &lt;li&gt;源与目标之间稳定的网络连接&lt;/li&gt;&#xA; &lt;li&gt;RMAN 作业可能会干扰可刷新克隆。&lt;/li&gt;&#xA; &lt;li&gt;应打开从源到目标的端口以复制文件或访问数据库链接&lt;/li&gt;&#xA; &lt;li&gt;远程CDB使用本地undo模式。否则，远程 PDB 可能会以只读模式打开。 &lt;/li&gt;&#xA; &lt;li&gt;源和目标之间的复制/克隆/同步可能会因网络流量和速度而异。 &lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;一些方法如下：&lt;/p&gt;</description>
      <pubDate>Tue, 06 Aug 2024 13:30:01 +0000</pubDate>
    </item>
    <item>
      <title>【How To Become a Software Engineer Without a CS Degree: Essential Strategies for Success】没有计算机科学学位如何成为软件工程师：成功的基本策略</title>
      <link>https://dzone.com/articles/how-to-become-a-software-engineer-without-a-cs-degree</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Here is how I &lt;a href=&#34;https://dzone.com/articles/advice-to-my-younger-self-as-a-software-engineer&#34;&gt;became a software engineer&lt;/a&gt; without a computer science degree. Let me be real with you: coding was hard. I wasted so much time fixing missing semicolons, mismatched brackets, and misspelled variables. Even when the code was compiled, it would not work as expected, and I would spend hours staring at the screen and questioning my life choices. But over time, I picked up some strategies that made coding click for me, and I&#39;m going to share these strategies with you today.&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;Don’t Try To Know Everything&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;The first thing I learned was that as a programmer, you don&#39;t need to know everything. When I began my first programming job, I was unfamiliar with Linux commands. When I joined Amazon, I did not fully understand G. At Amazon, my first project was in Python, and I had never written a single line of code in &lt;a href=&#34;https://dzone.com/refcardz/core-python&#34;&gt;Python&lt;/a&gt;. Later, when I joined Google, I could not program in &lt;a href=&#34;https://dzone.com/refcardz/core-cpp&#34;&gt;C++&lt;/a&gt;, but most of my work was in C++. The point I&#39;m trying to make is that you don&#39;t need to know everything; you just need to know where to find it when you need it. But when I was a beginner, I would try to do these 30-40 hour boot camps to learn a programming language, thinking that I was going to learn everything. In reality, you cannot learn everything there is to learn. So, do not wait until you have the right skills to start your project; your project will teach you the skills. Do not wait until you have the confidence to do what you want; the confidence will come when you start doing it.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;这就是我&lt;a href=&#34;https://dzone.com/articles/advice-to-my-younger-self-as-a-software-engineer&#34;&gt;成为软件工程师的过程&lt;/a&gt; 没有计算机科学学位。让我实话实说：编码很困难。我浪费了很多时间来修复丢失的分号、不匹配的括号和拼写错误的变量。即使代码被编译，它也不会按预期工作，我会花几个小时盯着屏幕并质疑我的生活选择。但随着时间的推移，我找到了一些让我喜欢编码的策略，今天我将与您分享这些策略。&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;不要试图了解一切&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;我学到的第一件事是，作为一名程序员，你不需要知道一切。当我开始第一份编程工作时，我对 Linux 命令并不熟悉。当我加入亚马逊时，我并没有完全理解 G。在亚马逊，我的第一个项目是用 Python 编写的，而且我从未在 &lt;a href=&#34;https://dzone.com/refcardz/core- python&#34;&gt;Python&lt;/a&gt;。后来，当我加入 Google 时，我无法使用 &lt;a href=&#34;https://dzone.com/refcardz/core-cpp&#34;&gt;C++&lt;/a&gt; 进行编程，但我的大部分工作都是使用 C++ 进行的。我想要表达的观点是，你不需要知道一切；你不需要知道一切。您只需要知道在需要时在哪里可以找到它。但当我还是个初学者时，我会尝试参加这些 30-40 小时的训练营来学习编程语言，认为我会学到所有东西。事实上，你不可能学到所有需要学习的东西。因此，不要等到拥有合适的技能才开始您的项目；您的项目将教您技能。不要等到有信心去做你想做的事；当你开始这样做时，信心就会随之而来。&lt;/p&gt;</description>
      <pubDate>Tue, 06 Aug 2024 12:30:01 +0000</pubDate>
    </item>
    <item>
      <title>【Develop With OCI Real-Time Speech Transcription and Oracle Database NL2SQL/Select AI To Speak With Your Data】使用 OCI 实时语音转录和 Oracle 数据库 NL2SQL 进行开发/选择 AI 与您的数据对话</title>
      <link>https://dzone.com/articles/develop-using-oci-real-time-speech-transcription</link>
      <description>【&lt;p&gt;Speak in your &lt;a href=&#34;https://dzone.com/articles/transforming-translation-the-power-of-context-in-n-1&#34;&gt;natural language&lt;/a&gt;, ask questions about your data, and have the answers returned to you in your natural language as well: that&#39;s the objective, and what I&#39;ll show in this quick blog and, as always, provide full src repos for as well. I&#39;ll leave the use cases up to you from there. &amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;You can learn more about these Oracle Database features &lt;a href=&#34;https://www.oracle.com/autonomous-database/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;here for the free cloud version&lt;/a&gt; and &lt;a href=&#34;https://www.oracle.com/database/free/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;here for the free container/image version&lt;/a&gt;. Also, you can check out the &lt;a href=&#34;https://apexapps.oracle.com/pls/apex/f?p=133:180:102602463925956::::wid:3874&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Develop with Oracle AI and Database Services: Gen, Vision, Speech, Language, and OML workshop&lt;/a&gt;, which explains how to create this application and numerous other examples as well as the GitHub repos that contain all the src code.&lt;/p&gt;】&lt;p&gt;用您的&lt;a href=&#34;https://dzone.com/articles/transforming-translation-the-power-of-context-in-n-1&#34;&gt;自然语言&lt;/a&gt;说话，提出以下问题：您的数据，并以您的自然语言返回答案：这就是目标，也是我将在这个快速博客中展示的内容，并且一如既往地提供完整的 src 存储库。我将把用例留给您。  &lt;/p&gt;&#xA;&lt;p&gt;您可以在&lt;a href=&#34;https://www.oracle.com/autonomous-database/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;此处了解有关这些 Oracle 数据库功能的更多免费云版本&lt;/a&gt; 和&lt;a href=&#34;https://www.oracle.com/database/free/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;此处获取免费容器/映像版本&lt;/a&gt;。另外，您还可以查看 &lt;a href=&#34;https://apexapps.oracle.com/pls/apex/f?p=133:180:102602463925956::::wid:3874&#34; rel=&#34;noopener noreferrer&#34; 目标=&#34;_blank&#34;&gt;使用 Oracle AI 和数据库服务进行开发：Gen、Vision、Speech、Language 和 OML 研讨会&lt;/a&gt;，其中解释了如何创建此应用程序和许多其他示例以及包含所有内容的 GitHub 存储库源代码。&lt;/p&gt;</description>
      <pubDate>Tue, 06 Aug 2024 12:00:01 +0000</pubDate>
    </item>
  </channel>
</rss>