<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Maximizing Enterprise Data: Unleashing the Productive Power of AI With the Right Approach】最大化企业数据：以正确的方法释放人工智能的生产力</title>
      <link>https://dzone.com/articles/maximizing-enterprise-data-unleashing-the-producti-1</link>
      <description>【&lt;p&gt;In today&#39;s digital landscape, data has become the lifeblood of organizations, much like oil was in the industrial era. Yet, the genuine hurdle is converting data into meaningful insights that drive business success. With AI and generative AI revolutionizing data platforms, the critical question is: Are we ready to harness the transformative power of data to propel growth and innovation?&lt;/p&gt;&#xA;&lt;p&gt;The answer is a mixed bag. While we can derive some benefits from our data, unlocking its full potential requires a purposeful and multi-faceted approach grounded in several essential elements:&lt;/p&gt;】&lt;p&gt;在当今的数字环境中，数据已成为组织的命脉，就像工业时代的石油一样。然而，真正的障碍是将数据转化为推动业务成功的有意义的见解。随着人工智能和生成人工智能彻底改变数据平台，关键问题是：我们准备好利用数据的变革力量来推动增长和创新了吗？&lt;/p&gt;&#xA;&lt;p&gt;答案是好坏参半。虽然我们可以从数据中获得一些好处，但要释放其全部潜力，需要采取有目的的、多方面的方法，并基于以下几个基本要素：&lt;/p&gt;</description>
      <pubDate>Mon, 26 Aug 2024 20:00:05 +0000</pubDate>
    </item>
    <item>
      <title>【Methodcentipede】方法蜈蚣</title>
      <link>https://dzone.com/articles/methodcentipede</link>
      <description>【&lt;p&gt;When I was a child, I used to lie on the bed and gaze for a long time at the patterns on an old Soviet rug, seeing animals and fantastical figures within them. Now, I more often look at code, but similar images still emerge in my mind. Like on the rug, these images form repetitive patterns. They can be either pleasing or repulsive. Today, I want to tell you about one such unpleasant pattern that can be found in programming.&lt;br&gt;&lt;br&gt;&lt;img style=&#34;width: 546px;&#34; class=&#34;fr-fic fr-dib lazyload&#34; data-image=&#34;true&#34; data-new=&#34;false&#34; data-sizeformatted=&#34;533.7 kB&#34; data-mimetype=&#34;image/png&#34; data-creationdate=&#34;1724650132586&#34; data-creationdateformatted=&#34;08/26/2024 05:28 AM&#34; data-type=&#34;temp&#34; data-url=&#34;https://dz2cdn1.dzone.com/storage/temp/17876405-methodcentipedewithduck2s.png&#34; data-modificationdate=&#34;null&#34; data-size=&#34;533682&#34; data-name=&#34;methodcentipedewithduck2s.png&#34; data-id=&#34;17876405&#34; data-src=&#34;https://dz2cdn1.dzone.com/storage/temp/17876405-methodcentipedewithduck2s.png&#34; alt=&#34;Donald duck with methodcentipede on board&#34;&gt;&lt;/p&gt;&#xA;&lt;h2&gt;Scenario&lt;/h2&gt;&#xA;&lt;p&gt;Imagine a service that processes a client registration request and sends an event about it to Kafka. In this article, I will show an implementation example that I consider an antipattern and suggest an improved version.&lt;/p&gt;】&lt;p&gt;当我还是个孩子的时候，我常常躺在床上，长时间凝视旧苏联地毯上的图案，看到里面的动物和奇幻人物。现在，我更多地看代码，但类似的画面仍然浮现在我的脑海中。就像地毯上一样，这些图像形成重复的图案。它们可以是令人愉快的，也可以是令人厌恶的。今天，我想告诉您编程中常见的一种令人不快的模式。&lt;br&gt;&lt;br&gt;&lt;img style=&#34;width: 546px;&#34; class =“fr-fic fr-dib lazyload”data-image =“true”data-new =“false”data-sizeformatted =“533.7 kB”data-mimetype =“image / png”data-creationdate =“1724650132586”数据-creationdateformatted=&#34;08/26/2024 05:28 AM&#34; data-type=&#34;temp&#34; data-url=&#34;https://dz2cdn1.dzone.com/storage/temp/17876405-methodcentipedewithduck2s.png&#34; data-modificationdate= “空”数据大小=“533682”数据名称=“methodcentipedewithduck2s.png”数据id=“17876405”data-src=“https://dz2cdn1.dzone.com/storage/temp/17876405-methodcentipedewithduck2s.png” &#34; alt=&#34;唐老鸭与方法蜈蚣在船上&#34;&gt;&lt;/p&gt;&#xA;&lt;h2&gt;场景&lt;/h2&gt;&#xA;&lt;p&gt;想象一个处理客户端注册请求并将有关该请求的事件发送到 Kafka 的服务。在本文中，我将展示一个我认为是反模式的实现示例，并提出改进版本。&lt;/p&gt;</description>
      <pubDate>Mon, 26 Aug 2024 18:00:05 +0000</pubDate>
    </item>
    <item>
      <title>【Better Search Results Through Intelligent Chunking and Metadata Integration】通过智能分块和元数据集成获得更好的搜索结果</title>
      <link>https://dzone.com/articles/better-search-results-through-intelligent-chunking</link>
      <description>【&lt;p&gt;Often, the &lt;a href=&#34;https://dzone.com/articles/how-to-build-an-ai-knowledge-base-with-rag&#34;&gt;knowledge bases&lt;/a&gt; over which we develop an LLM-based retrieval application contain a lot of data in various formats. To provide the &lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-large-language-models&#34;&gt;LLM&lt;/a&gt; with the most relevant context to answer the question specific to a section within the knowledge base, we rely on chunking the text within the knowledge base and keeping it handy.&lt;/p&gt;&#xA;&lt;h2&gt;Chunking&lt;/h2&gt;&#xA;&lt;p&gt;Chunking is the process of slicing text into meaningful units to improve information retrieval. By ensuring each chunk represents a focused thought or idea, chunking assists in maintaining the contextual integrity of the content.&lt;/p&gt;】&lt;p&gt;通常，我们开发的&lt;a href=&#34;https://dzone.com/articles/how-to-build-an-ai-knowledge-base-with-rag&#34;&gt;知识库&lt;/a&gt;基于法学硕士的检索应用程序包含大量各种格式的数据。为 &lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-large-language-models&#34;&gt;LLM&lt;/a&gt; 提供最相关的背景信息，以回答特定于其中某个部分的问题知识库，我们依赖于对知识库中的文本进行分块并保持方便。&lt;/p&gt;&#xA;&lt;h2&gt;分块&lt;/h2&gt;&#xA;&lt;p&gt;分块是将文本分割成有意义的单元以改进信息检索的过程。通过确保每个块代表一个集中的思想或想法，分块有助于保持内容的上下文完整性。&lt;/p&gt;</description>
      <pubDate>Mon, 26 Aug 2024 13:00:02 +0000</pubDate>
    </item>
    <item>
      <title>【Multi-Agent System’s Architecture】多Agent系统的架构</title>
      <link>https://dzone.com/articles/multi-agent-systems-architecture</link>
      <description>【&lt;p&gt;The distribution of decision-making and interaction among the various agents that make up the system principally distinguishes multi-agent systems from single-agent systems. In a single-agent system, a centralized agent makes all decisions, with other agents acting as remote slaves. It is customary for this one agent to decide depending on the circumstances. This can lead to the overlooking of alternative viewpoints and possibilities. On the other hand, multi-agent systems consist of several intelligent agents that interact with each other, each capable of making decisions and influencing the surrounding environment.&lt;/p&gt;&#xA;&lt;div name=&#34;1ac1&#34;&gt;&#xA; &lt;a href=&#34;https://levelup.gitconnected.com/what-are-ai-agents-why-are-they-popular-3e5687a0eb25&#34; data-media-id=&#34;37a6b2c6ce9b33a69f6ce611515a3d46&#34; data-thumbnail-img-id=&#34;0*L-_cT5nWqa9w4UQt&#34;&gt;&lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&lt;p name=&#34;137f&#34;&gt;The purpose of multi-agent architecture is to construct agents that are able to bring in multiple perspectives by virtue of the roles that they play. Different contexts facilitate the creation of these agents. Despite using the same LLM, each agent’s behavior is unique due to its specific function, objective, and context, just like a squad member.&lt;/p&gt;】&lt;p&gt;组成系统的各个代理之间决策和交互的分布主要区别于单代理系统和多代理系统。在单代理系统中，集中式代理做出所有决策，其他代理充当远程从属代理。通常由一位代理人根据具体情况做出决定。这可能会导致忽视其他观点和可能性。另一方面，多智能体系统由多个相互交互的智能体组成，每个智能体都能够做出决策并影响周围环境。&lt;/p&gt;&#xA;&lt;div名称=“1ac1”&gt;&#xA; &lt;a href=&#34;https://levelup.gitconnected.com/what-are-ai-agents-why-are-they-popular-3e5687a0eb25&#34; data-media-id=&#34;37a6b2c6ce9b33a69f6ce611515a3d46&#34; data-thumbnail-img-id= “0*L-_cT5nWqa9w4UQt&#34;&gt;&lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&lt;p name=&#34;137f&#34;&gt;多代理架构的目的是构建能够凭借其所扮演的角色引入多个视角的代理。不同的上下文有利于这些代理的创建。尽管使用相同的法学硕士，但每个特工的行为都是独一无二的，因为其特定的功能、目标和背景，就像小队成员一样。&lt;/p&gt;</description>
      <pubDate>Mon, 26 Aug 2024 16:00:03 +0000</pubDate>
    </item>
    <item>
      <title>【Anomaly Detection: The Dark Horse of Fraud Detection】异常检测：欺诈检测的黑马</title>
      <link>https://dzone.com/articles/anomaly-detection-dark-horse-of-fraud-detection</link>
      <description>【&lt;p name=&#34;fe6f&#34;&gt;Today, machine learning-based fraud prediction has become a mainstay in most organizations. The two common types of machine learning are supervised and unsupervised machine learning. Out of the two, supervised learning is the most desired choice for fraud prediction for apparent reasons. Supervised learning that learns the patterns from known fraud cases yields more accurate predictions. On the other hand, unsupervised learning can be leveraged even when we don’t have confirmed cases of fraud. The drawback is that it has a lower level of prediction accuracy compared to supervised learning.&lt;/p&gt;&#xA;&lt;h2 name=&#34;2fa2&#34;&gt;Supervised ML Models Won’t Know What We Don’t Know&lt;/h2&gt;&#xA;&lt;p name=&#34;3de6&#34;&gt;Organizations today typically only implement supervised models. A common reason for this is the belief that if a supervised model can deliver the best performance, there is no need to have an unsupervised model. This school of thought could prove dangerous in some domains, fraud detection being one of them. Supervised models only learn what they are taught. They can’t evolve on their own to capture the new fraud patterns. Fraudsters, conversely, are highly creative entities constantly attempting to figure out new ways of evading detection.&lt;/p&gt;】&lt;p name=&#34;fe6f&#34;&gt;如今，基于机器学习的欺诈预测已成为大多数组织的支柱。机器学习的两种常见类型是监督机器学习和无监督机器学习。在这两者中，监督学习是欺诈预测最理想的选择，原因显而易见。从已知欺诈案例中学习模式的监督学习可以产生更准确的预测。另一方面，即使我们没有确认的欺诈案例，也可以利用无监督学习。缺点是与监督学习相比，其预测精度较低。&lt;/p&gt;&#xA;&lt;h2 name=&#34;2fa2&#34;&gt;监督式机器学习模型不会知道我们不知道的事情&lt;/h2&gt;&#xA;&lt;p name=&#34;3de6&#34;&gt;当今的组织通常只实施监督模型。造成这种情况的一个常见原因是，人们相信如果监督模型可以提供最佳性能，则无需使用无监督模型。这种思想流派在某些领域可能是危险的，欺诈检测就是其中之一。监督模型只学习他们所教授的内容。它们无法自行发展以捕捉新的欺诈模式。相反，欺诈者是极具创造力的实体，不断尝试找出逃避检测的新方法。&lt;/p&gt;</description>
      <pubDate>Mon, 26 Aug 2024 17:00:05 +0000</pubDate>
    </item>
    <item>
      <title>【Securing the Future: Defending LLM-Based Applications in the Age of AI】确保未来：在人工智能时代捍卫基于法学硕士的申请</title>
      <link>https://dzone.com/articles/defending-llm-based-applications</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;As artificial intelligence and &lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-large-language-models&#34;&gt;large language models (LLMs)&lt;/a&gt; continue to revolutionize the tech landscape, they also introduce new security challenges that developers, engineers, architects, and security professionals must address. At &lt;a href=&#34;https://www.blackhat.com/us-24/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Black Hat 2024&lt;/a&gt;, we spoke with &lt;a href=&#34;https://www.linkedin.com/in/nohackme/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Mick Baccio&lt;/a&gt;, Global Security Strategist at Splunk, about their research on the exploitation of LLM-based applications and how organizations can implement the OWASP Top 10 framework to better defend these systems.&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;The Evolving Threat Landscape&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;The rapid adoption of &lt;a href=&#34;https://dzone.com/articles/building-an-llm-powered-product-to-learn-the-ai-stack-pt1&#34;&gt;LLM-based applications&lt;/a&gt; has opened up new avenues for potential exploitation. Baccio emphasizes the importance of understanding these emerging threats:&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;作为人工智能和&lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-large-language-models&#34;&gt;大型语言模型 (LLM)&lt;/a&gt;它们在继续彻底改变技术格局的同时，也带来了开发人员、工程师、架构师和安全专业人员必须应对的新安全挑战。在 &lt;a href=&#34;https://www.blackhat.com/us-24/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Black Hat 2024&lt;/a&gt; 上，我们与 &lt;a href=&#34;https ://www.linkedin.com/in/nohackme/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Mick Baccio&lt;/a&gt;，Splunk 全球安全策略师，介绍他们对基于 LLM 的应用程序的利用的研究以及组织如何实施 OWASP Top 10 框架来更好地保护这些系统。&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;不断变化的威胁格局&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;快速采用&lt;a href=&#34;https://dzone.com/articles/building-an-llm-powered-product-to-learn-the-ai-stack-pt1&#34;&gt;基于法学硕士的申请&lt;/a&gt;为潜在的开发开辟了新的途径。 Baccio 强调了解这些新兴威胁的重要性：&lt;/p&gt;</description>
      <pubDate>Mon, 26 Aug 2024 11:00:06 +0000</pubDate>
    </item>
    <item>
      <title>【DORA Metrics: Tracking and Observability With Jenkins, Prometheus, and Observe】DORA Metrics：使用 Jenkins、Prometheus 和 Observe 进行跟踪和可观察性</title>
      <link>https://dzone.com/articles/dora-metrics-tracking-and-observability-with-jenki</link>
      <description>【&lt;p&gt;DORA (&lt;a href=&#34;https://dora.dev/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;DevOps Research and Assessment&lt;/a&gt;) metrics, developed by the DORA team have become a standard for measuring the efficiency and effectiveness of DevOps implementations. As organizations start to adopt DevOps practices to accelerate software delivery, tracking performance and reliability becomes critical. &lt;a href=&#34;https://dzone.com/articles/dora-metrics-in-devops&#34;&gt;DORA metrics&lt;/a&gt; help organizations address these critical tasks by providing a framework for understanding how well teams are delivering software and how quickly they can recover from failures. This article will delve into DORA metrics, demonstrate how to track them using &lt;a href=&#34;https://dzone.com/articles/getting-started-with-jenkins&#34;&gt;Jenkins&lt;/a&gt;, and explore how to use &lt;a href=&#34;https://dzone.com/refcardz/scaling-and-augmenting-prometheus&#34;&gt;Prometheus&lt;/a&gt; for collecting and displaying these metrics in Observe.&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;&lt;strong&gt;What Are DORA Metrics?&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;DORA metrics are a set of four key performance indicators (KPIs) that help organizations evaluate their software delivery performance. These metrics are:&lt;/p&gt;】&lt;p&gt;DORA 团队开发的 DORA（&lt;a href=&#34;https://dora.dev/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;DevOps 研究和评估&lt;/a&gt;）指标已成为衡量 DevOps 实施的效率和有效性的标准。随着组织开始采用 DevOps 实践来加速软件交付，跟踪性能和可靠性变得至关重要。 &lt;a href=&#34;https://dzone.com/articles/dora-metrics-in-devops&#34;&gt;DORA 指标&lt;/a&gt;通过提供一个框架来了解团队交付软件的情况以及如何交付，从而帮助组织解决这些关键任务他们可以很快从失败中恢复过来。本文将深入研究 DORA 指标，演示如何使用 &lt;a href=&#34;https://dzone.com/articles/getting-started-with-jenkins&#34;&gt;Jenkins&lt;/a&gt; 跟踪它们，并探索如何使用&lt; a href=&#34;https://dzone.com/refcardz/scaling-and-augmenting-prometheus&#34;&gt;Prometheus&lt;/a&gt; 用于在 Observe 中收集和显示这些指标。&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;&lt;strong&gt;DORA 指标是什么？&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;DORA 指标是一组四个关键绩效指标 (KPI)，可帮助组织评估其软件交付绩效。这些指标是：&lt;/p&gt;</description>
      <pubDate>Mon, 26 Aug 2024 19:00:05 +0000</pubDate>
    </item>
    <item>
      <title>【Efficient and Fault-Tolerant Solutions for Distributed Mutual Exclusion】分布式互斥的高效容错解决方案</title>
      <link>https://dzone.com/articles/mutual-exclusion-in-distributed-computing</link>
      <description>【&lt;p&gt;In the realm of &lt;a href=&#34;https://dzone.com/articles/demystifying-distributed-systems-a-beginners-guide&#34;&gt;distributed systems&lt;/a&gt;, ensuring that only one process can access a shared resource at any given time is crucial — this is where mutual exclusion comes into play. Without a reliable way to enforce mutual exclusion, systems could easily run into issues like data inconsistency or race conditions, potentially leading to catastrophic failures.&lt;/p&gt;&#xA;&lt;h2&gt;Algorithms to Address the Challenge&lt;/h2&gt;&#xA;&lt;p&gt;Several algorithms have been developed over the years to address this challenge. One of the most well-known is the &lt;strong&gt;Majority Quorum Algorithm&lt;/strong&gt;. It’s effective, no doubt, but it can be quite demanding in terms of communication, especially when you&#39;re dealing with a large network of nodes.&lt;/p&gt;】&lt;p&gt;在&lt;a href=&#34;https://dzone.com/articles/demystifying-distributed-systems-a-beginners-guide&#34;&gt;分布式系统&lt;/a&gt;领域，确保只有一个进程可以访问一个进程在任何特定时间共享资源都是至关重要的——这就是互斥发挥作用的地方。如果没有可靠的方法来强制执行互斥，系统很容易遇到数据不一致或竞争条件等问题，从而可能导致灾难性故障。&lt;/p&gt;&#xA;&lt;h2&gt;应对挑战的算法&lt;/h2&gt;&#xA;&lt;p&gt;多年来已经开发了多种算法来应对这一挑战。其中最著名的一种是&lt;strong&gt;多数仲裁算法&lt;/strong&gt;。毫无疑问，它很有效，但它对通信的要求可能相当高，尤其是当您处理大型节点网络时。&lt;/p&gt;</description>
      <pubDate>Mon, 26 Aug 2024 12:00:05 +0000</pubDate>
    </item>
    <item>
      <title>【Why You Should Migrate Microservices From Java to Kotlin: Experience and Insights】为什么应该将微服务从 Java 迁移到 Kotlin：经验和见解</title>
      <link>https://dzone.com/articles/migrating-microservices-from-java-to-kotlin</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;&lt;span data-lexical-text=&#34;true&#34;&gt;I work at one of the largest private banks in Eastern Europe, developing the backend for a mobile application. Our cluster consists of more than 400 microservices, and peak loads on individual services can reach five-digit values. When we initially started transitioning to a microservices architecture, all our code was written in&amp;nbsp;&lt;/span&gt;&lt;a href=&#34;https://dzone.com/refcardz/core-java&#34;&gt;&lt;span data-lexical-text=&#34;true&#34;&gt;Java&lt;/span&gt;&lt;/a&gt;&lt;span data-lexical-text=&#34;true&#34;&gt;. However, over time, we began actively migrating microservices to Kotlin. Today, all new microservices are created exclusively in &lt;/span&gt;&lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-kotlin&#34;&gt;&lt;span data-lexical-text=&#34;true&#34;&gt;Kotlin&lt;/span&gt;&lt;/a&gt;&lt;span data-lexical-text=&#34;true&#34;&gt;, and the share of Java code has decreased to less than 20%.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;&lt;span data-lexical-text=&#34;true&#34;&gt;In this article, I will explain why the migration to Kotlin has been so successful and&amp;nbsp;&lt;/span&gt;&lt;a href=&#34;https://dzone.com/articles/kotlin-is-more-fun-than-java-and-this-is-a-big-dea&#34;&gt;&lt;span data-lexical-text=&#34;true&#34;&gt;why developers are eager to switch to this language&lt;/span&gt;&lt;/a&gt;&lt;span data-lexical-text=&#34;true&#34;&gt;, even with prior experience only in other JVM languages.&lt;/span&gt;&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;&lt;span data-lexical-text=&#34;true&#34;&gt;我在东欧最大的私人银行之一工作，负责开发移动应用程序的后端。我们的集群由 400 多个微服务组成，单个服务的峰值负载可以达到五位数。当我们最初开始过渡到微服务架构时，我们所有的代码都是用 &lt;/span&gt;&lt;a href=&#34;https://dzone.com/refcardz/core-java&#34;&gt;&lt;span data-lexical-text=&#34;true 编写的&#34;&gt;Java&lt;/span&gt;&lt;/a&gt;&lt;span data-lexical-text=&#34;true&#34;&gt;。然而，随着时间的推移，我们开始积极地将微服务迁移到 Kotlin。如今，所有新的微服务都是在 &lt;/span&gt;&lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-kotlin&#34;&gt;&lt;span data-lexical-text=&#34;true&#34;&gt;Kotlin 中专门创建的&lt;/span&gt;&lt;/a&gt;&lt;span data-lexical-text=&#34;true&#34;&gt;，Java代码的份额已降至20%以下。 &lt;/span&gt;&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;&lt;span data-lexical-text=&#34;true&#34;&gt;在本文中，我将解释为什么迁移到 Kotlin 如此成功&lt;/span&gt;&lt;a href=&#34;https:// dzone.com/articles/kotlin-is-more-fun-than-java-and-this-is-a-big-dea&#34;&gt;&lt;span data-lexical-text=&#34;true&#34;&gt;为什么开发人员渴望切换到这种语言&lt;/span&gt;&lt;/a&gt;&lt;span data-lexical-text=&#34;true&#34;&gt;，即使之前只具有其他 JVM 语言的经验。&lt;/span&gt;&lt;/p&gt;</description>
      <pubDate>Mon, 26 Aug 2024 14:00:05 +0000</pubDate>
    </item>
    <item>
      <title>【You Don’t Get Paid to Practice Scrum】练习 Scrum 不会获得报酬</title>
      <link>https://dzone.com/articles/you-dont-get-paid-to-practice-scrum</link>
      <description>【&lt;h2&gt;TL; DR: Why Solving Customer Problems Instead Matters&lt;/h2&gt;&#xA;&lt;p&gt;Scrum is just a tool; your job is to solve real customer problems and deliver value. Stop focusing on perfecting frameworks and start prioritizing outcomes that matter. It’s time to reassess what truly drives your success, particularly given the challenging business environment.&lt;/p&gt;&#xA;&lt;h2&gt;Why Solving Customer Problems Matters More Than Perfecting Scrum&lt;/h2&gt;&#xA;&lt;p&gt;Agile practices, particularly within Scrum, often captivate practitioners with their events, roles, principles, rules, and stickies. However, practitioners tend to overlook two crucial truths — both veterans and newcomers alike:&lt;/p&gt;】&lt;h2&gt;TL； DR：为什么解决客户问题很重要&lt;/h2&gt;&#xA;&lt;p&gt;Scrum 只是一个工具；您的工作是解决真正的客户问题并创造价值。停止关注完善框架并开始优先考虑重要的结果。是时候重新评估真正推动您成功的因素了，特别是考虑到充满挑战的商业环境。&lt;/p&gt;&#xA;&lt;h2&gt;为什么解决客户问题比完善 Scrum 更重要&lt;/h2&gt;&#xA;&lt;p&gt;敏捷实践，尤其是 Scrum 中的敏捷实践，常常以其事件、角色、原则、规则和便利贴吸引实践者。然而，从业者往往忽视两个关键事实——无论是老手还是新人：&lt;/p&gt;</description>
      <pubDate>Mon, 26 Aug 2024 15:00:05 +0000</pubDate>
    </item>
  </channel>
</rss>