<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Building a Real-Time Change Data Capture Pipeline With Debezium, Kafka, and PostgreSQL】使用Debezium，Kafka和PostgreSQL构建实时更改数据捕获管道</title>
      <link>https://dzone.com/articles/building-a-real-time-change-data-capture-pipeline</link>
      <description>【&lt;p data-end=&#34;783&#34; data-start=&#34;376&#34;&gt;&lt;a href=&#34;https://dzone.com/articles/consistent-change-data-capture-across-multiple-tab&#34;&gt;Change Data Capture (CDC)&lt;/a&gt; is a foundational pattern in modern data engineering. It enables systems to react to database changes in near real-time by streaming inserts, updates, and deletes as events. This capability is critical in a wide range of scenarios: synchronizing microservices, feeding real-time dashboards, updating machine learning features, powering audit logs, or building streaming data lakes.&lt;/p&gt;&#xA;&lt;p data-end=&#34;885&#34; data-start=&#34;785&#34;&gt;In this tutorial, we’ll walk through how to implement a CDC pipeline using the following components:&lt;/p&gt;】&lt;p data-end =“ 783” data-start =“ 376”&gt; &lt;a href =“ https://dzone.com/articles/consistent-change-change-data-capture-across-multiple-tab”&gt;变更数据捕获（CDC）&lt;/a&gt;是现代数据工程中的基础模式。它使系统能够通过将插入，更新和删除作为事件进行流插入，更新和删除来对数据库的变化做出反应。在广泛的方案中，此功能至关重要：同步微服务，进食实时仪表板，更新机器学习功能，供电审核日志或构建流数据湖。&lt;/p&gt;&#xA;&lt;p data-end =“ 885” data-start =“ 785”&gt;在本教程中，我们将浏览如何使用以下组件实现CDC管道：&lt;/p&gt;</description>
      <pubDate>Thu, 29 May 2025 13:00:09 +0000</pubDate>
    </item>
    <item>
      <title>【The Ultimate Guide to Code Formatting: Prettier vs ESLint vs Biome】代码格式的最终​​指南：漂亮的vs Eslint vs Biome</title>
      <link>https://dzone.com/articles/prettier-vs-eslint-vs-biome</link>
      <description>【&lt;p&gt;It doesn&#39;t matter if you work alone or in a large team — code formatting should be uniform for all developers. It reduces noise and arguments about code style at code review, makes code more readable, and speeds up development by eliminating the need to manually format each line.&lt;/p&gt;&#xA;&lt;p&gt;In this article we&#39;ll take a closer look at three of the most popular tools with detailed customization instructions.&lt;/p&gt;】&lt;p&gt;无论您是独自工作还是在大型团队中工作，对于所有开发人员来说，代码格式都应该统一。它减少了代码审核时的噪音和关于代码样式的噪音和论点&#xA;&lt;p&gt;在本文中，我们将仔细研究带有详细自定义说明的三个最受欢迎的工具。&lt;/p&gt;</description>
      <pubDate>Thu, 29 May 2025 20:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Monoliths, REST, and Spring Boot Sidecars: A Real Modernization Playbook】整体，休息和春季靴子赛车：一本真正的现代化剧本</title>
      <link>https://dzone.com/articles/monoliths-rest-spring-boot-sidecars</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Forget the idea that modernization has to mean rewriting everything. The real work happens in the in-between, where REST meets SOAP, where sidecars live beside WAR files, and where code changes are political before they&#39;re technical.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Especially in high-stakes, compliance-bound environments like healthcare, government, and labor systems, modernization doesn’t look like a revolution. It looks like a careful negotiation.&lt;/p&gt;】&lt;p dir =“ ltr”&gt;忘记了现代化必须意味着重写一切的想法。真正的工作发生在介于两者之间，休息与肥皂，旁边居住在战争档案旁边的地方以及代码更改在技术上是政治性的。 &lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;，尤其是在高风险，依从性的环境中，例如医疗保健，政府和劳动力系统，现代化看起来不像是一场革命。看起来像是一个仔细的谈判。&lt;/p&gt;</description>
      <pubDate>Thu, 29 May 2025 17:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【What’s Got Me Interested in OpenTelemetry—And Pursuing Certification】是什么让我对OpenTelemetry感兴趣并寻求认证</title>
      <link>https://dzone.com/articles/opentelemetry-certification</link>
      <description>【&lt;p&gt;Someone (&lt;em&gt;I don’t remember who—if it was you, feel free to take credit in the comments&lt;/em&gt;) once told me,&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA; &lt;p&gt;“If you want to break a habit, don’t tell anyone. If you want to build a habit or achieve a goal, tell everyone.”&lt;/p&gt;】&lt;p&gt;某人（&lt;em&gt;我不记得是谁 - 如果是您，请随时在评论中征得&lt;/em&gt;）曾经告诉我，&lt;/p&gt;&#xA;&lt;BlockQuote&gt;&#xA; &lt;p&gt;“如果您想习惯习惯，请不要告诉任何人。如果您想建立习惯或实现目标，请告诉所有人。” &lt;/p&gt;</description>
      <pubDate>Thu, 29 May 2025 16:00:01 +0000</pubDate>
    </item>
    <item>
      <title>【ACID vs BASE: Transaction Models Explained】酸与基础：交易模型解释了</title>
      <link>https://dzone.com/articles/acid-vs-base-transaction-models-explained</link>
      <description>【&lt;p id=&#34;acid-vs-base-transaction-models-explained&#34;&gt;There are two main approaches to handling transactions: either we follow ACID or BASE principles. All other approaches are just variations of the two; we can even say that, to a certain degree, BASE is a variation of ACID. Furthermore, some databases may pick to support ACID transactions for part of operations, while not providing the same quarantine for others – just like &lt;a href=&#34;https://www.mongodb.com/resources/basics/databases/acid-transactions&#34;&gt;MongoDB&lt;/a&gt;&amp;nbsp;here.&lt;/p&gt;&#xA;&lt;p&gt;In today’s text, I will cover the description of both abbreviations, and their use cases, closing with an in-depth summary of the differences between them. For now, let’s say that the biggest difference between the two is: that ACID prioritizes consistency over availability, while BASE prioritizes availability over consistency.&lt;/p&gt;】&lt;p id =“酸-VS-base-transaction-models-supplated”&gt;有两种主要方法来处理交易：我们遵循酸或基本原理。所有其他方法只是两者的变体。我们甚至可以说，在一定程度上，碱是酸的变化。此外，某些数据库可能会选择以支持部分操作的酸性交易，同时却没有为他人提供相同的隔离 - 就像&lt;a href =“ https://www.mongodb.com/resources/resources/basics/basics/databases/acid-acid-transactions/acid-transactions”&gt; mongodb &lt;/a&gt; Mongongodb &lt;/a&gt; Thee。&#xA;&lt;p&gt;在今天的文本中，我将介绍两种缩写及其用例的描述，并深入摘要它们之间的差异。现在，假设两者之间的最大区别是：酸优先级一致性而不是可用性，而基础优先级优先于一致性。&lt;/p&gt;</description>
      <pubDate>Thu, 29 May 2025 15:00:01 +0000</pubDate>
    </item>
    <item>
      <title>【When Airflow Tasks Get Stuck in Queued: A Real-World Debugging Story】当气流任务被困在排队时：真实的调试故事</title>
      <link>https://dzone.com/articles/when-airflow-tasks-get-stuck-in-queued</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Recently, my team encountered a critical production issue in which Apache Airflow tasks were getting stuck in the &#34;queued&#34; state indefinitely. As someone who has worked extensively with Scheduler, I&#39;ve handled my share of DAG failures, retries, and scheduler quirks, but this particular incident stood out both for its technical complexity and the organizational coordination it demanded.&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;The Symptom: Tasks Stuck in Queued&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;It began when one of our business-critical &lt;a href=&#34;https://dzone.com/articles/exploring-apache-airflow-for-batch-processing-scen&#34;&gt;Directed Acyclic Graphs&lt;/a&gt; (DAGs) failed to complete. Upon investigation, we discovered several tasks were stuck in the &#34;queued&#34; state — not running, failing, or retrying, just permanently queued.&lt;/p&gt;】&lt;p dir =“ ltr”&gt;最近，我的团队遇到了一个关键的生产问题，其中Apache气流任务无限期地陷入了“排队”状态。作为与调度程序合作的人，我处理了我的DAG失败，重试和调度程序怪癖的份额，但是这一特殊事件既是其技术复杂性和要求的组织协调，又突出了。&lt;/p&gt;。&#xA;&lt;h2 dir =“ ltr”&gt;症状：任务卡在排队&lt;/h2&gt;&#xA;&lt;p dir =“ ltr”&gt;它开始于我们的业务 - 关键&lt;a href =“ https://dzone.com/articles/expleor--apache-apache-airflow-for-batch-processing-scen”&gt;定向的acyclic图&lt;/a&gt;（dags）未能完成。经过调查，我们发现几个任务被困在“排队”状态下 - 没有跑步，失败或重试，只是永久排队。&lt;/p&gt;</description>
      <pubDate>Thu, 29 May 2025 18:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Introducing Graph Concepts in Java With Eclipse JNoSQL, Part 3: Understanding Janus】使用Eclipse Jnosql在Java中介绍图形概念，第3部分：理解Janus</title>
      <link>https://dzone.com/articles/graph-concepts-java-eclipse-jnosql-janus</link>
      <description>【&lt;p data-pm-slice=&#34;1 1 []&#34;&gt;Graph databases are increasingly popular in modern applications because they can model complex relationships natively. Graphs provide a more natural representation of connected data from recommendation systems to fraud detection. Our previous articles explored graph databases broadly and delved into Neo4j. In this third part, we focus on &lt;strong&gt;JanusGraph&lt;/strong&gt;, a scalable and distributed graph database.&lt;/p&gt;&#xA;&lt;p&gt;Unlike Neo4j, JanusGraph supports multiple backends and leverages &lt;strong&gt;Apache TinkerPop&lt;/strong&gt;, a graph computing framework that introduces a standard API and query language (Gremlin) for various databases. This abstraction makes JanusGraph a flexible choice for enterprise applications.&lt;/p&gt;】&lt;p data-pm-slice =“ 1 1 []&gt;图数据库在现代应用程序中越来越流行，因为它们可以在本地建模复杂的关系。图提供了从建议系统到欺诈检测的连接数据的更自然表示。我们以前的文章广泛探索了图数据库，并深入研究了Neo4J。在第三部分中，我们专注于&lt;strong&gt; Janusgraph &lt;/strong&gt;，这是一个可扩展的分布式图数据库。&lt;/p&gt;&#xA;&lt;p&gt;与neo4j不同，Janusgraph支持多个后端和杠杆&lt;strong&gt; Apache Tinkerpop &lt;/strong&gt;，这是一个介绍标准API和查询语言（Gremlin）的图形计算框架（Gremlin）。此抽象使Janusgraph成为企业应用程序的灵活选择。&lt;/p&gt;</description>
      <pubDate>Thu, 29 May 2025 14:00:01 +0000</pubDate>
    </item>
    <item>
      <title>【Security by Design: Building Full-Stack Applications With DevSecOps】设计安全性：使用DevSecops构建全栈应用程序</title>
      <link>https://dzone.com/articles/building-full-stack-applications-devsecops</link>
      <description>【&lt;p&gt;Building a full-stack application with Angular (frontend) and Node.js (backend) demands a holistic security approach. Security by design means baking in security from the architecture stage and throughout development, rather than as an afterthought. DevSecOps extends DevOps by integrating security into every phase of the software lifecycle – developers, operations, and security teams share responsibility to ensure continuous security.&lt;/p&gt;&#xA;&lt;p&gt;This article explores how to secure an Angular + Node.js application end-to-end (frontend, backend/API) and embed security into the CI/CD pipeline with DevSecOps practices. We’ll include code snippets (like input validation and JWT auth) and diagrams for a secure architecture and pipeline.&lt;/p&gt;】&lt;p&gt;使用Angular（Frontend）和Node.js（后端）构建全堆栈应用程序需要一种整体安全方法。设计的安全性意味着从建筑阶段和整个开发中进行安全烘烤，而不是作为事后的想法。 DevSecops通过将安全性集成到软件生命周期的每个阶段 - 开发人员，操作和安全团队分担责任以确保持续安全性。&#xA;&lt;p&gt;本文探讨了如何保护Angular + Node.js应用程序端到端（前端，后端/API），并使用DevSecops实践将安全性嵌入CI/CD管道中。我们将提供代码片段（例如输入验证和JWT Auth）以及安全体系结构和管道的图。&lt;/p&gt;</description>
      <pubDate>Thu, 29 May 2025 19:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Hyperparameter Tuning: An Overview and a Real-World Example】超参数调整：概述和一个现实示例</title>
      <link>https://dzone.com/articles/hyperparameter-tuning-overview-examples</link>
      <description>【&lt;p data-selectable-paragraph=&#34;&#34;&gt;In machine learning, selecting &lt;a href=&#34;https://dzone.com/articles/5-common-data-structures-and-algorithms-used-in-ma&#34;&gt;the right algorithm&lt;/a&gt; is just the first step. The true power of a model lies in fine-tuning it to extract the best performance. This fine-tuning process, known as hyperparameter tuning, is akin to adjusting the dials on a high-performance engine. Get it right, and your model will achieve optimal accuracy and generalization; get it wrong, and you could end up with a model that underperforms or overfits.&lt;/p&gt;&#xA;&lt;p data-selectable-paragraph=&#34;&#34;&gt;Let’s explore &lt;a href=&#34;https://dzone.com/articles/a-comprehensive-guide-to-hyperparameter-tuning-exp&#34;&gt;hyperparameter tuning&lt;/a&gt; across different machine learning algorithms, using a common scenario — predicting house prices. We’ll walk through the tuning process for linear regression, decision trees, and random forests, providing code examples and discussing real-world case studies where hyperparameter tuning made a significant impact.&lt;/p&gt;】&lt;p data-selectable-paragraph =“”&gt;在机器学习中，选择&lt;a href =“ https://dzone.com/articles/5-common-data-sinstructures-and-algorithms-angorithms-used-in-ma”&gt;右算法&lt;/a&gt; &lt;/a&gt;只是第一步。模型的真正力量在于对其进行微调以提取最佳性能。这个微调的过程被称为高参数调整，类似于调整高性能引擎上的表盘。正确正确，您的模型将达到最佳的准确性和概括；弄错了，您最终可能会以表现不佳或表现出色的模型。&lt;/p&gt;&#xA;&lt;p data-selectable-paragraph =“”&gt;让我们探索&lt;a href =“ https://dzone.com/articles/a-comprehens-guide-to-guide-to-to-hyperparameter-tuning-xuning-exp--超参数调谐&lt;/a&gt;在不同的机器学习算法中，使用常见的方案，可预测 - 预测房屋价格。我们将介绍线性回归，决策树和随机森林的调整过程，提供代码示例，并讨论现实世界中的案例研究，其中超参数调整产生了重大影响。&lt;/p&gt;</description>
      <pubDate>Thu, 29 May 2025 12:00:13 +0000</pubDate>
    </item>
    <item>
      <title>【Bridging UI, DevOps, and AI: A Full-Stack Engineer’s Approach to Resilient Systems】桥接UI，DevOps和AI：全栈工程师的弹性系统方法</title>
      <link>https://dzone.com/articles/ui-devops-ai-full-stack-resilient-systems</link>
      <description>【&lt;p data-end=&#34;2528&#34; data-start=&#34;1502&#34;&gt;Modern full-stack engineering isn’t confined to just coding a front-end and back-end — it’s about bridging the user interface (UI), DevOps processes, and artificial intelligence (AI) into one cohesive, resilient system. A full-stack engineer today might design an Angular UI, implement a Node.js API, set up CI/CD automation, and even integrate an AI-powered feature — all with an eye toward scalability and reliability.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p data-end=&#34;2528&#34; data-start=&#34;1502&#34;&gt;This article explores a holistic approach to resilient system design, touching every layer from the Angular frontend to the Node backend, with DevOps and AI as glue that binds them. We’ll use examples, code snippets, and diagrams to illustrate how these pieces come together. The content is geared to be accessible to general developers while also delving into details that senior engineers and DevOps architects expect.&amp;nbsp;&lt;/p&gt;】&lt;p data-end =“ 2528” data-start =“ 1502”&gt;现代全堆栈工程不仅局限于编码前端和后端 - 它是关于将用户界面（UI），DevOps过程以及人工智能（AI）桥接到一个内聚，弹性的系统中。如今，全栈工程师可能会设计一个Angular UI，实现Node.js API，设置CI/CD自动化，甚至集成了AI功能的功能 - 所有这些功能都朝着可伸缩性和可靠性迈进。 &lt;/p&gt;&#xA;&lt;p data-end =“ 2528” data-start =“ 1502”&gt;本文探讨了一种弹性系统设计的整体方法，触摸从角前端到节点后端的每一层，devops和ai作为粘合它们的胶水。我们将使用示例，代码片段和图表来说明这些作品如何融合在一起。一般开发人员可以访问该内容，同时还可以深入研究高级工程师和DevOps Architects期望的细节。 &lt;/p&gt;</description>
      <pubDate>Thu, 29 May 2025 21:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>