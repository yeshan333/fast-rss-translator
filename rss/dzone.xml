<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Three Habits of Highly Effective Observability Teams】高效可观察团队的三个习惯</title>
      <link>https://dzone.com/articles/habits-of-effective-observability-teams</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;As organizations adopt microservices and containerized architectures, they often realize that they need to rethink their approach to basic operational tasks like security or observability. It makes sense: in a world where developers – rather than operations teams – are keeping applications up and running, and where systems are highly distributed, ephemeral, and interconnected, how can you take the same approach you have in the past? From a technology perspective, there has been a clear shift to open source standards, especially in the realm of observability. Protocols like OpenTelemetry and Prometheus, and agents like &lt;a href=&#34;https://chronosphere.io/fluent-bit/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Fluent Bit&lt;/a&gt;, are now the norm – according to the &lt;a href=&#34;https://www.cncf.io/reports/cncf-annual-survey-2023/#findings&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;2023 CNCF survey&lt;/a&gt;, Prometheus usage increased to 57% adoption in production workloads, with OpenTelemetry and Fluent both at 32% adoption in production.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;But open source tools alone can’t help organizations transform their observability practices. As I’ve had the opportunity to work with organizations who have solved the challenge of observability at scale, I’ve seen a few common trends in how these companies operate their observability practices. Let&#39;s dig in.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;当组织采用微服务和容器化架构时，他们常常意识到需要重新考虑处理安全性或可观察性等基本操作任务的方法。这是有道理的：在一个由开发人员（而不是运营团队）负责保持应用程序正常运行，并且系统高度分布式、短暂且互连的世界中，您如何才能采取与过去相同的方法？从技术角度来看，已经明显转向开源标准，特别是在可观察性领域。像 OpenTelemetry 和 Prometheus 这样的协议，以及像 &lt;a href=&#34;https://chronosphere.io/fluent-bit/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Fluent Bit&lt;/a&gt; 这样的代理，现在已经成为常态– 根据&lt;a href=&#34;https://www.cncf.io/reports/cncf-annual-survey-2023/#findings&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;2023 CNCF 调查&lt;/a &gt;，Prometheus 在生产工作负载中的使用率增加到 57%，OpenTelemetry 和 Fluent 在生产中的采用率均为 32%。 &lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;但仅靠开源工具无法帮助组织转变其可观察性实践。由于我有机会与大规模解决可观察性挑战的组织合作，我看到了这些公司如何运作可观察性实践的一些共同趋势。让我们深入研究一下。&lt;/p&gt;</description>
      <pubDate>Thu, 17 Oct 2024 20:00:09 +0000</pubDate>
    </item>
    <item>
      <title>【Entity Creation With Asynchronous Pipelines in Distributed Systems】在分布式系统中使用异步管道创建实体</title>
      <link>https://dzone.com/articles/entity-creation-with-asynchronous-pipelines</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Creating entities asynchronously in &lt;a href=&#34;https://dzone.com/articles/demystifying-distributed-systems-a-beginners-guide&#34;&gt;distributed systems&lt;/a&gt; presents challenges and benefits, especially for large enterprises seeking scalability, fault tolerance, and efficient user experiences. Asynchronous (async) pipelines for entity creation decouple services, handle failures gracefully, and minimize latency. These qualities enable enterprises to maintain flexible, high-performing systems as they scale. Let&#39;s explore the benefits, challenges, and solutions to build an effective pipeline in depth.&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;Benefits of Asynchronous Pipelines in Entity Creation&lt;/h2&gt;&#xA;&lt;h3 dir=&#34;ltr&#34;&gt;Graceful Failure Handling&lt;/h3&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;In complex distributed systems, certain tasks in the entity creation process are non-critical. Async pipelines allow failure isolation, meaning failures in non-critical tasks won’t disrupt the entire process. These tasks can either be retried or ignored, allowing the pipeline to continue smoothly.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;在&lt;a href=&#34;https://dzone.com/articles/demystifying-distributed-systems-a-beginners-guide&#34;&gt;分布式系统&lt;/a&gt;中异步创建实体带来了挑战和好处，特别适合寻求可扩展性、容错性和高效用户体验的大型企业。用于实体创建的异步 (async) 管道解耦服务、优雅地处理故障并最大限度地减少延迟。这些品质使企业能够在扩展时保持灵活、高性能的系统。让我们深入探讨构建有效管道的好处、挑战和解决方案。&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;异步管道在实体创建中的好处&lt;/h2&gt;&#xA;&lt;h3 dir=&#34;ltr&#34;&gt;优雅的失败处理&lt;/h3&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;在复杂的分布式系统中，实体创建过程中的某些任务并不重要。异步管道允许故障隔离，这意味着非关键任务中的故障不会中断整个流程。这些任务可以重试或忽略，从而使管道能够顺利继续。&lt;/p&gt;</description>
      <pubDate>Fri, 18 Oct 2024 14:00:06 +0000</pubDate>
    </item>
    <item>
      <title>【Secure Golden Images: A Blueprint for Vulnerability Management】安全黄金映像：漏洞管理蓝图</title>
      <link>https://dzone.com/articles/secure-golden-images-a-blueprint-for-vulnerability</link>
      <description>【&lt;p&gt;In environments with &lt;a href=&#34;https://dzone.com/articles/aws-cloud-migration-best-practices-and-pitfalls-to&#34;&gt;AWS Cloud&lt;/a&gt; workloads, a proactive approach to vulnerability management involves shifting from traditional patching to regularly deploying updated Secure Golden Images. This approach is well-suited to a modern Continuous Integration and Continuous Delivery (&lt;a href=&#34;https://dzone.com/articles/the-complete-introduction-to-cicd-1&#34;&gt;CI/CD&lt;/a&gt;) environment, where the goal is rapid, automated deployment — and doing this with AMIs (&lt;a href=&#34;https://dzone.com/articles/sboms-in-action-securing-your-golden-amis&#34;&gt;Amazon Machine Images&lt;/a&gt;) ensures that every instance benefits from consistent security updates.&lt;/p&gt;&#xA;&lt;h2&gt;Creating the Golden Image&lt;/h2&gt;&#xA;&lt;p&gt;The first step to securing your EC2 environment is building a Secure Golden Image (SGI)&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;—a pre-configured AMI that serves as the baseline for deploying secure EC2 instances. An SGI should include:&lt;/p&gt;】&lt;p&gt;在具有 &lt;a href=&#34;https://dzone.com/articles/aws-cloud-migration-best-practices-and-pitfalls-to&#34;&gt;AWS 云&lt;/a&gt;工作负载的环境中，采用主动方法漏洞管理涉及从传统的修补转向定期部署更新的安全黄金映像。这种方法非常适合现代持续集成和持续交付 (&lt;a href=&#34;https://dzone.com/articles/the-complete-introduction-to-cicd-1&#34;&gt;CI/CD&lt;/a&gt; ）环境，其目标是快速、自动化部署 - 并使用 AMI 来实现这一点 (&lt;a href=&#34;https://dzone.com/articles/sboms-in-action-secure-your-golden-amis&#34;&gt;Amazon Machine图片&lt;/a&gt;）确保每个实例都受益于一致的安全更新。&lt;/p&gt;&#xA;&lt;h2&gt;创建黄金图像&lt;/h2&gt;&#xA;&lt;p&gt;保护 EC2 环境的第一步是构建安全黄金映像 (SGI)&lt;strong&gt; &lt;/strong&gt; - 一个预配置的 AMI，用作部署安全 EC2 实例的基准。 SGI 应包括：&lt;/p&gt;</description>
      <pubDate>Fri, 18 Oct 2024 16:00:04 +0000</pubDate>
    </item>
    <item>
      <title>【How to Choose a Server Stack at Product Launch】如何在产品发布时选择服务器堆栈</title>
      <link>https://dzone.com/articles/how-to-choose-a-server-stack-at-product-launch</link>
      <description>【&lt;p style=&#34;text-align: left;&#34;&gt;Choosing the perfect server stack for launching a product is a decision that carries a lot of weight. This choice influences not just the initial deployment but the long-term adaptability and efficiency of your app. If you&#39;re a senior developer or leading a team, you shoulder the responsibility of these architecture decisions, sifting through a sea of languages and frameworks to find the perfect fit for your project&#39;s unique needs. Your task here is to make an important choice, one that will hold up as your project evolves and expands.&lt;/p&gt;&#xA;&lt;p style=&#34;text-align: left;&#34;&gt;I am Grigorii Novikov, a Senior Backend Developer with years of experience in sculpting and rolling out software architectures. Throughout my career, I&#39;ve been faced with plenty of critical decisions on server stack selection. Each decision has added layers to my understanding of how to align technology with the requirements of a growing project. In this article, I will share with you some of those hard-earned insights, helping you pick a server stack that will fit your project&#39;s current needs and support its future growth. I invite you to explore with me the ins and outs of making tech decisions that pave the way for success, making sure your project stands on a ground ripe for growth, flexibility, and innovation.&lt;/p&gt;】&lt;p style=&#34;text-align: left;&#34;&gt;选择完美的服务器堆栈来发布产品是一个非常重要的决定。此选择不仅影响初始部署，还影响应用程序的长期适应性和效率。如果您是高级开发人员或领导团队，您将承担这些架构决策的责任，筛选大量语言和框架，找到最适合您项目独特需求的语言和框架。您在这里的任务是做出一个重要的选择，这个选择将随着您的项目的发展和扩展而持续下去。&lt;/p&gt;&#xA;&lt;p style=&#34;text-align: left;&#34;&gt;我是 Grigorii Novikov，一名高级后端开发人员，在塑造和推出软件架构方面拥有多年经验。在我的职业生涯中，我面临着许多有关服务器堆栈选择的关键决策。每个决定都加深了我对如何使技术与不断发展的项目的需求保持一致的理解。在本文中，我将与您分享一些来之不易的见解，帮助您选择适合项目当前需求并支持其未来发展的服务器堆栈。我邀请您与我一起探索制定技术决策的细节，为成功铺平道路，确保您的项目处于成熟的增长、灵活性和创新的基础上。&lt;/p&gt;</description>
      <pubDate>Fri, 18 Oct 2024 11:00:12 +0000</pubDate>
    </item>
    <item>
      <title>【Securing Cloud-Native Applications: A CISO’s Perspective on Broken Access Control】保护云原生应用程序的安全：CISO 对损坏的访问控制的看法</title>
      <link>https://dzone.com/articles/ciso-perspective-securing-cloud-native-applications</link>
      <description>【&lt;p&gt;When we talk about security in cloud-native applications, &lt;strong&gt;broken access control&lt;/strong&gt; remains one of the most dangerous vulnerabilities. The &lt;a href=&#34;https://owasp.org/www-project-top-ten/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;OWASP Top 10&lt;/strong&gt;&lt;/a&gt; lists it as the most prevalent security risk today, and for good reason: the impact of mismanaged permissions can lead to catastrophic outcomes like data breaches or ransomware attacks. For CISOs, addressing broken access control isn&#39;t just a technical challenge—it’s a strategic priority that touches nearly every aspect of an organization’s security posture.&lt;/p&gt;&#xA;&lt;p&gt;As part of my job as the VP of Developer Relations in &lt;a href=&#34;http://Permit.io&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Permit.io&lt;/a&gt;, I consulted with dozens of CISOs and security engineers leaders, from small garage startup founders to Fortune 100 enterprise security staff. This article will try to provide the most comprehensive perspective I gathered from these chats, guiding you in considering broken access control challenges in cloud-native applications.&lt;/p&gt;】&lt;p&gt;当我们谈论云原生应用程序的安全性时，&lt;strong&gt;损坏的访问控制&lt;/strong&gt;仍然是最危险的漏洞之一。 &lt;a href=&#34;https://owasp.org/www-project-top-ten/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;OWASP 前 10 名&lt;/strong&gt;&lt;/a&gt; 列表它是当今最普遍的安全风险，并且有充分的理由：权限管理不当的影响可能会导致数据泄露或勒索软件攻击等灾难性后果。对于首席信息安全官 (CISO) 来说，解决损坏的访问控制不仅仅是一项技术挑战，更是一项战略优先事项，几乎涉及组织安全态势的各个方面。&lt;/p&gt;&#xA;&lt;p&gt;作为 &lt;a href=&#34;http://Permit.io&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Permit.io&lt;/a&gt; 开发者关系副总裁，我咨询了拥有数十位 CISO 和安全工程师领导者，从小型车库初创公司创始人到财富 100 强企业安全人员。本文将尝试提供我从这些聊天中收集到的最全面的观点，指导您考虑云原生应用程序中损坏的访问控制挑战。&lt;/p&gt;</description>
      <pubDate>Fri, 18 Oct 2024 19:00:12 +0000</pubDate>
    </item>
    <item>
      <title>【Solving a Common Dev Grievance: Architecture Documentation】解决常见的开发不满：架构文档</title>
      <link>https://dzone.com/articles/solving-a-common-dev-grievance-thats-more-importan</link>
      <description>【&lt;p&gt;The global developer population is expected to reach &lt;a href=&#34;https://www.statista.com/statistics/627312/worldwide-developer-population/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;28.7 million people by 2024&lt;/a&gt;, surpassing the entire population of Australia.&lt;/p&gt;&#xA;&lt;p&gt;Among such a large group, achieving unanimous agreement on anything is remarkable. Yet, there&#39;s widespread consensus on one point: good technical documentation is crucial and saves considerable time. Some even consider it a cornerstone of engineering success, acting as a vital link between ideas, people, and visions.&lt;/p&gt;】&lt;p&gt;全球开发者人数预计将达到 &lt;a href=&#34;https://www.statista.com/statistics/627312/worldwide-developer-population/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;28.7到 2024 年，人口将达到 100 亿&lt;/a&gt;，超过澳大利亚总人口。&lt;/p&gt;&#xA;&lt;p&gt;在如此大的群体中，在任何事情上达成一致都是了不起的。然而，人们在一点上达成了广泛共识：良好的技术文档至关重要，并且可以节省大量时间。有些人甚至认为它是工程成功的基石，是思想、人员和愿景之间的重要纽带。&lt;/p&gt;</description>
      <pubDate>Fri, 18 Oct 2024 17:00:12 +0000</pubDate>
    </item>
    <item>
      <title>【GitHub Copilot Security and Privacy Concerns: Understanding the Risks and Best Practices】GitHub Copilot 安全和隐私问题：了解风险和最佳实践</title>
      <link>https://dzone.com/articles/github-copilot-security-and-privacy-concerns-under</link>
      <description>【&lt;p&gt;AI-powered code completion tools like &lt;a href=&#34;https://blog.gitguardian.com/crappy-code-crappy-copilot/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;GitHub Copilot&lt;/a&gt;, co-developed by GitHub and OpenAI, likely need no introduction. Developers are rapidly embracing this evolving technology to aid them in their work. Copilot and other Large Language Model (LLM) based coding assistants suggest lines of code and entire functions, saving a lot of time looking up specific formulations or helping scaffold common structures in the code. It is also great for helping a team write documentation.&lt;/p&gt;&#xA;&lt;p&gt;However, is Copilot secure? As beneficial as it may be, it also comes with significant security and privacy concerns that individual developers and organizations must be aware of. As &lt;a href=&#34;https://en.wikipedia.org/wiki/God_Emperor_of_Dune?ref=blog.gitguardian.com&#34; target=&#34;_blank&#34;&gt;Frank Herbert put it in &#34;God Emperor of Dune&lt;/a&gt;&#34; (the 4th book in the Dune saga):&lt;/p&gt;】&lt;p&gt;人工智能驱动的代码完成工具，例如 &lt;a href=&#34;https://blog.gitguardian.com/crappy-code-crappy-copilot/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;GitHub Copilot&lt;/ a&gt;，由 GitHub 和 OpenAI 共同开发，可能不需要介绍。开发人员正在迅速采用这种不断发展的技术来帮助他们的工作。 Copilot 和其他基于大型语言模型 (LLM) 的编码助手会建议代码行和整个函数，从而节省大量查找特定公式或帮助构建代码中常见结构的时间。它也非常适合帮助团队编写文档。&lt;/p&gt;&#xA;&lt;p&gt;但是，Copilot 安全吗？尽管它可能是有益的，但它也带来了个人开发人员和组织必须意识到的重大安全和隐私问题。正如弗兰克·赫伯特在《沙丘神皇》中所说的那样（沙丘传奇的第四本书）：&lt;/p&gt;</description>
      <pubDate>Thu, 17 Oct 2024 18:00:10 +0000</pubDate>
    </item>
    <item>
      <title>【Should You Use AI Code Review Tools?】你应该使用人工智能代码审查工具吗？</title>
      <link>https://dzone.com/articles/should-you-use-ai-code-review-tools</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Artificial intelligence (AI) is entering various industries, offering numerous advantages to fields like software coding and development. Today, many development teams have adopted AI code review tools and noticed how much faster they catch errors and improve code quality. Yet, with any new technology, there are questions about its limitations, especially with security and accuracy.&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;Understanding AI Code Review Tools&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://dzone.com/articles/comparison-of-various-ai-code-generation-tools-ava&#34;&gt;AI coding tools&lt;/a&gt; are software solutions that leverage artificial intelligence to analyze and improve code. Traditionally, code reviews require peers or senior developers to conduct this process manually, but it can be time-consuming and prone to human oversight.&amp;nbsp;&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;人工智能 (AI) 正在进入各个行业，为软件编码和开发等领域提供众多优势。如今，许多开发团队已经采用了人工智能代码审查工具，并注意到它们发现错误和提高代码质量的速度有多快。然而，任何新技术都存在其局限性的问题，特别是在安全性和准确性方面。&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;了解 AI 代码审查工具&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://dzone.com/articles/comparison-of-various-ai-code- Generation-tools-ava&#34;&gt;AI 编码工具&lt;/a&gt;是软件解决方案利用人工智能来分析和改进代码。传统上，代码审查需要同行或高级开发人员手动执行此过程，但这可能非常耗时并且容易受到人为监督。 &lt;/p&gt;</description>
      <pubDate>Thu, 17 Oct 2024 19:00:11 +0000</pubDate>
    </item>
    <item>
      <title>【Web GenAI Microservices Creation: An Overview】Web GenAI 微服务创建：概述</title>
      <link>https://dzone.com/articles/web-genai-microservice-creation</link>
      <description>【&lt;ol&gt;&#xA; &lt;li&gt;This article will show you how to use GenAI from your browser to create and run a microservice in about a minute. Here is what you&#39;ll learn:&amp;nbsp;&lt;/li&gt;&#xA; &lt;li&gt;Provide a &lt;strong&gt;prompt&lt;/strong&gt; to a cloud-based microservice appliance, and you get a system with a running database, a web app, and an API.&lt;/li&gt;&#xA; &lt;li&gt;&lt;strong&gt;Collaborate&lt;/strong&gt; with stakeholders using the web app.&lt;/li&gt;&#xA; &lt;li&gt;&lt;strong&gt;Iterate&lt;/strong&gt; instantly, to get the requirements right.&lt;/li&gt;&#xA; &lt;li&gt;Download the created project, and &lt;strong&gt;customize it in your IDE&amp;nbsp;&lt;/strong&gt;to build out the system using &lt;strong&gt;Python and Rules&lt;/strong&gt; — 40x more concise than code. &amp;nbsp;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;All of this is open source. &amp;nbsp;No runtime or license fees.&lt;/p&gt;&#xA;&lt;h2&gt;Microservices Creation: Get the Requirements Right&lt;/h2&gt;&#xA;&lt;p&gt;We&#39;ve all seen many projects fail due to difficulties in getting the requirements right. Let&#39;s explore that.&lt;/p&gt;】&lt;ol&gt;&#xA; &lt;li&gt;本文将向您展示如何在浏览器中使用 GenAI 在大约一分钟内创建和运行微服务。您将学到以下内容：&lt;/li&gt;&#xA; &lt;li&gt;向基于云的微服务设备提供&lt;strong&gt;提示&lt;/strong&gt;，您将获得一个包含正在运行的数据库、网络应用和 API 的系统。&lt;/li&gt;&#xA; &lt;li&gt;使用网络应用与利益相关者&lt;strong&gt;协作&lt;/strong&gt;。&lt;/li&gt;&#xA; &lt;li&gt;立即迭代&lt;/strong&gt;，以获得正确的需求。&lt;/li&gt;&#xA; &lt;li&gt;下载创建的项目，并&lt;strong&gt;在 IDE 中对其进行自定义&lt;/strong&gt;，以使用 &lt;strong&gt;Python 和规则&lt;/strong&gt;构建系统 - 比代码简洁 40 倍。  &lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;所有这些都是开源的。  没有运行时间或许可费用。&lt;/p&gt;&#xA;&lt;h2&gt;微服务创建：满足需求&lt;/h2&gt;&#xA;&lt;p&gt;我们都见过许多项目由于难以满足正确的需求而失败。让我们来探讨一下。&lt;/p&gt;</description>
      <pubDate>Thu, 17 Oct 2024 17:00:09 +0000</pubDate>
    </item>
    <item>
      <title>【How to Use Self Join and With Clause in Oracle】如何在 Oracle 中使用自连接和 With 子句</title>
      <link>https://dzone.com/articles/how-to-use-with-clause-in-oracle</link>
      <description>【&lt;p style=&#34;text-align: left;&#34;&gt;The Oracle WITH clause is one of the most commonly used techniques to simplify the SQL source code and improve performance. In Oracle SQL, the &#39;WITH&#39; clause also known as a &lt;a href=&#34;https://dzone.com/articles/sql-cte-how-to-master-it-in-one-sitting-with-easy&#34;&gt;Common Table Expression&lt;/a&gt; (CTE) is a powerful tool which is also used to enhance the code readability.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p style=&#34;text-align: left;&#34;&gt;WITH is commonly used to define temporary named result sets, also referred to as subqueries or CTEs as defined earlier. These temporary named sets can be referenced multiple times within the main SELECT SQL query. The CTEs are like virtual tables and are very helpful in organizing and modularizing the SQL code.&lt;/p&gt;】&lt;p style=&#34;text-align: left;&#34;&gt;Oracle WITH 子句是简化 SQL 源代码和提高性能的最常用技术之一。在 Oracle SQL 中，“WITH”子句也称为 &lt;a href=&#34;https://dzone.com/articles/sql-cte-how-to-master-it-in-one-sitting-with-easy&#34; &gt;通用表表达式&lt;/a&gt;（CTE）是一个强大的工具，也可以用来增强代码的可读性。 &lt;/p&gt;&#xA;&lt;p style=&#34;text-align: left;&#34;&gt;WITH 通常用于定义临时命名结果集，也称为子查询或前面定义的 CTE。这些临时命名集可以在主 SELECT SQL 查询中多次引用。 CTE 就像虚拟表一样，对于组织和模块化 SQL 代码非常有帮助。&lt;/p&gt;</description>
      <pubDate>Fri, 18 Oct 2024 18:00:08 +0000</pubDate>
    </item>
  </channel>
</rss>