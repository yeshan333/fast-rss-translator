<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【How to Know an Autonomous Driver Is Safe and Reliable?】如何知道自主驾驶员是安全可靠的？</title>
      <link>https://dzone.com/articles/autonomous-driver-safety-and-reliability</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;The race to deploy fully autonomous vehicles (AVs) is accelerating. Waymo has already reached over 250k trips per week while Tesla and Zoox are ramping up. The key question for scaling is not “&lt;em&gt;Can AVs drive?&lt;/em&gt;” but “&lt;em&gt;How to know AVs are safe and reliable at scale?&lt;/em&gt;”&amp;nbsp;&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;As developers, we live by a simple creed: if it’s not tested, it’s broken. We write unit tests, integration tests, and end-to-end tests to gain confidence. But what happens when the &#39;test environment&#39; is the unpredictable chaos of a public road, where an edge case can have severe repercussions?&lt;/p&gt;】&lt;p dir =“ ltr”&gt;部署完全自动驾驶汽车（AV）的竞赛正在加速。 Waymo每周已经超过25万次旅行，而特斯拉和Zoox正在加剧。扩展的关键问题不是“ &lt;em&gt;可以驱动？&lt;/em&gt;”，而是“ &lt;em&gt;如何知道AVS安全可靠？&lt;/em&gt;” &lt;/em&gt; &lt;/em&gt; &lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;作为开发人员，我们以一个简单的信条生活：如果未进行测试，它会破裂。我们编写单元测试，集成测试和端到端测试，以获得信心。但是，当“测试环境”是公共道路上不可预测的混乱时，会发生什么情况，那里的边缘案可能会产生严重的影响？&lt;/p&gt; &lt;/p&gt;</description>
      <pubDate>Wed, 13 Aug 2025 13:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【I Vibe Coded a PC Builder Tool Using Grok AI: Here’s What I Learned Along the Way】我使用grok ai氛围了PC构建器工具：这是我在此过程中学到的东西</title>
      <link>https://dzone.com/articles/vibe-coding-pc-builder-tool-grok-ai</link>
      <description>【&lt;p&gt;&lt;span&gt;I&#39;m sure you&#39;ve heard of AI, and its sidekick: &lt;em&gt;&lt;strong&gt;vibe coding&lt;/strong&gt;&lt;/em&gt;. Yeah, it&#39;s a thing right now. The question is: &lt;em&gt;Are you using it to create solutions to real-world problems and get paid for the value you provide&lt;/em&gt;? This is the story of how I leveraged the power of Grok AI and vibe coded my dream app: a PC Builder tool.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;span&gt;Back in October 2021, I needed to build a tool that helps ordinary people build a PC without thinking of the technicalities involved. I had a blog I started in 2018, built around the PC hardware niche, and the traffic was failing (thanks to Google&#39;s incessant updates).&amp;nbsp;&lt;/span&gt;&lt;/p&gt;】&lt;p&gt; &lt;span&gt;我敢肯定您已经听说过AI及其同伴：&lt;em&gt; &lt;strong&gt; vibe编码&lt;/strong&gt; &lt;/em&gt;。是的，现在是一回事。问题是：&lt;em&gt;您是否正在使用它来为现实世界中的问题创建解决方案并为您提供的价值付费&lt;/em&gt;吗？这是我如何利用Grok AI和Vibe的力量编码我的Dream App：PC Builder工具的故事。 &lt;/span&gt; &lt;/p&gt;&#xA;&lt;p&gt; &lt;span&gt;早在2021年10月，我需要构建一个工具，该工具可以帮助普通人建造PC而不考虑所涉及的技术。我在2018年开始了一个博客，该博客围绕PC硬件利基市场构建，流量失败了（由于Google不断的更新）。 &lt;/span&gt; &lt;/p&gt;</description>
      <pubDate>Wed, 13 Aug 2025 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Migrating from Monolith to Microservices Using PHP: A Step-by-Step Guide】使用PHP从整体迁移到微服务：逐步指南</title>
      <link>https://dzone.com/articles/migrating-from-monolith-to-microservices-using-php</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;As businesses scale, monolithic architectures often start to crack under pressure. What once seemed like a simple, all-in-one structure turns into a bottleneck. The results?&amp;nbsp;&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Slow down releases, complicated bug fixes, and making even minor updates feel risky.&lt;/p&gt;】&lt;p dir =“ ltr”&gt;作为企业规模，整体建筑通常开始在压力下开始破裂。曾经看起来像是一个简单的，多合一的结构变成了瓶颈。结果？ &lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;放慢释放，复杂的错误修复，甚至使次要更新都危险。&lt;/p&gt;</description>
      <pubDate>Wed, 13 Aug 2025 17:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Database Choices for Real-World Applications Cheat Sheet】现实世界应用程序的数据库选择备忘单</title>
      <link>https://dzone.com/articles/choosing-the-right-database-for-your-application</link>
      <description>【&lt;p&gt;Choosing the right database is a crucial decision when designing software systems. While functional requirements can be met with any database, the real challenge lies in fulfilling non-functional requirements (NFRs) such as scalability, query performance, consistency, and data structure suitability. The database choice can significantly impact system efficiency, especially in large-scale applications.&lt;/p&gt;&#xA;&lt;p&gt;This article presents a comprehensive, structured approach to selecting the most suitable database for diverse real-world applications. It categorizes &lt;a href=&#34;https://dzone.com/databases&#34;&gt;database&lt;/a&gt; choices based on data structure (structured, semi-structured, or unstructured), query complexity (simple lookups, complex joins, full-text search), and scalability requirements (small-scale applications to distributed, high-volume systems). By understanding these key factors, developers and architects can make informed decisions, ensuring optimal performance, reliability, and efficiency. The guide explores SQL and NoSQL databases, caching solutions, time-series databases, search engines, and data warehousing, providing practical insights into how different database technologies best serve specific use cases.&lt;/p&gt;】&lt;p&gt;在设计软件系统时，选择正确的数据库是一个至关重要的决定。尽管可以使用任何数据库满足功能要求，但真正的挑战在于满足非功能要求（NFR），例如可扩展性，查询性能，一致性和数据结构的适用性。数据库选择可以显着影响系统效率，尤其是在大规模应用中。&lt;/p&gt;&#xA;&lt;p&gt;本文提出了一种全面的结构化方法，用于选择最合适的数据库，以适用于不同的现实世界应用程序。它将基于数据结构（结构化，半结构化或非结构化的），查询复杂性（简单查找，复杂的连接，完整的搜索），完整的搜索搜索）和小尺度应用（小规模的应用程序（小规模应用程序）（针对高尺度的应用程序），基于&lt;a href =“ https://dzone.com/databases”&gt;数据库&lt;/a&gt;选择。通过了解这些关键因素，开发人员和建筑师可以做出明智的决定，确保最佳绩效，可靠性和效率。该指南探讨了SQL和NOSQL数据库，缓存解决方案，时间序列数据库，搜索引擎和数据仓库，从而提供了对不同数据库技术如何最好地服务于特定用例的实际见解。&lt;/p&gt;。&lt;/p&gt;</description>
      <pubDate>Wed, 13 Aug 2025 19:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Designing Data Pipelines for Real-World Systems: A Guide to Cleaning and Validating Messy Data】设计现实世界系统的数据管道：清洁和验证数据的指南</title>
      <link>https://dzone.com/articles/building-robust-sanitization-pipelines-five-steps</link>
      <description>【&lt;p&gt;Many software systems involve processing a large volume of customer data every day. Access to customer data demands careful handling and responsibility. Maintaining data integrity is of utmost importance, particularly in highly regulated spaces where accurate data is necessary to deliver the highest standard of output. Additionally, since any data-driven decision is only as accurate as the data it’s based on, clean data is key to making well-informed business decisions.&lt;/p&gt;&#xA;&lt;p&gt;This guide dives into how we can sanitize raw data so it remains consistent, clean, and accurate within our own organizations.&lt;/p&gt;】&lt;p&gt;许多软件系统涉及每天处理大量客户数据。访问客户数据需要仔细的处理和责任。保持数据完整性至关重要，尤其是在高度调节的空间中，在提供最高输出标准的必要准确数据的空间中。此外，由于任何数据驱动的决策仅与基于数据一样准确，因此干净的数据是做出明智的业务决策的关键。&lt;/p&gt;&#xA;&lt;p&gt;本指南深入了解我们如何对原始数据进行消毒，以使其在我们自己的组织中保持一致，清洁和准确。&lt;/p&gt;</description>
      <pubDate>Wed, 13 Aug 2025 18:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【From Red to Resolution: How I Used AI to Diagnose and Recommend Fixes for Flaky Tests】从红色到分辨率：我如何使用AI诊断并推荐修复片状测试</title>
      <link>https://dzone.com/articles/ai-flaky-test-diagnosis-and-fix-recommendations</link>
      <description>【&lt;h2 dir=&#34;ltr&#34;&gt;Introduction: The Flaky-Test Dilemma&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Nothing interrupts a CI/CD pipeline quite like an intermittent test failure. Over time, these “flaky” tests erode confidence in automation and become a drag on velocity.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Industry data confirms the pain: a 2023 survey found that flaky tests account for nearly&amp;nbsp;5% of all test failures, costing organizations up to&amp;nbsp;2% of total development time&amp;nbsp;each month [1]. When tests that once guarded quality instead generate noise, developers learn to ignore failures, and genuine defects can slip through unnoticed.&lt;/p&gt;】&lt;h2 dir =“ ltr”&gt;简介：片状测试困境&lt;/h2&gt;&#xA;&lt;p dir =“ ltr”&gt;没有什么能像间歇性测试故障那样中断CI/CD管道。随着时间的流逝，这些“片状”测试侵蚀了自动化的信心并成为速度的阻力。&lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;行业数据证实了痛苦：2023年的一项调查发现，片状测试占所有测试失败的近5％，使组织每月高达总开发时间的2％[1]。当曾经守护质量的测试会产生噪音时，开发人员会学会忽略故障，而真正的缺陷可能会通过未注意到。&lt;/p&gt;</description>
      <pubDate>Wed, 13 Aug 2025 15:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Software Security Treat or Threat? Leveraging SBOMs to Control Your Supply Chain Chaos [Infographic]】软件安全待遇还是威胁？利用SBOM控制您的供应链混乱[信息图]</title>
      <link>https://dzone.com/articles/supply-chain-security-sbom-infographic</link>
      <description>【&lt;p style=&#34;font-size: 17px;&#34;&gt;&lt;em&gt;Editor&#39;s Note: The following is an article written for and published in DZone&#39;s 2025 Trend Report,&amp;nbsp;&lt;/em&gt;&lt;a href=&#34;https://dzone.com/link/2025-tr-security-contributor-article&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;Software Supply Chain Security: Enhancing Trust and Resilience Across the Software Development Lifecycle&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Software supply chain security is on the rise as systems advance and hackers level up their tactics. Gone are the days of fragmented security checkpoints and analyzing small pieces of the larger software security puzzle. Now, &lt;strong&gt;software bills of materials&lt;/strong&gt; (SBOMs) are becoming the required norm instead of an afterthought. So the question is: &lt;em&gt;Are supply chains and SBOMs a sweet pairing or a sticky solution?&lt;/em&gt;&lt;/p&gt;】&lt;p style =“ font-size：17px;”&gt; &lt;em&gt;编辑注：以下是为Dzone的2025年2025年趋势报告编写并发表的文章，&lt;/em&gt; &lt;a href =“ https://dzone.com/link/link/link/link/2025-security-contribity-contributor-contributor-artilecutor-article- sepusence”增强软件开发生命周期的信任和韧性&lt;/em&gt; &lt;/a&gt; &lt;em&gt;。&lt;/em&gt; &lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;随着系统的进步和黑客升级其战术，软件供应链安全正在上升。零散的安全检查点的日子已经一去不复返了，并分析了较大的软件安全难题的小部分。现在，&lt;strong&gt;软件材料清单&lt;/strong&gt;（SBOM）已成为所需的规范，而不是事后想法。因此，问题是：&lt;em&gt;供应链和SBOM是甜蜜的配对或粘性解决方案吗？&lt;/em&gt; &lt;/p&gt;</description>
      <pubDate>Wed, 13 Aug 2025 14:30:00 +0000</pubDate>
    </item>
    <item>
      <title>【Scheduler-Agent-Supervisor Pattern: Reliable Task Orchestration in Distributed Systems】调度程序 - 代理 - 统治者模式：分布式系统中的可靠任务编排</title>
      <link>https://dzone.com/articles/scheduler-agent-supervisor-pattern-reliable-task-o</link>
      <description>【&lt;p&gt;The Scheduler-Agent-Supervisor (SAS) pattern is a powerful architectural approach for managing distributed, asynchronous, and long-running tasks in a reliable and scalable way. It is particularly well-suited for systems where work needs to be orchestrated across many independent units—each capable of failing and retrying—while maintaining &lt;a href=&#34;https://dzone.com/articles/observability-pillars-exploring-logs-metrics-and-t&#34;&gt;observability&lt;/a&gt; and &lt;a href=&#34;https://dzone.com/articles/importance-of-idempotency-in-distributed-systems&#34;&gt;idempotency&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;This pattern divides responsibilities into three well-defined roles:&lt;/p&gt;】&lt;p&gt; Scheduler-Agent-Supervisor（SAS）模式是一种强大的体系结构方法，用于以可靠且可扩展的方式管理分布式，异步和长期运行的任务。对于需要在许多独立单位进行编排的系统（能够失败和重演）时，它特别非常适合，同时保持&lt;a href =“ https：//dzone.com/articles/articles/observiability-pillars-pillars-pillars-pillars-ecploring-logs-logs-logs-logs-metrics-metrics-metrics-and-metrics-and-t------&gt; t”&gt;可观察性&lt;/a&gt;和&lt;a&gt;和&lt;a&gt;和&lt;A&gt; href =“ https://dzone.com/articles/importance-of-idempotency-in-distributed-systems”&gt; idempotency &lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;这种模式将责任分为三个明确的角色：&lt;/p&gt;</description>
      <pubDate>Wed, 13 Aug 2025 20:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Creating Serverless Applications With AWS Lambda: A Step-by-Step Guide】使用AWS lambda创建无服务器应用程序：逐步指南</title>
      <link>https://dzone.com/articles/build-serverless-app-aws-lambda-api-gateway</link>
      <description>【&lt;p data-end=&#34;582&#34; data-start=&#34;211&#34;&gt;&lt;a href=&#34;https://dzone.com/articles/how-to-use-serverless-architecture&#34;&gt;Serverless architecture&lt;/a&gt; has reshaped application development by eliminating the need for direct infrastructure management, allowing developers to focus purely on writing and deploying code. AWS Lambda, one of the most widely used serverless computing services, lets you run backend code without provisioning servers. This tutorial will guide you through creating a simple serverless application using AWS Lambda and API Gateway.&lt;/p&gt;&#xA;&lt;h2 data-end=&#34;621&#34; data-start=&#34;584&#34;&gt;&lt;strong data-end=&#34;621&#34; data-start=&#34;588&#34;&gt;What Is Serverless Computing?&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p data-end=&#34;214&#34; data-start=&#34;0&#34;&gt;&lt;a href=&#34;https://dzone.com/articles/go-serverless-unleash-next-gen-computing&#34;&gt;Serverless computing&lt;/a&gt; allows your code to execute in response to events such as HTTP requests or file uploads, without the need to manage servers. With AWS Lambda, you are billed only for the time your code actually runs.&lt;/p&gt;】&lt;p data-end=&#34;582&#34; data-start=&#34;211&#34;&gt;&lt;a href=&#34;https://dzone.com/articles/how-to-use-serverless-architecture&#34;&gt;Serverless architecture&lt;/a&gt; has reshaped application development by eliminating the need for direct infrastructure management, allowing developers to focus purely on writing and deploying code. AWS Lambda是使用最广泛的无服务器计算服务之一，可让您在不配备服务器的情况下运行后端代码。本教程将指导您使用AWS Lambda和API网关创建一个简单的无服务器应用程序。&lt;/p&gt;&#xA;&lt;h2 data-end =“ 621” data-start =“ 584”&gt; &lt;strong data-end =“ 621” data-start =“ 588”&gt;什么是无服务器计算？&lt;/strong&gt; &lt;/h2&gt;&#xA;&lt;p data-end =“ 214” data-start =“ 0”&gt; &lt;a href =“ https://dzone.com/articles/go-serverless-unleash-unleash-unleash-next-gen-computing”&gt; serverless Computing &lt;/a&gt;允许您的代码允许您的代码对事件进行响应，例如HTTP请求请求或File file lof lof lodalloads noce noce noce necress ofers necress servers servers。使用AWS lambda，您只会在代码实际运行时收取费用。&lt;/p&gt;</description>
      <pubDate>Wed, 13 Aug 2025 14:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Orchestrating Multi-Agents: Unifying Fragmented Tools into Coordinated Workflows】精心编排的多代理：将零散的工具统一为协调的工作流程</title>
      <link>https://dzone.com/articles/orchestrating-multi-agents-coordinated-workflows</link>
      <description>【&lt;h2 data-pm-slice=&#34;1 1 []&#34;&gt;Fragmented Tools&lt;/h2&gt;&#xA;&lt;p&gt;Development teams are deploying specialized AI tools across different vendors, architectures, and environments. These tools exist in silos, creating operational complexity and limiting their collective potential.&lt;/p&gt;&#xA;&lt;p&gt;As AI adoption accelerates and the number of deployed agents multiplies, a new challenge emerges: how do we coordinate these specialized tools to work together effectively?&lt;/p&gt;】&lt;h2 data-pm-slice =“ 1 1 []”&gt;零散的工具&lt;/h2&gt;&#xA;&lt;p&gt;开发团队正在跨不同供应商，架构和环境部署专业的AI工具。这些工具存在于孤岛中，创造了运营复杂性并限制了它们的集体潜力。&lt;/p&gt;&#xA;&lt;p&gt;随着AI采用的加速和部署的代理的数量，出现了一个新的挑战：我们如何协调这些专业工具以有效地合作？&lt;/p&gt;</description>
      <pubDate>Wed, 13 Aug 2025 12:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>