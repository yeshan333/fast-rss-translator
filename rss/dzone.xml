<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Bring Your Own Feed (BYOF): An Engineer&#39;s Guide to Effective Threat Intelligence】带上自己的饲料（BYOF）：有效威胁情报的工程师指南</title>
      <link>https://dzone.com/articles/bring-your-own-feed-guide-threat-intelligence</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;As software continues to eat the world, and AI becomes a force multiplier for attackers, those of us tasked with defending our systems have to be more focused, deliberate, and proactive in our approaches. We have to rise up to meet this onslaught of new cyber threats.&lt;br&gt;&lt;br&gt;&#xA; In this article, we’ll look at &lt;strong&gt;threat intelligence&lt;/strong&gt;, what it is and why it’s important, how &lt;strong&gt;threat intelligence feeds&lt;/strong&gt; can help us in our daily defense, and how we can create &lt;strong&gt;custom threat intelligence feeds&lt;/strong&gt; that match our organizations’ specific needs.&amp;nbsp;&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;Understanding Threat Intelligence&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://dzone.com/articles/5-threat-intelligence-trends&#34;&gt;Threat intelligence&lt;/a&gt; is all the contextual information we need about potential or active cybersecurity threats to help us understand risks. These pieces of information are called &lt;strong&gt;threat intelligence indicators&lt;/strong&gt;. Examples include malicious IPs, domains, malware hashes, and attacker tactics.&amp;nbsp;&lt;/p&gt;】&lt;p dir =“ ltr”&gt;随着软件继续吞噬世界，AI成为攻击者的力量乘数，我们负责捍卫系统的人必须更加集中，故意和积极主动。我们必须站起来才能满足这种新的网络威胁的冲击。&lt;br&gt; &lt;br&gt;&#xA; 在本文中，我们将研究&lt;strong&gt;威胁智能&lt;/strong&gt;，它是什么以及为什么它很重要，&lt;strong&gt;威胁智能供给&lt;/strong&gt;如何帮助我们进行日常防御，以及我们如何创建&lt;strong&gt;自定义威胁智能feed &lt;/strong&gt; &lt;/strong&gt;符合我们组织的特定需求。 &lt;/p&gt;&#xA;&lt;h2 dir =“ ltr”&gt;了解威胁智能&lt;/h2&gt;&#xA;&lt;p dir =“ ltr”&gt; &lt;a href =“ https://dzone.com/articles/5-threat-intelligence-trends”&gt;威胁智能&lt;/a&gt;是我们需要的所有上下文信息，我们需要有关潜在或积极的网络安全威胁，以帮助我们了解风险。这些信息称为&lt;strong&gt;威胁智能指标&lt;/strong&gt;。示例包括恶意IP，域，恶意软件和攻击者策略。 &lt;/p&gt;</description>
      <pubDate>Wed, 30 Jul 2025 15:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Mastering Agile: Principles, Practices, and Real-World Insights】掌握敏捷：原则，实践和现实见解</title>
      <link>https://dzone.com/articles/agile-principles-practices-real-world-insights</link>
      <description>【&lt;p&gt;When I first entered the world of technology, projects followed a very traditional path: rigid timeliness, heavy documentation, and little room for change once requirements were locked in. While this approach brought predictability, it often came at the cost of agility and customer responsiveness. That all changed when I was introduced to Agile.&lt;/p&gt;&#xA;&lt;p&gt;In the digital-first world, where customers need to adapt at a rapid pace and technology advances at a breakneck speed, software development teams require more than technical skills — they need agility. Agile has emerged as the go-to methodology for today&#39;s software teams who wish to stay competitive, responsive, and user-friendly.&lt;/p&gt;】&lt;p&gt;当我第一次进入技术世界时，项目遵循了一条非常传统的道路：一旦锁定了要求，僵化的及时性，大量的文档和更改的空间。尽管这种方法带来了可预测性，但通常以敏捷性和客户响应的成本来实现。当我被引入敏捷时，一切都改变了。&lt;/p&gt;&#xA;&lt;p&gt;在数字优先的世界中，客户需要以惊人的速度适应快速的速度和技术的进步，软件开发团队需要的不仅仅是技术技能 - 他们需要敏捷性。对于希望保持竞争力，响应式和用户友好的当今软件团队来说，Agile已成为当今的软件团队的首选方法。&lt;/p&gt;</description>
      <pubDate>Wed, 30 Jul 2025 14:00:06 +0000</pubDate>
    </item>
    <item>
      <title>【Immutable Objects Using Record in Java】使用Java中的记录不变的对象</title>
      <link>https://dzone.com/articles/immutable-objects-using-record-in-java</link>
      <description>【&lt;p&gt;It is often useful to have objects that, once created, don&#39;t change their content. To see a complete description on how to build such class, you can read my previous article &#34;&lt;a href=&#34;https://dzone.com/articles/immutable-objects-in-java&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Immutable Objects in Java&lt;/a&gt;&#34;.&lt;/p&gt;&#xA;&lt;p&gt;Let’s imagine we want to build a &lt;code data-end=&#34;374&#34; data-start=&#34;361&#34;&gt;PersonClass&lt;/code&gt; with two fields: &lt;code data-end=&#34;403&#34; data-start=&#34;392&#34;&gt;firstName&lt;/code&gt; and &lt;code data-end=&#34;418&#34; data-start=&#34;408&#34;&gt;lastName&lt;/code&gt;. To create immutable instances, this class must:&lt;/p&gt;】&lt;p&gt;拥有一旦创建的对象，不要更改其内容通常是有用的。要查看有关如何构建此类课程的完整说明，您可以阅读我的上一篇文章“ &lt;a href =” https://dzone.com/articles/immmutable-objects-in rel =“ noopener noreferrer” are =“ noopener noreferrer” target =“ _ _ _ black”&gt; java &lt;/a&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt;。&#xA;&lt;p&gt;Let’s imagine we want to build a &lt;code data-end=&#34;374&#34; data-start=&#34;361&#34;&gt;PersonClass&lt;/code&gt; with two fields: &lt;code data-end=&#34;403&#34; data-start=&#34;392&#34;&gt;firstName&lt;/code&gt; and &lt;code data-end=&#34;418&#34; data-start=&#34;408&#34;&gt;lastName&lt;/code&gt;.要创建不变的实例，此类必须：&lt;/p&gt;</description>
      <pubDate>Wed, 30 Jul 2025 20:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Building Reliable Experimentation Systems: From Assignment to Decision Quality】建筑可靠的实验系统：从分配到决策质量</title>
      <link>https://dzone.com/articles/building-reliable-experimentation-systems</link>
      <description>【&lt;p&gt;Running experiments in a high-velocity marketplace environment involves a range of real-world challenges — from sample imbalance and session leakage to assignment logic and infrastructure limitations. This paper outlines hands-on practices used to improve experimentation reliability and decision-making speed. It highlights how assignment methods, cross-functional alignment, and strategic analysis play a critical role in producing valid, actionable results at scale.&lt;/p&gt;&#xA;&lt;h2&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/data-engineering-for-product-experimentation&#34;&gt;Experimentation&lt;/a&gt; plays a central role in product development for large-scale marketplaces. Rapid iteration depends on the ability to validate features, user experiences, and optimizations with measurable impact.&lt;/p&gt;】&lt;p&gt;在高速市场环境中进行实验涉及一系列现实挑战 - 从样本不平衡和会话泄漏到分配逻辑和基础设施限制。本文概述了用于提高实验可靠性和决策速度的实践实践。 It highlights how assignment methods, cross-functional alignment, and strategic analysis play a critical role in producing valid, actionable results at scale.&lt;/p&gt;&#xA;&lt;h2&gt;简介&lt;/h2&gt;&#xA;&lt;p&gt; &lt;a href =“ https://dzone.com/articles/data-eendeering-for-product-permientation”&gt;实验&lt;/a&gt;在大规模市场的产品开发中起着核心作用。快速迭代取决于验证功能，用户体验和具有可测量影响的优化的能力。&lt;/p&gt;</description>
      <pubDate>Wed, 30 Jul 2025 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Should You Switch to a Monorepo? A Developer’s No-Fluff Guide】您应该切换到monorepo吗？开发人员的无偿指南</title>
      <link>https://dzone.com/articles/should-you-switch-to-a-monorepo-developers-guide</link>
      <description>【&lt;h2 dir=&#34;ltr&#34;&gt;Monorepo Hype or Real Engineering Value?&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;The attention monorepos have garnered is no revelation. Meta, Google, Shopify, and Uber use them. Impressive, right?&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;But hold on, just because the big boys are using it does not mean it is right for the rest of us. Like every other architectural decision, any attempt at adopting a monorepo has buzzes and pitfalls.&lt;/p&gt;】&lt;h2 dir =“ ltr”&gt; monorepo Hype还是真正的工程值？&lt;/h2&gt;&#xA;&lt;p dir =“ ltr”&gt; Monorepos引起的注意不是启示。 Meta，Google，Shopify和Uber使用它们。令人印象深刻，对&lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;，但要坚持下去，只是因为大男孩正在使用它并不意味着它适合我们其他人。像其他所有建筑决定一样，任何尝试采用Monorepo的尝试都有嗡嗡声和陷阱。&lt;/p&gt;</description>
      <pubDate>Wed, 30 Jul 2025 13:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【The Developer&#39;s Guide to Cloud Security Career Opportunities】开发人员的云安全职业机会指南</title>
      <link>https://dzone.com/articles/the-developers-guide-to-cloud-security-career-oppo</link>
      <description>【&lt;p&gt;Your organization&#39;s entire infrastructure moved to the cloud last year, but your security team is still thinking like it&#39;s 2015. They&#39;re applying traditional network security controls to cloud environments, creating bottlenecks that slow down your deployments and leave massive security gaps. Meanwhile, you&#39;re getting blamed when security incidents happen, even though you never had input on the security architecture in the first place.&lt;/p&gt;&#xA;&lt;p&gt;If this sounds familiar, you&#39;re not alone. The cloud security skills gap is creating unprecedented opportunities for developers who understand both sides of the equation. Organizations desperately need professionals who can code secure applications AND understand cloud infrastructure security. The question isn&#39;t whether you should consider cloud security — it&#39;s how quickly you can position yourself to take advantage of these opportunities.&lt;/p&gt;】&lt;p&gt;您的组织的整个基础架构去年移至云，但是您的安全团队仍在思考2015年。他们将传统的网络安全控制应用于云环境，创建瓶颈，从而减慢您的部署并留下巨大的安全空白。同时，即使您首先从未在安全架构上输入安全事件时，您也会受到指责。&lt;/p&gt;&#xA;&lt;p&gt;If this sounds familiar, you&#39;re not alone.云安全技能差距正在为了解方程式双方的开发人员创造前所未有的机会。组织迫切需要可以编码安全应用程序并了解云基础架构安全性的专业人员。问题不是您是否应该考虑云安全性 - 这是您可以将自己定位得如何利用这些机会。&lt;/p&gt;</description>
      <pubDate>Wed, 30 Jul 2025 12:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Disaster Recovery Risks and Solutions】灾难恢复风险和解决方案</title>
      <link>https://dzone.com/articles/disaster-recovery-risks-and-solutions</link>
      <description>【&lt;h2&gt;Understanding Disaster Recovery in Data Management&lt;/h2&gt;&#xA;&lt;p&gt;Disaster recovery (DR) is a structured plan designed to restore critical systems, applications, and data in the event of disruptions.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;For data analysts, DR is the difference between seamless access to information and complete analytical paralysis. When data disappears or becomes corrupted, decision-making halts, reports become unreliable, and entire strategies can crumble.&lt;/p&gt;】&lt;H2&gt;了解数据管理中的灾难恢复&lt;/h2&gt;&#xA;&lt;p&gt;灾难恢复（DR）是一项结构化计划，旨在在中断时恢复关键的系统，应用程序和数据。 &lt;/p&gt;&#xA;&lt;p&gt;对于数据分析师来说，DR是无缝获取信息与完整分析瘫痪之间的差异。当数据消失或损坏时，决策停止，报告变得不可靠，整个策略可能会崩溃。&lt;/p&gt;</description>
      <pubDate>Wed, 30 Jul 2025 17:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Domain-Driven-Design With JPA: A Practical Guide】由JPA的域驱动设计：实用指南</title>
      <link>https://dzone.com/articles/domain-driven-design-with-jpa-a-practical-guide</link>
      <description>【&lt;div draggable=&#34;false&#34;&gt;&#xA; &lt;a href=&#34;https://dzone.com/refcardz/getting-started-domain-driven&#34;&gt;Domain-Driven Design&lt;/a&gt; (DDD) is a powerful approach to software development that emphasizes the importance of the domain and its logic. However, propagating it to the database entity design is not a usual habit and can be quite tricky. This article explores the principles and implementation strategies of DDD with Java Persistence API (JPA), offering practical insights for developers.&#xA;&lt;/div&gt;&#xA;&lt;h2 draggable=&#34;false&#34;&gt;Some Codebase Context&lt;/h2&gt;&#xA;&lt;div draggable=&#34;false&#34;&gt;&#xA; In the following chapters, we &lt;strong&gt;consider the project as&amp;nbsp;&lt;/strong&gt;&lt;a href=&#34;https://dzone.com/articles/monolithic-vs-microservices-architecture-key-differences&#34;&gt;&lt;strong&gt;monolithic&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;, but split into several modules&lt;/strong&gt; (Maven ones), each one dealing with a sub-domain of the backend. No dependency exists between them, at least no entity-related ones, to respect the Single Responsibility Principle (SRP) that goes along with DDD. Thus, the idea is to make the database entities of each sub-domain cohabitate with other sub-domain entities while sharing a single database schema. As a consequence, the entities will kind of overlap, but without being tangled altogether. Hence, to be aligned with DDD and maintain proper domain boundaries and responsibilities, the key idea is to look at them as being some facets of the database tables.&#xA;&lt;/div&gt;&#xA;&lt;h2 draggable=&#34;false&#34;&gt;The Core Principles&lt;/h2&gt;&#xA;&lt;p&gt;The very main principle is to apply &lt;a href=&#34;https://dzone.com/articles/the-most-important-rule-in-software&#34;&gt;Single Responsibility Principle&lt;/a&gt; (SRP) for writing data: only one sub-domain must be in charge of writing into a column of the database. Other sub-domains will either not consider the column or only read it.&lt;/p&gt;&#xA;&lt;p&gt;The second principle is to allow read overlap: several domains may access the same column in read-only mode.&lt;/p&gt;】&lt;div draggable =“ false”&gt;&#xA; &lt;a href =“ https://dzone.com/refcardz/getting-started-domain-drive”&gt; domain-drive design &lt;/a&gt;（ddd）是一种强大的软件开发方法，强调了域及其逻辑的重要性。但是，将其传播到数据库实体设计并不是通常的习惯，并且可能非常棘手。本文探讨了DDD与Java Persistence API（JPA）的原理和实施策略，为开发人员提供了实用的见解。&#xA;&lt;/div&gt;&#xA;&lt;h2 draggable =“ false”&gt;某些代码库上下文&lt;/h2&gt;&#xA;&lt;div draggable =“ false”&gt;&#xA; In the following chapters, we &lt;strong&gt;consider the project as &lt;/strong&gt;&lt;a href=&#34;https://dzone.com/articles/monolithic-vs-microservices-architecture-key-differences&#34;&gt;&lt;strong&gt;monolithic&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;, but split into several modules&lt;/strong&gt; (Maven ones), each one dealing with a sub-domain of the backend.它们之间没有依赖性，至少没有与实体相关的依赖性，以尊重与DDD一起使用的单个责任原则（SRP）。因此，这个想法是使每个子域的数据库实体在共享单个数据库架构的同时与其他子域实体同居。结果，实体会重叠，但不会完全纠结。因此，要与DDD保持一致并保持适当的领域边界和职责，关键思想是将它们视为数据库表的某些方面。&#xA;&lt;/div&gt;&#xA;&lt;h2 draggable=&#34;false&#34;&gt;The Core Principles&lt;/h2&gt;&#xA;&lt;p&gt;主要原则是将&lt;a href =“ https://dzone.com/articles/the-most-important-rule-in-software”&gt;单个责任原则&lt;/a&gt;（srp）编写数据：只有一个子域必须掌管编写数据库的列。其他子域将不会考虑该列或仅阅读。&lt;/p&gt;&#xA;&lt;p&gt;第二个原则是允许阅读重叠：几个域可以在只读模式下访问同一列。&lt;/p&gt;</description>
      <pubDate>Wed, 30 Jul 2025 19:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【An Introduction to Agile Architecture】敏捷建筑简介</title>
      <link>https://dzone.com/articles/introduction-to-agile-architecture</link>
      <description>【&lt;p&gt;One of the most significant shortcomings of the waterfall method is the time it takes to identify functional requirements. We can overcome the shortcomings of the conventional approach to architecture and design inadequacies by using agile architecture.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;Agile architecture is a direct response to these shortcomings and operates under an iterative process that encourages flexibility, adaptability, and collaboration with other stakeholders. It focuses on making small changes in a series of short iterations rather than on having large changes at once in a long series of iterations.&lt;/p&gt;】&lt;p&gt;瀑布方法最重要的缺点之一是确定功能需求所需的时间。我们可以通过使用敏捷的体系结构来克服常规的建筑和设计不足方法的缺点。 &lt;/p&gt;&#xA;&lt;p&gt;敏捷架构是对这些缺点的直接响应，并在迭代过程中运作，该过程鼓励灵活性，适应性和与其他利益相关者的协作。它着重于在一系列短期迭代中做出微小的改变，而不是在一系列迭代中立即进行大型变化。&lt;/p&gt;</description>
      <pubDate>Wed, 30 Jul 2025 11:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Agentic DevOps for the Rest of Us: A New Era of Intelligent SDLC】我们其他人的代理Devops：智能SDLC的新时代</title>
      <link>https://dzone.com/articles/agentic-devops-ai-software-delivery</link>
      <description>【&lt;p data-end=&#34;592&#34; data-start=&#34;194&#34;&gt;The concept of Agentic DevOps got introduced in &lt;a href=&#34;https://azure.microsoft.com/en-us/blog/agentic-devops-evolving-software-development-with-github-copilot-and-microsoft-azure/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Microsoft Build conference 2025&lt;/a&gt;. And now, we&#39;ve got &lt;a href=&#34;https://dzone.com/articles/ai-agentic-101-understanding-ai-agents&#34;&gt;Agentic AI&lt;/a&gt;, Agentic Workflows, Agentic Systems... and of course, Agentic DevOps. What&#39;s next? Anyway, in this post, we&#39;re going to dive into the wonderful world of Agentic DevOps.&lt;/p&gt;&#xA;&lt;p data-end=&#34;592&#34; data-start=&#34;194&#34;&gt;In 2025, a quiet revolution began to reshape how we build software. It wasn’t just about faster coding—it was about transforming the entire software lifecycle with autonomous and semi-autonomous agents working alongside developers. Welcome to the age of &lt;strong data-end=&#34;466&#34; data-start=&#34;448&#34;&gt;Agentic DevOps&lt;/strong&gt;—where intelligent agents don’t just assist; they collaborate, optimize, and co-create across development, QA, and operations. It&#39;s a new era of Intelligent &lt;a href=&#34;https://dzone.com/articles/the-complete-guide-to-sdlc&#34;&gt;&lt;strong&gt;Software Development Life Cycle&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; (SDLC)&lt;/strong&gt;.&lt;/p&gt;】&lt;p data-end =“ 592” data-start =“ 194”&gt; &lt;a href =“ https://azure.microsoft.com/en-en-us/blog/agentic-devops-evolving-soft--dware-soft-deeveloverment-withevelvement-withub-copilot--copilot-and-microsoft-rorefore n https://azure.microsoft.com/en-ghreosoft com.com e hi href =“ target =“ _ blank”&gt; Microsoft构建会议2025 &lt;/a&gt;。而现在，我们已经有了&lt;a href =“ https://dzone.com/articles/ai-agentic-101-end1-underding-ai-agents”&gt; Agentic AI &lt;/a&gt;，代理工作流程，代理系统，代理系统...以及当然，代理DevOps。接下来是什么？无论如何，在这篇文章中，我们将深入探讨Agent Devops的美好世界。&lt;/p&gt;&#xA;&lt;p data-end =“ 592” data-start =“ 194”&gt;在2025年，一场安静的革命开始重塑我们如何构建软件。这不仅仅是更快的编码，还涉及使用与开发人员一起工作的自主和半自治的代理来改变整个软件生命周期。欢迎来到&lt;strong data-end =“ 466” data-start =“ 448”&gt;代理DevOps &lt;/strong&gt;的年龄 - 智能代理不仅有帮助；他们在开发，质量检查和运营中协作，优化和共同创建。这是一个智能的新时代&lt;a href =“ https://dzone.com/articles/the-complete-guide-to-sdlc”&gt; &lt;strong&gt;软件开发生命周期&lt;/strong&gt; &lt;/a&gt; &lt;/a&gt; &lt;strong&gt;（sdlc）（sdlc）&lt;/strong&gt;。&lt;/p&gt;。&lt;/p&gt;。</description>
      <pubDate>Wed, 30 Jul 2025 18:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>