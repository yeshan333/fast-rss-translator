<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Your SDLC Has an Evil Twin — and AI Built It】您的SDLC有一个邪恶的双胞胎 -  AI建造了</title>
      <link>https://dzone.com/articles/evil-twin-sdlc-ai</link>
      <description>【&lt;p&gt;&lt;span data-contrast=&#34;auto&#34; lang=&#34;EN-US&#34;&gt;You think you know your SDLC like the back of your carpal-tunnel-riddled hand: You&#39;ve got your gates, your reviews, your carefully orchestrated dance of code commits and deployment pipelines.&lt;/span&gt;&lt;span data-ccp-props=&#34;{&amp;quot;134233117&amp;quot;:false,&amp;quot;134233118&amp;quot;:false,&amp;quot;335559738&amp;quot;:240,&amp;quot;335559739&amp;quot;:240}&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;span data-contrast=&#34;auto&#34; lang=&#34;EN-US&#34;&gt;But here&#39;s a plot twist straight out of your auntie&#39;s favorite daytime soap:&amp;nbsp;&lt;/span&gt;&lt;span data-contrast=&#34;auto&#34; lang=&#34;EN-US&#34;&gt;there&#39;s&amp;nbsp;an evil twin lurking in your organization&amp;nbsp;(&lt;/span&gt;&lt;span data-contrast=&#34;auto&#34; lang=&#34;EN-US&#34;&gt;c&lt;/span&gt;&lt;span data-contrast=&#34;auto&#34; lang=&#34;EN-US&#34;&gt;ue the dramatic organ music).&lt;/span&gt;&lt;span data-ccp-props=&#34;{&amp;quot;134233117&amp;quot;:false,&amp;quot;134233118&amp;quot;:false,&amp;quot;335559738&amp;quot;:240,&amp;quot;335559739&amp;quot;:240}&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;】&lt;p&gt; &lt;span data-contrast =“ auto” lang =“ en-us”&gt;您认为自己知道自己的sdlc，就像腕带刺耳的手的背面一样：您有大门，评论，精心策划的代码cons和部署管道的舞蹈。 data-ccp-props =“ {” 134233117“：false，” 134233118“：false，” 335559738“：240，” 335559739“：240}：240}”&gt; &lt;/span&gt; &lt;/p&gt;&#xA;&lt;p&gt; &lt;span data-contrast =“ auto” lang =“ en-us”&gt;，但这里有一个情节直接扭曲了您姨妈最喜欢的白天肥皂：&lt;/span&gt; &lt;span data-contrast =“ auto” auto“ auto” lang =“ en-us”&gt;有一个邪恶的双胞胎在您的组织中潜伏在您的组织中（&lt;span&gt; span&gt; &lt;span&gt; &lt;span&gt; &lt;span&gt; &lt;span&gt; &lt;span&gt; &lt;span&gt; &lt;span-span-span conter = splast =“ sasper =”自动=“”自动=“”。 data-contrast =“ auto” lang =“ en-us”&gt; ue戏剧性器官音乐）。&lt;/span&gt; &lt;span&gt; &lt;span data-ccp-props =“ {” 134233117“：false，“ 134233118”：134233118：false，“ false，”，“ 3355559738”：3355559738“：240，”：240，“ 33555559739”：240：240：240：240}}</description>
      <pubDate>Fri, 19 Sep 2025 19:00:08 +0000</pubDate>
    </item>
    <item>
      <title>【Tiny Deltas, Big Wins: Schema-Less Thrift Patching at Planet Scale】微小的三角洲，大胜利：无模式的旧货补丁</title>
      <link>https://dzone.com/articles/schema-less-thrift-patching</link>
      <description>【&lt;h2&gt;Introduction: The Power of Tiny Deltas&lt;/h2&gt;&#xA;&lt;p&gt;Imagine this common scenario: you have a binary Thrift blob, perhaps holding crucial transaction data or image metadata, stored in a distributed cache. Suddenly, a single field within that blob needs an update — maybe a transaction status change, or an image is flagged as sensitive. The catch? You don&#39;t have the Thrift IDL (Interface Definition Language) schema readily available on the serving layer, and redeploying the data producers is simply &lt;em&gt;not an option&lt;/em&gt; due to the sheer scale and complexity of your operations.&lt;/p&gt;&#xA;&lt;p&gt;This is where the &lt;code&gt;fbthrift&lt;/code&gt; library&#39;s &lt;code&gt;parseObject/serializeObject&lt;/code&gt; API shines, offering a remarkably elegant solution. It enables you to deserialize, mutate, and re-emit a Thrift frame using &lt;em&gt;only numeric field IDs&lt;/em&gt;, bypassing the need for code generation or schema uploads. This capability is invaluable for scenarios like hot-patches, rapid feature-flag flips, or compliance-driven data redactions, all without the overhead of re-sending or re-processing an entire message.&lt;/p&gt;】&lt;H2&gt;简介：小三角洲的力量&lt;/h2&gt;&#xA;&lt;p&gt;想象一下这种常见的情况：您有一个二进制节俭的斑点，也许持有至关重要的交易数据或图像元数据，存储在分布式缓存中。突然，该斑点中的一个字段需要更新 - 也许是事务状态更改，或者将图像标记为敏感。捕获？您没有在服务层上容易获得的节俭IDL（接口定义语言）架构，并且由于您的操作的规模和复杂性，重新部署数据生产者只是一个选择。&lt;/em&gt; &lt;/em&gt;。&lt;/p&gt;&#xA;&lt;p&gt;这是&lt;code&gt; fbthrift &lt;/code&gt;库的&lt;code&gt; parseObject/serializeObject &lt;/code&gt; api shines，提供非常优雅的解决方案。它使您能够使用仅数字字段IDS &lt;/em&gt;进行对升级，突变和重新发射的旧货框架，从而绕过对代码生成或上传架构的需求。此功能对于诸如热点，快速功能范围翻转或合规性数据修复之类的方案是无价的，所有这些都没有重新访问或重新处理整个消息的开销。&lt;/p&gt;</description>
      <pubDate>Fri, 19 Sep 2025 18:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Distributed Cloud-Based Dynamic Configuration Management】基于云的分布式动态配置管理</title>
      <link>https://dzone.com/articles/distributed-cloud-dynamic-configuration-management</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;It is not uncommon for back-end software to have a configuration file to start up with. These are generally YAML or JSON files, which are loaded by the system while starting up, and are then used to set up initial configuration for a system. Values included here may affect business logic or infrastructure.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Let us create a new service called DumplingSale (because I love dumplings, or as we call them, &lt;em&gt;momos&lt;/em&gt;). This service is used for managing the sales of dumplings.&lt;/p&gt;】&lt;p dir =“ ltr”&gt;后端软件要启动配置文件并不少见。这些通常是YAML或JSON文件，它们在启动时由系统加载，然后用于设置系统的初始配置。此处包括的值可能会影响业务逻辑或基础架构。&lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;让我们创建一个名为Dumplingsale的新服务（因为我喜欢饺子，或者我们称其为&lt;em&gt; momos &lt;/em&gt;）。该服务用于管理饺子的销售。&lt;/p&gt;</description>
      <pubDate>Fri, 19 Sep 2025 17:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Deep Dive into Distributed File System Permission Management: Linux Security Integration】深入研究分布式文件系统权限管理：Linux安全集成</title>
      <link>https://dzone.com/articles/linux-distributed-file-system-permissions</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;In multi-user environments with high-security requirements, robust permission controls are fundamental for resource isolation. Linux&#39;s file permission model provides a flexible access control mechanism, ensuring system security through user/group permission settings. For distributed file systems supporting Linux, compliance with this model is critical for consistent security.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;This article explores key Linux permission mechanisms and their implementation in a FUSE-based distributed file system.&lt;/p&gt;】&lt;p dir =“ ltr”&gt;在具有高安全性要求的多用户环境中，强大的权限控制对于资源隔离是基础。 Linux的文件许可模型提供了灵活的访问控制机制，从而通过用户/组许可设置确保系统安全。对于支持Linux的分布式文件系统，遵守此模型对于一致的安全性至关重要。&lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;本文探讨了关键的Linux权限机制及其在基于FUSE的分布式文件系统中的实现。&lt;/p&gt;</description>
      <pubDate>Fri, 19 Sep 2025 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【A Backend-First Approach to Production-Scale LLM Applications】生产规模LLM应用程序的后端优先方法</title>
      <link>https://dzone.com/articles/backend-first-approach-production-llm-apps</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;A few months ago, I launched the first version of my platform, which operated without AI functionality. It worked well for its initial purpose, but I knew it could do more. A few weeks ago, I rolled out version two, this time with large language models (LLMs) as its core component. It was designed to operate through a structured workflow in which the frontend sends requests to the backend, where the platform applies business logic before accessing OpenAI&#39;s API to generate responses. All operations performed as expected during controlled testing sessions. As more people started using the platform, new problems appeared. These were mostly caused by user actions and factors such as slow internet, accidental browser refreshes, and other interruptions that affected the user experience.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Users will always do unexpected things in production, and not all of it is their fault. I had to accept that and find a way for the platform to handle these hiccups smoothly. The solution was to add safeguards, a safety net to catch problems and keep the system running gracefully. I redesigned the platform, putting the backend at the center of all large language model operations.&lt;/p&gt;】&lt;p dir =“ ltr”&gt;几个月前，我启动了我的平台的第一个版本，该版本在没有AI功能的情况下运行。它为其最初的目的运作良好，但我知道它可以做更多。几周前，我推出了第二版，这次是大型语言模型（LLM）作为其核心组件。它旨在通过结构化的工作流进行操作，在该工作流程中，前端将请求发送到后端，该平台在访问OpenAI的API之前应用业务逻辑以生成响应。所有操作在受控测试过程中按预期执行。随着越来越多的人开始使用该平台，出现了新的问题。这些主要是由用户行动和因素引起的，例如慢速互联网，意外浏览器刷新以及其他影响用户体验的中断。&lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;用户将始终在生产中做意想不到的事情，而所有这些都是他们的错。我不得不接受这一点，并找到了平台平稳处理这些打ic的方法。解决方案是添加保障措施，安全网以捕捉问题并保持系统优雅地运行。我重新设计了平台，将后端放在所有大型语言模型操作的中心。&lt;/p&gt;</description>
      <pubDate>Fri, 19 Sep 2025 15:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【VS Code Agent Mode: An Architect&#39;s Perspective for the .NET Ecosystem】VS代码代理模式：架构师对.NET生态系统的观点</title>
      <link>https://dzone.com/articles/vs-code-agent-mode-dotnet</link>
      <description>【&lt;p data-line=&#34;8&#34; dir=&#34;auto&#34;&gt;GitHub Copilot agent mode had several enhancements in VS Code as part of its July 2025 release, further bolstering its capabilities. The supported LLMs are getting better iteratively; however, both personal experience and academic research remain divided on future capabilities and gaps. I&#39;ve had my own learnings exploring agent mode for the last few months, ever since it was released, and had the best possible outcomes with Claude Sonnet Models.&lt;/p&gt;&#xA;&lt;p data-line=&#34;10&#34; dir=&#34;auto&#34;&gt;After 18 years of building enterprise systems — ranging from integrating siloed COTS to making clouds talk, architecting IoT telemetry data ingestions and eCommerce platforms — I&#39;ve seen plenty of &#34;revolutionary&#34; tools come and go. I&#39;ve watched us transition from &lt;a href=&#34;https://dzone.com/articles/evolution-of-software-architecture-from-monoliths&#34;&gt;monoliths to microservices&lt;/a&gt;, from on-premises to cloud, from waterfall to agile. I&#39;ve learned Java 1.4, .NET 9, and multiple flavors of JavaScript. Each transition revealed fundamental flaws in how we think about software construction.&lt;/p&gt;】&lt;p data-line =“ 8” dir =“ auto”&gt; github副词代理模式在VS代码中具有多个增强功能，作为其2025年7月发布的一部分，进一步加强了其功能。受支持的LLM迭代越来越好；但是，个人经验和学术研究都在未来的能力和差距上都存在分歧。自从发布以来，我一直在学习代理模式的探索代理模式，并且与Claude Sonnet模型具有最好的结果。&lt;/p&gt;&#xA;&lt;p data-line =“ 10” dir =“ auto”&gt;经过18年的构建企业系统 - 从整合孤立的婴儿床到使云进行交谈，架构IoT遥测数据摄入和电子商务平台 - 我已经看到了很多“革命性的”工具。我已经看过我们从&lt;a href =“ https://dzone.com/articles/volution-of-software-architecture-from-monoliths”&gt;单片到微服务&lt;/a&gt;从瀑布到敏捷。我已经学习了Java 1.4，.NET 9，以及JavaScript的多种口味。每个过渡都揭示了我们如何看待软件构建的基本缺陷。&lt;/p&gt;</description>
      <pubDate>Fri, 19 Sep 2025 14:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【7 API Integration Patterns: REST, gRPC, SSE, WS, and Queues】7 API集成模式：REST，GRPC，SSE，WS和队列</title>
      <link>https://dzone.com/articles/api-integration-patterns</link>
      <description>【&lt;p&gt;There are multiple API integration patterns. &lt;span style=&#34;background-color: transparent;&#34;&gt;I have already mentioned and described some of the differences in different articles:&amp;nbsp;&lt;/span&gt;&lt;a href=&#34;https://dzone.com/articles/grpc-vs-rest-comparison&#34; target=&#34;_blank&#34;&gt;gRPC vs REST&lt;/a&gt;&lt;span style=&#34;background-color: transparent;&#34;&gt;,&amp;nbsp;&lt;/span&gt;&lt;a href=&#34;https://dzone.com/articles/sse-vs-websockets&#34; target=&#34;_blank&#34;&gt;WebSockets vs SSE&lt;/a&gt;&lt;span style=&#34;background-color: transparent;&#34;&gt;.&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p&gt;This text is a kind of One Ring article — one to rule them all. I want you to have a single place where you can find a comparison of all the API integration patterns done in a clear and consistent manner. Thus, I have put here all the previous comparisons, and added some more into this text.&amp;nbsp;&lt;/p&gt;】&lt;p&gt;有多种API集成模式。 &lt;span style =“背景彩色：透明;”&gt;我已经提到并描述了不同文章中的一些差异：&lt;/span&gt; &lt;a href =“ https://dzone.com/articles/articles/articles/articles/grpc-vs-vs-rest-comparesison target =“ _ black”&gt; grpc vs ers ret &lt;/grpc vs ret &lt;/a&gt; &lt;/spart &lt;span partent =“ spectparent =”背景： href =“ https://dzone.com/articles/sse-vs-websockets” target =“ _ black”&gt; websockets vs sse &lt;/a&gt; &lt;span style =“ backick-color：probackent-color：practarent;&gt;。&#xA;&lt;p&gt;本文是一种戒指文章 - 一条统治它们。我希望您有一个地方可以找到以清晰，一致的方式进行所有API集成模式的比较。因此，我已经在这里进行了所有以前的比较，并在本文中添加了更多内容。 &lt;/p&gt;</description>
      <pubDate>Fri, 19 Sep 2025 13:00:14 +0000</pubDate>
    </item>
    <item>
      <title>【Exploring Text-to-Cypher: Integrating Ollama, MCP, and Spring AI】探索文本到cypher：整合Ollama，MCP和Spring AI</title>
      <link>https://dzone.com/articles/text-to-cypher-ollama-mcp-spring-ai</link>
      <description>【&lt;p&gt;When text-to-query approaches (specifically, text2cypher) first entered the scene, I was a bit uncertain how it was useful, especially when existing models were hit-or-miss on result accuracy. It would be hard to justify the benefits over a human expert in the domain and query language.&lt;/p&gt;&#xA;&lt;p&gt;However, as technologies have evolved over the last couple of years, I&#39;ve started to see how a text-to-query approach adds flexibility to rigid applications that could previously only answer a set of pre-defined questions with limited parameters.&lt;/p&gt;】&lt;p&gt;当文本到Query接近（特别是Text2Cypher）首次进入场景时，我有点不确定它的用处，尤其是当现有模型因结果准确性而或失误时。很难证明比人类专家在域和查询语言上的好处是合理的。&lt;/p&gt;&#xA;&lt;p&gt;但是，随着过去几年技术的发展，我已经开始看到文本之间的方法如何为刚体的应用程序增加灵活性，这些应用程序以前只能回答具有有限参数的一组预定义问题。&lt;/p&gt; &lt;/p&gt;</description>
      <pubDate>Fri, 19 Sep 2025 12:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Spring Boot WebSocket: Building a Multichannel Chat in Java】Spring Boot Websocket：在Java中构建多通道聊天</title>
      <link>https://dzone.com/articles/spring-boot-websocket-multichannel-chat-java</link>
      <description>【&lt;p&gt;As you may have already guessed from the title, the topic for today will be Spring Boot WebSockets. Some time ago, I provided an example of WebSocket chat based on Akka toolkit libraries. However, this chat will have somewhat more features, and a quite different design.&lt;/p&gt;&#xA;&lt;p&gt;I will skip some parts so as not to duplicate too much content from the previous article. Here you can find a more in-depth intro to &lt;a href=&#34;https://dzone.com/articles/sse-vs-websockets&#34;&gt;WebSockets&lt;/a&gt;. Please note that all the code that’s used in this article is also available in the &lt;a href=&#34;https://github.com/Pask423/articles-misc/tree/master/spring-ws&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;】&lt;p&gt;您可能已经从标题中猜到了，今天的主题将是Spring Boot Websockets。不久前，我提供了一个基于Akka工具包库的WebSocket聊天示例。但是，此聊天将具有更多的功能和完全不同的设计。&lt;/p&gt;&#xA;&lt;p&gt;我会跳过某些部分，以免复制上一篇文章过多的内容。在这里，您可以找到&lt;a href =“ https://dzone.com/articles/sse-vs-websockets”&gt; websockets &lt;/a&gt;的更深入的介绍&lt;/a&gt;。请注意，本文中使用的所有代码也可以在&lt;a href =“ https://github.com/pask.423/articles-misc/tree/master/master/spring-ws” rel =“ noopener” target =“ _ _ _ _ blank”&gt; github repository &lt;/a&gt;。&lt;/p&gt;。&lt;/p&gt;。&lt;/p&gt;。</description>
      <pubDate>Fri, 19 Sep 2025 11:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Best Software Engineer Books: Build Your Personal Library】最佳软件工程师书：建立您的个人图书馆</title>
      <link>https://dzone.com/articles/best-software-engineer-books</link>
      <description>【&lt;p&gt;I believe that every one of us, software engineers, should have our own personal library of software engineering books. Whether in old plain-text book form or in a newer, more eco-friendly electronic one is an open question. The important thing is to actually have one. I am one of those strange people who believe that we, in general, should read books. Doing so has multiple benefits, but let&#39;s not dive too deep into this and focus on software engineering. Well, there are a couple of problems with software engineer books:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA; &lt;li&gt;They get old rather quickly.&lt;/li&gt;&#xA; &lt;li&gt;There are a lot of them.&lt;/li&gt;&#xA; &lt;li&gt;They are expensive.&lt;/li&gt;&#xA; &lt;li&gt;They have varying levels of quality.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Given our limited time, the obvious conclusion is that it is hard to find a book worthy of reading, one we will not waste our money on. Here comes this article. It will be the first in a series focused on what books I recommend you include in your professional library. This particular blog covers books that focus on the softer parts of our job:&lt;/p&gt;】&lt;p&gt;我相信，我们每个人，软件工程师都应拥有自己的个人软件工程书籍库。无论是在旧的纯文本书籍中还是在更新的，更环保的电子产品中都是一个悬而未决的问题。重要的是要真正拥有一个。我是那些相信我们应该读书的陌生人之一。这样做有多种好处，但让我们不要深入研究这一点，而要专注于软件工程。好吧，软件工程师书籍有两个问题：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA; &lt;li&gt;他们很快就变老了。&lt;/li&gt;&#xA; &lt;li&gt;有很多。&lt;/li&gt;&#xA; &lt;li&gt;它们很昂贵。&lt;/li&gt;&#xA; &lt;li&gt;他们的质量水平不同。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;鉴于我们有限的时间，显而易见的结论是，很难找到值得阅读的书，我们不会浪费我们的钱。这篇文章来了。这将是我推荐您在专业图书馆中包含哪些书籍的系列中的第一个。这个特定的博客涵盖了专注于我们工作的部分的书籍：&lt;/p&gt;</description>
      <pubDate>Thu, 18 Sep 2025 19:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>