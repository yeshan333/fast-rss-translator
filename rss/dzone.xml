<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Hybrid Search: A New Frontier in Enterprise Search】混合搜索：企业搜索的新领域</title>
      <link>https://dzone.com/articles/hybrid-search-a-new-frontier-in-enterprise-search</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;In the business landscape, information is crucial for an organization. Not only this but finding the right information at the right time is even more important.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;This is where enterprise search comes in handy. Earlier traditional enterprise search engines fell short in understanding the context of user queries. These search engines used &lt;a href=&#34;https://dzone.com/articles/from-keywords-to-context-a-deep-dive-into-modern&#34;&gt;keyword matching&lt;/a&gt; to find results. Post that, &lt;a href=&#34;https://dzone.com/articles/multiple-vectors-and-advanced-search-data-model-design&#34;&gt;vector search&lt;/a&gt; became the next promising solution that considered the context of the user query, providing more relevant results.&amp;nbsp;&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;在商业环境中，信息对于组织至关重要。不仅如此，在正确的时间找到正确的信息更为重要。 &lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;这就是企业搜索派上用场的地方。早期的传统企业搜索引擎在理解用户查询的上下文方面存在不足。这些搜索引擎使用&lt;a href=&#34;https://dzone.com/articles/from-keywords-to-context-a-deep-dive-into-modern&#34;&gt;关键字匹配&lt;/a&gt;来查找结果。发布后，&lt;a href=&#34;https://dzone.com/articles/multiple-vectors-and-advanced-search-data-model-design&#34;&gt;矢量搜索&lt;/a&gt;成为下一个考虑上下文的​​有希望的解决方案的用户查询，提供更相关的结果。 &lt;/p&gt;</description>
      <pubDate>Mon, 21 Oct 2024 14:00:04 +0000</pubDate>
    </item>
    <item>
      <title>【Tracing With OpenTelemetry and Jaeger】使用 OpenTelemetry 和 Jaeger 进行跟踪</title>
      <link>https://dzone.com/articles/tracing-with-opentelemetry-and-jaeger</link>
      <description>【&lt;p&gt;Tracing, a critical component, tracks requests through complex systems. This visibility reveals bottlenecks and errors, enabling faster resolutions. In a &lt;a href=&#34;https://buildmage.com/blog/go-web-services/introducing-observability&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;previous post&lt;/a&gt; of our Go web services series, we explored observability’s significance. Today, we focus on tracing. Jaeger collects, stores, and visualizes traces from distributed systems. It provides crucial insights into request flows across services. By integrating Jaeger with OpenTelemetry, developers can unify their tracing approach, ensuring consistent and comprehensive visibility. This integration simplifies diagnosing performance issues and enhances system reliability. In this post, we’ll set up Jaeger, integrate it with OpenTelemetry in our application, and explore visualizing traces for deeper insights.&lt;/p&gt;&#xA;&lt;h2&gt;Motivation&lt;/h2&gt;&#xA;&lt;p&gt;What we are working towards is a Jaeger dashboard that looks like this:&lt;/p&gt;】&lt;p&gt;跟踪是一个关键组件，通过复杂系统跟踪请求。这种可见性揭示了瓶颈和错误，从而能够更快地解决问题。在我们的 Go Web 服务的&lt;a href=&#34;https://buildmage.com/blog/go-web-services/introducing-observability&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;上一篇文章&lt;/a&gt;中系列中，我们探讨了可观察性的重要性。今天，我们重点关注追踪。 Jaeger 收集、存储和可视化来自分布式系统的痕迹。它提供了跨服务请求流的重要见解。通过将 Jaeger 与 OpenTelemetry 集成，开发人员可以统一他们的跟踪方法，确保一致且全面的可见性。这种集成简化了性能问题的诊断并增强了系统可靠性。在这篇文章中，我们将设置 Jaeger，将其与应用程序中的 OpenTelemetry 集成，并探索可视化跟踪以获得更深入的见解。&lt;/p&gt;&#xA;&lt;h2&gt;动机&lt;/h2&gt;&#xA;&lt;p&gt;我们正在努力打造一个 Jaeger 仪表板，如下所示：&lt;/p&gt;</description>
      <pubDate>Mon, 21 Oct 2024 21:00:13 +0000</pubDate>
    </item>
    <item>
      <title>【How to Implement Client-Side Load Balancing With Spring Cloud】如何使用 Spring Cloud 实现客户端负载均衡</title>
      <link>https://dzone.com/articles/client-side-load-balancing-with-spring-cloud</link>
      <description>【&lt;p&gt;It is common for microservice systems to run more than one instance of each service. This is needed to enforce resiliency. It is therefore important to distribute the load between those instances. The component that does this is the &lt;a href=&#34;https://dzone.com/articles/everything-you-need-to-know-and-do-with-load-balan&#34;&gt;load balancer&lt;/a&gt;. Spring provides a Spring Cloud Load Balancer library. In this article, you will learn how to use it to implement client-side load balancing in a &lt;a href=&#34;https://dzone.com/articles/spring-boot-framework-tutorials&#34;&gt;Spring Boot&lt;/a&gt; project.&lt;/p&gt;&#xA;&lt;h2&gt;Client and Server Side Load Balancing&lt;/h2&gt;&#xA;&lt;p&gt;We talk about client-side load balancing when one microservice calls another service deployed with multiple instances and distributes the load on those instances without relying on external servers to do the job. Conversely, in the server-side mode, the balancing feature is delegated to a separate server, that dispatches the incoming requests. In this article, we will discuss an example based on the client-side scenario.&lt;/p&gt;】&lt;p&gt;微服务系统通常会运行每个服务的多个实例。这是增强弹性所必需的。因此，在这些实例之间分配负载非常重要。执行此操作的组件是&lt;a href=&#34;https://dzone.com/articles/everything-you-need-to-know-and-do-with-load-balan&#34;&gt;负载均衡器&lt;/a&gt;。 Spring提供了Spring Cloud负载均衡器库。在本文中，您将学习如何使用它在 &lt;a href=&#34;https://dzone.com/articles/spring-boot-framework-tutorials&#34;&gt;Spring Boot&lt;/a&gt; 中实现客户端负载均衡项目。&lt;/p&gt;&#xA;&lt;h2&gt;客户端和服务器端负载平衡&lt;/h2&gt;&#xA;&lt;p&gt;当一个微服务调用部署有多个实例的另一服务并在这些实例上分配负载而不依赖外部服务器来完成这项工作时，我们讨论客户端负载平衡。相反，在服务器端模式中，平衡功能被委托给一个单独的服务器，该服务器分派传入的请求。在本文中，我们将讨论基于客户端场景的示例。&lt;/p&gt;</description>
      <pubDate>Mon, 21 Oct 2024 18:00:04 +0000</pubDate>
    </item>
    <item>
      <title>【Dust: Open-Source Actors for Java】Dust：Java 的开源 Actors</title>
      <link>https://dzone.com/articles/dust-open-source-actors-for-java</link>
      <description>【&lt;h2&gt;Virtual Threads&lt;/h2&gt;&#xA;&lt;p&gt;Java 21 saw the supported introduction of &lt;a href=&#34;https://dzone.com/articles/the-long-road-to-java-virtual-threads&#34;&gt;virtual threads&lt;/a&gt;. Unlike regular Java threads (which usually correspond to OS threads), virtual threads are incredibly lightweight, indeed an application can create and use 100,000 or more virtual threads simultaneously.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;This magic is achieved by two major changes to the &lt;a href=&#34;https://dzone.com/articles/jvm-architecture-explained&#34;&gt;JVM&lt;/a&gt;:&lt;/p&gt;】&lt;h2&gt;虚拟线程&lt;/h2&gt;&#xA;&lt;p&gt;Java 21 支持引入&lt;a href=&#34;https://dzone.com/articles/the-long-road-to-java-virtual-threads&#34;&gt;虚拟线程&lt;/a&gt;。与常规 Java 线程（通常对应于操作系统线程）不同，虚拟线程非常轻量，实际上应用程序可以同时创建和使用 100,000 个或更多虚拟线程。 &lt;/p&gt;&#xA;&lt;p&gt;这种魔力是通过对 &lt;a href=&#34;https://dzone.com/articles/jvm-architecture-explained&#34;&gt;JVM&lt;/a&gt; 进行两项重大更改来实现的：&lt;/p&gt;</description>
      <pubDate>Mon, 21 Oct 2024 12:00:13 +0000</pubDate>
    </item>
    <item>
      <title>【Automate Private Azure Databricks Unity Catalog Creation】自动创建私有 Azure Databricks Unity 目录</title>
      <link>https://dzone.com/articles/automate-azure-databricks-unity-catalog-creation</link>
      <description>【&lt;p&gt;&lt;strong&gt;&lt;em&gt;Disclaimer:&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;&amp;nbsp;All the views and opinions expressed in the blog belong solely to the author and not necessarily to the author&#39;s employer or any other group or individual. This article is not a promotion for any cloud/data management platform. All the images and code snippets are publicly available on the Azure/Databricks website&lt;/em&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h2&gt;What Is Databricks?&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.databricks.com/en/introduction/index.html&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Databricks&lt;/a&gt; is a powerful platform that helps people work with large amounts of data easily. It allows companies to store, process, and analyze their data in one place.&lt;/p&gt;】&lt;p&gt;&lt;strong&gt;&lt;em&gt;免责声明：&lt;/em&gt;&lt;/strong&gt;&lt;em&gt; 博客中表达的所有观点和意见仅属于作者，不一定属于作者的雇主或任何其他团体或个人。本文并非对任何云/数据管理平台的促销。所有图像和代码片段均可在 Azure/Databricks 网站上公开获取&lt;/em&gt;&lt;em&gt;。&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h2&gt;什么是 Databricks？&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.databricks.com/en/introduction/index.html&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Databricks&lt;/a&gt; 是一个可以帮助人们的强大平台轻松处理大量数据。它允许公司在一个地方存储、处理和分析他们的数据。&lt;/p&gt;</description>
      <pubDate>Mon, 21 Oct 2024 17:00:02 +0000</pubDate>
    </item>
    <item>
      <title>【Tech Trends 2024: Highlights on the Current Tech Industry From a Developer】2024 年科技趋势：开发商对当前科技行业的关注</title>
      <link>https://dzone.com/articles/developer-highlights-on-the-current-tech-industry</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;I have attended several events this year, and I’m constantly keeping my ear to the ground for the latest topics and trends in technology. As a developer focused mostly on data and database industries, I feel that this year has seen a massive expansion of data and efficiency use cases and interest.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;In this post, I’ll highlight some of the trends I’ve seen throughout 2024, especially in the data, graph, and analytics technology spaces. Whether you are simply curious about what is happening in technology industries or looking to put together interesting topics for papers or presentations, this post will include the greatest hits.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;我今年参加了几场活动，并且不断关注最新的技术主题和趋势。作为一名主要关注数据和数据库行业的开发人员，我觉得今年数据和效率用例和兴趣大幅扩展。&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;在这篇文章中，我将重点介绍我在 2024 年看到的一些趋势，特别是在数据、图表和分析技术领域。无论您只是对技术行业正在发生的事情感到好奇，还是希望为论文或演示文稿整理有趣的主题，这篇文章都将包含最热门的内容。&lt;/p&gt;</description>
      <pubDate>Mon, 21 Oct 2024 15:00:06 +0000</pubDate>
    </item>
    <item>
      <title>【PostgreSQL 17: A Major Step Forward in Performance, Logical Replication, and More】PostgreSQL 17：性能、逻辑复制等方面的重大进步</title>
      <link>https://dzone.com/articles/postgresql-17-a-major-step-forward-in-performance</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;After a successful 3rd beta in August 2024, the PostgreSQL development group released the GA version on September 26th. Recently, &lt;a href=&#34;https://dzone.com/articles/logical-replication-features-in-pg-17&#34;&gt;I blogged about some of the key logical replication features that you&#39;ll see in PostgreSQL 17&lt;/a&gt;. &amp;nbsp;In this blog, I&#39;ll describe a couple of new performance features that you&#39;ll find in Postgres 17 as well as another important logical replication feature that I didn&#39;t cover in my earlier blog of this series.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;PostgreSQL has grown remarkably over the years, and with each major release, it has become a more robust, reliable, and responsive database for both mission-critical and non-mission-critical enterprise applications. The global and vibrant PostgreSQL community is contributing to PostgreSQL&#39;s success, diligently ensuring that all changes are carefully scrutinized and reviewed before they are added to the project source code. It is also very encouraging to see big technology names like Microsoft, Google, Apple, and others investing in Postgres by developing in-house expertise and giving back to the open-source community.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;继 2024 年 8 月成功完成第 3 次测试后，PostgreSQL 开发小组于 9 月 26 日发布了 GA 版本。最近，&lt;a href=&#34;https://dzone.com/articles/ological-replication-features-in-pg-17&#34;&gt;我在博客中介绍了您将在 PostgreSQL 17 中看到的一些关键逻辑复制功能&lt;/一个&gt;。  在本博客中，我将描述 Postgres 17 中的几个新性能功能，以及我在本系列之前的博客中未介绍的另一个重要的逻辑复制功能。 &lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;PostgreSQL 多年来取得了显着的发展，随着每个主要版本的发布，它已成为一个更加强大、可靠且响应迅速的数据库，适用于任务关键型和非任务关键型企业应用程序。全球充满活力的 PostgreSQL 社区正在为 PostgreSQL 的成功做出贡献，努力确保所有更改在添加到项目源代码之前都经过仔细审查和审查。看到微软、谷歌、苹果等大型科技公司通过开发内部专业知识和回馈开源社区来投资 Postgres，也是非常令人鼓舞的。&lt;/p&gt;</description>
      <pubDate>Mon, 21 Oct 2024 16:00:04 +0000</pubDate>
    </item>
    <item>
      <title>【Ditch the Unfinished Action Items】放弃未完成的行动项目</title>
      <link>https://dzone.com/articles/ditch-the-unfinished-action-items</link>
      <description>【&lt;h2&gt;TL; DR: Unfinished Action Items: How to Make Retrospectives Useful&lt;/h2&gt;&#xA;&lt;p&gt;If your team consistently creates action items during Retrospectives but rarely completes them, you’re not alone. Unfinished action items are a major productivity killer and lead to stalled progress. This article highlights five actionable practices to ensure Retrospective tasks get done, including limiting action items in progress, assigning clear ownership, and adding a reviewing progress in every Retrospective.&lt;/p&gt;&#xA;&lt;p&gt;The key to real improvement isn’t in creating long lists — it’s in following through. By treating Retrospective action items with the same importance as other Sprint tasks, your team can finally break the cycle of unfinished improvements and see real, beneficial change, individually and at the team level.&lt;/p&gt;】&lt;h2&gt;TL; DR：未完成的行动项目：如何使回顾有用&lt;/h2&gt;&#xA;&lt;p&gt;如果您的团队在回顾期间持续创建行动项目但很少完成它们，那么您并不孤单。未完成的行动项目是生产力的主要杀手，并导致进度停滞。本文重点介绍了确保完成回顾任务的五种可行做法，包括限制正在进行的行动项目、分配明确的所有权以及在每次回顾中添加审核进度。&lt;/p&gt;&#xA;&lt;p&gt;真正改进的关键不在于创建长列表，而在于坚持到底。通过将回顾性行动项目与其他 Sprint 任务同等重要，您的团队最终可以打破未完成改进的循环，并在个人和团队层面看到真正、有益的变化。&lt;/p&gt;</description>
      <pubDate>Mon, 21 Oct 2024 19:00:10 +0000</pubDate>
    </item>
    <item>
      <title>【Enhancing Observability in iOS Applications: Key Insights】增强 iOS 应用程序的可观察性：关键见解</title>
      <link>https://dzone.com/articles/enhancing-observability-in-ios-applications</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;My name is Siarhei Misko, an iOS Team Lead with over eight years of experience. Today, I want to walk you through the essential topic of &lt;a href=&#34;https://dzone.com/articles/8-ways-mobile-observability-is-the-opposite&#34;&gt;observability in mobile applications&lt;/a&gt;, focusing on iOS. We are going to take a closer look at how we can implement observability more easily and why it is so important to improve app performance and provide a better user experience.&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;Why Observability Matters&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;The very fundamental question is: how do we ensure our application is stable and working fine? Conventionally, the answer would point to testing. We fire up QA tests by using various test cases, test environments, and on specific devices. The thing is, these tests are synthetic and mostly remain incapable of reflecting real-world scenarios. In the real world, applications go through much more complex environments, and here is where observability bridges the gap between test conditions and real-world functionality.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;我叫 Siarhei Misko，一位拥有八年以上经验的 iOS 团队负责人。今天，我想向您介绍&lt;a href=&#34;https://dzone.com/articles/8-ways-mobile-observability-is-the-opposite&#34;&gt;移动应用程序中的可观察性&lt;/a&gt;这一基本主题，专注于iOS。我们将仔细研究如何更轻松地实现可观察性，以及为什么提高应用性能和提供更好的用户体验如此重要。&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;为什么可观察性很重要&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;最根本的问题是：我们如何确保我们的应用程序稳定且工作正常？按照惯例，答案将指向测试。我们通过使用各种测试用例、测试环境和特定设备来启动 QA 测试。问题是，这些测试是综合性的，并且大多无法反映现实世界的场景。在现实世界中，应用程序会经历更加复杂的环境，而可观察性正是在这种情况下弥合了测试条件和现实世界功能之间的差距。&lt;/p&gt;</description>
      <pubDate>Mon, 21 Oct 2024 13:00:03 +0000</pubDate>
    </item>
    <item>
      <title>【Serverless NLP: Implementing Sentiment Analysis Using Serverless Technologies】无服务器 NLP：使用无服务器技术实施情感分析</title>
      <link>https://dzone.com/articles/serverless-nlp-sentiment-analysis-using-serverless</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;In this article, I will discuss building a &lt;a href=&#34;https://dzone.com/articles/simple-sentiment-analysis-with-nlp&#34;&gt;sentiment analysis&lt;/a&gt; tool using AWS &lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-serverless-application-archit&#34;&gt;serverless&lt;/a&gt; capabilities and NLTK. I will be using &lt;a href=&#34;https://dzone.com/articles/aws-lambda-best-practices&#34;&gt;AWS lambda&lt;/a&gt; to run sentiment analysis using the &lt;a href=&#34;https://dzone.com/articles/nltk-hello-world-python-example-data-analytics&#34;&gt;NLTK&lt;/a&gt;-vader library and AWS API Gateway to enable this functionality as an API. This architecture eliminates the need for any server management while providing on-demand scalability and cost-efficiency.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Before we dive in, ensure that you have the following:&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;在本文中，我将讨论构建&lt;a href=&#34;https://dzone.com/articles/simple-sentiment-analysis-with-nlp&#34;&gt;情感分析&lt;/a&gt;工具使用 AWS &lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-serverless-application-archit&#34;&gt;无服务器&lt;/a&gt; 功能和 NLTK。我将使用 &lt;a href=&#34;https://dzone.com/articles/aws-lambda-best-practices&#34;&gt;AWS lambda&lt;/a&gt; 使用 &lt;a href=&#34;https://dzone .com/articles/nltk-hello-world-python-example-data-analytics&#34;&gt;NLTK&lt;/a&gt;-vader 库和 AWS API Gateway 将此功能作为 API 启用。该架构无需任何服务器管理，同时提供按需可扩展性和成本效益。&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;在我们深入讨论之前，请确保您具备以下条件：&lt;/p&gt;</description>
      <pubDate>Mon, 21 Oct 2024 20:00:11 +0000</pubDate>
    </item>
  </channel>
</rss>