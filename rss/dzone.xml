<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Retrieval-Augmented Generation (RAG): Enhancing AI-Language Models With Real-World Knowledge】检索增强生成 (RAG)：利用现实世界知识增强人工智能语言模型</title>
      <link>https://dzone.com/articles/rag-enhancing-ai-language-models</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;In recent years, AI has made big leaps forward, mainly because of &lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-large-language-models&#34;&gt;large language models (LLMs)&lt;/a&gt;. LLMs are really good at understanding and generating text that’s human-like, and they led to the creation of several new tools like advanced chatbots and AI writers.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;While LLMs are great at generating text that’s fluent and human-like, they sometimes struggle with getting facts right. This can be a huge problem when accuracy is really important&amp;nbsp;&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;近年来，人工智能取得了巨大的飞跃，主要是因为&lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-large-language-models&#34;&gt;大语言模型（LLM）&lt;/a&gt;。法学硕士非常擅长理解和生成类人文本，他们催生了高级聊天机器人和人工智能编写器等多种新工具的创建。&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;虽然法学硕士擅长生成流畅且人性化的文本，但他们有时很难正确理解事实。当准确性非常重要时，这可能是一个大问题&lt;/p&gt;</description>
      <pubDate>Mon, 16 Sep 2024 14:00:09 +0000</pubDate>
    </item>
    <item>
      <title>【Observability Agent Architecture】可观察性代理架构</title>
      <link>https://dzone.com/articles/observability-agent-architecture</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Observability agents are essential components in modern software development and operations. These software entities act as data collectors, processors, and transmitters, gathering critical telemetry data from applications, infrastructure, and network devices. This data is then sent to centralized observability platforms where it can be analyzed to gain valuable insights into system performance, identify issues, and optimize operations.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;By efficiently capturing, processing, and transmitting logs, metrics, and traces, observability agents provide a comprehensive view of system health and behavior. This enables organizations to make informed decisions, improve application reliability, and ensure compliance with relevant regulations.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;可观测性代理是现代软件开发和运营中的重要组成部分。这些软件实体充当数据收集器、处理器和发射器，从应用程序、基础设施和网络设备收集关键遥测数据。然后，这些数据被发送到集中式可观测平台，在平台上可以对其进行分析，以获得对系统性能、识别问题和优化运营的宝贵见解。&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;通过有效地捕获、处理和传输日志、指标和跟踪，可观测代理提供了系统运行状况和行为的全面视图。这使组织能够做出明智的决策、提高应用程序可靠性并确保遵守相关法规。&lt;/p&gt;</description>
      <pubDate>Mon, 16 Sep 2024 20:00:06 +0000</pubDate>
    </item>
    <item>
      <title>【Commonly Occurring Errors in Microsoft Graph Integrations and How To Troubleshoot Them (Part 6)】Microsoft Graph 集成中常见的错误以及如何排除这些错误（第 6 部分）</title>
      <link>https://dzone.com/articles/errors-in-microsoft-graph-integrations-part-six</link>
      <description>【&lt;p&gt;This article discusses the following example: changing a column value for a list item of a “user-defined” SharePoint list, which represents a PDF file within a sub-folder of the SharePoint drive, using a DriveItem, which also represents the PDF file. SharePoint lists are central data structures that make it possible to store, organize, and manage information in tabular form. The test aims to demonstrate and explain how the MS-Graph API can be successfully used to change values in a list and correctly transfer this change to SharePoint. This ensures that the integrity of the file is maintained after the change and that no unexpected errors occur during API communication.&lt;/p&gt;&#xA;&lt;h2&gt;Microsoft Graph API&lt;/h2&gt;&#xA;&lt;p&gt;The Microsoft Graph API is a &lt;a href=&#34;https://dzone.com/refcardz/restful-api-lifecycle-management&#34;&gt;REST-based&lt;/a&gt; programming interface that provides access to a variety of services and data within the Microsoft 365 platform. It offers developers the ability to access a central interface to read, write, and manage data from services such as Azure Active Directory, Outlook, OneDrive, SharePoint, Microsoft Teams, and many more.&lt;/p&gt;】&lt;p&gt;本文讨论以下示例：使用 DriveItem（也代表 SharePoint 驱动器的子文件夹中的 PDF 文件）更改“用户定义”SharePoint 列表的列表项的列值，该列表代表 SharePoint 驱动器的子文件夹中的 PDF 文件。 PDF 文件。 SharePoint 列表是中心数据结构，可以以表格形式存储、组织和管理信息。该测试旨在演示和解释如何成功使用 MS-Graph API 更改列表中的值并将此更改正确传输到 SharePoint。这可确保更改后保持文件的完整性，并且 API 通信期间不会出现意外错误。&lt;/p&gt;&#xA;&lt;h2&gt;微软图形API&lt;/h2&gt;&#xA;&lt;p&gt;Microsoft Graph API 是一个&lt;a href=&#34;https://dzone.com/refcardz/restful-api-lifecycle-management&#34;&gt;基于 REST&lt;/a&gt; 的编程接口，提供对各种服务的访问以及 Microsoft 365 平台内的数据。它使开发人员能够访问中央界面，以读取、写入和管理来自 Azure Active Directory、Outlook、OneDrive、SharePoint、Microsoft Teams 等服务的数据。&lt;/p&gt;</description>
      <pubDate>Mon, 16 Sep 2024 21:00:05 +0000</pubDate>
    </item>
    <item>
      <title>【Leveling Up My GraphQL Skills: Real-Time Subscriptions】提升我的 GraphQL 技能：实时订阅</title>
      <link>https://dzone.com/articles/leveling-up-my-graphql-skills-real-time-subscriptions</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;For a few years now, I’ve tried to identify frameworks, products, and services that allow technologists to maintain their focus on extending the value of their intellectual property. This continues to be a wonderful journey for me, filled with unique learning opportunities.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;The engineer in me recently wondered if there was a situation where I could find a secondary benefit for an existing concept that I’ve talked about before. In other words, could I identify another benefit with the same level of impact as the original parent solution previously recognized?&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;几年来，我一直在努力寻找框架、产品和服务，让技术人员能够专注于扩展其知识产权的价值。这对我来说仍然是一次美妙的旅程，充满了独特的学习机会。&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;作为一名工程师，我最近想知道是否可以在某种情况下为我之前讨论过的现有概念找到次要好处。换句话说，我是否可以找到与先前认可的原始父解决方案具有相同影响水平的另一个好处？&lt;/p&gt;</description>
      <pubDate>Mon, 16 Sep 2024 16:00:12 +0000</pubDate>
    </item>
    <item>
      <title>【Low-Level Optimizations in ClickHouse: Utilizing Branch Prediction and SIMD To Speed Up Query Execution】ClickHouse 中的低级优化：利用分支预测和 SIMD 加速查询执行</title>
      <link>https://dzone.com/articles/low-level-optimizations-in-clickhouse-utilizing-br</link>
      <description>【&lt;p name=&#34;ec60&#34;&gt;In data analysis, the need for fast query execution and data retrieval is paramount. Among numerous database management systems, &lt;a href=&#34;https://dzone.com/articles/clickhouse-made-easy-getting-started-with-a-few-cl&#34;&gt;ClickHouse&lt;/a&gt; stands out for its originality and, one could say, a specific niche, which, in my opinion, complicates its expansion in the database market.&lt;/p&gt;&#xA;&lt;p name=&#34;0672&#34;&gt;I’ll probably write a series of articles on different features of ClickHouse, and this article will be a general introduction with some interesting points that few people think about when using various databases.&lt;/p&gt;】&lt;p name=&#34;ec60&#34;&gt;在数据分析中，快速查询执行和数据检索的需求至关重要。在众多数据库管理系统中，&lt;a href=&#34;https://dzone.com/articles/clickhouse-made-easy-getting-started-with-a-few-cl&#34;&gt;ClickHouse&lt;/a&gt; 因其独创性而脱颖而出而且，有人可以说，一个特定的利基市场，在我看来，这使其在数据库市场的扩张变得复杂。&lt;/p&gt;&#xA;&lt;p name=&#34;0672&#34;&gt;我可能会写一系列关于 ClickHouse 不同功能的文章，本文将是一个一般性的介绍，其中包含一些在使用各种数据库时很少有人想到的有趣点。&lt;/p&gt;</description>
      <pubDate>Mon, 16 Sep 2024 19:00:07 +0000</pubDate>
    </item>
    <item>
      <title>【Obfuscation vs Encryption: How To Protect Your .NET Code the Right Way】混淆与加密：如何以正确的方式保护您的 .NET 代码</title>
      <link>https://dzone.com/articles/obfuscation-vs-encryption-how-to-protect-your-net-code</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;When working on &lt;a href=&#34;https://dzone.com/refcardz/coredotnet&#34;&gt;.NET&lt;/a&gt; applications, one main concern is safeguarding your code from unauthorized access, intellectual property theft, and &lt;a href=&#34;https://dzone.com/articles/reverse-engineering-of-production-web-application&#34;&gt;reverse engineering&lt;/a&gt;. This can be achieved by implementing data and code protection techniques to protect the application. There are two main techniques used to secure .NET code: obfuscation and encryption.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;But do you know which technique is right? And when to use each? Let’s learn from this guide. &amp;nbsp;&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;在开发 &lt;a href=&#34;https://dzone.com/refcardz/coredotnet&#34;&gt;.NET&lt;/a&gt; 应用程序时，主要关注的一个问题是保护您的代码免遭未经授权的访问、知识产权盗窃和&lt;a href=&#34;https://dzone.com/articles/reverse-engineering-of-product-web-application&#34;&gt;逆向工程&lt;/a&gt;。这可以通过实施数据和代码保护技术来保护应用程序来实现。有两种主要技术用于保护 .NET 代码：混淆和加密。 &lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;但是您知道哪种技术是正确的吗？以及什么时候使用每一个？让我们从本指南中学习。  &lt;/p&gt;</description>
      <pubDate>Mon, 16 Sep 2024 13:00:06 +0000</pubDate>
    </item>
    <item>
      <title>【Selenium Grid Tutorial: Essential Tips and How To Set It Up】Selenium Grid 教程：基本技巧以及如何设置</title>
      <link>https://dzone.com/articles/selenium-grid-tutorial</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Being a tester or a skilled web developer, you need to test your applications for &lt;a href=&#34;https://dzone.com/articles/along-came-a-bug&#34;&gt;bugs&lt;/a&gt; and performance in all the available browsers and operating systems. But with so many dependencies in hand, having not just different browsers, but different versions, too, it surely becomes a hefty task.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Most importantly, all these processes must be automated to the greatest extent because in major companies, individually creating test cases and pipelines would be expensive and the most obvious, the least preferable method ever. Now this is where &lt;a href=&#34;https://dzone.com/refcardz/getting-started-selenium&#34;&gt;Selenium Grid&lt;/a&gt;, an extensively used server-based test automation tool comes into the picture.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;作为测试人员或熟练的 Web 开发人员，您需要测试应用程序的&lt;a href=&#34;https://dzone.com/articles/along-came-a-bug&#34;&gt;错误&lt; /a&gt; 以及所有可用浏览器和操作系统中的性能。但手头上有如此多的依赖项，不仅有不同的浏览器，而且还有不同的版本，这肯定会成为一项艰巨的任务。 &lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;最重要的是，所有这些流程都必须最大程度地自动化，因为在大公司中，单独创建测试用例和管道将非常昂贵，并且是最明显、最不优选的方法。现在，这就是 &lt;a href=&#34;https://dzone.com/refcardz/getting-started-selenium&#34;&gt;Selenium Grid&lt;/a&gt; 发挥作用的地方，它是一种广泛使用的基于服务器的测试自动化工具。&lt;/p &gt;</description>
      <pubDate>Mon, 16 Sep 2024 15:00:06 +0000</pubDate>
    </item>
    <item>
      <title>【How to Merge Excel XLSX Files in Java】如何在 Java 中合并 Excel XLSX 文件</title>
      <link>https://dzone.com/articles/how-to-merge-excel-xlsx-files-in-java</link>
      <description>【&lt;p&gt;In this article, we’re going to learn how to increase the efficiency of a common file merging workflow with the help of a web API solution. Specifically, we are going to learn how to merge Excel XLSX files – one of the most common document types we can expect to work within a file-processing automation environment.&lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;Context for Programmatic XLSX File Merging&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;If we’re writing code to solve problems related to file processing efficiency and automation, there’s a good chance we’re creating and/or expanding applications that deal with large volumes of Excel files. We may, for example, find that there’s no automated workflow currently in place (or, perhaps, an inefficient one) to combine the various unique Excel reports created by each individual department in our organization. &amp;nbsp;&lt;/p&gt;】&lt;p&gt;在本文中，我们将学习如何借助 Web API 解决方案提高常见文件合并工作流程的效率。具体来说，我们将学习如何合并 Excel XLSX 文件 - 这是我们可以在文件处理自动化环境中使用的最常见的文档类型之一。&lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;程序化 XLSX 文件合并的上下文&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;如果我们编写代码来解决与文件处理效率和自动化相关的问题，那么我们很有可能正在创建和/或扩展处理大量 Excel 文件的应用程序。例如，我们可能会发现当前没有自动化工作流程（或者可能是效率低下的工作流程）来组合我们组织中每个部门创建的各种独特的 Excel 报告。  &lt;/p&gt;</description>
      <pubDate>Mon, 16 Sep 2024 12:00:08 +0000</pubDate>
    </item>
    <item>
      <title>【Build an Advanced RAG App: Query Routing】构建高级 RAG 应用程序：查询路由</title>
      <link>https://dzone.com/articles/build-an-advanced-rag-app-query-routing</link>
      <description>【&lt;p&gt;In previous articles, we built a basic RAG application. We also learned to introduce more advanced techniques to improve a RAG application. Today, we will explore how to tie those advanced techniques together. Those techniques might do different — sometimes opposite — things. Still, sometimes we need to use all of them, to cover all possibilities. So let&#39;s see how we can link different techniques together. In this article, we will take a look at a technique called Query Routing.&lt;br&gt;&lt;br&gt;&lt;img style=&#34;width: 730px;&#34; class=&#34;fr-fic fr-dib lazyload&#34; data-image=&#34;true&#34; data-new=&#34;false&#34; data-sizeformatted=&#34;98.9 kB&#34; data-mimetype=&#34;image/jpeg&#34; data-creationdate=&#34;1726156664761&#34; data-creationdateformatted=&#34;09/12/2024 03:57 PM&#34; data-type=&#34;temp&#34; data-url=&#34;https://dz2cdn1.dzone.com/storage/temp/17915556-query-routing-cover-md.jpg&#34; data-modificationdate=&#34;null&#34; data-size=&#34;98928&#34; data-name=&#34;query-routing-cover-md.jpg&#34; data-id=&#34;17915556&#34; data-src=&#34;https://dz2cdn1.dzone.com/storage/temp/17915556-query-routing-cover-md.jpg&#34; alt=&#34;Hand pointing to a train route map&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 tabindex=&#34;-1&#34;&gt;The Problem With Advanced RAG Applications&lt;/h2&gt;&#xA;&lt;p&gt;When our Generative AI application receives a query, we have to decide what to do with it. For simple Generative AI applications, we send the query directly to the LLM. For simple RAG applications, we use the query to retrieve context from a single data source and then query the LLM. But, if our case is more complex, we can have multiple data sources or different queries that need different types of context. So do we build a one-size-fits-all solution, or do we make the application adapt to take different actions depending on the query?&lt;/p&gt;】&lt;p&gt;在之前的文章中，我们构建了一个基本的 RAG 应用程序。我们还学会了引入更先进的技术来改进 RAG 应用程序。今天，我们将探讨如何将这些先进技术结合在一起。这些技术可能会做不同的事情，有时甚至是相反的事情。不过，有时我们需要使用所有这些，以涵盖所有可能性。那么让我们看看如何将不同的技术联系在一起。在本文中，我们将介绍一种称为“查询路由”的技术。&lt;br&gt;&lt;br&gt;&lt;img style=&#34;width: 730px;&#34; class =“fr-fic fr-dib lazyload”data-image =“true”data-new =“false”data-sizeformatted =“98.9 kB”data-mimetype =“image/jpeg”data-creationdate =“1726156664761”数据-creationdateformatted=&#34;09/12/2024 03:57 PM&#34; data-type=&#34;temp&#34; data-url=&#34;https://dz2cdn1.dzone.com/storage/temp/17915556-query-routing-cover-md。 jpg&#34; data-modificationdate=&#34;null&#34; data-size=&#34;98928&#34; data-name=&#34;query-routing-cover-md.jpg&#34; data-id=&#34;17915556&#34; data-src=&#34;https://dz2cdn1.dzone .com/storage/temp/17915556-query-routing-cover-md.jpg&#34; alt=&#34;指向火车路线图的手&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 tabindex=&#34;-1&#34;&gt;高级 RAG 应用程序的问题&lt;/h2&gt;&#xA;&lt;p&gt;当我们的生成式人工智能应用程序收到查询时，我们必须决定如何处理它。对于简单的生成式人工智能应用程序，我们将查询直接发送给法学硕士。对于简单的 RAG 应用程序，我们使用查询从单个数据源检索上下文，然后查询 LLM。但是，如果我们的情况更复杂，我们可以有多个数据源或需要不同类型上下文的不同查询。那么，我们是构建一个通用的解决方案，还是让应用程序根据查询采取不同的操作？&lt;/p&gt;</description>
      <pubDate>Mon, 16 Sep 2024 18:00:05 +0000</pubDate>
    </item>
    <item>
      <title>【The Ultimate Database Scaling Cheatsheet: Strategies for Optimizing Performance and Scalability】终极数据库扩展备忘单：优化性能和可扩展性的策略</title>
      <link>https://dzone.com/articles/ultimate-database-scaling-cheatsheet</link>
      <description>【&lt;p&gt;As applications grow in complexity and user base, the demands on their underlying databases increase significantly. Efficient database scaling becomes crucial to maintain performance, ensure reliability, and manage large volumes of data. Scaling a database effectively involves a combination of strategies that optimize both hardware and software resources to handle increasing loads.&lt;/p&gt;&#xA;&lt;p&gt;This cheatsheet provides an overview of essential techniques for database scaling. From optimizing query performance with indexing to distributing data across multiple servers with horizontal scaling, each section covers a critical aspect of database management. Whether you&#39;re dealing with a rapidly growing application or preparing for future growth, understanding these strategies will help you make informed decisions to ensure your database remains robust and responsive.&lt;/p&gt;】&lt;p&gt;随着应用程序的复杂性和用户群的增长，对其底层数据库的需求也显着增加。高效的数据库扩展对于维持性能、确保可靠性和管理大量数据至关重要。有效地扩展数据库涉及优化硬件和软件资源以处理不断增加的负载的策略组合。&lt;/p&gt;&#xA;&lt;p&gt;本备忘单概述了数据库扩展的基本技术。从通过索引优化查询性能到通过水平扩展跨多个服务器分布数据，每个部分都涵盖了数据库管理的一个关键方面。无论您正在处理快速增长的应用程序还是为未来的增长做准备，了解这些策略都将帮助您做出明智的决策，以确保您的数据库保持稳健和响应能力。&lt;/p&gt;</description>
      <pubDate>Mon, 16 Sep 2024 17:00:05 +0000</pubDate>
    </item>
  </channel>
</rss>