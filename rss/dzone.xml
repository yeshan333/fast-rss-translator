<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Understanding Prometheus Metric Types: A Guide for Beginners】了解 Prometheus 指标类型：初学者指南</title>
      <link>https://dzone.com/articles/understanding-prometheus-metric-types</link>
      <description>【&lt;p&gt;&lt;a href=&#34;https://prometheus.io/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Prometheus&lt;/a&gt; is a tool that helps you track how your systems are working. Think of it as a tool that collects numbers about your applications and servers. This guide will help you understand the different types of metrics and how to use them.&lt;/p&gt;&#xA;&lt;h2&gt;The Four Basic Types of Prometheus Metrics&lt;/h2&gt;&#xA;&lt;h3&gt;1. Counters - Numbers That Only Go Up&lt;/h3&gt;&#xA;&lt;p&gt;A counter is a number that &lt;strong&gt;only goes up or resets to zero on restart&lt;/strong&gt;, just like a car&#39;s odometer that keeps adding miles. It&#39;s perfect for tracking things that only increase, like total API requests, error counts, or tasks completed. When a counter resets to zero (like during a system restart), Prometheus can detect this reset and handle calculations correctly. Counters are the simplest metric type and should be used whenever you&#39;re counting the total occurrences of something.&lt;/p&gt;】&lt;p&gt;&lt;a href=&#34;https://prometheus.io/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Prometheus&lt;/a&gt; 是一款帮助您跟踪系统运行情况的工具。将其视为收集有关应用程序和服务器的数据的工具。本指南将帮助您了解不同类型的指标以及如何使用它们。&lt;/p&gt;&#xA;&lt;h2&gt;普罗米修斯指标的四种基本类型&lt;/h2&gt;&#xA;&lt;h3&gt;1。计数器 - 只会上升的数字&lt;/h3&gt;&#xA;&lt;p&gt;计数器是一个&lt;strong&gt;仅在重新启动时增加或重置为零&lt;/strong&gt;的数字，就像汽车的里程表不断增加里程一样。它非常适合跟踪只会增加的事物，例如 API 请求总数、错误计数或已完成的任务。当计数器重置为零时（例如在系统重新启动期间），Prometheus 可以检测到此重置并正确处理计算。计数器是最简单的指标类型，每当您计算某事物的总出现次数时都应该使用计数器。&lt;/p&gt;</description>
      <pubDate>Mon, 09 Dec 2024 20:00:05 +0000</pubDate>
    </item>
    <item>
      <title>【Personal Branding for Software Engineers: Why It Matters and How to Start Today】软件工程师的个人品牌：为什么重要以及如何从今天开始</title>
      <link>https://dzone.com/articles/personal-branding-for-software-engineers</link>
      <description>【&lt;p&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;When we think about software engineers, the focus often lands squarely on technical skills — writing efficient code, solving complex problems, and understanding algorithms. However, this narrow view overlooks a critical element that can make or break a career: personal branding.&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;This oversight is a mistake I made early in my career.&amp;nbsp;&lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;I believed my&lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;&amp;nbsp;technical abilities alone would lead to success, promotions, and recognition.&lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;&amp;nbsp;But over time, I realized that while being skilled at software design and architecture is essential, it is only part of the equation.&lt;/span&gt;&lt;/p&gt;】&lt;p&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;当我们想到软件工程师时，重点往往直接集中在技术技能上——编写高效的代码、解决复杂的问题和理解算法。然而，这种狭隘的观点忽视了一个可以成就或毁掉职业生涯的关键因素：个人品牌。&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;这种疏忽是我在职业生涯早期犯下的错误。 &lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;我相信我的&lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;仅靠技术能力就能带来成功、晋升和认可。&lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;我相信我的技术能力就能带来成功、晋升和认可。 span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt; 但随着时间的推移，我意识到，虽然精通软件设计和架构很重要，但它只是等式的一部分。&lt;/span&gt;&lt;/p&gt;</description>
      <pubDate>Mon, 09 Dec 2024 19:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Building a Google Calendar-like Component Using Plain JavaScript】使用纯 JavaScript 构建类似 Google 日历的组件</title>
      <link>https://dzone.com/articles/building-a-google-calendar-like-component-using-javascript</link>
      <description>【&lt;p&gt;Calendars have become an indispensable part of modern web applications as they enable users to organize, schedule, and track events seamlessly. Whether you’re building a project management tool, an event scheduling app, or a personal productivity suite, a custom calendar component can greatly enhance the user experience. While numerous pre-built calendar libraries exist, creating your own component can provide the flexibility to meet specific design and functionality requirements.&lt;/p&gt;&#xA;&lt;p&gt;In this tutorial, we’ll explore how to build a Google Calendar-like component using &lt;a href=&#34;https://dzone.com/articles/the-role-of-javascript-in-front-end-and-back-end-d&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;JavaScript&lt;/a&gt;. By the end of this guide, you’ll have a fully functional calendar with interactive features and a deeper understanding of how to construct reusable components for your web applications. Whether you&#39;re a developer looking to add a unique touch to your project or someone eager to learn the inner workings of calendar functionalities, this step-by-step walkthrough will be invaluable. Let’s get started!&lt;/p&gt;】&lt;p&gt;日历已成为现代 Web 应用程序不可或缺的一部分，因为它们使用户能够无缝地组织、安排和跟踪事件。无论您是构建项目管理工具、事件安排应用程序还是个人生产力套件，自定义日历组件都可以极大地增强用户体验。虽然存在许多预构建的日历库，但创建您自己的组件可以提供满足特定设计和功能要求的灵活性。&lt;/p&gt;&#xA;&lt;p&gt;在本教程中，我们将探索如何使用 &lt;a href=&#34;https://dzone.com/articles/the-role-of-javascript-in-front-end- 构建类似 Google 日历的组件and-back-end-d&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;JavaScript&lt;/a&gt;。读完本指南后，您将拥有一个功能齐全的日历，具有交互式功能，并能更深入地了解如何为 Web 应用程序构建可重用组件。无论您是希望为项目添加独特风格的开发人员，还是渴望了解日历功能内部工作原理的开发人员，此分步演练都将非常有价值。让我们开始吧！&lt;/p&gt;</description>
      <pubDate>Mon, 09 Dec 2024 15:00:04 +0000</pubDate>
    </item>
    <item>
      <title>【Chunking Strategies for Optimizing Large Language Models (LLMs)】优化大型语言模型 (LLM) 的分块策略</title>
      <link>https://dzone.com/articles/chunking-strategies-for-optimizing-llms</link>
      <description>【&lt;p&gt;Large language models (LLMs)&lt;span&gt;&amp;nbsp;&lt;span class=&#34;sr-only&#34;&gt;(opens new window)&lt;/span&gt;&lt;/span&gt;have transformed the natural language processing (NLP&lt;strong&gt;)&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;span class=&#34;sr-only&#34;&gt;(new window)&lt;/span&gt;&lt;/span&gt;domain by generating human-like text, answering complex questions, and analyzing large amounts of information with impressive accuracy. Their ability to process diverse queries and produce detailed responses makes them invaluable across many fields, from customer service to medical research. However, as LLMs scale to handle more data, they encounter challenges in managing long documents and retrieving only the most relevant information efficiently.&lt;/p&gt;&#xA;&lt;p&gt;Although LLMs are good at processing and generating human-like text, they have a limited &#34;context window.&#34; This means they can only keep a certain amount of information in memory at one time, which makes it hard to manage very long documents. It&#39;s also challenging for LLMs to quickly find the most relevant information from large datasets. On top of this, LLMs are trained on fixed data, so they can become outdated as new information appears. To stay accurate and useful, they need regular updates.&lt;/p&gt;】&lt;p&gt;大型语言模型 (LLM)&lt;span&gt; &lt;span class=&#34;sr-only&#34;&gt;（打开新窗口）&lt;/span&gt;&lt;/span&gt;改变了自然语言处理 (NLP&lt;strong&gt;)&lt;/strong &gt;&lt;span&gt; &lt;span class=&#34;sr-only&#34;&gt;（新窗口）&lt;/span&gt;&lt;/span&gt;领域，通过生成类似人类的文本、回答复杂问题并以令人印象深刻的准确性分析大量信息。他们处理各种查询并生成详细答复的能力使他们在从客户服务到医学研究的许多领域都具有无价的价值。然而，随着法学硕士规模扩大以处理更多数据，他们在管理长文档和高效检索最相关的信息方面遇到了挑战。&lt;/p&gt;&#xA;&lt;p&gt;尽管法学硕士擅长处理和生成类似人类的文本，但它们的“上下文窗口”有限。这意味着它们一次只能在内存中保存一定量的信息，这使得管理很长的文档变得困难。对于法学硕士来说，从大型数据集中快速找到最相关的信息也具有挑战性。最重要的是，法学硕士接受固定数据的培训，因此随着新信息的出现，它们可能会变得过时。为了保持准确和有用，它们需要定期更新。&lt;/p&gt;</description>
      <pubDate>Mon, 09 Dec 2024 21:00:01 +0000</pubDate>
    </item>
    <item>
      <title>【Building Secure Containers: Reducing Vulnerabilities With Clean Base Images】构建安全的容器：通过干净的基础映像减少漏洞</title>
      <link>https://dzone.com/articles/reducing-vulnerabilities-using-clean-base-image</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;In today’s fast-paced development environment, &lt;a href=&#34;https://dzone.com/articles/introduction-to-containerization&#34;&gt;containerized applications&lt;/a&gt; have become the go-to solution for many organizations. They offer scalability, portability, and efficiency. However, containerized environments also bring their own set of challenges, particularly when it comes to &lt;a href=&#34;https://dzone.com/articles/container-security-dont-let-your-guard-down&#34;&gt;security vulnerabilities&lt;/a&gt;. One of the most effective ways to mitigate these risks is by focusing on the base images used for containers.&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;Why Base Images Matter&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;The base image serves as the foundation for every container. If the base image contains vulnerabilities, they are inherited by every container built on top of it. This can expose your application to potential attacks despite layers of security built into the infrastructure. Therefore, choosing clean, vulnerability-free base images is critical to &lt;a href=&#34;https://dzone.com/articles/a-practical-guide-for-container-security&#34;&gt;securing your containerized applications&lt;/a&gt;.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;在当今快节奏的开发环境中，&lt;a href=&#34;https://dzone.com/articles/introduction-to-containerization&#34;&gt;容器化应用程序&lt;/a&gt;已成为首选许多组织的解决方案。它们提供可扩展性、可移植性和效率。然而，容器化环境也带来了自己的一系列挑战，特别是在&lt;a href=&#34;https://dzone.com/articles/container-security-dont-let-your-guard-down&#34;&gt;安全漏洞&lt; /a&gt;.减轻这些风险的最有效方法之一是关注用于容器的基础映像。&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;为什么基础镜像很重要&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;基础镜像是每个容器的基础。如果基础镜像包含漏洞，则构建在其之上的每个容器都会继承这些漏洞。尽管基础设施内置了安全层，但这仍可能使您的应用程序面临潜在的攻击。因此，选择干净、无漏洞的基础映像对于&lt;a href=&#34;https://dzone.com/articles/a-practical-guide-for-container-security&#34;&gt;保护容器化应用程序&lt;/a&gt;至关重要。 &lt;/p&gt;</description>
      <pubDate>Mon, 09 Dec 2024 22:00:05 +0000</pubDate>
    </item>
    <item>
      <title>【Beyond ChatGPT: How Generative AI Is Transforming Software Development】超越 ChatGPT：生成式 AI 如何改变软件开发</title>
      <link>https://dzone.com/articles/how-generative-ai-is-transforming-software-development</link>
      <description>【&lt;p&gt;Look, I&#39;ll be honest — when my team first started using AI coding assistants last year, I was skeptical — &lt;em&gt;really&lt;/em&gt; skeptical. After 15 years of writing code, I didn&#39;t believe a language model could meaningfully help with real development work. Six months later, I had to eat my words. Our team&#39;s velocity increased by roughly 40%, and our code quality metrics actually improved.&lt;/p&gt;&#xA;&lt;p&gt;But here&#39;s the thing - it&#39;s not as simple as &#34;AI makes coding easier.&#34; The reality is more nuanced, more interesting, and frankly, more useful than the marketing hype suggests.&lt;/p&gt;】&lt;p&gt;说实话，当我的团队去年第一次开始使用人工智能编码助手时，我对此表示怀疑 - &lt;em&gt;真的&lt;/em&gt;持怀疑态度。经过 15 年的代码编写之后，我不相信语言模型能够对真正的开发工作产生有意义的帮助。六个月后，我不得不食言。我们团队的速度提高了大约 40%，并且我们的代码质量指标实际上得到了提高。&lt;/p&gt;&#xA;&lt;p&gt;但事情是这样的 - 它并不像“人工智能让编码变得更容易”那么简单。现实比营销炒作所暗示的更微妙、更有趣，而且坦率地说，也更有用。&lt;/p&gt;</description>
      <pubDate>Mon, 09 Dec 2024 18:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【A Developer’s Guide to Multithreading and Swift Concurrency】多线程和 Swift 并发开发人员指南</title>
      <link>https://dzone.com/articles/a-developers-guide-to-multithreading-and-swift-concurrency</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Multithreading is a complex yet essential topic in software development. It allows programs to perform multiple tasks simultaneously, which is critical for creating efficient and responsive applications. However, managing multiple threads and ensuring their smooth interaction can be challenging, especially when it comes to avoiding conflicts or maintaining synchronization.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;This article is designed to give you a high-level overview of multithreading and the tools available to work with it. We’ll explore the key concepts and features that help developers handle concurrent tasks more effectively. Whether you’re just getting started or looking for a quick refresher, this guide will provide a clear starting point for understanding and working with multithreading.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;多线程是软件开发中一个复杂但重要的主题。它允许程序同时执行多个任务，这对于创建高效且响应迅速的应用程序至关重要。然而，管理多个线程并确保它们的平滑交互可能具有挑战性，特别是在避免冲突或保持同步时。&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;本文旨在为您提供多线程及其可用工具的高级概述。我们将探讨帮助开发人员更有效地处理并发任务的关键概念和功能。无论您是刚刚入门还是想要快速复习，本指南都将为理解和使用多线程提供一个清晰的起点。&lt;/p&gt;</description>
      <pubDate>Mon, 09 Dec 2024 17:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Setting Up Failover Slots in PostgreSQL-17】在 PostgreSQL-17 中设置故障转移插槽</title>
      <link>https://dzone.com/articles/setting-up-failover-slots-in-postgresql-17</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;PostgreSQL 17 introduces failover slots that enhance high-availability setups. A replication slot ensures that data remains reliable and consistent between nodes during replication, whereas a failover slot ensures consistency between nodes, specifically during and after a failover.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Failover slots are a powerful feature that ensures logical replication can continue seamlessly, even after a failover to a standby server. Using failover slots allows logical replication slots to be automatically synchronized across primary and standby nodes, significantly reducing downtime and the need for manual intervention during a failover.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;PostgreSQL 17 引入了增强高可用性设置的故障转移插槽。复制槽确保复制期间节点之间的数据保持可靠和一致，而故障转移槽则确保节点之间的一致性，特别是在故障转移期间和之后。&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;故障转移槽是一项强大的功能，即使在故障转移到备用服务器之后，也能确保逻辑复制能够无缝继续。使用故障转移槽允许逻辑复制槽在主节点和备用节点之间自动同步，从而显着减少故障转移期间的停机时间和手动干预的需要。&lt;/p&gt;</description>
      <pubDate>Mon, 09 Dec 2024 14:00:06 +0000</pubDate>
    </item>
    <item>
      <title>【Leveraging Golang for Modern ETL Pipelines】利用 Golang 实现现代 ETL 管道</title>
      <link>https://dzone.com/articles/leveraging-golang-for-modern-etl-pipelines</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;The first time I had to work on a high-performance ETL pipeline for processing terabytes of smart city sensor data, traditional stack recommendations overwhelmed me. Hadoop, Spark, and other heavyweight solutions seemed like bringing a tank to a street race. That&#39;s when I discovered Golang, and it fundamentally changed how I approach ETL architecture.&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;Understanding Modern ETL Requirements&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;ETL has undergone a sea of change in the last decade. Gone are the days when batch processing would run fine at night. The kind of applications that are being written now require real-time processing, streaming, and support of all sorts of data formats while maintaining performance and reliability.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;我第一次使用高性能 ETL 管道来处理 TB 级的智能城市传感器数据时，传统的堆栈建议让我不知所措。 Hadoop、Spark 和其他重量级解决方案看起来就像是开着一辆坦克参加街头比赛。就在那时，我发现了 Golang，它从根本上改变了我处理 ETL 架构的方式。&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;了解现代 ETL 要求&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;ETL 在过去十年中经历了巨大的变化。批处理在夜间正常运行的日子已经一去不复返了。现在正在编写的应用程序类型需要实时处理、流式传输以及支持各种数据格式，同时保持性能和可靠性。&lt;/p&gt;</description>
      <pubDate>Mon, 09 Dec 2024 16:00:06 +0000</pubDate>
    </item>
    <item>
      <title>【How Relevant Is Chaos Engineering Today?】混沌工程在今天有多重要？</title>
      <link>https://dzone.com/articles/how-relevant-is-chaos-engineering-today</link>
      <description>【&lt;p&gt;&amp;nbsp;The rapid advancement of software systems, fuelled by the adoption of microservices and cloud architectures, has significantly increased complexity and unpredictability. As modern enterprises become more reliant on these distributed systems, the risk of unexpected failures and service disruptions has grown. In response to these challenges, a transformative approach has emerged called Chaos Engineering.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/chaos-engineering-tutorial-comprehensive-guide-wit&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Chaos Engineering&lt;/a&gt; has gained momentum in software development, with its origins rooted in experiments by tech leaders like Netflix and Amazon. This practice involves deliberately introducing controlled disruptions into production systems to evaluate their resilience and uncover vulnerabilities. However, as software systems continue to evolve, the practice of Chaos Engineering is being reconsidered and refined.&lt;/p&gt;】&lt;p&gt; 在微服务和云架构的采用的推动下，软件系统的快速发展显着增加了复杂性和不可预测性。随着现代企业越来越依赖这些分布式系统，意外故障和服务中断的风险也随之增加。为了应对这些挑战，出现了一种称为混沌工程的变革性方法。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/chaos-engineering-tutorial-compressive-guide-wit&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;混沌工程&lt;/a&gt;已获得软件开发的动力，其起源源于 Netflix 和亚马逊等技术领导者的实验。这种做法涉及故意将受控中断引入生产系统，以评估其弹性并发现漏洞。然而，随着软件系统的不断发展，混沌工程的实践正在被重新考虑和完善。&lt;/p&gt;</description>
      <pubDate>Mon, 09 Dec 2024 13:00:05 +0000</pubDate>
    </item>
  </channel>
</rss>