<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Continuous Quality Engineering: The Convergence of CI/CD, Chaos Testing, and AI-Powered Test Orchestration】连续质量工程：CI/CD，混乱测试和AI驱动测试编排的收敛性</title>
      <link>https://dzone.com/articles/antifragile-software-cqe-chaos-testing-ai</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Software development requires more than minimal improvements since software engineers must reform their methods toward quality development, speedy development, and resilient systems. A groundbreaking approach to system development in uncertain situations arises when CI/CD pipeline chaos testing combines AI-driven orchestration tactics.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Software delivery systems achieve superior results when antifragility features are integrated into their blueprint development stage through design. The financial costs stemming from software failures in &lt;a href=&#34;https://www.devprojournal.com/software-development-trends/software-testing/the-latest-insights-into-the-costs-of-bad-code/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;2022 resulted in $2.41 trillion of losses for U.S. companies&amp;nbsp;&lt;/a&gt;because of subpar software quality. &amp;nbsp;&lt;/p&gt;】&lt;p dir =“ ltr”&gt;软件开发所需的不仅仅是最小的改进，因为软件工程师必须改革其质量开发，快速开发和弹性系统的方法。当CI/CD管道混乱测试结合了AI驱动的编排策略时，在不确定情况下进行系统开发的开创性方法。 &lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;软件输送系统在通过设计集成到其蓝图开发阶段中时获得了卓越的结果。 The financial costs stemming from software failures in &lt;a href=&#34;https://www.devprojournal.com/software-development-trends/software-testing/the-latest-insights-into-the-costs-of-bad-code/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;2022 resulted in $2.41 trillion of losses for U.S.公司&lt;/a&gt;由于低于标准的软件质量。  &lt;/p&gt;</description>
      <pubDate>Wed, 09 Jul 2025 11:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【The AWS Playbook for Building Future-Ready Data Systems】AWS剧本用于构建未来的数据系统</title>
      <link>https://dzone.com/articles/six-pillars-of-modern-data-infrastructure-in-aws</link>
      <description>【&lt;p data-end=&#34;597&#34; data-start=&#34;418&#34;&gt;Data infrastructure isn’t just about storage or speed—it’s about trust, scalability, and delivering actionable insights at the speed of business.Whether you&#39;re modernizing legacy systems or starting from scratch, this series will provide the clarity and confidence to build robust, future-ready data infrastructure.&lt;/p&gt;&#xA;&lt;h2 data-end=&#34;1550&#34; data-start=&#34;1509&#34;&gt;&lt;strong data-end=&#34;1550&#34; data-start=&#34;1512&#34;&gt;Why Modernize Data Infrastructure?&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p data-end=&#34;1751&#34; data-start=&#34;1552&#34;&gt;Traditionally, data infrastructure was seen as a back-office function. Teams poured data into massive warehouses and hoped insights would emerge. However, the &lt;strong data-end=&#34;1750&#34; data-start=&#34;1711&#34;&gt;landscape has fundamentally changed&lt;/strong&gt;:&lt;/p&gt;】&lt;p data-end =“ 597” data-start =“ 418”&gt;数据基础架构不仅与存储或速度有关 - 它是关于信任，可扩展性和以业务速度提供可行的洞察力。您是否正在现代化遗产系统或从Scratch开始，该系列将提供稳健的，未来的数据基础架构的清晰度和自信心&#xA;&lt;h2 data-end =“ 1550” data-start =“ 1509”&gt; &lt;strong data-end =“ 1550” data-start =“ 1512”&gt;为什么现代化数据基础结构？&lt;/strong&gt; &lt;/h2&gt;&#xA;&lt;p data-end =“ 1751” data-start =“ 1552”&gt;传统上，数据基础架构被视为后台函数。团队将数据倾注到大量的仓库中，并希望见解会出现。但是，&lt;strong data-end =“ 1750” data-start =“ 1711”&gt;景观从根本上改变了&lt;/strong&gt;：&lt;/p&gt;</description>
      <pubDate>Wed, 09 Jul 2025 15:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Breaking Free from ZooKeeper: Why Kafka’s KRaft Mode Matters】从Zookeeper中解脱出来：为什么Kafka的牛皮模式很重要</title>
      <link>https://dzone.com/articles/kafka-kraft-vs-zookeeper</link>
      <description>【&lt;p data-selectable-paragraph=&#34;&#34;&gt;Any modern distributed system which requires high throughput, scaling, high availability etc., utilizes &lt;a href=&#34;https://dzone.com/refcardz/apache-kafka&#34;&gt;Kafka&lt;/a&gt; as one of its component. Thus, making Kafka a popular platform which need no introduction for itself.&lt;/p&gt;&#xA;&lt;p data-selectable-paragraph=&#34;&#34;&gt;However even though being an integral part of Kafka, Apache &lt;a href=&#34;https://dzone.com/articles/internal-components-of-apache-zookeeper&#34;&gt;ZooKeeper&lt;/a&gt; is neither explored nor understood as much it should have. In this article we would briefly touch upon these aspects, and understand the next generation &lt;a href=&#34;https://dzone.com/articles/running-kafka-in-kubernetes-with-kraft-mode-and-ss&#34;&gt;Kafka via KRaft mode&lt;/a&gt; and the benefits it bring over ZooKeeper.&lt;/p&gt;】&lt;p data-selectable-paragraph =“”&gt;任何需要高吞吐量，缩放，高可用性等的现代分布式系统，它利用&lt;a href =“ https://dzone.com/refcardz/refcardz/apache-kafka”&gt; kafka &lt;/a&gt;作为其组成部分之一。因此，使Kafka成为一个受欢迎的平台，不需要自身介绍。&lt;/p&gt;&#xA;&lt;p data-selectable-paragraph =“”&gt;但是，即使是kafka的组成部分，apache &lt;a href =“ https://dzone.com/articles/internal-components/internal-components-op--apache-apache-zookeeper”&gt; w&gt; zookeeper&#39;&gt; zookeeper &lt;/a&gt;既不是探索或不像它那样理解的。在本文中，我们将简要介绍这些方面，并了解下一代&lt;a href =“ https://dzone.com/articles/running-kafka-innunning-kafka-in-kubernetes-with-kraft-kraft-mode-and-and-ss，-kafka&gt; kafka”&gt; kafka“通过kraft模式&lt;/a&gt;及其带来的好处。</description>
      <pubDate>Wed, 09 Jul 2025 20:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Advanced Insight Generation: Revolutionizing Data Ingestion for AI-Powered Search】高级洞察力生成：革命性的数据摄入AI驱动搜索</title>
      <link>https://dzone.com/articles/ai-search-azure-openai-document-indexing</link>
      <description>【&lt;p&gt;Effectively using unstructured information is crucial for businesses aiming to stay competitive. Traditional data ingestion methods often struggle to maintain data quality and relevance, particularly when preparing massive datasets for AI-driven chat applications. Standard text parsers treat documents as simple text, ignoring complex structures like tables, figures, and hierarchical sections. This leads to significant context loss and misinterpretations, ultimately hindering the performance of &lt;a href=&#34;https://dzone.com/articles/mastering-retrieval-augmented-generation&#34;&gt;Retrieval-Augmented Generation (RAG)&lt;/a&gt; systems. Our advanced insight generation approach offers a powerful solution by improving data ingestion and indexing through state-of-the-art AI, dynamic chunking, vector embedding, and intelligent indexing.&lt;/p&gt;&#xA;&lt;h2&gt;Preserving Structure and Context: Intelligent OCR and Document Intelligence&lt;/h2&gt;&#xA;&lt;p&gt;A key innovation in this pipeline is the integration of intelligent &lt;a href=&#34;https://dzone.com/articles/how-to-perform-ocr-on-a-photograph-of-a-receipt-us&#34;&gt;Optical Character Recognition (OCR)&lt;/a&gt; with &lt;a href=&#34;https://dzone.com/articles/build-ai-portal-document-q-and-a-summarization-transcription&#34;&gt;Azure Document Intelligence&lt;/a&gt;. Unlike traditional OCR, our intelligent OCR recognizes complex document layouts, including tables, charts, and multi-column formats. These AI-powered capabilities preserve the original structure and hierarchy of the content, ensuring that crucial contextual information is retained. Document Intelligence further enhances this process by:&lt;/p&gt;】&lt;p&gt;有效地使用非结构化信息对于旨在保持竞争力的企业至关重要。传统的数据摄入方法通常难以维持数据质量和相关性，尤其是在为AI驱动的聊天应用程序准备大量数据集时。标准文本解析器将文档视为简单的文本，忽略了诸如表，图形和层次结构的复杂结构。这导致了严重的背景损失和误解，最终阻碍了&lt;a href =“ https://dzone.com/articles/mastering-retreval-aigmented-generation”&gt;检索效果（RAG）&lt;/a&gt;系统。我们的高级洞察生成方法通过通过最新的AI，动态的块，矢量嵌入和智能索引来改善数据摄入和索引来提供强大的解决方案。&lt;/p&gt;&#xA;&lt;H2&gt;保存结构和上下文：智能OCR和文档智能&lt;/h2&gt;&#xA;&lt;p&gt;这条管道中的关键创新是智能&lt;a href =“ https://dzone.com/articles/how-to-to-perform-ocr-ocr-ocr-ocr-ocr-ocr-a-photograph-of-a-receipt-us”&gt;光学角色识别（OCR）&lt;/a&gt; href =“ https://dzone.com/articles/build-ai-portal-document-q-and-a-summarization-transcription”&gt; azure文档智能&lt;/a&gt;。与传统的OCR不同，我们智能的OCR识别复杂的文档布局，包括表，图表和多列格式。这些AI驱动的功能保留了内容的原始结构和层次结构，以确保保留关键的上下文信息。文档智能进一步增强了此过程：&lt;/p&gt;</description>
      <pubDate>Wed, 09 Jul 2025 17:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Exploring Data Redaction Enhancements in Oracle Database 23ai】探索Oracle数据库23AI中的数据修订增强功能</title>
      <link>https://dzone.com/articles/oracle-data-redaction-updates-23ai</link>
      <description>【&lt;p&gt;Data redaction, a feature introduced in Oracle Database 12c as part of the Advanced Security Option (ASO), continues to evolve in Oracle Database 23ai (23.6). Oracle has significantly enhanced the &lt;code&gt;DBMS_REDACT&lt;/code&gt; package in this release, offering improved flexibility and SQL compatibility for redacted columns. These enhancements enable redaction policies to integrate more smoothly with modern SQL constructs, removing the errors and limitations that previously constrained their use.&lt;/p&gt;&#xA;&lt;p&gt;This article provides an in-depth walkthrough of these new capabilities using practical SQL examples. It is essential to understand that redaction under the &lt;code&gt;DBMS_REDACT&lt;/code&gt; package is a chargeable option unless you are on Oracle Autonomous Database, where it’s available at no extra cost.&lt;/p&gt;】&lt;p&gt; Data Redaction是Oracle数据库12C中引入的功能，作为高级安全选项（ASO）的一部分，它继续在Oracle数据库23AI（23.6）中演变。 Oracle在此版本中显着增强了&lt;code&gt; dbms_redact &lt;/code&gt;软件包，为已编辑列提供了提高的灵活性和SQL兼容性。这些增强功能使重新策略能够与现代SQL构建体更平稳地集成，从而消除了以前限制其使用的错误和局限性。&lt;/p&gt;&#xA;&lt;p&gt;本文使用实用的SQL示例，提供了这些新功能的深入演练。必须了解，除非您在Oracle自主数据库中，否则在&lt;code&gt; dbms_redact下进行的重新处理是一个可收费的选项，该数据库无需额外费用。&lt;/p&gt;。&lt;/p&gt;</description>
      <pubDate>Wed, 09 Jul 2025 19:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Testing Java Applications With WireMock and Spring Boot】用Wiremock和Spring Boot测试Java应用程序</title>
      <link>https://dzone.com/articles/testing-java-applications-wiremock-spring-boot</link>
      <description>【&lt;div&gt;&#xA; &lt;p&gt;Your application has an integration with another system. In your unit integration tests, you want to mock the other system&#39;s behaviour. WireMock is a testing library that helps you with mocking the APIs you depend on. In this blog, you will explore WireMock for testing a Spring Boot application. Enjoy!&lt;/p&gt;&#xA; &lt;h2&gt;Introduction&lt;/h2&gt;&#xA; &lt;p&gt;Almost every application has an integration with another system. This integration needs to be tested, of course. &lt;a href=&#34;https://dzone.com/articles/easy-integration-testing-with-testcontainers&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Testcontainers&lt;/a&gt; are a good choice for writing unit integration tests. This way, your application will talk to a real system in your tests.&amp;nbsp;&lt;/p&gt;】&lt;div&gt;&#xA; &lt;p&gt;您的应用程序与另一个系统具有集成。在您的单元集成测试中，您想模拟另一个系统的行为。 WireMock是一个测试库，可帮助您嘲笑所依赖的API。在此博客中，您将探索用于测试Spring Boot应用程序的WireMock。享受！&lt;/p&gt;&#xA; &lt;h2&gt;简介&lt;/h2&gt;&#xA; &lt;p&gt;几乎每个应用程序都与另一个系统集成。当然，需要测试这种集成。 &lt;a href =“ https://dzone.com/articles/easy-integration-testing-with-testcontainers” rel =“ noopener noreferrer” target =“ _ black”&gt; testContainers &lt;/a&gt;是写单位集成测试的好选择。这样，您的应用程序将与您的测试中的真实系统交谈。 &lt;/p&gt;</description>
      <pubDate>Wed, 09 Jul 2025 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【The Agile Paradox】敏捷悖论</title>
      <link>https://dzone.com/articles/the-agile-paradox</link>
      <description>【&lt;h2&gt;TL; DR: The Agile Paradox&lt;/h2&gt;&#xA;&lt;p&gt;Many companies adopt Agile practices like Scrum but fail to achieve true transformation. This “Agile Paradox” occurs because they implement tactical processes without changing their underlying command-and-control structure, culture, and leadership style.&lt;/p&gt;&#xA;&lt;p&gt;True agility requires profound systemic changes to organizational design, leadership, and technical practices, not just performing rituals. Without this fundamental shift from “doing” to “being” agile, transformations stall, and the promised benefits remain unrealized.&lt;/p&gt;】&lt;H2&gt; TL; DR：敏捷悖论&lt;/h2&gt;&#xA;&lt;p&gt;许多公司采用诸如Scrum之类的敏捷实践，但无法实现真正​​的转型。这种“敏捷悖论”之所以发生，是因为它们在不改变其基本的指挥结构，文化和领导风格的情况下实施战术过程。&lt;/p&gt;&#xA;&lt;p&gt;真正的敏捷性需要对组织设计，领导力和技术实践的深刻系统性更改，而不仅仅是执行仪式。如果没有从“做”到“敏捷”的基本转变，转型摊位和应许的好处仍然没有实现。&lt;/p&gt; &lt;/p&gt;</description>
      <pubDate>Wed, 09 Jul 2025 14:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Stop Prompt Hacking: How I Connected My AI Agent to Any API With MCP】停止提示hacking：我如何将我的AI代理与MCP连接到任何API</title>
      <link>https://dzone.com/articles/ai-agents-api-integration-with-mcp</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;In Part 1 of this series, I laid out the high-level architecture for my &#34;InstaVibe Ally&#34; and made the case for &lt;a href=&#34;https://dzone.com/articles/multi-agent-ai-vs-monolithic&#34;&gt;building a team of specialist AI agents instead of a single, monolithic brain&lt;/a&gt;. I sketched out a system where an Orchestrator delegates tasks to a Social Profiler, a Planner, and a Platform Interaction Agent.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Now, I&#39;m going to zoom in on one of the most critical, practical challenges you’ll face: How do you actually let your agent use your application&#39;s APIs?&lt;/p&gt;】&lt;p dir =“ ltr”&gt;在本系列的第1部分中，我为“ Instavibe Ally”的高级架构列出了&lt;a href =“ https://dzone.com/articles/articles/mmulti-agent-agent-agent-agent-ai-ai-ai-ai-ai-vs-monolithic一下”&gt;构建专家AI Agents Aim ai Agents而不是单个单身小脑&lt;/&lt;/brinailic &lt;/agh/nakity &lt;/hrevibe ally。我绘制了一个系统，编排编排将任务委派给社交探索者，计划者和平台交互代理。&lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;现在，我要缩小您将面临的最关键，最实际的挑战之一：您实际上如何让代理商使用应用程序的API？&lt;/p&gt;</description>
      <pubDate>Wed, 09 Jul 2025 12:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【The Battle of the Frameworks: Choosing the Right Tech Stack】框架之战：选择正确的技术堆栈</title>
      <link>https://dzone.com/articles/how-to-choose-the-right-tech-stack</link>
      <description>【&lt;p&gt;When Twitter (now X) was launched in 2006, it was built using Ruby on Rails, a framework known for its rapid development capabilities. At the time, this choice allowed Twitter to quickly scale and expand during its early days. However, as the platform&#39;s user base grew exponentially, its initial tech stack began to show limitations. By 2008, Twitter&#39;s architecture was struggling to keep pace with the increasing volume of users, tweets, and data.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;The result? Frequent outages and performance issues that hindered user experience and stifled growth.&lt;/p&gt;】&lt;p&gt;当Twitter（现为X）于2006年推出时，它是使用Ruby on Rails建造的，Ruby on Rails是该框架，该框架以其快速的开发能力而闻名。当时，这种选择使Twitter在早期的早期就可以快速扩展和扩展。但是，随着平台的用户群呈指数增长，其最初的技术堆栈开始显示出局限性。到2008年，Twitter的架构正在努力与越来越多的用户，推文和数据保持同步。 &lt;/p&gt;&#xA;&lt;p&gt;结果？频繁的停电和性能问题阻碍了用户体验并扼杀了增长。&lt;/p&gt;</description>
      <pubDate>Wed, 09 Jul 2025 13:00:04 +0000</pubDate>
    </item>
    <item>
      <title>【Run Scalable Python Workloads With Modal】使用模态运行可扩展的Python工作负载</title>
      <link>https://dzone.com/articles/modal-python-cloud-platform</link>
      <description>【&lt;p&gt;Nowadays, most projects that utilize &lt;a href=&#34;https://dzone.com/articles/serverless-machine-learning-ai-models&#34;&gt;Artificial Intelligence (AI) models&lt;/a&gt; demand significant computational resources. Almost each time a new model comes out, and outperforms previous ones, it seems to require more computational resources to run efficiently. A lot of people will say that there are exceptions, such as the &lt;strong&gt;DeepSeek&lt;/strong&gt; model, but that is not actually true. Models like DeepSeek are competitive with larger models but are not better than them. At least at this point, size seems to be directly correlated with the power of a model.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;Traditionally, deploying AI at scale meant managing a very complex infrastructure, from provisioning servers or clusters to writing deployment scripts and even managing cloud-specific services. However, this overhead has not only become a major pain point for a lot of ML teams but has also become a limiting factor, stopping them from trying out new models and constraining their creativity. To avoid these limiting factors we need to adapt our approach, and this is exactly what Modal enables us to do as a unified cloud platform for running code for data and AI tasks.&amp;nbsp;&lt;/p&gt;】&lt;p&gt;如今，大多数使用&lt;a href =“ https://dzone.com/articles/serverless-machine-learning-ai-models”&gt;人工智能（AI）模型&lt;/a&gt;需要大量计算资源的项目。几乎每次出现新模型时，都胜过先前的模型时，似乎需要更多的计算资源才能有效运行。很多人会说有例外，例如&lt;strong&gt; deepseek &lt;/strong&gt;模型，但这实际上并非如此。像DeepSeek这样的模型具有更大的模型竞争力，但并不比它们更好。至少在这一点上，大小似乎与模型的功率直接相关。 &lt;/p&gt;&#xA;&lt;p&gt;传统上，大规模部署AI意味着管理一个非常复杂的基础架构，从提供服务器或群集到编写部署脚本，甚至管理特定云的服务。但是，这个开销不仅成为许多ML团队的主要痛苦点，而且也已成为一个限制因素，阻止他们尝试新的模型并限制其创造力。为了避免这些限制因素，我们需要适应我们的方法，这正是模态使我们能够作为统一的云平台来运行数据和AI任务的代码。 &lt;/p&gt;</description>
      <pubDate>Wed, 09 Jul 2025 18:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>