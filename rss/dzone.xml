<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Dapr and Service Meshes: Better Together】Dapr 和服务网格：更好的结合</title>
      <link>https://dzone.com/articles/dapr-and-service-meshes-better-together</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;There are many reasons why Kubernetes is a popular container runtime platform for distributed applications. One of these reasons is the portability and flexibility that it provides to IT architects. However, the difficulties of service discovery, infrastructure reliability, and security are known challenges that result from these benefits. From challenges, opportunities are created, and many tools have risen to mitigate common problems faced by teams that benefit from containerized applications on Kubernetes.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;A service mesh is a pattern that aims to mitigate some of these challenges when architecting an application on Kubernetes. By providing a dedicated service layer to facilitate service discovery and how applications share information with each other, they provide security, tracing, monitoring, and traffic control.&amp;nbsp;&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;Kubernetes 成为分布式应用程序的流行容器运行时平台有很多原因。原因之一是它为 IT 架构师提供的可移植性和灵活性。然而，服务发现、基础设施可靠性和安全性方面的困难是这些好处带来的已知挑战。从挑战中创造机会，并且出现了许多工具来缓解从 Kubernetes 上的容器化应用程序中受益的团队所面临的常见问题。&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;服务网格是一种模式，旨在缓解在 Kubernetes 上构建应用程序时遇到的一些挑战。通过提供专用服务层来促进服务发现以及应用程序如何彼此共享信息，它们提供安全、跟踪、监控和流量控制。 &lt;/p&gt;</description>
      <pubDate>Tue, 29 Oct 2024 16:00:06 +0000</pubDate>
    </item>
    <item>
      <title>【How to Enhance the Performance of .NET Core Applications for Large Responses】如何针对大型响应增强 .NET Core 应用程序的性能</title>
      <link>https://dzone.com/articles/enhance-the-performance-of-net-core-applications</link>
      <description>【&lt;h2&gt;&lt;strong&gt;Problem Statement&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Our API/application uses the Newtonsoft.Json serializer on &lt;a href=&#34;https://dzone.com/refcardz/coredotnet&#34;&gt;.NET&lt;/a&gt; Core 3 or above, and our response payloads are larger in size. How do we use the .NET code properties and settings to improve &lt;a href=&#34;https://dzone.com/articles/designing-high-performance-apis&#34;&gt;API performance&lt;/a&gt;?&lt;/p&gt;&#xA;&lt;h3&gt;Possible Case Where You Could Have Started Facing the Performance Issue&lt;/h3&gt;&#xA;&lt;p&gt;This issue could have started when you upgraded your API to .NET Core 3.0 or above with the Newtonsoft.Json serializer, or when you created your API with .NET Core 3 or above and using the Newtonsoft.Json serializer.&lt;/p&gt;】&lt;h2&gt;&lt;strong&gt;问题陈述&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;我们的 API/应用程序在 &lt;a href=&#34;https://dzone.com/refcardz/coredotnet&#34;&gt;.NET&lt;/a&gt; Core 3 或更高版本上使用 Newtonsoft.Json 序列化器，并且我们的响应负载更大尺寸。我们如何使用 .NET 代码属性和设置来提高 &lt;a href=&#34;https://dzone.com/articles/designing-high-performance-apis&#34;&gt;API 性能&lt;/a&gt;？&lt;/p&gt;&#xA;&lt;h3&gt;您可能开始面临性能问题的可能情况&lt;/h3&gt;&#xA;&lt;p&gt;当您使用 Newtonsoft.Json 序列化程序将 API 升级到 .NET Core 3.0 或更高版本时，或者当您使用 .NET Core 3 或更高版本并使用 Newtonsoft.Json 序列化程序创建 API 时，可能会出现此问题。&lt;/ p&gt;</description>
      <pubDate>Tue, 29 Oct 2024 18:00:07 +0000</pubDate>
    </item>
    <item>
      <title>【Inside the World of Data Centers】数据中心世界内部</title>
      <link>https://dzone.com/articles/inside-the-world-of-data-centers</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;The computing requirements of algorithms have increased dramatically over the past two decades. In particular, &lt;a href=&#34;https://dzone.com/refcardz/machine-learning-predictive&#34;&gt;machine learning (ML)&lt;/a&gt; algorithms have experienced a growth in computing resource demand that exceeds &lt;a href=&#34;https://dzone.com/articles/service-provider-framework&#34;&gt;Moore’s Law&lt;/a&gt;. While Moore&#39;s Law predicts a doubling of processing power every two years, since 2012, ML algorithms have been doubling in computational demands every 3-4 months (“AI and Compute,” 2018).&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;As a result, running these algorithms on a single computer is nearly impossible or prohibitively expensive. A more practical approach is to break down these algorithms into smaller chunks, and then use many commodity computers to run these smaller blocks. To illustrate this, imagine we are training a machine learning model on a dataset with 1 million entries. Instead of using one computer to process the entire dataset, we could break it into 10 blocks of 100K entries each. We would then use 10 computers, each running the training algorithm on the subset of 100K entries. (&lt;strong&gt;Note&lt;/strong&gt;: For simplicity, I&#39;ve omitted the step of combining the results from these machines, as it’s beyond the scope of this article.)&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;过去二十年来，算法的计算要求急剧增加。特别是，&lt;a href=&#34;https://dzone.com/refcardz/machine-learning-predictive&#34;&gt;机器学习 (ML)&lt;/a&gt; 算法的计算资源需求增长超过了&lt;a href=&#34; https://dzone.com/articles/service-provider-framework&#34;&gt;摩尔定律&lt;/a&gt;。虽然摩尔定律预测处理能力每两年翻一番，但自 2012 年以来，机器学习算法的计算需求每 3-4 个月就会翻一番（“AI 和计算”，2018 年）。&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;因此，在一台计算机上运行这些算法几乎是不可能的，或者成本高昂。更实用的方法是将这些算法分解为更小的块，然后使用许多商用计算机来运行这些更小的块。为了说明这一点，假设我们正在包含 100 万个条目的数据集上训练机器学习模型。我们可以将其分成 10 个块，每个块包含 100K 条目，而不是使用一台计算机来处理整个数据集。然后，我们将使用 10 台计算机，每台计算机在 100K 条目的子集上运行训练算法。 （&lt;strong&gt;注意&lt;/strong&gt;：为了简单起见，我省略了组合这些机器的结果的步骤，因为它超出了本文的范围。）&lt;/p&gt;</description>
      <pubDate>Tue, 29 Oct 2024 21:00:02 +0000</pubDate>
    </item>
    <item>
      <title>【Enhance User Experience With a Formatted Credit Card Input Field】使用格式化的信用卡输入字段增强用户体验</title>
      <link>https://dzone.com/articles/enhance-ux-with-formatted-credit-card-input-field</link>
      <description>【&lt;p&gt;In this article, I will guide you on how to create a credit card input by extending existing &lt;a href=&#34;https://www.zkoss.org/zkdemo/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;ZK components&lt;/a&gt;. Moreover, I&#39;ll apply a customized ZK JavaScript widget to format the card numbers in groups of four digits, improving readability and user experience. Additionally, we&#39;ll integrate a custom &lt;a href=&#34;https://dzone.com/refcardz/object-oriented-javascript&#34;&gt;JavaScript&lt;/a&gt; widget to ensure that only numeric input is accepted.&lt;/p&gt;&#xA;&lt;p&gt;This guide is ideal for web developers needing a dedicated input field for credit card information. Using the ZK UI Framework as an example, I’ll walk you through creating a well-structured, readable credit card input box.&lt;/p&gt;】&lt;p&gt;在本文中，我将指导您如何通过扩展现有的 &lt;a href=&#34;https://www.zkoss.org/zkdemo/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank 来创建信用卡输入&#34;&gt;ZK 组件&lt;/a&gt;。此外，我将应用自定义的 ZK JavaScript 小部件将卡号格式化为四位数字组，从而提高可读性和用户体验。此外，我们将集成一个自定义 &lt;a href=&#34;https://dzone.com/refcardz/object-oriented-javascript&#34;&gt;JavaScript&lt;/a&gt; 小部件，以确保只接受数字输入。&lt;/p&gt;&#xA;&lt;p&gt;本指南非常适合需要信用卡信息专用输入字段的 Web 开发人员。以 ZK UI 框架为例，我将引导您创建一个结构良好、可读的信用卡输入框。&lt;/p&gt;</description>
      <pubDate>Tue, 29 Oct 2024 17:00:08 +0000</pubDate>
    </item>
    <item>
      <title>【Top Takeaways From Devoxx Belgium 2024】Devoxx 比利时 2024 年的主要收获</title>
      <link>https://dzone.com/articles/top-takeaways-from-devoxx-belgium</link>
      <description>【&lt;p&gt;In October 2024, I visited Devoxx Belgium and again it was an awesome event! I learned a lot and received quite some information which I do not want to withhold from you. In this blog, you can find my takeaways from Devoxx Belgium 2024!&lt;/p&gt;&#xA;&lt;h2&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://devoxx.be/&#34; rel=&#34;noreferrer noopener&#34; target=&#34;_blank&#34;&gt;Devoxx Belgium&lt;/a&gt; is the largest Java conference in Europe. This year, it was already the 21st edition. As always, Devoxx is being held in the fantastic theatres of &lt;a href=&#34;https://kinepolis.be/nl/bioscopen/kinepolis-antwerpen/info&#34; rel=&#34;noreferrer noopener&#34; target=&#34;_blank&#34;&gt;Kinepolis Antwerp&lt;/a&gt;. Each year, there is a rush on the tickets. Tickets are released in several batches, so if you did not have a ticket during the first batch, you will get another chance.&lt;/p&gt;】&lt;p&gt;2024 年 10 月，我参观了 Devoxx 比利时，这又是一次很棒的活动！我学到了很多东西，也收到了很多信息，我不想向你们隐瞒。在此博客中，您可以找到我对 Devoxx 比利时 2024 年的总结！&lt;/p&gt;&#xA;&lt;h2&gt;简介&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://devoxx.be/&#34; rel=&#34;noreferrer noopener&#34; target=&#34;_blank&#34;&gt;Devoxx 比利时&lt;/a&gt;是欧洲最大的 Java 会议。今年，已经是第21届了。与往常一样，Devoxx 在&lt;a href=&#34;https://kinepolis.be/nl/biscopen/kinepolis-antwerpen/info&#34; rel=&#34;noreferrer noopener&#34; target=&#34;_blank&#34;&gt;Kinepolis Antwerp&lt;的精彩剧院举行/a&gt;.每年都会出现抢票潮。门票分几批发放，如果您第一批没有拿到门票，还有另一次机会。&lt;/p&gt;</description>
      <pubDate>Tue, 29 Oct 2024 14:00:05 +0000</pubDate>
    </item>
    <item>
      <title>【Increase Model Flexibility and ROI for GenAI App Delivery With Kubernetes】使用 Kubernetes 提高 GenAI 应用交付的模型灵活性和投资回报率</title>
      <link>https://dzone.com/articles/model-flexibility-for-genai-with-kubernetes</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;As with past technology adoption journeys, initial experimentation costs eventually shift to a focus on ROI. In a &lt;a href=&#34;https://x.com/AndrewYNg/status/1829190549842321758&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;recent post on X&lt;/a&gt;, Andrew Ng extensively discussed GenAI model pricing reductions. This is great news, since GenAI models are crucial for powering the latest generation of AI applications. However, model swapping is also emerging as both an innovation enabler, and a cost saving strategy, for deploying these applications. Even if you&#39;ve already standardized on a specific model for your applications with reasonable costs, you might want to explore the added benefits of a multiple model approach facilitated by Kubernetes.&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;A Multiple Model Approach to GenAI&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;A multiple model operating approach enables developers to use the most up-to-date GenAI models throughout the lifecycle of an application. By operating in a continuous upgrade approach for GenAI models, developers can harness the specific strengths of each model as they shift over time. In addition, &amp;nbsp;the introduction of specialized, or purpose-built models, enables applications to be tested and refined for optimal accuracy, performance and cost.&amp;nbsp;&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;与过去的技术采用之旅一样，最初的实验成本最终转向关注投资回报率。在 &lt;a href=&#34;https://x.com/AndrewYNg/status/1829190549842321758&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;最近关于 X 的帖子&lt;/a&gt;中，Andrew Ng 广泛讨论了 GenAI 模型定价的降低。这是个好消息，因为 GenAI 模型对于支持最新一代人工智能应用程序至关重要。然而，模型交换也正在成为部署这些应用程序的创新推动者和成本节约策略。即使您已经以合理的成本为应用程序标准化了特定模型，您也可能希望探索 Kubernetes 促进的多模型方法的额外优势。&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;GenAI 的多模型方法&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;多模型操作方法使开发人员能够在应用程序的整个生命周期中使用最新的 GenAI 模型。通过对 GenAI 模型进行持续升级，开发人员可以在每个模型随时间变化时利用其特定优势。此外，通过引入专门的或专门构建的模型，可以测试和改进应用程序，以获得最佳的准确性、性能和成本。 &lt;/p&gt;</description>
      <pubDate>Tue, 29 Oct 2024 20:00:17 +0000</pubDate>
    </item>
    <item>
      <title>【Front End Debugging, Part 1: Not Just Console Log】前端调试，第 1 部分：不仅仅是控制台日志</title>
      <link>https://dzone.com/articles/front-end-debugging-part-1-not-just-console-log</link>
      <description>【&lt;p data-pm-slice=&#34;1 1 []&#34;&gt;As a Java developer, most of my focus is on the backend side of debugging. Front-end debugging poses different challenges and has sophisticated tools of its own. Unfortunately, print-based debugging has become the norm in the front-end. To be fair, it makes more sense there as the cycles are different and the problem is always a single-user problem. But even if you choose to use &lt;code&gt;Console.log&lt;/code&gt;, there’s a lot of nuance to pick up there.&lt;br&gt;&lt;br&gt;&lt;img style=&#34;width: 611px;&#34; class=&#34;fr-fic fr-dib lazyload&#34; data-image=&#34;true&#34; data-new=&#34;false&#34; data-sizeformatted=&#34;692.9 kB&#34; data-mimetype=&#34;image/png&#34; data-creationdate=&#34;1730211837827&#34; data-creationdateformatted=&#34;10/29/2024 02:23 PM&#34; data-type=&#34;temp&#34; data-url=&#34;https://dz2cdn1.dzone.com/storage/temp/18010122-1730211836708.png&#34; data-modificationdate=&#34;null&#34; data-size=&#34;692877&#34; data-name=&#34;1730211836708.png&#34; data-id=&#34;18010122&#34; data-src=&#34;https://dz2cdn1.dzone.com/storage/temp/18010122-1730211836708.png&#34; alt=&#34;Magnifying glass with bug over Firefox and Chrome logos&#34;&gt;&lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;Instant Debugging With the debugger&amp;nbsp;&lt;/strong&gt;Keyword&lt;/h2&gt;&#xA;&lt;p&gt;A cool, yet powerful tool in JavaScript is the &lt;code&gt;debugger&lt;/code&gt; keyword. Instead of simply printing a stack trace, we can use this keyword to launch the debugger directly at the line of interest. That is a fantastic tool that instantly brings your attention to a bug. I often use it in my debug builds of the front end instead of just printing an error log.&lt;/p&gt;】&lt;p data-pm-slice=&#34;1 1 []&#34;&gt;作为一名 Java 开发人员，我的大部分注意力都集中在后端调试上。前端调试带来了不同的挑战，并且拥有自己的复杂工具。不幸的是，基于打印的调试已经成为前端的常态。公平地说，这更有意义，因为周期不同并且问题始终是单用户问题。但即使您选择使用 &lt;code&gt;Console.log&lt;/code&gt;，也有很多细微差别需要注意。&lt;br&gt;&lt;br&gt;&lt;img style=&#34;width: 611px;&#34; class =“fr-fic fr-dib lazyload”data-image =“true”data-new =“false”data-sizeformatted =“692.9 kB”data-mimetype =“image / png”data-creationdate =“1730211837827”数据-creationdateformatted=&#34;10/29/2024 02:23 PM&#34; data-type=&#34;temp&#34; data-url=&#34;https://dz2cdn1.dzone.com/storage/temp/18010122-1730211836708.png&#34; data-modificationdate= “null”data-size =“692877”data-name =“1730211836708.png”data-id =“18010122”data-src =“https://dz2cdn1.dzone.com/storage/temp/18010122-1730211836708.png” &#34; alt=&#34;带有 Firefox 和 Chrome 徽标错误的放大镜&#34;&gt;&lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;使用调试器进行即时调试&lt;/strong&gt;关键字&lt;/h2&gt;&#xA;&lt;p&gt;JavaScript 中一个很酷但功能强大的工具是 &lt;code&gt;debugger&lt;/code&gt; 关键字。我们可以使用此关键字直接在感兴趣的行启动调试器，而不是简单地打印堆栈跟踪。这是一个很棒的工具，可以立即引起您对错误的注意。我经常在前端的调试版本中使用它，而不仅仅是打印错误日志。&lt;/p&gt;</description>
      <pubDate>Tue, 29 Oct 2024 19:00:04 +0000</pubDate>
    </item>
    <item>
      <title>【AWS Redshift Data Sharing: Unlocking the Power of Collaborative Analytics】AWS Redshift 数据共享：释放协作分析的力量</title>
      <link>https://dzone.com/articles/aws-redshift-data-sharing</link>
      <description>【&lt;h2 style=&#34;text-align: left;&#34;&gt;What Is AWS Redshift Data Sharing?&lt;/h2&gt;&#xA;&lt;p&gt;As a data engineer, most of my time will be spent &lt;a href=&#34;https://dzone.com/articles/advanced-strategies-for-building-modern-data-pipel&#34;&gt;constructing data pipelines&lt;/a&gt; from source systems to &lt;a href=&#34;https://dzone.com/articles/data-lakes-all-you-need-to-know&#34;&gt;data lakes&lt;/a&gt;, &lt;a href=&#34;https://dzone.com/articles/demystifying-databases-data-warehouses-data-lakes&#34;&gt;databases&lt;/a&gt;, and &lt;a href=&#34;https://dzone.com/refcardz/data-warehousing&#34;&gt;warehouses&lt;/a&gt;. In the cloud world, the databases/warehouses are usually isolated in a private subnet in a VPC, and sharing the data will be a challenge. One of the pain points is to have this data distributed to several teams in the organization. Data can be shared by exporting into files, but this increases the concerns of security, data duplication, and maintenance of these export pipelines.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;I was delighted to find that we have a utility in AWS Redshift that will let you share the data between two Redshift clusters without building any &lt;a href=&#34;https://dzone.com/articles/etl-and-how-it-changed-over-time&#34;&gt;ETL&lt;/a&gt; infrastructure. AWS Redshift data sharing allows you to securely share live, read-only data between different Redshift clusters within or across AWS accounts and regions. It eliminates the need for data duplication and helps multiple stakeholders access the same dataset, allowing different departments, teams, or external partners to collaborate and derive insights from shared data. By sharing specific databases, schemas, tables, or views from the Producer Cluster to one or more Consumer Clusters, organizations can significantly reduce the complexity of their data pipelines.&lt;/p&gt;】&lt;h2 style=&#34;text-align: left;&#34;&gt;什么是 AWS Redshift 数据共享？&lt;/h2&gt;&#xA;&lt;p&gt;作为一名数据工程师，我的大部分时间都花在&lt;a href=&#34;https://dzone.com/articles/advanced-strategies-for-building-modern-data-pipel&#34;&gt;构建数据管道&lt;/ a&gt; 从源系统到&lt;a href=&#34;https://dzone.com/articles/data-lakes-all-you-need-to-know&#34;&gt;数据湖&lt;/a&gt;，&lt;a href=&#34;https: //dzone.com/articles/demystifying-databases-data-warehouses-data-lakes&#34;&gt;数据库&lt;/a&gt;，和&lt;a href=&#34;https://dzone.com/refcardz/data-warehousing&#34;&gt;仓库&lt; /a&gt;.在云世界中，数据库/仓库通常隔离在VPC的私有子网中，共享数据将是一个挑战。痛点之一是将这些数据分发给组织中的多个团队。数据可以通过导出到文件来共享，但这增加了对安全性、数据重复和这些导出管道的维护的担忧。 &lt;/p&gt;&#xA;&lt;p&gt;我很高兴地发现我们在 AWS Redshift 中有一个实用程序，可以让您在两个 Redshift 集群之间共享数据，而无需构建任何 &lt;a href=&#34;https://dzone.com/articles/etl-and-how -it-changed-over-time&#34;&gt;ETL&lt;/a&gt; 基础设施。 AWS Redshift 数据共享允许您在 AWS 账户和区域内或跨 AWS 账户和区域的不同 Redshift 集群之间安全地共享实时只读数据。它消除了数据重复的需要，并帮助多个利益相关者访问相同的数据集，从而允许不同的部门、团队或外部合作伙伴进行协作并从共享数据中获取见解。通过将生产者集群中的特定数据库、模式、表或视图共享给一个或多个消费者集群，组织可以显着降低其数据管道的复杂性。&lt;/p&gt;</description>
      <pubDate>Tue, 29 Oct 2024 12:00:09 +0000</pubDate>
    </item>
    <item>
      <title>【Unifying SecOps and Observability for Enhanced Cloud Security in Azure】统一 SecOps 和可观察性以增强 Azure 中的云安全性</title>
      <link>https://dzone.com/articles/enhanced-cloud-security-in-azure</link>
      <description>【&lt;p&gt;As someone who has worked in various areas of Azure for almost a decade, I have witnessed its constant evolution and the rise of increasingly sophisticated security risks. This calls for a unified approach to &lt;a href=&#34;https://dzone.com/articles/understanding-the-cloud-security-landscape&#34;&gt;modern cloud security&lt;/a&gt;, where integrating Security Operations, aka &#34;SecOps,&#34; into observability becomes essential. SecOps bridges the gap between security and operations, ensuring real-time threat detection, mitigation, and compliance. With the growing value and vulnerability of data, SecOps is crucial in safeguarding applications, preventing unauthorized access, and maintaining the integrity of sensitive information.&lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;Why SecOps Is Important &amp;nbsp;&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;In today’s cloud-centric environment, applications handle vast amounts of sensitive data, making SecOps critical to protect this information from breaches, unauthorized access, and cyber threats. SecOps ensures that every facet of security — from &lt;a href=&#34;https://dzone.com/articles/what-is-encryption-and-how-does-it-work&#34;&gt;encryption&lt;/a&gt; to &lt;a href=&#34;https://dzone.com/articles/ciso-perspective-securing-cloud-native-applications&#34;&gt;access control&lt;/a&gt; — is built into the operational workflow. Incorporating SecOps into the operations workstream guarantees that security is not an afterthought, but a continuous process that safeguards both the data and the integrity of business applications.&lt;/p&gt;】&lt;p&gt;作为在 Azure 各个领域工作了近十年的人，我见证了它的不断发展以及日益复杂的安全风险的兴起。这需要一种统一的方法来实现&lt;a href=&#34;https://dzone.com/articles/understanding-the-cloud-security-landscape&#34;&gt;现代云安全&lt;/a&gt;，其中集成安全操作（又名“SecOps”） “进入可观察性变得至关重要。 SecOps 弥合了安全与运营之间的差距，确保实时威胁检测、缓解和合规性。随着数据的价值和脆弱性不断增加，SecOps 对于保护应用程序、防止未经授权的访问和维护敏感信息的完整性至关重要。&lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;为什么 SecOps 很重要&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;在当今以云为中心的环境中，应用程序处理大量敏感数据，因此 SecOps 对于保护这些信息免遭破坏、未经授权的访问和网络威胁至关重要。 SecOps 确保安全的各个方面 - 从&lt;a href=&#34;https://dzone.com/articles/what-is-encryption-and-how-does-it-work&#34;&gt;加密&lt;/a&gt;到&lt;a href =&#34;https://dzone.com/articles/ciso-perspective-secure-cloud-native-applications&#34;&gt;访问控制&lt;/a&gt; — 内置于操作工作流程中。将 SecOps 纳入运营工作流可确保安全不是事后的想法，而是一个持续的过程，可保护数据和业务应用程序的完整性。&lt;/p&gt;</description>
      <pubDate>Tue, 29 Oct 2024 15:00:05 +0000</pubDate>
    </item>
    <item>
      <title>【Harnessing the Power of Distributed Databases on Kubernetes】利用 Kubernetes 上分布式数据库的力量</title>
      <link>https://dzone.com/articles/harnessing-power-distributed-databases-on-kubernetes</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Cloud-native technologies have ushered in a new era of database scalability and resilience requirements. To meet this demand, enterprises across multiple industries, from finance to retail, to healthcare, are turning to distributed databases to safely and effectively store data in multiple locations.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Distributed databases provide consistency across availability zones and regions in the cloud, but some enterprises still question whether they should run their distributed database in Kubernetes.&amp;nbsp;&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;云原生技术开创了数据库可扩展性和弹性要求的新时代。为了满足这一需求，从金融、零售到医疗保健等多个行业的企业正在转向分布式数据库，以在多个位置安全有效地存储数据。 &lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;分布式数据库提供了云中跨可用区和区域的一致性，但一些企业仍然质疑是否应该在 Kubernetes 中运行分布式数据库。 &lt;/p&gt;</description>
      <pubDate>Tue, 29 Oct 2024 13:00:04 +0000</pubDate>
    </item>
  </channel>
</rss>