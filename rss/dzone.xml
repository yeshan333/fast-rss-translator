<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【AI Summarization: Extractive and Abstractive Techniques】AI摘要：提取和抽象技术</title>
      <link>https://dzone.com/articles/ai-summarization-extractive-abstractive-techniques</link>
      <description>【&lt;p&gt;&lt;span&gt;The proliferation of digital content has made it more difficult to comprehend and interpret lengthy texts, such as reports, research papers, and news items. An answer is offered by AI-powered summarizing tools, which make it simpler to extract essential information from lengthy texts. Shortening the text is only one aspect of summarization; another is maintaining the original material&#39;s context, tone, and intent.&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;span&gt;This tutorial introduces two complementary techniques — &lt;strong&gt;extractive summarization&lt;/strong&gt; and &lt;strong&gt;abstractive summarization&amp;nbsp;&lt;/strong&gt;— and shows you how to combine them for robust results. You&#39;ll use pre-trained models from Hugging Face for extractive tasks and OpenAI&#39;s GPT for abstractive rewriting, resulting in summaries that are both concise and contextually accurate.&lt;/span&gt;&lt;/p&gt;】&lt;p&gt; &lt;span&gt;数字内容的扩散使理解和解释冗长的文本，例如报告，研究论文和新闻项目变得更加困难。 AI驱动的汇总工具提供了答案，这使得从冗长的文本中提取基本信息变得更加简单。缩短文本只是摘要的一个方面。另一个正在维护原始材料的上下文，音调和意图。&lt;/span&gt; &lt;/p&gt;&#xA;&lt;p&gt; &lt;span&gt;本教程介绍了两种互补技术 -  &lt;strong&gt;提取性摘要&lt;/strong&gt;和&lt;strong&gt;抽象性摘要&lt;/strong&gt;  - 并向您展示了如何将它们结合起来以获得可靠的结果。您将使用预训练的模型来拥抱面孔进行提取任务和OpenAI的GPT进行抽象重写，从而导致摘要既简洁又准确。&lt;/span&gt; &lt;/span&gt; &lt;/p&gt;</description>
      <pubDate>Thu, 13 Feb 2025 22:00:02 +0000</pubDate>
    </item>
    <item>
      <title>【How Java Servlets Work: The Backbone of Java Web Apps】Java Servlet的工作方式：Java Web应用程序的骨干</title>
      <link>https://dzone.com/articles/how-java-servlets-work</link>
      <description>【&lt;p&gt;I assume that if you&#39;re reading this article, you already know what Servlets are. But if you don’t, let me introduce them.&lt;/p&gt;&#xA;&lt;p&gt;In the Java world, a &lt;a href=&#34;https://dzone.com/articles/what-is-java-servlets-and-servlets-basics-servlets&#34;&gt;Servlet&lt;/a&gt; is a web component defined by the Jakarta Servlet Specification 6.1, which is part of Jakarta EE. Managed by a Servlet Container (I’ll dive into that soon), it handles incoming requests, processes them, and sends responses back to the client (see more in the &lt;a href=&#34;https://jakarta.ee/specifications/servlet/6.1/jakarta-servlet-spec-6.1&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Jakarta Servlet Specification 6.1&lt;/a&gt;).&lt;/p&gt;】&lt;p&gt;我认为，如果您正在阅读本文，您已经知道什么是servlet。但是，如果您不这样做，让我介绍它们。&lt;/p&gt;&#xA;&lt;p&gt;在Java世界中，A &lt;a href =“ https://dzone.com/articles/what-is-java-servlets-and-servlets-and-servlets-basics-servlets”&gt; servlet &lt;/a&gt;是一个Web组件由Jakarta Servlet规范6.1定义，该规范是Jakarta EE的一部分。由servlet容器管理（我会尽快潜入其中），处理传入的请求，对其进行处理并将响应发送回客户（请参阅&lt;a a href =&#39;https://jakarta.ee/specifications/中的更多信息。 servlet/6.1/jakarta-servlet-spec-6.1“ rel =“ noopener noreferrer” target =“ _ blank”&gt; jakarta servlet规范6.1 &lt;/a&gt;）。&lt;/p&gt;</description>
      <pubDate>Thu, 13 Feb 2025 19:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【A Guide to Constructor Chaining in Java】Java的构造链链条指南</title>
      <link>https://dzone.com/articles/constructor-chaining-java-guide</link>
      <description>【&lt;p&gt;Constructor chaining refers to the ability to call a constructor inside another constructor. You can use a constructor chain either within the same class or even with another one. For the latter, the constructor must be inherited from the superclass. In this Java programming tutorial, you will learn the three ways to implement constructor chaining.&lt;/p&gt;&#xA;&lt;h2&gt;Java Constructor Chaining in the Same Class&lt;/h2&gt;&#xA;&lt;p&gt;You can create multiple &lt;a href=&#34;https://dzone.com/articles/stranger-things-in-java-constructors&#34;&gt;constructors&lt;/a&gt; in the same class, each with a different number of arguments that it accepts. To call one constructor within another (of the same class), use &lt;code&gt;this()&lt;/code&gt;.&lt;/p&gt;】&lt;p&gt;构造函数链是指在另一个构造函数内调用构造函数的能力。您可以在同一类中或与另一个类别一起使用构造链。对于后者，构造函数必须从超级阶级继承。在本Java编程教程中，您将学习实现构造函数的三种方法。&lt;/p&gt;&#xA;&lt;h2&gt; Java构造函数在同一类中链接&lt;/h2&gt;&#xA;&lt;p&gt;您可以创建多个&lt;a href =“ https://dzone.com/articles/stranger-things-things-in-java-constructors”&gt;构造函数&lt;/a&gt;在同一班级中，每个都有不同数量的参数它接受。要在另一个类中调用一个构造函数，请使用&lt;code&gt; this（）&lt;/code&gt;。&lt;/p&gt;</description>
      <pubDate>Thu, 13 Feb 2025 16:00:04 +0000</pubDate>
    </item>
    <item>
      <title>【Enhancing Security in JavaScript】增强JavaScript中的安全性</title>
      <link>https://dzone.com/articles/enhancing-security-in-javascript</link>
      <description>【&lt;p&gt;Every programming language comes with its own set of security vulnerabilities, and JavaScript is no exception. Exploiting JavaScript vulnerabilities can lead to data manipulation, session hijacking, unauthorized data access, and more. Although commonly associated with client-side functionality, JavaScript security risks can also pose significant threats in server-side environments.&lt;/p&gt;&#xA;&lt;p data-pm-slice=&#34;1 1 []&#34;&gt;For any application, customer trust is highly important. Maintaining this trust requires safeguarding customer data and ensuring the security of applications. Fortunately, implementing proper safeguards can mitigate these risks and enhance the security of your application.&amp;nbsp;&lt;/p&gt;】&lt;p&gt;每种编程语言都带有其自身的安全漏洞集，JavaScript也不例外。利用JavaScript漏洞可以导致数据操纵，会话劫持，未经授权的数据访问等等。尽管JavaScript安全风险通常与客户端功能相关，但也可能在服务器端环境中构成重大威胁。&lt;/p&gt;&#xA;&lt;p data-pm-slice =“ 1 1 []&gt;对于任何应用程序，客户信任非常重要。维护此信任需要维护客户数据并确保应用程序的安全性。幸运的是，实施适当的保障措施可以减轻这些风险并增强应用程序的安全性。 &lt;/p&gt;</description>
      <pubDate>Thu, 13 Feb 2025 15:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Why and How to Participate in Open-Source Projects in 2025】为什么以及如何在2025年参加开源项目</title>
      <link>https://dzone.com/articles/why-and-how-to-participate-in-open-source-projects</link>
      <description>【&lt;p data-pm-slice=&#34;1 1 []&#34;&gt;Are you a software developer looking to accelerate your career, enhance your skills, and expand your professional network? If so, contributing to an open-source project in 2025 might be your best decision. Open source is more than just a technical exercise; it’s a gateway to learning from industry experts, mastering new technologies, and creating a lasting impact on the developer community.&lt;/p&gt;&#xA;&lt;p&gt;Over the years, one of the most common career-related questions I have encountered is: &lt;em&gt;Why should I participate in an open-source project?&lt;/em&gt; With 2025 upon us, this question remains as relevant as ever. In this article, I will explore the reasons for engaging in &lt;a href=&#34;https://dzone.com/articles/what-is-open-source&#34;&gt;open source&lt;/a&gt;, explain how to get started, and highlight some projects to consider contributing to this year.&lt;/p&gt;】&lt;p data-pm-slice =“ 1 1 []&gt;您是否是希望加快职业，提高技能并扩大专业网络的软件开发人员？如果是这样，在2025年为开源项目做出贡献可能是您最好的决定。开源不仅仅是技术练习；这是向行业专家学习，掌握新技术并对开发人员社区产生持久影响的门户。&lt;/p&gt;&#xA;&lt;p&gt;多年来，我遇到的最常见的与职业相关的问题之一是：&lt;em&gt;我为什么要参加一个开源项目？曾经。在本文中，我将探讨参与&lt;a href =的原因突出一些要考虑为今年做出贡献的项目。&lt;/p&gt;</description>
      <pubDate>Thu, 13 Feb 2025 17:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Elevating Software Delivery Through Pair Programming】通过配对编程提升软件交付</title>
      <link>https://dzone.com/articles/elevating-software-delivery-pair-programming</link>
      <description>【&lt;p data-selectable-paragraph=&#34;&#34;&gt;Pair programming is a technique of software development where two programmers work together to achieve a common goal. &lt;span style=&#34;margin: 0px; padding: 0px;&#34;&gt;One of the pairs is responsible for the&lt;em&gt;&lt;strong&gt;&amp;nbsp;strategic&lt;/strong&gt;&amp;nbsp;&lt;/em&gt;&lt;strong&gt;part&lt;/strong&gt; (navigator), while the other is focused on the &lt;em&gt;&lt;strong&gt;tactical&amp;nbsp;&lt;/strong&gt;&lt;/em&gt;&lt;strong&gt;part&lt;/strong&gt; of work (driver).&lt;/span&gt; They often rotate the responsibility to get into each other&#39;s shoes for the best outcome out of this collaboration.&lt;/p&gt;&#xA;&lt;p data-selectable-paragraph=&#34;&#34;&gt;&lt;span style=&#34;margin: 0px; padding: 0px;&#34;&gt;The common goal for which programmers can pair could be implementing a new or upgrading an existing feature, reviewing code (author-reviewer pair or both reviewers for someone else&#39;s PR), or bug fixing/debugging a complex part, knowledge transfer, to name a few.&lt;/span&gt;&lt;/p&gt;】&lt;p数​​据选择 - 段落=“”&gt;对编程是一种软件开发技术，其中两个程序员共同实现一个共同的目标。 &lt;span style =“ margin：0px; padding：0px;“”&gt;其中一对负责&lt;em&gt; &lt;strong&gt;战略性&lt;/strong&gt; &lt;/em&gt; &lt;/em&gt; &lt;/em&gt; &lt;strong&gt; part &lt;/strong&gt;（navigator），虽然另一个专注于&lt;em&gt; &lt;em&gt; &lt;em&gt; &lt;/strong&gt; &lt;/em&gt; &lt;strong&gt;工作的部分&lt;/strong&gt;（驱动程序）。&lt;/span&gt;他们经常旋转责任互相融入彼此的责任这次合作的鞋子为最佳结果而言。&lt;/p&gt;&#xA;&lt;p数​​据选择 -  paragraph =“”&gt; &lt;span style =“ margin：0px; padding：0px;“&gt;程序员可以配对的共同目标可以实现新的或升级现有功能，审查代码（fure--审稿人对或两个人的pr），或者错误修复/调试一个复杂的部分，知识转移，仅举几例。&lt;/span&gt; &lt;/p&gt;</description>
      <pubDate>Thu, 13 Feb 2025 20:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【React Middleware: Bridging APIs and Components】React中间件：桥接API和组件</title>
      <link>https://dzone.com/articles/demystifying-react-middleware-bridging-apis-and-co</link>
      <description>【&lt;p&gt;Middleware is not a new concept in web development. It is typically associated with backend frameworks like Express.js, where there is a lot of authentication, logging, etc. Because of its inherent advantages, middleware has gained significant traction in the frontend.&lt;/p&gt;&#xA;&lt;p&gt;Frontend frameworks such as &lt;a href=&#34;https://dzone.com/articles/what-is-react-a-complete-guide&#34;&gt;React&lt;/a&gt; are adopting it as a way to handle complex functionalities during state management. In this guide, we’ll walk you through the concept of middleware in React and how to use it to enhance your React app’s functionality and manage application flow effectively.&lt;/p&gt;】&lt;p&gt;中间件不是网络开发中的新概念。它通常与express.js之类的后端框架相关联，那里有很多身份验证，日志记录等。由于其固有的优势，中间件在前端获得了重大吸引力。&lt;/p&gt;&#xA;&lt;p&gt;前端框架，例如&lt;a href =“ https://dzone.com/articles/what-is-react-a-complete-guide”&gt; React &lt;/a&gt;正在采用它作为处理复杂功能的一种方式在国家管理期间。在本指南中，我们将引导您介绍React中的中间件概念以及如何使用它来增强您的React应用程序的功能并有效地管理应用程序流程。&lt;/p&gt;</description>
      <pubDate>Thu, 13 Feb 2025 13:00:04 +0000</pubDate>
    </item>
    <item>
      <title>【Idempotency in Distributed Systems: When and Why It Matters】分布式系统中的势力：何时以及为什么重要</title>
      <link>https://dzone.com/articles/importance-of-idempotency-in-distributed-systems</link>
      <description>【&lt;p&gt;Failures are inevitable in distributed systems due to network partitions, timeouts, and intermittent connectivity issues. When these failures occur, they can lead to delays, incomplete transactions, or inconsistent data states, ultimately impacting the user experience and system reliability. When a system experiences a failure, clients often retry requests to ensure the operation completes successfully.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;However, without proper handling, retries can result in unintended consequences such as duplicate transactions, data corruption, or inconsistent states. Implementing idempotency in a system or API ensures that retries following such failures are processed reliably, maintaining the integrity and consistency of the system.&lt;/p&gt;】&lt;p&gt;由于网络分区，超时和间歇性连接问题，分布式系统不可避免地发生故障。当这些失败发生时，它们可能导致延迟，不完整的交易或数据状态不一致，最终影响用户体验和系统可靠性。当系统遭受故障时，客户经常重试确保操作成功完成的请求。 &lt;/p&gt;&#xA;&lt;p&gt;但是，如果没有适当的处理，则可能会导致意想不到的后果，例如重复的交易，数据腐败或不一致的状态。在系统或API中实现势力确保可靠地处理以下故障后的重试，以保持系统的完整性和一致性。&lt;/p&gt;</description>
      <pubDate>Thu, 13 Feb 2025 18:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【How to Backup SQL Server RDS to an S3 Bucket】如何将SQL Server RDS备份到S3存储桶</title>
      <link>https://dzone.com/articles/how-to-backup-sql-server-rds-to-an-s3-bucket</link>
      <description>【&lt;p&gt;Managing backups for SQL Server RDS instances is crucial to ensuring data availability and disaster recovery. AWS provides tools to facilitate this process, including commands to back up SQL Server RDS databases directly to Amazon S3. This article walks you through the commands and configurations needed to perform backups and restores.&lt;/p&gt;&#xA;&lt;h2&gt;Backing Up SQL Server RDS to S3&lt;/h2&gt;&#xA;&lt;p&gt;The primary stored procedure used for creating backups is &lt;code&gt;msdb.dbo.rds_backup_database&lt;/code&gt;. This command allows you to specify the database to back up and the &lt;a href=&#34;https://dzone.com/articles/7-aws-data-stores-you-can-use-to-store-and-manage&#34;&gt;S3 location&lt;/a&gt; where the backup will be stored.&lt;/p&gt;】&lt;p&gt;管理SQL Server RDS实例的备份对于确保数据可用性和灾难恢复至关重要。 AWS提供了促进此过程的工具，包括将SQL Server RDS数据库直接备份到Amazon S3的命令。本文将带您浏览执行备份和还原所需的命令和配置。&lt;/p&gt;&#xA;&lt;H2&gt;将SQL Server RDS备份到S3 &lt;/H2&gt;&#xA;&lt;p&gt;用于创建备份的主要存储过程是&lt;code&gt; msdb.dbo.rds_backup_database &lt;/code&gt;。此命令允许您指定数据库备份和&lt;a href =“ https://dzone.com/articles/7-aws-data-sto--stores-you-can-use-use-can-use-to-store-store-and-manage” &gt; S3位置&lt;/a&gt;将存储备份的位置。&lt;/p&gt;</description>
      <pubDate>Thu, 13 Feb 2025 21:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Containerization of a Node.js Service】node.js服务的容器化</title>
      <link>https://dzone.com/articles/containerization-of-a-nodejs-service</link>
      <description>【&lt;p&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;Containerization is bundling an application, its dependencies, and libraries together so that they can be used like plug-and-play on any kind of infrastructure. Each bundle is called a container.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;Why Containerize a Node.js Service?&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;As discussed in the last section, containerizing a&amp;nbsp;&lt;/span&gt;&lt;a href=&#34;https://dzone.com/articles/a-comprehensive-exploration-of-nodejs-a-practical&#34;&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;Node.js service&lt;/span&gt;&lt;/a&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;&amp;nbsp;would mean bundling the app, its dependencies, libraries, and even configuration into one container.&amp;nbsp;&lt;/span&gt;&lt;a href=&#34;https://dzone.com/articles/introduction-to-containerization&#34;&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;Containerization&lt;/span&gt;&lt;/a&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;&amp;nbsp;has the following benefits:&lt;/span&gt;&lt;/p&gt;】&lt;p&gt; &lt;span data-proserver spaces =“ true”&gt;容器化将应用程序，其依赖项和库捆绑在一起，以便可以像在任何类型的基础架构上一样使用它们。每个捆绑包称为容器。 &lt;/span&gt; &lt;/p&gt;&#xA;&lt;h2&gt; &lt;strong&gt; &lt;span数据列表空间=“ true”&gt;为什么容忍node.js服务？&lt;/span&gt; &lt;/strong&gt; &lt;/strong&gt; &lt;/h2&gt;&#xA;&lt;p&gt; &lt;span data-preserver spaces =“ true”&gt;如上一节所讨论，将&lt;/span&gt; &lt;a href =“ https://dzone.com/articles/a-comprehend--comphervention-of -nodejs-a practical“&gt; &lt;span data-preserver spaces =“ true”&gt; node.js service &lt;/span&gt; &lt;/a&gt; &lt;span data data-proserver spaces =“ true”&gt;意味着将应用程序捆绑在一起，它的依赖项，库甚至配置为一个容器。 &lt;/span&gt; &lt;a href =“ https://dzone.com/articles/introduction-to-containerization”&gt; &lt;span data data-proserver-spaces =“ true”&gt; containerization &lt;/span&gt; &lt;/a&gt; &lt;span &lt;span Data -preserver spaces =“ true”&gt;具有以下好处：&lt;/span&gt; &lt;/p&gt;</description>
      <pubDate>Thu, 13 Feb 2025 12:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>