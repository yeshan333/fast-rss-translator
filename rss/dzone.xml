<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Human Introspection With Machine Intelligence】人类自省与机器智能</title>
      <link>https://dzone.com/articles/human-introspection-with-machine-intelligence</link>
      <description>【&lt;p&gt;&lt;strong&gt;Computational logic&lt;/strong&gt; manifests in various forms, much like other types of logic. In this paper, my focus will be on the abductive logic programming (ALP) approach within computational logic. I will argue that the ALP agent framework, which integrates ALP into an agent’s operational cycle, represents a compelling model for both explanatory and prescriptive reasoning.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;As an explanatory model, it encompasses production systems as a specific example; as a prescriptive model, it not only includes classical logic but also aligns with traditional decision theory. The ALP agent framework’s dual nature, encompassing both intuitive and deliberative reasoning, categorizes it as a dual-process theory. Dual-process theories, similar to other theoretical constructs, come in various versions. One such version, as Kahneman and Frederick [2002] describe, is where intuitive thinking “swiftly generates instinctive solutions to judgment issues,” while deliberative thinking “assesses these solutions, deciding whether to endorse, adjust, or reject them.”&amp;nbsp;&lt;/p&gt;】&lt;p&gt;&lt;strong&gt;计算逻辑&lt;/strong&gt;有多种形式，就像其他类型的逻辑一样。在本文中，我的重点将是计算逻辑中的溯因逻辑编程（ALP）方法。我认为 ALP 代理框架将 ALP 集成到代理的操作周期中，代表了解释性推理和规范性推理的一个令人信服的模型。 &lt;/p&gt;&#xA;&lt;p&gt;作为一个解释模型，它包含生产系统作为具体示例；作为一种规定性模型，它不仅包含经典逻辑，而且与传统决策理论相一致。 ALP 代理框架的双重性质，包括直觉推理和深思熟虑推理，将其归类为双过程理论。与其他理论构造类似，双过程理论有各种版本。正如 Kahneman 和 Frederick [2002] 所描述的那样，其中一个版本是直觉思维“迅速产生判断问题的本能解决方案”，而审慎思维“评估这些解决方案，决定是否认可、调整或拒绝它们”。 &lt;/p&gt;</description>
      <pubDate>Tue, 24 Sep 2024 11:00:09 +0000</pubDate>
    </item>
    <item>
      <title>【Supporting Offline Mode: Key Strategies and Benefits for iOS Mobile Apps】支持离线模式：iOS 移动应用的关键策略和优势</title>
      <link>https://dzone.com/articles/offline-mode-key-strategies-and-benefits</link>
      <description>【&lt;h2 dir=&#34;ltr&#34; style=&#34;text-align: left;&#34;&gt;Why Should You Support Offline Mode in Mobile Apps?&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Offline-first apps are designed to function effectively even when there is no internet connection. There are some primary reasons why supporting offline mode is essential for mobile apps:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA; &lt;li dir=&#34;ltr&#34;&gt;&lt;strong&gt;Improved user experience and reach:&lt;/strong&gt; Users can continue using the app even when there is no internet connection. Offline support attracts more users in areas of low connectivity or users that travel often thereby increasing availability&lt;/li&gt;&#xA; &lt;li dir=&#34;ltr&#34;&gt;&lt;strong&gt;Increased user engagement and retention:&lt;/strong&gt; By providing a consistent experience regardless of connectivity, offline mode helps build user trust and encourages longer engagement. This enhanced reliability can lead to higher user retention rates.&lt;/li&gt;&#xA; &lt;li dir=&#34;ltr&#34;&gt;&lt;strong&gt;Lower battery consumption:&lt;/strong&gt; Offline apps consume less battery power. This is because they don’t continuously poll the network or fetch remote data, which can be energy-intensive&lt;/li&gt;&#xA; &lt;li dir=&#34;ltr&#34;&gt;&lt;strong&gt;Reduced downtime:&amp;nbsp;&lt;/strong&gt;Supporting offline apps would also help reduce downtime caused by network failures or server issues, maintaining access to the feature.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 dir=&#34;ltr&#34; style=&#34;text-align: left;&#34;&gt;&lt;strong&gt;Key Strategies for Supporting Offline Mode in Apps&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;There are various strategies to gracefully support offline mode in mobile apps:&lt;/p&gt;】&lt;h2 dir=&#34;ltr&#34; style=&#34;text-align: left;&#34;&gt;为什么要在移动应用中支持离线模式？&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;离线优先应用程序的设计即使在没有互联网连接的情况下也能有效运行。支持离线模式对于移动应用至关重要有一些主要原因：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA; &lt;li dir=&#34;ltr&#34;&gt;&lt;strong&gt;改善用户体验和覆盖范围&lt;/strong&gt;：即使没有互联网连接，用户也可以继续使用该应用。离线支持可以吸引更多连接性较差的地区的用户或经常出差的用户，从而提高可用性&lt;/li&gt;&#xA; &lt;li dir=&#34;ltr&#34;&gt;&lt;strong&gt;提高用户参与度和保留率&lt;/strong&gt;：通过提供一致的体验（无论连接情况如何），离线模式有助于建立用户信任并鼓励更长时间的参与。这种增强的可靠性可以提高用户保留率。&lt;/li&gt;&#xA; &lt;li dir=&#34;ltr&#34;&gt;&lt;strong&gt;电池消耗更低&lt;/strong&gt;：离线应用消耗更少的电池电量。这是因为它们不会连续轮询网络或获取远程数据，这可能是能源密集型的&lt;/li&gt;&#xA; &lt;li dir=&#34;ltr&#34;&gt;&lt;strong&gt;减少停机时间：&lt;/strong&gt;支持离线应用还有助于减少因网络故障或服务器问题导致的停机时间，从而保持对该功能的访问。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 dir=&#34;ltr&#34; style=&#34;text-align: left;&#34;&gt;&lt;strong&gt;应用中支持离线模式的关键策略&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;有多种策略可以在移动应用中优雅地支持离线模式：&lt;/p&gt;</description>
      <pubDate>Mon, 23 Sep 2024 20:00:06 +0000</pubDate>
    </item>
    <item>
      <title>【The Future Speaks: Real-Time AI Voice Agents With Ultra-Low Latency】未来说话：超低延迟的实时人工智能语音代理</title>
      <link>https://dzone.com/articles/real-time-ai-voice-agents-with-ultra-low-latency</link>
      <description>【&lt;p&gt;Voice mode has quickly become a flagship feature of &lt;a href=&#34;https://dzone.com/articles/evolution-of-conversational-ai&#34;&gt;conversational AI&lt;/a&gt;, putting users at ease and allowing them to interact in the most natural way — through speech. OpenAI has continually blazed trails with the introduction of real-time AI voice agents operating on less than 500ms latency. The technology behind this achievement is now open source, giving unparalleled access to the tools that make it possible to build top-quality responsive voice agents.&lt;/p&gt;&#xA;&lt;p&gt;OpenAI has not been pulling any punches. When they developed the voice capabilities for ChatGPT, they brought in top talent for casting and directing to ensure the voices were immersive while still making them seem as if they belonged. That pool of 400 auditions was then whittled down to the five available today. Not that it was completely smooth sailing; not when the company had to shelve &#34;Sky&#34; due to its striking similarities to Scarlett Johansson.&lt;/p&gt;】&lt;p&gt;语音模式已迅速成为&lt;a href=&#34;https://dzone.com/articles/evolution-of-conversational-ai&#34;&gt;对话式 AI&lt;/a&gt; 的旗舰功能，让用户感到轻松并允许他们以最自然的方式进行互动——通过语音。 OpenAI 不断开拓创新，推出了延迟低于 500 毫秒的实时 AI 语音代理。这一成就背后的技术现已开源，提供了无与伦比的工具访问权限，使构建高质量的响应式语音代理成为可能。&lt;/p&gt;&#xA;&lt;p&gt;OpenAI 并没有采取任何行动。当他们为 ChatGPT 开发语音功能时，他们引进了顶尖的选角和导演人才，以确保声音具有身临其境的感觉，同时又让他们看起来像是属于自己的。随后，这 400 名试镜者被削减至今天的 5 名。这并不是说一切都是一帆风顺的。不是当公司因《天空》与斯嘉丽·约翰逊惊人相似而不得不搁置它时。&lt;/p&gt;</description>
      <pubDate>Mon, 23 Sep 2024 19:00:07 +0000</pubDate>
    </item>
    <item>
      <title>【A Hands-On Guide to OpenTelemetry: Linking Metrics to Traces With Exemplars, Part 1】OpenTelemetry 实践指南：使用示例将指标链接到跟踪，第 1 部分</title>
      <link>https://dzone.com/articles/otel-linking-metrics-to-traces-with-exemplars</link>
      <description>【&lt;p&gt;Are you ready to start your journey on the road to collecting telemetry data from your applications? Great observability begins with great instrumentation!&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;In this series, you&#39;ll explore how to adopt &lt;a href=&#34;https://opentelemetry.io/&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;OpenTelemetry (OTel)&lt;/a&gt; and how to instrument an application to collect tracing telemetry. You&#39;ll learn how to leverage out-of-the-box automatic instrumentation tools and understand when it&#39;s necessary to explore more advanced manual instrumentation for your applications. By the end of this series, you&#39;ll have an understanding of how telemetry travels from your applications to the OpenTelemetry Collector, and be ready to bring OpenTelemetry to your future projects. Everything discussed here is supported by &lt;a href=&#34;https://o11y-workshops.gitlab.io/workshop-opentelemetry/&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;a hands-on, self-paced workshop&lt;/a&gt; authored by &lt;a href=&#34;https://www.linkedin.com/in/paigerduty/&#34;&gt;Paige Cruz&lt;/a&gt;.&amp;nbsp;&lt;/p&gt;】&lt;p&gt;您准备好开始从应用程序收集遥测数据的旅程了吗？出色的可观测性始于出色的仪器！ &lt;/p&gt;&#xA;&lt;p&gt;在本系列中，您将探索如何采用 &lt;a href=&#34;https://opentelemetry.io/&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;OpenTelemetry (OTel)&lt;/a&gt; 以及如何检测一个应用程序来收集跟踪遥测数据。您将学习如何利用开箱即用的自动仪表工具，并了解何时需要为您的应用探索更高级的手动仪表。在本系列结束时，您将了解遥测如何从应用程序传输到 OpenTelemetry Collector，并准备好将 OpenTelemetry 引入您未来的项目。这里讨论的所有内容均由&lt;a href=&#34;https://o11y-workshops.gitlab.io/workshop-opentelemetry/&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;动手、自定进度的研讨会&lt;/ a&gt; 作者：&lt;a href=&#34;https://www.linkedin.com/in/paigerduty/&#34;&gt;Paige Cruz&lt;/a&gt;。 &lt;/p&gt;</description>
      <pubDate>Tue, 24 Sep 2024 15:00:08 +0000</pubDate>
    </item>
    <item>
      <title>【Practical Generators in Go 1.23 for Database Pagination】Go 1.23 中用于数据库分页的实用生成器</title>
      <link>https://dzone.com/articles/practical-generators-in-go-123-for-database-pagina</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;The recent introduction of range functions in &lt;a href=&#34;https://dzone.com/articles/golang-tutorial-learn-golang-by-examples&#34;&gt;Go&lt;/a&gt; 1.23 marks a significant advancement in the language’s capabilities. This new feature brings native generator-like functionality to Go, opening up new possibilities for writing efficient and elegant code. In this article, we will explore range functions and demonstrate their practical application through a real-world example: paginated database queries.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;As a software engineer, I&#39;ve experienced the critical importance of efficient data handling, especially when working with large datasets and performance-intensive applications. The techniques discussed here have broad applications across various domains, helping to optimize system resource usage and improve overall application responsiveness.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;最近在 &lt;a href=&#34;https://dzone.com/articles/golang-tutorial-learn-golang-by-examples&#34;&gt;Go&lt;/a&gt; 中引入范围函数 1.23 标记语言能力的显着进步。这一新功能为 Go 带来了类似原生生成器的功能，为编写高效、优雅的代码开辟了新的可能性。在本文中，我们将探索范围函数并通过一个实际示例演示其实际应用：分页数据库查询。&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;作为一名软件工程师，我体会到了高效数据处理的重要性，尤其是在处理大型数据集和性能密集型应用程序时。这里讨论的技术在各个领域都有广泛的应用，有助于优化系统资源使用并提高整体应用程序响应能力。&lt;/p&gt;</description>
      <pubDate>Tue, 24 Sep 2024 14:00:06 +0000</pubDate>
    </item>
    <item>
      <title>【Efficient Transformer Attention for GenAI】GenAI 的高效 Transformer Attention</title>
      <link>https://dzone.com/articles/efficient-transformer-attention-for-genai</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://dzone.com/articles/introduction-generative-ai-empowering-enterprises&#34;&gt;Generative AI&lt;/a&gt; (aka GenAI) is transforming the world with a plethora of applications including chatbots, code generation, and synthesis of images and videos. What started with ChatGPT soon led to many more products like Sora, Gemini, and Meta-AI. All these fabulous applications of GenAI are built using very large transformer-based models that are run on large GPU servers. But as the focus now shifts towards personalized privacy-focused Gen-AI (e.g., Apple Intelligence), researchers are trying to build more efficient transformers for mobile and edge deployment.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://dzone.com/articles/exploring-the-evolution-of-transformers&#34;&gt;Transformer-based models&lt;/a&gt; have become state of the art in almost all applications of &lt;a href=&#34;https://dzone.com/articles/transforming-translation-the-power-of-context-in-n-1&#34;&gt;natural language processing (NLP)&lt;/a&gt;, &lt;a href=&#34;https://dzone.com/articles/computer-vision-101&#34;&gt;computer vision&lt;/a&gt;, audio processing, and &lt;a href=&#34;https://dzone.com/articles/voice-synthesis-evolution-ethics-and-law&#34;&gt;speech synthesis&lt;/a&gt;. The key to the transformer&#39;s ability to learn long-range dependencies and develop a global understanding is the multi-head self-attention block. However, this block also turns out to be the most computationally expensive one, as it has quadratic complexity in both time and space. Thus, in order to build more efficient transformers, researchers are primarily focusing on:&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://dzone.com/articles/introduction-generative-ai-empowering-enterprises&#34;&gt;生成式 AI&lt;/a&gt;（又名 GenAI）正在通过大量的应用程序，包括聊天机器人、代码生成以及图像和视频的合成。从 ChatGPT 开始，很快就催生了更多产品，如 Sora、Gemini 和 Meta-AI。 GenAI 的所有这些出色的应用程序都是使用在大型 GPU 服务器上运行的基于变压器的大型模型构建的。但随着现在的焦点转向注重个性化隐私的 Gen-AI（例如 Apple Intelligence），研究人员正在尝试为移动和边缘部署构建更高效的转换器。&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://dzone.com/articles/exploring-the-evolution-of-transformers&#34;&gt;基于 Transformer 的模型&lt;/a&gt;几乎已成为最先进的模型&lt;a href=&#34;https://dzone.com/articles/transforming-translation-the-power-of-context-in-n-1&#34;&gt;自然语言处理 (NLP)&lt;/a&gt;、&lt;a href=&#34;https://dzone.com/articles/computer-vision-101&#34;&gt;计算机视觉&lt;/a&gt;、音频处理和&lt;a href=&#34;https://dzone.com/articles/voice-synthesis-进化伦理与法律&#34;&gt;语音合成&lt;/a&gt;。 Transformer 能够学习远程依赖关系并形成全局理解的关键是多头自注意力模块。然而，该块也被证明是计算成本最高的块，因为它在时间和空间上都具有二次复杂度。因此，为了构建更高效的变压器，研究人员主要关注：&lt;/p&gt;</description>
      <pubDate>Tue, 24 Sep 2024 16:00:08 +0000</pubDate>
    </item>
    <item>
      <title>【Reducing Infrastructure Misconfigurations With IaC Security】通过 IaC 安全性减少基础设施配置错误</title>
      <link>https://dzone.com/articles/reduce-infrastructure-misconfigurations-with-iac-security</link>
      <description>【&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/what-is-infrastructure-as-code&#34;&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;Infrastructure as Code (IaC)&lt;/span&gt;&lt;/a&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt; became the de facto standard for managing infrastructure resources for many organizations. According to Markets and Markets, a B2B research firm, the IaC market share&amp;nbsp;&lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;is poised&lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;&amp;nbsp;to reach USD 2.3 Billion by 2027.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;What Is Infrastructure as Code?&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;Before&amp;nbsp;&lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;IaC,&amp;nbsp;&lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;a developer would use the cloud provider GUI, clicking through different configurations and settings to provision a resource like a Virtual Machine. When you need to provision a single&amp;nbsp;&lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;instance,&lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;&amp;nbsp;this is easy, but modern workloads are more than one single machine, 1000s of VMs, and hundreds of storages — not to forget this is for one region.&amp;nbsp;&lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;To achieve high availability&lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;, the same stamp needs to&lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;be created&lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;&amp;nbsp;in multiple regions and availability zones.&lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;&amp;nbsp;One way organizations automated this process is, through scripts, though it had challenges like versioning and, most importantly, the redundancy of each team repeatedly creating scripts from scratch.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;】&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/what-is-infrastruct-as-code&#34;&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;基础设施即代码 (IaC)&lt;/span &gt;&lt;/a&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt; 成为许多组织管理基础设施资源的事实上的标准。 B2B 研究公司 Markets and Markets 表示，IaC 市场份额&lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;有望&lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt; 到 2027 年达到 23 亿美元。&lt;/span&gt;&lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;什么是基础设施即代码？&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;之前&lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;IaC，&lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;开发人员将使用云提供商 GUI，单击不同的配置和设置来配置虚拟机等资源。当您需要配置单个&lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;实例&lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;时，这很简单，但现代工作负载更加复杂不仅仅是一台机器、数千个虚拟机和数百个存储——不要忘记这是针对一个区域的。 &lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;为了实现高可用性&lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;，相同的标记需要&lt;/span&gt;&lt;span data- server-spaces=&#34;true&#34;&gt; &lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;在多个区域和可用区中创建&lt;/span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;。&lt; /span&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt; 组织自动化此过程的一种方法是通过脚本，尽管它面临版本控制等挑战，最重要的是，每个团队从头开始重复创建脚本的冗余。 &lt;/span&gt;&lt;/p&gt;</description>
      <pubDate>Mon, 23 Sep 2024 18:00:03 +0000</pubDate>
    </item>
    <item>
      <title>【Java Bean Validation: Applying Constraints Programmatically】Java Bean 验证：以编程方式应用约束</title>
      <link>https://dzone.com/articles/java-bean-validation-applying-constraints</link>
      <description>【&lt;p style=&#34;text-align: left;&#34;&gt;Imagine you are working on a project that includes several entities implemented as part of the system. According to the required business logic, you need to enforce specific &lt;a href=&#34;https://dzone.com/articles/validation-in-java-applications&#34;&gt;validation&lt;/a&gt; rules. However, these classes are provided as a third-party dependency, which means they cannot be modified and as a result cannot be annotated directly.&lt;/p&gt;&#xA;&lt;p style=&#34;text-align: left;&#34;&gt;To tackle this scenario, we will explore a feature of the Hibernate Validator known as &lt;a href=&#34;https://docs.jboss.org/hibernate/validator/8.0/reference/en-US/html_single/#section-programmatic-api&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;12.4. Programmatic constraint definition and declaration&lt;/a&gt; from the documentation, and demonstrate how it can be integrated with the &lt;a href=&#34;https://dzone.com/articles/history-of-spring-framework-spring-boot-framework&#34;&gt;Spring Framework&lt;/a&gt;.&amp;nbsp;&lt;/p&gt;】&lt;p style=&#34;text-align: left;&#34;&gt;假设您正在开发一个项目，其中包含作为系统一部分实现的多个实体。根据所需的业务逻辑，您需要强制执行特定的&lt;a href=&#34;https://dzone.com/articles/validation-in-java-applications&#34;&gt;验证&lt;/a&gt;规则。但是，这些类作为第三方依赖项提供，这意味着它们无法修改，因此无法直接注释。&lt;/p&gt;&#xA;&lt;p style=&#34;text-align: left;&#34;&gt;为了解决这种情况，我们将探索 Hibernate Validator 的一个功能，称为 &lt;a href=&#34;https://docs.jboss.org/hibernate/validator/8.0/参考/en-US/html_single/#section-programmatic-api&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;12.4。文档中的编程约束定义和声明&lt;/a&gt;，并演示如何将其与 &lt;a href=&#34;https://dzone.com/articles/history-of-spring-framework-spring-boot-framework 集成&#34;&gt;Spring 框架&lt;/a&gt;。 &lt;/p&gt;</description>
      <pubDate>Tue, 24 Sep 2024 17:00:03 +0000</pubDate>
    </item>
    <item>
      <title>【Oracle NoSQL Database: A Comprehensive Guide for Developers】Oracle NoSQL 数据库：开发人员综合指南</title>
      <link>https://dzone.com/articles/oracle-nosql-database-developers-guide</link>
      <description>【&lt;h2 data-line-end=&#34;4&#34; data-line-start=&#34;3&#34;&gt;About Oracle NoSQL Database&lt;/h2&gt;&#xA;&lt;p data-line-end=&#34;4&#34; data-line-start=&#34;3&#34;&gt;Oracle NoSQL Database is a robust solution offering a blend of SQL-like interfaces for working with NoSQL data models. This database system enables developers to handle various data types without impedance mismatch issues, including flat relational data, hierarchical typed data, and schema-less JSON data. Impedance mismatch occurs when differences between the database and the programming language models create data handling challenges. Still, Oracle NoSQL eliminates this by providing a seamless experience across multiple data structures.&lt;/p&gt;&#xA;&lt;p data-line-end=&#34;7&#34; data-line-start=&#34;6&#34;&gt;Oracle NoSQL Database Cloud Service simplifies the development process, allowing developers to focus on building applications rather than managing infrastructure. It supports document, fixed schema, and &lt;a href=&#34;https://dzone.com/articles/making-scalability-with-key-value-database-in-java&#34;&gt;key-value database models&lt;/a&gt;, providing low-latency response times, active-active regional replication, and elastic &lt;a href=&#34;https://dzone.com/refcardz/scalability&#34;&gt;scalability&lt;/a&gt;. The service is designed to scale effortlessly with dynamic workloads, offering features such as:&lt;/p&gt;】&lt;h2 data-line-end=&#34;4&#34; data-line-start=&#34;3&#34;&gt;关于 Oracle NoSQL 数据库&lt;/h2&gt;&#xA;&lt;p data-line-end=&#34;4&#34; data-line-start=&#34;3&#34;&gt;Oracle NoSQL 数据库是一个强大的解决方案，提供了用于处理 NoSQL 数据模型的类 SQL 接口的混合。该数据库系统使开发人员能够处理各种数据类型，而不会出现阻抗不匹配问题，包括平面关系数据、分层类型数据和无模式 JSON 数据。当数据库和编程语言模型之间的差异造成数据处理挑战时，就会出现阻抗不匹配。尽管如此，Oracle NoSQL 通过提供跨多个数据结构的无缝体验消除了这一点。&lt;/p&gt;&#xA;&lt;p data-line-end=&#34;7&#34; data-line-start=&#34;6&#34;&gt;Oracle NoSQL 数据库云服务简化了开发流程，使开发人员能够专注于构建应用程序而不是管理基础设施。它支持文档、固定模式和&lt;a href=&#34;https://dzone.com/articles/making-scalability-with-key-value-database-in-java&#34;&gt;键值数据库模型&lt;/a&gt;，提供低延迟响应时间、主动-主动区域复制和弹性&lt;a href=&#34;https://dzone.com/refcardz/scalability&#34;&gt;可扩展性&lt;/a&gt;。该服务旨在通过动态工作负载轻松扩展，提供以下功能：&lt;/p&gt;</description>
      <pubDate>Tue, 24 Sep 2024 18:00:10 +0000</pubDate>
    </item>
    <item>
      <title>【Exploring the Sidecar Pattern in Cloud-Native Architecture】探索云原生架构中的Sidecar模式</title>
      <link>https://dzone.com/articles/sidecar-pattern-in-cloud-native-architecture</link>
      <description>【&lt;p&gt;Distributed services have indeed revolutionized the design and deployment of applications in the modern world of cloud-native architecture: flexibility, scalability, and resilience are provided by these autonomous, loosely coupled services. This also means that services add complexity to our systems, especially with cross-cutting concerns such as logging, monitoring, security, and configuration. As a fundamental design concept, the sidecar pattern enhances the distributed architecture in a seamless and scalable manner.&lt;/p&gt;&#xA;&lt;p&gt;Throughout this article, we explore what the sidecar pattern offers, its use cases, and why it has become so widely used in cloud-native environments.&lt;/p&gt;】&lt;p&gt;分布式服务确实彻底改变了现代云原生架构中应用程序的设计和部署：这些自治、松散耦合的服务提供了灵活性、可扩展性和弹性。这也意味着服务增加了我们系统的复杂性，特别是在日志记录、监控、安全性和配置等横切关注点上。作为一个基本的设计理念，sidecar 模式以无缝且可扩展的方式增强了分布式架构。&lt;/p&gt;&#xA;&lt;p&gt;在本文中，我们将探讨 Sidecar 模式提供的功能、其用例以及它为何在云原生环境中得到如此广泛的使用。&lt;/p&gt;</description>
      <pubDate>Tue, 24 Sep 2024 13:00:07 +0000</pubDate>
    </item>
  </channel>
</rss>