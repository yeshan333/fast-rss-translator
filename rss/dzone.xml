<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Principles of Modern Data Infrastructure】现代数据基础设施原理</title>
      <link>https://dzone.com/articles/principles-of-modern-data-infrastructure</link>
      <description>【&lt;section&gt;&#xA; &lt;article&gt;&#xA;  &lt;p&gt;The evolution of the internet over the past few decades has undeniably impacted how our societies function. From facilitating globalization to making new technology like social media and consumer apps available to nearly every person on the planet, the web has seeped into most aspects of our day-to-day lives. However, this ubiquity comes with an ever-growing need to manage enormous amounts of data, which requires better and better data infrastructure.&lt;/p&gt;&#xA;  &lt;p&gt;Back in the Web 1.0 era, we could really only read static content on the internet. A decade later, with Web 2.0, it became possible to read and write on online social networks. Now, with Web 3.0 and the dawn of AI and blockchain, a single person generates around &lt;a href=&#34;https://time.com/6108001/data-protection-richard-stengel/&#34; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;1.7 MB of data every second&lt;/a&gt;. That adds up to approximately 146.88 GB of data per person per day. Such demanding workloads mean that data infrastructure is now mission-critical for most businesses. Modern data infrastructure supports everything from daily operational workloads (&lt;a href=&#34;https://en.wikipedia.org/wiki/Online_transaction_processing&#34; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;OLTP&lt;/a&gt;) to strategic decision-making workloads (&lt;a href=&#34;https://en.wikipedia.org/wiki/Online_analytical_processing&#34; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;OLAP&lt;/a&gt;).&lt;/p&gt;】&lt;部分&gt;&#xA; &lt;文章&gt;&#xA;  &lt;p&gt;过去几十年来互联网的发展无可否认地影响了我们社会的运作方式。从促进全球化到让社交媒体和消费者应用程序等新技术可供地球上的几乎每个人使用，网络已经渗透到我们日常生活的方方面面。然而，这种普遍性伴随着管理海量数据的需求不断增长，这需要越来越好的数据基础设施。&lt;/p&gt;&#xA;  &lt;p&gt;回到 Web 1.0 时代，我们实际上只能阅读互联网上的静态内容。十年后，随着 Web 2.0 的出现，在线社交网络上阅读和写作成为可能。现在，随着 Web 3.0 以及人工智能和区块链的出现，一个人可以围绕 &lt;a href=&#34;https://time.com/6108001/data-protection-richard-stengel/&#34; rel=&#34;nofollow noopener noreferrer&#34; 目标生成=&#34;_blank&#34;&gt;每秒 1.7 MB 数据&lt;/a&gt;。每人每天总计约 146.88 GB 数据。如此苛刻的工作负载意味着数据基础设施现在对于大多数企业来说都是关键任务。现代数据基础设施支持从日常运营工作负载 (&lt;a href=&#34;https://en.wikipedia.org/wiki/Online_transaction_processing&#34; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;OLTP&lt;/a&gt;) 到战略性数据的一切决策工作负载 (&lt;a href=&#34;https://en.wikipedia.org/wiki/Online_analytical_processing&#34; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;OLAP&lt;/a&gt;)。&lt;/p&gt;</description>
      <pubDate>Fri, 06 Sep 2024 15:00:06 +0000</pubDate>
    </item>
    <item>
      <title>【Mastering Tailwind CSS: Overcome Styling Conflicts With Tailwind Merge and clsx】掌握 Tailwind CSS：通过 Tailwind Merge 和 clsx 克服样式冲突</title>
      <link>https://dzone.com/articles/mastering-tailwind-css-with-tailwind-merge-and-clsx</link>
      <description>【&lt;p&gt;People have been emailing and asking me to write something on some soft topics for beginners, as I write mostly for mid-level or seniors. So, here is a new article for beginners, especially for UI developers.&lt;/p&gt;&#xA;&lt;p&gt;Today, let&#39;s explore the common challenges developers face when working with Tailwind CSS and how to overcome them using the powerful combination of Tailwind Merge and clsx.&lt;/p&gt;】&lt;p&gt;人们一直在发电子邮件，要求我为初学者写一些关于一些软主题的东西，因为我主要为中级或高级人员写文章。因此，这是一篇针对初学者，尤其是 UI 开发人员的新文章。&lt;/p&gt;&#xA;&lt;p&gt;今天，让我们探讨开发人员在使用 Tailwind CSS 时面临的常见挑战，以及如何使用 Tailwind Merge 和 clsx 的强大组合来克服这些挑战。&lt;/p&gt;</description>
      <pubDate>Fri, 06 Sep 2024 21:00:05 +0000</pubDate>
    </item>
    <item>
      <title>【Mainframe Modernization: A Comprehensive Technical Blueprint】大型机现代化：综合技术蓝图</title>
      <link>https://dzone.com/articles/mainframe-modernization-a-comprehensive-technical</link>
      <description>【&lt;p&gt;Mainframe systems have been the backbone of enterprise computing for decades, renowned for their reliability, performance, and security. However, the evolving business landscape demands agility, scalability, and cost-effectiveness, prompting organizations to explore cloud-based solutions. Major technology companies, including cloud providers and system integrators, have invested heavily in mainframe migration practices, recognizing the significance of this transformation.&lt;/p&gt;&#xA;&lt;p&gt;Mainframes and cloud computing each have their strengths and specific use cases. It&#39;s not fair to generalize either, and in practice, a hybrid approach is common. This post will explore a practical solution for mainframe workload migration using a hybrid pattern, where certain workloads move to the cloud while still interacting with on-premises applications and data sources.&lt;/p&gt;】&lt;p&gt;几十年来，大型机系统一直是企业计算的支柱，以其可靠性、性能和安全性而闻名。然而，不断发展的业务环境需要敏捷性、可扩展性和成本效益，促使组织探索基于云的解决方案。包括云提供商和系统集成商在内的主要科技公司已经在大型机迁移实践上投入了大量资金，认识到这种转变的重要性。&lt;/p&gt;&#xA;&lt;p&gt;大型机和云计算各有其优势和特定的用例。一概而论也是不公平的，在实践中，混合方法很常见。本文将探讨使用混合模式进行大型机工作负载迁移的实用解决方案，其中某些工作负载迁移到云端，同时仍与本地应用程序和数据源交互。&lt;/p&gt;</description>
      <pubDate>Fri, 06 Sep 2024 19:00:06 +0000</pubDate>
    </item>
    <item>
      <title>【Comparison of Apache Astro and Airflow】Apache Astro 和 Airflow 的比较</title>
      <link>https://dzone.com/articles/comparison-of-apache-astro-and-airflow</link>
      <description>【&lt;p&gt;Effective workflow orchestration is the key to creating automation around complex process-oriented activities in the modern landscape of software development. Considering data engineering and data science, &lt;a href=&#34;https://dzone.com/articles/exploring-the-features-and-flexibility-of-astro&#34;&gt;Astro&lt;/a&gt; and &lt;a href=&#34;https://dzone.com/articles/optimizing-airflow-a-case-study-in-cloud-resource&#34;&gt;Apache Airflow&lt;/a&gt; rise to the top as important tools used in the management of these data workflows. This article compares Astro and Apache Airflow, explaining their architecture, features, scalability, usability, community support, and integration capabilities. This should help software developers and data engineers in selecting the right tool for their specific needs and project requirements.&lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;Astro Overview&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Astro is a fully Kubernetes-native platform designed to easily orchestrate the workflows in cloud-native systems. It uses &lt;a href=&#34;https://dzone.com/refcardz/getting-started-kubernetes&#34;&gt;Kubernetes&lt;/a&gt; itself to handle container orchestration, which adds fault tolerance and elasticity out of the box. Hence, Astro works effectively in scenarios that require &lt;a href=&#34;https://dzone.com/trendreports/microservices-and-containerization&#34;&gt;microservices and containerization&lt;/a&gt; to be essential to the architecture.&lt;/p&gt;】&lt;p&gt;有效的工作流程编排是在现代软件开发环境中围绕复杂的面向流程的活动创建自动化的关键。考虑到数据工程和数据科学，&lt;a href=&#34;https://dzone.com/articles/exploring-the-features-and-flexibility-of-astro&#34;&gt;Astro&lt;/a&gt; 和 &lt;a href=&#34;https: //dzone.com/articles/optimizing-airflow-a-case-study-in-cloud-resource&#34;&gt;Apache Airflow&lt;/a&gt; 作为管理这些数据工作流的重要工具而名列前茅。本文对 Astro 和 Apache Airflow 进行了比较，解释了它们的架构、功能、可扩展性、可用性、社区支持和集成功能。这应该有助于软件开发人员和数据工程师根据其特定需求和项目要求选择正确的工具。&lt;/p&gt;&#xA;&lt;h2&gt;&lt;strong&gt;Astro 概述&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Astro 是一个完全 Kubernetes 原生的平台，旨在轻松编排云原生系统中的工作流程。它使用 &lt;a href=&#34;https://dzone.com/refcardz/getting-started-kubernetes&#34;&gt;Kubernetes&lt;/a&gt; 本身来处理容器编排，这增加了开箱即用的容错能力和弹性。因此，Astro 在需要&lt;a href=&#34;https://dzone.com/trendreports/microservices-and-containerization&#34;&gt;微服务和容器化&lt;/a&gt;对架构至关重要的场景中有效工作。&lt;/p&gt;</description>
      <pubDate>Fri, 06 Sep 2024 17:00:05 +0000</pubDate>
    </item>
    <item>
      <title>【Working With Multiple testng.xml Files】使用多个 testng.xml 文件</title>
      <link>https://dzone.com/articles/working-with-multiple-testngxml-files</link>
      <description>【&lt;p&gt;While working on an open source &lt;a href=&#34;https://github.com/mfaisalkhatri/selenium4poc&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt; project that was created to showcase the working of Selenium WebDriver framework with Java, as the project grew, there was a need to create multiple &lt;strong&gt;testng.xml&lt;/strong&gt; files for running different tests.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;These multiple files were created to segregate the tests and place all the tests related to a respective website in a single &lt;strong&gt;testng.xml&lt;/strong&gt; (I have used different demo websites to demo different actions that can be automated using Selenium WebDriver).&lt;/p&gt;】&lt;p&gt;在开发开源 &lt;a href=&#34;https://github.com/mfaisalkhatri/selenium4poc&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt; 项目时，该项目的创建是为了展示Selenium WebDriver 框架与 Java 一起工作，随着项目的增长，需要创建多个 &lt;strong&gt;testng.xml&lt;/strong&gt; 文件来运行不同的测试。 &lt;/p&gt;&#xA;&lt;p&gt;创建这些多个文件是为了隔离测试，并将与各个网站相关的所有测试放在一个 &lt;strong&gt;testng.xml&lt;/strong&gt; 中（我使用了不同的演示网站来演示可以自动化的不同操作使用 Selenium WebDriver）。&lt;/p&gt;</description>
      <pubDate>Mon, 09 Sep 2024 18:00:03 +0000</pubDate>
    </item>
    <item>
      <title>【Data Storage Formats for Big Data Analytics: Performance and Cost Implications of Parquet, Avro, and ORC】大数据分析的数据存储格式：Parquet、Avro 和 ORC 的性能和成本影响</title>
      <link>https://dzone.com/articles/performance-and-cost-implications-parquet-avro-orc</link>
      <description>【&lt;p&gt;Efficient data processing is crucial for businesses and organizations that rely on big data analytics to make informed decisions. One key factor that significantly affects the &lt;a href=&#34;https://dzone.com/articles/building-high-performance-big-data-and-analytics-s&#34;&gt;performance&lt;/a&gt; of data processing is the storage format of the data. This article explores the impact of different storage formats, specifically Parquet, Avro, and ORC on query performance and costs in big data environments on Google Cloud Platform (GCP). This article provides benchmarks, discusses cost implications, and offers recommendations on selecting the appropriate format based on specific use cases.&lt;/p&gt;&#xA;&lt;h2&gt;Introduction to Storage Formats in Big Data&lt;/h2&gt;&#xA;&lt;p&gt;Data storage formats are the backbone of any big data processing environment. They define how data is stored, read, and written directly impacting storage efficiency, query performance, and data retrieval speeds. In the big data ecosystem, columnar formats like Parquet and ORC and row-based formats like Avro are widely used due to their optimized performance for specific types of queries and processing tasks.&lt;/p&gt;】&lt;p&gt;高效的数据处理对于依赖大数据分析做出明智决策的企业和组织至关重要。显着影响数据处理&lt;a href=&#34;https://dzone.com/articles/building-high-performance-big-data-and-analytics-s&#34;&gt;性能&lt;/a&gt;的一个关键因素是存储数据的格式。本文探讨了不同存储格式（特别是 Parquet、Avro 和 ORC）对 Google Cloud Platform (GCP) 上的大数据环境中的查询性能和成本的影响。本文提供了基准，讨论了成本影响，并提供了根据特定用例选择适当格式的建议。&lt;/p&gt;&#xA;&lt;h2&gt;大数据存储格式简介&lt;/h2&gt;&#xA;&lt;p&gt;数据存储格式是任何大数据处理环境的支柱。它们定义了数据的存储、读取和写入方式，直接影响存储效率、查询性能和数据检索速度。在大数据生态系统中，Parquet、ORC 等列式格式以及 Avro 等行式格式因其针对特定类型查询和处理任务的优化性能而得到广泛使用。&lt;/p&gt;</description>
      <pubDate>Mon, 09 Sep 2024 12:00:07 +0000</pubDate>
    </item>
    <item>
      <title>【Spring Boot GoT: Game of Trace!】Spring Boot GoT：追踪游戏！</title>
      <link>https://dzone.com/articles/spring-boot-got-game-of-trace</link>
      <description>【&lt;p&gt;When we, developers, find some &lt;a href=&#34;https://dzone.com/articles/along-came-a-bug&#34;&gt;bugs&lt;/a&gt; in our logs, this sometimes is worse than a dragon fight!&lt;/p&gt;&#xA;&lt;p&gt;Let&#39;s start with the basics. We have this order of severity of logs, from most detailed to no detail at all:&lt;/p&gt;】&lt;p&gt;当我们开发者在日志中发现一些&lt;a href=&#34;https://dzone.com/articles/along-came-a-bug&#34;&gt;bug&lt;/a&gt;时，有时这比龙还糟糕战斗！&lt;/p&gt;&#xA;&lt;p&gt;让我们从基础知识开始。我们对日志的严重性进行了排序，从最详细到根本没有详细：&lt;/p&gt;</description>
      <pubDate>Mon, 09 Sep 2024 21:00:02 +0000</pubDate>
    </item>
    <item>
      <title>【The Pre-Mortem: Preventing Product Failure Before It Strikes】事前剖析：预防产品故障发生</title>
      <link>https://dzone.com/articles/pre-mortem-preventing-product-failure-before-it-strikes</link>
      <description>【&lt;h2&gt;TL; DR: The Pre-Mortem: A Non-negotiable Part of Your Product Development Toolbox&lt;/h2&gt;&#xA;&lt;p&gt;Do you want to build products that avoid costly mistakes, meet customer needs, and drastically enhance your career prospects? The the pre-mortem is your secret weapon!&lt;/p&gt;&#xA;&lt;p&gt;By imagining how a project might fail before it even begins, teams can identify and mitigate hidden risks early, ensuring a more resilient, successful outcome. This article explains why pre-mortems are a brilliant tool for risk mitigation, improving your team’s decision process, and how they can transform your product development process. Learn how to apply this proactive strategy and create bulletproof products.&lt;/p&gt;】&lt;h2&gt;TL; DR：事前剖析：产品开发工具箱中不可协商的部分&lt;/h2&gt;&#xA;&lt;p&gt;您想要打造能够避免代价高昂的错误、满足客户需求并大幅提升您的职业前景的产品吗？事前剖析是你的秘密武器！&lt;/p&gt;&#xA;&lt;p&gt;通过想象项目在开始之前可能会失败的情况，团队可以及早发现并减轻隐藏的风险，确保获得更有弹性的成功结果。本文解释了为什么事前分析是缓解风险、改进团队决策流程的绝佳工具，以及它们如何改变您的产品开发流程。了解如何应用这种主动策略并创造防弹产品。&lt;/p&gt;</description>
      <pubDate>Mon, 09 Sep 2024 15:00:07 +0000</pubDate>
    </item>
    <item>
      <title>【What Are Logging Levels?】什么是日志记录级别？</title>
      <link>https://dzone.com/articles/what-are-logging-levels</link>
      <description>【&lt;p data-pm-slice=&#34;1 1 []&#34;&gt;Logging is one of the most important parts of the distributed systems. Many things can break, but when the logging breaks, then we are completely lost. In this blog post, we will understand log levels and how to log efficiently in distributed systems.&lt;/p&gt;&#xA;&lt;h2&gt;Logging Levels&lt;/h2&gt;&#xA;&lt;p&gt;Whenever we log a message, we need to specify the log level or log severity. It’s an indicator of how important the message is and who should be concerned.&lt;/p&gt;】&lt;p data-pm-slice=&#34;1 1 []&#34;&gt;日志记录是分布式系统最重要的部分之一。很多东西都可能会损坏，但是当伐木损坏时，我们就完全迷失了。在这篇博文中，我们将了解日志级别以及如何在分布式系统中有效地记录日志。&lt;/p&gt;&#xA;&lt;h2&gt;日志记录级别&lt;/h2&gt;&#xA;&lt;p&gt;每当我们记录消息时，我们都需要指定日志级别或日志严重性。它表明了消息的重要性以及谁应该关注。&lt;/p&gt;</description>
      <pubDate>Mon, 09 Sep 2024 13:30:07 +0000</pubDate>
    </item>
    <item>
      <title>【Model-Driven Development and Testing】模型驱动的开发和测试</title>
      <link>https://dzone.com/articles/model-driven-development-and-testing</link>
      <description>【&lt;h2 dir=&#34;ltr&#34;&gt;The Meta of Design&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;With several decades of experience, I love building enterprise applications for companies. Each solution requires a set of models: an SQL database, an API (Application Programming Interface), declarative rules, declarative security (role-based access control), test-driven scenarios, workflows, and user interfaces. The &#34;meta&#34; approach to design requires thinking of how each of these components interacts with the other. We also need to understand how changes in the scope of the project impact each of these meta-components. While I have worked in many different languages (APL, Revelation/PICK, BASIC, Smalltalk, Object/1, &lt;a href=&#34;https://dzone.com/refcardz/core-java&#34;&gt;Java&lt;/a&gt;, &lt;a href=&#34;https://dzone.com/refcardz/object-oriented-javascript&#34;&gt;JavaScript&lt;/a&gt;, &lt;a href=&#34;https://dzone.com/refcardz/nodejs&#34;&gt;Node.js&lt;/a&gt;, &lt;a href=&#34;https://dzone.com/refcardz/core-python&#34;&gt;Python&lt;/a&gt;) these models are always the foundation that influences the final integrated solution. Models are meta abstractions that describe how the shape, content, and ability of the object will behave in the running environment regardless of language, platform, or operating system (OS).&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;Model First Approach&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Starting with an existing SQL Schema and a good ORM allows the abstraction of the database and the generation of an API. I have been working with &lt;a href=&#34;https://apilogicserver.github.io/Docs/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;ApiLogicServer&lt;/a&gt; (a GenAI-powered Python open-source platform) which has a command line interface to connect the major SQL databases and create an SQLAlchemy ORM (Object-Relational Model). From this model, &amp;nbsp;an Open API (aka Swagger) for JSON API is created, and a YAML file (model) drives a react-admin runtime. The YAML file is also used to build an Ontimize (&lt;a href=&#34;https://dzone.com/refcardz/angularjs-essentials&#34;&gt;Angular&lt;/a&gt;) user interface. Note that the GenAI part of ApiLogicServer lets me use a prompt-driven approach to get this entire running stack using just a few keywords.&lt;/p&gt;】&lt;h2 dir=&#34;ltr&#34;&gt;设计元&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;凭借数十年的经验，我喜欢为公司构建企业应用程序。每个解决方案都需要一组模型：SQL 数据库、API（应用程序编程接口）、声明性规则、声明性安全性（基于角色的访问控制）、测试驱动的场景、工作流和用户界面。 “元”设计方法需要考虑每个组件如何与其他组件交互。我们还需要了解项目范围的变化如何影响每个元组件。虽然我使用过许多不同的语言（APL、Revelation/PICK、BASIC、Smalltalk、Object/1、&lt;a href=&#34;https://dzone.com/refcardz/core-java&#34;&gt;Java&lt;/a&gt;、&lt; a href=&#34;https://dzone.com/refcardz/object-oriented-javascript&#34;&gt;JavaScript&lt;/a&gt;、&lt;a href=&#34;https://dzone.com/refcardz/nodejs&#34;&gt;Node.js&lt;/ a&gt;、&lt;a href=&#34;https://dzone.com/refcardz/core-python&#34;&gt;Python&lt;/a&gt;）这些模型始终是影响最终集成解决方案的基础。模型是元抽象，描述对象的形状、内容和能力在运行环境中的行为方式，而与语言、平台或操作系统 (OS) 无关。&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;模型优先方法&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;从现有的 SQL 架构和良好的 ORM 开始，可以抽象数据库并生成 API。我一直在使用 &lt;a href=&#34;https://apilogicserver.github.io/Docs/&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;ApiLogicServer&lt;/a&gt; （一个由 GenAI 驱动的 Python 开源平台） ）它有一个命令行界面来连接主要的 SQL 数据库并创建 SQLAlchemy ORM（对象关系模型）。从此模型中，创建了用于 JSON API 的开放 API（又名 Swagger），并由 YAML 文件（模型）驱动 React-Admin 运行时。 YAML 文件还用于构建 Ontimize (&lt;a href=&#34;https://dzone.com/refcardz/angularjs-essentials&#34;&gt;Angular&lt;/a&gt;) 用户界面。请注意，ApiLogicServer 的 GenAI 部分允许我使用提示驱动的方法，仅使用几个关键字即可获取整个运行堆栈。&lt;/p&gt;</description>
      <pubDate>Mon, 09 Sep 2024 16:45:05 +0000</pubDate>
    </item>
  </channel>
</rss>