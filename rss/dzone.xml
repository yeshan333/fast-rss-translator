<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Four Essential Tips for Building a Robust REST API in Java】在 Java 中构建健壮的 REST API 的四个基本技巧</title>
      <link>https://dzone.com/articles/four-tips-for-building-a-robust-rest-api-in-java</link>
      <description>【&lt;p data-line-end=&#34;3&#34; data-line-start=&#34;2&#34;&gt;Creating a solid &lt;a href=&#34;https://dzone.com/articles/rest-api-best-practices-with-design-examples-from&#34;&gt;REST API in Java&lt;/a&gt; requires more than a basic grasp of HTTP requests and responses. Ensuring that your API is well-designed, maintainable, and secure is essential. This article will offer four critical tips to improve your REST API. It assumes you are already acquainted with the Richardson Maturity Model, especially up to Level 2, which is the minimum requirement for a good API. If you need a quick reminder about the Richardson Maturity Model, I recommend reading this article by Martin Fowler: &lt;a href=&#34;https://martinfowler.com/articles/richardsonMaturityModel.html&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Richardson Maturity Model&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p data-line-end=&#34;5&#34; data-line-start=&#34;4&#34;&gt;Given that prerequisite, let’s dive into the tips. For illustration purposes, we’ll use an example from the expedition domain. While we won’t focus on entities and layers in detail, imagine we have the following entity class:&lt;/p&gt;】&lt;p data-line-end=&#34;3&#34; data-line-start=&#34;2&#34;&gt;创建一个可靠的&lt;a href=&#34;https://dzone.com/articles/rest-api-best-practices-with-design -examples-from&#34;&gt;Java 中的 REST API&lt;/a&gt; 需要的不仅仅是对 HTTP 请求和响应的基本掌握。确保您的 API 设计良好、可维护且安全至关重要。本文将提供四个关键技巧来改进 REST API。它假设您已经熟悉 Richardson 成熟度模型，尤其是达到 2 级，这是良好 API 的最低要求。如果您需要有关理查森成熟度模型的快速提醒，我建议您阅读 Martin Fowler 的这篇文章：&lt;a href=&#34;https://martinfowler.com/articles/richardsonMaturityModel.html&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank ”理查森成熟度模型&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p data-line-end=&#34;5&#34; data-line-start=&#34;4&#34;&gt;考虑到这个先决条件，让我们深入了解一下技巧。出于说明目的，我们将使用探险领域的示例。虽然我们不会详细关注实体和层，但假设我们有以下实体类：&lt;/p&gt;</description>
      <pubDate>Wed, 21 Aug 2024 11:00:05 +0000</pubDate>
    </item>
    <item>
      <title>【Improving Snowflake Performance by Mastering the Query Profile】通过掌握查询配置文件来提高 Snowflake 性能</title>
      <link>https://dzone.com/articles/improve-snowflake-performance-mastering-the-query-profile</link>
      <description>【&lt;p&gt;Having worked with over 50 Snowflake customers across Europe and the Middle East, I&#39;ve analyzed hundreds of Query Profiles and identified many issues including issues around performance and cost.&lt;/p&gt;&#xA;&lt;p&gt;In this article, I&#39;ll explain:&lt;/p&gt;】&lt;p&gt;与欧洲和中东地区的 50 多个 Snowflake 客户合作后，我分析了数百个查询配置文件并发现了许多问题，包括性能和成本方面的问题。&lt;/p&gt;&#xA;&lt;p&gt;在本文中，我将解释：&lt;/p&gt;</description>
      <pubDate>Wed, 21 Aug 2024 20:00:05 +0000</pubDate>
    </item>
    <item>
      <title>【Data Pipeline Techniques in Action】数据管道技术的实际应用</title>
      <link>https://dzone.com/articles/data-pipeline-techniques-in-action</link>
      <description>【&lt;p&gt;The topics covered are:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA; &lt;li&gt;Data pipeline architecture&lt;/li&gt;&#xA; &lt;li&gt;High-scale data ingestion&lt;/li&gt;&#xA; &lt;li&gt;Data transformation and processing&lt;/li&gt;&#xA; &lt;li&gt;Data storage&lt;/li&gt;&#xA; &lt;li&gt;Staging data delivery&lt;/li&gt;&#xA; &lt;li&gt;Operational data&lt;/li&gt;&#xA; &lt;li&gt;Hands-on exercise&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img style=&#34;width: 743px;&#34; class=&#34;fr-fic fr-dib lazyload&#34; data-image=&#34;true&#34; data-new=&#34;false&#34; data-sizeformatted=&#34;223.0 kB&#34; data-mimetype=&#34;image/png&#34; data-creationdate=&#34;1722900214963&#34; data-creationdateformatted=&#34;08/05/2024 11:23 PM&#34; data-type=&#34;temp&#34; data-url=&#34;https://dz2cdn1.dzone.com/storage/temp/17836876-pipeline.png&#34; data-modificationdate=&#34;null&#34; data-size=&#34;222954&#34; data-name=&#34;pipeline.png&#34; data-id=&#34;17836876&#34; data-src=&#34;https://dz2cdn1.dzone.com/storage/temp/17836876-pipeline.png&#34; alt=&#34;Data governance, orchestration, and monitoring&#34;&gt;&lt;/p&gt;】&lt;p&gt;涵盖的主题是：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA; &lt;li&gt;数据管道架构&lt;/li&gt;&#xA; &lt;li&gt;大规模数据提取&lt;/li&gt;&#xA; &lt;li&gt;数据转换和处理&lt;/li&gt;&#xA; &lt;li&gt;数据存储&lt;/li&gt;&#xA; &lt;li&gt;暂存数据交付&lt;/li&gt;&#xA; &lt;li&gt;运营数据&lt;/li&gt;&#xA; &lt;li&gt;实践练习&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img style=&#34;宽度：743px;&#34; class =“fr-fic fr-dib lazyload”data-image =“true”data-new =“false”data-sizeformatted =“223.0 kB”data-mimetype =“image/png”data-creationdate =“1722900214963”数据-creationdateformatted=&#34;08/05/2024 11:23 PM&#34; data-type=&#34;temp&#34; data-url=&#34;https://dz2cdn1.dzone.com/storage/temp/17836876-pipeline.png&#34; data-modificationdate= “null”data-size =“222954”data-name =“pipeline.png”data-id =“17836876”data-src =“https://dz2cdn1.dzone.com/storage/temp/17836876-pipeline.png” &#34; alt=&#34;数据治理、编排和监控&#34;&gt;&lt;/p&gt;</description>
      <pubDate>Wed, 21 Aug 2024 18:00:03 +0000</pubDate>
    </item>
    <item>
      <title>【Using SQS With JMS for Legacy Applications】将 SQS 与 JMS 结合使用用于遗留应用程序</title>
      <link>https://dzone.com/articles/using-sqs-with-jms-for-legacy-applications</link>
      <description>【&lt;p&gt;As part of migrating &lt;a href=&#34;https://dzone.com/refcardz/java-enterprise-edition-7&#34;&gt;Java enterprise&lt;/a&gt; applications to the cloud, it is beneficial to replace parts of the technology stack with equivalent cloud services. As an example, traditional messaging services are being replaced by &lt;a href=&#34;https://dzone.com/articles/exploring-the-architecture-of-amazon-sqs&#34;&gt;Amazon SQS&lt;/a&gt; as part of the migration to AWS. &lt;a href=&#34;https://dzone.com/articles/java-jms-oversimplified&#34;&gt;Java Messaging Service (JMS)&lt;/a&gt; has been a mainstay in the technology stack of Java enterprise applications. The &lt;a href=&#34;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-java-message-service-jms-client.html&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;support&amp;nbsp;&lt;/a&gt;provided by SQS for the JMS standard helps with an almost seamless technology replacement. In this article, I have described the steps to integrate a legacy Java application with SQS through JMS.&lt;/p&gt;&#xA;&lt;h2&gt;Legacy Java Application&lt;/h2&gt;&#xA;&lt;p&gt;For the purposes of this article, a legacy Java application has the following characteristics:&lt;/p&gt;】&lt;p&gt;作为将 &lt;a href=&#34;https://dzone.com/refcardz/java-enterprise-edition-7&#34;&gt;Java 企业&lt;/a&gt; 应用程序迁移到云的一部分，替换部分具有同等云服务的技术堆栈。例如，作为迁移的一部分，传统消息传递服务将被 &lt;a href=&#34;https://dzone.com/articles/exploring-the-architecture-of-amazon-sqs&#34;&gt;Amazon SQS&lt;/a&gt; 取代到 AWS。 &lt;a href=&#34;https://dzone.com/articles/java-jms-oversimplified&#34;&gt;Java 消息服务 (JMS)&lt;/a&gt; 一直是 Java 企业应用程序技术堆栈的支柱。 &lt;a href=&#34;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-java-message-service-jms-client.html&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt; SQS 为 JMS 标准提供的支持&lt;/a&gt;有助于实现几乎无缝的技术更换。在本文中，我描述了通过 JMS 将遗留 Java 应用程序与 SQS 集成的步骤。&lt;/p&gt;&#xA;&lt;h2&gt;旧版 Java 应用程序&lt;/h2&gt;&#xA;&lt;p&gt;就本文而言，遗留 Java 应用程序具有以下特征：&lt;/p&gt;</description>
      <pubDate>Wed, 21 Aug 2024 16:00:05 +0000</pubDate>
    </item>
    <item>
      <title>【Automatic 1111: Sketch-to-Image Workflow】自动 1111：草图到图像工作流程</title>
      <link>https://dzone.com/articles/automatic-1111-sketch-to-image-workflow</link>
      <description>【&lt;p&gt;In this article, we will be discussing how to convert hand-drawn or digital sketches into photorealistic images using stable diffusion models with the help of ControlNet. We will be extending the &lt;a href=&#34;https://dzone.com/articles/automatic-1111-apis&#34;&gt;Automatic 1111&lt;/a&gt;&#39;s &lt;code&gt;txt2img&lt;/code&gt; feature to develop this custom workflow.&lt;/p&gt;&#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt;&#xA;&lt;p&gt;Before diving in, let&#39;s make sure we have the following prerequisites covered:&lt;/p&gt;】&lt;p&gt;在本文中，我们将讨论如何在 ControlNet 的帮助下使用稳定的扩散模型将手绘或数字草图转换为逼真的图像。我们将扩展 &lt;a href=&#34;https://dzone.com/articles/automatic-1111-apis&#34;&gt;Automatic 1111&lt;/a&gt; 的 &lt;code&gt;txt2img&lt;/code&gt; 功能来开发此自定义工作流程。 &lt;/p&gt;&#xA;&lt;h2&gt;先决条件&lt;/h2&gt;&#xA;&lt;p&gt;在深入研究之前，让我们确保满足以下先决条件：&lt;/p&gt;</description>
      <pubDate>Wed, 21 Aug 2024 19:00:03 +0000</pubDate>
    </item>
    <item>
      <title>【Securing Federal Systems】确保联邦系统安全</title>
      <link>https://dzone.com/articles/securing-federal-systems</link>
      <description>【&lt;p&gt;Computer systems in the federal government must demonstrate that they are secure. The process is known as accreditation and the goal is to receive an Authority to Operate (ATO). The ATO allows the system to be put into production for use by the federal workforce. While the process is specific to federal systems, state and local governments usually have similar requirements and most commercial companies have similar security reviews before releasing new systems.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;The foundation of the process is governed by the &lt;a href=&#34;https://dzone.com/articles/exploring-the-nist-ai-risk-management-framework-a&#34;&gt;Risk Management Framework&lt;/a&gt; described in the &lt;a href=&#34;https://csrc.nist.gov/pubs/sp/800/37/r2/final&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;National Institute of Standards and Technology (NIST) Special Publication (SP) 800-37&lt;/a&gt;. The Risk Management Framework has a seven-step process authorizing a system:&lt;/p&gt;】&lt;p&gt;联邦政府的计算机系统必须证明它们是安全的。该过程称为认证，目标是获得操作授权 (ATO)。 ATO 允许该系统投入生产以供联邦劳动力使用。虽然该过程特定于联邦系统，但州和地方政府通常有类似的要求，并且大多数商业公司在发布新系统之前都有类似的安全审查。 &lt;/p&gt;&#xA;&lt;p&gt;该流程的基础由&lt;a href=&#34;https://dzone.com/articles/exploring-the-nist-ai-risk-management-framework-a&#34;&gt;风险管理框架&lt;/a管辖&gt; 在 &lt;a href=&#34;https://csrc.nist.gov/pubs/sp/800/37/r2/final&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;美国国家标准与技术研究院 ( NIST）特别出版物（SP）800-37&lt;/a&gt;。风险管理框架有一个授权系统的七步流程：&lt;/p&gt;</description>
      <pubDate>Wed, 21 Aug 2024 17:00:04 +0000</pubDate>
    </item>
    <item>
      <title>【Preventing and Fixing Bad Data in Event Streams: Part 2】预防和修复事件流中的不良数据：第 2 部分</title>
      <link>https://dzone.com/articles/preventing-and-fixing-bad-data-in-event-streams-pt2</link>
      <description>【&lt;p data-selectable-paragraph=&#34;&#34;&gt;Alright, I’m back — time for part 2.&lt;/p&gt;&#xA;&lt;p data-selectable-paragraph=&#34;&#34;&gt;In the &lt;a href=&#34;https://dzone.com/articles/preventing-and-fixing-bad-data-in-event-streams&#34;&gt;first part&lt;/a&gt;, I covered how we handle bad data in batch processing; in particular, cutting out the bad data, replacing it, and running it again. But this strategy doesn’t work for immutable event streams as they are, well, immutable. You can’t cut out and replace bad data like you would in batch-processed data sets.&lt;/p&gt;】&lt;p data-selectable-paragraph=&#34;&#34;&gt;好吧，我回来了 — 到了第二部分的时间了。&lt;/p&gt;&#xA;&lt;p data-selectable-paragraph=&#34;&#34;&gt;在&lt;a href=&#34;https://dzone.com/articles/preventing-and-fixing-bad-data-in-event-streams&#34;&gt;第一部分&lt;/a &gt;，我介绍了我们如何在批处理中处理不良数据；特别是，删除坏数据，替换它，然后再次运行。但这种策略不适用于不可变的事件流，因为它们是不可变的。您无法像在批处理数据集中那样删除和替换不良数据。&lt;/p&gt;</description>
      <pubDate>Wed, 21 Aug 2024 12:00:04 +0000</pubDate>
    </item>
    <item>
      <title>【Intricacies of Zero-to-One Software Projects】零到一软件项目的复杂性</title>
      <link>https://dzone.com/articles/intricacies-of-zero-to-one-software-projects</link>
      <description>【&lt;p&gt;A &lt;strong&gt;zero-to-one&lt;/strong&gt; project is also known as a &lt;strong&gt;greenfield&lt;/strong&gt; project. These projects are basically small ideas with almost no tangible work. The inherent complexities of zero-to-one projects are hard and many struggle with it. There are more chances of failures in a zero-to-one project and the reasons can be very hard to detect.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;This article tries to summarize the main reasons why many such projects fail. Many such projects are also called &lt;a href=&#34;https://dzone.com/articles/what-is-the-purpose-of-a-proof-of-concept-poc&#34;&gt;Proof of Concept (POC)&lt;/a&gt; or &lt;a href=&#34;https://dzone.com/articles/a-step-by-step-guide-to-build-a-minimum-viable-pro&#34;&gt;MVP (Minimum Viable Product)&lt;/a&gt;. Of course, there are some variants of perspective here, but that&#39;s not the intent of this article.&lt;/p&gt;】&lt;p&gt;&lt;strong&gt;从零到一&lt;/strong&gt;项目也称为&lt;strong&gt;绿地&lt;/strong&gt;项目。这些项目基本上都是小想法，几乎没有实际工作。从零到一的项目固有的复杂性是困难的，许多人都在为此苦苦挣扎。从零到一的项目失败的可能性更大，而且原因可能很难发现。 &lt;/p&gt;&#xA;&lt;p&gt;本文试图总结许多此类项目失败的主要原因。许多此类项目也称为&lt;a href=&#34;https://dzone.com/articles/what-is-the- Purpose-of-a-proof-of-concept-poc&#34;&gt;概念证明 (POC)&lt;/ a&gt; 或 &lt;a href=&#34;https://dzone.com/articles/a-step-by-step-guide-to-build-a-minimum-viable-pro&#34;&gt;MVP（最小可行产品）&lt;/a &gt;。当然，这里有一些不同的视角，但这不是本文的目的。&lt;/p&gt;</description>
      <pubDate>Wed, 21 Aug 2024 13:00:07 +0000</pubDate>
    </item>
    <item>
      <title>【Unlock AI Power: Generate JSON With GPT-4 and Node.js for Ultimate App Integration】释放 AI 力量：使用 GPT-4 和 Node.js 生成 JSON 以实现终极应用程序集成</title>
      <link>https://dzone.com/articles/generate-json-with-gpt-4-and-nodejs</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Generating well-structured &lt;a href=&#34;https://dzone.com/refcardz/core-json&#34;&gt;JSON&lt;/a&gt; outputs can be a complex task, especially when working with &lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-large-language-models&#34;&gt;large language models (LLMs)&lt;/a&gt;. This article explores generating JSON outputs generated from LLMs with an example of using a Node.js-powered web application.&lt;/p&gt;&#xA;&lt;h2&gt;Large Language Models (LLMs)&lt;/h2&gt;&#xA;&lt;p&gt;LLMs are sophisticated AI systems designed to comprehend and produce human-like text, capable of handling tasks such as translation, summarization, and content creation. Models like GPT (Model by Open AI), BERT, and Claude have been instrumental in advancing &lt;a href=&#34;https://dzone.com/articles/transforming-translation-the-power-of-context-in-n-1&#34;&gt;natural language processing&lt;/a&gt;, making them valuable tools for chatbots and other AI-driven applications.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;生成结构良好的 &lt;a href=&#34;https://dzone.com/refcardz/core-json&#34;&gt;JSON&lt;/a&gt; 输出可能是一项复杂的任务，尤其是在使用 &lt;a 时href=&#34;https://dzone.com/refcardz/getting-started-with-large-language-models&#34;&gt;大型语言模型 (LLM)&lt;/a&gt;。本文通过使用 Node.js 支持的 Web 应用程序的示例，探讨如何生成从 LLM 生成的 JSON 输出。&lt;/p&gt;&#xA;&lt;h2&gt;大型语言模型 (LLM)&lt;/h2&gt;&#xA;&lt;p&gt;法学硕士是复杂的人工智能系统，旨在理解和生成类似人类的文本，能够处理翻译、摘要和内容创建等任务。 GPT（Open AI 模型）、BERT 和 Claude 等模型在推进&lt;a href=&#34;https://dzone.com/articles/transforming-translation-the-power-of-context-in-n- 1&#34;&gt;自然语言处理&lt;/a&gt;，使其成为聊天机器人和其他人工智能驱动应用程序的宝贵工具。&lt;/p&gt;</description>
      <pubDate>Wed, 21 Aug 2024 14:00:06 +0000</pubDate>
    </item>
    <item>
      <title>【Mastering React Efficiency: Refactoring Constructors for Peak Performance】掌握 React 效率：重构构造函数以获得最佳性能</title>
      <link>https://dzone.com/articles/mastering-react-efficiency-refactoring-constructors</link>
      <description>【&lt;p&gt;&lt;a href=&#34;https://dzone.com/refcardz/reactjs-essentials&#34;&gt;React&lt;/a&gt;, a popular JavaScript library for building user interfaces, offers a robust way to create dynamic and responsive web applications. However, as applications grow, performance issues can arise, especially when dealing with nested component constructor calls. This article delves into how these nested constructor calls can impact React performance, providing a step-by-step detailed example, point by point, to help you understand and mitigate these issues.&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;Understanding React Components and Constructors&lt;/h2&gt;&#xA;&lt;h3 dir=&#34;ltr&#34;&gt;What Are React Components?&lt;/h3&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;React components are the building blocks of any React application. They can be either functional or class-based. Class components use constructors to initialize state and bind methods.&lt;/p&gt;】&lt;p&gt;&lt;a href=&#34;https://dzone.com/refcardz/reactjs-essentials&#34;&gt;React&lt;/a&gt; 是一个用于构建用户界面的流行 JavaScript 库，提供了一种创建动态和响应式 Web 应用程序的强大方法。然而，随着应用程序的增长，可能会出现性能问题，特别是在处理嵌套组件构造函数调用时。本文深入探讨了这些嵌套构造函数调用如何影响 React 性能，并逐点提供分步详细示例，以帮助您理解和缓解这些问题。&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;了解 React 组件和构造函数&lt;/h2&gt;&#xA;&lt;h3 dir=&#34;ltr&#34;&gt;什么是 React 组件？&lt;/h3&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;React 组件是任何 React 应用程序的构建块。它们可以是函数式的，也可以是基于类的。类组件使用构造函数来初始化状态和绑定方法。&lt;/p&gt;</description>
      <pubDate>Wed, 21 Aug 2024 15:00:03 +0000</pubDate>
    </item>
  </channel>
</rss>