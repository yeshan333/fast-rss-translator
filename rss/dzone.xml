<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【jBPM as AI Orchestration Platform】JBPM作为AI编排平台</title>
      <link>https://dzone.com/articles/jbpm-as-ai-orchestration-platform</link>
      <description>【&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; The views expressed in this document reflect the author&#39;s subjective perspective on the current and potential capabilities of jBPM.&lt;/p&gt;&#xA;&lt;p&gt;This text presents &lt;a href=&#34;https://dzone.com/articles/how-to-embed-a-jbpm-process-in-a-java-ee-applicati-1&#34;&gt;jBPM&lt;/a&gt; as a platform for orchestrating external AI-centric environments, such as Python, used for designing and running AI solutions. We will provide an overview of jBPM’s most relevant functionalities for AI orchestration and walk you through a practical example that demonstrates its effectiveness as an AI &lt;a href=&#34;https://dzone.com/articles/devops-orchestration-looking-beyond-automation&#34;&gt;orchestration platform&lt;/a&gt;:&lt;/p&gt;】&lt;p&gt; &lt;strong&gt;免责声明：&lt;/strong&gt;本文档中表达的观点反映了作者对JBPM当前和潜在功能的主观观点。&lt;/p&gt;&#xA;&lt;p&gt;本文提供&lt;a href =“ https://dzone.com/articles/how-to-to-embed-a-jbpm-process-process-in-a-java-ee-applicati-1”&gt; jbpm &lt;/a&gt;作为用于编排外部AI中心环境的平台，用于设计用于Python的外部环境，例如设计和运行。我们将提供JBPM最相关的AI编排功能的概述，并引导您浏览一个实用的示例，该示例证明了它作为AI &lt;a href =“ https://dzone.com/articles/articles/articles/devops-orchestration-orchestration-beynding-beyond-beyond-beyond-automation-automation-automation-automation-automation-otestration&gt;：</description>
      <pubDate>Wed, 06 Aug 2025 19:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Cloud Sprawl Is a Given; Cloud Complexity Doesn’t Have to Be】云蔓延是给定的；云的复杂性不一定是</title>
      <link>https://dzone.com/articles/cloud-sprawl-vs-cloud-complexity</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Less than a decade ago, most teams ran dev, staging, and production in a single cloud account.&lt;br&gt;&#xA;  Today, that seems unimaginable.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Now, you start your cloud journey with &lt;em&gt;at least&lt;/em&gt; 10 AWS accounts. One for each environment: one for networking, one for logging, one for security, one for… you get the idea. And if you have multiple business units or products? Multiply all that by at least three.&lt;/p&gt;】&lt;p dir =“ ltr”&gt;不到十年前，大多数团队在一个云帐户中运行开发，分期和生产。&lt;br&gt;&#xA;  今天，这似乎是无法想象的。&lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;现在，您可以使用&lt;em&gt;至少&lt;/em&gt; 10 AWS帐户开始云旅程。一个用于每个环境：一个用于网络，一个用于登录，一个用于安全性，一个用于……您明白了。如果您有多个业务部门或产品？将所有这些乘以至少三个。&lt;/p&gt;</description>
      <pubDate>Wed, 06 Aug 2025 21:25:09 +0000</pubDate>
    </item>
    <item>
      <title>【Building Scalable, Resilient Workflows With State Machines on GCP】在GCP上使用状态机构建可扩展的，有弹性的工作流程</title>
      <link>https://dzone.com/articles/designing-retry-resilient-fare-pipelines-with-idem</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Modern backend architectures often consist of many microservices and serverless functions working together. In such distributed systems, orchestrating complex processes reliably can be challenging. This is where state machines come into play. A state machine models a process as a series of defined states and transitions, enabling predictable sequences, loops, branching, and error handling in workflows. In practice, state machines let us implement robust workflows – essentially the flowcharts of business logic – with clear steps and outcomes. They are crucial for backend systems that require scalable, resilient coordination of tasks across services.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;On &lt;a href=&#34;https://dzone.com/refcardz/getting-to-know-google-compute-engine-and-how-to-u&#34;&gt;Google Cloud Platform&lt;/a&gt; (GCP), developers have managed services to build these workflows without managing servers. GCP’s Workflows service is a fully managed orchestration engine that executes steps (states) in order, calling various services and APIs. This is analogous to AWS Step Functions – Workflows follows a similar state machine model to connect services in a durable, stateful execution. Combined with event-driven services like Eventarc, messaging like Pub/Sub, and compute platforms like Cloud Functions and Cloud Run, GCP provides powerful tools to implement state machine patterns. The result is scalable and fault-tolerant workflows for tasks such as order processing, data pipelines, and long-running processes with human or external triggers.&lt;/p&gt;】&lt;p dir =“ ltr”&gt;现代后端体系结构通常由许多微服务和无服务器功能组成。在这样的分布式系统中，精心策划复杂的过程可能是具有挑战性的。这是国家机器发挥作用的地方。状态机将过程模拟为一系列定义的状态和过渡，从而在工作流程中实现了可预测的序列，循环，分支和错误处理。实际上，州机器让我们通过明确的步骤和成果实施强大的工作流程（本质上是业务逻辑流程图）。它们对于需要跨服务的任务的可扩展，弹性协调的后端系统至关重要。&lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt; on &lt;a href =“ https://dzone.com/refcardz/getting-to-to-woce-google-compute-compute-compute-engine-engine-engine-and-how-to-u，&gt; Google Cloud Cloud Platform &lt;/a&gt;（GCP），开发人员拥有托管服务，可以构建这些工作流，而无需管理这些服务器。 GCP的Workflows Service是一款完全管理的编排引擎，按顺序执行步骤（状态），调用各种服务和API。这类似于AWS步骤功能 - 工作流程遵循类似的状态机器模型，以持久的状态执行方式连接服务。结合事件驱动的服务，例如EventArc，诸如Pub/sub的消息传递以及云功能和云运行之类的计算平台，GCP提供了实现状态机模式的强大工具。结果是可扩展且容忍故障的工作流，用于订单处理，数据管道和与人类或外部触发器的长期运行过程。&lt;/p&gt;</description>
      <pubDate>Wed, 06 Aug 2025 18:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Automating Node.js Deployments With a Custom CI/CD Server】使用自定义CI/CD服务器自动化Node.js部署</title>
      <link>https://dzone.com/articles/automating-nodejs-deployments-with-a-custom-cicd-server</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;It is possible that managing and deploying &lt;a href=&#34;https://dzone.com/refcardz/nodejs&#34;&gt;Node.js&lt;/a&gt; applications can become a bottleneck as projects grow. Having a properly designed &lt;a href=&#34;https://dzone.com/articles/everything-you-need-to-know-about-cicd-pipeline-pa&#34;&gt;Continuous Integration and Continuous Deployment&lt;/a&gt; (CI/CD) pipeline can help reduce the burden of frequent updates, simplify dependency management, and eliminate the need for manual restart processes, thereby avoiding these bottlenecks.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;In this tutorial, we will create a custom CI/CD server that listens to &lt;a href=&#34;https://dzone.com/articles/concourse-pipeline-webhook-triggers&#34;&gt;GitHub webhook&lt;/a&gt; events and performs deployments using GitHub Actions, PM2, and shell scripting. This enables us to:&lt;/p&gt;】&lt;p dir =“ ltr”&gt;管理和部署&lt;a href =“ https://dzone.com/refcardz/nodejs”&gt; node.js &lt;/a&gt;随着项目的发展，应用程序可以成为瓶颈。具有正确设计的&lt;a href =“ https://dzone.com/articles/everythe-you-need-to-need-to-need-need-coot-cicd-pipeline-pipeline-pa-----&gt;连续集成和连续的部署&lt;/a&gt;（ci/cd）管道可以帮助您减少频繁更新的需求，并消除依赖依赖的过程，并消除依赖的过程，并消除措施的范围。瓶颈。&lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;在本教程中，我们将创建一个自定义的CI/CD服务器，该服务器聆听&lt;a href =“ https://dzone.com/articles/concourse-pipeline-pipeline-webhook-triggers”&gt; github webhook &lt;/a&gt;使用Github Actions，PM2和Shell shell scripting和shall splipting和selling sply的事件和部署。这使我们能够：&lt;/p&gt;</description>
      <pubDate>Wed, 06 Aug 2025 20:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Strategies for Robust Engineering: Automated Testing for Scalable Software】强大的工程策略：可扩展软件的自动测试</title>
      <link>https://dzone.com/articles/strategies-for-robust-engineering-automated-testing</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;During the last few years, I have been developing software that needs to scale up to hundreds of thousands of requests per second. &amp;nbsp;Another issue that has been at the forefront of my mind has not been only creating scalable software but also making sure that the testing infrastructure scales with it. Most teams today concentrate on &lt;a href=&#34;https://dzone.com/articles/7-popular-unit-test-naming&#34;&gt;unit tests&lt;/a&gt; and &lt;a href=&#34;https://dzone.com/articles/functional-testing-tutorial-comprehensive-guide-wi&#34;&gt;functional tests&lt;/a&gt; as standalone entities without considering that these tests also have to be designed for growth.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Through years of improving my testing strategies, I have learned a way that goes beyond the typical test automation frameworks. I created a self-adaptive testing layer that is a testing system that modifies tests on the fly based on actual application performance. It’s like a neural network that tunes itself for test automation.&lt;/p&gt;】&lt;p dir =“ ltr”&gt;在过去的几年中，我一直在开发软件，这些软件需要每秒扩展多达数十万个请求。  在我脑海中处于最前沿的另一个问题不仅是创建可扩展的软件，而且还确保测试基础架构随之扩展。 Most teams today concentrate on &lt;a href=&#34;https://dzone.com/articles/7-popular-unit-test-naming&#34;&gt;unit tests&lt;/a&gt; and &lt;a href=&#34;https://dzone.com/articles/functional-testing-tutorial-comprehensive-guide-wi&#34;&gt;functional tests&lt;/a&gt; as standalone entities without considering that these tests also have to be专为增长而设计。&lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;通过多年的改进测试策略，我学到了一种超越典型测试自动化框架的方法。我创建了一个自适应测试层，该测试层是一个测试系统，该系统基于实际应用程序性能将测试修改。这就像一个为测试自动化调整的神经网络。&lt;/p&gt;</description>
      <pubDate>Wed, 06 Aug 2025 17:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Mastering Fluent Bit: Developer Guide to Service Section Configuration (Part 5)】掌握流利位：服务部分配置的开发人员指南（第5部分）</title>
      <link>https://dzone.com/articles/developer-guide-service-section-configuration</link>
      <description>【&lt;p&gt;This series is a general-purpose getting-started guide for those of us wanting to learn about the Cloud Native Computing Foundation (CNCF) project Fluent Bit. Each article in this series addresses a single topic by providing insights into &lt;em&gt;what&lt;/em&gt; the topic is, &lt;em&gt;why&lt;/em&gt; we are interested in exploring that topic, &lt;em&gt;where&lt;/em&gt; to get started with the topic, and &lt;em&gt;how&amp;nbsp;&lt;/em&gt;to get hands-on with learning about the topic as it relates to the Fluent Bit project. The idea is that each article can stand on its own, but that they also lead down a path that slowly increases our abilities to implement solutions with Fluent Bit telemetry pipelines.&lt;/p&gt;&#xA;&lt;p&gt;Let&#39;s take a look at the topic of this article, using Fluent Bit tips and tricks for developers. In case you missed &lt;a href=&#34;https://dzone.com/articles/controlling-logs-with-fluent-bit-kubernetes&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;the previous article&lt;/a&gt;, check out using a Fluent Bit pipeline on a Kubernetes cluster to take control of all the logs being generated.&lt;/p&gt;】&lt;p&gt;本系列是我们想要了解Cloud Native Computing Foundation（CNCF）项目Fluent Fluent Pluent Pluent lit的通用指南。本系列中的每篇文章都通过向&lt;em&gt;提供洞察力来解决一个主题，&lt;em&gt; &lt;em&gt;为什么我们有兴趣探索该主题，&lt;em&gt; &lt;em&gt; &lt;/em&gt; &lt;/em&gt; &lt;/em&gt; &lt;/em&gt; &lt;em&gt; &lt;em&gt; &lt;em&gt; &lt;/em&gt;如何与&lt;/em&gt;进行操作，以了解与流利的位项目有关的主题。这个想法是，每篇文章都可以独立存在，但是它们也导致了一条逐渐增加我们使用Fluent Bit遥测管道实现解决方案的道路。&lt;/p&gt;&#xA;&lt;p&gt;让我们使用流利的位技巧和窍门来看一下本文的主题。如果您错过了&lt;a href =” https://dzone.com/articles/controlling-logs-with-fluent-bit-kubernetes“ rel =“ nofollow” target =“ _ black”&gt;上一篇文章&lt;/a&gt;，请在kubernetes cluster上使用fluent bit Pipeline congure &lt;/a&gt;</description>
      <pubDate>Wed, 06 Aug 2025 14:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Build Your Own Customized ChatGPT Using OpenAI】使用OpenAi构建自己的自定义changpt</title>
      <link>https://dzone.com/articles/build-a-customized-chatgpt-with-ai</link>
      <description>【&lt;p&gt;AI-powered chatbots are everywhere nowadays, taking over manual tasks and helping businesses and individuals with productive and efficient solutions. Companies like OpenAI (ChatGPT), Anthropic (Claude), Google DeepMind (Gemini), Meta (Llama), and Mistral AI are leading the way in developing these intelligent assistants.&lt;/p&gt;&#xA;&lt;p data-end=&#34;773&#34; data-start=&#34;432&#34;&gt;But here’s the exciting part — you don’t need to be a programmer to create your own customized chatbot! OpenAI makes it incredibly easy to personalize ChatGPT without writing a single line of code. Whether you want an AI assistant for customer support, content creation, or industry-specific tasks, you can build one in just a few steps.&lt;/p&gt;】&lt;p&gt; AI驱动的聊天机器人如今无处不在，接管了手动任务，并帮助企业和个人拥有高效，有效的解决方案。诸如Openai（Chatgpt），人类（Claude），Google Deepmind（Gemini），Meta（Llama）和Mistral AI等公司正在领导开发这些智能助手的方向。&lt;/p&gt;&#xA;&lt;p data-end =“ 773” data-start =“ 432”&gt;，但这是令人兴奋的部分 - 您无需成为程序员即可创建自己的自定义聊天机器人！ Openai使得在不编写单行代码的情况下个性化chatgpt变得非常容易。无论您是要为客户支持，内容创建还是特定于行业的任务进行AI助手，您都可以在几个步骤中构建一个。&lt;/p&gt;</description>
      <pubDate>Wed, 06 Aug 2025 15:00:01 +0000</pubDate>
    </item>
    <item>
      <title>【Handling Password-Protected PDFs in JavaScript】在JavaScript中处理受密码保护的PDF</title>
      <link>https://dzone.com/articles/handling-password-protected-PDF-javascript</link>
      <description>【&lt;p&gt;PDF is one of the simplest formats for sharing documents. They are portable and can provide basic access control through password protection. In this post, we will discuss one of many ways to unlock and open password-protected PDF documents in &lt;a href=&#34;https://dzone.com/articles/the-role-of-javascript-in-front-end-and-back-end-d&#34;&gt;JavaScript&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;This post uses &lt;a href=&#34;https://mozilla.github.io/pdf.js&#34;&gt;PDF.js&lt;/a&gt; and client-side JavaScript tools built into modern browsers to:&lt;/p&gt;】&lt;p&gt; PDF是共享文档的最简单格式之一。它们是便携式的，可以通过密码保护提供基本的访问控制。在这篇文章中，我们将讨论在&lt;a href =“ https://dzone.com/articles/the-role-ole-of-javascript-in-front-end-front-end-end-end-and-and-back-end-d-------------------------------------------------------------------------------------------------------------------------------------------&gt; javascript &lt;/a&gt;。&#xA;&lt;p&gt;这篇文章使用&lt;a href =“ https://mozilla.github.io/pdf.js”&gt; pdf.js &lt;/a&gt;和client-side javascript工具内置在现代浏览器中：&lt;/p&gt;</description>
      <pubDate>Wed, 06 Aug 2025 12:00:04 +0000</pubDate>
    </item>
    <item>
      <title>【Integration Testing for Go Apps Using Testcontainers and Containerized Databases】使用TestContainers和集装数据库的GO应用程序集成测试</title>
      <link>https://dzone.com/articles/integration-testing-for-go-applications-using-test</link>
      <description>【&lt;p&gt;Integration testing has always presented a fundamental challenge: how do you test your application against real dependencies without the complexity of managing external services? Traditional approaches often involve either mocking dependencies (which can miss integration issues) or maintaining separate test environments (which can be expensive and difficult to manage consistently).&lt;/p&gt;&#xA;&lt;h2&gt;&lt;a name=&#34;hello-testcontainers&#34; href=&#34;https://dev.to/abhirockzz/integration-testing-for-go-applications-using-testcontainers-and-containerized-databases-3bfp#hello-testcontainers&#34;&gt;&lt;/a&gt;Hello Testcontainers!&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/configure-testcontainers-spring-boot-reactive?fromrel=true&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Testcontainers&lt;/a&gt; solves this problem elegantly by providing a way to run lightweight, throwaway instances of databases, message brokers, web servers, and other services directly within your test suite. Instead of complex setup scripts or shared test environments, you can spin up real services in Docker containers that exist only for the duration of your tests. The core value proposition is compelling: write tests that run against the actual technologies your application uses in production, while maintaining the isolation and repeatability that good tests require. When your tests complete, the containers are automatically cleaned up, leaving no trace behind.&lt;/p&gt;】&lt;p&gt;集成测试始终提出了一个基本挑战：您如何在不管理外部服务的复杂性的情况下测试针对真实依赖的应用程序？传统方法通常涉及嘲笑依赖项（可能会错过集成问题）或保持单独的测试环境（这可能是昂贵且难以始终如一的管理）。&lt;/p&gt;&#xA;&lt;h2&gt; &lt;a name =“ hello-testContainers” href =“ https://dev.to/abhirockzz/integration-testing-testing-for-go-applications-using-testcontainers-testcontainers-and-containeris-database-databases-databases-3bfpppppppppppppppppppppppppppppppppppppppppppppptestcontcontainers”&#xA;&lt;p&gt; &lt;a href =“ https://dzone.com/articles/configure-testcontainers-spring-boot-reactive？服务套件中的服务器和其他服务。您可以在仅在测试期间存在的Docker容器中旋转真实服务，而不是复杂的设置脚本或共享测试环境。核心价值主张令人信服：编写测试，这些测试反对您的应用程序在生产中使用的实际技术，同时保持良好测试所需的隔离和可重复性。测试完成后，容器会自动清理，没有留下痕迹。&lt;/p&gt;</description>
      <pubDate>Wed, 06 Aug 2025 13:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Model Context Protocol (MCP): A Comprehensive Guide to Architecture, Uses, and Implementation】模型上下文协议（MCP）：架构，使用和实施的综合指南</title>
      <link>https://dzone.com/articles/model-context-protocol-mcp-guide-architecture-uses-implementation</link>
      <description>【&lt;p&gt;Large language models (LLMs) have shown massive growth in reasoning, summarization, and natural language understanding tasks. OpenAI’s GPT-4, for instance, scored 86.4% on the MMLU benchmark, surpassing the average human baseline of 89.8% across professional and academic tasks [1]. However, LLMs is limited in enterprise deployment because of their inability to access or manipulate structured operational data.&lt;/p&gt;&#xA;&lt;p&gt;According to McKinsey’s 2023 global AI survey, 55% of enterprises identified integration complexity as a primary barrier to production-scale AI implementation, particularly when models must interact with real-time data, APIs, or enterprise systems [2]. Forrester 2024 report said that 64% of IT decision-makers reported delays in LLM deployments due to the absence of standardized model-to-application interfaces [3]. In environments governed by regulatory constraints, such as healthcare or finance, integration risks also raise compliance concerns. Cisco’s Enterprise Security Report (2023) said that over 41% of AI-enabled systems lack structured authorization layers which increases the chances of privilege escalation in loosely integrated model environments [4].&lt;/p&gt;】&lt;p&gt;大型语言模型（LLMS）在推理，摘要和自然语言理解任务方面已显示出巨大的增长。例如，OpenAI的GPT-4在MMLU基准上得分86.4％，在专业和学术任务中，人类平均基线的平均基线为89.8％[1]。但是，LLM由于无法访问或操纵结构化操作数据而受到企业部署的限制。&lt;/p&gt;&#xA;&lt;p&gt;根据麦肯锡的2023年全球AI调查，有55％的企业将集成复杂性确定为生产规模AI实施的主要障碍，尤其是当模型必须与实时数据，API或企业系统交互时[2]。 Forrester 2024年的报告说，由于缺乏标准化的模型到施加界面，有64％的IT决策者报告了LLM部署的延迟[3]。在受医疗保健或金融等监管限制管辖的环境中，整合风险也引起了遵守问题的关注。思科的企业安全报告（2023）说，超过41％的AI-ai-abable系统缺乏结构化的授权层，这增加了在松散集成的模型环境中的特权升级机会[4]。&lt;/p&gt;。</description>
      <pubDate>Wed, 06 Aug 2025 16:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>