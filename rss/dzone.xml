<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Setting Up a ScyllaDB Cluster on AWS Using Terraform】使用 Terraform 在 AWS 上设置 ScyllaDB 集群</title>
      <link>https://dzone.com/articles/setting-up-a-scylladb-cluster-on-aws-using-terraform</link>
      <description>【&lt;p&gt;In this article, I present an example of a simple and quick installation of ScyllaDB in the AWS cloud using Terraform.&lt;/p&gt;&#xA;&lt;p&gt;Initially, I intended to create a ScyllaDB AMI image using HashiCorp Packer. However, I later discovered that official images are available, allowing ScyllaDB to be easily configured during instance initialization via user data.&lt;/p&gt;】&lt;p&gt;在本文中，我将介绍一个使用 Terraform 在 AWS 云中简单快速安装 ScyllaDB 的示例。&lt;/p&gt;&#xA;&lt;p&gt;最初，我打算使用 HashiCorp Packer 创建 ScyllaDB AMI 映像。不过后来我发现可以使用官方镜像，可以在实例初始化时通过用户数据轻松配置ScyllaDB。&lt;/p&gt;</description>
      <pubDate>Mon, 30 Dec 2024 20:00:03 +0000</pubDate>
    </item>
    <item>
      <title>【A Beginner’s Guide to JUnit 5】JUnit 5 初学者指南</title>
      <link>https://dzone.com/articles/beginners-guide-to-junit-5</link>
      <description>【&lt;p name=&#34;aec9&#34;&gt;JUnit 5 is a software testing framework used by developers to unit test their code. It is a Java-based framework that allows writing and running tests on the Java platform, including an integrated reporter that displays the test results.&lt;/p&gt;&#xA;&lt;p name=&#34;97c6&#34;&gt;&lt;a href=&#34;https://dzone.com/articles/an-introduction-to-junit&#34;&gt;JUnit&lt;/a&gt; can be used for automation testing for two main purposes:&lt;/p&gt;】&lt;p name=&#34;aec9&#34;&gt;JUnit 5 是开发人员用来对其代码进行单元测试的软件测试框架。它是一个基于 Java 的框架，允许在 Java 平台上编写和运行测试，包括显示测试结果的集成报告器。&lt;/p&gt;&#xA;&lt;p name=&#34;97c6&#34;&gt;&lt;a href=&#34;https://dzone.com/articles/an-introduction-to-junit&#34;&gt;JUnit&lt;/a&gt; 可用于自动化测试，主要有两个目的：&lt;/ p&gt;</description>
      <pubDate>Mon, 30 Dec 2024 17:00:06 +0000</pubDate>
    </item>
    <item>
      <title>【Implementing CRUD Operations With NLP Using Microsoft.Extensions.AI】使用 Microsoft.Extensions.AI 通过 NLP 实现 CRUD 操作</title>
      <link>https://dzone.com/articles/crud-operations-with-nlp-using-microsoftextensionsai</link>
      <description>【&lt;p&gt;In this blog post, we will explore how to implement CRUD (Create, Read, Update, Delete) operations using &lt;a href=&#34;https://dzone.com/articles/transforming-translation-the-power-of-context-in-n-1&#34;&gt;Natural Language Processing&lt;/a&gt; (NLP) with the Microsoft.Extensions.AI library in a .NET Web API application. We will utilize the power of NLP to interact with our application through natural language queries and perform CRUD operations on a light management system.&lt;/p&gt;&#xA;&lt;h2&gt;Step-by-Step Guide&lt;/h2&gt;&#xA;&lt;h3&gt;1. Create a .NET Web API Application&lt;/h3&gt;&#xA;&lt;p&gt;First, let&#39;s create a new Web API project using the dotnet CLI:&lt;/p&gt;】&lt;p&gt;在这篇博文中，我们将探讨如何使用 &lt;a href=&#34;https://dzone.com/articles/transforming-translation-the-power-of 实现 CRUD（创建、读取、更新、删除）操作-context-in-n-1&#34;&gt;在 .NET Web API 应用程序中使用 Microsoft.Extensions.AI 库进行自然语言处理&lt;/a&gt; (NLP)。我们将利用 NLP 的强大功能，通过自然语言查询与我们的应用程序进行交互，并在轻型管理系统上执行 CRUD 操作。&lt;/p&gt;&#xA;&lt;h2&gt;分步指南&lt;/h2&gt;&#xA;&lt;h3&gt;1。创建 .NET Web API 应用程序&lt;/h3&gt;&#xA;&lt;p&gt;首先，让我们使用 dotnet CLI 创建一个新的 Web API 项目：&lt;/p&gt;</description>
      <pubDate>Mon, 30 Dec 2024 15:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Understanding Immutable Objects in Java】了解 Java 中的不可变对象</title>
      <link>https://dzone.com/articles/understanding-immutable-objects-in-java</link>
      <description>【&lt;p&gt;Before I discuss &lt;a href=&#34;https://www.gaurgaurav.com/2024_advancedJava_exploringRecordClasses&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;records&lt;/a&gt; and why they are needed, let me articulate the concept of&lt;span style=&#34;background-color: transparent;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;strong style=&#34;background-color: transparent;&#34;&gt;immutability&lt;/strong&gt;&lt;span style=&#34;background-color: transparent;&#34;&gt;. Immutability is a key aspect of clean and safe programming. An immutable object is one whose state cannot be changed once instantiated, where the state is the data contained in the object instance. When an object&#39;s state is set, it stays the same throughout its lifetime. In Java, for example, immutable objects do not have any setter methods to guarantee their state never changes.&lt;/span&gt;&lt;/p&gt;&#xA;&lt;h2&gt;Examples of Immutable Objects&lt;/h2&gt;&#xA;&lt;p&gt;Java’s standard library is rich with immutable classes, including:&lt;/p&gt;】&lt;p&gt;在讨论&lt;a href=&#34;https://www.gaurgaurav.com/2024_advancedJava_exploringRecordClasses&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;记录&lt;/a&gt;以及为什么需要它们之前，让我阐明一下&lt;span style=&#34;background-color:透明;&#34;&gt; &lt;/span&gt;&lt;strong style=&#34;background-color:透明;&#34;&gt;不变性&lt;/strong&gt;&lt;span的概念样式=“背景颜色：透明；”&gt;。不变性是干净和安全编程的一个关键方面。不可变对象是指一旦实例化其状态就无法更改的对象，其中状态是对象实例中包含的数据。当对象的状态被设置后，它在其整个生命周期中保持不变。例如，在 Java 中，不可变对象没有任何 setter 方法来保证其状态永远不会改变。&lt;/span&gt;&lt;/p&gt;&#xA;&lt;h2&gt;不可变对象的示例&lt;/h2&gt;&#xA;&lt;p&gt;Java 的标准库包含丰富的不可变类，包括：&lt;/p&gt;</description>
      <pubDate>Mon, 30 Dec 2024 21:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Getting Started With Snowflake Snowpark ML: A Step-by-Step Guide】Snowflake Snowpark ML 入门：分步指南</title>
      <link>https://dzone.com/articles/getting-started-with-snowflake-snowpark-ml</link>
      <description>【&lt;p&gt;Snowflake’s Snowpark brings machine learning (ML) closer to your data by enabling developers and data scientists to use Python for ML workflows directly within the Snowflake Data Cloud.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;Here are some of the advantages of using Snowpark for &lt;a href=&#34;https://dzone.com/articles/setting-up-dbt-and-snowpark-for-machine-learning-pipelines&#34;&gt;machine learning&lt;/a&gt;:&lt;/p&gt;】&lt;p&gt;Snowflake 的 Snowpark 使开发人员和数据科学家能够直接在 Snowflake 数据云中使用 Python 进行 ML 工作流程，从而使机器学习 (ML) 更接近您的数据。 &lt;/p&gt;&#xA;&lt;p&gt;以下是使用 Snowpark 进行&lt;a href=&#34;https://dzone.com/articles/setting-up-dbt-and-snowpark-for-machine-learning-pipelines&#34;&gt;机器学习的一些优势&lt; /a&gt;：&lt;/p&gt;</description>
      <pubDate>Mon, 30 Dec 2024 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Load Testing Essentials for High-Traffic Applications】高流量应用程序的负载测试要点</title>
      <link>https://dzone.com/articles/load-testing-essentials-for-high-traffic-applications</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Today’s applications must simultaneously serve millions of users, so high performance is a hard requirement for this heavy load. When you consider marketing campaigns, seasonal spikes, or social media virality episodes, this demand can overshoot projections and bring systems to a grinding halt.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;To that end, &lt;a href=&#34;https://dzone.com/articles/application-performance-monitoring-tools-why-when&#34;&gt;monitoring performance&lt;/a&gt; and load testing has become an integral part of app development and deployment: it mimics real application performance under stress, and with this kind of testing, teams can make sure their apps are ready to scale up in times of demand and avoid bottlenecks before users get hurt by them.&lt;/p&gt;】&lt;p dir=&#34;ltr&#34;&gt;当今的应用程序必须同时为数百万用户提供服务，因此高性能是这种重负载的硬性要求。当您考虑营销活动、季节性高峰或社交媒体病毒式传播事件时，这种需求可能会超出预测并使系统陷入停顿。 &lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;为此，&lt;a href=&#34;https://dzone.com/articles/application-performance-monitoring-tools-why-when&#34;&gt;监控性能&lt;/a&gt;和负载测试成为应用程序开发和部署不可或缺的一部分：它模拟压力下的真实应用程序性能，通过这种测试，团队可以确保他们的应用程序已准备好在需求时扩展，并在用户受到伤害之前避免出现瓶颈。 &lt;/p&gt;</description>
      <pubDate>Mon, 30 Dec 2024 13:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【AI in 2024: Year in Review and Predictions for 2025】2024 年人工智能：回顾和 2025 年预测</title>
      <link>https://dzone.com/articles/ai-in-2024-year-in-review-and-predictions-for-2025</link>
      <description>【&lt;h2 tabindex=&#34;-1&#34;&gt;Part I: 2024 Year in Review&lt;/h2&gt;&#xA;&lt;h3 tabindex=&#34;-1&#34;&gt;OpenAI on the Front&lt;/h3&gt;&#xA;&lt;p&gt;OpenAI maintained its position at the forefront of AI innovation in 2024. The release of GPT-4 in May marked a significant milestone as the first frontier multimodal model capable of understanding and generating content across different forms of media. This was followed by o1 in September, along with its lighter counterpart, o1-mini, and the announcement of o3 in December.&lt;/p&gt;&#xA;&lt;p&gt;Perhaps most notably, OpenAI&#39;s Sora project revolutionized video generation. Announced in February and enhanced with Sora Turbo in December, this technology demonstrated unprecedented capabilities in creating realistic video content from text descriptions.&lt;/p&gt;】&lt;h2 tabindex=&#34;-1&#34;&gt;第一部分：2024 年回顾&lt;/h2&gt;&#xA;&lt;h3 tabindex=&#34;-1&#34;&gt;OpenAI 在前面&lt;/h3&gt;&#xA;&lt;p&gt;OpenAI 在 2024 年保持了人工智能创新前沿的地位。5 月份发布的 GPT-4 标志着一个重要的里程碑，成为第一个能够跨不同形式媒体理解和生成内容的前沿多模态模型。随后在 9 月份推出了 o1，以及更轻的版本 o1-mini，并在 12 月份发布了 o3。&lt;/p&gt;&#xA;&lt;p&gt;也许最值得注意的是，OpenAI 的 Sora 项目彻底改变了视频生成。该技术于 2 月份发布，并于 12 月份通过 Sora Turbo 进行了增强，在根据文本描述创建逼真的视频内容方面展示了前所未有的功能。&lt;/p&gt;</description>
      <pubDate>Mon, 30 Dec 2024 14:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Bridging the Gap: Unlocking the Power of HDFS-Based Data Lakes With Streaming Databases】弥合差距：通过流数据库释放基于 HDFS 的数据湖的强大功能</title>
      <link>https://dzone.com/articles/the-power-of-hdfs-based-data-lakes-with-streaming-databases</link>
      <description>【&lt;p&gt;&lt;span&gt;Big data technologies&#39; quick development has brought attention to the necessity of a smooth transition between real-time data analytics and batch processing systems. Since HDFS (Hadoop Distributed File System) based data lakes provide scalable and affordable storage for vast amounts of heterogeneous data, they have emerged as a key component of present-day data architectures. However, when interacting with dynamic, real-time data operations, HDFS&#39;s static nature frequently poses difficulties. In order to enable real-time data input, transformation, and analysis within HDFS-based data lakes, this article examines how streaming databases can help close the gap.&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;span&gt;Streaming databases can depend on HDFS-based&amp;nbsp;&lt;/span&gt;&lt;a href=&#34;https://dzone.com/articles/implementing-data-lakes-in-data-management&#34;&gt;&lt;span&gt;data lakes&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&amp;nbsp;to efficiently handle, process, and store large volumes of streaming data. This dependency arises because HDFS-based data lakes are designed to store and manage big data in a distributed manner, while streaming databases specialize in real-time processing and querying.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;】&lt;p&gt;&lt;span&gt;大数据技术的快速发展引起了人们对实时数据分析和批处理系统之间平滑过渡的必要性的关注。由于基于 HDFS（Hadoop 分布式文件系统）的数据湖为大量异构数据提供可扩展且经济实惠的存储，因此它们已成为当今数据架构的关键组件。然而，当与动态、实时数据操作交互时，HDFS 的静态特性经常会带来困难。为了在基于 HDFS 的数据湖中实现实时数据输入、转换和分析，本文研究了流数据库如何帮助缩小差距。&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;span&gt;流式数据库可以依赖于基于 HDFS 的数据&lt;/span&gt;&lt;a href=&#34;https://dzone.com/articles/implementing-data-lakes-in-data-management&#34;&gt;&lt;span&gt;数据Lake&lt;/span&gt;&lt;/a&gt;&lt;span&gt;可有效处理、处理和存储大量流数据。之所以产生这种依赖性，是因为基于 HDFS 的数据湖旨在以分布式方式存储和管理大数据，而流数据库专注于实时处理和查询。 &lt;/span&gt;&lt;/p&gt;</description>
      <pubDate>Mon, 30 Dec 2024 18:00:04 +0000</pubDate>
    </item>
    <item>
      <title>【Automated Kubernetes Testing With Terratest: A Step-by-Step Guide】使用 Terratest 进行自动化 Kubernetes 测试：分步指南</title>
      <link>https://dzone.com/articles/automated-kubernetes-testing-with-terratest</link>
      <description>【&lt;p&gt;Ensuring the stability and correctness of Kubernetes infrastructure and application deployments can be challenging due to the dynamic and complex nature of containerized environments. Traditional manual testing methods are time-consuming, error-prone, and insufficient for validating the integration and behavior of resources like pods, services, and deployments.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;There is a need for an automated, scalable, and reliable testing framework that integrates seamlessly into &lt;a href=&#34;https://dzone.com/articles/kubernetes-deployment-using-azure-devops&#34;&gt;DevOps workflows to validate Kubernetes configurations&lt;/a&gt;, prevent deployment issues, and ensure system reliability across different environments.&lt;/p&gt;】&lt;p&gt;由于容器化环境的动态性和复杂性，确保 Kubernetes 基础设施和应用程序部署的稳定性和正确性可能具有挑战性。传统的手动测试方法耗时、容易出错，并且不足以验证 Pod、服务和部署等资源的集成和行为。 &lt;/p&gt;&#xA;&lt;p&gt;需要一个自动化、可扩展且可靠的测试框架，可以无缝集成到 &lt;a href=&#34;https://dzone.com/articles/kubernetes-deployment-using-azure-devops&#34;&gt;DevOps 工作流程中验证 Kubernetes 配置&lt;/a&gt;，防止部署问题，并确保系统在不同环境下的可靠性。&lt;/p&gt;</description>
      <pubDate>Mon, 30 Dec 2024 19:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Supercharge Your Coding Workflow With Ollama, LangChain, and RAG】使用 Ollama、LangChain 和 RAG 增强您的编码工作流程</title>
      <link>https://dzone.com/articles/enhance-your-workflow-with-ollama-langchain-and-rag</link>
      <description>【&lt;p data-pm-slice=&#34;1 1 []&#34;&gt;As developers, we always look for ways to make our development workflows smoother and more efficient. With the new year unfolding, the landscape of AI-powered code assistants is evolving at a rapid pace. It is projected that, by 2028, 75% of enterprise software engineers will use AI code assistants, a monumental leap from less than 10% in early 2023. Tools like GitHub Copilot, ChatGPT, and Amazon CodeWhisperer have already made significant inroads.&lt;/p&gt;&#xA;&lt;p&gt;However, while these tools are impressive, they often operate as one-size-fits-all solutions. The real magic happens when we take control of their workflows, creating intelligent, context-aware assistants tailored to our unique needs. This is where &lt;a href=&#34;https://dzone.com/articles/introduction-to-retrieval-augmented-generation-rag&#34;&gt;Retrieval-augmented eneration&lt;/a&gt; (RAG) can come in handy.&amp;nbsp;&lt;/p&gt;】&lt;p data-pm-slice=&#34;1 1 []&#34;&gt;作为开发人员，我们一直在寻找使我们的开发工作流程更顺畅、更高效的方法。随着新的一年的到来，人工智能驱动的代码助手的前景正在快速发展。预计到 2028 年，75% 的企业软件工程师将使用 AI 代码助手，比 2023 年初的不到 10% 实现了巨大飞跃。GitHub Copilot、ChatGPT 和 Amazon CodeWhisperer 等工具已经取得了重大进展。&lt;/ p&gt;&#xA;&lt;p&gt;然而，虽然这些工具令人印象深刻，但它们通常作为一刀切的解决方案来运行。当我们控制他们的工作流程，创建适合我们独特需求的智能、上下文感知助理时，真正的魔力就会发生。这就是&lt;a href=&#34;https://dzone.com/articles/introduction-to-retrieval-augmented- Generation-rag&#34;&gt;检索增强生成&lt;/a&gt; (RAG) 可以派上用场的地方。 &lt;/p&gt;</description>
      <pubDate>Mon, 30 Dec 2024 22:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>