<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Microservice Madness: Debunking Myths and Exposing Pitfalls】微服务疯狂：揭穿神话和暴露陷阱</title>
      <link>https://dzone.com/articles/microservice-madness-myths-pitfalls</link>
      <description>【&lt;p&gt;&lt;a href=&#34;https://dzone.com/microservices&#34;&gt;Microservice&lt;/a&gt; is the false belief that adding a message broker to your app will somehow magically make it faster and more scalable.&lt;/p&gt;&#xA;&lt;p&gt;Ignoring the fact that this is, in itself, an oxymoron—and that your app quite literally becomes two billion times slower—the absolute dumbest argument I&#39;ve ever heard in favor of microservices is:&lt;/p&gt;】&lt;p&gt; &lt;a href =“ https://dzone.com/microservices”&gt; MicroService &lt;/a&gt;是错误的信念，即向您的应用中添加消息经纪会以某种方式神奇地使其更快，更可扩展。&lt;/p&gt; &lt;/p&gt; &lt;/p&gt;&#xA;&lt;p&gt;忽略了这一事实，即这本身就是一个矛盾的事物，而您的应用程序实际上会慢慢变慢 - 我听过的绝对最愚蠢的论点是：&lt;/p&gt;</description>
      <pubDate>Wed, 02 Jul 2025 13:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Why API-First Frontends Make Better Apps】为什么API优先前端创建更好的应用程序</title>
      <link>https://dzone.com/articles/how-to-build-api-centric-frontend-apps</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;In today’s software landscape, building a frontend that simply looks good isn’t enough. The real power lies in how well it interacts with APIs because that’s where the data lives, the business logic resides, and the real-time user experience gets delivered.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;If your frontend is still structured as a UI-first project where data integration is a postscript, it’s time to flip that approach. This guide walks through what it means to design API-centric frontends from the ground up, how to avoid common pitfalls, and how to build interfaces that are both dynamic and maintainable.&lt;/p&gt;】&lt;p dir =“ ltr”&gt;在当今的软件景观中，建立一个看起来不错的前端是不够的。真正的力量在于它与API的互动程度，因为那是数据所居住的地方，业务逻辑所在，实时用户体验也可以交付。&lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;如果您的前端仍然是一个UI-First项目，其中数据集成为Postscript，那么该翻转该方法了。本指南介绍从头开始设计以API为中心的前端的含义，如何避免常见的陷阱以及如何构建既动态又可维护的界面。&lt;/p&gt;</description>
      <pubDate>Wed, 02 Jul 2025 15:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Top NoSQL Databases and Use Cases】顶级NOSQL数据库和用例</title>
      <link>https://dzone.com/articles/top-nosql-databases-and-use-cases</link>
      <description>【&lt;p data-end=&#34;682&#34; data-start=&#34;335&#34;&gt;Traditional relational databases (&lt;a href=&#34;https://dzone.com/articles/choose-a-sql-database&#34;&gt;SQL&lt;/a&gt;), while robust and reliable, are not always the ideal solution. The demand for high-performance, scalable, and schema-flexible data storage systems has driven the adoption of &lt;strong data-end=&#34;610&#34; data-start=&#34;591&#34;&gt;NoSQL databases&lt;/strong&gt;, which offer alternatives to the rigid structure of relational systems.&lt;/p&gt;&#xA;&lt;p data-end=&#34;1089&#34; data-start=&#34;684&#34;&gt;&lt;a href=&#34;https://dzone.com/articles/introduction-to-nosql-database-1&#34;&gt;NoSQL&lt;/a&gt; (short for “Not Only SQL”) databases are designed to handle large volumes of unstructured, semi-structured, or structured data, with a focus on flexibility, horizontal scalability, and real-time performance. They are increasingly used in modern architectures, especially where speed, flexibility, and high throughput are essential, such as mobile applications, real-time analytics, and IoT systems.&lt;/p&gt;】&lt;p data-end =“ 682” data-start =“ 335”&gt;传统的关系数据库（&lt;a href =“ https://dzone.com/articles/choose-a-sql-database”&gt; sql &lt;/a&gt;），虽然稳健而可靠，并不总是理想的解决方案。对高性能，可扩展性和模式富足数据存储系统的需求驱动了&lt;strong data-end =“ 610” data-start =“ 591”&gt; nosql数据库&lt;/strong&gt;的采用，这些&gt; &lt;/strong&gt;为刚性系统的刚性结构提供了替代方案。&lt;/p&gt;&#xA;&lt;p data-end=&#34;1089&#34; data-start=&#34;684&#34;&gt;&lt;a href=&#34;https://dzone.com/articles/introduction-to-nosql-database-1&#34;&gt;NoSQL&lt;/a&gt; (short for “Not Only SQL”) databases are designed to handle large volumes of unstructured, semi-structured, or structured data, with a focus on flexibility, horizo​​ntal scalability,和实时性能。它们越来越多地用于现代体系结构，尤其是在速度，灵活性和高吞吐量至关重要的情况下，例如移动应用程序，实时分析和物联网系统。&lt;/p&gt;</description>
      <pubDate>Wed, 02 Jul 2025 17:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【MCP and The Spin-Off CoT Pattern: How AI Agents Really Use Tools】MCP和衍生COT模式：AI代理如何真正使用工具</title>
      <link>https://dzone.com/articles/mcp-cot-ai-agents-tools</link>
      <description>【&lt;h2 data-selectable-paragraph=&#34;&#34; style=&#34;text-align: left;&#34;&gt;Why MCP Is the Missing Piece in the AI Tool Integration Puzzle&lt;/h2&gt;&#xA;&lt;blockquote style=&#34;text-align: center;&#34;&gt;&#xA; &lt;p data-selectable-paragraph=&#34;&#34;&gt;I’ve read many articles explaining what MCP is, but none explore how AI actually handles these server interactions under the hood. Here’s my take, using what I call the ‘Spin-off CoT’ concept.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p data-selectable-paragraph=&#34;&#34;&gt;Picture this: You’re having a conversation with an AI assistant about the weather in San Francisco. Behind the scenes, something fascinating happens. The AI doesn’t just “know” the current temperature — it spawns what I call a “spin-off &lt;a href=&#34;https://dzone.com/articles/chain-of-thought-prompting&#34;&gt;Chain of Thought&lt;/a&gt;” (CoT) to handle tool interactions. This pattern, which emerged naturally from our exploration of the &lt;a href=&#34;https://dzone.com/articles/building-custom-tools-model-context-protocol&#34;&gt;Model Context Protocol&lt;/a&gt; (MCP), reveals something profound about how AI systems should integrate with external tools.&lt;/p&gt;】&lt;H2数据选择 - 段落=“” style =“ text-align：left;”&gt;为什么MCP是AI工具集成拼图中缺少的部分&lt;/h2&gt;&#xA;&lt;blockquote style =“ text-align：center;”&gt;&#xA; &lt;p数​​据选择 - 段落=“”&gt;我已经阅读了许多文章，解释了什么是MCP，但是没有一个探索AI实际上如何处理这些服务器在引擎盖下的交互。这是我的看法，使用我所谓的“衍生婴儿床”概念。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;P数据选择 - 段落=“”&gt;图片：您正在与AI助手就旧金山的天气进行对话。在幕后，发生了一些有趣的事情。 AI不仅“知道”当前温度 - 它催生了我所说的“衍生&lt;a href =” https://dzone.com/articles/chain-of--thought-prompting-“&gt;思想链”（COT）（COT）来处理工具交互。这种模式自然而然地从我们探索&lt;a href =“ https://dzone.com/articles/building-custom-tools-tools-model-context-protocol”&gt;模型上下文协议&lt;/a&gt;（MCP）上揭示了AI系统应与外部工具集成。&lt;/p&gt; &lt;/p&gt;</description>
      <pubDate>Wed, 02 Jul 2025 16:00:01 +0000</pubDate>
    </item>
    <item>
      <title>【Docker Model Runner: A Game Changer in Local AI Development (C# Developer Perspective)】Docker Model Runner：本地AI开发中的游戏规则改变者（C＃开发人员透视）</title>
      <link>https://dzone.com/articles/docker-model-runner-dotnet-guide</link>
      <description>【&lt;p&gt;Big breakthroughs and advancements in AI, particularly with LLM&#39;s (&lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-large-language-models&#34;&gt;Large Language Models&lt;/a&gt;) have made it increasingly common for developers to integrate AI capabilities into their applications in a faster way than ever before. However, developing, running, and testing these models locally can often be challenging due to environment inconsistencies, performance issues, and dependency management. It&#39;s a common pattern. To help with this, &lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-docker-1&#34;&gt;Docker&lt;/a&gt; introduced Docker Model Runner, a new feature in &lt;a href=&#34;https://dzone.com/articles/docker-desktop-improves-dev-workflows-observability&#34;&gt;Docker Desktop&lt;/a&gt; designed to simplify the process. In this post, we’ll take a closer look at Docker Model Runner, explore its benefits, and walk through an end-to-end project to see it in action.&lt;/p&gt;&#xA;&lt;h2&gt;What Is Docker Model Runner (DMR)?&lt;/h2&gt;&#xA;&lt;p&gt;Docker Model Runner is a feature integrated into Docker Desktop that aims to streamline local development and testing of LLM models. It helps in solving several pain points often faced by developers working on AI related projects.&amp;nbsp;&lt;/p&gt;】&lt;p&gt;在AI中的重大突破和进步，尤其是LLM（&lt;a href =“ https://dzone.com/refcardz/refcardz/getting-started-with-with-with-large-lange-models&gt;“大型语言”模型&lt;/a&gt;）使开发人员越来越多地将AI Capibals Inspertions与Faster融入Faster的开发人员越来越多地使其越来越多。但是，由于环境不一致，绩效问题和依赖性管理，在本地开发，运行和测试这些模型通常可能具有挑战性。这是一个常见的模式。为此，&lt;a href =“ https://dzone.com/refcardz/getting-started-with-with-docker-1”&gt; docker &lt;/a&gt;引入了docker型号跑者，&lt;a href =“桌面&lt;/a&gt;旨在简化过程的旨在。在这篇文章中，我们将仔细研究Docker Model Runner，探索其好处，并浏览端到端的项目以查看其行动。&lt;/p&gt;&#xA;&lt;h2&gt;什么是Docker Model Runner（DMR）？&lt;/h2&gt;&#xA;&lt;p&gt; Docker Model Runner是集成到Docker桌面的功能，旨在简化LLM模型的本地开发和测试。它有助于解决从事AI相关项目的开发人员通常面临的几个疼痛点。 &lt;/p&gt;</description>
      <pubDate>Wed, 02 Jul 2025 11:00:03 +0000</pubDate>
    </item>
    <item>
      <title>【Stabilizing ETL Pipelines With Airflow, Presto, and Metadata Contracts】用气流，普雷斯托和元数据稳定ETL管道</title>
      <link>https://dzone.com/articles/stabilizing-etl-pipelines-airflow-presto-metadata-contracts</link>
      <description>【&lt;p data-end=&#34;521&#34; data-start=&#34;198&#34;&gt;&lt;strong data-end=&#34;222&#34; data-start=&#34;198&#34;&gt;Wednesday. 10:04 AM.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p data-end=&#34;521&#34; data-start=&#34;198&#34;&gt;The dashboard says conversions dropped 18%. Product’s panicking. Marketing’s quiet-slacking you. But nothing’s failed—Airflow’s green, Hive tables are updating, and your pipeline logs look squeaky clean. That’s when it hits you: this isn’t a failure. It’s something worse. It’s silent data drift.&lt;/p&gt;】&lt;p data-end =“ 521” data-start =“ 198”&gt; &lt;strong data-end =“ 222” data-start =“ 198”&gt;星期三。上午10:04。&lt;/strong&gt; &lt;/p&gt;&#xA;&lt;p data-end =“ 521” data-start =“ 198”&gt;仪表板说转换下降了18％。产品惊慌失措。营销使您安静。但是什么都没有失败了 -  Airflow的绿色，蜂巢桌正在更新，您的管道日志看起来很干净。那是打击您的时候：这不是失败。情况更糟。这是无声数据漂移。&lt;/p&gt;</description>
      <pubDate>Wed, 02 Jul 2025 20:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Deploying LLMs Across Hybrid Cloud-Fog Topologies Using Progressive Model Pruning】使用渐进模型修剪在混合云模糊拓扑中部署LLM</title>
      <link>https://dzone.com/articles/deploying-llms-across-hybrid-cloud-fog-topologies</link>
      <description>【&lt;p&gt;&lt;a href=&#34;https://dzone.com/refcardz/getting-started-with-large-language-models&#34;&gt;Large Language Models (LLMs)&lt;/a&gt; have become backbone for &lt;a href=&#34;https://dzone.com/articles/evolution-of-conversational-ai&#34;&gt;conversational AI&lt;/a&gt;, code generation, summarization, and many more scenarios. However, their deployment poses significant challenges in environments where compute resources are limited mostly in hybrid cloud-fog architectures, where real-time inference may need to run closer to the edge.&lt;/p&gt;&#xA;&lt;p&gt;In these instances, progressive model pruning plays a pivotal role offering solution to reduce model size and computation cost without impacting accuracy. In this article, we will discuss how to efficiently deploy LLMs across cloud-fog topologies using layer-aware, resource-adaptive pruning techniques.&lt;/p&gt;】&lt;p&gt; &lt;a href =“ https://dzone.com/refcardz/getting-started-with-large-language-models”&gt;大语言模型（llms）&lt;/a&gt;已成为&lt;a href =“ https://dzone.com/articles/articles/articles/articles/articles/evolution-of-convolution-convolution-convertination-convertination-aginartational and Convertination-aginational和更多信息方案。但是，它们的部署在计算资源受到限制的环境中构成了重大挑战，其中主要在混合云型体系结构中进行实时推理可能需要更靠近边缘。&lt;/p&gt;。&lt;/p&gt;&#xA;&lt;p&gt;在这些情况下，渐进模型修剪起着关键作用，提供解决方案，可降低模型大小和计算成本而不会影响准确性。在本文中，我们将讨论如何使用图层感知的，资源自动修剪技术在云模糊拓扑中有效地部署LLM。&lt;/p&gt;</description>
      <pubDate>Wed, 02 Jul 2025 18:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Reducing Hallucinations Using Prompt Engineering and RAG】使用及时的工程和抹布来减少幻觉</title>
      <link>https://dzone.com/articles/reducing-llm-hallucinations-prompt-engineering-and-rag</link>
      <description>【&lt;h2&gt;&lt;strong&gt;Overview&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Large language models (LLMs) are a powerful tool to generate content. The generative capabilities of these LLMs come with various pros and cons. One of the major issues we often encounter is the factual correctness of the generated content. The models have a high tendency to hallucinate and sometimes generate non-existent and incorrect content. These generated contents are so impressive that they look like they are factually correct and viable. As developers, it is our responsibility to ensure the system works perfectly and generates concise content.&lt;/p&gt;&#xA;&lt;p&gt;In this article, I will delve into two of the major methodologies that I employed to lower the &lt;a href=&#34;https://dzone.com/articles/tackling-hallucinations-in-large-language-models&#34;&gt;hallucinations&lt;/a&gt; for applications developed using &lt;a href=&#34;https://dzone.com/articles/building-powerful-ai-applications-with-amazon&#34;&gt;AWS Bedrock&lt;/a&gt; and other AWS tools and technologies.&lt;/p&gt;】&lt;H2&gt; &lt;strong&gt;概述&lt;/strong&gt; &lt;/h2&gt;&#xA;&lt;p&gt;大语言模型（LLMS）是生成内容的强大工具。这些LLM的生成能力具有各种利弊。我们经常遇到的主要问题之一是生成内容的事实正确性。这些模型具有幻觉，有时会产生不存在和不正确的内容的高趋势。这些生成的内容令人印象深刻，以至于它们看起来像是实际上是正确且可行的。作为开发人员，我们有责任确保系统完美地工作并生成简洁的内容。&lt;/p&gt;&#xA;&lt;p&gt;在本文中，我将深入研究我采用的两种主要方法，用于降低&lt;a href =“ https://dzone.com/articles/tackling-hallucinations-hallucinations-in-hallucinations-in-large-lange-lange-models”&gt;幻觉&#39;&gt;使用&lt;a a&gt;使用&lt;a a&gt; href =“ https://dzone.com/articles/building-powerful-ai-applications-with-amazon”&gt; aws bedrock &lt;/a&gt;和其他AWS工具和技术。&lt;/p&gt;</description>
      <pubDate>Wed, 02 Jul 2025 12:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Parallel Data Conflict Resolution in Enterprise Workflows: Pessimistic vs. Optimistic Locking at Scale】企业工作流程中的并行数据冲突解决：悲观与乐观的锁定</title>
      <link>https://dzone.com/articles/enterprise-data-conflict-resolution-locking-strategies</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Data conflict resolution is not a simple backend detail in modern enterprise systems, particularly when supporting complex concurrent operations. It is a full-stack architectural matter that affects consistency, UX, observability, and trust in the system.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;We experienced this firsthand while building a government system that handled claims adjudication. Multiple case workers accessed and edited the shared records in parallel, and the premise that all system parts could be operated separately started to break down. Locking was no longer a database concern; it became a product at that scale.&lt;/p&gt;】&lt;p dir =“ ltr”&gt;数据冲突分辨率不是现代企业系统中的简单后端细节，尤其是在支持复杂的并发操作时。这是一个全栈建筑问题，会影响一致性，UX，可观察性和对系统的信任。&lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;我们在建立负责裁决的政府制度时亲身经历了这一亲身经历。多个案例工作者并行访问并编辑了共享记录，并且可以单独操作所有系统零件的前提开始分解。锁定不再是数据库的问题。它成为该规模的产品。&lt;/p&gt;</description>
      <pubDate>Wed, 02 Jul 2025 19:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Vibe Coding: Conversational Software Development — Part 1 Introduction】VIBE编码：对话软件开发 - 第1部分简介</title>
      <link>https://dzone.com/articles/vibe-coding-conversational-software-development</link>
      <description>【&lt;p&gt;Since I started coding, I have seen developer communities strive to make programming more human-readable, almost like writing in English or a preferred language. Many modern languages introduced syntactic sugar to make code more intuitive and conversational. These efforts have made significant advancements, but now, we are witnessing something far more transformative.&lt;/p&gt;&#xA;&lt;p&gt;Natural language can now be translated directly into functional software. The concept is trending and is widely referred to as &lt;a href=&#34;https://dzone.com/articles/rise-of-vibe-coding-security-risks&#34;&gt;vibe coding&lt;/a&gt;. It is an AI-first approach for rapid software development. Let me try to explain the idea with the help of a step-by-step diagram that I have added below. As the picture shows, you put down your thoughts or overall idea as a prompt. You direct what step you want to achieve or what is your end goal. The chat-based AI works on your prompt and comes up with a generated code. You preview the output of the code and can fine-tune it further. Once you are happy, you put that code into your server.&lt;/p&gt;】&lt;p&gt;自从我开始编码以来，我已经看到开发人员社区努力使编程更加可读，就像用英语写作或首选语言一样。许多现代语言引入了句法糖，以使代码更直观和对话。这些努力取得了重大进步，但是现在，我们目睹了更具变革性的东西。&lt;/p&gt;&#xA;&lt;p&gt;自然语言现在可以直接转化为功能软件。该概念是趋势的，被广泛称为&lt;a href =“ https://dzone.com/articles/rise-of--vibe-coding-security-risks”&gt; vibe编码&lt;/a&gt;。这是快速软件开发的AI优先方法。让我尝试借助下面添加的逐步图来解释这个想法。如图所示，您将自己的想法或整体想法提示。您指导要实现的步骤或最终目标是什么。基于聊天的AI在您的提示下工作，并提出生成的代码。您可以预览代码的输出，并可以对其进行进一步调整。一旦快乐，就将该代码放入服务器中。&lt;/p&gt;</description>
      <pubDate>Wed, 02 Jul 2025 14:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>