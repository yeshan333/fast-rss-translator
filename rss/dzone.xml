<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Exploring Communication Strategies for LWC in Salesforce】探索LWC在Salesforce中的沟通策略</title>
      <link>https://dzone.com/articles/lwc-communication-strategies-salesforce</link>
      <description>【&lt;p&gt;When building a Salesforce application with multiple lightning web components (LWC) as building blocks, it is important to ensure that those components can effectively share information. The method of communication depends on the structure of your lightning components.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;If one component is built within another component, you create a parent-child relationship, and the way you communicate amongst them is different from how you communicate between two unrelated components.&amp;nbsp;&lt;/p&gt;】&lt;p&gt;当用多个闪电网络组件（LWC）作为构建块构建Salesforce应用程序时，重要的是要确保这些组件可以有效共享信息。通信方法取决于您的闪电组件的结构。 &lt;/p&gt;&#xA;&lt;p&gt;如果一个组件是在另一个组件中构建的，则可以创建亲子关系，并且您之间的交流方式与您在两个不相关的组件之间进行通信不同。 &lt;/p&gt;</description>
      <pubDate>Thu, 13 Mar 2025 19:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【5 Ways Docker Can Improve Security in Mobile App Development】Docker可以改善移动应用程序开发中的安全性</title>
      <link>https://dzone.com/articles/docker-security-mobile-app-development</link>
      <description>【&lt;p&gt;Security is a critical concern in mobile app development, especially with the rise of data breaches and cyber threats. Docker, a platform for developing, shipping, and running applications in containers, offers several advantages that can enhance the security of mobile apps.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;This article explores five ways Docker can improve security in mobile app development, accompanied by diagrams and code snippets for a clearer understanding.&lt;/p&gt;】&lt;p&gt;安全是移动应用程序开发中的一个关键问题，尤其是随着数据泄露和网络威胁的兴起。 Docker是一个在容器中开发，运输和运行应用程序的平台，提供了几种优势，可以增强移动应用程序的安全性。 &lt;/p&gt;&#xA;&lt;p&gt;本文探讨了Docker可以提高移动应用程序开发的安全性的五种方法，并附有图表和代码片段，以更清楚地理解。&lt;/p&gt;</description>
      <pubDate>Thu, 13 Mar 2025 12:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Different Garbage Collectors in Java: Exploring the Options】Java中的不同垃圾收集器：探索选项</title>
      <link>https://dzone.com/articles/java-garbage-collectors-overview</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;Garbage collection in Java is something that just happens: you don’t have to worry about memory management. Or do you?&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;The &lt;a href=&#34;https://dzone.com/articles/garbage-collection-in-javajvm&#34;&gt;garbage collector&lt;/a&gt; (GC) runs in the background, quietly doing its work. But this process can have a huge impact on performance. Understanding the concepts of advanced Java GC is invaluable in tuning and troubleshooting applications.&lt;/p&gt;】&lt;p dir =“ ltr”&gt; Java中的垃圾收集是发生的：您不必担心内存管理。还是你？&lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt; &lt;a href =“ https://dzone.com/articles/garbage-collection-in--javajvm”&gt;垃圾收集器&lt;/a&gt;（GC）在后台运行，悄悄地做工作。但是这个过程可能会对性能产生巨大影响。了解高级Java GC的概念在调整和故障排除应用程序中是无价的。&lt;/p&gt;</description>
      <pubDate>Thu, 13 Mar 2025 14:30:00 +0000</pubDate>
    </item>
    <item>
      <title>【Build a REST API With Just 2 Classes in Java and Quarkus】在Java和Quarkus中仅使用2堂课构建REST API</title>
      <link>https://dzone.com/articles/build-rest-api-java-quarkus</link>
      <description>【&lt;p data-end=&#34;352&#34; data-start=&#34;96&#34;&gt;Developers often look for ways to build RESTful APIs with minimal effort while maintaining clean and maintainable code. Quarkus enables a fully functional CRUD (Create, Read, Update, Delete) API using just two classes.&lt;/p&gt;&#xA;&lt;p data-end=&#34;653&#34; data-start=&#34;354&#34;&gt;With Hibernate ORM with Panache, Quarkus simplifies entity management, and REST Data with Panache automatically exposes a complete set of RESTful endpoints. This approach reduces the time spent on boilerplate code, allowing developers to focus on business logic rather than infrastructure.&lt;/p&gt;】&lt;p data-end =“ 352” data-start =“ 96”&gt;开发人员通常会寻找用最小的努力构建静止API的方法，同时保持清洁可维护的代码。 Quarkus仅使用两个类启用功能齐全的CRUD（创建，读取，更新，删除）API。&lt;/p&gt;&#xA;&lt;p data-end =“ 653” data-start =“ 354”&gt;带有带有panache的Hibernate Orm，Quarkus简化了实体管理，而带有Panache的REST数据会自动公开一组完整的Restful端点。这种方法减少了在样板代码上花费的时间，使开发人员可以专注于业务逻辑而不是基础架构。&lt;/p&gt;</description>
      <pubDate>Thu, 13 Mar 2025 16:15:00 +0000</pubDate>
    </item>
    <item>
      <title>【AI-Driven Self-Healing Tests With Playwright, Cucumber, and JS】与剧作家，黄瓜和JS一起进行AI驱动的自我修复测试</title>
      <link>https://dzone.com/articles/ai-driven-self-healing-tests-playwright-cucumber-js</link>
      <description>【&lt;p&gt;Automated testing is essential to modern software development, ensuring stability and reducing manual effort. However, test scripts frequently break due to UI changes, such as modifications in element attributes, structure, or identifiers. Traditional test automation frameworks rely on static locators, making them vulnerable to these changes. AI-powered self-healing automation addresses this challenge by dynamically selecting and adapting locators based on real-time evaluation.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/application-self-healing-common-failures-and-how-t&#34;&gt;Self-healing&lt;/a&gt; is crucial for automation testing because it significantly reduces the maintenance overhead associated with test scripts by automatically adapting to changes in the application&#39;s user interface. This allows tests to remain reliable and functional even when the underlying code or design is updated, thus saving time and effort for testers while improving overall test stability and efficiency.&lt;/p&gt;】&lt;p&gt;自动测试对于现代软件开发至关重要，确保稳定性并减少手动努力。但是，由于UI的更改，测试脚本经常断开，例如元素属性，结构或标识符的修改。传统的测试自动化框架依靠静态定位器，使其容易受到这些更改的影响。 AI驱动的自我修复自动化通过基于实时评估动态选择和调整定位器来应对这一挑战。&lt;/p&gt;&#xA;&lt;p&gt; &lt;a href =“ https://dzone.com/articles/application-self-healing-common-failures-and-how----------------&gt; self-healing &lt;/a&gt;对于自动化测试至关重要，因为它可以显着减少与测试脚本相关的维护间接费用，从而自动适应应用程序的用户界面上的更改。这使得即使在更新了基础代码或设计时，测试也可以保持可靠和功能，从而节省了测试人员的时间和精力，同时提高了整体测试稳定性和效率。&lt;/p&gt;</description>
      <pubDate>Thu, 13 Mar 2025 11:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Playwright: Filter Visible Elements With locator.filter({ visible: true })】剧作家：带定位器的滤波器元素。</title>
      <link>https://dzone.com/articles/playwright-filter-visible-elements</link>
      <description>【&lt;p data-selectable-paragraph=&#34;&#34;&gt;&lt;span style=&#34;background-color: transparent;&#34;&gt;This blog covers how the new&amp;nbsp;&lt;/span&gt;filter visible element option&lt;span style=&#34;background-color: transparent;&#34;&gt;&amp;nbsp;helps in writing more precise, user-focused tests with ease with the option &lt;code&gt;locator.filter({ visible: true })&lt;/code&gt;&lt;/span&gt;.&lt;/p&gt;&#xA;&lt;p data-selectable-paragraph=&#34;&#34;&gt;Playwright has quickly become a go-to tool for end-to-end testing, thanks to its robust API, cross-browser support, and easy handling of modern web applications. One of its standout features is the locator API, which allows testers to precisely target elements on a page. With &lt;a href=&#34;https://playwright.dev/docs/release-notes#version-151&#34; rel=&#34;noopener ugc nofollow&#34; target=&#34;_blank&#34;&gt;recent updates&lt;/a&gt;, Playwright has added even more power to this API, including a new visible option for the &lt;code&gt;locator.filter() method&lt;/code&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/p&gt;】&lt;p数​​据选择性-Paragraph =“”&gt; &lt;span style =“背景色：透明;”&gt;此博客涵盖了新的&lt;/span&gt;滤波器可见元素选项&lt;span style =“ backgrom-color：prockith-color：pranceparent;”&gt;有助于编写更精确的，用户以用户为方便的测试。&#xA;&lt;p数​​据选择 - 段落=“”&gt;剧作家迅速成为端到端测试的首选工具，这要归功于其强大的API，跨浏览器支持以及对现代Web应用程序的轻松处理。它的出色功能之一是定位器API，它允许测试人员精确地针对页面上的元素。使用&lt;a href =“ https://playwright.dev/docs/release-notes#version-151” rel =“ noopener ugc nofollow nofollow” target =“ _ black”&gt;最新更新&gt;最新更新&gt; &lt;/a&gt; playwright为此API添加了更多的功能，包括新的可见选项，包括&lt;/flot&gt; &lt;/code&gt; &lt;/foed&gt; &lt;/preter&gt; &lt;/preter&gt; &lt;/）</description>
      <pubDate>Thu, 13 Mar 2025 15:45:00 +0000</pubDate>
    </item>
    <item>
      <title>【Graceful Shutdown: Spring Framework vs Golang Web Services】优雅的关闭：春季框架与Golang Web服务</title>
      <link>https://dzone.com/articles/spring-vs-golang-graceful-shutdown</link>
      <description>【&lt;p&gt;Graceful application shutdown is a critical aspect of ensuring service reliability, particularly in high-load systems.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;In this article, we will explore how graceful shutdown is implemented in two popular technologies: Spring Framework and Golang, using examples that interact with a PostgreSQL database.&lt;/p&gt;】&lt;p&gt;优美的应用程序关闭是确保服务可靠性的关键方面，尤其是在高负载系统中。 &lt;/p&gt;&#xA;&lt;p&gt;在本文中，我们将使用与PostgreSQL数据库相互作用的示例来探讨如何在两种流行技术中实现优雅的关闭。&lt;/p&gt;</description>
      <pubDate>Thu, 13 Mar 2025 18:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【The Impact of AI Agents on Modern Workflows】AI代理商对现代工作流程的影响</title>
      <link>https://dzone.com/articles/the-impact-of-ai-agents-on-modern-workflows</link>
      <description>【&lt;p style=&#34;text-align: left;&#34;&gt;Workflows have long been the backbone of organizational efficiency. From the simplest administrative tasks to the most complex project management processes, workflows help streamline operations, minimize errors, and enhance productivity.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p style=&#34;text-align: left;&#34;&gt;However, as AI agents become increasingly sophisticated, they are set to radically reshape how workflows are designed, executed, and optimized. The fusion of human intelligence with AI agents promises to drive unprecedented levels of automation, precision, and agility in the workplace.&lt;/p&gt;】&lt;p style =“ text-align：left;”&gt;工作流程长期以来一直是组织效率的骨干。从最简单的管理任务到最复杂的项目管理流程，工作流程有助于简化操作，最小化错误并提高生产力。 &lt;/p&gt;&#xA;&lt;p style =“ text-align：left;”&gt;但是，随着AI代理变得越来越复杂，它们将其设置为从根本上重塑如何设计，执行和优化工作流程。人类智能与AI代理的融合有望在工作场所推动前所未有的自动化，精度和敏捷性。&lt;/p&gt;</description>
      <pubDate>Thu, 13 Mar 2025 14:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Securing Conversations With LLMs】确保与LLM的对话</title>
      <link>https://dzone.com/articles/securing-conversations-with-llms</link>
      <description>【&lt;p&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;Large language models (LLMs) don&#39;t need an introduction anymore. Just as &lt;em&gt;&#34;Did you Google it?&#34;&lt;/em&gt; was the question 10 years ago, now it&#39;s &lt;em&gt;&#34;Did you ask ChatGPT?&#34;&lt;/em&gt; As organizations increasingly adopt LLMs, the number of people interacting with them, directly or indirectly, is also increasing exponentially.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;span data-preserver-spaces=&#34;true&#34;&gt;Today, the use of these models is no longer limited to tech. Healthcare, transportation, media, and many other industries are adopting them. However, along with adoption, one more thing that has grown is security concerns.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;】&lt;p&gt; &lt;span data-proserver spaces =“ true”&gt;大语言模型（LLMS）不再需要介绍。就像&lt;em&gt;“您谷歌谷歌吗？” &lt;/em&gt;是10年前的问题，现在是&lt;em&gt;“您问Chatgpt吗？ &lt;/span&gt; &lt;/p&gt;&#xA;&lt;p&gt; &lt;span数据范围=“ true”&gt;当今，这些模型的使用不再限于技术。医疗保健，运输，媒体和许多其他行业正在采用它们。但是，随着收养的范围，又增加了一件事是安全问题。 &lt;/span&gt; &lt;/p&gt;</description>
      <pubDate>Thu, 13 Mar 2025 21:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Functional Endpoints: Alternative to Controllers in WebFlux】功能端点：WebFlux中控制器的替代方案</title>
      <link>https://dzone.com/articles/functional-endpoints-alternative-to-controllers-webflux</link>
      <description>【&lt;h2 data-selectable-paragraph=&#34;&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p data-selectable-paragraph=&#34;&#34;&gt;In general, we’re used to exposing APIs via annotated controllers like this:&lt;/p&gt;&#xA;&lt;div class=&#34;codeMirror-wrapper&#34; contenteditable=&#34;false&#34;&gt;&#xA; &lt;div contenteditable=&#34;false&#34;&gt;&#xA;  &lt;div class=&#34;codeHeader&#34;&gt;&#xA;   &lt;div class=&#34;nameLanguage&#34;&gt;&#xA;    Java&#xA;   &lt;/div&gt;&lt;i class=&#34;icon-cancel-circled-1 cm-remove&#34;&gt;&amp;nbsp;&lt;/i&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;codeMirror-code--wrapper&#34; data-code=&#34;@GetMapping(&amp;quot;/products&amp;quot;)&#xA;public Flux&lt;ProductDto&gt; allProducts() {&#xA;    return this.productService.getAllProducts();&#xA;}&#34; data-lang=&#34;text/x-java&#34;&gt;&#xA;   &lt;pre&gt;&lt;code lang=&#34;text/x-java&#34;&gt;@GetMapping(&#34;/products&#34;)&#xA;public Flux&amp;lt;ProductDto&amp;gt; allProducts() {&#xA;    return this.productService.getAllProducts();&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA; &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&lt;br&gt;&lt;/p&gt;】&lt;H2数据选择 - 段落=“”&gt;简介&lt;/h2&gt;&#xA;&lt;p数​​据选择可选 -  paragraph =“”&gt;通常，我们习惯于通过这样的注释控制器公开API：&lt;/p&gt;&#xA;&lt;div class =“ codemirror-wrapper” pontrentediable =“ false”&gt;&#xA; &lt;div contenteaditable =“ false”&gt;&#xA;  &lt;div class =“ codeheader”&gt;&#xA;   &lt;div class =“ namelanguage”&gt;&#xA;    爪哇&#xA;   &lt;/div&gt; &lt;i class =“ icon-cancel-circled-1 cm-remove”&gt; &lt;/i&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div class =“ codemirror-code  -  wrapper” data-code =“@getmapping（“/products”）&#xA;public flux &lt;productdto&gt; allproducts（）{&#xA;    返回this.productservice.getAllproducts（）;&#xA;}“ data-lang =” text/x-java&gt;&#xA;   &lt;pre&gt; &lt;code lang =“ text/x-java”&gt;@getmapping（“/products”）&#xA;public flux &lt;productdto&gt; allproducts（）{&#xA;    返回this.productservice.getAllproducts（）;&#xA;} &lt;/code&gt; &lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA; &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt; &lt;br&gt; &lt;/p&gt;</description>
      <pubDate>Thu, 13 Mar 2025 20:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>