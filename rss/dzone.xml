<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DZone.com Feed</title>
    <link>https://feeds.dzone.com/home</link>
    <description>Recent posts on DZone.com</description>
    <item>
      <title>【Configuring Model Context Protocol (MCP) With Amazon Q CLI】用Amazon Q CLI配置模型上下文协议（MCP）</title>
      <link>https://dzone.com/articles/amazon-q-cli-mcp-setup-guide</link>
      <description>【&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/q/developer/build/?trk=fd6bb27a-13b0-4286-8269-c7b1cfaa29f0&amp;amp;sc_channel=el&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Amazon Q CLI&lt;/a&gt; is a next-generation developer tool that brings IDE-style autocomplete and agentic capabilities to your terminal. I’ve spent a lot of time writing about this powerful tool, so I was especially excited when &lt;a href=&#34;https://github.com/aws/amazon-q-developer-cli/releases&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;v1.9.x&lt;/a&gt; was released in May—it introduced support for the &lt;a href=&#34;https://dzone.com/articles/building-custom-tools-model-context-protocol&#34;&gt;Model Context Protocol&lt;/a&gt; (MCP) for tools use.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA; &lt;p style=&#34;text-align: left;&#34;&gt;&lt;strong&gt;What is Model Context Protocol (MCP)? I&lt;/strong&gt;&lt;strong&gt;f you have not heard about MCP (where have you been?) then check out my colleague&#39;s post on this,&amp;nbsp;&lt;/strong&gt;&lt;a href=&#34;https://dev.to/aws/standardizing-ai-tooling-with-model-context-protocol-mcp-nmj&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Standardizing AI Tooling with Model Context Protocol (MCP)&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;】&lt;p&gt; &lt;a href =“ https://aws.amazon.com/q/developer/build/?trk=fd6bb27a-13b0-4286-4286-8269-c7b1cfaa29f0&amp;sc_channel =将IDE风格的自动完成和代理功能带到您的终端的开发人员工具。我花了很多时间写这个功能强大的工具，所以当&lt;a href =“ https://github.com/aws/amazon-q-developer-cli/releases” rel =“ noopener noreferrer” target =“ _ black”&gt; v1.9.9.x &lt;/a&gt; &lt;/it &lt; href =“ https://dzone.com/articles/building-custom-tools-model-context-protocol”&gt;模型上下文协议&lt;/a&gt;（MCP）用于工具使用。&lt;/p&gt;&#xA;&lt;BlockQuote&gt;&#xA; &lt;p style =“ text-align：left;”&gt; &lt;strong&gt;什么是模型上下文协议（MCP）？我&lt;/strong&gt; &lt;strong&gt;如果您还没有听说过MCP（您去过哪里？），然后查看我的同事对此的帖子，&lt;/strong&gt; &lt;a href =“ https://dev.to/aws/standizing-ai ai-ai-tooling-ai-tooling-with-with-with-model-context-mcp-------------------------------------------模型上下文协议（MCP）&lt;/strong&gt; &lt;/a&gt; &lt;/p&gt;</description>
      <pubDate>Wed, 23 Jul 2025 19:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Software Engineering Trade-Offs: Why We Cannot Build the Perfect】软件工程权衡：为什么我们无法建立完美</title>
      <link>https://dzone.com/articles/building-imperfect-systems-in-software-engineering</link>
      <description>【&lt;p&gt;&lt;span style=&#34;background-color: transparent;&#34;&gt;In a couple of my last articles, I emphasized the importance of different software engineering trade-offs, for&amp;nbsp;&lt;/span&gt;&lt;a href=&#34;https://pasksoftware.com/what-are-distributed-systems/&#34; target=&#34;_blank&#34;&gt;example, here&lt;/a&gt;&lt;span style=&#34;background-color: transparent;&#34;&gt;.&lt;/span&gt; I have been trying to point out that focusing on maxing out just one trait can cause problems in others. I believe that the main part of our job as software engineers should be to min-max different software engineering trade-offs and even the trade-offs of different combinations of trade-offs.&lt;/p&gt;&#xA;&lt;p&gt;Software engineering is the art of constantly balancing all these things. Below you can find eight trade-offs, plus their pros and cons. I will also share a very simple framework for navigating software engineering trade-offs.&lt;/p&gt;】&lt;p&gt; &lt;span style =“背景色：透明;”&gt;在我最后几篇文章中，我强调了不同的软件工程折衷的重要性，因为&lt;/span&gt; &lt;a href =“ https://pasksoftware.com/what what what what-are-are-are-distribed-systems/透明;“&gt;。&lt;/span&gt;我一直在试图指出，专注于最大化一个特征可能会引起其他特征。我认为，作为软件工程师的工作的主要部分应该是最小的软件工程折衷，甚至是不同折衷组合的权衡。&lt;/p&gt;&#xA;&lt;p&gt;软件工程是不断平衡所有这些事情的艺术。在下面，您可以找到八个权衡，以及他们的利弊。我还将分享一个非常简单的框架，用于导航软件工程权衡。&lt;/p&gt;</description>
      <pubDate>Wed, 23 Jul 2025 11:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Undocumented Java 16 Feature: The End-of-File Comment】无证件的Java 16功能：文件结束评论</title>
      <link>https://dzone.com/articles/java-end-of-file-comment</link>
      <description>【&lt;p data-end=&#34;426&#34; data-start=&#34;182&#34;&gt;While working on some code where I wanted to obscure parts of it using Unicode escapes instead of the actual source, I accidentally stumbled upon an undocumented feature that’s been around since &lt;a href=&#34;https://dzone.com/java&#34;&gt;Java 16&lt;/a&gt;: what I call the end-of-file comment.&lt;/p&gt;&#xA;&lt;p data-end=&#34;479&#34; data-start=&#34;428&#34;&gt;In Java, we typically have three types of comments:&lt;/p&gt;】&lt;p data-end =“ 426” data-start =“ 182”&gt;在处理某个代码时，我想使用Unicode逃逸而不是实际来源来掩盖其部分的一部分，我意外地偶然发现了一个无证件的功能，该功能自&lt;a href = a href =“&#xA;&lt;p data-end =“ 479” data-start =“ 428”&gt;在Java中，我们通常有三种类型的评论：&lt;/p&gt;</description>
      <pubDate>Wed, 23 Jul 2025 18:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Building a Modern Data Platform That Delivers Real Business Value】建立一个现代数据平台，可提供实际的业务价值</title>
      <link>https://dzone.com/articles/data-modernization-strategy-cloud-governance-ai</link>
      <description>【&lt;p&gt;Data modernization is a strategic endeavor that transforms the way organizations harness data for value creation. It involves adopting innovative approaches in terms of accessibility, governance, operations, and technology, typically centered around modern cloud architectures. This transformation is not limited to technology alone but extends to rethinking people and processes within an organization.&lt;/p&gt;&#xA;&lt;p&gt;At its core, data modernization aims to facilitate easier and more effective use of data through enhanced governance structures, operational practices, and technological frameworks. The objective is to ensure that data ecosystems evolve to support the growing demand for timely, accurate, and actionable insights. The strategic importance of this transformation lies in its ability to unlock new business opportunities, improve decision-making, and strengthen competitive positioning by making data an accessible and valuable asset across all levels of the enterprise.&lt;/p&gt;】&lt;p&gt;数据现代化是一项战略努力，它改变了组织利用数据来创造价值的方式。它涉及在可访问性，治理，运营和技术方面采用创新方法，通常以现代云体系结构为中心。这种转变不仅限于技术，而要扩展到组织内部的人员和流程。&lt;/p&gt;&#xA;&lt;p&gt;以其核心，数据现代化旨在通过增强的治理结构，运营实践和技术框架来促进更有效，更有效地利用数据。目的是确保数据生态系统发展以支持对及时，准确和可行的见解的不断增长的需求。这种转变的战略重要性在于它通过使数据成为企业各个级别的可访问和宝贵的资产来释放新的商机，改善决策和增强竞争定位的能力。&lt;/p&gt;</description>
      <pubDate>Wed, 23 Jul 2025 20:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【The Golden Signals of Monitoring】监控的金信号</title>
      <link>https://dzone.com/articles/the-golden-signals-of-monitoring</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;This article describes &#34;Golden Signals,&#34; how they can provide a high-level health overview and performance of your service. These signals are very useful to understand the state of any service and can help identify potential issues. They can be used as a good starting point to implement monitoring strategies specific to your workload. If any of these signals are out of the norm, it is a strong indicator that something needs attention.&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Here&#39;s a breakdown of each signal and how it can be used as a starting point for monitoring your services:&lt;/p&gt;】&lt;p dir =“ ltr”&gt;本文描述了“金信号”，他们如何提供高级健康概述和服务的性能。这些信号对于理解任何服务的状态非常有用，并且可以帮助识别潜在的问题。它们可以用作实施特定工作量监视策略的好起点。如果这些信号中的任何一个不符合常态，则有很强的指标表明需要注意。&lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;这是每个信号的分解，以及如何将其用作监视服务的起点：&lt;/p&gt;</description>
      <pubDate>Wed, 23 Jul 2025 17:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Beyond the Handoff: How Product and Engineering Teams Are Redefining Collaboration】除了交接之外：产品和工程团队如何重新定义协作</title>
      <link>https://dzone.com/articles/agile-product-engineering-collaboration-frameworks</link>
      <description>【&lt;p&gt;The modern digital product team gathers in a glass-walled conference room at a Seattle technology firm. Sitting around the table are the product manager, three engineers, a UX designer, and a data analyst. They&#39;re not debating a completed feature or fighting about a product roadmap. Instead, they&#39;re engaged in what increasingly organizations call &#34;product discovery&#34;—a collaborative exploration of user problems before a line of code is written.&lt;/p&gt;&#xA;&lt;p&gt;This moment, all too familiar to top tech organizations, marks a sea change in the way that product and engineering teams interact. The old model of handoffs—product folks defining requirements, engineers building out—has its days numbered.&lt;/p&gt;】&lt;p&gt;现代的数字产品团队在西雅图技术公司的一间玻璃墙会议室里聚集。坐在桌子上的是产品经理，三名工程师，一名UX设计师和一名数据分析师。他们不是在辩论完整的功能或有关产品路线图的斗争。取而代之的是，他们参与了越来越多的组织所说的“产品发现”  - 在编写代码行之前对用户问题的协作探索。&lt;/p&gt;&#xA;&lt;p&gt;这一刻，对于顶尖的科技组织来说太熟悉了，标志着产品和工程团队相互作用的方式变化。旧模型（定义要求的产品）的旧模型，工程师的数量已编号。&lt;/p&gt;</description>
      <pubDate>Wed, 23 Jul 2025 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Building Resilient Event-Driven Applications Using Temporal】使用暂时的构建弹性事件驱动的应用程序</title>
      <link>https://dzone.com/articles/temporal-workflow-guide-event-driven-applications</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://dzone.com/articles/how-to-visualize-temporalio-workflows&#34;&gt;Temporal&lt;/a&gt; is an open-source durable workflow engine that allows developers to write fault-tolerant, long-running, and stateful applications using simple code. This guide walks you through setting up Temporal locally, writing your first workflow, and running it end-to-end using the TypeScript &lt;a href=&#34;https://dzone.com/articles/what-is-an-sdk-examples-use-cases-amp-characterist&#34;&gt;SDK&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 dir=&#34;ltr&#34;&gt;Problem: Distributed Systems Are Complex to Manage&lt;/h2&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;Building modern software systems isn’t getting any easier. As companies move to the cloud and break their applications into microservices, the promise is agility and scalability. But what developers actually end up with is a tangled web of APIs, message queues, retry logic, and fragile cron jobs. A single user action — like placing an order or submitting a loan application — can trigger dozens of interconnected processes that need to happen in the right order, with the right timing, and ideally, never fail. But they do fail. Networks timeout. Services go down. Scheduled jobs disappear silently. And every failure is another patch, another workaround, another sleepless night for engineers. Writing and maintaining the glue code to handle these failures gracefully is frustrating, repetitive, and hard to test. It’s like trying to build a house of cards in the middle of a windstorm — one shaky piece and everything crashes. That’s the harsh reality of distributed systems today.&lt;/p&gt;】&lt;p dir =“ ltr”&gt; &lt;a href =“ https://dzone.com/articles/how-to-to-visualize-temporalio-workflows”&gt; permoal &lt;/a&gt;是一种开发人员的开放式耐用工作流引擎，使开发人员可以使用简单的代码来写入故障，长期且使用简单的代码。本指南将带您在本地设置时间，写第一个工作流程，并使用Typescript &lt;a href =“ https://dzone.com/articles/what-is-is-an-sdk-examples-use-cases-cases-cases-cases-case-case--cas--character-”&gt; sdk &lt;/a&gt;。&#xA;&lt;h2 dir =“ ltr”&gt;问题：分布式系统很复杂&lt;/h2&gt;&#xA;&lt;p dir =“ ltr”&gt;构建现代软件系统并不容易。当公司转向云并将其应用程序分解为微服务时，承诺是敏捷性和可扩展性。但是，开发人员实际上是一个纠结的API，消息队列，重试逻辑和脆弱的Cron作业。单个用户行动（例如下订单或提交贷款申请）可以触发数十个需要以正确顺序，正确的时间安排，理想情况下，永远不要失败的相互联系的过程。但是他们确实失败了。网络超时。服务下降。预定的工作默默消失了。每个故障都是另一个补丁，另一个解决方法，对于工程师来说，另一个失眠的夜晚。编写和维护胶水代码以优雅地处理这些失败是令人沮丧，重复的，并且难以测试。这就像试图在暴风雨中间建造纸牌屋一样 - 一件摇摇欲坠的碎片，一切都崩溃了。那是当今分布式系统的严厉现实。&lt;/p&gt;</description>
      <pubDate>Wed, 23 Jul 2025 14:00:02 +0000</pubDate>
    </item>
    <item>
      <title>【Automating a Web Form With Playwright MCP and MySQL MCP】使用剧作家MCP和MySQL MCP自动化网络表单</title>
      <link>https://dzone.com/articles/automate-web-form-playwright-mysql-mcp</link>
      <description>【&lt;p data-selectable-paragraph=&#34;&#34;&gt;Combining browser automation with database interactions opens up powerful possibilities. Imagine fetching user data from a database and using it to populate a web form automatically — no manual scripting required.&lt;/p&gt;&#xA;&lt;p data-selectable-paragraph=&#34;&#34;&gt;With &lt;a href=&#34;https://github.com/executeautomation/mcp-playwright&#34; rel=&#34;noopener ugc nofollow&#34; target=&#34;_blank&#34;&gt;Playwright MCP&lt;/a&gt; (Model Context Protocol) and &lt;a href=&#34;https://github.com/designcomputer/mysql_mcp_server&#34; rel=&#34;noopener ugc nofollow&#34; target=&#34;_blank&#34;&gt;MySQL MCP,&lt;/a&gt; you can achieve this seamlessly. In this blog, I’ll walk you through how to integrate these tools to fetch data from a MySQL database and use it to fill in the checkout in the Web Form. By the end, you’ll have a working automation setup that’s both efficient and scalable.&lt;/p&gt;】&lt;p数据选择 - 段落=“”&gt;将浏览器自动化与数据库交互结合起来开放强大的可能性。想象一下从数据库获取用户数据并使用它自动填充Web表单 - 不需要手动脚本。&lt;/p&gt;&#xA;&lt;p data-selectable-paragraph =“”&gt;带有&lt;a href =“ https://github.com/executeautomation/mcp-playwright” rel =“ noopener ugc ugc nofollow nofclollow” target =“ _ brank href =“ https://github.com/designcomputer/mysql_mcp_server” rel =“ noopener ugc nofollow” target =“ _ black”&gt; mysql mcp，&lt;/a&gt;您可以无缝地实现此目标。在此博客中，我将介绍如何集成这些工具以从MySQL数据库获取数据，并使用它在Web表单中填写结帐。最后，您将拥有一个既高效又可扩展的工作自动化设置。&lt;/p&gt;</description>
      <pubDate>Wed, 23 Jul 2025 12:00:09 +0000</pubDate>
    </item>
    <item>
      <title>【[Part-3] Text to Action: Adding Voice Control to Your Smart Calendar】[第3部分]文本到操作：将语音控件添加到智能日历</title>
      <link>https://dzone.com/articles/voice-nlp-google-calendar-integration</link>
      <description>【&lt;section name=&#34;3040&#34;&gt;&#xA; &lt;p name=&#34;c91b&#34;&gt;Welcome to the third installment of our “Text to Action” series, where we’re building intelligent systems that transform natural language into real-world actions using AI.&lt;/p&gt;&#xA;&lt;/section&gt;&#xA;&lt;section name=&#34;e8c6&#34;&gt;&#xA; &lt;p name=&#34;7568&#34;&gt;In &#34;&lt;a href=&#34;https://dzone.com/articles/build-a-google-calendar-api-with-expressjs&#34; target=&#34;_self&#34;&gt;[Part-1] Text to Action: Build a Smart Calendar AI Assistant&lt;/a&gt;,&#34; we established &lt;strong&gt;our foundation&lt;/strong&gt; by creating an Express.js backend that connects to Google Calendar’s API. This gave us the ability to programmatically &lt;strong&gt;create calendar events through exposed API endpoint&lt;/strong&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/p&gt;】&lt;部分名称=“ 3040”&gt;&#xA; &lt;p name =“ c91b”&gt;欢迎进入我们的“文本到动作”系列的第三部分，我们正在构建智能系统，这些系统将自然语言转换为使用AI的真实世界动作。&lt;/p&gt;&#xA;&lt;/section&gt;&#xA;&lt;部分名称=“ E8C6”&gt;&#xA; &lt;p name =“ 7568”&gt;在“ &lt;a href =” https://dzone.com/articles/build-a-google-calendar-api-api-with-with-eppressjs“ target =“ _ self self”&gt;“ part-1”文本到行动： API。这使我们能够通过裸露的API端点来编程&lt;strong&gt;创建日历事件&lt;/strong&gt; &lt;strong&gt;。&lt;/strong&gt; &lt;/p&gt;</description>
      <pubDate>Wed, 23 Jul 2025 15:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Designing Retry-Resilient Fare Pipelines With Idempotent Event Handling】设计重试弹性的票价管道，并使用IDEMPOTENT事件处理</title>
      <link>https://dzone.com/articles/retry-resilient-fare-pipelines-idempotent-events</link>
      <description>【&lt;p dir=&#34;ltr&#34;&gt;In modern flight booking systems, streaming fare updates and reservations through distributed microservices is common. These pipelines must be retry-resilient, ensuring that transient failures or replays don’t cause duplicate bookings or stale pricing. A core strategy is idempotency: each event (e.g., a fare-update or booking command) carries a unique identifier so processing it more than once has no adverse effect.&amp;nbsp;&lt;/p&gt;&#xA;&lt;p dir=&#34;ltr&#34;&gt;In practice, this means assigning a unique event ID or idempotency key to each fare request. For example, an airline booking API might attach a unique request token so that if a user’s retry comes through, the service recognizes and ignores it. This prevents duplicate bookings if, say, a payment call times out and is retried. Similarly, pricing events should include a unique price-update ID. Downstream consumers (cache updaters, booking services, analytics) record these IDs (in a database or distributed cache) and skip any event with an already-seen ID.&lt;/p&gt;】&lt;p dir =“ ltr”&gt;在现代飞行预订系统中，通过分布式微服务的流票价更新和预订很常见。这些管道必须具有重试弹性，以确保瞬态失败或重播不会引起重复的预订或定价。核心策略是势力：每个事件（例如，票价更高或预订命令）带有唯一的标识符，因此对其进行处理不止一次没有不利影响。 &lt;/p&gt;&#xA;&lt;p dir =“ ltr”&gt;在实践中，这意味着为每个票价请求分配一个唯一的事件ID或IDEMPOTENCY密钥。例如，航空公司预订API可能会附上唯一的请求令牌，以便如果用户的重试，该服务会识别并忽略它。如果说付款电话会议并被重新进行，则可以防止重复的预订。同样，定价事件应包括独特的价格高价ID。下游消费者（缓存更新器，预订服务，分析）记录这些ID（在数据库或分布式缓存中），并跳过具有已经看到的ID的任何事件。&lt;/p&gt;</description>
      <pubDate>Wed, 23 Jul 2025 13:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>