<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ElixirStatus</title>
    <link></link>
    <description>Elixir news and status updates from the community for Elixir and Phoenix</description>
    <item>
      <title>【Nerves Online Meetup】神经在线聚会</title>
      <link>https://elixirstatus.com/p/N8byZ-nerves-online-meetup</link>
      <description>【&#xA;          &lt;table width=&#34;100%&#34; border=&#34;0&#34;&gt;&#xA;            &lt;tr&gt;&#xA;              &lt;td width=80 valign=top&gt;&#xA;                &lt;img src=&#34;https://elixirstatus.com/rss/avatar/amclain?uid=N8byZ&#34; width=&#34;64&#34; height=&#34;64&#34; /&gt;&#xA;              &lt;/td&gt;&#xA;              &lt;td&gt;&#xA;                &lt;h1&gt;Nerves Online Meetup&lt;/h1&gt;&#xA;&#xA;                &lt;font color=&#34;#aaa&#34;&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    21 Jul 2025&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    by&#xA;                    &lt;i class=&#34;icon-git_circle&#34;&gt;&lt;/i&gt; amclain&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    &#xA;                  &lt;/font&gt;&#xA;                &lt;/font&gt;&#xA;&#xA;                &lt;p&gt;&#xA;The next Nerves embedded systems meetup is Wednesday, July 30th! This will be a social gathering to hang out with other Elixir/embedded enthusiasts, share projects, ask questions, and get help! RSVP here:&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://www.meetup.com/nerves/events/305303631&#34;&gt;https://www.meetup.com/nerves/events/305303631&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;                &lt;hr&gt;&#xA;                &lt;small&gt;&lt;a href=&#34;https://elixirstatus.com/p/N8byZ-nerves-online-meetup&#34;&gt;View on ElixirStatus&lt;/a&gt;&lt;/small&gt;&#xA;              &lt;/td&gt;&#xA;            &lt;/tr&gt;&#xA;          &lt;/table&gt;&#xA;        】&lt;table width =“ 100％” border =“ 0”&gt;&#xA;            &lt;tr&gt;&#xA;              &lt;td宽度= 80 valign = top&gt;&#xA;                &lt;img src =“ https://elixirstatus.com/rss/avatar/amclain?uid=n8byz” width =“ 64” height =“ 64”/&gt;&#xA;              &lt;/td&gt;&#xA;              &lt;td&gt;&#xA;                &lt;h1&gt;神经在线聚会&lt;/h1&gt;&#xA;&#xA;                &lt;font color =“＃aaa”&gt;&#xA;                  &lt;font color =“＃aaa”&gt;&#xA;                    2025年7月21日&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color =“＃aaa”&gt;&#xA;                    经过&#xA;                    &lt;i class =“ icon-git_circle”&gt; &lt;/i&gt; amclain&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color =“＃aaa”&gt;&#xA;                    &#xA;                  &lt;/font&gt;&#xA;                &lt;/font&gt;&#xA;&#xA;                &lt;p&gt;&#xA;下一个嵌入式系统聚会是7月30日（星期三）！这将是与其他长生不老药/嵌入式爱好者一起闲逛的社交聚会，分享项目，提出问题并获得帮助！ RSVP在这里：&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href =“ https://www.meetup.com/nerves/events/305303631”&gt; https://www.meetup.com/nerves/nerves/nnerves/events/305303631 &lt;/a&gt; &lt;/a&gt; &lt;/p&gt;&#xA;&#xA;                &lt;hr&gt;&#xA;                &lt;small&gt; &lt;a href =“ https://elixirstatus.com/p/n8byz-nerves-online-meetup”&gt; on Elixirstatus上的查看&lt;/a&gt; &lt;/a&gt; &lt;/small&gt;&#xA;              &lt;/td&gt;&#xA;            &lt;/tr&gt;&#xA;          &lt;/table&gt;</description>
      <pubDate>Mon, 21 Jul 2025 01:49:10 +0000</pubDate>
    </item>
    <item>
      <title>【An Introduction to Oban for Elixir Monitoring Using AppSignal】OBAN介绍用于使用AppSignal的Elixir监视的简介</title>
      <link>https://elixirstatus.com/p/b86pO-an-introduction-to-oban-for-elixir-monitoring-using-appsignal</link>
      <description>【&#xA;          &lt;table width=&#34;100%&#34; border=&#34;0&#34;&gt;&#xA;            &lt;tr&gt;&#xA;              &lt;td width=80 valign=top&gt;&#xA;                &lt;img src=&#34;https://elixirstatus.com/rss/avatar/AnaMalinovic?uid=b86pO&#34; width=&#34;64&#34; height=&#34;64&#34; /&gt;&#xA;              &lt;/td&gt;&#xA;              &lt;td&gt;&#xA;                &lt;h1&gt;An Introduction to Oban for Elixir Monitoring Using AppSignal&lt;/h1&gt;&#xA;&#xA;                &lt;font color=&#34;#aaa&#34;&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    22 Jul 2025&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    by&#xA;                    &lt;i class=&#34;icon-git_circle&#34;&gt;&lt;/i&gt; AnaMalinovic&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    &#xA;                  &lt;/font&gt;&#xA;                &lt;/font&gt;&#xA;&#xA;                &lt;p&gt;&#xA;In this article, we’ll learn about Oban’s fundamentals, potential pitfalls, and how to leverage AppSignal’s monitoring capabilities for your Oban setup: &lt;a href=&#34;https://blog.appsignal.com/2025/07/22/an-introduction-to-oban-for-elixir-monitoring-using-appsignal.html&#34;&gt;https://blog.appsignal.com/2025/07/22/an-introduction-to-oban-for-elixir-monitoring-using-appsignal.html&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;                &lt;hr&gt;&#xA;                &lt;small&gt;&lt;a href=&#34;https://elixirstatus.com/p/b86pO-an-introduction-to-oban-for-elixir-monitoring-using-appsignal&#34;&gt;View on ElixirStatus&lt;/a&gt;&lt;/small&gt;&#xA;              &lt;/td&gt;&#xA;            &lt;/tr&gt;&#xA;          &lt;/table&gt;&#xA;        】&lt;table width =“ 100％” border =“ 0”&gt;&#xA;            &lt;tr&gt;&#xA;              &lt;td宽度= 80 valign = top&gt;&#xA;                &lt;img src =“ https://elixirstatus.com/rss/avatar/anamalinovic?uid=b86po” width =“ 64” height =“ 64”/&gt;&#xA;              &lt;/td&gt;&#xA;              &lt;td&gt;&#xA;                &lt;h1&gt;使用AppSignal &lt;/h1&gt;的OBAN介绍用于精神生物监视&#xA;&#xA;                &lt;font color =“＃aaa”&gt;&#xA;                  &lt;font color =“＃aaa”&gt;&#xA;                    2025年7月22日&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color =“＃aaa”&gt;&#xA;                    经过&#xA;                    &lt;i class =“ icon-git_circle”&gt; &lt;/i&gt; anamalinovic&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color =“＃aaa”&gt;&#xA;                    &#xA;                  &lt;/font&gt;&#xA;                &lt;/font&gt;&#xA;&#xA;                &lt;p&gt;&#xA;在本文中，我们将了解Oban的基本原理，潜在的陷阱以及如何利用Appsignal为您的OBAN设置的监视功能：&lt;a href =“ https://blog.appsignal.com/2025/07/22/an-introduction-to-ban-for-ban-for-elixir-monitoring-monitoring-usiss-usp.usiss-appsignal.html”&gt; https://blog.appsignal.com/2025/07/22/an-introduction-to-ban-for-elixir-monitoring-monitoring-using-appsignal.html &lt;/a&gt; &lt;/p&gt;&#xA;&#xA;                &lt;hr&gt;&#xA;                &lt;small&gt; &lt;a href =“ https://elixirstatus.com/p/b86po-an-introduction-to-oban-for-elixir-monitoring-monitoring-monitoring-use-pappsignal”&gt;在Elixirstatus上查看&lt;/a&gt; &lt;/a&gt; &lt;/a&gt; &lt;/small&gt;&#xA;              &lt;/td&gt;&#xA;            &lt;/tr&gt;&#xA;          &lt;/table&gt;</description>
      <pubDate>Tue, 22 Jul 2025 11:25:38 +0000</pubDate>
    </item>
    <item>
      <title>【Instrumenting HTTP server by making requests without curl】通过不卷发的请求来仪器http服务器</title>
      <link>https://elixirstatus.com/p/9IdK9-instrumenting-http-server-by-making-requests-without-curl</link>
      <description>【&#xA;          &lt;table width=&#34;100%&#34; border=&#34;0&#34;&gt;&#xA;            &lt;tr&gt;&#xA;              &lt;td width=80 valign=top&gt;&#xA;                &lt;img src=&#34;https://elixirstatus.com/rss/avatar/gmile?uid=9IdK9&#34; width=&#34;64&#34; height=&#34;64&#34; /&gt;&#xA;              &lt;/td&gt;&#xA;              &lt;td&gt;&#xA;                &lt;h1&gt;Instrumenting HTTP server by making requests without curl&lt;/h1&gt;&#xA;&#xA;                &lt;font color=&#34;#aaa&#34;&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    27 Jul 2025&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    by&#xA;                    &lt;i class=&#34;icon-git_circle&#34;&gt;&lt;/i&gt; gmile&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    &#xA;                  &lt;/font&gt;&#xA;                &lt;/font&gt;&#xA;&#xA;                &lt;p&gt;&#xA;&lt;a href=&#34;https://ievgenpyrogov.com/requests-without-curl/&#34;&gt;https://ievgenpyrogov.com/requests-without-curl/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Tracing execution of entire HTTP requests in Elixir can be tricky because of the inherent nature of the short-lived processes handling them. Is there a way to simulate the HTTP request, while allowing room for the set up any instrumentation?&lt;/p&gt;&#xA;&lt;p&gt;&#xA;In this blog post I show how to do it without modifying application code.&lt;/p&gt;&#xA;&#xA;                &lt;hr&gt;&#xA;                &lt;small&gt;&lt;a href=&#34;https://elixirstatus.com/p/9IdK9-instrumenting-http-server-by-making-requests-without-curl&#34;&gt;View on ElixirStatus&lt;/a&gt;&lt;/small&gt;&#xA;              &lt;/td&gt;&#xA;            &lt;/tr&gt;&#xA;          &lt;/table&gt;&#xA;        】&lt;table width =“ 100％” border =“ 0”&gt;&#xA;            &lt;tr&gt;&#xA;              &lt;td宽度= 80 valign = top&gt;&#xA;                &lt;img src =“ https://elixirstatus.com/rss/avatar/gmile?uid=9idk9” width =“ 64” height =“ 64”/&gt;&#xA;              &lt;/td&gt;&#xA;              &lt;td&gt;&#xA;                &lt;h1&gt;通过在没有卷发的情况下提出请求&lt;/h1&gt;来仪器&#xA;&#xA;                &lt;font color =“＃aaa”&gt;&#xA;                  &lt;font color =“＃aaa”&gt;&#xA;                    2025年7月27日&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color =“＃aaa”&gt;&#xA;                    经过&#xA;                    &lt;i class =“ icon-git_circle”&gt; &lt;/i&gt; gmile&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color =“＃aaa”&gt;&#xA;                    &#xA;                  &lt;/font&gt;&#xA;                &lt;/font&gt;&#xA;&#xA;                &lt;p&gt;&#xA;&lt;a href =“ https://ievgenpyrogov.com/requests-without-curl/”&gt; https://ievgenpyrogogov.com/requests-without-curl/ &lt;/a&gt; &lt;/a&gt; &lt;/p&gt;&#xA;&lt;p&gt;&#xA;由于短暂的过程的固有性质处理它们，因此追踪长精灵中的整个HTTP请求的执行可能很棘手。有没有办法模拟HTTP请求，同时允许安装任何仪器的空间？&lt;/p&gt;&#xA;&lt;p&gt;&#xA;在此博客文章中，我在不修改应用程序代码的情况下展示了如何做。&lt;/p&gt;&#xA;&#xA;                &lt;hr&gt;&#xA;                &lt;small&gt; &lt;a href =“ https://elixirstatus.com/p/9idk9-instrumenting-http-server-by-making-making-making-requests-without-curl”&gt; onixirstatus上的视图&lt;/a&gt; &lt;/a&gt; &lt;/a&gt; &lt;/small&gt;&#xA;              &lt;/td&gt;&#xA;            &lt;/tr&gt;&#xA;          &lt;/table&gt;</description>
      <pubDate>Sun, 27 Jul 2025 12:37:49 +0000</pubDate>
    </item>
    <item>
      <title>【Popcorn: Bringing Elixir to the Browser】爆米花：将长生不老药带到浏览器</title>
      <link>https://elixirstatus.com/p/ccKHH-popcorn-bringing-elixir-to-the-browser</link>
      <description>【&#xA;          &lt;table width=&#34;100%&#34; border=&#34;0&#34;&gt;&#xA;            &lt;tr&gt;&#xA;              &lt;td width=80 valign=top&gt;&#xA;                &lt;img src=&#34;https://elixirstatus.com/rss/avatar/kuligkar?uid=ccKHH&#34; width=&#34;64&#34; height=&#34;64&#34; /&gt;&#xA;              &lt;/td&gt;&#xA;              &lt;td&gt;&#xA;                &lt;h1&gt;Popcorn: Bringing Elixir to the Browser&lt;/h1&gt;&#xA;&#xA;                &lt;font color=&#34;#aaa&#34;&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    22 Jul 2025&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    by&#xA;                    &lt;i class=&#34;icon-git_circle&#34;&gt;&lt;/i&gt; kuligkar&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    &#xA;                  &lt;/font&gt;&#xA;                &lt;/font&gt;&#xA;&#xA;                &lt;p&gt;&#xA;You can now run Elixir code right in your browser – thanks to Popcorn, which wraps AtomVM in WebAssembly for seamless client-side execution. Get instant REPL sessions, live examples, and JS interop without installing anything.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Link: &lt;a href=&#34;https://blog.swmansion.com/popcorn-bringing-elixir-to-the-browser-8993a58a00be&#34;&gt;https://blog.swmansion.com/popcorn-bringing-elixir-to-the-browser-8993a58a00be&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;                &lt;hr&gt;&#xA;                &lt;small&gt;&lt;a href=&#34;https://elixirstatus.com/p/ccKHH-popcorn-bringing-elixir-to-the-browser&#34;&gt;View on ElixirStatus&lt;/a&gt;&lt;/small&gt;&#xA;              &lt;/td&gt;&#xA;            &lt;/tr&gt;&#xA;          &lt;/table&gt;&#xA;        】&lt;table width =“ 100％” border =“ 0”&gt;&#xA;            &lt;tr&gt;&#xA;              &lt;td宽度= 80 valign = top&gt;&#xA;                &lt;img src =“ https://elixirstatus.com/rss/avatar/kuligkar?uid=cckhh” width =“ 64” height =“ 64”/&gt;&#xA;              &lt;/td&gt;&#xA;              &lt;td&gt;&#xA;                &lt;H1&gt;爆米花：将长生不老药带到浏览器&lt;/h1&gt;&#xA;&#xA;                &lt;font color =“＃aaa”&gt;&#xA;                  &lt;font color =“＃aaa”&gt;&#xA;                    2025年7月22日&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color =“＃aaa”&gt;&#xA;                    经过&#xA;                    &lt;i class =“ icon-git_circle”&gt; &lt;/i&gt; kuligkar&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color =“＃aaa”&gt;&#xA;                    &#xA;                  &lt;/font&gt;&#xA;                &lt;/font&gt;&#xA;&#xA;                &lt;p&gt;&#xA;现在，您可以在浏览器中直接运行Elixir代码 - 借助爆米花，爆米花将ATOMVM包装在WebAssembly中，以进行无缝的客户端执行。获得即时的重录会议，实时示例和JS Interop，而无需安装任何内容。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;链接：&lt;A href =“ https://blog.swmansion.com/popcorn-bringing-elixir-to-to-to-to-the-browser-8993a58a00be”&gt; https://blog.swmansion.com/popcorn-bringing-bringing-bring--bring-bring-bring-bring-bring-bring-bring-to-the-browser-89999993aa588888.a&gt; &lt;/a&gt; &lt;/a&gt; &lt;/a&gt;&#xA;&#xA;                &lt;hr&gt;&#xA;                &lt;small&gt; &lt;a href =“ https://elixirstatus.com/p/cckhh-popcorn-bringing-bringing-elixir-to-the-browser”&gt;在Elixirstatus上查看&lt;/a&gt; &lt;/a&gt; &lt;/small&gt;&#xA;              &lt;/td&gt;&#xA;            &lt;/tr&gt;&#xA;          &lt;/table&gt;</description>
      <pubDate>Tue, 22 Jul 2025 12:51:06 +0000</pubDate>
    </item>
    <item>
      <title>【Get a sneak peek into the future of Apache ActiveMQ with JB Onofré】与JBOnofré一起偷看Apache Activemq的未来</title>
      <link>https://elixirstatus.com/p/JwgDs-get-a-sneak-peek-into-the-future-of-apache-activemq-with-jb-onofr</link>
      <description>【&#xA;          &lt;table width=&#34;100%&#34; border=&#34;0&#34;&gt;&#xA;            &lt;tr&gt;&#xA;              &lt;td width=80 valign=top&gt;&#xA;                &lt;img src=&#34;https://elixirstatus.com/rss/avatar/ancatrusc?uid=JwgDs&#34; width=&#34;64&#34; height=&#34;64&#34; /&gt;&#xA;              &lt;/td&gt;&#xA;              &lt;td&gt;&#xA;                &lt;h1&gt;Get a sneak peek into the future of Apache ActiveMQ with JB Onofré&lt;/h1&gt;&#xA;&#xA;                &lt;font color=&#34;#aaa&#34;&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    23 Jul 2025&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    by&#xA;                    &lt;i class=&#34;icon-git_circle&#34;&gt;&lt;/i&gt; ancatrusc&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    &#xA;                  &lt;/font&gt;&#xA;                &lt;/font&gt;&#xA;&#xA;                &lt;p&gt;&#xA;Fom runtime upgrades to cloud-ready scalability and advanced management tools.  &lt;a href=&#34;https://mqsummit.com/talks/apache-activemq-and-the-coming-features-around-cloud-and-management/&#34;&gt;https://mqsummit.com/talks/apache-activemq-and-the-coming-features-around-cloud-and-management/&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;                &lt;hr&gt;&#xA;                &lt;small&gt;&lt;a href=&#34;https://elixirstatus.com/p/JwgDs-get-a-sneak-peek-into-the-future-of-apache-activemq-with-jb-onofr&#34;&gt;View on ElixirStatus&lt;/a&gt;&lt;/small&gt;&#xA;              &lt;/td&gt;&#xA;            &lt;/tr&gt;&#xA;          &lt;/table&gt;&#xA;        】&lt;table width =“ 100％” border =“ 0”&gt;&#xA;            &lt;tr&gt;&#xA;              &lt;td宽度= 80 valign = top&gt;&#xA;                &lt;img src =“ https://elixirstatus.com/rss/avatar/ancatrusc?uid=jwgds” width =“ 64” height =“ 64”/&gt;&#xA;              &lt;/td&gt;&#xA;              &lt;td&gt;&#xA;                &lt;h1&gt;用JBOnofré&lt;/h1&gt;偷看了Apache Activemq的未来&#xA;&#xA;                &lt;font color =“＃aaa”&gt;&#xA;                  &lt;font color =“＃aaa”&gt;&#xA;                    2025年7月23日&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color =“＃aaa”&gt;&#xA;                    经过&#xA;                    &lt;i class =“ icon-git_circle”&gt; &lt;/i&gt; ancatrusc&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color =“＃aaa”&gt;&#xA;                    &#xA;                  &lt;/font&gt;&#xA;                &lt;/font&gt;&#xA;&#xA;                &lt;p&gt;&#xA;FOM运行时升级到可云的可扩展性和高级管理工具。  &lt;a href=&#34;https://mqsummit.com/talks/apache-activemq-and-the-coming-features-around-cloud-and-management/&#34;&gt;https://mqsummit.com/talks/apache-activemq-and-the-coming-features-around-cloud-and-management/&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;                &lt;hr&gt;&#xA;                &lt;small&gt; &lt;a href =“ https://elixirstatus.com/p/jwgds-get-a-sneak-peek-peek-peek-into-the-the-future-op-apache-apache-apache-activemq-with-jb-onofr”&gt;在Elixirstatus上查看&#xA;              &lt;/td&gt;&#xA;            &lt;/tr&gt;&#xA;          &lt;/table&gt;</description>
      <pubDate>Wed, 23 Jul 2025 11:23:38 +0000</pubDate>
    </item>
    <item>
      <title>【The Alchemy of Security】安全炼金术</title>
      <link>https://elixirstatus.com/p/9voqV-the-alchemy-of-security</link>
      <description>【&#xA;          &lt;table width=&#34;100%&#34; border=&#34;0&#34;&gt;&#xA;            &lt;tr&gt;&#xA;              &lt;td width=80 valign=top&gt;&#xA;                &lt;img src=&#34;https://elixirstatus.com/rss/avatar/ancatrusc?uid=9voqV&#34; width=&#34;64&#34; height=&#34;64&#34; /&gt;&#xA;              &lt;/td&gt;&#xA;              &lt;td&gt;&#xA;                &lt;h1&gt;The Alchemy of Security&lt;/h1&gt;&#xA;&#xA;                &lt;font color=&#34;#aaa&#34;&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    23 Jul 2025&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    by&#xA;                    &lt;i class=&#34;icon-git_circle&#34;&gt;&lt;/i&gt; ancatrusc&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    &#xA;                  &lt;/font&gt;&#xA;                &lt;/font&gt;&#xA;&#xA;                &lt;p&gt;&#xA;. @mattludwigs, Sr. Software Engineer at @River, brings nearly a decade of Elixir experience to #ElixirConfUS!&lt;/p&gt;&#xA;&lt;p&gt;&#xA;In “The Alchemy of Security”, he’ll share practical techniques for crafting secure Elixir apps from Phoenix to Nerves. &lt;a href=&#34;https://elixirconf.com/talks/the-alchemy-of-security-crafting-secure-applications-in-elixir/&#34;&gt;https://elixirconf.com/talks/the-alchemy-of-security-crafting-secure-applications-in-elixir/&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;                &lt;hr&gt;&#xA;                &lt;small&gt;&lt;a href=&#34;https://elixirstatus.com/p/9voqV-the-alchemy-of-security&#34;&gt;View on ElixirStatus&lt;/a&gt;&lt;/small&gt;&#xA;              &lt;/td&gt;&#xA;            &lt;/tr&gt;&#xA;          &lt;/table&gt;&#xA;        】&lt;table width =“ 100％” border =“ 0”&gt;&#xA;            &lt;tr&gt;&#xA;              &lt;td宽度= 80 valign = top&gt;&#xA;                &lt;img src =“ https://elixirstatus.com/rss/avatar/ancatrusc?uid=9voQV” width =“ 64” height =“ 64”/&gt;&#xA;              &lt;/td&gt;&#xA;              &lt;td&gt;&#xA;                &lt;h1&gt;安全炼金术&lt;/h1&gt;&#xA;&#xA;                &lt;font color =“＃aaa”&gt;&#xA;                  &lt;font color =“＃aaa”&gt;&#xA;                    2025年7月23日&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color =“＃aaa”&gt;&#xA;                    经过&#xA;                    &lt;i class =“ icon-git_circle”&gt; &lt;/i&gt; ancatrusc&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color =“＃aaa”&gt;&#xA;                    &#xA;                  &lt;/font&gt;&#xA;                &lt;/font&gt;&#xA;&#xA;                &lt;p&gt;&#xA;。 @mattludwigs，高级软件工程师 @river，为#elixirconfus！&#xA;&lt;p&gt;&#xA;在“安全的炼金术”中，他将共享从凤凰到神经制作安全的长生不老药应用程序的实用技术。 &lt;a href=&#34;https://elixirconf.com/talks/the-alchemy-of-security-crafting-secure-applications-in-elixir/&#34;&gt;https://elixirconf.com/talks/the-alchemy-of-security-crafting-secure-applications-in-elixir/&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;                &lt;hr&gt;&#xA;                &lt;small&gt; &lt;a href =“ https://elixirstatus.com/p/9voqv-the--alchemy-of-security”&gt;在Elixirstatus上查看&lt;/a&gt; &lt;/a&gt; &lt;/small&gt;&#xA;              &lt;/td&gt;&#xA;            &lt;/tr&gt;&#xA;          &lt;/table&gt;</description>
      <pubDate>Wed, 23 Jul 2025 11:28:38 +0000</pubDate>
    </item>
    <item>
      <title>【Elixir background jobs: choosing the right tool for the job】Elixir背景工作：为工作选择合适的工具</title>
      <link>https://elixirstatus.com/p/8MMIW-elixir-background-jobs-choosing-the-right-tool-for-the-job</link>
      <description>【&#xA;          &lt;table width=&#34;100%&#34; border=&#34;0&#34;&gt;&#xA;            &lt;tr&gt;&#xA;              &lt;td width=80 valign=top&gt;&#xA;                &lt;img src=&#34;https://elixirstatus.com/rss/avatar/joshuap?uid=8MMIW&#34; width=&#34;64&#34; height=&#34;64&#34; /&gt;&#xA;              &lt;/td&gt;&#xA;              &lt;td&gt;&#xA;                &lt;h1&gt;Elixir background jobs: choosing the right tool for the job&lt;/h1&gt;&#xA;&#xA;                &lt;font color=&#34;#aaa&#34;&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    21 Jul 2025&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    by&#xA;                    &lt;i class=&#34;icon-git_circle&#34;&gt;&lt;/i&gt; joshuap&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    &#xA;                  &lt;/font&gt;&#xA;                &lt;/font&gt;&#xA;&#xA;                &lt;p&gt;&#xA;Many Elixir background job libraries have come and gone. While stable, Exq’s last functional release was in 2022. Verk, Kiq, and Toniq are all unmaintained.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Here’s why Oban won, plus a practical decision framework for when to consider the alternatives.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://www.honeybadger.io/blog/elixir-background-jobs/&#34;&gt;https://www.honeybadger.io/blog/elixir-background-jobs/&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;                &lt;hr&gt;&#xA;                &lt;small&gt;&lt;a href=&#34;https://elixirstatus.com/p/8MMIW-elixir-background-jobs-choosing-the-right-tool-for-the-job&#34;&gt;View on ElixirStatus&lt;/a&gt;&lt;/small&gt;&#xA;              &lt;/td&gt;&#xA;            &lt;/tr&gt;&#xA;          &lt;/table&gt;&#xA;        】&lt;table width =“ 100％” border =“ 0”&gt;&#xA;            &lt;tr&gt;&#xA;              &lt;td宽度= 80 valign = top&gt;&#xA;                &lt;img src =“ https://elixirstatus.com/rss/avatar/joshuap?uid=8mmiw” width =“ 64” height =“ 64”/&gt;&#xA;              &lt;/td&gt;&#xA;              &lt;td&gt;&#xA;                &lt;h1&gt; elixir背景工作：选择适合作业的正确工具&lt;/h1&gt;&#xA;&#xA;                &lt;font color =“＃aaa”&gt;&#xA;                  &lt;font color =“＃aaa”&gt;&#xA;                    2025年7月21日&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color =“＃aaa”&gt;&#xA;                    经过&#xA;                    &lt;i class =“ icon-git_circle”&gt; &lt;/i&gt; joshuap&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color =“＃aaa”&gt;&#xA;                    &#xA;                  &lt;/font&gt;&#xA;                &lt;/font&gt;&#xA;&#xA;                &lt;p&gt;&#xA;许多精灵背景库来往返。虽然稳定，但EXQ的最后一个功能发行是在2022年。VERK，KIQ和TONIQ都不是。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;这就是Oban赢得的原因，加上何时考虑替代方案的实际决策框架。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href =“ https://www.honeybadger.io/blog/elixir-background-jobs/”&gt; https://www.honeybadger.io/blog/blog/elixir-background-jobs/ &lt;/a&gt; &lt;/a&gt; &lt;/p&gt;&#xA;&#xA;                &lt;hr&gt;&#xA;                &lt;small&gt; &lt;a href =“ https://elixirstatus.com/p/8mmiw-elixir-background-jobs-jobs-choosing-the-the-the-right-tool-tool-for-the-job”&gt;在Elixirstatus上查看&lt;/a&gt; &lt;/a&gt; &lt;/a&gt; &lt;/small&gt;&#xA;              &lt;/td&gt;&#xA;            &lt;/tr&gt;&#xA;          &lt;/table&gt;</description>
      <pubDate>Mon, 21 Jul 2025 21:53:30 +0000</pubDate>
    </item>
    <item>
      <title>【Thinking Elixir 262: Five Years of Perfect Uptime】思考Elixir 262：五年完美的正常运行时间</title>
      <link>https://elixirstatus.com/p/LpJsc-thinking-elixir-262-five-years-of-perfect-uptime</link>
      <description>【&#xA;          &lt;table width=&#34;100%&#34; border=&#34;0&#34;&gt;&#xA;            &lt;tr&gt;&#xA;              &lt;td width=80 valign=top&gt;&#xA;                &lt;img src=&#34;https://elixirstatus.com/rss/avatar/brainlid?uid=LpJsc&#34; width=&#34;64&#34; height=&#34;64&#34; /&gt;&#xA;              &lt;/td&gt;&#xA;              &lt;td&gt;&#xA;                &lt;h1&gt;Thinking Elixir 262: Five Years of Perfect Uptime&lt;/h1&gt;&#xA;&#xA;                &lt;font color=&#34;#aaa&#34;&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    22 Jul 2025&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    by&#xA;                    &lt;i class=&#34;icon-git_circle&#34;&gt;&lt;/i&gt; brainlid&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    &#xA;                  &lt;/font&gt;&#xA;                &lt;/font&gt;&#xA;&#xA;                &lt;p&gt;&#xA;Episode 262 of &lt;a href=&#34;https://podcast.thinkingelixir.com&#34;&gt;Thinking Elixir&lt;/a&gt;. News includes Phoenix 1.8.0-rc.4 and LiveView 1.1.0-rc.3 with igniter upgrader support, new libraries including deps_changelog and the Hog process debugging tool by Alex Koutmos, Fly.io’s announcement of managed Postgres, an incredible conference talk about Waterpark - a healthcare system built on the BEAM that achieved 100% uptime for 5 years and running, tips on using Elixir compiler directives for function inlining, the full ElixirConf US 2025 schedule with keynotes from José Valim and Chris McCord, CodeBeam Europe speaker announcements, and more!&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://www.youtube.com/watch?v=VuuYwyBwLBA&#34;&gt;https://www.youtube.com/watch?v=VuuYwyBwLBA&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;                &lt;hr&gt;&#xA;                &lt;small&gt;&lt;a href=&#34;https://elixirstatus.com/p/LpJsc-thinking-elixir-262-five-years-of-perfect-uptime&#34;&gt;View on ElixirStatus&lt;/a&gt;&lt;/small&gt;&#xA;              &lt;/td&gt;&#xA;            &lt;/tr&gt;&#xA;          &lt;/table&gt;&#xA;        】&lt;table width =“ 100％” border =“ 0”&gt;&#xA;            &lt;tr&gt;&#xA;              &lt;td宽度= 80 valign = top&gt;&#xA;                &lt;img src =“ https://elixirstatus.com/rss/avatar/brainlid?uid=lpjsc” width =“ 64” height =“ 64”/&gt;&#xA;              &lt;/td&gt;&#xA;              &lt;td&gt;&#xA;                &lt;H1&gt;思考Elixir 262：五年完美的正常运行时间&lt;/h1&gt;&#xA;&#xA;                &lt;font color =“＃aaa”&gt;&#xA;                  &lt;font color =“＃aaa”&gt;&#xA;                    2025年7月22日&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color =“＃aaa”&gt;&#xA;                    经过&#xA;                    &lt;i class =“ icon-git_circle”&gt; &lt;/i&gt; Brainlid&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color =“＃aaa”&gt;&#xA;                    &#xA;                  &lt;/font&gt;&#xA;                &lt;/font&gt;&#xA;&#xA;                &lt;p&gt;&#xA;第262集的&lt;a href =“ https://podcast.thinkingelixir.com”&gt;思考elixir &lt;/a&gt;。 News includes Phoenix 1.8.0-rc.4 and LiveView 1.1.0-rc.3 with igniter upgrader support, new libraries including deps_changelog and the Hog process debugging tool by Alex Koutmos, Fly.io’s announcement of managed Postgres, an incredible conference talk about Waterpark - a healthcare system built on the BEAM that achieved 100% uptime for 5 years and running, tips on using Elixir compiler功能内部指令，完整的Elixirconf US 2025日程安排，由JoséValim和Chris McCord的Keynotes，CodeBeam Europe宣布公告等等！&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href =“ https://www.youtube.com/watch?v=vuuywybwlba”&gt; https://www.youtube.com/watch?v=vuuuywybwlba &lt;/a&gt; &lt;/p&gt;&#xA;&#xA;                &lt;hr&gt;&#xA;                &lt;small&gt; &lt;a href =“ https://elixirstatus.com/p/lpjsc-thinking-elixir-262-five--five--five-perfect-uptime-perfect-uptime”&gt;在Elixirstatus上的视图&lt;/a&gt; &lt;/a&gt; &lt;/a&gt; &lt;/small&gt;&#xA;              &lt;/td&gt;&#xA;            &lt;/tr&gt;&#xA;          &lt;/table&gt;</description>
      <pubDate>Tue, 22 Jul 2025 12:30:57 +0000</pubDate>
    </item>
    <item>
      <title>【Integrating Generative AI into Elixir-based applications by using the Jido agentic framework】通过使用Jido Agent框架将生成AI集成到基于Elixir的应用程序中</title>
      <link>https://elixirstatus.com/p/d9wKJ-integrating-generative-ai-into-elixir-based-applications-by-using-the-jido-agentic-framework</link>
      <description>【&#xA;          &lt;table width=&#34;100%&#34; border=&#34;0&#34;&gt;&#xA;            &lt;tr&gt;&#xA;              &lt;td width=80 valign=top&gt;&#xA;                &lt;img src=&#34;https://elixirstatus.com/rss/avatar/kwojtaszek?uid=d9wKJ&#34; width=&#34;64&#34; height=&#34;64&#34; /&gt;&#xA;              &lt;/td&gt;&#xA;              &lt;td&gt;&#xA;                &lt;h1&gt;Integrating Generative AI into Elixir-based applications by using the Jido agentic framework&lt;/h1&gt;&#xA;&#xA;                &lt;font color=&#34;#aaa&#34;&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    25 Jul 2025&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    by&#xA;                    &lt;i class=&#34;icon-git_circle&#34;&gt;&lt;/i&gt; kwojtaszek&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    &#xA;                  &lt;/font&gt;&#xA;                &lt;/font&gt;&#xA;&#xA;                &lt;p&gt;&#xA;In this case study, we showcase how Elixir unlocks a fundamentally better architecture for building autonomous AI agents. Most agentic AI frameworks today are built in Python—and they buckle under the pressure of concurrency, crash recovery, and distributed deployments. We took a different path.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://www.appunite.com/blog/integrating-generative-ai-into-elixir-based-applications-by-using-the-jido-agentic-framework&#34;&gt;https://www.appunite.com/blog/integrating-generative-ai-into-elixir-based-applications-by-using-the-jido-agentic-framework&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;                &lt;hr&gt;&#xA;                &lt;small&gt;&lt;a href=&#34;https://elixirstatus.com/p/d9wKJ-integrating-generative-ai-into-elixir-based-applications-by-using-the-jido-agentic-framework&#34;&gt;View on ElixirStatus&lt;/a&gt;&lt;/small&gt;&#xA;              &lt;/td&gt;&#xA;            &lt;/tr&gt;&#xA;          &lt;/table&gt;&#xA;        】&lt;table width =“ 100％” border =“ 0”&gt;&#xA;            &lt;tr&gt;&#xA;              &lt;td宽度= 80 valign = top&gt;&#xA;                &lt;img src =“ https://elixirstatus.com/rss/avatar/kwojtaszek?uid=d9wkj” width =“ 64” height =“ 64”/&gt;&#xA;              &lt;/td&gt;&#xA;              &lt;td&gt;&#xA;                &lt;h1&gt;使用Jido Agentic Framework &lt;/h1&gt;将生成AI集成到基于Elixir的应用程序中&#xA;&#xA;                &lt;font color =“＃aaa”&gt;&#xA;                  &lt;font color =“＃aaa”&gt;&#xA;                    2025年7月25日&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color =“＃aaa”&gt;&#xA;                    经过&#xA;                    &lt;i class =“ icon-git_circle”&gt; &lt;/i&gt; kwojtaszek&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color =“＃aaa”&gt;&#xA;                    &#xA;                  &lt;/font&gt;&#xA;                &lt;/font&gt;&#xA;&#xA;                &lt;p&gt;&#xA;在此案例研究中，我们展示了长老会如何解锁建立自主AI代理的根本上更好的体系结构。如今，大多数代理AI框架都是在Python建造的，并且它们在并发，崩溃恢复和分布式部署的压力下扣紧。我们走了一条不同的路。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href =“ https://www.appunite.com/blog/integrating-generative-generative-ai-into-elixir--------------------- use-applications-applications-by-using-the-jido-gando-gatentic-framework&gt;&gt; https://www.appunite.com/blog/integrating-generative-generative-ai-into-elixir----- by-by-using-the-jido-agentic-framework &lt;/a&gt; &lt;/p&gt;&#xA;&#xA;                &lt;hr&gt;&#xA;                &lt;small&gt; &lt;a href =“ https://elixirstatus.com/p/d9wkj-integrating-generative-generative-generative-ai-into-elixir--------------------------------------------- &lt;/applications-by-applications-by-using-jido-jido-agentic-agentic-framework在elixirstatus上查看&lt;/a&gt; &lt;/a&gt; &lt;/a&gt; &lt;/a&gt; &lt;/a&gt; &lt;/a&gt;&#xA;              &lt;/td&gt;&#xA;            &lt;/tr&gt;&#xA;          &lt;/table&gt;</description>
      <pubDate>Fri, 25 Jul 2025 12:41:22 +0000</pubDate>
    </item>
    <item>
      <title>【First-class gRPC Streams in Elixir】长生不老药中的一流GRPC流</title>
      <link>https://elixirstatus.com/p/JPRBO-first-class-grpc-streams-in-elixir</link>
      <description>【&#xA;          &lt;table width=&#34;100%&#34; border=&#34;0&#34;&gt;&#xA;            &lt;tr&gt;&#xA;              &lt;td width=80 valign=top&gt;&#xA;                &lt;img src=&#34;https://elixirstatus.com/rss/avatar/sleipnir?uid=JPRBO&#34; width=&#34;64&#34; height=&#34;64&#34; /&gt;&#xA;              &lt;/td&gt;&#xA;              &lt;td&gt;&#xA;                &lt;h1&gt;First-class gRPC Streams in Elixir&lt;/h1&gt;&#xA;&#xA;                &lt;font color=&#34;#aaa&#34;&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    24 Jul 2025&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    by&#xA;                    &lt;i class=&#34;icon-git_circle&#34;&gt;&lt;/i&gt; sleipnir&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    &#xA;                  &lt;/font&gt;&#xA;                &lt;/font&gt;&#xA;&#xA;                &lt;h1&gt;&#xA;First-Class gRPC Streams in Elixir: A new composable API&lt;/h1&gt;&#xA;&lt;p&gt;&#xA;For a long time, the Elixir community has lacked a truly idiomatic way to handle gRPC streaming. While unary RPCs have always been well-supported in the &lt;a href=&#34;https://github.com/elixir-grpc/grpc&#34;&gt;elixir-grpc&lt;/a&gt; library, stream handling felt incomplete — too low-level and too imperative for a language that thrives on functional and reactive principles.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;This gap was finally addressed in &lt;a href=&#34;https://github.com/elixir-grpc/grpc/issues/270&#34;&gt;issue #270&lt;/a&gt;, which led to a major improvement: &lt;strong&gt;first-class support for gRPC streams&lt;/strong&gt; using a &lt;strong&gt;functional and declarative API&lt;/strong&gt; that fits seamlessly into the Elixir ecosystem.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;&#xA;🚀 This new API is available starting from &lt;code class=&#34;inline&#34;&gt;elixir-grpc&lt;/code&gt; version &lt;strong&gt;0.10.0&lt;/strong&gt; — with the latest release being &lt;strong&gt;0.10.2&lt;/strong&gt;.  &lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;&#xA;It’s worth highlighting the irony: while Elixir is inherently concurrent and reactive — thanks to the BEAM and its actor-based model — its gRPC streaming capabilities lagged behind those found in other ecosystems.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Languages like Java (via Project Reactor or RxJava), Kotlin (with coroutines and Flows), and JavaScript (using RxJS or async iterators) have long embraced &lt;strong&gt;reactive paradigms&lt;/strong&gt; for working with gRPC streams. These models allowed developers to work with streams as composable, functional data flows.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Until recently, Elixir developers lacked similar expressive power. The new API introduced in version &lt;code class=&#34;inline&#34;&gt;0.10.0&lt;/code&gt; finally brings that same level of expressiveness and control to the Elixir world — and in a way that feels &lt;strong&gt;natural&lt;/strong&gt;, &lt;strong&gt;pure&lt;/strong&gt;, and &lt;strong&gt;declarative&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;h2&gt;&#xA;A Functional API for Streaming&lt;/h2&gt;&#xA;&lt;p&gt;&#xA;The new streaming API is designed around &lt;strong&gt;stream composition&lt;/strong&gt; and &lt;strong&gt;functional data flows&lt;/strong&gt;, relying on &lt;code class=&#34;inline&#34;&gt;GRPC.Stream&lt;/code&gt; to model and process streaming inputs and outputs. This new abstraction enables a developer experience that feels intuitive, powerful, and aligned with some Elixir’s design principles.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Here’s an example of the new API in action:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;elixir&#34;&gt;defmodule HelloworldStreams.Server do&#xA;  @moduledoc false&#xA;  use GRPC.Server, service: Stream.EchoServer.Service&#xA;&#xA;  alias HelloworldStreams.Utils.Transformer&#xA;  alias GRPC.Stream, as: GRPCStream&#xA;&#xA;  alias Stream.HelloRequest&#xA;  alias Stream.HelloReply&#xA;&#xA;  @spec say_unary_hello(HelloRequest.t(), GRPC.Server.Stream.t()) :: any()&#xA;  def say_unary_hello(request, _materializer) do&#xA;    GRPCStream.unary(request)&#xA;    |&amp;gt; GRPCStream.ask(Transformer)&#xA;    |&amp;gt; GRPCStream.map(fn %HelloReply{} = reply -&amp;gt;&#xA;      %HelloReply{message: &#34;[Reply] #{reply.message}&#34;}&#xA;    end)&#xA;    |&amp;gt; GRPCStream.run()&#xA;  end&#xA;&#xA;  @spec say_server_hello(HelloRequest.t(), GRPC.Server.Stream.t()) :: any()&#xA;  def say_server_hello(request, materializer) do&#xA;    create_output_stream(request)&#xA;    |&amp;gt; GRPCStream.from()&#xA;    |&amp;gt; GRPCStream.run_with(materializer)&#xA;  end&#xA;&#xA;  defp create_output_stream(msg) do&#xA;    Stream.repeatedly(fn -&amp;gt;&#xA;      index = :rand.uniform(10)&#xA;      %HelloReply{message: &#34;[#{index}] I&#39;m the Server for #{msg.name}&#34;}&#xA;    end)&#xA;    |&amp;gt; Stream.take(10)&#xA;    |&amp;gt; Enum.to_list()&#xA;  end&#xA;&#xA;  @spec say_bid_stream_hello(Enumerable.t(), GRPC.Server.Stream.t()) :: any()&#xA;  def say_bid_stream_hello(request, materializer) do&#xA;    output_stream =&#xA;      Stream.repeatedly(fn -&amp;gt;&#xA;        index = :rand.uniform(10)&#xA;        %HelloReply{message: &#34;[#{index}] I&#39;m the Server ;)&#34;}&#xA;      end)&#xA;&#xA;    GRPCStream.from(request, join_with: output_stream)&#xA;    |&amp;gt; GRPCStream.map(fn&#xA;      %HelloRequest{} = hello -&amp;gt;&#xA;        %HelloReply{message: &#34;Welcome #{hello.name}&#34;}&#xA;&#xA;      output_item -&amp;gt;&#xA;        output_item&#xA;    end)&#xA;    |&amp;gt; GRPCStream.run_with(materializer)&#xA;  end&#xA;end&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&#xA;As seen in the example above, composing different stages in the streaming pipeline is straightforward. Each step in the transformation can be expressed clearly, making the overall flow easier to follow and reason about.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;To support this, the &lt;code class=&#34;inline&#34;&gt;GRPC.Stream&lt;/code&gt; module offers a set of functions designed to operate directly on the stream, such as &lt;code class=&#34;inline&#34;&gt;map&lt;/code&gt;, &lt;code class=&#34;inline&#34;&gt;filter&lt;/code&gt;, &lt;code class=&#34;inline&#34;&gt;flat_map&lt;/code&gt;, &lt;code class=&#34;inline&#34;&gt;partition&lt;/code&gt;, &lt;code class=&#34;inline&#34;&gt;reduce&lt;/code&gt;, &lt;code class=&#34;inline&#34;&gt;uniq&lt;/code&gt; and so on. These utilities provide the flexibility needed to build expressive and efficient streaming logic while maintaining clarity and composability throughout the pipeline.&lt;/p&gt;&#xA;&lt;h2&gt;&#xA;Conclusion&lt;/h2&gt;&#xA;&lt;p&gt;&#xA;The introduction of a first-class streaming API represents a meaningful step forward for the Elixir gRPC ecosystem. It provides a more consistent and idiomatic way to implement streaming services using well-established functional constructs.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;This new approach makes it easier to model real-time interactions, handle bi-directional communication, and process data streams using composable and readable code.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Further details and examples can be found in the &lt;a href=&#34;https://github.com/elixir-grpc/grpc&#34;&gt;official elixir-grpc repository&lt;/a&gt; and &lt;a href=&#34;https://hex.pm/packages/grpc&#34;&gt;hex&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;                &lt;hr&gt;&#xA;                &lt;small&gt;&lt;a href=&#34;https://elixirstatus.com/p/JPRBO-first-class-grpc-streams-in-elixir&#34;&gt;View on ElixirStatus&lt;/a&gt;&lt;/small&gt;&#xA;              &lt;/td&gt;&#xA;            &lt;/tr&gt;&#xA;          &lt;/table&gt;&#xA;        】&lt;table width =“ 100％” border =“ 0”&gt;&#xA;            &lt;tr&gt;&#xA;              &lt;td宽度= 80 valign = top&gt;&#xA;                &lt;img src =“ https://elixirstatus.com/rss/avatar/sleipnir?uid=jprbo” width =“ 64” height =“ 64”/&gt;&#xA;              &lt;/td&gt;&#xA;              &lt;td&gt;&#xA;                &lt;h1&gt;长生不老药中的一流GRPC流&lt;/h1&gt;&#xA;&#xA;                &lt;font color =“＃aaa”&gt;&#xA;                  &lt;font color =“＃aaa”&gt;&#xA;                    2025年7月24日&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color =“＃aaa”&gt;&#xA;                    经过&#xA;                    &lt;i class =“ icon-git_circle”&gt; &lt;/i&gt; sleipnir&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color =“＃aaa”&gt;&#xA;                    &#xA;                  &lt;/font&gt;&#xA;                &lt;/font&gt;&#xA;&#xA;                &lt;H1&gt;&#xA;Elixir中的一流GRPC流：新的合并API &lt;/h1&gt;&#xA;&lt;p&gt;&#xA;长期以来，Elixir社区缺乏一种真正惯用的方法来处理GRPC流媒体。虽然在&lt;a href =“ https://github.com/elixir-grpc/grpc/grpc”&gt; elixir-grpc &lt;/a&gt;库中，流媒体处理感觉不完整 - 对功能性和反应性原理的兴奋性太低，因此，eLixir-grpc &lt;/a&gt;&#xA;&lt;p&gt;&#xA;最终在&lt;a href =“ https://github.com/elixir-grpc/grpc/issues/270”中解决了这一差距&#xA;&lt;BlockQuote&gt;&#xA;  &lt;p&gt;&#xA;🚀此新API从&lt;code class =“ inline”&gt; elixir-grpc &lt;/code&gt;版本&lt;strong&gt; 0.10.0 &lt;/strong&gt;  - 最新版本为&lt;strong&gt; 0.10.2 &lt;/strong&gt;。  &lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;&#xA;值得突出讽刺的是：虽然长生不老药本质上是并发和反应性的，这要归功于梁及其基于演员的模型，但其GRPC流媒体能力却落后于其他生态系统中的grpc。&lt;/p&gt; &lt;/p&gt;。&#xA;&lt;p&gt;&#xA;诸如Java（通过Project Reactor或rxjava），Kotlin（带有Coroutines和Flow）和JavaScript（使用RXJS或异步迭代器）等语言长期以来一直拥抱&lt;strong&gt;反应性范式&lt;/strong&gt;用于使用GRPC流。这些模型允许开发人员将流作为可组合功能数据流的流合作。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;直到最近，Elixir开发人员仍缺乏类似的表现力。在版本&lt;code class =“ inline”&gt; 0.10.0 &lt;/code&gt;中引入的新API最终将相同水平的表现力和控制带给了长生不老药 - 并以一种感觉&lt;strong&gt;自然&lt;/strong&gt;，&lt;strong&gt; pure &lt;/strong&gt;和&lt;strong&gt;声明&lt;/strong&gt;声明&lt;/strong&gt;。&#xA;&lt;H2&gt;&#xA;流媒体的功能性API &lt;/h2&gt;&#xA;&lt;p&gt;&#xA;新的流API围绕&lt;strong&gt;流组成&lt;/strong&gt;和&lt;strong&gt;功能数据流&lt;/strong&gt;，依靠&lt;code class =“ inline”&gt; grpc.stream &lt;/code&gt;来建模和流程流输入输入和输出。这种新的抽象使开发人员体验具有直觉，有力且与某些长生不老药的设计原则保持一致。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;这是新AP的示例我在行动：&lt;/p&gt;&#xA;&lt;pre&gt; &lt;code class =“ elixir”&gt; defmodule helloworldstreams.server do&#xA;  @moduledoc false&#xA;  使用Grpc.Server，服务：stream.echoserver.service&#xA;&#xA;  Alias Helloworldstreams.utils.transformer&#xA;  别名grpc.stream，as：grpcstream&#xA;&#xA;  别名流&#xA;  别名流&#xA;&#xA;  @spec say_unary_hello（hellorequest.t（），grpc.server.stream.t（））:: nyy（）&#xA;  def say_unary_hello（请求，_materializer）做&#xA;    grpcstream.unary（请求）&#xA;    |&gt; grpcstream.ask（变压器）&#xA;    |&gt; grpcstream.map（fn％helloreply {} =回复 - &gt;&#xA;      ％helloreply {message：“ [回复]＃{reply.message}”}&#xA;    结尾）&#xA;    |&gt; grpcstream.run（）&#xA;  结尾&#xA;&#xA;  @spec say_server_hello（hellorequest.t（），grpc.server.stream.t（））:: nyy（）&#xA;  def say_server_hello（请求，材料器）做&#xA;    create_output_stream（请求）&#xA;    |&gt; grpcstream.from（）&#xA;    |&gt; grpcStream.run_with（材料器）&#xA;  结尾&#xA;&#xA;  def create_output_stream（msg）做&#xA;    流&#xA;      索引=：rand.统一（10）&#xA;      ％helloreply {message：“ [＃{index}]我是＃{msg.name}的服务器“}”}&#xA;    结尾）&#xA;    |&gt; stream.take（10）&#xA;    |&gt; enum.to_list（）&#xA;  结尾&#xA;&#xA;  @spec say_bid_stream_hello（enumoser.t（），grpc.server.stream.t（））:: nyy（）&#xA;  def say_bid_stream_hello（请求，材料器）做&#xA;    output_stream =&#xA;      流&#xA;        索引=：rand.统一（10）&#xA;        ％helloreply {消息：“ [＃{index}]我是服务器;）”}&#xA;      结尾）&#xA;&#xA;    grpcstream.from（请求，join_with：output_stream）&#xA;    |&gt; grpcstream.map（fn&#xA;      ％hellorequest {} = Hello-&gt;&#xA;        ％helloreply {消息：“欢迎＃{hello.name}”}&#xA;&#xA;      output_item-&gt;&#xA;        output_item&#xA;    结尾）&#xA;    |&gt; grpcStream.run_with（材料器）&#xA;  结尾&#xA;结束&lt;/code&gt; &lt;/pre&gt;&#xA;&lt;p&gt;&#xA;如上面的示例所示，在流管线中组成不同的阶段很简单。转换中的每个步骤都可以清楚地表达，从而使整体流程更易于遵循和推理。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;To support this, the &lt;code class=&#34;inline&#34;&gt;GRPC.Stream&lt;/code&gt; module offers a set of functions designed to operate directly on the stream, such as &lt;code class=&#34;inline&#34;&gt;map&lt;/code&gt;, &lt;code class=&#34;inline&#34;&gt;filter&lt;/code&gt;, &lt;code class=&#34;inline&#34;&gt;flat_map&lt;/code&gt;, &lt;code class=&#34;inline&#34;&gt;partition&lt;/code&gt;, &lt;code class =“ inline”&gt; redion &lt;/code&gt;，&lt;code class =“ inline”&gt; uniq &lt;/code&gt;等。这些公用事业提供了建立表现力和高效流逻辑所需的灵活性，同时保持整个管道中的清晰度和合成性。&lt;/p&gt;&#xA;&lt;H2&gt;&#xA;结论&lt;/h2&gt;&#xA;&lt;p&gt;&#xA;一流的流媒体API的引入代表了长生素GRPC生态系统的有意义的一步。它提供了一种使用完善的功能构造实现流服务的更一致和惯用的方法。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;这种新方法使模拟实时互动，处理双向通信以及使用可读代码进行处理数据流变得更加容易。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;更多详细信息和示例可以在&lt;a href =“ https://github.com/eli中找到xir-grpc/grpc“&gt;官方elixir-grpc存储库&lt;/a&gt;和&lt;a href =” https://hex.pm/packages/grpc“&gt; hex。&#xA;&#xA;                &lt;hr&gt;&#xA;                &lt;small&gt; &lt;a href =“ https://elixirstatus.com/p/jprbo-first-class-grpc-streams-in-elixir”&gt;在Elixirstatus上查看&lt;/a&gt; &lt;/a&gt; &lt;/small&gt;&#xA;              &lt;/td&gt;&#xA;            &lt;/tr&gt;&#xA;          &lt;/table&gt;</description>
      <pubDate>Thu, 24 Jul 2025 14:06:12 +0000</pubDate>
    </item>
  </channel>
</rss>