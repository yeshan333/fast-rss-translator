<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ElixirStatus</title>
    <link></link>
    <description>Elixir news and status updates from the community for Elixir and Phoenix</description>
    <item>
      <title>【Prevent Decision Paralysis With These Battle-tested Elixir】用这些久经考验的灵丹妙药来防止决策瘫痪</title>
      <link>https://elixirstatus.com/p/etrDm-prevent-decision-paralysis-with-these-battle-tested-elixir</link>
      <description>【&#xA;          &lt;table width=&#34;100%&#34; border=&#34;0&#34;&gt;&#xA;            &lt;tr&gt;&#xA;              &lt;td width=80 valign=top&gt;&#xA;                &lt;img src=&#34;https://elixirstatus.com/rss/avatar/ViktoriiaYar?uid=etrDm&#34; width=&#34;64&#34; height=&#34;64&#34; /&gt;&#xA;              &lt;/td&gt;&#xA;              &lt;td&gt;&#xA;                &lt;h1&gt;Prevent Decision Paralysis With These Battle-tested Elixir&lt;/h1&gt;&#xA;&#xA;                &lt;font color=&#34;#aaa&#34;&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                     6 Dec 2024&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    by&#xA;                    &lt;i class=&#34;icon-git_circle&#34;&gt;&lt;/i&gt; ViktoriiaYar&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    &#xA;                  &lt;/font&gt;&#xA;                &lt;/font&gt;&#xA;&#xA;                &lt;p&gt;&#xA;Instead of evaluating 15 different libraries for each function, Elixir typically offers one or two battle-tested solutions per problem domain: &lt;a href=&#34;https://hackernoon.com/prevent-decision-paralysis-with-these-battle-tested-elixir-libraries&#34;&gt;https://hackernoon.com/prevent-decision-paralysis-with-these-battle-tested-elixir-libraries&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;                &lt;hr&gt;&#xA;                &lt;small&gt;&lt;a href=&#34;https://elixirstatus.com/p/etrDm-prevent-decision-paralysis-with-these-battle-tested-elixir&#34;&gt;View on ElixirStatus&lt;/a&gt;&lt;/small&gt;&#xA;              &lt;/td&gt;&#xA;            &lt;/tr&gt;&#xA;          &lt;/table&gt;&#xA;        】&lt;表格宽度=“100%”边框=“0”&gt;&#xA;            &lt;tr&gt;&#xA;              &lt;td 宽度=80 valign=顶部&gt;&#xA;                &lt;img src=&#34;https://elixirstatus.com/rss/avatar/ViktoriiaYar?uid=etrDm&#34; width=&#34;64&#34; height=&#34;64&#34; /&gt;&#xA;              &lt;/td&gt;&#xA;              &lt;td&gt;&#xA;                &lt;h1&gt;用这些久经考验的灵丹妙药来防止决策瘫痪&lt;/h1&gt;&#xA;&#xA;                &lt;字体颜色=“#aaa”&gt;&#xA;                  &lt;字体颜色=“#aaa”&gt;&#xA;                     2024 年 12 月 6 日&#xA;                  &lt;/font&gt;&#xA;                  &lt;字体颜色=“#aaa”&gt;&#xA;                    经过&#xA;                    &lt;i class=&#34;icon-git_circle&#34;&gt;&lt;/i&gt; ViktoriiaYar&#xA;                  &lt;/font&gt;&#xA;                  &lt;字体颜色=“#aaa”&gt;&#xA;                    &#xA;                  &lt;/font&gt;&#xA;                &lt;/font&gt;&#xA;&#xA;                &lt;p&gt;&#xA;Elixir 通常不会为每个功能评估 15 个不同的库，而是通常为每个问题域提供一到两个经过实战检验的解决方案： -elixir-libraries&#34;&gt;https://hackernoon.com/prevent-decision-parathesis-with-these-battle-tested-elixir-libraries&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;                &lt;小时&gt;&#xA;                &lt;small&gt;&lt;a href=&#34;https://elixirstatus.com/p/etrDm-prevent-decision-parathesis-with-these-battle-tested-elixir&#34;&gt;查看 ElixirStatus&lt;/a&gt;&lt;/small&gt;&#xA;              &lt;/td&gt;&#xA;            &lt;/tr&gt;&#xA;          &lt;/表&gt;</description>
      <pubDate>Fri, 06 Dec 2024 12:34:59 +0000</pubDate>
    </item>
    <item>
      <title>【Thinking Elixir 231: Pretty Error and OTP Raw Mode】Thinking Elixir 231：漂亮的错误和 OTP Raw 模式</title>
      <link>https://elixirstatus.com/p/4h2xg-thinking-elixir-231-pretty-error-and-otp-raw-mode</link>
      <description>【&#xA;          &lt;table width=&#34;100%&#34; border=&#34;0&#34;&gt;&#xA;            &lt;tr&gt;&#xA;              &lt;td width=80 valign=top&gt;&#xA;                &lt;img src=&#34;https://elixirstatus.com/rss/avatar/brainlid?uid=4h2xg&#34; width=&#34;64&#34; height=&#34;64&#34; /&gt;&#xA;              &lt;/td&gt;&#xA;              &lt;td&gt;&#xA;                &lt;h1&gt;Thinking Elixir 231: Pretty Error and OTP Raw Mode&lt;/h1&gt;&#xA;&#xA;                &lt;font color=&#34;#aaa&#34;&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                     3 Dec 2024&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    by&#xA;                    &lt;i class=&#34;icon-git_circle&#34;&gt;&lt;/i&gt; brainlid&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    &#xA;                  &lt;/font&gt;&#xA;                &lt;/font&gt;&#xA;&#xA;                &lt;p&gt;&#xA;Episode 231 of &lt;a href=&#34;https://podcast.thinkingelixir.com&#34;&gt;Thinking Elixir&lt;/a&gt;. News includes Dave Lucia’s PR making Elixir’s protocol errors more readable, OTP 28 introducing a “raw mode” for immediate CLI input processing, Saša Jurić’s “Against the Grain” talk on YouTube about a bespoke Kafka client, Johanna Larsson’s new site listing Elixir events, DockYard’s official acceptance of native application contracts highlighting the readiness of their LiveView Native library, and Brian Cardarella’s teased Motion.dev wrapper enhancing animations in LiveView, and more!&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://www.youtube.com/watch?v=lkszZDm2e5Y&#34;&gt;https://www.youtube.com/watch?v=lkszZDm2e5Y&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;                &lt;hr&gt;&#xA;                &lt;small&gt;&lt;a href=&#34;https://elixirstatus.com/p/4h2xg-thinking-elixir-231-pretty-error-and-otp-raw-mode&#34;&gt;View on ElixirStatus&lt;/a&gt;&lt;/small&gt;&#xA;              &lt;/td&gt;&#xA;            &lt;/tr&gt;&#xA;          &lt;/table&gt;&#xA;        】&lt;表格宽度=“100%”边框=“0”&gt;&#xA;            &lt;tr&gt;&#xA;              &lt;td 宽度=80 valign=顶部&gt;&#xA;                &lt;img src=&#34;https://elixirstatus.com/rss/avatar/brainlid?uid=4h2xg&#34; width=&#34;64&#34; height=&#34;64&#34; /&gt;&#xA;              &lt;/td&gt;&#xA;              &lt;td&gt;&#xA;                &lt;h1&gt;Thinking Elixir 231：漂亮错误和 OTP Raw 模式&lt;/h1&gt;&#xA;&#xA;                &lt;字体颜色=“#aaa”&gt;&#xA;                  &lt;字体颜色=“#aaa”&gt;&#xA;                     2024 年 12 月 3 日&#xA;                  &lt;/font&gt;&#xA;                  &lt;字体颜色=“#aaa”&gt;&#xA;                    经过&#xA;                    &lt;i class=&#34;icon-git_circle&#34;&gt;&lt;/i&gt; Brainlid&#xA;                  &lt;/font&gt;&#xA;                  &lt;字体颜色=“#aaa”&gt;&#xA;                    &#xA;                  &lt;/font&gt;&#xA;                &lt;/font&gt;&#xA;&#xA;                &lt;p&gt;&#xA;&lt;a href=&#34;https://podcast.thinkingelixir.com&#34;&gt;Thinking Elixir&lt;/a&gt; 第 231 集。新闻包括 Dave Lucia 的 PR 使 Elixir 的协议错误更具可读性、OTP 28 引入了用于即时 CLI 输入处理的“原始模式”、Saša Jurić 在 YouTube 上关于定制 Kafka 客户端的“Against the Grain”演讲、Johanna Larsson 列出 Elixir 事件的新网站， DockYard 正式接受本机应用程序合同，强调其 LiveView Native 库已做好准备，而 Brian Cardarella 则调侃道Motion.dev 包装器增强 LiveView 中的动画等等！&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://www.youtube.com/watch?v=lkszZDm2e5Y&#34;&gt;https://www.youtube.com/watch?v=lkszZDm2e5Y&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;                &lt;小时&gt;&#xA;                &lt;small&gt;&lt;a href=&#34;https://elixirstatus.com/p/4h2xg-thinking-elixir-231-pretty-error-and-otp-raw-mode&#34;&gt;在 ElixirStatus 上查看&lt;/a&gt;&lt;/small&gt;&#xA;              &lt;/td&gt;&#xA;            &lt;/tr&gt;&#xA;          &lt;/表&gt;</description>
      <pubDate>Tue, 03 Dec 2024 13:34:26 +0000</pubDate>
    </item>
    <item>
      <title>【Why did the Elixir application keep running despite dependency shutdown?】为什么尽管依赖关系关闭，Elixir 应用程序仍继续运行？</title>
      <link>https://elixirstatus.com/p/IGphN-why-did-the-elixir-application-keep-running-despite-dependency-shutdown</link>
      <description>【&#xA;          &lt;table width=&#34;100%&#34; border=&#34;0&#34;&gt;&#xA;            &lt;tr&gt;&#xA;              &lt;td width=80 valign=top&gt;&#xA;                &lt;img src=&#34;https://elixirstatus.com/rss/avatar/andreyuhai?uid=IGphN&#34; width=&#34;64&#34; height=&#34;64&#34; /&gt;&#xA;              &lt;/td&gt;&#xA;              &lt;td&gt;&#xA;                &lt;h1&gt;Why did the Elixir application keep running despite dependency shutdown?&lt;/h1&gt;&#xA;&#xA;                &lt;font color=&#34;#aaa&#34;&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                     6 Dec 2024&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    by&#xA;                    &lt;i class=&#34;icon-git_circle&#34;&gt;&lt;/i&gt; andreyuhai&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    &#xA;                  &lt;/font&gt;&#xA;                &lt;/font&gt;&#xA;&#xA;                &lt;p&gt;&#xA;Recently, we’ve had an incident with one of our RPC services on production. The root cause was an issue with a PgBouncer instance going down. Although PgBouncer was eventually restored and became operational, our service remained partially functional until the pods were restarted. In this article, I’ll document the root cause of the issue and how we fixed it, effectively answering the question posed in the title.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://burakaymakci.com/why-did-the-elixir-application-keep-running-despite-dependency-shutdown/&#34;&gt;https://burakaymakci.com/why-did-the-elixir-application-keep-running-despite-dependency-shutdown/&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;                &lt;hr&gt;&#xA;                &lt;small&gt;&lt;a href=&#34;https://elixirstatus.com/p/IGphN-why-did-the-elixir-application-keep-running-despite-dependency-shutdown&#34;&gt;View on ElixirStatus&lt;/a&gt;&lt;/small&gt;&#xA;              &lt;/td&gt;&#xA;            &lt;/tr&gt;&#xA;          &lt;/table&gt;&#xA;        】&lt;表格宽度=“100%”边框=“0”&gt;&#xA;            &lt;tr&gt;&#xA;              &lt;td 宽度=80 valign=顶部&gt;&#xA;                &lt;img src=&#34;https://elixirstatus.com/rss/avatar/andreyuhai?uid=IGphN&#34; width=&#34;64&#34; height=&#34;64&#34; /&gt;&#xA;              &lt;/td&gt;&#xA;              &lt;td&gt;&#xA;                &lt;h1&gt;为什么尽管依赖项关闭，Elixir 应用程序仍继续运行？&lt;/h1&gt;&#xA;&#xA;                &lt;字体颜色=“#aaa”&gt;&#xA;                  &lt;字体颜色=“#aaa”&gt;&#xA;                     2024 年 12 月 6 日&#xA;                  &lt;/font&gt;&#xA;                  &lt;字体颜色=“#aaa”&gt;&#xA;                    经过&#xA;                    &lt;i class=&#34;icon-git_circle&#34;&gt;&lt;/i&gt; andreyuhai&#xA;                  &lt;/font&gt;&#xA;                  &lt;字体颜色=“#aaa”&gt;&#xA;                    &#xA;                  &lt;/font&gt;&#xA;                &lt;/font&gt;&#xA;&#xA;                &lt;p&gt;&#xA;最近，我们的一项 RPC 服务在生产环境中发生了一起事件。根本原因是 PgBouncer 实例出现故障。尽管 PgBouncer 最终恢复并开始运行，但我们的服务在 Pod 重新启动之前仍保持部分功能。在本文中，我将记录问题的根本原因以及我们如何解决它，从而有效地回答标题中提出的问题。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://burakaymakci.com/why-did-the-elixir-application-keep-running-despite-dependency-shutdown/&#34;&gt;https://burakaymakci.com/why-did-the-elixir -application-keep-running-dispite-dependency-shutdown/&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;                &lt;小时&gt;&#xA;                &lt;small&gt;&lt;a href=&#34;https://elixirstatus.com/p/IGphN-why-did-the-elixir-application-keep-running-despite-dependency-shutdown&#34;&gt;查看 ElixirStatus&lt;/a&gt;&lt;/小&gt;&#xA;              &lt;/td&gt;&#xA;            &lt;/tr&gt;&#xA;          &lt;/表&gt;</description>
      <pubDate>Fri, 06 Dec 2024 14:47:52 +0000</pubDate>
    </item>
    <item>
      <title>【Advent of Code 2024: Solving Simple Problems in Elixir with AI Assistance】Code 2024 的到来：利用 AI 协助解决 Elixir 中的简单问题</title>
      <link>https://elixirstatus.com/p/jFFZL-advent-of-code-2024-solving-simple-problems-in-elixir-with-ai-assistance</link>
      <description>【&#xA;          &lt;table width=&#34;100%&#34; border=&#34;0&#34;&gt;&#xA;            &lt;tr&gt;&#xA;              &lt;td width=80 valign=top&gt;&#xA;                &lt;img src=&#34;https://elixirstatus.com/rss/avatar/adolfont?uid=jFFZL&#34; width=&#34;64&#34; height=&#34;64&#34; /&gt;&#xA;              &lt;/td&gt;&#xA;              &lt;td&gt;&#xA;                &lt;h1&gt;Advent of Code 2024: Solving Simple Problems in Elixir with AI Assistance&lt;/h1&gt;&#xA;&#xA;                &lt;font color=&#34;#aaa&#34;&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                     5 Dec 2024&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    by&#xA;                    &lt;i class=&#34;icon-git_circle&#34;&gt;&lt;/i&gt; adolfont&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    &#xA;                  &lt;/font&gt;&#xA;                &lt;/font&gt;&#xA;&#xA;                &lt;p&gt;&#xA;The Advent of Code 2024 is here, and it’s an exciting time for programmers worldwide to flex their problem-solving muscles. But what if you could enhance your Elixir skills by using AI tools to tackle these challenges?&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://adolfont.substack.com/p/advent-of-code-2024-solving-simple&#34;&gt;https://adolfont.substack.com/p/advent-of-code-2024-solving-simple&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;                &lt;hr&gt;&#xA;                &lt;small&gt;&lt;a href=&#34;https://elixirstatus.com/p/jFFZL-advent-of-code-2024-solving-simple-problems-in-elixir-with-ai-assistance&#34;&gt;View on ElixirStatus&lt;/a&gt;&lt;/small&gt;&#xA;              &lt;/td&gt;&#xA;            &lt;/tr&gt;&#xA;          &lt;/table&gt;&#xA;        】&lt;表格宽度=“100%”边框=“0”&gt;&#xA;            &lt;tr&gt;&#xA;              &lt;td 宽度=80 valign=顶部&gt;&#xA;                &lt;img src=&#34;https://elixirstatus.com/rss/avatar/adolfont?uid=jFFZL&#34; width=&#34;64&#34; height=&#34;64&#34; /&gt;&#xA;              &lt;/td&gt;&#xA;              &lt;td&gt;&#xA;                &lt;h1&gt;Code 2024 的到来：利用 AI 协助解决 Elixir 中的简单问题&lt;/h1&gt;&#xA;&#xA;                &lt;字体颜色=“#aaa”&gt;&#xA;                  &lt;字体颜色=“#aaa”&gt;&#xA;                     2024 年 12 月 5 日&#xA;                  &lt;/font&gt;&#xA;                  &lt;字体颜色=“#aaa”&gt;&#xA;                    经过&#xA;                    &lt;i class=&#34;icon-git_circle&#34;&gt;&lt;/i&gt; 阿道夫&#xA;                  &lt;/font&gt;&#xA;                  &lt;字体颜色=“#aaa”&gt;&#xA;                    &#xA;                  &lt;/font&gt;&#xA;                &lt;/font&gt;&#xA;&#xA;                &lt;p&gt;&#xA;代码 2024 年即将到来，对于全世界的程序员来说，这是一个展示他们解决问题能力的激动人心的时刻。但是，如果您可以通过使用人工智能工具来应对这些挑战来增强您的 Elixir 技能呢？&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://adolfont.substack.com/p/advent-of-code-2024-solving-simple&#34;&gt;https://adolfont.substack.com/p/advent-of-code-2024-解决简单&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;                &lt;小时&gt;&#xA;                &lt;small&gt;&lt;a href=&#34;https://elixirstatus.com/p/jFFZL-advent-of-code-2024-solving-simple-problems-in-elixir-with-ai-assistance&#34;&gt;查看 ElixirStatus&lt;/一个&gt;&lt;/小&gt;&#xA;              &lt;/td&gt;&#xA;            &lt;/tr&gt;&#xA;          &lt;/表&gt;</description>
      <pubDate>Thu, 05 Dec 2024 16:33:54 +0000</pubDate>
    </item>
    <item>
      <title>【A complete guide to LiveView v1.0.0&#39;s new syntax】LiveView v1.0.0 新语法完整指南</title>
      <link>https://elixirstatus.com/p/7kbiU-a-complete-guide-to-liveview-v100s-new-syntax</link>
      <description>【&#xA;          &lt;table width=&#34;100%&#34; border=&#34;0&#34;&gt;&#xA;            &lt;tr&gt;&#xA;              &lt;td width=80 valign=top&gt;&#xA;                &lt;img src=&#34;https://elixirstatus.com/rss/avatar/TheArrowsmith?uid=7kbiU&#34; width=&#34;64&#34; height=&#34;64&#34; /&gt;&#xA;              &lt;/td&gt;&#xA;              &lt;td&gt;&#xA;                &lt;h1&gt;A complete guide to LiveView v1.0.0&#39;s new syntax&lt;/h1&gt;&#xA;&#xA;                &lt;font color=&#34;#aaa&#34;&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                     6 Dec 2024&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    by&#xA;                    &lt;i class=&#34;icon-git_circle&#34;&gt;&lt;/i&gt; TheArrowsmith&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    &#xA;                  &lt;/font&gt;&#xA;                &lt;/font&gt;&#xA;&#xA;                &lt;p&gt;&#xA;LiveView v1.0.0 is finally here! The biggest change from 0.20 is that there’s a new way to render data in HEEx: &lt;code class=&#34;inline&#34;&gt;{…}&lt;/code&gt; is now available as an alternative to &lt;code class=&#34;inline&#34;&gt;&amp;lt;%= … %&amp;gt;&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;In my new post I explain everything you need to know about this new feature, including some subtler details:&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://arrowsmithlabs.com/blog/phoenix-liveview-v1.0.0-new-curly-brace-syntax&#34;&gt;https://arrowsmithlabs.com/blog/phoenix-liveview-v1.0.0-new-curly-brace-syntax&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;                &lt;hr&gt;&#xA;                &lt;small&gt;&lt;a href=&#34;https://elixirstatus.com/p/7kbiU-a-complete-guide-to-liveview-v100s-new-syntax&#34;&gt;View on ElixirStatus&lt;/a&gt;&lt;/small&gt;&#xA;              &lt;/td&gt;&#xA;            &lt;/tr&gt;&#xA;          &lt;/table&gt;&#xA;        】&lt;表格宽度=“100%”边框=“0”&gt;&#xA;            &lt;tr&gt;&#xA;              &lt;td 宽度=80 valign=顶部&gt;&#xA;                &lt;img src=&#34;https://elixirstatus.com/rss/avatar/TheArrowsmith?uid=7kbiU&#34; width=&#34;64&#34; height=&#34;64&#34; /&gt;&#xA;              &lt;/td&gt;&#xA;              &lt;td&gt;&#xA;                &lt;h1&gt;LiveView v1.0.0 新语法的完整指南&lt;/h1&gt;&#xA;&#xA;                &lt;字体颜色=“#aaa”&gt;&#xA;                  &lt;字体颜色=“#aaa”&gt;&#xA;                     2024 年 12 月 6 日&#xA;                  &lt;/font&gt;&#xA;                  &lt;字体颜色=“#aaa”&gt;&#xA;                    经过&#xA;                    &lt;i class=&#34;icon-git_circle&#34;&gt;&lt;/i&gt; TheArrowsmith&#xA;                  &lt;/font&gt;&#xA;                  &lt;字体颜色=“#aaa”&gt;&#xA;                    &#xA;                  &lt;/font&gt;&#xA;                &lt;/font&gt;&#xA;&#xA;                &lt;p&gt;&#xA;LiveView v1.0.0 终于来了！与 0.20 相比最大的变化是在 HEEx 中呈现数据的新方法：&lt;code class=&#34;inline&#34;&gt;{…}&lt;/code&gt; 现在可作为 &lt;code class=&#34;inline&#34;&gt;&lt;%= 的替代方案…%&gt;&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;在我的新帖子中，我解释了您需要了解的有关此新功能的所有信息，包括一些更微妙的细节：&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://arrowsmithlabs.com/blog/phoenix-liveview-v1.0.0-new-curly-brace-syntax&#34;&gt;https://arrowsmithlabs.com/blog/phoenix-liveview-v1.0.0-新大括号语法&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;                &lt;小时&gt;&#xA;                &lt;small&gt;&lt;a href=&#34;https://elixirstatus.com/p/7kbiU-a-complete-guide-to-liveview-v100s-new-syntax&#34;&gt;在 ElixirStatus 上查看&lt;/a&gt;&lt;/small&gt;&#xA;              &lt;/td&gt;&#xA;            &lt;/tr&gt;&#xA;          &lt;/表&gt;</description>
      <pubDate>Fri, 06 Dec 2024 11:46:27 +0000</pubDate>
    </item>
    <item>
      <title>【Bridging the Gap: Simplifying Live Component Invocation in Phoenix LiveView.】弥合差距：简化 Phoenix LiveView 中的实时组件调用。</title>
      <link>https://elixirstatus.com/p/3vSp9-bridging-the-gap-simplifying-live-component-invocation-in-phoenix-liveview</link>
      <description>【&#xA;          &lt;table width=&#34;100%&#34; border=&#34;0&#34;&gt;&#xA;            &lt;tr&gt;&#xA;              &lt;td width=80 valign=top&gt;&#xA;                &lt;img src=&#34;https://elixirstatus.com/rss/avatar/herminiotorres?uid=3vSp9&#34; width=&#34;64&#34; height=&#34;64&#34; /&gt;&#xA;              &lt;/td&gt;&#xA;              &lt;td&gt;&#xA;                &lt;h1&gt;Bridging the Gap: Simplifying Live Component Invocation in Phoenix LiveView.&lt;/h1&gt;&#xA;&#xA;                &lt;font color=&#34;#aaa&#34;&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                     4 Dec 2024&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    by&#xA;                    &lt;i class=&#34;icon-git_circle&#34;&gt;&lt;/i&gt; herminiotorres&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    &#xA;                  &lt;/font&gt;&#xA;                &lt;/font&gt;&#xA;&#xA;                &lt;p&gt;&#xA;Enhancements in ergonomics enable a more cohesive and developer-friendly approach to invoking &lt;code class=&#34;inline&#34;&gt;live components&lt;/code&gt; compared to &lt;code class=&#34;inline&#34;&gt;function components&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://dev.to/herminiotorres/bridging-the-gap-simplifying-live-component-invocation-in-phoenix-liveview-5boc&#34;&gt;https://dev.to/herminiotorres/bridging-the-gap-simplifying-live-component-invocation-in-phoenix-liveview-5boc&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;                &lt;hr&gt;&#xA;                &lt;small&gt;&lt;a href=&#34;https://elixirstatus.com/p/3vSp9-bridging-the-gap-simplifying-live-component-invocation-in-phoenix-liveview&#34;&gt;View on ElixirStatus&lt;/a&gt;&lt;/small&gt;&#xA;              &lt;/td&gt;&#xA;            &lt;/tr&gt;&#xA;          &lt;/table&gt;&#xA;        】&lt;表格宽度=“100%”边框=“0”&gt;&#xA;            &lt;tr&gt;&#xA;              &lt;td 宽度=80 valign=顶部&gt;&#xA;                &lt;img src=&#34;https://elixirstatus.com/rss/avatar/herminiotorres?uid=3vSp9&#34; width=&#34;64&#34; height=&#34;64&#34; /&gt;&#xA;              &lt;/td&gt;&#xA;              &lt;td&gt;&#xA;                &lt;h1&gt;缩小差距：简化 Phoenix LiveView 中的实时组件调用。&lt;/h1&gt;&#xA;&#xA;                &lt;字体颜色=“#aaa”&gt;&#xA;                  &lt;字体颜色=“#aaa”&gt;&#xA;                     2024 年 12 月 4 日&#xA;                  &lt;/font&gt;&#xA;                  &lt;字体颜色=“#aaa”&gt;&#xA;                    经过&#xA;                    &lt;i class=&#34;icon-git_circle&#34;&gt;&lt;/i&gt; Herminiotorres&#xA;                  &lt;/font&gt;&#xA;                  &lt;字体颜色=“#aaa”&gt;&#xA;                    &#xA;                  &lt;/font&gt;&#xA;                &lt;/font&gt;&#xA;&#xA;                &lt;p&gt;&#xA;与&lt;code class=&#34;inline&#34;&gt;功能组件&lt;/code&gt;相比，人体工程学方面的增强使调用&lt;code class=&#34;inline&#34;&gt;实时组件&lt;/code&gt;的方法更具凝聚力且对开发人员更友好。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://dev.to/herminiotorres/bridging-the-gap-simplifying-live-component-inspiration-in-phoenix-liveview-5boc&#34;&gt;https://dev.to/herminiotorres/bridging- the-gap-simplifying-live-组件-调用-in-phoenix-liveview-5boc&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;                &lt;小时&gt;&#xA;                &lt;small&gt;&lt;a href=&#34;https://elixirstatus.com/p/3vSp9-bridging-the-gap-simplifying-live-component-inspiration-in-phoenix-liveview&#34;&gt;在 ElixirStatus 上查看&lt;/a&gt;&lt;/小&gt;&#xA;              &lt;/td&gt;&#xA;            &lt;/tr&gt;&#xA;          &lt;/表&gt;</description>
      <pubDate>Wed, 04 Dec 2024 15:02:20 +0000</pubDate>
    </item>
    <item>
      <title>【JSONPathEx: A New Elixir Library for Parsing and Evaluating JSONPath Expressions】JSONPathEx：用于解析和评估 JSONPath 表达式的新 Elixir 库</title>
      <link>https://elixirstatus.com/p/XhAiv-jsonpathex-a-new-elixir-library-for-parsing-and-evaluating-jsonpath-expressions</link>
      <description>【&#xA;          &lt;table width=&#34;100%&#34; border=&#34;0&#34;&gt;&#xA;            &lt;tr&gt;&#xA;              &lt;td width=80 valign=top&gt;&#xA;                &lt;img src=&#34;https://elixirstatus.com/rss/avatar/b-erdem?uid=XhAiv&#34; width=&#34;64&#34; height=&#34;64&#34; /&gt;&#xA;              &lt;/td&gt;&#xA;              &lt;td&gt;&#xA;                &lt;h1&gt;JSONPathEx: A New Elixir Library for Parsing and Evaluating JSONPath Expressions&lt;/h1&gt;&#xA;&#xA;                &lt;font color=&#34;#aaa&#34;&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                     3 Dec 2024&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    by&#xA;                    &lt;i class=&#34;icon-git_circle&#34;&gt;&lt;/i&gt; b-erdem&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    &#xA;                  &lt;/font&gt;&#xA;                &lt;/font&gt;&#xA;&#xA;                &lt;p&gt;&#xA;JSONPathEx is an Elixir library designed for parsing and evaluating JSONPath expressions. It provides tools to transform JSONPath syntax into an Abstract Syntax Tree (AST) and evaluate these expressions against JSON data.&#xA;The library supports a variety of JSONPath features, including root selectors, recursive descent, array slicing, filters, and functions like &lt;code class=&#34;inline&#34;&gt;length()&lt;/code&gt;, &lt;code class=&#34;inline&#34;&gt;sum()&lt;/code&gt;, &lt;code class=&#34;inline&#34;&gt;min()&lt;/code&gt;, and &lt;code class=&#34;inline&#34;&gt;max()&lt;/code&gt;. Built with &lt;a href=&#34;https://github.com/dashbitco/nimble_parsec&#34;&gt;NimbleParsec&lt;/a&gt;, JSONPathEx is modular, making it easy to extend or customize.&#xA;The project is open source and available on &lt;a href=&#34;https://github.com/b-erdem/jsonpath_ex&#34;&gt;GitHub&lt;/a&gt; and &lt;a href=&#34;https://hex.pm/packages/jsonpath_ex&#34;&gt;Hex.pm&lt;/a&gt;. Contributions, feedback, and suggestions are welcome!&lt;/p&gt;&#xA;&#xA;                &lt;hr&gt;&#xA;                &lt;small&gt;&lt;a href=&#34;https://elixirstatus.com/p/XhAiv-jsonpathex-a-new-elixir-library-for-parsing-and-evaluating-jsonpath-expressions&#34;&gt;View on ElixirStatus&lt;/a&gt;&lt;/small&gt;&#xA;              &lt;/td&gt;&#xA;            &lt;/tr&gt;&#xA;          &lt;/table&gt;&#xA;        】&lt;表格宽度=“100%”边框=“0”&gt;&#xA;            &lt;tr&gt;&#xA;              &lt;td 宽度=80 valign=顶部&gt;&#xA;                &lt;img src=&#34;https://elixirstatus.com/rss/avatar/b-erdem?uid=XhAiv&#34; width=&#34;64&#34; height=&#34;64&#34; /&gt;&#xA;              &lt;/td&gt;&#xA;              &lt;td&gt;&#xA;                &lt;h1&gt;JSONPathEx：用于解析和评估 JSONPath 表达式的新 Elixir 库&lt;/h1&gt;&#xA;&#xA;                &lt;字体颜色=“#aaa”&gt;&#xA;                  &lt;字体颜色=“#aaa”&gt;&#xA;                     2024 年 12 月 3 日&#xA;                  &lt;/font&gt;&#xA;                  &lt;字体颜色=“#aaa”&gt;&#xA;                    经过&#xA;                    &lt;i class=&#34;icon-git_circle&#34;&gt;&lt;/i&gt; b-erdem&#xA;                  &lt;/font&gt;&#xA;                  &lt;字体颜色=“#aaa”&gt;&#xA;                    &#xA;                  &lt;/font&gt;&#xA;                &lt;/font&gt;&#xA;&#xA;                &lt;p&gt;&#xA;JSONPathEx 是一个 Elixir 库，设计用于解析和评估 JSONPath 表达式。它提供了将 JSONPath 语法转换为抽象语法树 (AST) 并根据 JSON 数据评估这些表达式的工具。&#xA;该库支持各种 JSONPath 功能，包括根选择器、递归下降、数组切片、过滤器以及 &lt;code class=&#34;inline&#34;&gt;length()&lt;/code&gt;、&lt;code class=&#34;inline&#34;&gt;sum( )&lt;/code&gt;、&lt;code class=&#34;inline&#34;&gt;min()&lt;/code&gt; 和 &lt;code class=&#34;inline&#34;&gt;max()&lt;/code&gt;。 JSONPathEx 使用 &lt;a href=&#34;https://github.com/dashbitco/nimble_parsec&#34;&gt;NimbleParsec&lt;/a&gt; 构建，是模块化的，可以轻松扩展或自定义。&#xA;该项目是开源的，可在 &lt;a href=&#34;https://github.com/b-erdem/jsonpath_ex&#34;&gt;GitHub&lt;/a&gt; 和 &lt;a href=&#34;https://hex.pm/packages/jsonpath_ex &#34;&gt;十六进制.pm&lt;/a&gt;。欢迎贡献、反馈和建议！&lt;/p&gt;&#xA;&#xA;                &lt;小时&gt;&#xA;                &lt;small&gt;&lt;a href=&#34;https://elixirstatus.com/p/XhAiv-jsonpathex-a-new-elixir-library-for-parsing-and-evaluating-jsonpath-expressions&#34;&gt;在 ElixirStatus 上查看&lt;/a&gt; &lt;/小&gt;&#xA;              &lt;/td&gt;&#xA;            &lt;/tr&gt;&#xA;          &lt;/表&gt;</description>
      <pubDate>Tue, 03 Dec 2024 12:44:21 +0000</pubDate>
    </item>
    <item>
      <title>【YOLO - Real-Time Object Detection Simplified】YOLO - 简化的实时目标检测</title>
      <link>https://elixirstatus.com/p/5BaGI-yolo---real-time-object-detection-simplified</link>
      <description>【&#xA;          &lt;table width=&#34;100%&#34; border=&#34;0&#34;&gt;&#xA;            &lt;tr&gt;&#xA;              &lt;td width=80 valign=top&gt;&#xA;                &lt;img src=&#34;https://elixirstatus.com/rss/avatar/alvises?uid=5BaGI&#34; width=&#34;64&#34; height=&#34;64&#34; /&gt;&#xA;              &lt;/td&gt;&#xA;              &lt;td&gt;&#xA;                &lt;h1&gt;YOLO - Real-Time Object Detection Simplified&lt;/h1&gt;&#xA;&#xA;                &lt;font color=&#34;#aaa&#34;&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                     6 Dec 2024&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    by&#xA;                    &lt;i class=&#34;icon-git_circle&#34;&gt;&lt;/i&gt; alvises&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    &#xA;                  &lt;/font&gt;&#xA;                &lt;/font&gt;&#xA;&#xA;                &lt;p&gt;&#xA;&lt;a href=&#34;https://github.com/poeticoding/yolo_elixir&#34;&gt;https://github.com/poeticoding/yolo_elixir&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;I’m thrilled to share YOLO, my first Elixir library, designed to make real-time object detection simple and accessible for Elixir developers. Built around the power of YOLOv8, this library lets you detect objects in images or videos with speed and ease.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Here’s what I’ve worked on:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;  &lt;li&gt;&#xA;Fast detections: Just 38ms per image on a MacBook Air M3 with EXLA.  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;Simple API: Load models and detect objects in just two steps.  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;Extensibility: Built for YOLOv8, with support for custom models on the way.  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;Rust-powered NMS: Optional Rust NIF for blazing-fast post-processing.  &lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;                &lt;hr&gt;&#xA;                &lt;small&gt;&lt;a href=&#34;https://elixirstatus.com/p/5BaGI-yolo---real-time-object-detection-simplified&#34;&gt;View on ElixirStatus&lt;/a&gt;&lt;/small&gt;&#xA;              &lt;/td&gt;&#xA;            &lt;/tr&gt;&#xA;          &lt;/table&gt;&#xA;        】&lt;表格宽度=“100%”边框=“0”&gt;&#xA;            &lt;tr&gt;&#xA;              &lt;td 宽度=80 valign=顶部&gt;&#xA;                &lt;img src=&#34;https://elixirstatus.com/rss/avatar/alvises?uid=5BaGI&#34; width=&#34;64&#34; height=&#34;64&#34; /&gt;&#xA;              &lt;/td&gt;&#xA;              &lt;td&gt;&#xA;                &lt;h1&gt;YOLO - 简化的实时目标检测&lt;/h1&gt;&#xA;&#xA;                &lt;字体颜色=“#aaa”&gt;&#xA;                  &lt;字体颜色=“#aaa”&gt;&#xA;                     2024 年 12 月 6 日&#xA;                  &lt;/font&gt;&#xA;                  &lt;字体颜色=“#aaa”&gt;&#xA;                    经过&#xA;                    &lt;i class=&#34;icon-git_circle&#34;&gt;&lt;/i&gt; 阿尔维斯&#xA;                  &lt;/font&gt;&#xA;                  &lt;字体颜色=“#aaa”&gt;&#xA;                    &#xA;                  &lt;/font&gt;&#xA;                &lt;/font&gt;&#xA;&#xA;                &lt;p&gt;&#xA;&lt;a href=&#34;https://github.com/poeticoding/yolo_elixir&#34;&gt;https://github.com/poeticoding/yolo_elixir&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;我很高兴分享 YOLO，我的第一个 Elixir 库，旨在使实时对象检测变得简单且可供 Elixir 开发人员使用。该库基于 YOLOv8 的强大功能构建，可让您快速轻松地检测图像或视频中的对象。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;这是我所做的工作：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;  &lt;li&gt;&#xA;快速检测：在配备 EXLA 的 MacBook Air M3 上，每张图像仅需 38 毫秒。  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;简单的 API：只需两步即可加载模型并检测对象。  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;可扩展性：专为 YOLOv8 构建，即将支持自定义模型。  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;Rust 支持的 NMS：可选 Rust NIF，可实现超快的后处理。  &lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;                &lt;小时&gt;&#xA;                &lt;small&gt;&lt;a href=&#34;https://elixirstatus.com/p/5BaGI-yolo---real-time-object-detection-simplified&#34;&gt;在 ElixirStatus 上查看&lt;/a&gt;&lt;/small&gt;&#xA;              &lt;/td&gt;&#xA;            &lt;/tr&gt;&#xA;          &lt;/表&gt;</description>
      <pubDate>Fri, 06 Dec 2024 20:19:03 +0000</pubDate>
    </item>
    <item>
      <title>【Nerves Meetup】神经聚会</title>
      <link>https://elixirstatus.com/p/XuK8k-nerves-meetup</link>
      <description>【&#xA;          &lt;table width=&#34;100%&#34; border=&#34;0&#34;&gt;&#xA;            &lt;tr&gt;&#xA;              &lt;td width=80 valign=top&gt;&#xA;                &lt;img src=&#34;https://elixirstatus.com/rss/avatar/amclain?uid=XuK8k&#34; width=&#34;64&#34; height=&#34;64&#34; /&gt;&#xA;              &lt;/td&gt;&#xA;              &lt;td&gt;&#xA;                &lt;h1&gt;Nerves Meetup&lt;/h1&gt;&#xA;&#xA;                &lt;font color=&#34;#aaa&#34;&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                     7 Dec 2024&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    by&#xA;                    &lt;i class=&#34;icon-git_circle&#34;&gt;&lt;/i&gt; amclain&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    &#xA;                  &lt;/font&gt;&#xA;                &lt;/font&gt;&#xA;&#xA;                &lt;p&gt;&#xA;The next Nerves online meetup is Wednesday, December 18th! This is a social gathering to hang out with other Elixir/embedded engineers, show off your project, and get help from the community! RSVP here:&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://www.meetup.com/nerves/events/298253647&#34;&gt;https://www.meetup.com/nerves/events/298253647&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;                &lt;hr&gt;&#xA;                &lt;small&gt;&lt;a href=&#34;https://elixirstatus.com/p/XuK8k-nerves-meetup&#34;&gt;View on ElixirStatus&lt;/a&gt;&lt;/small&gt;&#xA;              &lt;/td&gt;&#xA;            &lt;/tr&gt;&#xA;          &lt;/table&gt;&#xA;        】&lt;表格宽度=“100%”边框=“0”&gt;&#xA;            &lt;tr&gt;&#xA;              &lt;td 宽度=80 valign=顶部&gt;&#xA;                &lt;img src=&#34;https://elixirstatus.com/rss/avatar/amclain?uid=XuK8k&#34; width=&#34;64&#34; height=&#34;64&#34; /&gt;&#xA;              &lt;/td&gt;&#xA;              &lt;td&gt;&#xA;                &lt;h1&gt;神经聚会&lt;/h1&gt;&#xA;&#xA;                &lt;字体颜色=“#aaa”&gt;&#xA;                  &lt;字体颜色=“#aaa”&gt;&#xA;                     2024 年 12 月 7 日&#xA;                  &lt;/font&gt;&#xA;                  &lt;字体颜色=“#aaa”&gt;&#xA;                    经过&#xA;                    &lt;i class=&#34;icon-git_circle&#34;&gt;&lt;/i&gt; amclain&#xA;                  &lt;/font&gt;&#xA;                  &lt;字体颜色=“#aaa”&gt;&#xA;                    &#xA;                  &lt;/font&gt;&#xA;                &lt;/font&gt;&#xA;&#xA;                &lt;p&gt;&#xA;下一次 Nerves 在线聚会将于 12 月 18 日星期三举行！这是一个与其他 Elixir/嵌入式工程师一起出去玩、展示您的项目并从社区获得帮助的社交聚会！在此回复：&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://www.meetup.com/nerves/events/298253647&#34;&gt;https://www.meetup.com/nerves/events/298253647&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;                &lt;小时&gt;&#xA;                &lt;small&gt;&lt;a href=&#34;https://elixirstatus.com/p/XuK8k-nerves-meetup&#34;&gt;在 ElixirStatus 上查看&lt;/a&gt;&lt;/small&gt;&#xA;              &lt;/td&gt;&#xA;            &lt;/tr&gt;&#xA;          &lt;/表&gt;</description>
      <pubDate>Sat, 07 Dec 2024 20:57:26 +0000</pubDate>
    </item>
    <item>
      <title>【Elixir Streams |&amp;gt; Using GenServer.reply/2 to synchronize the asynchronous】Elixir Streams |&gt; 使用 GenServer.reply/2 同步异步</title>
      <link>https://elixirstatus.com/p/dQBtk-elixir-streams--using-genserverreply2-to-synchronize-the-asynchronous</link>
      <description>【&#xA;          &lt;table width=&#34;100%&#34; border=&#34;0&#34;&gt;&#xA;            &lt;tr&gt;&#xA;              &lt;td width=80 valign=top&gt;&#xA;                &lt;img src=&#34;https://elixirstatus.com/rss/avatar/germsvel?uid=dQBtk&#34; width=&#34;64&#34; height=&#34;64&#34; /&gt;&#xA;              &lt;/td&gt;&#xA;              &lt;td&gt;&#xA;                &lt;h1&gt;Elixir Streams |&amp;gt; Using GenServer.reply/2 to synchronize the asynchronous&lt;/h1&gt;&#xA;&#xA;                &lt;font color=&#34;#aaa&#34;&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                     5 Dec 2024&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    by&#xA;                    &lt;i class=&#34;icon-git_circle&#34;&gt;&lt;/i&gt; germsvel&#xA;                  &lt;/font&gt;&#xA;                  &lt;font color=&#34;#aaa&#34;&gt;&#xA;                    &#xA;                  &lt;/font&gt;&#xA;                &lt;/font&gt;&#xA;&#xA;                &lt;p&gt;&#xA;I was trying to explain this the other day. So, naturally, I made a video. 😄&lt;/p&gt;&#xA;&lt;p&gt;&#xA;How do we coordinate a message that runs through a GenServer’s  &lt;code class=&#34;inline&#34;&gt;handle_call/3&lt;/code&gt; and &lt;code class=&#34;inline&#34;&gt;handle_info/2&lt;/code&gt; in a way that makes it seem synchronous from  the caller’s perspective?   &lt;/p&gt;&#xA;&lt;p&gt;&#xA;The secret: &lt;code class=&#34;inline&#34;&gt;GenServer.reply/2&lt;/code&gt;  &lt;/p&gt;&#xA;&lt;p&gt;&#xA;Check out this short video! 👇&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://www.elixirstreams.com/tips/sync-the-async-within-a-genserver&#34;&gt;https://www.elixirstreams.com/tips/sync-the-async-within-a-genserver&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;                &lt;hr&gt;&#xA;                &lt;small&gt;&lt;a href=&#34;https://elixirstatus.com/p/dQBtk-elixir-streams--using-genserverreply2-to-synchronize-the-asynchronous&#34;&gt;View on ElixirStatus&lt;/a&gt;&lt;/small&gt;&#xA;              &lt;/td&gt;&#xA;            &lt;/tr&gt;&#xA;          &lt;/table&gt;&#xA;        】&lt;表格宽度=“100%”边框=“0”&gt;&#xA;            &lt;tr&gt;&#xA;              &lt;td 宽度=80 valign=顶部&gt;&#xA;                &lt;img src=&#34;https://elixirstatus.com/rss/avatar/germsvel?uid=dQBtk&#34; width=&#34;64&#34; height=&#34;64&#34; /&gt;&#xA;              &lt;/td&gt;&#xA;              &lt;td&gt;&#xA;                &lt;h1&gt;Elixir Streams |&gt; 使用 GenServer.reply/2 同步异步&lt;/h1&gt;&#xA;&#xA;                &lt;字体颜色=“#aaa”&gt;&#xA;                  &lt;字体颜色=“#aaa”&gt;&#xA;                     2024 年 12 月 5 日&#xA;                  &lt;/font&gt;&#xA;                  &lt;字体颜色=“#aaa”&gt;&#xA;                    经过&#xA;                    &lt;i class=&#34;icon-git_circle&#34;&gt;&lt;/i&gt; 细菌速度&#xA;                  &lt;/font&gt;&#xA;                  &lt;字体颜色=“#aaa”&gt;&#xA;                    &#xA;                  &lt;/font&gt;&#xA;                &lt;/font&gt;&#xA;&#xA;                &lt;p&gt;&#xA;前几天我试图解释这一点。所以，很自然地，我制作了一个视频。 😄&lt;/p&gt;&#xA;&lt;p&gt;&#xA;我们如何协调通过 GenServer 的 &lt;code class=&#34;inline&#34;&gt;handle_call/3&lt;/code&gt; 和 &lt;code class=&#34;inline&#34;&gt;handle_info/2&lt;/code&gt; 运行的消息，使其看起来同步从调用者的角度来看？   &lt;/p&gt;&#xA;&lt;p&gt;&#xA;秘密： &lt;code class=&#34;inline&#34;&gt;GenServer.reply/2&lt;/code&gt; &lt;/p&gt;&#xA;&lt;p&gt;&#xA;看看这个短视频！ 👇&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://www.elixirstreams.com/tips/sync-the-async-within-a-genserver&#34;&gt;https://www.elixirstreams.com/tips/sync-the-async-within- a-genserver&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;                &lt;小时&gt;&#xA;                &lt;small&gt;&lt;a href=&#34;https://elixirstatus.com/p/dQBtk-elixir-streams--using-genserverreply2-to-synchronize-the-asynchronous&#34;&gt;查看 ElixirStatus&lt;/a&gt;&lt;/small&gt;&#xA;              &lt;/td&gt;&#xA;            &lt;/tr&gt;&#xA;          &lt;/表&gt;</description>
      <pubDate>Thu, 05 Dec 2024 13:58:25 +0000</pubDate>
    </item>
  </channel>
</rss>