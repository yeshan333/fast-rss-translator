<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Grafana Labs blog on Grafana Labs</title>
    <link>/blog/index.xml</link>
    <description>Recent content in Grafana Labs blog on Grafana Labs</description>
    <item>
      <title>【Secure credential storage for your observability stack: Introducing secrets management in Grafana Cloud】Secure credential storage for your observability stack: Introducing secrets management in Grafana Cloud</title>
      <link>https://grafana.com/blog/2025/08/20/secure-credential-storage-for-your-observability-stack-introducing-secrets-management-in-grafana-cloud/</link>
      <description>【&lt;p&gt;The more your infrastructure grows, the more likely you are to face a familiar challenge: where to safely store the API keys, passwords, and tokens that power your observability stack. &lt;/p&gt;&#xA;&lt;p&gt;Unfortunately, a common response to this dilemma is to scatter credentials across configurations, making security and management of secrets increasingly complex. The problem is only compounded by modern observability setups that involve distributed services, API integrations, and collaborative teams—all requiring secure access to sensitive information.&lt;/p&gt;&#xA;&lt;p&gt;That&amp;rsquo;s why we&amp;rsquo;re launching secrets management in Grafana Cloud. Currently in public preview, it&amp;rsquo;s designed to be the foundation for securing all your credentials in Grafana. And we aren&amp;rsquo;t just adding another feature with secrets management; we&amp;rsquo;re solving the credential management problem that every growing team faces by delivering these key benefits:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Centralized credential storage with enterprise-grade encryption&lt;/li&gt;&#xA;&lt;li&gt;Reference-based secrets access &lt;/li&gt;&#xA;&lt;li&gt;Granular access controls&lt;/li&gt;&#xA;&lt;li&gt;Complete audit trail of secret usage&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;In this blog, we&amp;rsquo;ll show you how we&amp;rsquo;re starting this rollout with Grafana Cloud Synthetic Monitoring and how you can implement it today. We&amp;rsquo;ll also give you a look behind the scenes to show how we&amp;rsquo;re developing this new functionality.&lt;/p&gt;&#xA;&lt;h2 id=&#34;secrets-management-in-action-public-preview-for-synthetic-monitoring&#34;&gt;Secrets management in action: public preview for Synthetic Monitoring&lt;/h2&gt;&#xA;&lt;p&gt;The first product in Grafana Cloud to integrate with our new secrets manager is &lt;a href=&#34;/products/cloud/synthetic-monitoring/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Synthetic Monitoring&lt;/a&gt;. This has been a highly requested feature that delivers clear and immediate value for users, so let&amp;rsquo;s look at how this changes what you can do in Synthetic Monitoring.  &lt;/p&gt;&#xA;&lt;h3 id=&#34;the-old-way-embedded-credentials&#34;&gt;The old way: embedded credentials   &lt;/h3&gt;&#xA;&lt;p&gt;If you&amp;rsquo;re running Synthetic Monitoring checks, you&amp;rsquo;ve likely faced this scenario:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;const bearerToken = &amp;#39;abc123-hardcoded-token-visible-to-everyone&amp;#39;;&#xA;const response = http.get(&amp;#39;https://api.example.com/data&amp;#39;, {&#xA;headers: { &amp;#39;Authorization&amp;#39;: `Bearer ${bearerToken}` }&#xA;});&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;There are several problems with this approach:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Credentials are visible in the checks.&lt;/li&gt;&#xA;&lt;li&gt;Team collaboration requires sharing sensitive values.&lt;/li&gt;&#xA;&lt;li&gt;There’s no audit trail of credential usage.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;the-new-way-secret-references&#34;&gt;The new way: secret references&lt;/h3&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;const bearerToken = await secrets.get(&amp;#39;my-token&amp;#39;);&#xA;const response = http.get(&amp;#39;https://api.example.com/data&amp;#39;, {&#xA;headers: { &amp;#39;Authorization&amp;#39;: `Bearer ${bearerToken}` }&#xA;});&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;With secrets management in Grafana Cloud, a user can store values in their stack, then anyone can configure a check that references those values by name (e.g., in an API request header). This was inspired by how &lt;a href=&#34;https://docs.github.com/en/actions/how-tos/write-workflows/choose-what-workflows-do/use-secrets&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;GitHub&lt;/a&gt; handles secrets in CI actions. &lt;/p&gt;&#xA;&lt;p&gt;There are several benefits to this approach:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Sensitive values are stored securely and separately.&lt;/li&gt;&#xA;&lt;li&gt;Multiple checks can reference the same secret.&lt;/li&gt;&#xA;&lt;li&gt;You get easy credential rotation without touching individual checks.&lt;/li&gt;&#xA;&lt;li&gt;There&amp;rsquo;s a full audit trail of which service accessed what and when.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;try-it-today&#34;&gt;Try it today&lt;/h3&gt;&#xA;&lt;p&gt;As we mentioned, secrets management is available now in public preview for all Grafana Cloud customers. Here&amp;rsquo;s how to get started:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Access the feature&lt;/strong&gt;: Log into your Grafana Cloud instance and navigate to &lt;strong&gt;Testing &amp;amp; synthetics&lt;/strong&gt; &amp;gt; &lt;strong&gt;Synthetics&lt;/strong&gt; &amp;gt; &lt;strong&gt;Config&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Create your first secret&lt;/strong&gt;: Start with an API key or credential you&amp;rsquo;re currently using in Synthetic Monitoring&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Add the new secrets module to your check&lt;/strong&gt;: &lt;code&gt;import secrets from ‘k6/secrets’;&lt;/code&gt; &lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Update your checks&lt;/strong&gt;: Replace hardcoded values with secret references using &lt;code&gt;secrets.get(&#39;my-secret&#39;)&lt;/code&gt; syntax&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;You can see how the process works in the UI below. For more details, check out our &lt;a href=&#34;/docs/grafana-cloud/testing/synthetic-monitoring/create-checks/manage-secrets/&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link captioned&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x869/d0a6feeaf9/secrets-management-config.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload mb-0&#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x869/d0a6feeaf9/secrets-management-config.png&#34;alt=&#34;User creates a secret&#34;title=&#34;User creates a secret&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x869/d0a6feeaf9/secrets-management-config.png&#34;&#xA;alt=&#34;User creates a secret&#34;title=&#34;User creates a secret&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;figcaption class=&#34;w-100p caption text-gray-13 &#34;&gt;User creates a secret&lt;/figcaption&gt;&lt;/a&gt;&lt;/figure&gt; &lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link captioned&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x1641/e5c813de5c/health-check-editing.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload mb-0&#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x1641/e5c813de5c/health-check-editing.png&#34;alt=&#34;User references the secret from a scripted check&#34;title=&#34;User references the secret from a scripted check&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x1641/e5c813de5c/health-check-editing.png&#34;&#xA;alt=&#34;User references the secret from a scripted check&#34;title=&#34;User references the secret from a scripted check&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;figcaption class=&#34;w-100p caption text-gray-13 &#34;&gt;User references the secret from a scripted check&lt;/figcaption&gt;&lt;/a&gt;&lt;/figure&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;how-we-built-this-securely-the-technical-foundation&#34;&gt;How we built this securely: the technical foundation&lt;/h2&gt;&#xA;&lt;p&gt;Building a secrets manager for Grafana Cloud required rethinking security from the ground up. Here&amp;rsquo;s how we designed it to protect your most sensitive data.&lt;/p&gt;&#xA;&lt;h3 id=&#34;encryption-process&#34;&gt;Encryption process&lt;/h3&gt;&#xA;&lt;p&gt;We encrypt secrets with &lt;a href=&#34;/docs/grafana/latest/setup-grafana/configure-security/configure-database-encryption/#envelope-encryption&#34;&gt;envelope encryption&lt;/a&gt; so that they are protected at rest. Envelope encryption uses randomly generated data keys to encrypt secrets using an AES-GCM cipher, then encrypts those data keys with a root key before storing them. &lt;/p&gt;&#xA;&lt;p&gt;This obfuscates the data and spreads the decryption keys around, making successful attacks harder. Grafana Cloud supports envelope encryption using Key Management Services (KMS) in AWS, Google Cloud, and Microsoft Azure, as well as with Hashicorp Vault or a self-managed key. &lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link captioned&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1503x828/e131c9d88b/secrets-management-diagram.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload mb-0&#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1503x828/e131c9d88b/secrets-management-diagram.png&#34;alt=&#34;Simple visualization of envelope encryption&#34;title=&#34;Simple visualization of envelope encryption&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1503x828/e131c9d88b/secrets-management-diagram.png&#34;&#xA;alt=&#34;Simple visualization of envelope encryption&#34;title=&#34;Simple visualization of envelope encryption&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;figcaption class=&#34;w-100p caption text-gray-13 &#34;&gt;Simple visualization of envelope encryption&lt;/figcaption&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;h3 id=&#34;our-security-principles&#34;&gt;Our security principles&lt;/h3&gt;&#xA;&lt;p&gt;Encryption is just the beginning. We built secrets management in Grafana Cloud around core security principles that protect your data while making the system easier to use and manage.&lt;/p&gt;&#xA;&lt;h4 id=&#34;unified-api-and-storage&#34;&gt;Unified API and storage&lt;/h4&gt;&#xA;&lt;p&gt;In collaboration with our Application Security team, we designed a central secrets repository that maintains the highest security standards across all services. Services can use secrets without implementing their own envelope encryption or handling secret rotation and re-encryption. Secrets management in Grafana Cloud handles all of this automatically.&lt;/p&gt;&#xA;&lt;h4 id=&#34;metadata-separation&#34;&gt;Metadata separation&lt;/h4&gt;&#xA;&lt;p&gt;Secret values are stored completely separately from metadata such as names and descriptions. This enables team collaboration and secret reuse without ever exposing sensitive data.&lt;/p&gt;&#xA;&lt;h4 id=&#34;secrets-can-only-be-decrypted-by-internal-services&#34;&gt;Secrets can only be decrypted by internal services&lt;/h4&gt;&#xA;&lt;p&gt;Users cannot access the sensitive payload. All services making decryption requests are rigorously vetted and validated for authenticity, permissions, and explicit access grants.&lt;/p&gt;&#xA;&lt;h4 id=&#34;adherence-to-encryption-best-practices&#34;&gt;Adherence to encryption best practices&lt;/h4&gt;&#xA;&lt;p&gt;We continue to protect secrets with envelope encryption, including using popular third-party encryption services such as HashiCorp Vault and AWS Secrets Manager. Encryption keys are regularly rotated and all interactions are audited.&lt;/p&gt;&#xA;&lt;h4 id=&#34;observable&#34;&gt;Observable&lt;/h4&gt;&#xA;&lt;p&gt;At Grafana Lab, it is a core part of our technical strategy to dogfood our own observability products. As such, secrets management in Grafana Cloud was instrumented for &lt;a href=&#34;/blog/2018/08/02/the-red-method-how-to-instrument-your-services/&#34;&gt;RED Method&lt;/a&gt; analysis using logs, traces, and metrics to detect any potential issues. &lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; For more information on how we maintains high standards of data privacy and security, check out our &lt;a href=&#34;/legal/security-compliance/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;security compliance page&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;going-beyond-synthetic-monitoring&#34;&gt;Going beyond Synthetic Monitoring&lt;/h2&gt;&#xA;&lt;p&gt;Synthetic Monitoring is just the beginning for secrets management in Grafana Cloud. We&amp;rsquo;re already working on exciting expansions.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Third-party secret stores&lt;/strong&gt;: Connect your existing HashiCorp Vault, AWS Secrets Manager, Google Cloud Secret Manager, or Azure Key Vault to Grafana Cloud.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Data source credentials&lt;/strong&gt;: Integrate data sources with secrets management in Grafana Cloud and reference secrets stored in your third‑party secret store.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Grafana Cloud k6 integration&lt;/strong&gt;: Reference secrets directly in your k6 scripts without embedding credentials in code.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;building-trust-through-security&#34;&gt;Building trust through security&lt;/h2&gt;&#xA;&lt;p&gt;At Grafana Labs, we understand that secrets are at the core of trust between us and our users. With secrets management in Grafana Cloud, we&amp;rsquo;re not just solving today&amp;rsquo;s credential management challenges—we&amp;rsquo;re building the foundation for secure, scalable secrets management that will grow with your observability needs.&lt;/p&gt;&#xA;&lt;p&gt;This represents a significant investment in security infrastructure that will enable new capabilities across the entire Grafana ecosystem. From Synthetic Monitoring to data sources to future integrations we haven&amp;rsquo;t even imagined yet, you&amp;rsquo;ll have a secure, auditable way to manage the credentials that power your observability stack.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;/products/cloud/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Cloud&lt;/a&gt;&lt;/em&gt; &lt;em&gt;is the easiest way to get started with metrics, logs, traces, dashboards, and more. We have a generous forever-free tier and plans for every use case.&lt;/em&gt; &lt;em&gt;&lt;a href=&#34;/auth/sign-up/create-user/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Sign up for free now!&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;】&lt;p&gt;The more your infrastructure grows, the more likely you are to face a familiar challenge: where to safely store the API keys, passwords, and tokens that power your observability stack. &lt;/p&gt;&#xA;&lt;p&gt;Unfortunately, a common response to this dilemma is to scatter credentials across configurations, making security and management of secrets increasingly complex. The problem is only compounded by modern observability setups that involve distributed services, API integrations, and collaborative teams—all requiring secure access to sensitive information.&lt;/p&gt;&#xA;&lt;p&gt;That&amp;rsquo;s why we&amp;rsquo;re launching secrets management in Grafana Cloud. Currently in public preview, it&amp;rsquo;s designed to be the foundation for securing all your credentials in Grafana. And we aren&amp;rsquo;t just adding another feature with secrets management; we&amp;rsquo;re solving the credential management problem that every growing team faces by delivering these key benefits:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Centralized credential storage with enterprise-grade encryption&lt;/li&gt;&#xA;&lt;li&gt;Reference-based secrets access &lt;/li&gt;&#xA;&lt;li&gt;Granular access controls&lt;/li&gt;&#xA;&lt;li&gt;Complete audit trail of secret usage&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;In this blog, we&amp;rsquo;ll show you how we&amp;rsquo;re starting this rollout with Grafana Cloud Synthetic Monitoring and how you can implement it today. We&amp;rsquo;ll also give you a look behind the scenes to show how we&amp;rsquo;re developing this new functionality.&lt;/p&gt;&#xA;&lt;h2 id=&#34;secrets-management-in-action-public-preview-for-synthetic-monitoring&#34;&gt;Secrets management in action: public preview for Synthetic Monitoring&lt;/h2&gt;&#xA;&lt;p&gt;The first product in Grafana Cloud to integrate with our new secrets manager is &lt;a href=&#34;/products/cloud/synthetic-monitoring/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Synthetic Monitoring&lt;/a&gt;. This has been a highly requested feature that delivers clear and immediate value for users, so let&amp;rsquo;s look at how this changes what you can do in Synthetic Monitoring.  &lt;/p&gt;&#xA;&lt;h3 id=&#34;the-old-way-embedded-credentials&#34;&gt;The old way: embedded credentials   &lt;/h3&gt;&#xA;&lt;p&gt;If you&amp;rsquo;re running Synthetic Monitoring checks, you&amp;rsquo;ve likely faced this scenario:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;const bearerToken = &amp;#39;abc123-hardcoded-token-visible-to-everyone&amp;#39;;&#xA;const response = http.get(&amp;#39;https://api.example.com/data&amp;#39;, {&#xA;headers: { &amp;#39;Authorization&amp;#39;: `Bearer ${bearerToken}` }&#xA;});&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;There are several problems with this approach:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Credentials are visible in the checks.&lt;/li&gt;&#xA;&lt;li&gt;Team collaboration requires sharing sensitive values.&lt;/li&gt;&#xA;&lt;li&gt;There’s no audit trail of credential usage.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;the-new-way-secret-references&#34;&gt;The new way: secret references&lt;/h3&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;const bearerToken = await secrets.get(&amp;#39;my-token&amp;#39;);&#xA;const response = http.get(&amp;#39;https://api.example.com/data&amp;#39;, {&#xA;headers: { &amp;#39;Authorization&amp;#39;: `Bearer ${bearerToken}` }&#xA;});&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;With secrets management in Grafana Cloud, a user can store values in their stack, then anyone can configure a check that references those values by name (e.g., in an API request header). This was inspired by how &lt;a href=&#34;https://docs.github.com/en/actions/how-tos/write-workflows/choose-what-workflows-do/use-secrets&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;GitHub&lt;/a&gt; handles secrets in CI actions. &lt;/p&gt;&#xA;&lt;p&gt;There are several benefits to this approach:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Sensitive values are stored securely and separately.&lt;/li&gt;&#xA;&lt;li&gt;Multiple checks can reference the same secret.&lt;/li&gt;&#xA;&lt;li&gt;You get easy credential rotation without touching individual checks.&lt;/li&gt;&#xA;&lt;li&gt;There&amp;rsquo;s a full audit trail of which service accessed what and when.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;try-it-today&#34;&gt;Try it today&lt;/h3&gt;&#xA;&lt;p&gt;As we mentioned, secrets management is available now in public preview for all Grafana Cloud customers. Here&amp;rsquo;s how to get started:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Access the feature&lt;/strong&gt;: Log into your Grafana Cloud instance and navigate to &lt;strong&gt;Testing &amp;amp; synthetics&lt;/strong&gt; &amp;gt; &lt;strong&gt;Synthetics&lt;/strong&gt; &amp;gt; &lt;strong&gt;Config&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Create your first secret&lt;/strong&gt;: Start with an API key or credential you&amp;rsquo;re currently using in Synthetic Monitoring&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Add the new secrets module to your check&lt;/strong&gt;: &lt;code&gt;import secrets from ‘k6/secrets’;&lt;/code&gt; &lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Update your checks&lt;/strong&gt;: Replace hardcoded values with secret references using &lt;code&gt;secrets.get(&#39;my-secret&#39;)&lt;/code&gt; syntax&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;You can see how the process works in the UI below. For more details, check out our &lt;a href=&#34;/docs/grafana-cloud/testing/synthetic-monitoring/create-checks/manage-secrets/&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link captioned&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x869/d0a6feeaf9/secrets-management-config.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload mb-0&#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x869/d0a6feeaf9/secrets-management-config.png&#34;alt=&#34;User creates a secret&#34;title=&#34;User creates a secret&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x869/d0a6feeaf9/secrets-management-config.png&#34;&#xA;alt=&#34;User creates a secret&#34;title=&#34;User creates a secret&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;figcaption class=&#34;w-100p caption text-gray-13 &#34;&gt;User creates a secret&lt;/figcaption&gt;&lt;/a&gt;&lt;/figure&gt; &lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link captioned&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x1641/e5c813de5c/health-check-editing.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload mb-0&#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x1641/e5c813de5c/health-check-editing.png&#34;alt=&#34;User references the secret from a scripted check&#34;title=&#34;User references the secret from a scripted check&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x1641/e5c813de5c/health-check-editing.png&#34;&#xA;alt=&#34;User references the secret from a scripted check&#34;title=&#34;User references the secret from a scripted check&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;figcaption class=&#34;w-100p caption text-gray-13 &#34;&gt;User references the secret from a scripted check&lt;/figcaption&gt;&lt;/a&gt;&lt;/figure&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;how-we-built-this-securely-the-technical-foundation&#34;&gt;How we built this securely: the technical foundation&lt;/h2&gt;&#xA;&lt;p&gt;Building a secrets manager for Grafana Cloud required rethinking security from the ground up. Here&amp;rsquo;s how we designed it to protect your most sensitive data.&lt;/p&gt;&#xA;&lt;h3 id=&#34;encryption-process&#34;&gt;Encryption process&lt;/h3&gt;&#xA;&lt;p&gt;We encrypt secrets with &lt;a href=&#34;/docs/grafana/latest/setup-grafana/configure-security/configure-database-encryption/#envelope-encryption&#34;&gt;envelope encryption&lt;/a&gt; so that they are protected at rest. Envelope encryption uses randomly generated data keys to encrypt secrets using an AES-GCM cipher, then encrypts those data keys with a root key before storing them. &lt;/p&gt;&#xA;&lt;p&gt;This obfuscates the data and spreads the decryption keys around, making successful attacks harder. Grafana Cloud supports envelope encryption using Key Management Services (KMS) in AWS, Google Cloud, and Microsoft Azure, as well as with Hashicorp Vault or a self-managed key. &lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link captioned&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1503x828/e131c9d88b/secrets-management-diagram.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload mb-0&#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1503x828/e131c9d88b/secrets-management-diagram.png&#34;alt=&#34;Simple visualization of envelope encryption&#34;title=&#34;Simple visualization of envelope encryption&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1503x828/e131c9d88b/secrets-management-diagram.png&#34;&#xA;alt=&#34;Simple visualization of envelope encryption&#34;title=&#34;Simple visualization of envelope encryption&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;figcaption class=&#34;w-100p caption text-gray-13 &#34;&gt;Simple visualization of envelope encryption&lt;/figcaption&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;h3 id=&#34;our-security-principles&#34;&gt;Our security principles&lt;/h3&gt;&#xA;&lt;p&gt;Encryption is just the beginning. We built secrets management in Grafana Cloud around core security principles that protect your data while making the system easier to use and manage.&lt;/p&gt;&#xA;&lt;h4 id=&#34;unified-api-and-storage&#34;&gt;Unified API and storage&lt;/h4&gt;&#xA;&lt;p&gt;In collaboration with our Application Security team, we designed a central secrets repository that maintains the highest security standards across all services. Services can use secrets without implementing their own envelope encryption or handling secret rotation and re-encryption. Secrets management in Grafana Cloud handles all of this automatically.&lt;/p&gt;&#xA;&lt;h4 id=&#34;metadata-separation&#34;&gt;Metadata separation&lt;/h4&gt;&#xA;&lt;p&gt;Secret values are stored completely separately from metadata such as names and descriptions. This enables team collaboration and secret reuse without ever exposing sensitive data.&lt;/p&gt;&#xA;&lt;h4 id=&#34;secrets-can-only-be-decrypted-by-internal-services&#34;&gt;Secrets can only be decrypted by internal services&lt;/h4&gt;&#xA;&lt;p&gt;Users cannot access the sensitive payload. All services making decryption requests are rigorously vetted and validated for authenticity, permissions, and explicit access grants.&lt;/p&gt;&#xA;&lt;h4 id=&#34;adherence-to-encryption-best-practices&#34;&gt;Adherence to encryption best practices&lt;/h4&gt;&#xA;&lt;p&gt;We continue to protect secrets with envelope encryption, including using popular third-party encryption services such as HashiCorp Vault and AWS Secrets Manager. Encryption keys are regularly rotated and all interactions are audited.&lt;/p&gt;&#xA;&lt;h4 id=&#34;observable&#34;&gt;Observable&lt;/h4&gt;&#xA;&lt;p&gt;At Grafana Lab, it is a core part of our technical strategy to dogfood our own observability products. As such, secrets management in Grafana Cloud was instrumented for &lt;a href=&#34;/blog/2018/08/02/the-red-method-how-to-instrument-your-services/&#34;&gt;RED Method&lt;/a&gt; analysis using logs, traces, and metrics to detect any potential issues. &lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; For more information on how we maintains high standards of data privacy and security, check out our &lt;a href=&#34;/legal/security-compliance/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;security compliance page&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;going-beyond-synthetic-monitoring&#34;&gt;Going beyond Synthetic Monitoring&lt;/h2&gt;&#xA;&lt;p&gt;Synthetic Monitoring is just the beginning for secrets management in Grafana Cloud. We&amp;rsquo;re already working on exciting expansions.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Third-party secret stores&lt;/strong&gt;: Connect your existing HashiCorp Vault, AWS Secrets Manager, Google Cloud Secret Manager, or Azure Key Vault to Grafana Cloud.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Data source credentials&lt;/strong&gt;: Integrate data sources with secrets management in Grafana Cloud and reference secrets stored in your third‑party secret store.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Grafana Cloud k6 integration&lt;/strong&gt;: Reference secrets directly in your k6 scripts without embedding credentials in code.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;building-trust-through-security&#34;&gt;Building trust through security&lt;/h2&gt;&#xA;&lt;p&gt;At Grafana Labs, we understand that secrets are at the core of trust between us and our users. With secrets management in Grafana Cloud, we&amp;rsquo;re not just solving today&amp;rsquo;s credential management challenges—we&amp;rsquo;re building the foundation for secure, scalable secrets management that will grow with your observability needs.&lt;/p&gt;&#xA;&lt;p&gt;This represents a significant investment in security infrastructure that will enable new capabilities across the entire Grafana ecosystem. From Synthetic Monitoring to data sources to future integrations we haven&amp;rsquo;t even imagined yet, you&amp;rsquo;ll have a secure, auditable way to manage the credentials that power your observability stack.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;/products/cloud/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Cloud&lt;/a&gt;&lt;/em&gt; &lt;em&gt;is the easiest way to get started with metrics, logs, traces, dashboards, and more. We have a generous forever-free tier and plans for every use case.&lt;/em&gt; &lt;em&gt;&lt;a href=&#34;/auth/sign-up/create-user/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Sign up for free now!&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</description>
      <pubDate>Wed, 20 Aug 2025 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【How to monitor Claude usage and costs: introducing the Anthropic integration for Grafana Cloud】How to monitor Claude usage and costs: introducing the Anthropic integration for Grafana Cloud</title>
      <link>https://grafana.com/blog/2025/08/19/how-to-monitor-claude-usage-and-costs-introducing-the-anthropic-integration-for-grafana-cloud/</link>
      <description>【&lt;p&gt;Generative AI is becoming a core part of modern applications, making it essential to monitor and manage how these services are used.&lt;/p&gt;&#xA;&lt;p&gt;That’s why, today, we’re excited to introduce the &lt;a href=&#34;/docs/grafana-cloud/monitor-infrastructure/integrations/integration-reference/integration-anthropic/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Anthropic integration for Grafana Cloud&lt;/a&gt;, a new solution that lets you connect directly to the &lt;a href=&#34;https://docs.anthropic.com/en/api/usage-cost-api&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Anthropic Usage and Cost API&lt;/a&gt; from within Grafana Cloud.&lt;/p&gt;&#xA;&lt;p&gt;By leveraging usage data from &lt;a href=&#34;https://www.anthropic.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Anthropic&lt;/a&gt; — the AI company who developed the Claude large language models (LLMs) — the integration provides real-time insights into both the costs and performance of your Claude LLMs, all within Grafana Cloud. And with a pre-built dashboard and alerts, you can start visualizing and acting on your Claude data right away. &lt;/p&gt;&#xA;&lt;p&gt;In this post, we’ll take a closer look at the key features of the integration and walk through how to get started.&lt;/p&gt;&#xA;&lt;h2 id=&#34;first-why-monitor-your-claude-usage-in-grafana-cloud&#34;&gt;First, why monitor your Claude usage in Grafana Cloud?&lt;/h2&gt;&#xA;&lt;p&gt;As LLM usage grows across your organization, monitoring that usage becomes critical to optimize performance, minimize resource waste, and keep costs in check. Monitoring your Claude usage within Grafana Cloud offers these and other benefits, including:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Accurate billing insights:&lt;/strong&gt; Retrieve actual provider-calculated costs directly from the Usage and Cost API for precise, discrepancy-free billing visibility.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Token usage analysis:&lt;/strong&gt; Visualize how many input and output tokens each model processes to optimize resource allocation and manage quotas.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Model performance analysis:&lt;/strong&gt; Identify which Claude models are used most often to optimize your model selection strategy.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Capacity planning:&lt;/strong&gt; Discover usage trends like peak hours or request growth to aid in future planning.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;how-the-integration-works&#34;&gt;How the integration works&lt;/h2&gt;&#xA;&lt;p&gt;This collector-less integration (built on the &lt;a href=&#34;/docs/grafana-cloud/monitor-infrastructure/integrations/integration-reference/integration-metrics-endpoint/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Cloud Metrics Endpoint&lt;/a&gt; feature) pulls usage data directly from the Usage and Cost API, converts it into Prometheus-format metrics, and stores it in Grafana Cloud. You simply enter your Anthropic Admin API key in the integration settings — no additional agents or exporters required. &lt;/p&gt;&#xA;&lt;p&gt;Once enabled, Grafana Cloud starts to collect metrics automatically and provides a pre-built dashboard and alerts for instant visibility (more on that below). The raw usage data is transformed into two core Prometheus metrics:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;gen_ai_cost&lt;/code&gt;: reports cost per workspace&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;gen_ai_usage_tokens_total&lt;/code&gt;: counts tokens consumed&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Each metric uses Prometheus labeling to capture context: for example, every metric series is labeled by its &lt;strong&gt;job name&lt;/strong&gt; (the scrape configuration name) and &lt;code&gt;gen_ai_anthropic_workspace_id&lt;/code&gt; (the Anthropic workspace). The tokens metric also has &lt;code&gt;gen_ai_response_model&lt;/code&gt; (the Claude model used), &lt;code&gt;gen_ai_token_type&lt;/code&gt; (input vs. output), and &lt;code&gt;gen_ai_anthropic_service_tier&lt;/code&gt; (service tier). Because the Anthropic API directly provides usage data, it already outputs figures in a Prometheus-friendly way, so &lt;strong&gt;no external exporter or agent is needed&lt;/strong&gt;. This makes the integration truly “collector-less”: Grafana Cloud handles the HTTP fetch and parsing behind the scenes.&lt;/p&gt;&#xA;&lt;h2 id=&#34;key-features-dashboards-and-alerts&#34;&gt;Key features: dashboards and alerts&lt;/h2&gt;&#xA;&lt;h3 id=&#34;a-pre-built-dashboard-for-monitoring-usage-and-cost&#34;&gt;A pre-built dashboard for monitoring usage and cost&lt;/h3&gt;&#xA;&lt;p&gt;The Anthropic integration for Grafana Cloud includes a pre-built API usage dashboard that allows you to quickly and easily track token consumption and costs, model usage, and more.&lt;/p&gt;&#xA;&lt;p&gt;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/3024x1724/c77489b67a/anthropic-usage-dashboard_2.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/3024x1724/c77489b67a/anthropic-usage-dashboard_2.png&#34;alt=&#34;Grafana Cloud dashboard displaying token consumption and model usage data with graphs and charts.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/3024x1724/c77489b67a/anthropic-usage-dashboard_2.png&#34;&#xA;alt=&#34;Grafana Cloud dashboard displaying token consumption and model usage data with graphs and charts.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt; Interactive panels display:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Total token cost with threshold indicators&lt;/li&gt;&#xA;&lt;li&gt;Tokens consumed by workspace&lt;/li&gt;&#xA;&lt;li&gt;Model usage distribution&lt;/li&gt;&#xA;&lt;li&gt;Performance metrics with trends over time&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/3024x1726/cca55f846c/anthropic-usage-dashboard_1.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/3024x1726/cca55f846c/anthropic-usage-dashboard_1.png&#34;alt=&#34;Grafana Cloud dashboard displaying Anthropic API usage and costs on interactive panels.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/3024x1726/cca55f846c/anthropic-usage-dashboard_1.png&#34;&#xA;alt=&#34;Grafana Cloud dashboard displaying Anthropic API usage and costs on interactive panels.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt; All panels feature &lt;a href=&#34;/docs/grafana/latest/dashboards/variables/&#34;&gt;template variables&lt;/a&gt;, allowing you to dynamically filter by data source, job name, workspace, and model. &lt;/p&gt;&#xA;&lt;h3 id=&#34;customizable-alert-rules&#34;&gt;Customizable alert rules&lt;/h3&gt;&#xA;&lt;p&gt;The integration also provides three ready-to-use, customizable alerts to stay ahead of unexpected usage and cost spikes:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;AnthropicDailyCostSpike&lt;/strong&gt;: Triggers when the daily cost increases by more than 50% compared to the previous day.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;AnthropicTokenRateAnomaly&lt;/strong&gt;: Alerts when token processing rate exceeds 3x the 7-day average.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;AnthropicHighCostThreshold&lt;/strong&gt;: Fires when total daily cost exceeds $1000.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;setup-guide&#34;&gt;Setup guide&lt;/h2&gt;&#xA;&lt;p&gt;To start using the Anthropic integration for Grafana Cloud, follow these steps:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Access Grafana Cloud&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Log into your Grafana Cloud account. (If you don’t already have one, you can &lt;a href=&#34;/auth/sign-up/create-user/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;sign up&lt;/a&gt; for the Grafana Cloud free tier today.)&lt;/li&gt;&#xA;&lt;li&gt;Navigate to &lt;strong&gt;Connections&lt;/strong&gt; in the left-hand menu.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Configure the integration&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Locate the &lt;strong&gt;Anthropic&lt;/strong&gt; integration tile, and click it to start configuration.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Set up scrape job&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Give your scrape job a descriptive name.&lt;/li&gt;&#xA;&lt;li&gt;Enter your &lt;a href=&#34;https://console.anthropic.com/settings/admin-keys&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Anthropic Admin API key&lt;/a&gt; for authentication. Note: this is different from the standard Message API key, and you need to be an org admin to create one.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Save and install&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Save the job configuration.&lt;/li&gt;&#xA;&lt;li&gt;Grafana Cloud will immediately start scraping metrics.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Click &lt;strong&gt;Install&lt;/strong&gt; to automatically add pre-built dashboards and alerts.&lt;/p&gt;&#xA;&lt;p&gt;That&amp;rsquo;s it! Grafana Cloud will begin collecting your usage metrics every minute.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If metrics aren&amp;rsquo;t appearing, verify your Anthropic Admin API key has the correct permissions and that the API endpoint URL is accessible. Check that your scrape job is running successfully in the Grafana Cloud Connections interface, and ensure your Anthropic workspace IDs match the labels in your metrics.&lt;/p&gt;&#xA;&lt;h2 id=&#34;next-steps-and-how-to-learn-more&#34;&gt;Next steps and how to learn more &lt;/h2&gt;&#xA;&lt;p&gt;After setup, here are a few ways you can leverage the integration beyond the pre-built dashboard and alerts for even deeper visibility into your Claude usage and costs.&lt;/p&gt;&#xA;&lt;h3 id=&#34;optimization-strategies&#34;&gt;Optimization strategies&lt;/h3&gt;&#xA;&lt;p&gt;Use the dashboard insights to identify optimization opportunities based on your usage patterns. For example, you could monitor token efficiency by model to determine which Claude variants work best for specific tasks. &lt;/p&gt;&#xA;&lt;p&gt;You can also track input vs. output token ratios to optimize your prompts for better efficiency, and leverage workspace-level visibility to implement cost allocation and budget controls across different teams or projects.&lt;/p&gt;&#xA;&lt;h3 id=&#34;custom-monitoring&#34;&gt;Custom monitoring&lt;/h3&gt;&#xA;&lt;p&gt;Beyond the pre-built dashboard, you can create custom panels using the core &lt;code&gt;gen_ai_cost&lt;/code&gt; and &lt;code&gt;gen_ai_usage_tokens_total&lt;/code&gt; metrics. Build application-specific views by filtering on your job names, create executive summary reports showing cost trends and usage growth, or set up specialized alerts for specific models or service tiers that matter most to your operations.&lt;/p&gt;&#xA;&lt;p&gt;To learn more about the new Anthropic integration for Grafana Cloud, please check out our &lt;a href=&#34;/docs/grafana-cloud/monitor-infrastructure/integrations/integration-reference/integration-anthropic/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;technical docs&lt;/a&gt;.&lt;/p&gt;】&lt;p&gt;Generative AI is becoming a core part of modern applications, making it essential to monitor and manage how these services are used.&lt;/p&gt;&#xA;&lt;p&gt;That’s why, today, we’re excited to introduce the &lt;a href=&#34;/docs/grafana-cloud/monitor-infrastructure/integrations/integration-reference/integration-anthropic/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Anthropic integration for Grafana Cloud&lt;/a&gt;, a new solution that lets you connect directly to the &lt;a href=&#34;https://docs.anthropic.com/en/api/usage-cost-api&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Anthropic Usage and Cost API&lt;/a&gt; from within Grafana Cloud.&lt;/p&gt;&#xA;&lt;p&gt;By leveraging usage data from &lt;a href=&#34;https://www.anthropic.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Anthropic&lt;/a&gt; — the AI company who developed the Claude large language models (LLMs) — the integration provides real-time insights into both the costs and performance of your Claude LLMs, all within Grafana Cloud. And with a pre-built dashboard and alerts, you can start visualizing and acting on your Claude data right away. &lt;/p&gt;&#xA;&lt;p&gt;In this post, we’ll take a closer look at the key features of the integration and walk through how to get started.&lt;/p&gt;&#xA;&lt;h2 id=&#34;first-why-monitor-your-claude-usage-in-grafana-cloud&#34;&gt;First, why monitor your Claude usage in Grafana Cloud?&lt;/h2&gt;&#xA;&lt;p&gt;As LLM usage grows across your organization, monitoring that usage becomes critical to optimize performance, minimize resource waste, and keep costs in check. Monitoring your Claude usage within Grafana Cloud offers these and other benefits, including:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Accurate billing insights:&lt;/strong&gt; Retrieve actual provider-calculated costs directly from the Usage and Cost API for precise, discrepancy-free billing visibility.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Token usage analysis:&lt;/strong&gt; Visualize how many input and output tokens each model processes to optimize resource allocation and manage quotas.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Model performance analysis:&lt;/strong&gt; Identify which Claude models are used most often to optimize your model selection strategy.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Capacity planning:&lt;/strong&gt; Discover usage trends like peak hours or request growth to aid in future planning.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;how-the-integration-works&#34;&gt;How the integration works&lt;/h2&gt;&#xA;&lt;p&gt;This collector-less integration (built on the &lt;a href=&#34;/docs/grafana-cloud/monitor-infrastructure/integrations/integration-reference/integration-metrics-endpoint/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Cloud Metrics Endpoint&lt;/a&gt; feature) pulls usage data directly from the Usage and Cost API, converts it into Prometheus-format metrics, and stores it in Grafana Cloud. You simply enter your Anthropic Admin API key in the integration settings — no additional agents or exporters required. &lt;/p&gt;&#xA;&lt;p&gt;Once enabled, Grafana Cloud starts to collect metrics automatically and provides a pre-built dashboard and alerts for instant visibility (more on that below). The raw usage data is transformed into two core Prometheus metrics:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;gen_ai_cost&lt;/code&gt;: reports cost per workspace&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;gen_ai_usage_tokens_total&lt;/code&gt;: counts tokens consumed&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Each metric uses Prometheus labeling to capture context: for example, every metric series is labeled by its &lt;strong&gt;job name&lt;/strong&gt; (the scrape configuration name) and &lt;code&gt;gen_ai_anthropic_workspace_id&lt;/code&gt; (the Anthropic workspace). The tokens metric also has &lt;code&gt;gen_ai_response_model&lt;/code&gt; (the Claude model used), &lt;code&gt;gen_ai_token_type&lt;/code&gt; (input vs. output), and &lt;code&gt;gen_ai_anthropic_service_tier&lt;/code&gt; (service tier). Because the Anthropic API directly provides usage data, it already outputs figures in a Prometheus-friendly way, so &lt;strong&gt;no external exporter or agent is needed&lt;/strong&gt;. This makes the integration truly “collector-less”: Grafana Cloud handles the HTTP fetch and parsing behind the scenes.&lt;/p&gt;&#xA;&lt;h2 id=&#34;key-features-dashboards-and-alerts&#34;&gt;Key features: dashboards and alerts&lt;/h2&gt;&#xA;&lt;h3 id=&#34;a-pre-built-dashboard-for-monitoring-usage-and-cost&#34;&gt;A pre-built dashboard for monitoring usage and cost&lt;/h3&gt;&#xA;&lt;p&gt;The Anthropic integration for Grafana Cloud includes a pre-built API usage dashboard that allows you to quickly and easily track token consumption and costs, model usage, and more.&lt;/p&gt;&#xA;&lt;p&gt;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/3024x1724/c77489b67a/anthropic-usage-dashboard_2.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/3024x1724/c77489b67a/anthropic-usage-dashboard_2.png&#34;alt=&#34;Grafana Cloud dashboard displaying token consumption and model usage data with graphs and charts.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/3024x1724/c77489b67a/anthropic-usage-dashboard_2.png&#34;&#xA;alt=&#34;Grafana Cloud dashboard displaying token consumption and model usage data with graphs and charts.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt; Interactive panels display:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Total token cost with threshold indicators&lt;/li&gt;&#xA;&lt;li&gt;Tokens consumed by workspace&lt;/li&gt;&#xA;&lt;li&gt;Model usage distribution&lt;/li&gt;&#xA;&lt;li&gt;Performance metrics with trends over time&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/3024x1726/cca55f846c/anthropic-usage-dashboard_1.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/3024x1726/cca55f846c/anthropic-usage-dashboard_1.png&#34;alt=&#34;Grafana Cloud dashboard displaying Anthropic API usage and costs on interactive panels.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/3024x1726/cca55f846c/anthropic-usage-dashboard_1.png&#34;&#xA;alt=&#34;Grafana Cloud dashboard displaying Anthropic API usage and costs on interactive panels.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt; All panels feature &lt;a href=&#34;/docs/grafana/latest/dashboards/variables/&#34;&gt;template variables&lt;/a&gt;, allowing you to dynamically filter by data source, job name, workspace, and model. &lt;/p&gt;&#xA;&lt;h3 id=&#34;customizable-alert-rules&#34;&gt;Customizable alert rules&lt;/h3&gt;&#xA;&lt;p&gt;The integration also provides three ready-to-use, customizable alerts to stay ahead of unexpected usage and cost spikes:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;AnthropicDailyCostSpike&lt;/strong&gt;: Triggers when the daily cost increases by more than 50% compared to the previous day.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;AnthropicTokenRateAnomaly&lt;/strong&gt;: Alerts when token processing rate exceeds 3x the 7-day average.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;AnthropicHighCostThreshold&lt;/strong&gt;: Fires when total daily cost exceeds $1000.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;setup-guide&#34;&gt;Setup guide&lt;/h2&gt;&#xA;&lt;p&gt;To start using the Anthropic integration for Grafana Cloud, follow these steps:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Access Grafana Cloud&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Log into your Grafana Cloud account. (If you don’t already have one, you can &lt;a href=&#34;/auth/sign-up/create-user/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;sign up&lt;/a&gt; for the Grafana Cloud free tier today.)&lt;/li&gt;&#xA;&lt;li&gt;Navigate to &lt;strong&gt;Connections&lt;/strong&gt; in the left-hand menu.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Configure the integration&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Locate the &lt;strong&gt;Anthropic&lt;/strong&gt; integration tile, and click it to start configuration.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Set up scrape job&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Give your scrape job a descriptive name.&lt;/li&gt;&#xA;&lt;li&gt;Enter your &lt;a href=&#34;https://console.anthropic.com/settings/admin-keys&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Anthropic Admin API key&lt;/a&gt; for authentication. Note: this is different from the standard Message API key, and you need to be an org admin to create one.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Save and install&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Save the job configuration.&lt;/li&gt;&#xA;&lt;li&gt;Grafana Cloud will immediately start scraping metrics.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Click &lt;strong&gt;Install&lt;/strong&gt; to automatically add pre-built dashboards and alerts.&lt;/p&gt;&#xA;&lt;p&gt;That&amp;rsquo;s it! Grafana Cloud will begin collecting your usage metrics every minute.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If metrics aren&amp;rsquo;t appearing, verify your Anthropic Admin API key has the correct permissions and that the API endpoint URL is accessible. Check that your scrape job is running successfully in the Grafana Cloud Connections interface, and ensure your Anthropic workspace IDs match the labels in your metrics.&lt;/p&gt;&#xA;&lt;h2 id=&#34;next-steps-and-how-to-learn-more&#34;&gt;Next steps and how to learn more &lt;/h2&gt;&#xA;&lt;p&gt;After setup, here are a few ways you can leverage the integration beyond the pre-built dashboard and alerts for even deeper visibility into your Claude usage and costs.&lt;/p&gt;&#xA;&lt;h3 id=&#34;optimization-strategies&#34;&gt;Optimization strategies&lt;/h3&gt;&#xA;&lt;p&gt;Use the dashboard insights to identify optimization opportunities based on your usage patterns. For example, you could monitor token efficiency by model to determine which Claude variants work best for specific tasks. &lt;/p&gt;&#xA;&lt;p&gt;You can also track input vs. output token ratios to optimize your prompts for better efficiency, and leverage workspace-level visibility to implement cost allocation and budget controls across different teams or projects.&lt;/p&gt;&#xA;&lt;h3 id=&#34;custom-monitoring&#34;&gt;Custom monitoring&lt;/h3&gt;&#xA;&lt;p&gt;Beyond the pre-built dashboard, you can create custom panels using the core &lt;code&gt;gen_ai_cost&lt;/code&gt; and &lt;code&gt;gen_ai_usage_tokens_total&lt;/code&gt; metrics. Build application-specific views by filtering on your job names, create executive summary reports showing cost trends and usage growth, or set up specialized alerts for specific models or service tiers that matter most to your operations.&lt;/p&gt;&#xA;&lt;p&gt;To learn more about the new Anthropic integration for Grafana Cloud, please check out our &lt;a href=&#34;/docs/grafana-cloud/monitor-infrastructure/integrations/integration-reference/integration-anthropic/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;technical docs&lt;/a&gt;.&lt;/p&gt;</description>
      <pubDate>Tue, 19 Aug 2025 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Integrating Deno and Grafana Cloud: How to observe your JavaScript project with zero added code】Integrating Deno and Grafana Cloud: How to observe your JavaScript project with zero added code</title>
      <link>https://grafana.com/blog/2025/08/15/integrating-deno-and-grafana-cloud-how-to-observe-your-javascript-project-with-zero-added-code/</link>
      <description>【&lt;p&gt;&lt;em&gt;Andy Jiang is a JavaScript engineer with nearly 10 years of experience. He’s interested in making JavaScript and TypeScript simpler to use. He currently works at Deno as a product marketing manager. Outside of work, Andy likes cooking, writing, and playing tennis.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Observability is essential for modern applications. Metrics, logs, and traces allow you to troubleshoot production issues, monitor performance, and understand usage patterns. But in practice, adding observability to your JavaScript server — whether its Node.js or Deno — means dealing with SDKs, manually instrumenting code, or deploying third-party agents.&lt;/p&gt;&#xA;&lt;p&gt;What if you could skip all of that?&lt;/p&gt;&#xA;&lt;p&gt;In this post, we’ll explore how you &lt;em&gt;can&lt;/em&gt; with Deno and Grafana Cloud. We’ll walk through how to set up Deno alongside Grafana Cloud, as well as how to filter logs by request, set up tracing for distributed systems, and get built-in metrics to observe your JavaScript projects. Note: you can find the code from this blog in this &lt;a href=&#34;https://github.com/lambtron/deno-grafana-example&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;observability-without-instrumentation&#34;&gt;&lt;strong&gt;Observability without instrumentation&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://deno.com&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Deno&lt;/a&gt;, a spiritual successor to Node, is a modern, open source, and zero-config toolchain for JavaScript and TypeScript. Deno natively supports TypeScript and web standard APIs, and comes with a &lt;a href=&#34;https://docs.deno.com/runtime/reference/cli/fmt/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;formatter&lt;/a&gt;, &lt;a href=&#34;https://docs.deno.com/runtime/reference/cli/lint/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;linter&lt;/a&gt;, &lt;a href=&#34;https://docs.deno.com/runtime/reference/cli/test/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;test runner&lt;/a&gt;, and more, so you can skip pulling together your tools and dive right into coding.&lt;/p&gt;&#xA;&lt;p&gt;Deno also includes &lt;a href=&#34;https://docs.deno.com/runtime/fundamentals/open_telemetry/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;built-in OpenTelemetry support&lt;/a&gt; for monitoring metrics, logs, and traces. In fact, Deno automatically implements observability into APIs like &lt;code&gt;console.log&lt;/code&gt;, &lt;code&gt;Deno.serve&lt;/code&gt;, &lt;code&gt;node:http&lt;/code&gt;, and &lt;code&gt;fetch&lt;/code&gt;, so you can get immediate telemetry data without any additional work. You can also run Node.js backends using Deno, automatically enabling observability for your Node projects.&lt;/p&gt;&#xA;&lt;p&gt;You can install Deno with the following command:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;curl -fsSL https://deno.land/install.sh | sh&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;To confirm that Deno has installed properly, you can run:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;deno -v&#xA;deno 2.4.3&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;Great! Now that we have Deno installed, let’s take a quick detour and set up a collector service to route all telemetry data to &lt;a href=&#34;/products/cloud/&#34;&gt;Grafana Cloud&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;set-up-grafana-cloud&#34;&gt;&lt;strong&gt;Set up Grafana Cloud&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;We&amp;rsquo;ll use a Docker container to run the &lt;a href=&#34;https://opentelemetry.io/docs/collector/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;OpenTelemetry collector&lt;/a&gt;, which is responsible for receiving telemetry data. In a &lt;code&gt;Dockerfile&lt;/code&gt;, we&amp;rsquo;ll pull from &lt;code&gt;otel/opentelemetry-collector-contrib:latest&lt;/code&gt;, copy the necessary config files into the container, and set the default command that will run when the container starts:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;FROM otel/opentelemetry-collector-contrib:latest&#xA;COPY otel-collector.yml /otel-config.yml&#xA;CMD [&amp;#34;--config&amp;#34;, &amp;#34;/otel-config.yml&amp;#34;]&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;Next, &lt;a href=&#34;/auth/sign-up/create-user/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;create a free Grafana Cloud account&lt;/a&gt;, which will provide you with a Grafana Cloud stack. Click &lt;strong&gt;Details&lt;/strong&gt;, find &lt;strong&gt;OpenTelemetry&lt;/strong&gt;, and then click &lt;strong&gt;Configure&lt;/strong&gt;. This page will provide you with the &lt;strong&gt;OTLP Endpoint&lt;/strong&gt;, &lt;strong&gt;Instance ID&lt;/strong&gt;, and &lt;strong&gt;Password / API token&lt;/strong&gt;, which you&amp;rsquo;ll need to configure your collector.&lt;/p&gt;&#xA;&lt;p&gt;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1123x1335/faeb1d9e13/deno-otlp-endpoint.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1123x1335/faeb1d9e13/deno-otlp-endpoint.png&#34;alt=&#34;Screenshot of Grafana Cloud settings page showing OTLP Endpoint details.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1123x1335/faeb1d9e13/deno-otlp-endpoint.png&#34;&#xA;alt=&#34;Screenshot of Grafana Cloud settings page showing OTLP Endpoint details.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt; Finally, in our &lt;code&gt;otel-collector.yml&lt;/code&gt; file, let’s define how telemetry data should be exported to Grafana Cloud with those aforementioned details:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;receivers:&#xA;otlp:&#xA;protocols:&#xA;grpc:&#xA;endpoint: 0.0.0.0:4317&#xA;http:&#xA;endpoint: 0.0.0.0:4318&#xA;exporters:&#xA;otlphttp/grafana_cloud:&#xA;endpoint: $_YOUR_GRAFANA_OTLP_ENDPOINT&#xA;auth:&#xA;authenticator: basicauth/grafana_cloud&#xA;extensions:&#xA;basicauth/grafana_cloud:&#xA;client_auth:&#xA;username: $_YOUR_INSTANCE_ID&#xA;password: $_YOUR_API_TOKEN&#xA;processors:&#xA;batch:&#xA;service:&#xA;extensions: [basicauth/grafana_cloud]&#xA;pipelines:&#xA;traces:&#xA;receivers: [otlp]&#xA;processors: [batch]&#xA;exporters: [otlphttp/grafana_cloud]&#xA;metrics:&#xA;receivers: [otlp]&#xA;processors: [batch]&#xA;exporters: [otlphttp/grafana_cloud]&#xA;logs:&#xA;receivers: [otlp]&#xA;processors: [batch]&#xA;exporters: [otlphttp/grafana_cloud]&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;Note that you will have to fill in your own information for &lt;code&gt;$_YOUR_GRAFANA_OTLP_ENDPOINT&lt;/code&gt;, &lt;code&gt;$_YOUR_INSTANCE_ID&lt;/code&gt;, and &lt;code&gt;$_YOUR_API_TOKEN&lt;/code&gt;. &lt;/p&gt;&#xA;&lt;p&gt;You can now build and run your collector Docker instance to start collecting your telemetry data:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;docker build -t otel-collector . &amp;amp;&amp;amp; docker run -p 4317:4317 -p 4318:4318 otel-collector&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;&lt;em&gt;For more information on how to set up Grafana Cloud with Deno,&lt;/em&gt; &lt;em&gt;&lt;a href=&#34;https://docs.deno.com/examples/grafana_tutorial/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;please refer to our documentation&lt;/a&gt;__.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;filter-logs-by-request&#34;&gt;&lt;strong&gt;Filter logs by request&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s use this sample project: &lt;a href=&#34;https://github.com/lambtron/deno-grafana-example&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;a simple Express API server&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Many engineers reach for &lt;code&gt;console.log&lt;/code&gt; as the simplest way to debug. But on their own, these logs can be noisy. For instance, can we tell from the following logs whether book 1 or book 2 has a &lt;code&gt;null&lt;/code&gt; name field?&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;[http] GET /api/book/1&#xA;[http] GET /api/book/2&#xA;[db] SELECT * FROM books WHERE id = 1&#xA;[db] SELECT * FROM books WHERE id = 2&#xA;error: Uncaught (in promise) PostgresError: &amp;#39;name&amp;#39; column is null&#xA;throw new PostgresError(`&amp;#39;name&amp;#39; column is null`);&#xA;at query (file:///tmp/main.ts:29:9)&#xA;at queryBook (file:///tmp/main.ts:25:3)&#xA;at handleRequest (file:///tmp/main.ts:21:3)&#xA;at file:///tmp/main.ts:18:1&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;It’s difficult without context, since these logs are from two parallel interwoven requests.&lt;/p&gt;&#xA;&lt;p&gt;However, if we associate each log with its respective request, then we can find the answer:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;[req:1] [http] GET /api/book/1&#xA;[req:2] [http] GET /api/book/2&#xA;[req:1] [db] SELECT * FROM books WHERE id = 1&#xA;[req:2] [db] SELECT * FROM books WHERE id = 2&#xA;[req:1] error: Uncaught (in promise) PostgresError: &amp;#39;name&amp;#39; column is null&#xA;throw new PostgresError(`&amp;#39;name&amp;#39; column is null`);&#xA;at query (file:///tmp/main.ts:29:9)&#xA;at queryBook (file:///tmp/main.ts:25:3)&#xA;at handleRequest (file:///tmp/main.ts:21:3)&#xA;at file:///tmp/main.ts:18:1&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;Turns out, the one missing its &lt;code&gt;name&lt;/code&gt; is book 1!&lt;/p&gt;&#xA;&lt;p&gt;But adjusting your logs to include a unique request ID can be tricky to maintain and scale:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt; app.get(&amp;#34;/api/book/:id&amp;#34;, async (req, res) =&amp;gt; {&#xA;&amp;#43; const requestId = Math.random();&#xA;&amp;#43; console.log(`[req:${requestId}] [http] GET /api/book/${req.params.id}`);&#xA;- console.log(`[http] GET /api/book/${req.params.id}`);&#xA;const id = req.params.id;&#xA;const book = await getBookFromDatabase(requestId, id);&#xA;res.send(book);&#xA;});&#xA;&amp;#43; async function getBookFromDatabase(requestId: number, bookId: string) {&#xA;&amp;#43; console.log(`[req:${requestId}] [db] getBookFromDatabase ${bookId}`);&#xA;- console.log(`[db] getBookFromDatabase ${bookId}`);&#xA;const book = books.get(bookId);&#xA;if (book === undefined) throw new Error(&amp;#34;No book found.&amp;#34;);&#xA;if (!book.author) throw new Error(&amp;#34;Book is missing author.&amp;#34;);&#xA;return book;&#xA;},&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;Deno’s built-in OpenTelemetry support will automatically associate &lt;code&gt;console.log&lt;/code&gt; with the request that calls it. Just start the server using Deno with &lt;code&gt;OTEL_DENO=true&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;OTEL_DENO=true deno -NRE server.js&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h2 id=&#34;connecting-spans-and-traces-by-request&#34;&gt;&lt;strong&gt;Connecting spans and traces by request&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Spans and traces help answer the who, what, when, and duration of exceptions in production. Without any additional code instrumentation, Deno will automatically create a span for each incoming and outgoing HTTP request (this includes &lt;code&gt;fetch&lt;/code&gt;, &lt;code&gt;Deno.serve&lt;/code&gt;, and &lt;code&gt;node:http&lt;/code&gt;):&lt;/p&gt;&#xA;&lt;p&gt;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1213x482/7e0fb81a59/deno-spans-for-http-requests.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1213x482/7e0fb81a59/deno-spans-for-http-requests.png&#34;alt=&#34;Trace visualization of a book API call showing service operations, spans, and execution times.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1213x482/7e0fb81a59/deno-spans-for-http-requests.png&#34;&#xA;alt=&#34;Trace visualization of a book API call showing service operations, spans, and execution times.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt; This trace shows a single GET request, which triggered an authorization check, and two database queries.&lt;/p&gt;&#xA;&lt;p&gt;In order to have the subsequent spans nested correctly under their parent operation in the trace, we can add some additional code that assigns each operation a span ID and passes that value as a Parent Span ID for its children operations.&lt;/p&gt;&#xA;&lt;p&gt;To make that simpler, here&amp;rsquo;s a utility function &lt;code&gt;withSpan&lt;/code&gt; that wraps the OpenTelemetry API function &lt;code&gt;startActiveSpan&lt;/code&gt; and handles the span lifecycle that includes setting the status code and recording exceptions:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;import { Span, SpanStatusCode, trace } from &amp;#34;@opentelemetry/api&amp;#34;;&#xA;const tracer = trace.getTracer(&amp;#34;api&amp;#34;);&#xA;export function withSpan&amp;lt;Args extends unknown[], T&amp;gt;(&#xA;name: string,&#xA;cb: (span: Span, ...args: Args) =&amp;gt; Promise&amp;lt;T&amp;gt;,&#xA;): (...args: Args) =&amp;gt; Promise&amp;lt;T&amp;gt; {&#xA;return (...args: Args) =&amp;gt; {&#xA;return tracer.startActiveSpan(name, async (span) =&amp;gt; {&#xA;try {&#xA;return await cb(span, ...args);&#xA;} catch (err) {&#xA;span.setStatus({ code: SpanStatusCode.ERROR, message: String(err) });&#xA;span.recordException(err as Error);&#xA;throw err;&#xA;} finally {&#xA;span.end();&#xA;}&#xA;});&#xA;};&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;This utility function can now wrap our &lt;code&gt;getBookFromDatabase&lt;/code&gt; function to provide it with the proper span context:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;import { withSpan } from &amp;#34;./utils.ts&amp;#34;;&#xA;export const getBookFromDatabase = withSpan(&#xA;&amp;#34;getBookFromDatabase&amp;#34;,&#xA;async function getBookFromDatabase(span, bookId: string) {&#xA;span.setAttribute(&amp;#34;book_id&amp;#34;, bookId);&#xA;console.log(`[db] getBookFromDatabase ${bookId}`);&#xA;await new Promise((resolve) =&amp;gt; setTimeout(resolve, 300));&#xA;const book = books.get(bookId);&#xA;if (book === undefined) throw new Error(&amp;#34;No book found.&amp;#34;);&#xA;if (!book.author) throw new Error(&amp;#34;Book is missing author.&amp;#34;);&#xA;return book;&#xA;},&#xA;);&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;Now when we send another request to our API and view its trace, we can see the new &lt;code&gt;getBookFromDatabase&lt;/code&gt; as a nested span under the parent HTTP trace:&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x596/f80e2bceaf/deno-nested-span.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x596/f80e2bceaf/deno-nested-span.png&#34;alt=&#34;Trace analysis of a GET request in a book API, showing timing details for operations.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x596/f80e2bceaf/deno-nested-span.png&#34;&#xA;alt=&#34;Trace analysis of a GET request in a book API, showing timing details for operations.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;h2 id=&#34;distributed-tracing-made-easy&#34;&gt;&lt;strong&gt;Distributed tracing made easy&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;But what if a single request has to go through several microservices or edge functions? Tracing in a distributed system is possible, too, but requires propagating the “parent operation” context (the operation that triggers the entire set of operations) from one service to another when making a request.&lt;/p&gt;&#xA;&lt;p&gt;You could implement this logic yourself, where you manually inject the header into the request. Here’s an example of a “trace-aware” &lt;code&gt;fetch&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;import { trace } from &amp;#34;npm:@opentelemetry/api&amp;#34;;&#xA;export function fetchWithTrace(req: Request): Promise&amp;lt;Response&amp;gt; {&#xA;const span = trace.getActiveSpan();&#xA;if (!span) return fetch(req);&#xA;const spanContext = span.spanContext();&#xA;const traceparent = `00-${spanContext.traceId}-${spanContext.spanId}-01`;&#xA;req.headers.set(&amp;#34;traceparent&amp;#34;, traceparent);&#xA;return fetch(req);&#xA;}&#xA;// every call to `fetch` now needs to be replaced with `fetchWithTrace`&#xA;const resp = await fetchWithTrace(new Request(&amp;#34;&amp;lt;https://example.com&amp;gt;&amp;#34;));&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;But that’s not all — on the receiving end, you’ll also need to read back the &lt;code&gt;traceparent&lt;/code&gt; header and create a new span with it. Overall, this is tedious, error prone, and difficult to maintain.&lt;/p&gt;&#xA;&lt;p&gt;Using Deno and its built-in OTel support skips all of this. Deno automatically propagates trace information between services: injecting trace information into outbound requests and reading trace information from incoming requests.&lt;/p&gt;&#xA;&lt;p&gt;Let’s take a look at an example. We’ll run a new script that simply calls the API server with &lt;code&gt;fetch&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;const resp = await fetch(&amp;#34;&amp;lt;https://localhost:8000/api/book/1&amp;gt;&amp;#34;);&#xA;const book = await resp.json();&#xA;console.log(book);&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;We’ll run this with Deno and OTel:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;$ deno run -A --unstable-otel main.ts&#xA;{ id: &amp;#34;1&amp;#34;, title: &amp;#34;The Great Gatsby&amp;#34;, author: &amp;#34;F. Scott Fitzgerald&amp;#34; }&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;In Grafana Cloud, we can see that the latest trace has a new service name:&lt;/p&gt;&#xA;&lt;p&gt;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/998x182/adc8edf06c/deno-table-trace-ids.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/998x182/adc8edf06c/deno-table-trace-ids.png&#34;alt=&#34;A table listing traces with columns for Trace ID, Start time, Service, Name, and Duration.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/998x182/adc8edf06c/deno-table-trace-ids.png&#34;&#xA;alt=&#34;A table listing traces with columns for Trace ID, Start time, Service, Name, and Duration.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt; Clicking on that reveals three spans:&lt;/p&gt;&#xA;&lt;p&gt;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x639/656e2da301/deno-traces-three-spans.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x639/656e2da301/deno-traces-three-spans.png&#34;alt=&#34;&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x639/656e2da301/deno-traces-three-spans.png&#34;&#xA;alt=&#34;&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt; Deno has automatically tracked a single trace across two services. For more complex microservice architectures, you could imagine having deep nests of spans across several services.&lt;/p&gt;&#xA;&lt;h2 id=&#34;built-in-metrics&#34;&gt;&lt;strong&gt;Built-in metrics&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Metrics are a great way to alert you &lt;em&gt;when&lt;/em&gt; to investigate an issue. They are aggregate data that show how frequently something is happening. For example, a common setup for any web server would be to measure the percentage of requests with 500 status codes, and to set an alert when that percentage exceeds 1%.&lt;/p&gt;&#xA;&lt;p&gt;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1038x437/6a54baa9c1/deno-stacked-lines-graph.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1038x437/6a54baa9c1/deno-stacked-lines-graph.png&#34;alt=&#34;A graph with stacked lines showing data trends over time, featuring green, blue, and red areas representing different data sets.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1038x437/6a54baa9c1/deno-stacked-lines-graph.png&#34;&#xA;alt=&#34;A graph with stacked lines showing data trends over time, featuring green, blue, and red areas representing different data sets.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt; If you want more context about the health of your program, Deno will also automatically collect &lt;a href=&#34;https://opentelemetry.io/docs/specs/semconv/runtime/v8js-metrics/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://opentelemetry.io/docs/specs/semconv/runtime/v8js-metrics/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;metrics on V8&lt;/a&gt;, letting you monitor metrics such as &lt;code&gt;v8js_memory_heap_size_bytes&lt;/code&gt; and garbage collection duration.&lt;/p&gt;&#xA;&lt;h2 id=&#34;whats-next&#34;&gt;&lt;strong&gt;What’s next&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;The telemetry Deno provides out of the box is a powerful foundation. With zero effort, your services become visible in metrics, logs, and traces, and they’re all unified and searchable within Grafana Cloud. From here, you can extend your observability with custom spans, events, or domain-specific metrics.&lt;/p&gt;&#xA;&lt;p&gt;For more information, you can refer to &lt;a href=&#34;https://docs.deno.com/runtime/fundamentals/open_telemetry/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Deno&amp;rsquo;s OpenTelemetry documentation&lt;/a&gt;, &lt;a href=&#34;https://docs.deno.com/examples/grafana_tutorial/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;this step-by-step tutorial for setting up Deno and Grafana&lt;/a&gt;, as well as the &lt;a href=&#34;/docs/grafana-cloud/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Cloud documentation&lt;/a&gt;.&lt;/p&gt;】&lt;p&gt;&lt;em&gt;Andy Jiang is a JavaScript engineer with nearly 10 years of experience. He’s interested in making JavaScript and TypeScript simpler to use. He currently works at Deno as a product marketing manager. Outside of work, Andy likes cooking, writing, and playing tennis.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Observability is essential for modern applications. Metrics, logs, and traces allow you to troubleshoot production issues, monitor performance, and understand usage patterns. But in practice, adding observability to your JavaScript server — whether its Node.js or Deno — means dealing with SDKs, manually instrumenting code, or deploying third-party agents.&lt;/p&gt;&#xA;&lt;p&gt;What if you could skip all of that?&lt;/p&gt;&#xA;&lt;p&gt;In this post, we’ll explore how you &lt;em&gt;can&lt;/em&gt; with Deno and Grafana Cloud. We’ll walk through how to set up Deno alongside Grafana Cloud, as well as how to filter logs by request, set up tracing for distributed systems, and get built-in metrics to observe your JavaScript projects. Note: you can find the code from this blog in this &lt;a href=&#34;https://github.com/lambtron/deno-grafana-example&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;observability-without-instrumentation&#34;&gt;&lt;strong&gt;Observability without instrumentation&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://deno.com&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Deno&lt;/a&gt;, a spiritual successor to Node, is a modern, open source, and zero-config toolchain for JavaScript and TypeScript. Deno natively supports TypeScript and web standard APIs, and comes with a &lt;a href=&#34;https://docs.deno.com/runtime/reference/cli/fmt/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;formatter&lt;/a&gt;, &lt;a href=&#34;https://docs.deno.com/runtime/reference/cli/lint/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;linter&lt;/a&gt;, &lt;a href=&#34;https://docs.deno.com/runtime/reference/cli/test/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;test runner&lt;/a&gt;, and more, so you can skip pulling together your tools and dive right into coding.&lt;/p&gt;&#xA;&lt;p&gt;Deno also includes &lt;a href=&#34;https://docs.deno.com/runtime/fundamentals/open_telemetry/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;built-in OpenTelemetry support&lt;/a&gt; for monitoring metrics, logs, and traces. In fact, Deno automatically implements observability into APIs like &lt;code&gt;console.log&lt;/code&gt;, &lt;code&gt;Deno.serve&lt;/code&gt;, &lt;code&gt;node:http&lt;/code&gt;, and &lt;code&gt;fetch&lt;/code&gt;, so you can get immediate telemetry data without any additional work. You can also run Node.js backends using Deno, automatically enabling observability for your Node projects.&lt;/p&gt;&#xA;&lt;p&gt;You can install Deno with the following command:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;curl -fsSL https://deno.land/install.sh | sh&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;To confirm that Deno has installed properly, you can run:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;deno -v&#xA;deno 2.4.3&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;Great! Now that we have Deno installed, let’s take a quick detour and set up a collector service to route all telemetry data to &lt;a href=&#34;/products/cloud/&#34;&gt;Grafana Cloud&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;set-up-grafana-cloud&#34;&gt;&lt;strong&gt;Set up Grafana Cloud&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;We&amp;rsquo;ll use a Docker container to run the &lt;a href=&#34;https://opentelemetry.io/docs/collector/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;OpenTelemetry collector&lt;/a&gt;, which is responsible for receiving telemetry data. In a &lt;code&gt;Dockerfile&lt;/code&gt;, we&amp;rsquo;ll pull from &lt;code&gt;otel/opentelemetry-collector-contrib:latest&lt;/code&gt;, copy the necessary config files into the container, and set the default command that will run when the container starts:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;FROM otel/opentelemetry-collector-contrib:latest&#xA;COPY otel-collector.yml /otel-config.yml&#xA;CMD [&amp;#34;--config&amp;#34;, &amp;#34;/otel-config.yml&amp;#34;]&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;Next, &lt;a href=&#34;/auth/sign-up/create-user/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;create a free Grafana Cloud account&lt;/a&gt;, which will provide you with a Grafana Cloud stack. Click &lt;strong&gt;Details&lt;/strong&gt;, find &lt;strong&gt;OpenTelemetry&lt;/strong&gt;, and then click &lt;strong&gt;Configure&lt;/strong&gt;. This page will provide you with the &lt;strong&gt;OTLP Endpoint&lt;/strong&gt;, &lt;strong&gt;Instance ID&lt;/strong&gt;, and &lt;strong&gt;Password / API token&lt;/strong&gt;, which you&amp;rsquo;ll need to configure your collector.&lt;/p&gt;&#xA;&lt;p&gt;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1123x1335/faeb1d9e13/deno-otlp-endpoint.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1123x1335/faeb1d9e13/deno-otlp-endpoint.png&#34;alt=&#34;Screenshot of Grafana Cloud settings page showing OTLP Endpoint details.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1123x1335/faeb1d9e13/deno-otlp-endpoint.png&#34;&#xA;alt=&#34;Screenshot of Grafana Cloud settings page showing OTLP Endpoint details.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt; Finally, in our &lt;code&gt;otel-collector.yml&lt;/code&gt; file, let’s define how telemetry data should be exported to Grafana Cloud with those aforementioned details:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;receivers:&#xA;otlp:&#xA;protocols:&#xA;grpc:&#xA;endpoint: 0.0.0.0:4317&#xA;http:&#xA;endpoint: 0.0.0.0:4318&#xA;exporters:&#xA;otlphttp/grafana_cloud:&#xA;endpoint: $_YOUR_GRAFANA_OTLP_ENDPOINT&#xA;auth:&#xA;authenticator: basicauth/grafana_cloud&#xA;extensions:&#xA;basicauth/grafana_cloud:&#xA;client_auth:&#xA;username: $_YOUR_INSTANCE_ID&#xA;password: $_YOUR_API_TOKEN&#xA;processors:&#xA;batch:&#xA;service:&#xA;extensions: [basicauth/grafana_cloud]&#xA;pipelines:&#xA;traces:&#xA;receivers: [otlp]&#xA;processors: [batch]&#xA;exporters: [otlphttp/grafana_cloud]&#xA;metrics:&#xA;receivers: [otlp]&#xA;processors: [batch]&#xA;exporters: [otlphttp/grafana_cloud]&#xA;logs:&#xA;receivers: [otlp]&#xA;processors: [batch]&#xA;exporters: [otlphttp/grafana_cloud]&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;Note that you will have to fill in your own information for &lt;code&gt;$_YOUR_GRAFANA_OTLP_ENDPOINT&lt;/code&gt;, &lt;code&gt;$_YOUR_INSTANCE_ID&lt;/code&gt;, and &lt;code&gt;$_YOUR_API_TOKEN&lt;/code&gt;. &lt;/p&gt;&#xA;&lt;p&gt;You can now build and run your collector Docker instance to start collecting your telemetry data:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;docker build -t otel-collector . &amp;amp;&amp;amp; docker run -p 4317:4317 -p 4318:4318 otel-collector&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;&lt;em&gt;For more information on how to set up Grafana Cloud with Deno,&lt;/em&gt; &lt;em&gt;&lt;a href=&#34;https://docs.deno.com/examples/grafana_tutorial/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;please refer to our documentation&lt;/a&gt;__.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;filter-logs-by-request&#34;&gt;&lt;strong&gt;Filter logs by request&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s use this sample project: &lt;a href=&#34;https://github.com/lambtron/deno-grafana-example&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;a simple Express API server&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Many engineers reach for &lt;code&gt;console.log&lt;/code&gt; as the simplest way to debug. But on their own, these logs can be noisy. For instance, can we tell from the following logs whether book 1 or book 2 has a &lt;code&gt;null&lt;/code&gt; name field?&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;[http] GET /api/book/1&#xA;[http] GET /api/book/2&#xA;[db] SELECT * FROM books WHERE id = 1&#xA;[db] SELECT * FROM books WHERE id = 2&#xA;error: Uncaught (in promise) PostgresError: &amp;#39;name&amp;#39; column is null&#xA;throw new PostgresError(`&amp;#39;name&amp;#39; column is null`);&#xA;at query (file:///tmp/main.ts:29:9)&#xA;at queryBook (file:///tmp/main.ts:25:3)&#xA;at handleRequest (file:///tmp/main.ts:21:3)&#xA;at file:///tmp/main.ts:18:1&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;It’s difficult without context, since these logs are from two parallel interwoven requests.&lt;/p&gt;&#xA;&lt;p&gt;However, if we associate each log with its respective request, then we can find the answer:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;[req:1] [http] GET /api/book/1&#xA;[req:2] [http] GET /api/book/2&#xA;[req:1] [db] SELECT * FROM books WHERE id = 1&#xA;[req:2] [db] SELECT * FROM books WHERE id = 2&#xA;[req:1] error: Uncaught (in promise) PostgresError: &amp;#39;name&amp;#39; column is null&#xA;throw new PostgresError(`&amp;#39;name&amp;#39; column is null`);&#xA;at query (file:///tmp/main.ts:29:9)&#xA;at queryBook (file:///tmp/main.ts:25:3)&#xA;at handleRequest (file:///tmp/main.ts:21:3)&#xA;at file:///tmp/main.ts:18:1&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;Turns out, the one missing its &lt;code&gt;name&lt;/code&gt; is book 1!&lt;/p&gt;&#xA;&lt;p&gt;But adjusting your logs to include a unique request ID can be tricky to maintain and scale:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt; app.get(&amp;#34;/api/book/:id&amp;#34;, async (req, res) =&amp;gt; {&#xA;&amp;#43; const requestId = Math.random();&#xA;&amp;#43; console.log(`[req:${requestId}] [http] GET /api/book/${req.params.id}`);&#xA;- console.log(`[http] GET /api/book/${req.params.id}`);&#xA;const id = req.params.id;&#xA;const book = await getBookFromDatabase(requestId, id);&#xA;res.send(book);&#xA;});&#xA;&amp;#43; async function getBookFromDatabase(requestId: number, bookId: string) {&#xA;&amp;#43; console.log(`[req:${requestId}] [db] getBookFromDatabase ${bookId}`);&#xA;- console.log(`[db] getBookFromDatabase ${bookId}`);&#xA;const book = books.get(bookId);&#xA;if (book === undefined) throw new Error(&amp;#34;No book found.&amp;#34;);&#xA;if (!book.author) throw new Error(&amp;#34;Book is missing author.&amp;#34;);&#xA;return book;&#xA;},&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;Deno’s built-in OpenTelemetry support will automatically associate &lt;code&gt;console.log&lt;/code&gt; with the request that calls it. Just start the server using Deno with &lt;code&gt;OTEL_DENO=true&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;OTEL_DENO=true deno -NRE server.js&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h2 id=&#34;connecting-spans-and-traces-by-request&#34;&gt;&lt;strong&gt;Connecting spans and traces by request&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Spans and traces help answer the who, what, when, and duration of exceptions in production. Without any additional code instrumentation, Deno will automatically create a span for each incoming and outgoing HTTP request (this includes &lt;code&gt;fetch&lt;/code&gt;, &lt;code&gt;Deno.serve&lt;/code&gt;, and &lt;code&gt;node:http&lt;/code&gt;):&lt;/p&gt;&#xA;&lt;p&gt;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1213x482/7e0fb81a59/deno-spans-for-http-requests.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1213x482/7e0fb81a59/deno-spans-for-http-requests.png&#34;alt=&#34;Trace visualization of a book API call showing service operations, spans, and execution times.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1213x482/7e0fb81a59/deno-spans-for-http-requests.png&#34;&#xA;alt=&#34;Trace visualization of a book API call showing service operations, spans, and execution times.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt; This trace shows a single GET request, which triggered an authorization check, and two database queries.&lt;/p&gt;&#xA;&lt;p&gt;In order to have the subsequent spans nested correctly under their parent operation in the trace, we can add some additional code that assigns each operation a span ID and passes that value as a Parent Span ID for its children operations.&lt;/p&gt;&#xA;&lt;p&gt;To make that simpler, here&amp;rsquo;s a utility function &lt;code&gt;withSpan&lt;/code&gt; that wraps the OpenTelemetry API function &lt;code&gt;startActiveSpan&lt;/code&gt; and handles the span lifecycle that includes setting the status code and recording exceptions:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;import { Span, SpanStatusCode, trace } from &amp;#34;@opentelemetry/api&amp;#34;;&#xA;const tracer = trace.getTracer(&amp;#34;api&amp;#34;);&#xA;export function withSpan&amp;lt;Args extends unknown[], T&amp;gt;(&#xA;name: string,&#xA;cb: (span: Span, ...args: Args) =&amp;gt; Promise&amp;lt;T&amp;gt;,&#xA;): (...args: Args) =&amp;gt; Promise&amp;lt;T&amp;gt; {&#xA;return (...args: Args) =&amp;gt; {&#xA;return tracer.startActiveSpan(name, async (span) =&amp;gt; {&#xA;try {&#xA;return await cb(span, ...args);&#xA;} catch (err) {&#xA;span.setStatus({ code: SpanStatusCode.ERROR, message: String(err) });&#xA;span.recordException(err as Error);&#xA;throw err;&#xA;} finally {&#xA;span.end();&#xA;}&#xA;});&#xA;};&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;This utility function can now wrap our &lt;code&gt;getBookFromDatabase&lt;/code&gt; function to provide it with the proper span context:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;import { withSpan } from &amp;#34;./utils.ts&amp;#34;;&#xA;export const getBookFromDatabase = withSpan(&#xA;&amp;#34;getBookFromDatabase&amp;#34;,&#xA;async function getBookFromDatabase(span, bookId: string) {&#xA;span.setAttribute(&amp;#34;book_id&amp;#34;, bookId);&#xA;console.log(`[db] getBookFromDatabase ${bookId}`);&#xA;await new Promise((resolve) =&amp;gt; setTimeout(resolve, 300));&#xA;const book = books.get(bookId);&#xA;if (book === undefined) throw new Error(&amp;#34;No book found.&amp;#34;);&#xA;if (!book.author) throw new Error(&amp;#34;Book is missing author.&amp;#34;);&#xA;return book;&#xA;},&#xA;);&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;Now when we send another request to our API and view its trace, we can see the new &lt;code&gt;getBookFromDatabase&lt;/code&gt; as a nested span under the parent HTTP trace:&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x596/f80e2bceaf/deno-nested-span.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x596/f80e2bceaf/deno-nested-span.png&#34;alt=&#34;Trace analysis of a GET request in a book API, showing timing details for operations.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x596/f80e2bceaf/deno-nested-span.png&#34;&#xA;alt=&#34;Trace analysis of a GET request in a book API, showing timing details for operations.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;h2 id=&#34;distributed-tracing-made-easy&#34;&gt;&lt;strong&gt;Distributed tracing made easy&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;But what if a single request has to go through several microservices or edge functions? Tracing in a distributed system is possible, too, but requires propagating the “parent operation” context (the operation that triggers the entire set of operations) from one service to another when making a request.&lt;/p&gt;&#xA;&lt;p&gt;You could implement this logic yourself, where you manually inject the header into the request. Here’s an example of a “trace-aware” &lt;code&gt;fetch&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;import { trace } from &amp;#34;npm:@opentelemetry/api&amp;#34;;&#xA;export function fetchWithTrace(req: Request): Promise&amp;lt;Response&amp;gt; {&#xA;const span = trace.getActiveSpan();&#xA;if (!span) return fetch(req);&#xA;const spanContext = span.spanContext();&#xA;const traceparent = `00-${spanContext.traceId}-${spanContext.spanId}-01`;&#xA;req.headers.set(&amp;#34;traceparent&amp;#34;, traceparent);&#xA;return fetch(req);&#xA;}&#xA;// every call to `fetch` now needs to be replaced with `fetchWithTrace`&#xA;const resp = await fetchWithTrace(new Request(&amp;#34;&amp;lt;https://example.com&amp;gt;&amp;#34;));&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;But that’s not all — on the receiving end, you’ll also need to read back the &lt;code&gt;traceparent&lt;/code&gt; header and create a new span with it. Overall, this is tedious, error prone, and difficult to maintain.&lt;/p&gt;&#xA;&lt;p&gt;Using Deno and its built-in OTel support skips all of this. Deno automatically propagates trace information between services: injecting trace information into outbound requests and reading trace information from incoming requests.&lt;/p&gt;&#xA;&lt;p&gt;Let’s take a look at an example. We’ll run a new script that simply calls the API server with &lt;code&gt;fetch&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;const resp = await fetch(&amp;#34;&amp;lt;https://localhost:8000/api/book/1&amp;gt;&amp;#34;);&#xA;const book = await resp.json();&#xA;console.log(book);&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;We’ll run this with Deno and OTel:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;$ deno run -A --unstable-otel main.ts&#xA;{ id: &amp;#34;1&amp;#34;, title: &amp;#34;The Great Gatsby&amp;#34;, author: &amp;#34;F. Scott Fitzgerald&amp;#34; }&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;In Grafana Cloud, we can see that the latest trace has a new service name:&lt;/p&gt;&#xA;&lt;p&gt;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/998x182/adc8edf06c/deno-table-trace-ids.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/998x182/adc8edf06c/deno-table-trace-ids.png&#34;alt=&#34;A table listing traces with columns for Trace ID, Start time, Service, Name, and Duration.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/998x182/adc8edf06c/deno-table-trace-ids.png&#34;&#xA;alt=&#34;A table listing traces with columns for Trace ID, Start time, Service, Name, and Duration.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt; Clicking on that reveals three spans:&lt;/p&gt;&#xA;&lt;p&gt;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x639/656e2da301/deno-traces-three-spans.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x639/656e2da301/deno-traces-three-spans.png&#34;alt=&#34;&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x639/656e2da301/deno-traces-three-spans.png&#34;&#xA;alt=&#34;&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt; Deno has automatically tracked a single trace across two services. For more complex microservice architectures, you could imagine having deep nests of spans across several services.&lt;/p&gt;&#xA;&lt;h2 id=&#34;built-in-metrics&#34;&gt;&lt;strong&gt;Built-in metrics&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Metrics are a great way to alert you &lt;em&gt;when&lt;/em&gt; to investigate an issue. They are aggregate data that show how frequently something is happening. For example, a common setup for any web server would be to measure the percentage of requests with 500 status codes, and to set an alert when that percentage exceeds 1%.&lt;/p&gt;&#xA;&lt;p&gt;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1038x437/6a54baa9c1/deno-stacked-lines-graph.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1038x437/6a54baa9c1/deno-stacked-lines-graph.png&#34;alt=&#34;A graph with stacked lines showing data trends over time, featuring green, blue, and red areas representing different data sets.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1038x437/6a54baa9c1/deno-stacked-lines-graph.png&#34;&#xA;alt=&#34;A graph with stacked lines showing data trends over time, featuring green, blue, and red areas representing different data sets.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt; If you want more context about the health of your program, Deno will also automatically collect &lt;a href=&#34;https://opentelemetry.io/docs/specs/semconv/runtime/v8js-metrics/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://opentelemetry.io/docs/specs/semconv/runtime/v8js-metrics/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;metrics on V8&lt;/a&gt;, letting you monitor metrics such as &lt;code&gt;v8js_memory_heap_size_bytes&lt;/code&gt; and garbage collection duration.&lt;/p&gt;&#xA;&lt;h2 id=&#34;whats-next&#34;&gt;&lt;strong&gt;What’s next&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;The telemetry Deno provides out of the box is a powerful foundation. With zero effort, your services become visible in metrics, logs, and traces, and they’re all unified and searchable within Grafana Cloud. From here, you can extend your observability with custom spans, events, or domain-specific metrics.&lt;/p&gt;&#xA;&lt;p&gt;For more information, you can refer to &lt;a href=&#34;https://docs.deno.com/runtime/fundamentals/open_telemetry/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Deno&amp;rsquo;s OpenTelemetry documentation&lt;/a&gt;, &lt;a href=&#34;https://docs.deno.com/examples/grafana_tutorial/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;this step-by-step tutorial for setting up Deno and Grafana&lt;/a&gt;, as well as the &lt;a href=&#34;/docs/grafana-cloud/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Cloud documentation&lt;/a&gt;.&lt;/p&gt;</description>
      <pubDate>Fri, 15 Aug 2025 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【AI for Grafana onboarding: Get your teams started quicker with Grafana Assistant】AI for Grafana onboarding: Get your teams started quicker with Grafana Assistant</title>
      <link>https://grafana.com/blog/2025/08/14/ai-for-grafana-onboarding-get-your-teams-started-quicker-with-grafana-assistant/</link>
      <description>【&lt;p&gt;Grafana puts a powerful set of observability capabilities right at your fingertips, but onboarding entire teams to the sophisticated platform is often a nontrivial exercise—one that can slow adoption and prevent organizations from getting immediate value. &lt;/p&gt;&#xA;&lt;p&gt;We want to make the process as frictionless as possible, which is why we&amp;rsquo;re excited to tell you that &lt;a href=&#34;/docs/grafana-cloud/machine-learning/assistant/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Assistant&lt;/a&gt; is now available in public preview to all Grafana Cloud users. Our integrated chat agent can be a vital tool for getting started on the platform, helping new users answer questions, navigate to the right places in Grafana, and even have action taken on their behalf. &lt;/p&gt;&#xA;&lt;p&gt;Of course, Grafana Assistant can help you get more done with Grafana Cloud in any number of ways, but in this blog post we&amp;rsquo;re going to focus on how it can help you and your organization quickly and successfully get onboarded with Grafana, whether you&amp;rsquo;re migrating from another tool or just starting your observability journey. &lt;/p&gt;&#xA;&lt;p&gt;Keep reading for tips on how Grafana Assistant can help you get the most from your stack. And if you&amp;rsquo;re following along at home or in the office, simply click on the pulsar icon in the top-right corner of the Grafana Cloud UI to open the assistant and enter the example prompts provided below.&lt;/p&gt;&#xA;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/cqHO0oYW6Ic?si=UtZkFYUmjrM&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; allowfullscreen&gt;&lt;/iframe&gt;&#xA;&lt;h2 id=&#34;learn-observability-concepts&#34;&gt;Learn observability concepts &lt;/h2&gt;&#xA;&lt;p&gt;Sometimes you run into unfamiliar concepts or technologies—especially those with multi-letter acronyms. This can slow you down as you constantly reach for your favorite search engine or external chat agent to learn more. &lt;/p&gt;&#xA;&lt;p&gt;Well, the same thing can happen if you have limited exposure to observability. But with Grafana Assistant, you get that same help you&amp;rsquo;re used to searching for elsewhere without ever having to leave Grafana Cloud—no context switching needed!&lt;/p&gt;&#xA;&lt;p&gt;Plus, there&amp;rsquo;s an extra twist: The answers will be tailored to your observability stack. For example, if you ask about uptime and you have HTTP servers logging and providing metrics to Grafana, Grafana Assistant will intelligently figure out what you’re referring to.&lt;/p&gt;&#xA;&lt;p&gt;Try these sample questions to see for yourself:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;What is an aggregated metric?&lt;/li&gt;&#xA;&lt;li&gt;What does SLO stand for?&lt;/li&gt;&#xA;&lt;li&gt;How many metrics is too many?&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1080x1080/de44947ac6/observability-concepts.gif&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1080x1080/de44947ac6/observability-concepts.gif&#34;alt=&#34;A short video showing someone asking Assistant about basic observability concepts&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1080x1080/de44947ac6/observability-concepts.gif&#34;&#xA;alt=&#34;A short video showing someone asking Assistant about basic observability concepts&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;h2 id=&#34;compare-concepts-from-different-platforms&#34;&gt;Compare concepts from different platforms&lt;/h2&gt;&#xA;&lt;p&gt;Now, maybe you&amp;rsquo;re well versed in observability, but you&amp;rsquo;re less familiar with Grafana. When moving from another platform, it’s possible that some of the concepts don’t fully line up. It&amp;rsquo;s also possible that Grafana tackles certain problems differently than your previous tooling. &lt;/p&gt;&#xA;&lt;p&gt;But don&amp;rsquo;t worry—Grafana Assistant is generally aware enough to compare those concepts and explain the differences, including providing extra detail where requested. And don’t be afraid to ask follow up questions as needed (more on this at the end).&lt;/p&gt;&#xA;&lt;p&gt;Try these sample questions, and replace the uppercase text as needed:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;In my other observability stack I used OBSERVABILITY_FEATURE. What’s the Grafana equivalent?&lt;/li&gt;&#xA;&lt;li&gt;What does Grafana call OBSERVABILITY_FEATURE?&lt;/li&gt;&#xA;&lt;li&gt;In OLD_OBSERVABILILTY_STACK I used to be able to do COOL_THING. How do I achieve that in Grafana?&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1080x1080/5fa5beefdf/compare-vendors.gif&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1080x1080/5fa5beefdf/compare-vendors.gif&#34;alt=&#34;A short video of someone asking Assistant to compare terminology from different vendors&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1080x1080/5fa5beefdf/compare-vendors.gif&#34;&#xA;alt=&#34;A short video of someone asking Assistant to compare terminology from different vendors&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;h2 id=&#34;get-context-aware-answers-about-your-stack&#34;&gt;Get context-aware answers about your stack&lt;/h2&gt;&#xA;&lt;p&gt;Once you&amp;rsquo;ve got the basic concepts down, it&amp;rsquo;s time to find out what you can actually do in Grafana Cloud. But maybe you&amp;rsquo;re not quite ready to learn &lt;em&gt;everything&lt;/em&gt; just yet.&lt;/p&gt;&#xA;&lt;p&gt;Many new users simply want to poke around and get a feel for the environment first. The problem with this approach is that you don&amp;rsquo;t know what you don&amp;rsquo;t know, which can be especially frustrating (and overwhelming) when you have so much to choose from.&lt;/p&gt;&#xA;&lt;p&gt;Grafana Assistant sits in the sidebar next to whatever you’re working on in Grafana Cloud. More importantly, it can see the context on the page, so questions are answered specifically about your stack, often including real examples from your actual telemetry signals.&lt;/p&gt;&#xA;&lt;p&gt;Try these sample questions:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;What am I supposed to do on this page?&lt;/li&gt;&#xA;&lt;li&gt;Can you explain the data I’m seeing here?&lt;/li&gt;&#xA;&lt;li&gt;Where can I learn more about this?&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1080x1080/542d1b9114/context-aware-tips.gif&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1080x1080/542d1b9114/context-aware-tips.gif&#34;alt=&#34;A short video showing someone asking Assistant to help fetch logs&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1080x1080/542d1b9114/context-aware-tips.gif&#34;&#xA;alt=&#34;A short video showing someone asking Assistant to help fetch logs&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;h2 id=&#34;follow-customized-interactive-tutorials&#34;&gt;Follow customized interactive tutorials&lt;/h2&gt;&#xA;&lt;p&gt;As you continue your onboarding experience, perhaps you find that you’re curious about how a specific UI works, or how to solve a particular problem using the tools. Grafana Assistant can provide a step-by-step guide that&amp;rsquo;s customized to your request, skipping over steps that aren&amp;rsquo;t relevant and  focusing instead on what matters most for your needs.&lt;/p&gt;&#xA;&lt;p&gt;As you make changes, you can keep the conversation going. Either continue probing to learn more details, or ask it to help with tangential things as you go. The assistant will adapt to how you work best.&lt;/p&gt;&#xA;&lt;p&gt;Try these sample questions:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;How do I add an alert for this metric?&lt;/li&gt;&#xA;&lt;li&gt;What does it take to add a new on-call schedule in Grafana Cloud IRM?&lt;/li&gt;&#xA;&lt;li&gt;What steps should I follow to declare a test incident?&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1080x1080/188589f9c5/interactive-tutorials.gif&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1080x1080/188589f9c5/interactive-tutorials.gif&#34;alt=&#34;A short video showing someone asking Assistant how to add on-call schedules in Grafana Cloud IRM&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1080x1080/188589f9c5/interactive-tutorials.gif&#34;&#xA;alt=&#34;A short video showing someone asking Assistant how to add on-call schedules in Grafana Cloud IRM&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you still need to get started with Grafana Assistant in the first place, it can also help you with that, too. The first time you open the chat agent, you&amp;rsquo;ll be guiding you through a dedicated tutorial for Grafana Assistant.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;ask-about-best-practices&#34;&gt;Ask about best practices&lt;/h2&gt;&#xA;&lt;p&gt;At this point, you&amp;rsquo;re ready to refine and optimize your usage, but you aren&amp;rsquo;t quite sure what you need to do differently. Thankfully, Grafana Assistant is packed with knowledge about the platform that can help you do just that. &lt;/p&gt;&#xA;&lt;p&gt;Some of that information is baked in via the prompts and tools we send to the LLMs. Other knowledge comes via access to the Grafana documentation and blog articles, which carry special weight in the AI’s estimations and will help guide you to the best solution. As the documentation is pulled in in real time, you can be sure that you always receive up-to-date information on our products.&lt;/p&gt;&#xA;&lt;p&gt;Try these sample questions:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;What should I be monitoring to ensure Kafka is operating correctly?&lt;/li&gt;&#xA;&lt;li&gt;What level of CPU usage should I alert on?&lt;/li&gt;&#xA;&lt;li&gt;Should I add instrumentation to everything in my stack, or just the important things?&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1080x1080/bafc3ae041/best-practices.gif&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1080x1080/bafc3ae041/best-practices.gif&#34;alt=&#34;A short video showing someone asking Assistant about best practices for monitoring Kafka&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1080x1080/bafc3ae041/best-practices.gif&#34;&#xA;alt=&#34;A short video showing someone asking Assistant about best practices for monitoring Kafka&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;h3 id=&#34;remember-its-a-conversation&#34;&gt;Remember: It’s a conversation&lt;/h3&gt;&#xA;&lt;p&gt;Grafana Assistant will always try to answer your questions, but the more context it has, the better. &lt;/p&gt;&#xA;&lt;p&gt;Correct it if it makes mistakes, provide more context where it seems confused, and don’t be afraid to direct it towards the kinds of answers you’re looking for. In this regard, it’s like working with a colleague: The more context you provide, the better your collaboration at large.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Bonus tip:&lt;/strong&gt; Remain polite. It seems like the AI will produce better results when the language is positive in sentiment. We’ll leave it as an exercise for the reader to figure out why that might be.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;you-and-grafana-assistant-will-get-better-all-the-time&#34;&gt;You and Grafana Assistant will get better all the time&lt;/h2&gt;&#xA;&lt;p&gt;Observability is diverse: Different companies have different stacks that solve different problems. At Grafana Labs, we support small and big companies across a wide range of industries, which also means that observability problems vary significantly. &lt;/p&gt;&#xA;&lt;p&gt;However, we don’t want to develop an assistant feature that only caters to a narrow set of situations. Instead, we want Grafana Assistant to help anyone—regardless of their observability maturity—to run things just a bit more smoothly.&lt;/p&gt;&#xA;&lt;p&gt;Enabling Grafana Assistant is simple: Either click on the Grafana Assistant symbol in the top-right corner of the UI, or click on the corresponding menu item in the main navigation on the left side of the UI. &lt;/p&gt;&#xA;&lt;p&gt;As you use Grafana Assistant, you will also learn the nuances of interacting with an LLM. The prompt and context are everything to the LLM, so some things will work better than others. As you use the Assistant to solve real world problems, the way you interact with it will evolve. So don’t be downhearted if the first few things you try don’t give you the results you’re after.&lt;/p&gt;&#xA;&lt;p&gt;We are investing heavily to continually develop Grafana Assistant, so you should notice improvements in behavior on a weekly basis. Your feedback helps us do this, so please use the thumbs-up and down icons, and if you can, leave a meaningful comment explaining what happened, and what you expected.&lt;/p&gt;&#xA;&lt;p&gt;So start using Grafana Assistant today to upgrade your observability experience! And if you want to learn more about Grafana Assistant and our entire suite of AI tools, sign up for &lt;a href=&#34;/events/observabilitycon/&#34;&gt;ObservabilityCON 2025&lt;/a&gt; in London or an &lt;a href=&#34;/events/observabilitycon-on-the-road/&#34;&gt;ObservabilityCON on the Road&lt;/a&gt; near you for more AI-powered observability announcements.&lt;/p&gt;&#xA;&lt;h3 id=&#34;faq-grafana-cloud-ai--grafana-assistant&#34;&gt;FAQ: Grafana Cloud AI &amp;amp; Grafana Assistant&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;What is Grafana Assistant?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Grafana Assistant is an AI-powered agent in Grafana Cloud that helps you query, build, and troubleshoot faster using natural language. It simplifies common workflows like writing PromQL, LogQL, or TraceQL queries, and creating dashboards — all while keeping you in control. Learn more in our blog post.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;How does Grafana Cloud use AI in observability?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Grafana Cloud’s AI features support engineers and operators throughout the observability lifecycle—from detection and triage to explanation and resolution. We focus on explainable, assistive AI that enhances your workflow.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;What problems does Grafana Assistant solve?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Grafana Assistant helps reduce toil and improve productivity by enabling you to:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Write and debug queries faster&lt;/li&gt;&#xA;&lt;li&gt;Build and optimize dashboards&lt;/li&gt;&#xA;&lt;li&gt;Investigate issues and anomalies&lt;/li&gt;&#xA;&lt;li&gt;Understand telemetry trends and patterns&lt;/li&gt;&#xA;&lt;li&gt;Navigate Grafana more intuitively&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;What is Grafana Labs&amp;rsquo; approach to building AI into observability?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;We build around:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Human-in-the-loop interaction for trust and transparency&lt;/li&gt;&#xA;&lt;li&gt;Outcome-first experiences that focus on real user value&lt;/li&gt;&#xA;&lt;li&gt;Multi-signal support, including correlating data across metrics, logs, traces, and profiles&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Does Grafana OSS have AI capabilities?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;By default, Grafana OSS doesn’t include built-in AI features found in Grafana Cloud, but you can enable AI-powered workflows using the &lt;a href=&#34;/docs/grafana-cloud/machine-learning/llm/&#34;&gt;&lt;/a&gt;&lt;a href=&#34;/docs/grafana-cloud/machine-learning/llm/&#34;&gt;LLM app plugin&lt;/a&gt;. This open source plugin connects to providers like OpenAI or Azure OpenAI securely, allowing you to generate queries, explore dashboards, and interact with Grafana using natural language. It also provides a &lt;a href=&#34;https://github.com/grafana/mcp-grafana&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;MCP (Model Context Protocol) server&lt;/a&gt;, which allows you to grant your favorite AI application access to your Grafana instance. &lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Why isn’t Assistant open source?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Grafana Assistant runs in Grafana Cloud to support enterprise needs and manage infrastructure at scale. We’re committed to OSS and continue to invest heavily in it—including open sourcing tools like the &lt;a href=&#34;/docs/grafana-cloud/machine-learning/llm/&#34;&gt;LLM plugin&lt;/a&gt; and &lt;a href=&#34;https://github.com/grafana/mcp-grafana&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;MCP server&lt;/a&gt;, so the community can build their own AI-powered experiences into Grafana OSS.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Does Grafana Cloud’s AI capabilities take actions on its own?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Today, we focus on human-in-the-loop workflows that keep engineers in control while reducing toil. But as AI systems mature and prove more reliable, some tasks may require less oversight. We&amp;rsquo;re building a foundation that supports both: transparent, assistive AI now, with the flexibility to evolve into more autonomous capabilities where it makes sense.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Where can I learn more about Grafana’s AI strategy?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;/blog/2025/08/14/ai-in-observability-at-grafana-labs-making-observability-easy-and-accessible-for-everyone/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Check out our blog post&lt;/a&gt; to hear directly from our engineers.  &lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;/products/cloud/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Cloud&lt;/a&gt;&lt;/em&gt; &lt;em&gt;is the easiest way to get started with metrics, logs, traces, dashboards, and more. We have a generous forever-free tier and plans for every use case.&lt;/em&gt; &lt;em&gt;&lt;a href=&#34;/auth/sign-up/create-user/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Sign up for free now&lt;/a&gt;__!&lt;/em&gt;&lt;/p&gt;】&lt;p&gt;Grafana puts a powerful set of observability capabilities right at your fingertips, but onboarding entire teams to the sophisticated platform is often a nontrivial exercise—one that can slow adoption and prevent organizations from getting immediate value. &lt;/p&gt;&#xA;&lt;p&gt;We want to make the process as frictionless as possible, which is why we&amp;rsquo;re excited to tell you that &lt;a href=&#34;/docs/grafana-cloud/machine-learning/assistant/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Assistant&lt;/a&gt; is now available in public preview to all Grafana Cloud users. Our integrated chat agent can be a vital tool for getting started on the platform, helping new users answer questions, navigate to the right places in Grafana, and even have action taken on their behalf. &lt;/p&gt;&#xA;&lt;p&gt;Of course, Grafana Assistant can help you get more done with Grafana Cloud in any number of ways, but in this blog post we&amp;rsquo;re going to focus on how it can help you and your organization quickly and successfully get onboarded with Grafana, whether you&amp;rsquo;re migrating from another tool or just starting your observability journey. &lt;/p&gt;&#xA;&lt;p&gt;Keep reading for tips on how Grafana Assistant can help you get the most from your stack. And if you&amp;rsquo;re following along at home or in the office, simply click on the pulsar icon in the top-right corner of the Grafana Cloud UI to open the assistant and enter the example prompts provided below.&lt;/p&gt;&#xA;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/cqHO0oYW6Ic?si=UtZkFYUmjrM&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; allowfullscreen&gt;&lt;/iframe&gt;&#xA;&lt;h2 id=&#34;learn-observability-concepts&#34;&gt;Learn observability concepts &lt;/h2&gt;&#xA;&lt;p&gt;Sometimes you run into unfamiliar concepts or technologies—especially those with multi-letter acronyms. This can slow you down as you constantly reach for your favorite search engine or external chat agent to learn more. &lt;/p&gt;&#xA;&lt;p&gt;Well, the same thing can happen if you have limited exposure to observability. But with Grafana Assistant, you get that same help you&amp;rsquo;re used to searching for elsewhere without ever having to leave Grafana Cloud—no context switching needed!&lt;/p&gt;&#xA;&lt;p&gt;Plus, there&amp;rsquo;s an extra twist: The answers will be tailored to your observability stack. For example, if you ask about uptime and you have HTTP servers logging and providing metrics to Grafana, Grafana Assistant will intelligently figure out what you’re referring to.&lt;/p&gt;&#xA;&lt;p&gt;Try these sample questions to see for yourself:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;What is an aggregated metric?&lt;/li&gt;&#xA;&lt;li&gt;What does SLO stand for?&lt;/li&gt;&#xA;&lt;li&gt;How many metrics is too many?&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1080x1080/de44947ac6/observability-concepts.gif&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1080x1080/de44947ac6/observability-concepts.gif&#34;alt=&#34;A short video showing someone asking Assistant about basic observability concepts&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1080x1080/de44947ac6/observability-concepts.gif&#34;&#xA;alt=&#34;A short video showing someone asking Assistant about basic observability concepts&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;h2 id=&#34;compare-concepts-from-different-platforms&#34;&gt;Compare concepts from different platforms&lt;/h2&gt;&#xA;&lt;p&gt;Now, maybe you&amp;rsquo;re well versed in observability, but you&amp;rsquo;re less familiar with Grafana. When moving from another platform, it’s possible that some of the concepts don’t fully line up. It&amp;rsquo;s also possible that Grafana tackles certain problems differently than your previous tooling. &lt;/p&gt;&#xA;&lt;p&gt;But don&amp;rsquo;t worry—Grafana Assistant is generally aware enough to compare those concepts and explain the differences, including providing extra detail where requested. And don’t be afraid to ask follow up questions as needed (more on this at the end).&lt;/p&gt;&#xA;&lt;p&gt;Try these sample questions, and replace the uppercase text as needed:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;In my other observability stack I used OBSERVABILITY_FEATURE. What’s the Grafana equivalent?&lt;/li&gt;&#xA;&lt;li&gt;What does Grafana call OBSERVABILITY_FEATURE?&lt;/li&gt;&#xA;&lt;li&gt;In OLD_OBSERVABILILTY_STACK I used to be able to do COOL_THING. How do I achieve that in Grafana?&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1080x1080/5fa5beefdf/compare-vendors.gif&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1080x1080/5fa5beefdf/compare-vendors.gif&#34;alt=&#34;A short video of someone asking Assistant to compare terminology from different vendors&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1080x1080/5fa5beefdf/compare-vendors.gif&#34;&#xA;alt=&#34;A short video of someone asking Assistant to compare terminology from different vendors&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;h2 id=&#34;get-context-aware-answers-about-your-stack&#34;&gt;Get context-aware answers about your stack&lt;/h2&gt;&#xA;&lt;p&gt;Once you&amp;rsquo;ve got the basic concepts down, it&amp;rsquo;s time to find out what you can actually do in Grafana Cloud. But maybe you&amp;rsquo;re not quite ready to learn &lt;em&gt;everything&lt;/em&gt; just yet.&lt;/p&gt;&#xA;&lt;p&gt;Many new users simply want to poke around and get a feel for the environment first. The problem with this approach is that you don&amp;rsquo;t know what you don&amp;rsquo;t know, which can be especially frustrating (and overwhelming) when you have so much to choose from.&lt;/p&gt;&#xA;&lt;p&gt;Grafana Assistant sits in the sidebar next to whatever you’re working on in Grafana Cloud. More importantly, it can see the context on the page, so questions are answered specifically about your stack, often including real examples from your actual telemetry signals.&lt;/p&gt;&#xA;&lt;p&gt;Try these sample questions:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;What am I supposed to do on this page?&lt;/li&gt;&#xA;&lt;li&gt;Can you explain the data I’m seeing here?&lt;/li&gt;&#xA;&lt;li&gt;Where can I learn more about this?&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1080x1080/542d1b9114/context-aware-tips.gif&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1080x1080/542d1b9114/context-aware-tips.gif&#34;alt=&#34;A short video showing someone asking Assistant to help fetch logs&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1080x1080/542d1b9114/context-aware-tips.gif&#34;&#xA;alt=&#34;A short video showing someone asking Assistant to help fetch logs&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;h2 id=&#34;follow-customized-interactive-tutorials&#34;&gt;Follow customized interactive tutorials&lt;/h2&gt;&#xA;&lt;p&gt;As you continue your onboarding experience, perhaps you find that you’re curious about how a specific UI works, or how to solve a particular problem using the tools. Grafana Assistant can provide a step-by-step guide that&amp;rsquo;s customized to your request, skipping over steps that aren&amp;rsquo;t relevant and  focusing instead on what matters most for your needs.&lt;/p&gt;&#xA;&lt;p&gt;As you make changes, you can keep the conversation going. Either continue probing to learn more details, or ask it to help with tangential things as you go. The assistant will adapt to how you work best.&lt;/p&gt;&#xA;&lt;p&gt;Try these sample questions:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;How do I add an alert for this metric?&lt;/li&gt;&#xA;&lt;li&gt;What does it take to add a new on-call schedule in Grafana Cloud IRM?&lt;/li&gt;&#xA;&lt;li&gt;What steps should I follow to declare a test incident?&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1080x1080/188589f9c5/interactive-tutorials.gif&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1080x1080/188589f9c5/interactive-tutorials.gif&#34;alt=&#34;A short video showing someone asking Assistant how to add on-call schedules in Grafana Cloud IRM&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1080x1080/188589f9c5/interactive-tutorials.gif&#34;&#xA;alt=&#34;A short video showing someone asking Assistant how to add on-call schedules in Grafana Cloud IRM&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you still need to get started with Grafana Assistant in the first place, it can also help you with that, too. The first time you open the chat agent, you&amp;rsquo;ll be guiding you through a dedicated tutorial for Grafana Assistant.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;ask-about-best-practices&#34;&gt;Ask about best practices&lt;/h2&gt;&#xA;&lt;p&gt;At this point, you&amp;rsquo;re ready to refine and optimize your usage, but you aren&amp;rsquo;t quite sure what you need to do differently. Thankfully, Grafana Assistant is packed with knowledge about the platform that can help you do just that. &lt;/p&gt;&#xA;&lt;p&gt;Some of that information is baked in via the prompts and tools we send to the LLMs. Other knowledge comes via access to the Grafana documentation and blog articles, which carry special weight in the AI’s estimations and will help guide you to the best solution. As the documentation is pulled in in real time, you can be sure that you always receive up-to-date information on our products.&lt;/p&gt;&#xA;&lt;p&gt;Try these sample questions:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;What should I be monitoring to ensure Kafka is operating correctly?&lt;/li&gt;&#xA;&lt;li&gt;What level of CPU usage should I alert on?&lt;/li&gt;&#xA;&lt;li&gt;Should I add instrumentation to everything in my stack, or just the important things?&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1080x1080/bafc3ae041/best-practices.gif&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1080x1080/bafc3ae041/best-practices.gif&#34;alt=&#34;A short video showing someone asking Assistant about best practices for monitoring Kafka&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1080x1080/bafc3ae041/best-practices.gif&#34;&#xA;alt=&#34;A short video showing someone asking Assistant about best practices for monitoring Kafka&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;h3 id=&#34;remember-its-a-conversation&#34;&gt;Remember: It’s a conversation&lt;/h3&gt;&#xA;&lt;p&gt;Grafana Assistant will always try to answer your questions, but the more context it has, the better. &lt;/p&gt;&#xA;&lt;p&gt;Correct it if it makes mistakes, provide more context where it seems confused, and don’t be afraid to direct it towards the kinds of answers you’re looking for. In this regard, it’s like working with a colleague: The more context you provide, the better your collaboration at large.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Bonus tip:&lt;/strong&gt; Remain polite. It seems like the AI will produce better results when the language is positive in sentiment. We’ll leave it as an exercise for the reader to figure out why that might be.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;you-and-grafana-assistant-will-get-better-all-the-time&#34;&gt;You and Grafana Assistant will get better all the time&lt;/h2&gt;&#xA;&lt;p&gt;Observability is diverse: Different companies have different stacks that solve different problems. At Grafana Labs, we support small and big companies across a wide range of industries, which also means that observability problems vary significantly. &lt;/p&gt;&#xA;&lt;p&gt;However, we don’t want to develop an assistant feature that only caters to a narrow set of situations. Instead, we want Grafana Assistant to help anyone—regardless of their observability maturity—to run things just a bit more smoothly.&lt;/p&gt;&#xA;&lt;p&gt;Enabling Grafana Assistant is simple: Either click on the Grafana Assistant symbol in the top-right corner of the UI, or click on the corresponding menu item in the main navigation on the left side of the UI. &lt;/p&gt;&#xA;&lt;p&gt;As you use Grafana Assistant, you will also learn the nuances of interacting with an LLM. The prompt and context are everything to the LLM, so some things will work better than others. As you use the Assistant to solve real world problems, the way you interact with it will evolve. So don’t be downhearted if the first few things you try don’t give you the results you’re after.&lt;/p&gt;&#xA;&lt;p&gt;We are investing heavily to continually develop Grafana Assistant, so you should notice improvements in behavior on a weekly basis. Your feedback helps us do this, so please use the thumbs-up and down icons, and if you can, leave a meaningful comment explaining what happened, and what you expected.&lt;/p&gt;&#xA;&lt;p&gt;So start using Grafana Assistant today to upgrade your observability experience! And if you want to learn more about Grafana Assistant and our entire suite of AI tools, sign up for &lt;a href=&#34;/events/observabilitycon/&#34;&gt;ObservabilityCON 2025&lt;/a&gt; in London or an &lt;a href=&#34;/events/observabilitycon-on-the-road/&#34;&gt;ObservabilityCON on the Road&lt;/a&gt; near you for more AI-powered observability announcements.&lt;/p&gt;&#xA;&lt;h3 id=&#34;faq-grafana-cloud-ai--grafana-assistant&#34;&gt;FAQ: Grafana Cloud AI &amp;amp; Grafana Assistant&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;What is Grafana Assistant?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Grafana Assistant is an AI-powered agent in Grafana Cloud that helps you query, build, and troubleshoot faster using natural language. It simplifies common workflows like writing PromQL, LogQL, or TraceQL queries, and creating dashboards — all while keeping you in control. Learn more in our blog post.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;How does Grafana Cloud use AI in observability?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Grafana Cloud’s AI features support engineers and operators throughout the observability lifecycle—from detection and triage to explanation and resolution. We focus on explainable, assistive AI that enhances your workflow.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;What problems does Grafana Assistant solve?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Grafana Assistant helps reduce toil and improve productivity by enabling you to:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Write and debug queries faster&lt;/li&gt;&#xA;&lt;li&gt;Build and optimize dashboards&lt;/li&gt;&#xA;&lt;li&gt;Investigate issues and anomalies&lt;/li&gt;&#xA;&lt;li&gt;Understand telemetry trends and patterns&lt;/li&gt;&#xA;&lt;li&gt;Navigate Grafana more intuitively&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;What is Grafana Labs&amp;rsquo; approach to building AI into observability?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;We build around:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Human-in-the-loop interaction for trust and transparency&lt;/li&gt;&#xA;&lt;li&gt;Outcome-first experiences that focus on real user value&lt;/li&gt;&#xA;&lt;li&gt;Multi-signal support, including correlating data across metrics, logs, traces, and profiles&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Does Grafana OSS have AI capabilities?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;By default, Grafana OSS doesn’t include built-in AI features found in Grafana Cloud, but you can enable AI-powered workflows using the &lt;a href=&#34;/docs/grafana-cloud/machine-learning/llm/&#34;&gt;&lt;/a&gt;&lt;a href=&#34;/docs/grafana-cloud/machine-learning/llm/&#34;&gt;LLM app plugin&lt;/a&gt;. This open source plugin connects to providers like OpenAI or Azure OpenAI securely, allowing you to generate queries, explore dashboards, and interact with Grafana using natural language. It also provides a &lt;a href=&#34;https://github.com/grafana/mcp-grafana&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;MCP (Model Context Protocol) server&lt;/a&gt;, which allows you to grant your favorite AI application access to your Grafana instance. &lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Why isn’t Assistant open source?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Grafana Assistant runs in Grafana Cloud to support enterprise needs and manage infrastructure at scale. We’re committed to OSS and continue to invest heavily in it—including open sourcing tools like the &lt;a href=&#34;/docs/grafana-cloud/machine-learning/llm/&#34;&gt;LLM plugin&lt;/a&gt; and &lt;a href=&#34;https://github.com/grafana/mcp-grafana&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;MCP server&lt;/a&gt;, so the community can build their own AI-powered experiences into Grafana OSS.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Does Grafana Cloud’s AI capabilities take actions on its own?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Today, we focus on human-in-the-loop workflows that keep engineers in control while reducing toil. But as AI systems mature and prove more reliable, some tasks may require less oversight. We&amp;rsquo;re building a foundation that supports both: transparent, assistive AI now, with the flexibility to evolve into more autonomous capabilities where it makes sense.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Where can I learn more about Grafana’s AI strategy?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;/blog/2025/08/14/ai-in-observability-at-grafana-labs-making-observability-easy-and-accessible-for-everyone/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Check out our blog post&lt;/a&gt; to hear directly from our engineers.  &lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;/products/cloud/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Cloud&lt;/a&gt;&lt;/em&gt; &lt;em&gt;is the easiest way to get started with metrics, logs, traces, dashboards, and more. We have a generous forever-free tier and plans for every use case.&lt;/em&gt; &lt;em&gt;&lt;a href=&#34;/auth/sign-up/create-user/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Sign up for free now&lt;/a&gt;__!&lt;/em&gt;&lt;/p&gt;</description>
      <pubDate>Thu, 14 Aug 2025 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【AI in observability at Grafana Labs: Making observability easy and accessible for everyone】AI in observability at Grafana Labs: Making observability easy and accessible for everyone</title>
      <link>https://grafana.com/blog/2025/08/14/ai-in-observability-at-grafana-labs-making-observability-easy-and-accessible-for-everyone/</link>
      <description>【&lt;p&gt;Did you know that observability has been around for more than six decades? It all goes back to a Hungarian-American inventor named Rudolf Kálmán who thought about how external outputs could measure the internal state of a machine. &lt;/p&gt;&#xA;&lt;p&gt;Kálmán wrote about monitoring single-input single-output systems, but our demands are very different today. We need to observe monoliths, microservices, clusters, pods, regions, and many more. And we collect metrics, logs, traces, and profiles to better understand what’s going on in our stacks.&lt;/p&gt;&#xA;&lt;p&gt;Yes, a lot has changed over the years, but even bigger changes may be on the horizon thanks to AI. In fact, we&amp;rsquo;ve come to believe that AI is proving to be more than just a trend in observability: It will likely be integral to how organizations keep their systems fully operational going forward.&lt;/p&gt;&#xA;&lt;p&gt;In this blog, we&amp;rsquo;ll share more about our perspective on the role of AI in observability and how that&amp;rsquo;s influencing the tools we&amp;rsquo;re building to help our users.&lt;/p&gt;&#xA;&lt;h2 id=&#34;how-were-building-ai-based-observability-solutions-for-different-audiences&#34;&gt;How we&amp;rsquo;re building AI-based observability solutions for different audiences&lt;/h2&gt;&#xA;&lt;p&gt;Large organizations often collect petabytes of information every month, which can create a real challenge for the engineers that have to sift through all that data, especially if they&amp;rsquo;ve just been alerted to an incident they need to work through. That&amp;rsquo;s why AI and observability are a perfect match—it’s all about data. &lt;/p&gt;&#xA;&lt;p&gt;If you look at a typical observability workflow, it&amp;rsquo;s clearly not a singular task. It’s actually lots of different tasks (working through an incident, doing routine check-ups, building dashboards, etc.) that are chained together to produce an outcome. Some of these tasks are suitable for AI, while others are better left to people. This is because some tasks are easily automatable, while others are highly ambiguous. For those ambiguous tasks, AI can only take on a support role today—not an executing one. &lt;/p&gt;&#xA;&lt;p&gt;It&amp;rsquo;s also important to understand that every user has different needs. AI allows us to deliver a more personalized experience than ever, so we want to double down on delivering experiences that matter to you.&lt;/p&gt;&#xA;&lt;p&gt;When we put this all this together, we think about AI in observability across four fields:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Operators:&lt;/strong&gt; Operators use Grafana mainly to manage their stacks. This also includes people who use Grafana outside the typical scope of observability (for general business intelligence topics, personal hobbies, etc.).&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Developers:&lt;/strong&gt; Developers use Grafana on a technical level. They instrument applications, send data to Grafana, and check traces. They might also check profiles to improve their applications and stacks.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Interactive:&lt;/strong&gt; For us, &amp;ldquo;interactive&amp;rdquo; means that a user triggers an action, which then allows AI to jump in and provide assistance.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Proactive:&lt;/strong&gt; In this case, AI is triggered by events (like a change to the codebase) or periodic occurrences (like once-a-day events).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;These dimensions of course overlap. For example, users can be operators &lt;em&gt;and&lt;/em&gt; developers if they use different parts of Grafana for different things. The same goes for interactive and proactive workflows—they can intertwine with each other, and some AI features might have interactive &lt;em&gt;and&lt;/em&gt; proactive triggers. &lt;/p&gt;&#xA;&lt;p&gt;Ultimately, these dimensions help us target different experiences within Grafana. For example, we put our desired outcomes into a matrix that includes those dimensions (like the one below), and we use that as a guide to build features that cater to different audiences. &lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1920x1440/0594e5f9ae/grafana-labs-ai-matrix.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1920x1440/0594e5f9ae/grafana-labs-ai-matrix.png&#34;alt=&#34;Flowchart with two columns: Operators and Developers. Lists tasks for each, divided into Interactive and Proactive triggers.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1920x1440/0594e5f9ae/grafana-labs-ai-matrix.png&#34;&#xA;alt=&#34;Flowchart with two columns: Operators and Developers. Lists tasks for each, divided into Interactive and Proactive triggers.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;p&gt;When applying this model, it’s also important to keep in mind that transitions between these experiences are fluid. As we just discussed, there is overlap, so some features might even touch on all four dimensions. &lt;/p&gt;&#xA;&lt;h2 id=&#34;open-source-and-ai-is-a-super-power&#34;&gt;Open source and AI is a super power&lt;/h2&gt;&#xA;&lt;p&gt;Grafana is an open source project that has evolved significantly over time—just like many of our other open source offerings. Our work, processes, and the public contributions in &lt;a href=&#34;https://community.grafana.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;our forums&lt;/a&gt; and in our &lt;a href=&#34;https://github.com/grafana/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;GitHub repositories&lt;/a&gt; are available to anyone.&lt;/p&gt;&#xA;&lt;p&gt;And since AI needs data to train on, Grafana and our other OSS projects have a natural edge over closed source software. Most models are at least partially trained on our public resources, so we don&amp;rsquo;t have to worry about feeding them context and extensive documentation to &amp;ldquo;know&amp;rdquo; how Grafana works.&lt;/p&gt;&#xA;&lt;p&gt;As a result, the models that we&amp;rsquo;ve used have shown promising performance almost immediately. There&amp;rsquo;s no need to explain what PromQL or &lt;a href=&#34;/docs/loki/latest/query/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;LogQL&lt;/a&gt; are—the models already know about them and can even write queries with them.&lt;/p&gt;&#xA;&lt;p&gt;This is yet another reason why we value open source: sharing knowledge openly benefits not just us, but the entire community that builds, documents, and discusses observability in public.  &lt;/p&gt;&#xA;&lt;h2 id=&#34;keeping-humans-in-the-loop&#34;&gt;Keeping humans in the loop&lt;/h2&gt;&#xA;&lt;p&gt;With proper guidance, AI can take on tedious, time-consuming tasks. But AI sometimes struggles to connect all the dots, which is why engineers should ultimately be empowered to take the appropriate remediation actions. That&amp;rsquo;s why we&amp;rsquo;ve made &amp;ldquo;human-in-the-loop&amp;rdquo; (HITL) a core part of our design principles. &lt;/p&gt;&#xA;&lt;p&gt;HITL is a concept by which AI systems are designed to be supervised and controlled by people—in other words, the AI assists you. A good example of this is &lt;a href=&#34;/docs/grafana-cloud/machine-learning/assistant/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Assistant&lt;/a&gt;. It uses a chat interface to connect you with the AI, and the tools under the hood integrate deeply with Grafana APIs. This combination lets you unlock the power of AI without losing any control.&lt;/p&gt;&#xA;&lt;p&gt;As AI systems progress, our perspective here might shift. Basic capabilities might need little to no supervision, while more complex tasks will still benefit from human involvement. Over time, we expect to hand more work off to LLM agents, freeing people to focus on more important matters.&lt;/p&gt;&#xA;&lt;h2 id=&#34;talk-about-outcomes-not-tasks-or-roles&#34;&gt;Talk about outcomes, not tasks or roles&lt;/h2&gt;&#xA;&lt;p&gt;When companies talk about building AI to support people, oftentimes the conversation revolves around supporting tasks or roles. We don&amp;rsquo;t think this is the best way to look at it. &lt;/p&gt;&#xA;&lt;p&gt;Obviously, most tasks and roles were defined before there was easy access to AI, so it only makes sense that AI was never integral to them. The standard workaround these days is to layer AI on top of those roles and tasks. This can certainly help, but it&amp;rsquo;s also short-sighted. AI also allows us to redefine tasks and roles, so rather than trying to box users and ourselves into an older way of thinking, we want to build solutions by looking at outcomes first, then working backwards.&lt;/p&gt;&#xA;&lt;p&gt;For example, a desired outcome could be quick access to any dashboard you can imagine. To achieve this, we first look at the steps a user takes to reach this outcome today. Next, we define the steps AI could take to support this effort.&lt;/p&gt;&#xA;&lt;p&gt;The current way of doing it is a good place to start, but it’s certainly not a hard line we must adhere to. If it makes sense to build another workflow that gets us to this outcome faster and also feels more natural, we want to build that workflow and not be held back by steps that were defined in a time before AI.&lt;/p&gt;&#xA;&lt;h2 id=&#34;ai-is-here-to-stay&#34;&gt;AI is here to stay&lt;/h2&gt;&#xA;&lt;p&gt;AI is here to stay, be it in observability or in other areas of our lives. At Grafana Labs, it&amp;rsquo;s one of our core priorities—something we see as a long-term investment that will ensure observability becomes as easy and accessible as possible.&lt;/p&gt;&#xA;&lt;p&gt;In the future, we believe AI will be a democratizing tool that allows engineers to utilize observability without becoming experts in it first. A first step for this is Grafana Assistant, our context-aware agent that can build dashboards, write queries, explain best practices and more. &lt;/p&gt;&#xA;&lt;p&gt;We&amp;rsquo;re excited for you to try out our assistant to see how it can help improve your observability practices. (You can even use it to &lt;a href=&#34;/blog/2025/08/14/ai-for-grafana-onboarding-get-your-teams-started-quicker-with-grafana-assistant/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;help new users get onboarded to Grafana faster&lt;/a&gt;!) To get started, either click on the Grafana Assistant symbol in the top-right corner of the Grafana Cloud UI, or find it in the menu on the main navigation on the left side of the page.&lt;/p&gt;&#xA;&lt;p&gt;And if you want to learn more about how we&amp;rsquo;re applying these principles in practice, sign up for &lt;a href=&#34;/events/observabilitycon/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;ObservabilityCON 2025&lt;/a&gt; in London or an &lt;a href=&#34;/events/observabilitycon-on-the-road/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;ObservabilityCON on the Road&lt;/a&gt; near you for all our upcoming AI-powered observability announcements.&lt;/p&gt;&#xA;&lt;h2 id=&#34;faq-grafana-cloud-ai--grafana-assistant&#34;&gt;FAQ: Grafana Cloud AI &amp;amp; Grafana Assistant&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;What is Grafana Assistant?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Grafana Assistant is an AI-powered agent in Grafana Cloud that helps you query, build, and troubleshoot faster using natural language. It simplifies common workflows like writing PromQL, LogQL, or TraceQL queries, and creating dashboards — all while keeping you in control. Learn more in our blog post.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;How does Grafana Cloud use AI in observability?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Grafana Cloud’s AI features support engineers and operators throughout the observability lifecycle—from detection and triage to explanation and resolution. We focus on explainable, assistive AI that enhances your workflow.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;What problems does Grafana Assistant solve?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Grafana Assistant helps reduce toil and improve productivity by enabling you to:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Write and debug queries faster&lt;/li&gt;&#xA;&lt;li&gt;Build and optimize dashboards&lt;/li&gt;&#xA;&lt;li&gt;Investigate issues and anomalies&lt;/li&gt;&#xA;&lt;li&gt;Understand telemetry trends and patterns&lt;/li&gt;&#xA;&lt;li&gt;Navigate Grafana more intuitively&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;What is Grafana Labs&amp;rsquo; approach to building AI into observability?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;We build around:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Human-in-the-loop interaction for trust and transparency&lt;/li&gt;&#xA;&lt;li&gt;Outcome-first experiences that focus on real user value&lt;/li&gt;&#xA;&lt;li&gt;Multi-signal support, including correlating data across metrics, logs, traces, and profiles&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Does Grafana OSS have AI capabilities?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;By default, Grafana OSS doesn’t include built-in AI features found in Grafana Cloud, but you can enable AI-powered workflows using the &lt;a href=&#34;/docs/grafana-cloud/machine-learning/llm/&#34;&gt;LLM app plugin&lt;/a&gt;. This open source plugin connects to providers like OpenAI or Azure OpenAI securely, allowing you to generate queries, explore dashboards, and interact with Grafana using natural language. It also provides a &lt;a href=&#34;https://github.com/grafana/mcp-grafana&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;MCP (Model Context Protocol) server&lt;/a&gt;, which allows you to grant your favorite AI application access to your Grafana instance. &lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Why isn’t Assistant open source?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Grafana Assistant runs in Grafana Cloud to support enterprise needs and manage infrastructure at scale. We’re committed to OSS and continue to invest heavily in it—including open sourcing tools like the &lt;a href=&#34;/docs/grafana-cloud/machine-learning/llm/&#34;&gt;LLM plugin&lt;/a&gt; and &lt;a href=&#34;https://github.com/grafana/mcp-grafana&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;MCP server&lt;/a&gt;, so the community can build their own AI-powered experiences into Grafana OSS.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Does Grafana Cloud’s AI capabilities take actions on its own?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Today, we focus on human-in-the-loop workflows that keep engineers in control while reducing toil. But as AI systems mature and prove more reliable, some tasks may require less oversight. We&amp;rsquo;re building a foundation that supports both: transparent, assistive AI now, with the flexibility to evolve into more autonomous capabilities where it makes sense.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;/products/cloud/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Cloud&lt;/a&gt;&lt;/em&gt; &lt;em&gt;is the easiest way to get started with metrics, logs, traces, dashboards, and more. We have a generous forever-free tier and plans for every use case.&lt;/em&gt; &lt;em&gt;&lt;a href=&#34;/auth/sign-up/create-user/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Sign up for free now&lt;/a&gt;__!&lt;/em&gt;&lt;/p&gt;】&lt;p&gt;Did you know that observability has been around for more than six decades? It all goes back to a Hungarian-American inventor named Rudolf Kálmán who thought about how external outputs could measure the internal state of a machine. &lt;/p&gt;&#xA;&lt;p&gt;Kálmán wrote about monitoring single-input single-output systems, but our demands are very different today. We need to observe monoliths, microservices, clusters, pods, regions, and many more. And we collect metrics, logs, traces, and profiles to better understand what’s going on in our stacks.&lt;/p&gt;&#xA;&lt;p&gt;Yes, a lot has changed over the years, but even bigger changes may be on the horizon thanks to AI. In fact, we&amp;rsquo;ve come to believe that AI is proving to be more than just a trend in observability: It will likely be integral to how organizations keep their systems fully operational going forward.&lt;/p&gt;&#xA;&lt;p&gt;In this blog, we&amp;rsquo;ll share more about our perspective on the role of AI in observability and how that&amp;rsquo;s influencing the tools we&amp;rsquo;re building to help our users.&lt;/p&gt;&#xA;&lt;h2 id=&#34;how-were-building-ai-based-observability-solutions-for-different-audiences&#34;&gt;How we&amp;rsquo;re building AI-based observability solutions for different audiences&lt;/h2&gt;&#xA;&lt;p&gt;Large organizations often collect petabytes of information every month, which can create a real challenge for the engineers that have to sift through all that data, especially if they&amp;rsquo;ve just been alerted to an incident they need to work through. That&amp;rsquo;s why AI and observability are a perfect match—it’s all about data. &lt;/p&gt;&#xA;&lt;p&gt;If you look at a typical observability workflow, it&amp;rsquo;s clearly not a singular task. It’s actually lots of different tasks (working through an incident, doing routine check-ups, building dashboards, etc.) that are chained together to produce an outcome. Some of these tasks are suitable for AI, while others are better left to people. This is because some tasks are easily automatable, while others are highly ambiguous. For those ambiguous tasks, AI can only take on a support role today—not an executing one. &lt;/p&gt;&#xA;&lt;p&gt;It&amp;rsquo;s also important to understand that every user has different needs. AI allows us to deliver a more personalized experience than ever, so we want to double down on delivering experiences that matter to you.&lt;/p&gt;&#xA;&lt;p&gt;When we put this all this together, we think about AI in observability across four fields:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Operators:&lt;/strong&gt; Operators use Grafana mainly to manage their stacks. This also includes people who use Grafana outside the typical scope of observability (for general business intelligence topics, personal hobbies, etc.).&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Developers:&lt;/strong&gt; Developers use Grafana on a technical level. They instrument applications, send data to Grafana, and check traces. They might also check profiles to improve their applications and stacks.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Interactive:&lt;/strong&gt; For us, &amp;ldquo;interactive&amp;rdquo; means that a user triggers an action, which then allows AI to jump in and provide assistance.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Proactive:&lt;/strong&gt; In this case, AI is triggered by events (like a change to the codebase) or periodic occurrences (like once-a-day events).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;These dimensions of course overlap. For example, users can be operators &lt;em&gt;and&lt;/em&gt; developers if they use different parts of Grafana for different things. The same goes for interactive and proactive workflows—they can intertwine with each other, and some AI features might have interactive &lt;em&gt;and&lt;/em&gt; proactive triggers. &lt;/p&gt;&#xA;&lt;p&gt;Ultimately, these dimensions help us target different experiences within Grafana. For example, we put our desired outcomes into a matrix that includes those dimensions (like the one below), and we use that as a guide to build features that cater to different audiences. &lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1920x1440/0594e5f9ae/grafana-labs-ai-matrix.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1920x1440/0594e5f9ae/grafana-labs-ai-matrix.png&#34;alt=&#34;Flowchart with two columns: Operators and Developers. Lists tasks for each, divided into Interactive and Proactive triggers.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1920x1440/0594e5f9ae/grafana-labs-ai-matrix.png&#34;&#xA;alt=&#34;Flowchart with two columns: Operators and Developers. Lists tasks for each, divided into Interactive and Proactive triggers.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;p&gt;When applying this model, it’s also important to keep in mind that transitions between these experiences are fluid. As we just discussed, there is overlap, so some features might even touch on all four dimensions. &lt;/p&gt;&#xA;&lt;h2 id=&#34;open-source-and-ai-is-a-super-power&#34;&gt;Open source and AI is a super power&lt;/h2&gt;&#xA;&lt;p&gt;Grafana is an open source project that has evolved significantly over time—just like many of our other open source offerings. Our work, processes, and the public contributions in &lt;a href=&#34;https://community.grafana.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;our forums&lt;/a&gt; and in our &lt;a href=&#34;https://github.com/grafana/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;GitHub repositories&lt;/a&gt; are available to anyone.&lt;/p&gt;&#xA;&lt;p&gt;And since AI needs data to train on, Grafana and our other OSS projects have a natural edge over closed source software. Most models are at least partially trained on our public resources, so we don&amp;rsquo;t have to worry about feeding them context and extensive documentation to &amp;ldquo;know&amp;rdquo; how Grafana works.&lt;/p&gt;&#xA;&lt;p&gt;As a result, the models that we&amp;rsquo;ve used have shown promising performance almost immediately. There&amp;rsquo;s no need to explain what PromQL or &lt;a href=&#34;/docs/loki/latest/query/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;LogQL&lt;/a&gt; are—the models already know about them and can even write queries with them.&lt;/p&gt;&#xA;&lt;p&gt;This is yet another reason why we value open source: sharing knowledge openly benefits not just us, but the entire community that builds, documents, and discusses observability in public.  &lt;/p&gt;&#xA;&lt;h2 id=&#34;keeping-humans-in-the-loop&#34;&gt;Keeping humans in the loop&lt;/h2&gt;&#xA;&lt;p&gt;With proper guidance, AI can take on tedious, time-consuming tasks. But AI sometimes struggles to connect all the dots, which is why engineers should ultimately be empowered to take the appropriate remediation actions. That&amp;rsquo;s why we&amp;rsquo;ve made &amp;ldquo;human-in-the-loop&amp;rdquo; (HITL) a core part of our design principles. &lt;/p&gt;&#xA;&lt;p&gt;HITL is a concept by which AI systems are designed to be supervised and controlled by people—in other words, the AI assists you. A good example of this is &lt;a href=&#34;/docs/grafana-cloud/machine-learning/assistant/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Assistant&lt;/a&gt;. It uses a chat interface to connect you with the AI, and the tools under the hood integrate deeply with Grafana APIs. This combination lets you unlock the power of AI without losing any control.&lt;/p&gt;&#xA;&lt;p&gt;As AI systems progress, our perspective here might shift. Basic capabilities might need little to no supervision, while more complex tasks will still benefit from human involvement. Over time, we expect to hand more work off to LLM agents, freeing people to focus on more important matters.&lt;/p&gt;&#xA;&lt;h2 id=&#34;talk-about-outcomes-not-tasks-or-roles&#34;&gt;Talk about outcomes, not tasks or roles&lt;/h2&gt;&#xA;&lt;p&gt;When companies talk about building AI to support people, oftentimes the conversation revolves around supporting tasks or roles. We don&amp;rsquo;t think this is the best way to look at it. &lt;/p&gt;&#xA;&lt;p&gt;Obviously, most tasks and roles were defined before there was easy access to AI, so it only makes sense that AI was never integral to them. The standard workaround these days is to layer AI on top of those roles and tasks. This can certainly help, but it&amp;rsquo;s also short-sighted. AI also allows us to redefine tasks and roles, so rather than trying to box users and ourselves into an older way of thinking, we want to build solutions by looking at outcomes first, then working backwards.&lt;/p&gt;&#xA;&lt;p&gt;For example, a desired outcome could be quick access to any dashboard you can imagine. To achieve this, we first look at the steps a user takes to reach this outcome today. Next, we define the steps AI could take to support this effort.&lt;/p&gt;&#xA;&lt;p&gt;The current way of doing it is a good place to start, but it’s certainly not a hard line we must adhere to. If it makes sense to build another workflow that gets us to this outcome faster and also feels more natural, we want to build that workflow and not be held back by steps that were defined in a time before AI.&lt;/p&gt;&#xA;&lt;h2 id=&#34;ai-is-here-to-stay&#34;&gt;AI is here to stay&lt;/h2&gt;&#xA;&lt;p&gt;AI is here to stay, be it in observability or in other areas of our lives. At Grafana Labs, it&amp;rsquo;s one of our core priorities—something we see as a long-term investment that will ensure observability becomes as easy and accessible as possible.&lt;/p&gt;&#xA;&lt;p&gt;In the future, we believe AI will be a democratizing tool that allows engineers to utilize observability without becoming experts in it first. A first step for this is Grafana Assistant, our context-aware agent that can build dashboards, write queries, explain best practices and more. &lt;/p&gt;&#xA;&lt;p&gt;We&amp;rsquo;re excited for you to try out our assistant to see how it can help improve your observability practices. (You can even use it to &lt;a href=&#34;/blog/2025/08/14/ai-for-grafana-onboarding-get-your-teams-started-quicker-with-grafana-assistant/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;help new users get onboarded to Grafana faster&lt;/a&gt;!) To get started, either click on the Grafana Assistant symbol in the top-right corner of the Grafana Cloud UI, or find it in the menu on the main navigation on the left side of the page.&lt;/p&gt;&#xA;&lt;p&gt;And if you want to learn more about how we&amp;rsquo;re applying these principles in practice, sign up for &lt;a href=&#34;/events/observabilitycon/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;ObservabilityCON 2025&lt;/a&gt; in London or an &lt;a href=&#34;/events/observabilitycon-on-the-road/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;ObservabilityCON on the Road&lt;/a&gt; near you for all our upcoming AI-powered observability announcements.&lt;/p&gt;&#xA;&lt;h2 id=&#34;faq-grafana-cloud-ai--grafana-assistant&#34;&gt;FAQ: Grafana Cloud AI &amp;amp; Grafana Assistant&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;What is Grafana Assistant?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Grafana Assistant is an AI-powered agent in Grafana Cloud that helps you query, build, and troubleshoot faster using natural language. It simplifies common workflows like writing PromQL, LogQL, or TraceQL queries, and creating dashboards — all while keeping you in control. Learn more in our blog post.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;How does Grafana Cloud use AI in observability?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Grafana Cloud’s AI features support engineers and operators throughout the observability lifecycle—from detection and triage to explanation and resolution. We focus on explainable, assistive AI that enhances your workflow.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;What problems does Grafana Assistant solve?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Grafana Assistant helps reduce toil and improve productivity by enabling you to:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Write and debug queries faster&lt;/li&gt;&#xA;&lt;li&gt;Build and optimize dashboards&lt;/li&gt;&#xA;&lt;li&gt;Investigate issues and anomalies&lt;/li&gt;&#xA;&lt;li&gt;Understand telemetry trends and patterns&lt;/li&gt;&#xA;&lt;li&gt;Navigate Grafana more intuitively&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;What is Grafana Labs&amp;rsquo; approach to building AI into observability?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;We build around:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Human-in-the-loop interaction for trust and transparency&lt;/li&gt;&#xA;&lt;li&gt;Outcome-first experiences that focus on real user value&lt;/li&gt;&#xA;&lt;li&gt;Multi-signal support, including correlating data across metrics, logs, traces, and profiles&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Does Grafana OSS have AI capabilities?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;By default, Grafana OSS doesn’t include built-in AI features found in Grafana Cloud, but you can enable AI-powered workflows using the &lt;a href=&#34;/docs/grafana-cloud/machine-learning/llm/&#34;&gt;LLM app plugin&lt;/a&gt;. This open source plugin connects to providers like OpenAI or Azure OpenAI securely, allowing you to generate queries, explore dashboards, and interact with Grafana using natural language. It also provides a &lt;a href=&#34;https://github.com/grafana/mcp-grafana&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;MCP (Model Context Protocol) server&lt;/a&gt;, which allows you to grant your favorite AI application access to your Grafana instance. &lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Why isn’t Assistant open source?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Grafana Assistant runs in Grafana Cloud to support enterprise needs and manage infrastructure at scale. We’re committed to OSS and continue to invest heavily in it—including open sourcing tools like the &lt;a href=&#34;/docs/grafana-cloud/machine-learning/llm/&#34;&gt;LLM plugin&lt;/a&gt; and &lt;a href=&#34;https://github.com/grafana/mcp-grafana&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;MCP server&lt;/a&gt;, so the community can build their own AI-powered experiences into Grafana OSS.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Does Grafana Cloud’s AI capabilities take actions on its own?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Today, we focus on human-in-the-loop workflows that keep engineers in control while reducing toil. But as AI systems mature and prove more reliable, some tasks may require less oversight. We&amp;rsquo;re building a foundation that supports both: transparent, assistive AI now, with the flexibility to evolve into more autonomous capabilities where it makes sense.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;/products/cloud/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Cloud&lt;/a&gt;&lt;/em&gt; &lt;em&gt;is the easiest way to get started with metrics, logs, traces, dashboards, and more. We have a generous forever-free tier and plans for every use case.&lt;/em&gt; &lt;em&gt;&lt;a href=&#34;/auth/sign-up/create-user/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Sign up for free now&lt;/a&gt;__!&lt;/em&gt;&lt;/p&gt;</description>
      <pubDate>Thu, 14 Aug 2025 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【LLM-powered insights into your tracing data: introducing MCP support in Grafana Cloud Traces】LLM-powered insights into your tracing data: introducing MCP support in Grafana Cloud Traces</title>
      <link>https://grafana.com/blog/2025/08/13/llm-powered-insights-into-your-tracing-data-introducing-mcp-support-in-grafana-cloud-traces/</link>
      <description>【&lt;p&gt;Distributed tracing data is a unique and powerful observability signal, allowing you to understand how your services interact and the relationships between them. Sometimes it can be difficult, however, to turn raw tracing data into actionable insights. &lt;/p&gt;&#xA;&lt;p&gt;This is exactly why we introduced &lt;a href=&#34;/docs/grafana-cloud/visualizations/simplified-exploration/traces/get-started/&#34;&gt;Grafana Traces Drilldown&lt;/a&gt;, an application that lets you quickly investigate and visualize your tracing data through a simplified, queryless experience.  &lt;/p&gt;&#xA;&lt;p&gt;And now, we’re excited to share another update that simplifies the exploration of your tracing data: &lt;a href=&#34;/products/cloud/traces/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Cloud Traces&lt;/a&gt;, the fully managed distributed tracing system powered by &lt;a href=&#34;/oss/tempo/&#34;&gt;Grafana Tempo&lt;/a&gt;, now &lt;a href=&#34;/whats-new/2025-08-08-access-tracing-data-using-mcp-server-in-grafana-cloud-traces/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;directly supports the Model Context Protocol (MCP)&lt;/a&gt;. &lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://modelcontextprotocol.io/overview&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;MCP&lt;/a&gt; is a widely adopted protocol, developed by Anthropic, that standardizes how applications provide context to large language models (LLMs). By integrating MCP with Grafana Cloud Traces, you can now leverage LLM-powered tools like &lt;a href=&#34;https://www.anthropic.com/claude-code&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Claude Code&lt;/a&gt; or &lt;a href=&#34;https://cursor.com/en&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Cursor&lt;/a&gt; to analyze and derive value from your tracing data. This allows you to more easily understand interactions between your services, as well as investigate and diagnose issues faster.&lt;/p&gt;&#xA;&lt;p&gt;In this post, we’ll walk through an example of how to connect Claude Code to Grafana Cloud Traces, so you can get started today.&lt;/p&gt;&#xA;&lt;h2 id=&#34;using-claude-code-with-grafana-cloud-traces&#34;&gt;Using Claude Code with Grafana Cloud Traces&lt;/h2&gt;&#xA;&lt;p&gt;Let’s take a quick look at how to connect Claude Code to Grafana Cloud so we can ask some questions about our tracing data. &lt;em&gt;Note: Even though I&amp;rsquo;m using Claude Code in this example, MCP is supported by&lt;/em&gt; &lt;em&gt;&lt;a href=&#34;https://modelcontextprotocol.io/clients&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;many other LLM agents&lt;/a&gt;__, such as Cursor and ChatGPT.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;setup&#34;&gt;Setup &lt;/h3&gt;&#xA;&lt;p&gt;Setting up Claude to use the Tempo MCP endpoint in Grafana Cloud requires a &lt;a href=&#34;/docs/grafana-cloud/developer-resources/api-reference/cloud-api/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Cloud API&lt;/a&gt; token and some configuration in Claude. &lt;/p&gt;&#xA;&lt;p&gt;Claude is able to pass an HTTP header — which is technically all we need for &lt;a href=&#34;https://en.wikipedia.org/wiki/Basic_access_authentication&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;basic authentication&lt;/a&gt; — but since Claude Code doesn&amp;rsquo;t have direct support for authentication, we will need to do some finagling with our token and tenant ID.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Generate or use an already existing Grafana Cloud API token with the &lt;strong&gt;traces:read&lt;/strong&gt; permission. To do this, first go to the admin portal and click on the &lt;strong&gt;Details&lt;/strong&gt; button on your Tempo stack.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1046x472/3666f5e54b/grafana-cloud-traces-mcp-send-traces.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1046x472/3666f5e54b/grafana-cloud-traces-mcp-send-traces.png&#34;alt=&#34;Interface for Tempo setup, featuring a logo, brief instructions, and two buttons labeled &amp;#39;Send Traces&amp;#39; and &amp;#39;Details.&amp;#39;&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1046x472/3666f5e54b/grafana-cloud-traces-mcp-send-traces.png&#34;&#xA;alt=&#34;Interface for Tempo setup, featuring a logo, brief instructions, and two buttons labeled &amp;#39;Send Traces&amp;#39; and &amp;#39;Details.&amp;#39;&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt; Then, Click &lt;strong&gt;Generate now&lt;/strong&gt; to create the token. Also make sure to note your &lt;strong&gt;User&lt;/strong&gt; and &lt;strong&gt;URL&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x604/77a6a78c6c/grafana-cloud-traces-mcp-data-source-settings.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x604/77a6a78c6c/grafana-cloud-traces-mcp-data-source-settings.png&#34;alt=&#34;Grafana data source settings with fields for name, type, URL, basic auth checked, user, and password instructions.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x604/77a6a78c6c/grafana-cloud-traces-mcp-data-source-settings.png&#34;&#xA;alt=&#34;Grafana data source settings with fields for name, type, URL, basic auth checked, user, and password instructions.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt; 2. Generate a basic auth header using your user and token. We are going to assign it to an environment variable that Claude Code will use for authentication when making calls to the Grafana Cloud Traces MCP endpoint.&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;export GCT_AUTH=$(echo -n &amp;#39;&amp;lt;user&amp;gt;:&amp;lt;token&amp;gt;&amp;#39; | base64)&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;3. Set up the MCP endpoint in Claude Code that references the environment variable above.&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;claude mcp add tempo https://&amp;lt;URL&amp;gt;/api/mcp -t http -H &amp;#39;Authorization: Basic ${GCT_AUTH}&amp;#39;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;Note that the full URL will look something like: &lt;code&gt;https://tempo-us-central1.grafana.net/tempo/api/mcp&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;4. Test the connection. If Tempo is not showing connected, you can run &lt;code&gt;claude –debug&lt;/code&gt; to get detailed information.&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;claude mcp list&#xA;Checking MCP server health...&#xA;tempo: https://&amp;lt;URL&amp;gt;/tempo/api/mcp (HTTP) - ✓ Connected&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h3 id=&#34;hey-claude-im-new&#34;&gt;Hey, Claude! I&amp;rsquo;m new.&lt;/h3&gt;&#xA;&lt;p&gt;Now that you’ve connected Claude to your Grafana Cloud Traces endpoint, it’s time to ask some questions. Explore your data and learn what works best for you. Recently, I had a quick chat with Claude, using data from the &lt;a href=&#34;https://github.com/grafana/pyroscope&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Grafana Pyroscope&lt;/a&gt; development environment as an example.&lt;/p&gt;&#xA;&lt;p&gt;In my first conversation, I pretended to be a new Pyroscope developer to see what Claude could teach me about my services. Tracing data can be a fantastic onboarding tool because it contains detailed information about how services are actually communicating with each other in real time.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;I asked Claude:&lt;/strong&gt; &lt;code&gt;I&#39;m a new Pyroscope developer, recently hired at Grafana Labs. Can you use tracing data to teach me how my services interact?&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;Claude queried attribute values and immediately began looking for traces:&lt;/p&gt;&#xA;&lt;p&gt;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x444/d3a17f4393/grafana-cloud-traces-mcp-claude-get-started.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x444/d3a17f4393/grafana-cloud-traces-mcp-claude-get-started.png&#34;alt=&#34;A code snippet showing Claude querying attribute values.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x444/d3a17f4393/grafana-cloud-traces-mcp-claude-get-started.png&#34;&#xA;alt=&#34;A code snippet showing Claude querying attribute values.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt; After pulling a few traces, it was capable of identifying the major services in Pyroscope:&lt;/p&gt;&#xA;&lt;p&gt;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x456/b9dce27538/grafana-cloud-traces-mcp-core-pyroscope-services.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x456/b9dce27538/grafana-cloud-traces-mcp-core-pyroscope-services.png&#34;alt=&#34;List of core Pyroscope services with descriptions, including roles like receiving profiling data, routing, handling queries, and storage interface.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x456/b9dce27538/grafana-cloud-traces-mcp-core-pyroscope-services.png&#34;&#xA;alt=&#34;List of core Pyroscope services with descriptions, including roles like receiving profiling data, routing, handling queries, and storage interface.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt; And it described how the read path worked:&lt;/p&gt;&#xA;&lt;p&gt;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x719/6e975d4640/grafana-cloud-traces-mcp-read-path.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x719/6e975d4640/grafana-cloud-traces-mcp-read-path.png&#34;alt=&#34;Flow analysis diagram showing a step-by-step breakdown of query path.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x719/6e975d4640/grafana-cloud-traces-mcp-read-path.png&#34;&#xA;alt=&#34;Flow analysis diagram showing a step-by-step breakdown of query path.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt; It also suggested a few other &lt;a href=&#34;/docs/tempo/latest/traceql/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;TraceQL&lt;/a&gt; queries to use if I was interested in learning more. Not bad! &lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x343/f146bca296/grafana-cloud-traces-mcp-traceql-query-suggestions.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x343/f146bca296/grafana-cloud-traces-mcp-traceql-query-suggestions.png&#34;alt=&#34;Code snippet showing TraceQL queries for finding slow queries, service interactions, and errors in a distributed system.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x343/f146bca296/grafana-cloud-traces-mcp-traceql-query-suggestions.png&#34;&#xA;alt=&#34;Code snippet showing TraceQL queries for finding slow queries, service interactions, and errors in a distributed system.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;h3 id=&#34;claude-whats-breaking&#34;&gt;Claude, what&amp;rsquo;s breaking?&lt;/h3&gt;&#xA;&lt;p&gt;As all of us who work on complex distributed systems know: something is always failing somewhere. Grafana Pyroscope is a fantastic continuous profiling database, but it&amp;rsquo;s no exception to this rule! (For the record, neither is Tempo). &lt;/p&gt;&#xA;&lt;p&gt;Fortunately, tracing data is a great signal to find these errors and how they propagate through our services. Let&amp;rsquo;s revisit our example with the Pyroscope development environment to see what Claude&amp;rsquo;s capable of.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;I asked:&lt;/strong&gt; &lt;code&gt;Are there any errors in Pyroscope I should investigate?&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;First, Claude used a simple TraceQL query to search for errors in Pyroscope services:&lt;/p&gt;&#xA;&lt;p&gt;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x242/a723569220/grafana-cloud-traces-mcp-traceql-query-error-search.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x242/a723569220/grafana-cloud-traces-mcp-traceql-query-error-search.png&#34;alt=&#34;A screenshot showing a search query for errors, with a message indicating multiple errors found.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x242/a723569220/grafana-cloud-traces-mcp-traceql-query-error-search.png&#34;&#xA;alt=&#34;A screenshot showing a search query for errors, with a message indicating multiple errors found.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt; To investigate further, Claude tried a few incorrect TraceQL metrics queries, pulled the metrics docs, and then was able to write a correct query to find error rates by service. This pattern of trying an invalid query, referring to the docs, and correcting itself is actually quite common.&lt;br /&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x493/0d69861bc7/grafana-cloud-traces-mcp-corrected-traceql-queries.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x493/0d69861bc7/grafana-cloud-traces-mcp-corrected-traceql-queries.png&#34;alt=&#34;A screenshot showing syntax errors in a query.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x493/0d69861bc7/grafana-cloud-traces-mcp-corrected-traceql-queries.png&#34;&#xA;alt=&#34;A screenshot showing syntax errors in a query.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt; Finally, it found and categorized two major errors and recommended some improvements. Nice!&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x972/3897a5fd39/grafana-cloud-traces-mcp-error-rate-summary.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x972/3897a5fd39/grafana-cloud-traces-mcp-error-rate-summary.png&#34;alt=&#34;A screenshot of a console displaying error messages and warnings about critical issues.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x972/3897a5fd39/grafana-cloud-traces-mcp-error-rate-summary.png&#34;&#xA;alt=&#34;A screenshot of a console displaying error messages and warnings about critical issues.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;h3 id=&#34;claude-lets-make-things-better&#34;&gt;Claude, let&amp;rsquo;s make things better&lt;/h3&gt;&#xA;&lt;p&gt;For my final question, I wanted to use the Pyroscope codebase along with Claude to make actual improvements to my services. Another great use of tracing data is identifying the causes of latency and more effectively allocating developers to make improvements.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;I asked:&lt;/strong&gt; &lt;code&gt;Help me reduce latency on the read path of Pyroscope. Use data from Tempo to help decide where to focus my efforts.&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;First, Claude executed a handful of metrics and search queries to gain information about where time is spent in the query path.&lt;/p&gt;&#xA;&lt;p&gt;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x779/a1931c2f76/grafana-cloud-traces-mcp-time-spent-in-query-path.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x779/a1931c2f76/grafana-cloud-traces-mcp-time-spent-in-query-path.png&#34;alt=&#34;A screenshot of code snippet showing queries for analyzing latency and request rates.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x779/a1931c2f76/grafana-cloud-traces-mcp-time-spent-in-query-path.png&#34;&#xA;alt=&#34;A screenshot of code snippet showing queries for analyzing latency and request rates.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt; Using this data, Claude summarized operations on the read path and presented its findings. (Honestly, things already seem fast to me!)&lt;/p&gt;&#xA;&lt;p&gt;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x574/f8cb4e19bb/grafana-cloud-traces-mcp-trace-analysis-summary.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x574/f8cb4e19bb/grafana-cloud-traces-mcp-trace-analysis-summary.png&#34;alt=&#34;A screenshot of a trace analysis summary highlighting key operations, latency patterns, bottlenecks, and a recommendation for parallel query execution.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x574/f8cb4e19bb/grafana-cloud-traces-mcp-trace-analysis-summary.png&#34;&#xA;alt=&#34;A screenshot of a trace analysis summary highlighting key operations, latency patterns, bottlenecks, and a recommendation for parallel query execution.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt; For fun, I went ahead and asked Claude to make a code change to parallelize SelectSeries as suggested and it produced a diff.&lt;/p&gt;&#xA;&lt;p&gt;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x924/54f18e66a6/grafana-cloud-traces-mcp-diff.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x924/54f18e66a6/grafana-cloud-traces-mcp-diff.png&#34;alt=&#34;A screenshot of a diff showing changes in a file.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x924/54f18e66a6/grafana-cloud-traces-mcp-diff.png&#34;&#xA;alt=&#34;A screenshot of a diff showing changes in a file.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt; Is it a good update? I suppose I should ask the Pyroscope team for a review 🙂.&lt;/p&gt;&#xA;&lt;h2 id=&#34;whats-next-and-how-to-learn-more&#34;&gt;What’s next and how to learn more  &lt;/h2&gt;&#xA;&lt;p&gt;The new MCP integration is available now in public preview in Grafana Cloud Traces, including in our Cloud free tier. It will also be available in the upcoming Grafana Tempo 2.9 release. &lt;/p&gt;&#xA;&lt;p&gt;The current &lt;a href=&#34;https://github.com/grafana/tempo/blob/main/modules/frontend/mcp.go&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;MCP implementation&lt;/a&gt; is a simple shim in front of the Tempo HTTP API, but we could definitely improve. For example, we can improve the way the data is presented to the LLM. Right now, we are sending raw JSON into Claude, but we could develop more compact text formats that are faster to process. Next, we can extend the Tempo API to allow the LLM to request subsets of a trace or trace summaries aggregated over many traces. We should be working toward high-value and high-density data. I better get to work! &lt;/p&gt;&#xA;&lt;p&gt;If you&amp;rsquo;re interested in getting involved, check out the &lt;a href=&#34;https://github.com/grafana/tempo/blob/main/docs/sources/tempo/api_docs/mcp-server.md#quick-start&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;local MCP example&lt;/a&gt;, use the feature, file issues and PRs, and let us know what you think!&lt;/p&gt;&#xA;&lt;p&gt;To learn more, you can also refer to the MCP documentation for &lt;a href=&#34;/docs/grafana-cloud/send-data/traces/mcp-server/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Cloud Traces&lt;/a&gt; and &lt;a href=&#34;/docs/tempo/next/api_docs/mcp-server/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Tempo&lt;/a&gt;.  &lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;/products/cloud/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Cloud&lt;/a&gt;&lt;/em&gt; &lt;em&gt;is the easiest way to get started with metrics, logs, traces, dashboards, and more. We have a generous forever-free tier and plans for every use case.&lt;/em&gt; &lt;em&gt;&lt;a href=&#34;/auth/sign-up/create-user/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Sign up for free now&lt;/a&gt;__!&lt;/em&gt;&lt;/p&gt;】&lt;p&gt;Distributed tracing data is a unique and powerful observability signal, allowing you to understand how your services interact and the relationships between them. Sometimes it can be difficult, however, to turn raw tracing data into actionable insights. &lt;/p&gt;&#xA;&lt;p&gt;This is exactly why we introduced &lt;a href=&#34;/docs/grafana-cloud/visualizations/simplified-exploration/traces/get-started/&#34;&gt;Grafana Traces Drilldown&lt;/a&gt;, an application that lets you quickly investigate and visualize your tracing data through a simplified, queryless experience.  &lt;/p&gt;&#xA;&lt;p&gt;And now, we’re excited to share another update that simplifies the exploration of your tracing data: &lt;a href=&#34;/products/cloud/traces/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Cloud Traces&lt;/a&gt;, the fully managed distributed tracing system powered by &lt;a href=&#34;/oss/tempo/&#34;&gt;Grafana Tempo&lt;/a&gt;, now &lt;a href=&#34;/whats-new/2025-08-08-access-tracing-data-using-mcp-server-in-grafana-cloud-traces/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;directly supports the Model Context Protocol (MCP)&lt;/a&gt;. &lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://modelcontextprotocol.io/overview&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;MCP&lt;/a&gt; is a widely adopted protocol, developed by Anthropic, that standardizes how applications provide context to large language models (LLMs). By integrating MCP with Grafana Cloud Traces, you can now leverage LLM-powered tools like &lt;a href=&#34;https://www.anthropic.com/claude-code&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Claude Code&lt;/a&gt; or &lt;a href=&#34;https://cursor.com/en&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Cursor&lt;/a&gt; to analyze and derive value from your tracing data. This allows you to more easily understand interactions between your services, as well as investigate and diagnose issues faster.&lt;/p&gt;&#xA;&lt;p&gt;In this post, we’ll walk through an example of how to connect Claude Code to Grafana Cloud Traces, so you can get started today.&lt;/p&gt;&#xA;&lt;h2 id=&#34;using-claude-code-with-grafana-cloud-traces&#34;&gt;Using Claude Code with Grafana Cloud Traces&lt;/h2&gt;&#xA;&lt;p&gt;Let’s take a quick look at how to connect Claude Code to Grafana Cloud so we can ask some questions about our tracing data. &lt;em&gt;Note: Even though I&amp;rsquo;m using Claude Code in this example, MCP is supported by&lt;/em&gt; &lt;em&gt;&lt;a href=&#34;https://modelcontextprotocol.io/clients&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;many other LLM agents&lt;/a&gt;__, such as Cursor and ChatGPT.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;setup&#34;&gt;Setup &lt;/h3&gt;&#xA;&lt;p&gt;Setting up Claude to use the Tempo MCP endpoint in Grafana Cloud requires a &lt;a href=&#34;/docs/grafana-cloud/developer-resources/api-reference/cloud-api/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Cloud API&lt;/a&gt; token and some configuration in Claude. &lt;/p&gt;&#xA;&lt;p&gt;Claude is able to pass an HTTP header — which is technically all we need for &lt;a href=&#34;https://en.wikipedia.org/wiki/Basic_access_authentication&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;basic authentication&lt;/a&gt; — but since Claude Code doesn&amp;rsquo;t have direct support for authentication, we will need to do some finagling with our token and tenant ID.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Generate or use an already existing Grafana Cloud API token with the &lt;strong&gt;traces:read&lt;/strong&gt; permission. To do this, first go to the admin portal and click on the &lt;strong&gt;Details&lt;/strong&gt; button on your Tempo stack.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1046x472/3666f5e54b/grafana-cloud-traces-mcp-send-traces.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1046x472/3666f5e54b/grafana-cloud-traces-mcp-send-traces.png&#34;alt=&#34;Interface for Tempo setup, featuring a logo, brief instructions, and two buttons labeled &amp;#39;Send Traces&amp;#39; and &amp;#39;Details.&amp;#39;&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1046x472/3666f5e54b/grafana-cloud-traces-mcp-send-traces.png&#34;&#xA;alt=&#34;Interface for Tempo setup, featuring a logo, brief instructions, and two buttons labeled &amp;#39;Send Traces&amp;#39; and &amp;#39;Details.&amp;#39;&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt; Then, Click &lt;strong&gt;Generate now&lt;/strong&gt; to create the token. Also make sure to note your &lt;strong&gt;User&lt;/strong&gt; and &lt;strong&gt;URL&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x604/77a6a78c6c/grafana-cloud-traces-mcp-data-source-settings.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x604/77a6a78c6c/grafana-cloud-traces-mcp-data-source-settings.png&#34;alt=&#34;Grafana data source settings with fields for name, type, URL, basic auth checked, user, and password instructions.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x604/77a6a78c6c/grafana-cloud-traces-mcp-data-source-settings.png&#34;&#xA;alt=&#34;Grafana data source settings with fields for name, type, URL, basic auth checked, user, and password instructions.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt; 2. Generate a basic auth header using your user and token. We are going to assign it to an environment variable that Claude Code will use for authentication when making calls to the Grafana Cloud Traces MCP endpoint.&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;export GCT_AUTH=$(echo -n &amp;#39;&amp;lt;user&amp;gt;:&amp;lt;token&amp;gt;&amp;#39; | base64)&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;3. Set up the MCP endpoint in Claude Code that references the environment variable above.&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;claude mcp add tempo https://&amp;lt;URL&amp;gt;/api/mcp -t http -H &amp;#39;Authorization: Basic ${GCT_AUTH}&amp;#39;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;Note that the full URL will look something like: &lt;code&gt;https://tempo-us-central1.grafana.net/tempo/api/mcp&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;4. Test the connection. If Tempo is not showing connected, you can run &lt;code&gt;claude –debug&lt;/code&gt; to get detailed information.&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;claude mcp list&#xA;Checking MCP server health...&#xA;tempo: https://&amp;lt;URL&amp;gt;/tempo/api/mcp (HTTP) - ✓ Connected&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h3 id=&#34;hey-claude-im-new&#34;&gt;Hey, Claude! I&amp;rsquo;m new.&lt;/h3&gt;&#xA;&lt;p&gt;Now that you’ve connected Claude to your Grafana Cloud Traces endpoint, it’s time to ask some questions. Explore your data and learn what works best for you. Recently, I had a quick chat with Claude, using data from the &lt;a href=&#34;https://github.com/grafana/pyroscope&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Grafana Pyroscope&lt;/a&gt; development environment as an example.&lt;/p&gt;&#xA;&lt;p&gt;In my first conversation, I pretended to be a new Pyroscope developer to see what Claude could teach me about my services. Tracing data can be a fantastic onboarding tool because it contains detailed information about how services are actually communicating with each other in real time.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;I asked Claude:&lt;/strong&gt; &lt;code&gt;I&#39;m a new Pyroscope developer, recently hired at Grafana Labs. Can you use tracing data to teach me how my services interact?&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;Claude queried attribute values and immediately began looking for traces:&lt;/p&gt;&#xA;&lt;p&gt;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x444/d3a17f4393/grafana-cloud-traces-mcp-claude-get-started.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x444/d3a17f4393/grafana-cloud-traces-mcp-claude-get-started.png&#34;alt=&#34;A code snippet showing Claude querying attribute values.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x444/d3a17f4393/grafana-cloud-traces-mcp-claude-get-started.png&#34;&#xA;alt=&#34;A code snippet showing Claude querying attribute values.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt; After pulling a few traces, it was capable of identifying the major services in Pyroscope:&lt;/p&gt;&#xA;&lt;p&gt;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x456/b9dce27538/grafana-cloud-traces-mcp-core-pyroscope-services.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x456/b9dce27538/grafana-cloud-traces-mcp-core-pyroscope-services.png&#34;alt=&#34;List of core Pyroscope services with descriptions, including roles like receiving profiling data, routing, handling queries, and storage interface.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x456/b9dce27538/grafana-cloud-traces-mcp-core-pyroscope-services.png&#34;&#xA;alt=&#34;List of core Pyroscope services with descriptions, including roles like receiving profiling data, routing, handling queries, and storage interface.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt; And it described how the read path worked:&lt;/p&gt;&#xA;&lt;p&gt;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x719/6e975d4640/grafana-cloud-traces-mcp-read-path.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x719/6e975d4640/grafana-cloud-traces-mcp-read-path.png&#34;alt=&#34;Flow analysis diagram showing a step-by-step breakdown of query path.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x719/6e975d4640/grafana-cloud-traces-mcp-read-path.png&#34;&#xA;alt=&#34;Flow analysis diagram showing a step-by-step breakdown of query path.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt; It also suggested a few other &lt;a href=&#34;/docs/tempo/latest/traceql/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;TraceQL&lt;/a&gt; queries to use if I was interested in learning more. Not bad! &lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x343/f146bca296/grafana-cloud-traces-mcp-traceql-query-suggestions.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x343/f146bca296/grafana-cloud-traces-mcp-traceql-query-suggestions.png&#34;alt=&#34;Code snippet showing TraceQL queries for finding slow queries, service interactions, and errors in a distributed system.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x343/f146bca296/grafana-cloud-traces-mcp-traceql-query-suggestions.png&#34;&#xA;alt=&#34;Code snippet showing TraceQL queries for finding slow queries, service interactions, and errors in a distributed system.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;h3 id=&#34;claude-whats-breaking&#34;&gt;Claude, what&amp;rsquo;s breaking?&lt;/h3&gt;&#xA;&lt;p&gt;As all of us who work on complex distributed systems know: something is always failing somewhere. Grafana Pyroscope is a fantastic continuous profiling database, but it&amp;rsquo;s no exception to this rule! (For the record, neither is Tempo). &lt;/p&gt;&#xA;&lt;p&gt;Fortunately, tracing data is a great signal to find these errors and how they propagate through our services. Let&amp;rsquo;s revisit our example with the Pyroscope development environment to see what Claude&amp;rsquo;s capable of.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;I asked:&lt;/strong&gt; &lt;code&gt;Are there any errors in Pyroscope I should investigate?&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;First, Claude used a simple TraceQL query to search for errors in Pyroscope services:&lt;/p&gt;&#xA;&lt;p&gt;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x242/a723569220/grafana-cloud-traces-mcp-traceql-query-error-search.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x242/a723569220/grafana-cloud-traces-mcp-traceql-query-error-search.png&#34;alt=&#34;A screenshot showing a search query for errors, with a message indicating multiple errors found.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x242/a723569220/grafana-cloud-traces-mcp-traceql-query-error-search.png&#34;&#xA;alt=&#34;A screenshot showing a search query for errors, with a message indicating multiple errors found.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt; To investigate further, Claude tried a few incorrect TraceQL metrics queries, pulled the metrics docs, and then was able to write a correct query to find error rates by service. This pattern of trying an invalid query, referring to the docs, and correcting itself is actually quite common.&lt;br /&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x493/0d69861bc7/grafana-cloud-traces-mcp-corrected-traceql-queries.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x493/0d69861bc7/grafana-cloud-traces-mcp-corrected-traceql-queries.png&#34;alt=&#34;A screenshot showing syntax errors in a query.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x493/0d69861bc7/grafana-cloud-traces-mcp-corrected-traceql-queries.png&#34;&#xA;alt=&#34;A screenshot showing syntax errors in a query.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt; Finally, it found and categorized two major errors and recommended some improvements. Nice!&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x972/3897a5fd39/grafana-cloud-traces-mcp-error-rate-summary.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x972/3897a5fd39/grafana-cloud-traces-mcp-error-rate-summary.png&#34;alt=&#34;A screenshot of a console displaying error messages and warnings about critical issues.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x972/3897a5fd39/grafana-cloud-traces-mcp-error-rate-summary.png&#34;&#xA;alt=&#34;A screenshot of a console displaying error messages and warnings about critical issues.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;h3 id=&#34;claude-lets-make-things-better&#34;&gt;Claude, let&amp;rsquo;s make things better&lt;/h3&gt;&#xA;&lt;p&gt;For my final question, I wanted to use the Pyroscope codebase along with Claude to make actual improvements to my services. Another great use of tracing data is identifying the causes of latency and more effectively allocating developers to make improvements.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;I asked:&lt;/strong&gt; &lt;code&gt;Help me reduce latency on the read path of Pyroscope. Use data from Tempo to help decide where to focus my efforts.&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;First, Claude executed a handful of metrics and search queries to gain information about where time is spent in the query path.&lt;/p&gt;&#xA;&lt;p&gt;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x779/a1931c2f76/grafana-cloud-traces-mcp-time-spent-in-query-path.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x779/a1931c2f76/grafana-cloud-traces-mcp-time-spent-in-query-path.png&#34;alt=&#34;A screenshot of code snippet showing queries for analyzing latency and request rates.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x779/a1931c2f76/grafana-cloud-traces-mcp-time-spent-in-query-path.png&#34;&#xA;alt=&#34;A screenshot of code snippet showing queries for analyzing latency and request rates.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt; Using this data, Claude summarized operations on the read path and presented its findings. (Honestly, things already seem fast to me!)&lt;/p&gt;&#xA;&lt;p&gt;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x574/f8cb4e19bb/grafana-cloud-traces-mcp-trace-analysis-summary.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x574/f8cb4e19bb/grafana-cloud-traces-mcp-trace-analysis-summary.png&#34;alt=&#34;A screenshot of a trace analysis summary highlighting key operations, latency patterns, bottlenecks, and a recommendation for parallel query execution.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x574/f8cb4e19bb/grafana-cloud-traces-mcp-trace-analysis-summary.png&#34;&#xA;alt=&#34;A screenshot of a trace analysis summary highlighting key operations, latency patterns, bottlenecks, and a recommendation for parallel query execution.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt; For fun, I went ahead and asked Claude to make a code change to parallelize SelectSeries as suggested and it produced a diff.&lt;/p&gt;&#xA;&lt;p&gt;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x924/54f18e66a6/grafana-cloud-traces-mcp-diff.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x924/54f18e66a6/grafana-cloud-traces-mcp-diff.png&#34;alt=&#34;A screenshot of a diff showing changes in a file.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x924/54f18e66a6/grafana-cloud-traces-mcp-diff.png&#34;&#xA;alt=&#34;A screenshot of a diff showing changes in a file.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt; Is it a good update? I suppose I should ask the Pyroscope team for a review 🙂.&lt;/p&gt;&#xA;&lt;h2 id=&#34;whats-next-and-how-to-learn-more&#34;&gt;What’s next and how to learn more  &lt;/h2&gt;&#xA;&lt;p&gt;The new MCP integration is available now in public preview in Grafana Cloud Traces, including in our Cloud free tier. It will also be available in the upcoming Grafana Tempo 2.9 release. &lt;/p&gt;&#xA;&lt;p&gt;The current &lt;a href=&#34;https://github.com/grafana/tempo/blob/main/modules/frontend/mcp.go&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;MCP implementation&lt;/a&gt; is a simple shim in front of the Tempo HTTP API, but we could definitely improve. For example, we can improve the way the data is presented to the LLM. Right now, we are sending raw JSON into Claude, but we could develop more compact text formats that are faster to process. Next, we can extend the Tempo API to allow the LLM to request subsets of a trace or trace summaries aggregated over many traces. We should be working toward high-value and high-density data. I better get to work! &lt;/p&gt;&#xA;&lt;p&gt;If you&amp;rsquo;re interested in getting involved, check out the &lt;a href=&#34;https://github.com/grafana/tempo/blob/main/docs/sources/tempo/api_docs/mcp-server.md#quick-start&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;local MCP example&lt;/a&gt;, use the feature, file issues and PRs, and let us know what you think!&lt;/p&gt;&#xA;&lt;p&gt;To learn more, you can also refer to the MCP documentation for &lt;a href=&#34;/docs/grafana-cloud/send-data/traces/mcp-server/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Cloud Traces&lt;/a&gt; and &lt;a href=&#34;/docs/tempo/next/api_docs/mcp-server/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Tempo&lt;/a&gt;.  &lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;/products/cloud/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Cloud&lt;/a&gt;&lt;/em&gt; &lt;em&gt;is the easiest way to get started with metrics, logs, traces, dashboards, and more. We have a generous forever-free tier and plans for every use case.&lt;/em&gt; &lt;em&gt;&lt;a href=&#34;/auth/sign-up/create-user/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Sign up for free now&lt;/a&gt;__!&lt;/em&gt;&lt;/p&gt;</description>
      <pubDate>Wed, 13 Aug 2025 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Observability trends in Brazil: insights from our localized survey】Observability trends in Brazil: insights from our localized survey</title>
      <link>https://grafana.com/blog/2025/08/12/observability-trends-in-brazil-insights-from-our-localized-survey/</link>
      <description>【&lt;p&gt;Organizations in Brazil are eager to adopt some of the latest observability trends and technologies as they look to keep their software running as smoothly as possible, according to analysis of a micro survey recently conducted by Grafana Labs.&lt;/p&gt;&#xA;&lt;p&gt;Observability is an evolving space, and this is the first time Grafana Labs has run a Brazilian version of our annual &lt;a href=&#34;/observability-survey/&#34;&gt;Observability Survey&lt;/a&gt;. It’s part of our efforts to better understand how organizations there are adopting observability and to share that information with the growing Grafana community within the region and abroad.&lt;/p&gt;&#xA;&lt;p&gt;In this blog post, we’ll share the highlights from the survey results, including:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;How Brazilian organizations are juggling so many tools and data sources&lt;/li&gt;&#xA;&lt;li&gt;The varying degrees of maturity in the market and how that&amp;rsquo;s pushing companies to adopt new techniques&lt;/li&gt;&#xA;&lt;li&gt;The importance of cost, ease of use, and AI in selecting observability tools, as well as the relevance of observability at the highest levels of Brazilian companies&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Continue reading to learn more about observability in Brazil, and check out our &lt;a href=&#34;https://play.grafana.org/goto/9AdIEblHg?orgId=1&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;interactive Grafana dashboard&lt;/a&gt; where you can analyze visualizations of statistics from our global Observability Survey, which includes many of the topics we’ll discuss here and more.&lt;/p&gt;&#xA;&lt;h2 id=&#34;brazilian-organizations-juggle-lots-of-observability-tools-and-data-sources&#34;&gt;Brazilian organizations juggle lots of observability tools and data sources &lt;/h2&gt;&#xA;&lt;p&gt;Businesses rely on observability tools and data sources such as metrics, logs, and traces to get deeper insights into the behavior of their systems. And as those systems scale and grow in complexity, it can often translate to teams using lots of tools and data to get a more holistic view.&lt;/p&gt;&#xA;&lt;p&gt;And that&amp;rsquo;s what we&amp;rsquo;re seeing in Brazil, where the overwhelming majority of organizations (96%) use multiple observability technologies to help keep their systems running properly—and nearly a quarter of organizations (24%) are juggling six or more. &lt;/p&gt;&#xA;&lt;p&gt;In addition, 89% of survey respondents say they&amp;rsquo;re unifying multiple data sources in Grafana (7% have just one, and 4% don&amp;rsquo;t have any data sources configured in Grafana). Brazilian organizations are most likely to have two to three data sources configured, but some are pulling in far more than that, with one in 10 organizations pulling in data from more than 20 data sources, and 5% using an astonishing 100-plus.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1371x790/e9fdb9ac0c/brazil-tech-data-sources.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1371x790/e9fdb9ac0c/brazil-tech-data-sources.png&#34;alt=&#34;Bar chart showing observability tech and data source adoption in Brazil, with usage percentages across different ranges for each category.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1371x790/e9fdb9ac0c/brazil-tech-data-sources.png&#34;&#xA;alt=&#34;Bar chart showing observability tech and data source adoption in Brazil, with usage percentages across different ranges for each category.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;h3 id=&#34;saas-vs-self-managed-and-the-role-of-open-standards&#34;&gt;SaaS vs. self-managed, and the role of open standards&lt;/h3&gt;&#xA;&lt;p&gt;So how are these companies handling all that data? The majority (56%) &amp;ldquo;mostly&amp;rdquo; or &amp;ldquo;only&amp;rdquo; manage their own observability stacks, which can present some real challenges when you have to wrangle disparate tools and data sources and maintain the underlying infrastructure. That&amp;rsquo;s on par with the rest of the world (58%), but there are some interesting differences when it comes to the use of SaaS.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1371x669/a964989ae8/brazil-observability-setup.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1371x669/a964989ae8/brazil-observability-setup.png&#34;alt=&#34;Bar chart showing observability setups in Brazil and globally: SaaS only, Mostly SaaS, Roughly equal, Mostly self-managed, Self-managed only.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1371x669/a964989ae8/brazil-observability-setup.png&#34;&#xA;alt=&#34;Bar chart showing observability setups in Brazil and globally: SaaS only, Mostly SaaS, Roughly equal, Mostly self-managed, Self-managed only.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;p&gt;As you can see in the chart above, Brazilians are more likely to split their setup between SaaS and self-managed, while the rest of the world is more inclined to lean more toward SaaS. Organizations turn to SaaS to offload management of the underlying platform to an observability vendor like Grafana Labs so they can focus instead on improving the health and resilience of their systems. The rest of the world is &lt;a href=&#34;/blog/2025/03/25/observability-survey-takeaways/?pg=survey-2025&amp;amp;plcmt=toc-cta-1#market-awareness-is-on-the-rise&#34;&gt;increasingly moving to SaaS&lt;/a&gt;, according to our global 2025 Observability Survey, so it will be interesting to see if Brazil follows the same pattern in the years to come.&lt;/p&gt;&#xA;&lt;p&gt;Another key driver of observability adoption is the use of open source software and open standards to facilitate the movement and unification of multiple data types. It&amp;rsquo;s no surprise to see Brazilian organizations prioritize open standards in their own workflows. In total, 60% are &amp;ldquo;mostly&amp;rdquo; or &amp;ldquo;only&amp;rdquo; using open source licensing, and an additional 21% are equally split between OSS and commercial licenses. And the majority are using Prometheus (71%) and OpenTelemetry (61%) in some capacity (in both cases, this includes respondents who said they were &amp;ldquo;investigating,&amp;rdquo; &amp;ldquo;building a POC,&amp;rdquo; &amp;ldquo;using in production,&amp;rdquo; using extensively,&amp;quot; or &amp;ldquo;using exclusively&amp;rdquo;). &lt;/p&gt;&#xA;&lt;p&gt;Prometheus and OpenTelemetry are both key to maintaining open standards in observability that help teams centralize and standardize their telemetry. Prometheus is the more established of the two, so it makes sense that it has more adoption. As we track changes in the Brazilian market going forward, it will be interesting to see if OpenTelemetry, which is quickly becoming another de facto standard in the observability space, will eventually catch up with Prometheus. &lt;/p&gt;&#xA;&lt;h2 id=&#34;brazilian-teams-are-at-different-levels-of-observability-maturity&#34;&gt;Brazilian teams are at different levels of observability maturity&lt;/h2&gt;&#xA;&lt;p&gt;The maturity of the Brazilian observability market is a bit of a mixed bag. For example, despite the large number of tools and data sources in use—as well as the commitment to open source and self-managed setups—Brazilian organizations aren&amp;rsquo;t as likely to use what we at Grafana Labs consider the &lt;em&gt;most mature&lt;/em&gt; approach to observability. &lt;/p&gt;&#xA;&lt;p&gt;We tend to favor a systematic, centralized approach that can get ahead of problems and incorporate observability at every stage of the software lifecycle. In addition, observability needs to be able to scale so best practices are spread across the organization. &lt;/p&gt;&#xA;&lt;p&gt;Survey respondents in Brazil who said they are using centralized observability have seen between 15% and 40% savings in their observability costs. Or, as one platform team member from a small Brazilian software and technology company put it, centralized observability provides &amp;ldquo;greater agility in identifying and resolving problems or preventing them, freeing up hours that would otherwise be spent remediating and/or resolving them.&amp;rdquo; &lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1371x944/ceed2909cc/brazil-approach-to-observability.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1371x944/ceed2909cc/brazil-approach-to-observability.png&#34;alt=&#34;Chart showing observability approaches: Centralized support (Brazil 28%, Global 38%), Centralized operations (Brazil 19%, Global 23%), Observability experts (Brazil 18%, Global 18%), Operations team (Brazil 22%, Global 15%), No observability (Brazil 12%, Global 4%), Other (Brazil 1%, Global 3%).&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1371x944/ceed2909cc/brazil-approach-to-observability.png&#34;&#xA;alt=&#34;Chart showing observability approaches: Centralized support (Brazil 28%, Global 38%), Centralized operations (Brazil 19%, Global 23%), Observability experts (Brazil 18%, Global 18%), Operations team (Brazil 22%, Global 15%), No observability (Brazil 12%, Global 4%), Other (Brazil 1%, Global 3%).&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;p&gt;As you can see from the chart above, the &amp;ldquo;Centralized observability (support)&amp;rdquo; approach most closely aligns with that ethos, but there&amp;rsquo;s a delta of 10 percentage points between Brazil and the rest of the world when it comes to adoption. &lt;/p&gt;&#xA;&lt;h3 id=&#34;brazilian-organizations-favor-finops-and-slos&#34;&gt;Brazilian organizations favor FinOps and SLOs&lt;/h3&gt;&#xA;&lt;p&gt;And yet, respondents to our Brazilian survey are showing much more interest in emerging techniques that have the potential to be integral to a holistic approach to observability.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1371x1236/45c597db9a/brazil-emerging-tech.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1371x1236/45c597db9a/brazil-emerging-tech.png&#34;alt=&#34;Bar charts showing relevance of SLOs and FinOps in Brazil and globally.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1371x1236/45c597db9a/brazil-emerging-tech.png&#34;&#xA;alt=&#34;Bar charts showing relevance of SLOs and FinOps in Brazil and globally.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;p&gt;When you look at the comparison above, you&amp;rsquo;ll see that Brazilian organizations are much more likely to use SLOs in some capacity (&amp;ldquo;investigating,&amp;rdquo; &amp;ldquo;POC,&amp;rdquo; &amp;ldquo;in production,&amp;rdquo; &amp;ldquo;using extensively,&amp;rdquo; &amp;ldquo;using exclusively&amp;rdquo;) than the rest of the world (93% vs. 73%). The same goes for FinOps (85% vs. 55%).&lt;/p&gt;&#xA;&lt;p&gt;We see SLOs as an important &lt;a href=&#34;/tags/grafana-slo/&#34;&gt;framework for defining and achieving reliability goals&lt;/a&gt;. When we asked about the most important outcome these organizations hope to achieve, the most common response was reducing mean time to resolution (44%), followed by better accountability (22%) and reduction in alert noise (21%). &lt;/p&gt;&#xA;&lt;p&gt;Meanwhile, FinOps is an emerging area that can help you better understand and manage your cost controls. We&amp;rsquo;re keen on the potential of FinOps here at Grafana Labs, as we recently adopted the FinOps Open Cost and Usage Specification (&lt;a href=&#34;https://focus.finops.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;FOCUS&lt;/a&gt;), a community-driven, open standard for cloud billing data, and we were encouraged to see the increased focus on FinOps in Brazil.&lt;/p&gt;&#xA;&lt;h2 id=&#34;challenges-and-solutions-pave-the-way-forward&#34;&gt;Challenges (and solutions) pave the way forward&lt;/h2&gt;&#xA;&lt;p&gt;Ultimately, all those tools and techniques are only really useful if they actually help you overcome the obstacles that prevent distributed modern systems from operating smoothly. Next, let&amp;rsquo;s look at how this is playing out in Brazil.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1371x715/9b220c018e/brazil-top-concerns.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1371x715/9b220c018e/brazil-top-concerns.png&#34;alt=&#34;Bar chart showing top observability concerns in Brazil and globally, including costs, noise, complexity, vendor lock-in, and adoption challenges.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1371x715/9b220c018e/brazil-top-concerns.png&#34;&#xA;alt=&#34;Bar chart showing top observability concerns in Brazil and globally, including costs, noise, complexity, vendor lock-in, and adoption challenges.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;p&gt;For starters, complexity (41%) is their biggest concern about observability, which makes sense considering the number of tools and data sources they&amp;rsquo;re managing, as well as the reliance on self-managed stacks. Complexity was also the most cited concern for the rest of the world (39%), so it appears to be a near universal problem in the observability space today.&lt;/p&gt;&#xA;&lt;p&gt;However, the Brazilian market is much more likely to cite &amp;ldquo;convincing management of the value&amp;rdquo; as a top concern compared to the rest of the world (34% vs. 23%), even though they&amp;rsquo;re less likely to be concerned about internal adoption (18% vs. 24%). This could explain why they&amp;rsquo;re more likely to adopt SLOs and FinOps, since they&amp;rsquo;re able to provide quantifiable evidence of the benefits of proper observability practices. &lt;/p&gt;&#xA;&lt;p&gt;However, &amp;ldquo;CTO/C-suite&amp;rdquo; was the most frequently cited response (36%) when we asked about the highest level at which observability is considered business-critical, which is actually higher than the rest of the world (33%). &lt;/p&gt;&#xA;&lt;p&gt;Other concerns point to a lack of maturity compared to the global market. Lack of process (25%) and culture (23%) were the most common challenges compared to the rest of the world, pointing to a need for more maturity—and SLOs. They&amp;rsquo;re also far less likely to cite alert fatigue as the biggest obstacle (21% vs 33%)&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1371x790/edb8f655ab/brazil-biggest-obstacle.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1371x790/edb8f655ab/brazil-biggest-obstacle.png&#34;alt=&#34;Bar chart comparing incident response obstacles in Brazil and globally, highlighting alert fatigue and lack of response processes.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1371x790/edb8f655ab/brazil-biggest-obstacle.png&#34;&#xA;alt=&#34;Bar chart comparing incident response obstacles in Brazil and globally, highlighting alert fatigue and lack of response processes.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;h3 id=&#34;brazilian-companies-are-prioritizing-cost-and-ease-of-use-in-observability&#34;&gt;Brazilian companies are prioritizing cost and ease of use in observability&lt;/h3&gt;&#xA;&lt;p&gt;So how are teams tackling these challenges? Cost (77%) and ease of use (64%) are the biggest priorities when selecting a new technology. The rest of the world also cited those as their top two priorities, though at a slightly lower rate overall (74% and 57%, respectively). Here we can also see the continued importance of open tools and standards, with the next two highest criteria being interoperability (45%) and being based on OSS (40%). &lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1371x421/a2f0649cd9/brazil-selection-criteria.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1371x421/a2f0649cd9/brazil-selection-criteria.png&#34;alt=&#34;Bar chart showing criteria for selecting observability tools: Cost, Ease of use, Future optionality, Familiarity, AI/ML capabilities, Interoperability, and Based on OSS.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1371x421/a2f0649cd9/brazil-selection-criteria.png&#34;&#xA;alt=&#34;Bar chart showing criteria for selecting observability tools: Cost, Ease of use, Future optionality, Familiarity, AI/ML capabilities, Interoperability, and Based on OSS.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;p&gt;Where the Brazilian market diverges the most from the rest of the world is in the importance of AI/ML criteria, with 27% citing it as a priority, compared to just 19% of the rest of the world. And when we asked how they&amp;rsquo;d like to see it implemented in observability, 64% said they would put  training-based alerts on their &amp;ldquo;AI/ML wishlist.&amp;rdquo; This was the most common response, followed by faster, more automated root cause analysis (49%).&lt;/p&gt;&#xA;&lt;p&gt;As we&amp;rsquo;ve all seen, the AI market is very dynamic right now, so we&amp;rsquo;ll be following these trends closely over the next year.&lt;/p&gt;&#xA;&lt;h2 id=&#34;about-the-survey&#34;&gt;About the survey &lt;/h2&gt;&#xA;&lt;p&gt;This survey was conducted at ObservabilityCON on the Road in São Paulo late last year. (And we&amp;rsquo;re headed back again this year! &lt;a href=&#34;/events/observabilitycon-on-the-road/2025/sao-paulo/&#34;&gt;Learn more about our Nov. 4 event in São Paulo.&lt;/a&gt;) In total, 1,287 people participated across a range of demographics:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Role:&lt;/strong&gt; Respondents worked in more than a dozen different roles, from individual contributors up to executives. The most commonly cited roles were SRE (28%) and platform team (20%).&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Industry:&lt;/strong&gt; Participants came from 17 different industries, with software and technology (33%) representing the largest share, followed by media and entertainment (28%).&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Size:&lt;/strong&gt; Companies of all sizes were represented in the survey, with the most common ones being those with more than 5,000 employees (35%).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Our third annual Observability Survey, which contained many of the same questions, was conducted globally and featured responses from 1,255 industry practitioners. To learn more, check out the &lt;a href=&#34;/observability-survey/&#34;&gt;main report&lt;/a&gt;, as well as the &lt;a href=&#34;https://play.grafana.org/d/feg4yc4qw3wn4b/third-annual-observability-survey?pg=survey-2025&amp;amp;plcmt=toc-cta-2&amp;amp;orgId=1&amp;amp;from=2025-03-13T02:49:20.476Z&amp;amp;to=2025-03-14T02:49:20.476Z&amp;amp;timezone=utc&amp;amp;var-region=$__all&amp;amp;var-role=$__all&amp;amp;var-size=$__all&amp;amp;var-industry=$__all&amp;amp;var-filters=%60Region%60%20in%20%28%27Europe%27,%27Asia%27,%27North%20America%27,%27Africa%27,%27South%20America%27,%27Oceania%27,%27Middle%20East%27%29%20AND%20%60Role%60%20IN%20%28%27Platform%20team%27,%27SRE%27,%27CTO%27,%27Engineering%20manager%27,%27Developer%27,%27Director%20of%20engineering%27,%27Other%27%29%20AND%20%60Size_of_organization%60%20IN%20%28%2710%20or%20fewer%20employees%27,%2711%20-%20100%20employees%27,%27101%20-%20500%20employees%27,%27501%20-%201,000%20employees%27,%271,001%20-%202,500%20employees%27,%272,501%20-%205,000%20employees%27,%275,001%2B%20employees%27%29%20AND%20%60Industry%60%20IN%20%28%27Telecommunications%27,%27Healthcare%27,%27IoT%27,%27Financial%20services%27,%27Education%27,%27Government%27,%27Applied%20Sciences%27,%27Software%20%26%20Technology%27,%27Media%20%26%20Entertainment%27,%27Travel%20%26%20Transportation%27,%27Retail%2FE-commerce%27,%27Energy%20%26%20Utilities%27,%27Automotive%20%26%20Manufacturing%27,%27Other%27%29&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;interactive dashboard&lt;/a&gt; and our &lt;a href=&#34;/blog/2025/03/25/observability-survey-takeaways/&#34;&gt;in-depth analysis&lt;/a&gt; of the survey findings.&lt;/p&gt;】&lt;p&gt;Organizations in Brazil are eager to adopt some of the latest observability trends and technologies as they look to keep their software running as smoothly as possible, according to analysis of a micro survey recently conducted by Grafana Labs.&lt;/p&gt;&#xA;&lt;p&gt;Observability is an evolving space, and this is the first time Grafana Labs has run a Brazilian version of our annual &lt;a href=&#34;/observability-survey/&#34;&gt;Observability Survey&lt;/a&gt;. It’s part of our efforts to better understand how organizations there are adopting observability and to share that information with the growing Grafana community within the region and abroad.&lt;/p&gt;&#xA;&lt;p&gt;In this blog post, we’ll share the highlights from the survey results, including:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;How Brazilian organizations are juggling so many tools and data sources&lt;/li&gt;&#xA;&lt;li&gt;The varying degrees of maturity in the market and how that&amp;rsquo;s pushing companies to adopt new techniques&lt;/li&gt;&#xA;&lt;li&gt;The importance of cost, ease of use, and AI in selecting observability tools, as well as the relevance of observability at the highest levels of Brazilian companies&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Continue reading to learn more about observability in Brazil, and check out our &lt;a href=&#34;https://play.grafana.org/goto/9AdIEblHg?orgId=1&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;interactive Grafana dashboard&lt;/a&gt; where you can analyze visualizations of statistics from our global Observability Survey, which includes many of the topics we’ll discuss here and more.&lt;/p&gt;&#xA;&lt;h2 id=&#34;brazilian-organizations-juggle-lots-of-observability-tools-and-data-sources&#34;&gt;Brazilian organizations juggle lots of observability tools and data sources &lt;/h2&gt;&#xA;&lt;p&gt;Businesses rely on observability tools and data sources such as metrics, logs, and traces to get deeper insights into the behavior of their systems. And as those systems scale and grow in complexity, it can often translate to teams using lots of tools and data to get a more holistic view.&lt;/p&gt;&#xA;&lt;p&gt;And that&amp;rsquo;s what we&amp;rsquo;re seeing in Brazil, where the overwhelming majority of organizations (96%) use multiple observability technologies to help keep their systems running properly—and nearly a quarter of organizations (24%) are juggling six or more. &lt;/p&gt;&#xA;&lt;p&gt;In addition, 89% of survey respondents say they&amp;rsquo;re unifying multiple data sources in Grafana (7% have just one, and 4% don&amp;rsquo;t have any data sources configured in Grafana). Brazilian organizations are most likely to have two to three data sources configured, but some are pulling in far more than that, with one in 10 organizations pulling in data from more than 20 data sources, and 5% using an astonishing 100-plus.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1371x790/e9fdb9ac0c/brazil-tech-data-sources.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1371x790/e9fdb9ac0c/brazil-tech-data-sources.png&#34;alt=&#34;Bar chart showing observability tech and data source adoption in Brazil, with usage percentages across different ranges for each category.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1371x790/e9fdb9ac0c/brazil-tech-data-sources.png&#34;&#xA;alt=&#34;Bar chart showing observability tech and data source adoption in Brazil, with usage percentages across different ranges for each category.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;h3 id=&#34;saas-vs-self-managed-and-the-role-of-open-standards&#34;&gt;SaaS vs. self-managed, and the role of open standards&lt;/h3&gt;&#xA;&lt;p&gt;So how are these companies handling all that data? The majority (56%) &amp;ldquo;mostly&amp;rdquo; or &amp;ldquo;only&amp;rdquo; manage their own observability stacks, which can present some real challenges when you have to wrangle disparate tools and data sources and maintain the underlying infrastructure. That&amp;rsquo;s on par with the rest of the world (58%), but there are some interesting differences when it comes to the use of SaaS.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1371x669/a964989ae8/brazil-observability-setup.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1371x669/a964989ae8/brazil-observability-setup.png&#34;alt=&#34;Bar chart showing observability setups in Brazil and globally: SaaS only, Mostly SaaS, Roughly equal, Mostly self-managed, Self-managed only.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1371x669/a964989ae8/brazil-observability-setup.png&#34;&#xA;alt=&#34;Bar chart showing observability setups in Brazil and globally: SaaS only, Mostly SaaS, Roughly equal, Mostly self-managed, Self-managed only.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;p&gt;As you can see in the chart above, Brazilians are more likely to split their setup between SaaS and self-managed, while the rest of the world is more inclined to lean more toward SaaS. Organizations turn to SaaS to offload management of the underlying platform to an observability vendor like Grafana Labs so they can focus instead on improving the health and resilience of their systems. The rest of the world is &lt;a href=&#34;/blog/2025/03/25/observability-survey-takeaways/?pg=survey-2025&amp;amp;plcmt=toc-cta-1#market-awareness-is-on-the-rise&#34;&gt;increasingly moving to SaaS&lt;/a&gt;, according to our global 2025 Observability Survey, so it will be interesting to see if Brazil follows the same pattern in the years to come.&lt;/p&gt;&#xA;&lt;p&gt;Another key driver of observability adoption is the use of open source software and open standards to facilitate the movement and unification of multiple data types. It&amp;rsquo;s no surprise to see Brazilian organizations prioritize open standards in their own workflows. In total, 60% are &amp;ldquo;mostly&amp;rdquo; or &amp;ldquo;only&amp;rdquo; using open source licensing, and an additional 21% are equally split between OSS and commercial licenses. And the majority are using Prometheus (71%) and OpenTelemetry (61%) in some capacity (in both cases, this includes respondents who said they were &amp;ldquo;investigating,&amp;rdquo; &amp;ldquo;building a POC,&amp;rdquo; &amp;ldquo;using in production,&amp;rdquo; using extensively,&amp;quot; or &amp;ldquo;using exclusively&amp;rdquo;). &lt;/p&gt;&#xA;&lt;p&gt;Prometheus and OpenTelemetry are both key to maintaining open standards in observability that help teams centralize and standardize their telemetry. Prometheus is the more established of the two, so it makes sense that it has more adoption. As we track changes in the Brazilian market going forward, it will be interesting to see if OpenTelemetry, which is quickly becoming another de facto standard in the observability space, will eventually catch up with Prometheus. &lt;/p&gt;&#xA;&lt;h2 id=&#34;brazilian-teams-are-at-different-levels-of-observability-maturity&#34;&gt;Brazilian teams are at different levels of observability maturity&lt;/h2&gt;&#xA;&lt;p&gt;The maturity of the Brazilian observability market is a bit of a mixed bag. For example, despite the large number of tools and data sources in use—as well as the commitment to open source and self-managed setups—Brazilian organizations aren&amp;rsquo;t as likely to use what we at Grafana Labs consider the &lt;em&gt;most mature&lt;/em&gt; approach to observability. &lt;/p&gt;&#xA;&lt;p&gt;We tend to favor a systematic, centralized approach that can get ahead of problems and incorporate observability at every stage of the software lifecycle. In addition, observability needs to be able to scale so best practices are spread across the organization. &lt;/p&gt;&#xA;&lt;p&gt;Survey respondents in Brazil who said they are using centralized observability have seen between 15% and 40% savings in their observability costs. Or, as one platform team member from a small Brazilian software and technology company put it, centralized observability provides &amp;ldquo;greater agility in identifying and resolving problems or preventing them, freeing up hours that would otherwise be spent remediating and/or resolving them.&amp;rdquo; &lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1371x944/ceed2909cc/brazil-approach-to-observability.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1371x944/ceed2909cc/brazil-approach-to-observability.png&#34;alt=&#34;Chart showing observability approaches: Centralized support (Brazil 28%, Global 38%), Centralized operations (Brazil 19%, Global 23%), Observability experts (Brazil 18%, Global 18%), Operations team (Brazil 22%, Global 15%), No observability (Brazil 12%, Global 4%), Other (Brazil 1%, Global 3%).&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1371x944/ceed2909cc/brazil-approach-to-observability.png&#34;&#xA;alt=&#34;Chart showing observability approaches: Centralized support (Brazil 28%, Global 38%), Centralized operations (Brazil 19%, Global 23%), Observability experts (Brazil 18%, Global 18%), Operations team (Brazil 22%, Global 15%), No observability (Brazil 12%, Global 4%), Other (Brazil 1%, Global 3%).&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;p&gt;As you can see from the chart above, the &amp;ldquo;Centralized observability (support)&amp;rdquo; approach most closely aligns with that ethos, but there&amp;rsquo;s a delta of 10 percentage points between Brazil and the rest of the world when it comes to adoption. &lt;/p&gt;&#xA;&lt;h3 id=&#34;brazilian-organizations-favor-finops-and-slos&#34;&gt;Brazilian organizations favor FinOps and SLOs&lt;/h3&gt;&#xA;&lt;p&gt;And yet, respondents to our Brazilian survey are showing much more interest in emerging techniques that have the potential to be integral to a holistic approach to observability.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1371x1236/45c597db9a/brazil-emerging-tech.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1371x1236/45c597db9a/brazil-emerging-tech.png&#34;alt=&#34;Bar charts showing relevance of SLOs and FinOps in Brazil and globally.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1371x1236/45c597db9a/brazil-emerging-tech.png&#34;&#xA;alt=&#34;Bar charts showing relevance of SLOs and FinOps in Brazil and globally.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;p&gt;When you look at the comparison above, you&amp;rsquo;ll see that Brazilian organizations are much more likely to use SLOs in some capacity (&amp;ldquo;investigating,&amp;rdquo; &amp;ldquo;POC,&amp;rdquo; &amp;ldquo;in production,&amp;rdquo; &amp;ldquo;using extensively,&amp;rdquo; &amp;ldquo;using exclusively&amp;rdquo;) than the rest of the world (93% vs. 73%). The same goes for FinOps (85% vs. 55%).&lt;/p&gt;&#xA;&lt;p&gt;We see SLOs as an important &lt;a href=&#34;/tags/grafana-slo/&#34;&gt;framework for defining and achieving reliability goals&lt;/a&gt;. When we asked about the most important outcome these organizations hope to achieve, the most common response was reducing mean time to resolution (44%), followed by better accountability (22%) and reduction in alert noise (21%). &lt;/p&gt;&#xA;&lt;p&gt;Meanwhile, FinOps is an emerging area that can help you better understand and manage your cost controls. We&amp;rsquo;re keen on the potential of FinOps here at Grafana Labs, as we recently adopted the FinOps Open Cost and Usage Specification (&lt;a href=&#34;https://focus.finops.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;FOCUS&lt;/a&gt;), a community-driven, open standard for cloud billing data, and we were encouraged to see the increased focus on FinOps in Brazil.&lt;/p&gt;&#xA;&lt;h2 id=&#34;challenges-and-solutions-pave-the-way-forward&#34;&gt;Challenges (and solutions) pave the way forward&lt;/h2&gt;&#xA;&lt;p&gt;Ultimately, all those tools and techniques are only really useful if they actually help you overcome the obstacles that prevent distributed modern systems from operating smoothly. Next, let&amp;rsquo;s look at how this is playing out in Brazil.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1371x715/9b220c018e/brazil-top-concerns.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1371x715/9b220c018e/brazil-top-concerns.png&#34;alt=&#34;Bar chart showing top observability concerns in Brazil and globally, including costs, noise, complexity, vendor lock-in, and adoption challenges.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1371x715/9b220c018e/brazil-top-concerns.png&#34;&#xA;alt=&#34;Bar chart showing top observability concerns in Brazil and globally, including costs, noise, complexity, vendor lock-in, and adoption challenges.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;p&gt;For starters, complexity (41%) is their biggest concern about observability, which makes sense considering the number of tools and data sources they&amp;rsquo;re managing, as well as the reliance on self-managed stacks. Complexity was also the most cited concern for the rest of the world (39%), so it appears to be a near universal problem in the observability space today.&lt;/p&gt;&#xA;&lt;p&gt;However, the Brazilian market is much more likely to cite &amp;ldquo;convincing management of the value&amp;rdquo; as a top concern compared to the rest of the world (34% vs. 23%), even though they&amp;rsquo;re less likely to be concerned about internal adoption (18% vs. 24%). This could explain why they&amp;rsquo;re more likely to adopt SLOs and FinOps, since they&amp;rsquo;re able to provide quantifiable evidence of the benefits of proper observability practices. &lt;/p&gt;&#xA;&lt;p&gt;However, &amp;ldquo;CTO/C-suite&amp;rdquo; was the most frequently cited response (36%) when we asked about the highest level at which observability is considered business-critical, which is actually higher than the rest of the world (33%). &lt;/p&gt;&#xA;&lt;p&gt;Other concerns point to a lack of maturity compared to the global market. Lack of process (25%) and culture (23%) were the most common challenges compared to the rest of the world, pointing to a need for more maturity—and SLOs. They&amp;rsquo;re also far less likely to cite alert fatigue as the biggest obstacle (21% vs 33%)&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1371x790/edb8f655ab/brazil-biggest-obstacle.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1371x790/edb8f655ab/brazil-biggest-obstacle.png&#34;alt=&#34;Bar chart comparing incident response obstacles in Brazil and globally, highlighting alert fatigue and lack of response processes.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1371x790/edb8f655ab/brazil-biggest-obstacle.png&#34;&#xA;alt=&#34;Bar chart comparing incident response obstacles in Brazil and globally, highlighting alert fatigue and lack of response processes.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;h3 id=&#34;brazilian-companies-are-prioritizing-cost-and-ease-of-use-in-observability&#34;&gt;Brazilian companies are prioritizing cost and ease of use in observability&lt;/h3&gt;&#xA;&lt;p&gt;So how are teams tackling these challenges? Cost (77%) and ease of use (64%) are the biggest priorities when selecting a new technology. The rest of the world also cited those as their top two priorities, though at a slightly lower rate overall (74% and 57%, respectively). Here we can also see the continued importance of open tools and standards, with the next two highest criteria being interoperability (45%) and being based on OSS (40%). &lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1371x421/a2f0649cd9/brazil-selection-criteria.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1371x421/a2f0649cd9/brazil-selection-criteria.png&#34;alt=&#34;Bar chart showing criteria for selecting observability tools: Cost, Ease of use, Future optionality, Familiarity, AI/ML capabilities, Interoperability, and Based on OSS.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1371x421/a2f0649cd9/brazil-selection-criteria.png&#34;&#xA;alt=&#34;Bar chart showing criteria for selecting observability tools: Cost, Ease of use, Future optionality, Familiarity, AI/ML capabilities, Interoperability, and Based on OSS.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;p&gt;Where the Brazilian market diverges the most from the rest of the world is in the importance of AI/ML criteria, with 27% citing it as a priority, compared to just 19% of the rest of the world. And when we asked how they&amp;rsquo;d like to see it implemented in observability, 64% said they would put  training-based alerts on their &amp;ldquo;AI/ML wishlist.&amp;rdquo; This was the most common response, followed by faster, more automated root cause analysis (49%).&lt;/p&gt;&#xA;&lt;p&gt;As we&amp;rsquo;ve all seen, the AI market is very dynamic right now, so we&amp;rsquo;ll be following these trends closely over the next year.&lt;/p&gt;&#xA;&lt;h2 id=&#34;about-the-survey&#34;&gt;About the survey &lt;/h2&gt;&#xA;&lt;p&gt;This survey was conducted at ObservabilityCON on the Road in São Paulo late last year. (And we&amp;rsquo;re headed back again this year! &lt;a href=&#34;/events/observabilitycon-on-the-road/2025/sao-paulo/&#34;&gt;Learn more about our Nov. 4 event in São Paulo.&lt;/a&gt;) In total, 1,287 people participated across a range of demographics:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Role:&lt;/strong&gt; Respondents worked in more than a dozen different roles, from individual contributors up to executives. The most commonly cited roles were SRE (28%) and platform team (20%).&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Industry:&lt;/strong&gt; Participants came from 17 different industries, with software and technology (33%) representing the largest share, followed by media and entertainment (28%).&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Size:&lt;/strong&gt; Companies of all sizes were represented in the survey, with the most common ones being those with more than 5,000 employees (35%).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Our third annual Observability Survey, which contained many of the same questions, was conducted globally and featured responses from 1,255 industry practitioners. To learn more, check out the &lt;a href=&#34;/observability-survey/&#34;&gt;main report&lt;/a&gt;, as well as the &lt;a href=&#34;https://play.grafana.org/d/feg4yc4qw3wn4b/third-annual-observability-survey?pg=survey-2025&amp;amp;plcmt=toc-cta-2&amp;amp;orgId=1&amp;amp;from=2025-03-13T02:49:20.476Z&amp;amp;to=2025-03-14T02:49:20.476Z&amp;amp;timezone=utc&amp;amp;var-region=$__all&amp;amp;var-role=$__all&amp;amp;var-size=$__all&amp;amp;var-industry=$__all&amp;amp;var-filters=%60Region%60%20in%20%28%27Europe%27,%27Asia%27,%27North%20America%27,%27Africa%27,%27South%20America%27,%27Oceania%27,%27Middle%20East%27%29%20AND%20%60Role%60%20IN%20%28%27Platform%20team%27,%27SRE%27,%27CTO%27,%27Engineering%20manager%27,%27Developer%27,%27Director%20of%20engineering%27,%27Other%27%29%20AND%20%60Size_of_organization%60%20IN%20%28%2710%20or%20fewer%20employees%27,%2711%20-%20100%20employees%27,%27101%20-%20500%20employees%27,%27501%20-%201,000%20employees%27,%271,001%20-%202,500%20employees%27,%272,501%20-%205,000%20employees%27,%275,001%2B%20employees%27%29%20AND%20%60Industry%60%20IN%20%28%27Telecommunications%27,%27Healthcare%27,%27IoT%27,%27Financial%20services%27,%27Education%27,%27Government%27,%27Applied%20Sciences%27,%27Software%20%26%20Technology%27,%27Media%20%26%20Entertainment%27,%27Travel%20%26%20Transportation%27,%27Retail%2FE-commerce%27,%27Energy%20%26%20Utilities%27,%27Automotive%20%26%20Manufacturing%27,%27Other%27%29&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;interactive dashboard&lt;/a&gt; and our &lt;a href=&#34;/blog/2025/03/25/observability-survey-takeaways/&#34;&gt;in-depth analysis&lt;/a&gt; of the survey findings.&lt;/p&gt;</description>
      <pubDate>Tue, 12 Aug 2025 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Learn OpenTelemetry tracing through a grand strategy game: introducing Game of Traces】Learn OpenTelemetry tracing through a grand strategy game: introducing Game of Traces</title>
      <link>https://grafana.com/blog/2025/08/11/learn-opentelemetry-tracing-through-a-grand-strategy-game-introducing-game-of-traces/</link>
      <description>【&lt;p&gt;&lt;em&gt;A trace always remembers!&lt;/em&gt; &lt;/p&gt;&#xA;&lt;p&gt;Okay, okay. I will try to keep my Game of Thrones references to a minimum throughout this post, but there is a lot of truth to that statement. &lt;/p&gt;&#xA;&lt;p&gt;In observability, a &lt;em&gt;trace&lt;/em&gt; is the “when” and “where” of telemetry signals, allowing us to track the state of interactions between services within a microservice architecture. This makes traces the ideal observability signal for discovering bottlenecks and interconnection issues.&lt;/p&gt;&#xA;&lt;p&gt;The challenge with traces, however, is that they often come with a steep learning curve – particularly for those who are new to observability. This is mostly due to the fact that it&amp;rsquo;s hard to relate traces to a real-world concept unless we talk about logistics or a road trip. But where is the fun in &lt;em&gt;that&lt;/em&gt;?&lt;/p&gt;&#xA;&lt;p&gt;Here at Grafana Labs, I’m a developer advocate, and a big part of my job is to learn and teach the pillars of observability to our end users. In my personal life, I also love grand strategy games: Total War: Warhammer III, Sid Meier&amp;rsquo;s Civilisation, and Sins of a Solar Empire (which is more of a hybrid). You name it, I&amp;rsquo;m there. &lt;/p&gt;&#xA;&lt;p&gt;Recently, I’ve been blending these two things together to create strategy games that can teach engineers the basics of observability. I did this last year (alongside my fellow dev advocate Tom Glenn) to create &lt;a href=&#34;/blog/2024/11/20/metrics-logs-traces-and-mayhem-introducing-an-observability-adventure-game-powered-by-grafana-alloy-and-otel/&#34;&gt;Quest World&lt;/a&gt;, an interactive game to learn about &lt;a href=&#34;https://opentelemetry.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;OpenTelemetry&lt;/a&gt;, &lt;a href=&#34;/oss/alloy-opentelemetry-collector//?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Alloy&lt;/a&gt;, and the Grafana LGTM (&lt;a href=&#34;/oss/loki/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Loki&lt;/a&gt; for logs, &lt;a href=&#34;/oss/grafana/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana&lt;/a&gt; for visualization, &lt;a href=&#34;/oss/tempo/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Tempo&lt;/a&gt; for traces, &lt;a href=&#34;/oss/mimir/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Mimir&lt;/a&gt; for metrics) Stack.&lt;/p&gt;&#xA;&lt;p&gt;And now, I’m applying the same approach to tracing. &lt;/p&gt;&#xA;&lt;p&gt;In this post, I’ll walk you through &lt;strong&gt;Game of Traces,&lt;/strong&gt; a grand strategy game you can play to learn the key concepts of OpenTelemetry tracing — and, of course, heroically defend a few kingdoms along the way.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/350x350/55b219645d/game-of-traces-logo_2.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/350x350/55b219645d/game-of-traces-logo_2.png&#34;alt=&#34;A screenshot of the Game of Traces logo&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/350x350/55b219645d/game-of-traces-logo_2.png&#34;&#xA;alt=&#34;A screenshot of the Game of Traces logo&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;h2 id=&#34;but-first-how-does-it-all-work&#34;&gt;But first, how does it all work?&lt;/h2&gt;&#xA;&lt;p&gt;In grand strategy games, you build up forces within settlements and send them to capture new towns and territories in a path of conquest to the enemy capital. This got me thinking: what if we built a grand strategy game where each capital and village was a service, and we instrumented each with OpenTelemetry (OTel) tracing. We could track the grand battles as they unfold: the wins, the losses, and the interactions with the AI opponent. Thus, a Game of Traces was born!&lt;/p&gt;&#xA;&lt;p&gt;I normally leave how it works to the end of the blog post, but it&amp;rsquo;s important to understand the underlying mechanism here to see how traces track the game state.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1000x1000/767ff12b11/game-of-traces-diagram.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1000x1000/767ff12b11/game-of-traces-diagram.png&#34;alt=&#34;A diagram of the Game of Traces gameplay.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1000x1000/767ff12b11/game-of-traces-diagram.png&#34;&#xA;alt=&#34;A diagram of the Game of Traces gameplay.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s break down the components:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Capitals&lt;/strong&gt; are the seats of power within the game. This is where the player can collect resources and spend those resources to create their armies. In this game, only capitals can make armies. A capital is essentially a &lt;a href=&#34;https://github.com/grafana/alloy-scenarios/blob/main/game-of-tracing/app/location_server.py&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Python Flask server&lt;/a&gt; with a series of API endpoints which can be interacted with to create different game events, more on this later. Capitals are connected to a series of villages via a series of API endpoints, which generate our game map. Once a capital is lost, the game is over for that player.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Villages&lt;/strong&gt; are essentially minor capitals, but with some key differences. They start neutral with a predefined army. Once captured, they automatically generate resources that can be sent back to the capital (you will see how this mechanism works when you play the game). They cannot generate armies, but can hold player armies from the capital as defense. They are also Flask servers connected to one another — in fact, they are built from the same source code. We define the role of a Flask server using the &lt;a href=&#34;https://github.com/grafana/alloy-scenarios/blob/main/game-of-tracing/app/game_config.py&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;game config&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;The &lt;strong&gt;war map&lt;/strong&gt; is how the player interacts with the series of Flask servers. It is itself a Flask server, which hosts the &lt;a href=&#34;https://github.com/grafana/alloy-scenarios/tree/main/game-of-tracing/war_map&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;grand map UI&lt;/a&gt;. The war map supports one-on-one human battles and one-on-one battles between a human and an AI opponent. &lt;/li&gt;&#xA;&lt;li&gt;The &lt;strong&gt;AI&lt;/strong&gt; is another &lt;a href=&#34;https://github.com/grafana/alloy-scenarios/tree/main/game-of-tracing/ai_opponent&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Flask server&lt;/a&gt; which acts as its own war map. It provides the AI with the ability to interact with its capital and villages, and plays a game against you based on a weighted decision tree depending on how far you are into the game.&lt;/li&gt;&#xA;&lt;li&gt;Last but not least, OpenTelemetry and the open source Grafana LGTM Stack. We have manually instrumented each Flask server within our architecture to generate metrics, logs, and traces within the &lt;a href=&#34;https://opentelemetry.io/docs/specs/otel/protocol/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;OpenTelemetry protocol (OTLP)&lt;/a&gt; format. We use the telemetry signals to monitor key aspects of the game, such as army marching, returning resources to the capital, and AI interactions. Spoiler alert: what you’ll learn is that traces tie all these signals together as we monitor our army&amp;rsquo;s progress.  &lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;game-setup&#34;&gt;Game setup&lt;/h2&gt;&#xA;&lt;p&gt;To play the game locally, all you need is Docker. You can find the setup instructions &lt;a href=&#34;https://github.com/grafana/alloy-scenarios/blob/main/game-of-tracing/README.md#running-the-demo&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;here&lt;/a&gt;. Or, if you prefer not to deploy the game locally, you can run the game online using &lt;a href=&#34;https://killercoda.com/grafana-labs/course/workshops/game-of-traces&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Killercoda&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Whether you are playing the game locally or via Killercoda, make sure you import the included V2 Dashboard.&lt;/strong&gt; It shows you all telemetry signals in one user interface and also showcases some of the new &lt;a href=&#34;/blog/2025/05/07/dynamic-dashboards-grafana-12/&#34;&gt;dynamic dashboard features&lt;/a&gt; introduced in &lt;a href=&#34;/blog/2025/05/07/grafana-12-release-all-the-new-features/&#34;&gt;Grafana 12&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x1239/089175af40/game-of-traces-v2-dashboard.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x1239/089175af40/game-of-traces-v2-dashboard.png&#34;alt=&#34;A screenshot of the v2 dashboard.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x1239/089175af40/game-of-traces-v2-dashboard.png&#34;&#xA;alt=&#34;A screenshot of the v2 dashboard.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;h2 id=&#34;playing-the-game&#34;&gt;Playing the game&lt;/h2&gt;&#xA;&lt;p&gt;Okay, we&amp;rsquo;d better play this game before winter arrives. There are two primary interfaces:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;The game itself, which can be found at &lt;a href=&#34;http://localhost:8080&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;http://localhost:8080&lt;/a&gt; once you’ve run &lt;code&gt;docker compose&lt;/code&gt; (make sure you have followed the steps in Game setup).&lt;/li&gt;&#xA;&lt;li&gt;The Grafana dashboard you installed during setup.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s focus on the game UI first. You will be asked to select your faction.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x1255/7f7268bbaf/game-of-traces-choose-your-faction.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x1255/7f7268bbaf/game-of-traces-choose-your-faction.png&#34;alt=&#34;A screenshot showing the Choose your Faction step.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x1255/7f7268bbaf/game-of-traces-choose-your-faction.png&#34;&#xA;alt=&#34;A screenshot showing the Choose your Faction step.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;p&gt;Once selected, you can enter the game. You will be greeted by the war map.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x1070/cc29414784/game-of-traces-war-of-kingdoms-map.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x1070/cc29414784/game-of-traces-war-of-kingdoms-map.png&#34;alt=&#34;A screenshot of the war map.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x1070/cc29414784/game-of-traces-war-of-kingdoms-map.png&#34;&#xA;alt=&#34;A screenshot of the war map.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;p&gt;I recommend enabling the AI opponent if you are playing by yourself. &lt;/p&gt;&#xA;&lt;p&gt;It&amp;rsquo;s time to play the game:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Collect resources&lt;/li&gt;&#xA;&lt;li&gt;Create armies&lt;/li&gt;&#xA;&lt;li&gt;Move armies to villages to capture them&lt;/li&gt;&#xA;&lt;li&gt;Return resources to your capital to create more armies&lt;/li&gt;&#xA;&lt;li&gt;Use all-out attack with a big enough army at your capital to send your troops on a war path to the enemy&amp;rsquo;s capital (a personal favorite for generating interesting traces)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Once you have won or lost, check back in and read the next section of the blog!&lt;/p&gt;&#xA;&lt;h2 id=&#34;i-told-you-it-was-a-game-of-traces&#34;&gt;I told you it was a game of traces!&lt;/h2&gt;&#xA;&lt;p&gt;So you are back! You&amp;rsquo;re either the victor or the loser of the great war between the northern and southern kingdoms. Let&amp;rsquo;s see how we can use our battles to understand how tracing works.&lt;/p&gt;&#xA;&lt;p&gt;A common move you would have taken is moving your army to take the villages. Behind the scenes, this is being represented as a trace. Let&amp;rsquo;s find one of these moves within the &lt;strong&gt;Player Decisions&lt;/strong&gt; table. Select the trace ID, which will take you to the &lt;a href=&#34;/docs/grafana/latest/panels-visualizations/visualizations/traces/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana traces view panel&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x893/97ec5804d5/game-of-traces-view-panel.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x893/97ec5804d5/game-of-traces-view-panel.png&#34;alt=&#34;A screenshot of the traces panel.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x893/97ec5804d5/game-of-traces-view-panel.png&#34;&#xA;alt=&#34;A screenshot of the traces panel.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;p&gt;The trace allows us to understand the flow in which our services are being called underneath in order to initiate the move. Traces are made from a collection of &lt;a href=&#34;/blog/2024/08/15/all-about-span-events-what-they-are-and-how-to-query-them/&#34;&gt;spans&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;We start at the top, which is called our parent span. The parent span comes from our service &lt;strong&gt;war_map,&lt;/strong&gt; which sends a request to our &lt;strong&gt;northern-capital&lt;/strong&gt; to initiate a move order to &lt;strong&gt;village-2&lt;/strong&gt;. We can see that the &lt;strong&gt;northern-capital&lt;/strong&gt; calls the &lt;strong&gt;receive_army&lt;/strong&gt; endpoint of &lt;strong&gt;village-2&lt;/strong&gt; to initiate this move. The color of our span indicates which service it belongs to. As you can see, context is very important when it comes to populating spans within a trace. If the current span has no context of the previous, then the chain of events is broken, and we lose the ability to track API and function calls across services. &lt;/p&gt;&#xA;&lt;p&gt;Okay, so we can see that an army moved to &lt;strong&gt;village-2,&lt;/strong&gt; but what actually unfolded in that battle? That&amp;rsquo;s where span attributes come in. To find span attributes, let&amp;rsquo;s select &lt;strong&gt;village-2 receive_army&lt;/strong&gt; and expand the span attributes dropdown. &lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1172x754/fc0afc8fc2/game-of-traces-span-attributes.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1172x754/fc0afc8fc2/game-of-traces-span-attributes.png&#34;alt=&#34;A screenshot of span attributes.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1172x754/fc0afc8fc2/game-of-traces-span-attributes.png&#34;&#xA;alt=&#34;A screenshot of span attributes.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;p&gt;Span attributes are key-value pairs that provide further context for a particular span. Span attributes are optional, but are extremely useful when determining the state of particular variables or API calls. In our case, it allows us to track the battle that took place. We can see that the northern capital sent an army of four to defeat the army of three at village 2. It was a successful attack, leaving one army remaining to defend the captured village.&lt;/p&gt;&#xA;&lt;p&gt;A trace also allows us to generate a node graph to understand service flow, but also to summarize &lt;a href=&#34;/docs/grafana/latest/explore/simplified-exploration/traces/investigate/choose-red-metric/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;rate, error, and duration (RED) metrics&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1882x462/266b9efef7/games-of-traces-node-graph.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1882x462/266b9efef7/games-of-traces-node-graph.png&#34;alt=&#34;A screenshot of a node graph.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1882x462/266b9efef7/games-of-traces-node-graph.png&#34;&#xA;alt=&#34;A screenshot of a node graph.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;p&gt;In the context of our game, we represent lost battles by setting the span type to error. This allows us to see how many battles were both successful and unsuccessful during a game.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x1071/1ae710a2a6/game-of-traces-set-span-type-to-error.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x1071/1ae710a2a6/game-of-traces-set-span-type-to-error.png&#34;alt=&#34;A screenshot of RED metrics to track battles.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x1071/1ae710a2a6/game-of-traces-set-span-type-to-error.png&#34;&#xA;alt=&#34;A screenshot of RED metrics to track battles.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;h2 id=&#34;by-the-light-of-the-three&#34;&gt;By the light of the three!&lt;/h2&gt;&#xA;&lt;p&gt;One of OpenTelemetry’s greatest strengths is correlation of telemetry signals (in our case, traces, logs, and metrics), which is largely available out-of-the-box. If you generate logs within the context of a span, these logs will automatically contain the trace ID and span ID as part of their attributes. Metrics have a similar correlation method, but let&amp;rsquo;s focus on traces-to-logs first.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x991/e7b2a0945c/game-of-traces-to-logs.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x991/e7b2a0945c/game-of-traces-to-logs.png&#34;alt=&#34;A screenshot showing the correlation of traces to logs.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x991/e7b2a0945c/game-of-traces-to-logs.png&#34;&#xA;alt=&#34;A screenshot showing the correlation of traces to logs.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;p&gt;Within the LGTM stack, we provide the ability to &lt;a href=&#34;/docs/grafana-cloud/send-data/traces/use-traces-with-grafana/?pg=blog&amp;amp;plcmt=body-txt/#link-traces-and-logs&#34;&gt;correlate between traces stored in Tempo and logs stored in Loki.&lt;/a&gt; If we take our battle span (never thought I would say that in a sentence), we can select logs for the span. This will automatically query Loki using the span ID or trace ID or both (depending on your data source configuration), providing the logs from our village-2 at the time of the battle span. We can see a historic log of the battle that took place.&lt;/p&gt;&#xA;&lt;p&gt;Lastly, let&amp;rsquo;s look at &lt;a href=&#34;/docs/grafana-cloud/send-data/traces/use-traces-with-grafana/#link-traces-and-metrics&#34;&gt;traces-to-metrics&lt;/a&gt;. This is handled within OpenTelemetry and Prometheus as an exemplar. An &lt;a href=&#34;/docs/grafana/latest/fundamentals/exemplars/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;exemplar&lt;/a&gt; is a specific trace representative of a measurement taken in a given time interval. While metrics excel at giving you an aggregated view of your system, traces give you a fine-grained view of a single request; exemplars are a way to link the two.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x735/7a8f2dcd19/games-of-traces-exemplar.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x735/7a8f2dcd19/games-of-traces-exemplar.png&#34;alt=&#34;A screenshot of an exemplar.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x735/7a8f2dcd19/games-of-traces-exemplar.png&#34;&#xA;alt=&#34;A screenshot of an exemplar.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;p&gt;In our scenario, we can see that we generate a total number of battles per village, as battles take place. This metric is updated within the scope of our &lt;strong&gt;receive_army&lt;/strong&gt; battle span. Thus, when the metric reading is taken, we are given the trace and span ID, which is stored as an exemplar in Prometheus/Mimir. Grafana allows us to overlay exemplars on top of line graphs so we can see a timeline of the total number of battles each village has had and then drill down into a particular trace to understand what happened during that particular battle. &lt;/p&gt;&#xA;&lt;p&gt;Continuous profiles is the only signal missing here, but I plan to add profiles using &lt;a href=&#34;https://github.com/grafana/otel-profiling-python&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Grafana’s OpenTelemetry Profiling library&lt;/a&gt;. Stay tuned!  &lt;/p&gt;&#xA;&lt;h2 id=&#34;a-battle-is-a-series-of-cause-and-effect&#34;&gt;A battle is a series of cause and effect&lt;/h2&gt;&#xA;&lt;p&gt;The last feature we introduced (I say “we” because the idea came from Hedley Simons, one of our resident tracing experts) was &lt;a href=&#34;https://opentelemetry.io/docs/concepts/signals/traces/#span-links&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;span links&lt;/a&gt;. Links are optional and can be a bit more challenging to implement. Essentially, their role is to create relationships between spans that aren&amp;rsquo;t in a direct parent-child hierarchy. Unlike parent-child relationships (which are synchronous and hierarchical), links are more flexible and can connect spans across different traces or time periods. This becomes particularly useful in our case, as it ties gameplay together by linking a player’s actions across the course of the game. &lt;/p&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s first take a look at how links are represented in Grafana.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x1008/461a5a2616/game-of-traces-span-links.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x1008/461a5a2616/game-of-traces-span-links.png&#34;alt=&#34;A screenshot of span links.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x1008/461a5a2616/game-of-traces-span-links.png&#34;&#xA;alt=&#34;A screenshot of span links.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;p&gt;As we can see, our final all-out attack has a span link attached to it. This references the previous action our player took within the game sequence. Thus, we can track our game to the very beginning move in reverse order. &lt;/p&gt;&#xA;&lt;p&gt;So, what does this allow us to do? Well, this isn’t a practical use of Tempo’s query API, but it allowed us to create a replay feature.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x1098/2a8b5c6025/game-of-traces-visual-game-replay.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x1098/2a8b5c6025/game-of-traces-visual-game-replay.png&#34;alt=&#34;A screenshot of the visual game replay.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x1098/2a8b5c6025/game-of-traces-visual-game-replay.png&#34;&#xA;alt=&#34;A screenshot of the visual game replay.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;p&gt;The war map searches Tempo for a particular game session ID, which is stored as an attribute for each span. It then uses span links to retrieve each Trace within the link from Tempo in reverse order before we invert this. This gives us the ability to step through the actions of the player during the game. &lt;/p&gt;&#xA;&lt;h2 id=&#34;as-the-dust-settles-a-chance-for-reflection&#34;&gt;As the dust settles, a chance for reflection&lt;/h2&gt;&#xA;&lt;p&gt;When building this demo, my own “aha!” moment came with traces when I was designing the game AI and how that could interact with game mechanics. It was hard to know how the set of decision weights affected the AI’s actions — whether the AI would get stuck repeating the same mechanic over and over, or fail to interact with one of the Flask servers (capital or village).&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x1050/905555623f/game-of-traces-ai-decision-cycle.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x1050/905555623f/game-of-traces-ai-decision-cycle.png&#34;alt=&#34;A screenshot of traces that represent the AI decision cycle.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x1050/905555623f/game-of-traces-ai-decision-cycle.png&#34;&#xA;alt=&#34;A screenshot of traces that represent the AI decision cycle.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;p&gt;Traces let me track the decisions of the AI opponent throughout our match together. I discovered rather early on that my first attempt at the AI opponent didn’t react quickly enough to imminent threats from the player. If it didn’t recognize an all-out attack or that a village had been captured close to its capital, it remained passively collecting resources and taking villages. After modifying the AI’s behavior, I could see it play a more defensive role in its actions when the enemy was near, through its decision to spend less time collecting resources and more time building armies at its capital. &lt;/p&gt;&#xA;&lt;h2 id=&#34;game-over-for-now&#34;&gt;Game over… for now &lt;/h2&gt;&#xA;&lt;p&gt;I had a lot of fun building this game. It allowed me to truly dive into the OpenTelemetry SDK for Python and understand how traces and spans are created, how context is passed between one span to another, and how metrics and logs can be tied to a given span. &lt;/p&gt;&#xA;&lt;p&gt;I purposefully chose not to auto-instrument &lt;a href=&#34;https://github.com/grafana/alloy-scenarios/tree/main/game-of-tracing&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Game of Traces&lt;/a&gt;, so the techniques of instrumentation can be applicable across programming languages. I plan to write a follow-up post that dives deeper into the code base to cover how the game was instrumented. &lt;/p&gt;&#xA;&lt;p&gt;In the meantime, I hope this game provides a new way to learn observability and its value from the ground up. Until next time, for the north!&lt;/p&gt;】&lt;p&gt;&lt;em&gt;A trace always remembers!&lt;/em&gt; &lt;/p&gt;&#xA;&lt;p&gt;Okay, okay. I will try to keep my Game of Thrones references to a minimum throughout this post, but there is a lot of truth to that statement. &lt;/p&gt;&#xA;&lt;p&gt;In observability, a &lt;em&gt;trace&lt;/em&gt; is the “when” and “where” of telemetry signals, allowing us to track the state of interactions between services within a microservice architecture. This makes traces the ideal observability signal for discovering bottlenecks and interconnection issues.&lt;/p&gt;&#xA;&lt;p&gt;The challenge with traces, however, is that they often come with a steep learning curve – particularly for those who are new to observability. This is mostly due to the fact that it&amp;rsquo;s hard to relate traces to a real-world concept unless we talk about logistics or a road trip. But where is the fun in &lt;em&gt;that&lt;/em&gt;?&lt;/p&gt;&#xA;&lt;p&gt;Here at Grafana Labs, I’m a developer advocate, and a big part of my job is to learn and teach the pillars of observability to our end users. In my personal life, I also love grand strategy games: Total War: Warhammer III, Sid Meier&amp;rsquo;s Civilisation, and Sins of a Solar Empire (which is more of a hybrid). You name it, I&amp;rsquo;m there. &lt;/p&gt;&#xA;&lt;p&gt;Recently, I’ve been blending these two things together to create strategy games that can teach engineers the basics of observability. I did this last year (alongside my fellow dev advocate Tom Glenn) to create &lt;a href=&#34;/blog/2024/11/20/metrics-logs-traces-and-mayhem-introducing-an-observability-adventure-game-powered-by-grafana-alloy-and-otel/&#34;&gt;Quest World&lt;/a&gt;, an interactive game to learn about &lt;a href=&#34;https://opentelemetry.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;OpenTelemetry&lt;/a&gt;, &lt;a href=&#34;/oss/alloy-opentelemetry-collector//?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Alloy&lt;/a&gt;, and the Grafana LGTM (&lt;a href=&#34;/oss/loki/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Loki&lt;/a&gt; for logs, &lt;a href=&#34;/oss/grafana/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana&lt;/a&gt; for visualization, &lt;a href=&#34;/oss/tempo/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Tempo&lt;/a&gt; for traces, &lt;a href=&#34;/oss/mimir/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Mimir&lt;/a&gt; for metrics) Stack.&lt;/p&gt;&#xA;&lt;p&gt;And now, I’m applying the same approach to tracing. &lt;/p&gt;&#xA;&lt;p&gt;In this post, I’ll walk you through &lt;strong&gt;Game of Traces,&lt;/strong&gt; a grand strategy game you can play to learn the key concepts of OpenTelemetry tracing — and, of course, heroically defend a few kingdoms along the way.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/350x350/55b219645d/game-of-traces-logo_2.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/350x350/55b219645d/game-of-traces-logo_2.png&#34;alt=&#34;A screenshot of the Game of Traces logo&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/350x350/55b219645d/game-of-traces-logo_2.png&#34;&#xA;alt=&#34;A screenshot of the Game of Traces logo&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;h2 id=&#34;but-first-how-does-it-all-work&#34;&gt;But first, how does it all work?&lt;/h2&gt;&#xA;&lt;p&gt;In grand strategy games, you build up forces within settlements and send them to capture new towns and territories in a path of conquest to the enemy capital. This got me thinking: what if we built a grand strategy game where each capital and village was a service, and we instrumented each with OpenTelemetry (OTel) tracing. We could track the grand battles as they unfold: the wins, the losses, and the interactions with the AI opponent. Thus, a Game of Traces was born!&lt;/p&gt;&#xA;&lt;p&gt;I normally leave how it works to the end of the blog post, but it&amp;rsquo;s important to understand the underlying mechanism here to see how traces track the game state.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1000x1000/767ff12b11/game-of-traces-diagram.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1000x1000/767ff12b11/game-of-traces-diagram.png&#34;alt=&#34;A diagram of the Game of Traces gameplay.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1000x1000/767ff12b11/game-of-traces-diagram.png&#34;&#xA;alt=&#34;A diagram of the Game of Traces gameplay.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s break down the components:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Capitals&lt;/strong&gt; are the seats of power within the game. This is where the player can collect resources and spend those resources to create their armies. In this game, only capitals can make armies. A capital is essentially a &lt;a href=&#34;https://github.com/grafana/alloy-scenarios/blob/main/game-of-tracing/app/location_server.py&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Python Flask server&lt;/a&gt; with a series of API endpoints which can be interacted with to create different game events, more on this later. Capitals are connected to a series of villages via a series of API endpoints, which generate our game map. Once a capital is lost, the game is over for that player.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Villages&lt;/strong&gt; are essentially minor capitals, but with some key differences. They start neutral with a predefined army. Once captured, they automatically generate resources that can be sent back to the capital (you will see how this mechanism works when you play the game). They cannot generate armies, but can hold player armies from the capital as defense. They are also Flask servers connected to one another — in fact, they are built from the same source code. We define the role of a Flask server using the &lt;a href=&#34;https://github.com/grafana/alloy-scenarios/blob/main/game-of-tracing/app/game_config.py&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;game config&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;The &lt;strong&gt;war map&lt;/strong&gt; is how the player interacts with the series of Flask servers. It is itself a Flask server, which hosts the &lt;a href=&#34;https://github.com/grafana/alloy-scenarios/tree/main/game-of-tracing/war_map&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;grand map UI&lt;/a&gt;. The war map supports one-on-one human battles and one-on-one battles between a human and an AI opponent. &lt;/li&gt;&#xA;&lt;li&gt;The &lt;strong&gt;AI&lt;/strong&gt; is another &lt;a href=&#34;https://github.com/grafana/alloy-scenarios/tree/main/game-of-tracing/ai_opponent&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Flask server&lt;/a&gt; which acts as its own war map. It provides the AI with the ability to interact with its capital and villages, and plays a game against you based on a weighted decision tree depending on how far you are into the game.&lt;/li&gt;&#xA;&lt;li&gt;Last but not least, OpenTelemetry and the open source Grafana LGTM Stack. We have manually instrumented each Flask server within our architecture to generate metrics, logs, and traces within the &lt;a href=&#34;https://opentelemetry.io/docs/specs/otel/protocol/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;OpenTelemetry protocol (OTLP)&lt;/a&gt; format. We use the telemetry signals to monitor key aspects of the game, such as army marching, returning resources to the capital, and AI interactions. Spoiler alert: what you’ll learn is that traces tie all these signals together as we monitor our army&amp;rsquo;s progress.  &lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;game-setup&#34;&gt;Game setup&lt;/h2&gt;&#xA;&lt;p&gt;To play the game locally, all you need is Docker. You can find the setup instructions &lt;a href=&#34;https://github.com/grafana/alloy-scenarios/blob/main/game-of-tracing/README.md#running-the-demo&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;here&lt;/a&gt;. Or, if you prefer not to deploy the game locally, you can run the game online using &lt;a href=&#34;https://killercoda.com/grafana-labs/course/workshops/game-of-traces&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Killercoda&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Whether you are playing the game locally or via Killercoda, make sure you import the included V2 Dashboard.&lt;/strong&gt; It shows you all telemetry signals in one user interface and also showcases some of the new &lt;a href=&#34;/blog/2025/05/07/dynamic-dashboards-grafana-12/&#34;&gt;dynamic dashboard features&lt;/a&gt; introduced in &lt;a href=&#34;/blog/2025/05/07/grafana-12-release-all-the-new-features/&#34;&gt;Grafana 12&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x1239/089175af40/game-of-traces-v2-dashboard.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x1239/089175af40/game-of-traces-v2-dashboard.png&#34;alt=&#34;A screenshot of the v2 dashboard.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x1239/089175af40/game-of-traces-v2-dashboard.png&#34;&#xA;alt=&#34;A screenshot of the v2 dashboard.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;h2 id=&#34;playing-the-game&#34;&gt;Playing the game&lt;/h2&gt;&#xA;&lt;p&gt;Okay, we&amp;rsquo;d better play this game before winter arrives. There are two primary interfaces:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;The game itself, which can be found at &lt;a href=&#34;http://localhost:8080&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;http://localhost:8080&lt;/a&gt; once you’ve run &lt;code&gt;docker compose&lt;/code&gt; (make sure you have followed the steps in Game setup).&lt;/li&gt;&#xA;&lt;li&gt;The Grafana dashboard you installed during setup.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s focus on the game UI first. You will be asked to select your faction.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x1255/7f7268bbaf/game-of-traces-choose-your-faction.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x1255/7f7268bbaf/game-of-traces-choose-your-faction.png&#34;alt=&#34;A screenshot showing the Choose your Faction step.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x1255/7f7268bbaf/game-of-traces-choose-your-faction.png&#34;&#xA;alt=&#34;A screenshot showing the Choose your Faction step.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;p&gt;Once selected, you can enter the game. You will be greeted by the war map.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x1070/cc29414784/game-of-traces-war-of-kingdoms-map.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x1070/cc29414784/game-of-traces-war-of-kingdoms-map.png&#34;alt=&#34;A screenshot of the war map.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x1070/cc29414784/game-of-traces-war-of-kingdoms-map.png&#34;&#xA;alt=&#34;A screenshot of the war map.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;p&gt;I recommend enabling the AI opponent if you are playing by yourself. &lt;/p&gt;&#xA;&lt;p&gt;It&amp;rsquo;s time to play the game:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Collect resources&lt;/li&gt;&#xA;&lt;li&gt;Create armies&lt;/li&gt;&#xA;&lt;li&gt;Move armies to villages to capture them&lt;/li&gt;&#xA;&lt;li&gt;Return resources to your capital to create more armies&lt;/li&gt;&#xA;&lt;li&gt;Use all-out attack with a big enough army at your capital to send your troops on a war path to the enemy&amp;rsquo;s capital (a personal favorite for generating interesting traces)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Once you have won or lost, check back in and read the next section of the blog!&lt;/p&gt;&#xA;&lt;h2 id=&#34;i-told-you-it-was-a-game-of-traces&#34;&gt;I told you it was a game of traces!&lt;/h2&gt;&#xA;&lt;p&gt;So you are back! You&amp;rsquo;re either the victor or the loser of the great war between the northern and southern kingdoms. Let&amp;rsquo;s see how we can use our battles to understand how tracing works.&lt;/p&gt;&#xA;&lt;p&gt;A common move you would have taken is moving your army to take the villages. Behind the scenes, this is being represented as a trace. Let&amp;rsquo;s find one of these moves within the &lt;strong&gt;Player Decisions&lt;/strong&gt; table. Select the trace ID, which will take you to the &lt;a href=&#34;/docs/grafana/latest/panels-visualizations/visualizations/traces/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana traces view panel&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x893/97ec5804d5/game-of-traces-view-panel.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x893/97ec5804d5/game-of-traces-view-panel.png&#34;alt=&#34;A screenshot of the traces panel.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x893/97ec5804d5/game-of-traces-view-panel.png&#34;&#xA;alt=&#34;A screenshot of the traces panel.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;p&gt;The trace allows us to understand the flow in which our services are being called underneath in order to initiate the move. Traces are made from a collection of &lt;a href=&#34;/blog/2024/08/15/all-about-span-events-what-they-are-and-how-to-query-them/&#34;&gt;spans&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;We start at the top, which is called our parent span. The parent span comes from our service &lt;strong&gt;war_map,&lt;/strong&gt; which sends a request to our &lt;strong&gt;northern-capital&lt;/strong&gt; to initiate a move order to &lt;strong&gt;village-2&lt;/strong&gt;. We can see that the &lt;strong&gt;northern-capital&lt;/strong&gt; calls the &lt;strong&gt;receive_army&lt;/strong&gt; endpoint of &lt;strong&gt;village-2&lt;/strong&gt; to initiate this move. The color of our span indicates which service it belongs to. As you can see, context is very important when it comes to populating spans within a trace. If the current span has no context of the previous, then the chain of events is broken, and we lose the ability to track API and function calls across services. &lt;/p&gt;&#xA;&lt;p&gt;Okay, so we can see that an army moved to &lt;strong&gt;village-2,&lt;/strong&gt; but what actually unfolded in that battle? That&amp;rsquo;s where span attributes come in. To find span attributes, let&amp;rsquo;s select &lt;strong&gt;village-2 receive_army&lt;/strong&gt; and expand the span attributes dropdown. &lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1172x754/fc0afc8fc2/game-of-traces-span-attributes.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1172x754/fc0afc8fc2/game-of-traces-span-attributes.png&#34;alt=&#34;A screenshot of span attributes.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1172x754/fc0afc8fc2/game-of-traces-span-attributes.png&#34;&#xA;alt=&#34;A screenshot of span attributes.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;p&gt;Span attributes are key-value pairs that provide further context for a particular span. Span attributes are optional, but are extremely useful when determining the state of particular variables or API calls. In our case, it allows us to track the battle that took place. We can see that the northern capital sent an army of four to defeat the army of three at village 2. It was a successful attack, leaving one army remaining to defend the captured village.&lt;/p&gt;&#xA;&lt;p&gt;A trace also allows us to generate a node graph to understand service flow, but also to summarize &lt;a href=&#34;/docs/grafana/latest/explore/simplified-exploration/traces/investigate/choose-red-metric/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;rate, error, and duration (RED) metrics&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1882x462/266b9efef7/games-of-traces-node-graph.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1882x462/266b9efef7/games-of-traces-node-graph.png&#34;alt=&#34;A screenshot of a node graph.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1882x462/266b9efef7/games-of-traces-node-graph.png&#34;&#xA;alt=&#34;A screenshot of a node graph.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;p&gt;In the context of our game, we represent lost battles by setting the span type to error. This allows us to see how many battles were both successful and unsuccessful during a game.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x1071/1ae710a2a6/game-of-traces-set-span-type-to-error.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x1071/1ae710a2a6/game-of-traces-set-span-type-to-error.png&#34;alt=&#34;A screenshot of RED metrics to track battles.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x1071/1ae710a2a6/game-of-traces-set-span-type-to-error.png&#34;&#xA;alt=&#34;A screenshot of RED metrics to track battles.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;h2 id=&#34;by-the-light-of-the-three&#34;&gt;By the light of the three!&lt;/h2&gt;&#xA;&lt;p&gt;One of OpenTelemetry’s greatest strengths is correlation of telemetry signals (in our case, traces, logs, and metrics), which is largely available out-of-the-box. If you generate logs within the context of a span, these logs will automatically contain the trace ID and span ID as part of their attributes. Metrics have a similar correlation method, but let&amp;rsquo;s focus on traces-to-logs first.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x991/e7b2a0945c/game-of-traces-to-logs.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x991/e7b2a0945c/game-of-traces-to-logs.png&#34;alt=&#34;A screenshot showing the correlation of traces to logs.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x991/e7b2a0945c/game-of-traces-to-logs.png&#34;&#xA;alt=&#34;A screenshot showing the correlation of traces to logs.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;p&gt;Within the LGTM stack, we provide the ability to &lt;a href=&#34;/docs/grafana-cloud/send-data/traces/use-traces-with-grafana/?pg=blog&amp;amp;plcmt=body-txt/#link-traces-and-logs&#34;&gt;correlate between traces stored in Tempo and logs stored in Loki.&lt;/a&gt; If we take our battle span (never thought I would say that in a sentence), we can select logs for the span. This will automatically query Loki using the span ID or trace ID or both (depending on your data source configuration), providing the logs from our village-2 at the time of the battle span. We can see a historic log of the battle that took place.&lt;/p&gt;&#xA;&lt;p&gt;Lastly, let&amp;rsquo;s look at &lt;a href=&#34;/docs/grafana-cloud/send-data/traces/use-traces-with-grafana/#link-traces-and-metrics&#34;&gt;traces-to-metrics&lt;/a&gt;. This is handled within OpenTelemetry and Prometheus as an exemplar. An &lt;a href=&#34;/docs/grafana/latest/fundamentals/exemplars/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;exemplar&lt;/a&gt; is a specific trace representative of a measurement taken in a given time interval. While metrics excel at giving you an aggregated view of your system, traces give you a fine-grained view of a single request; exemplars are a way to link the two.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x735/7a8f2dcd19/games-of-traces-exemplar.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x735/7a8f2dcd19/games-of-traces-exemplar.png&#34;alt=&#34;A screenshot of an exemplar.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x735/7a8f2dcd19/games-of-traces-exemplar.png&#34;&#xA;alt=&#34;A screenshot of an exemplar.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;p&gt;In our scenario, we can see that we generate a total number of battles per village, as battles take place. This metric is updated within the scope of our &lt;strong&gt;receive_army&lt;/strong&gt; battle span. Thus, when the metric reading is taken, we are given the trace and span ID, which is stored as an exemplar in Prometheus/Mimir. Grafana allows us to overlay exemplars on top of line graphs so we can see a timeline of the total number of battles each village has had and then drill down into a particular trace to understand what happened during that particular battle. &lt;/p&gt;&#xA;&lt;p&gt;Continuous profiles is the only signal missing here, but I plan to add profiles using &lt;a href=&#34;https://github.com/grafana/otel-profiling-python&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Grafana’s OpenTelemetry Profiling library&lt;/a&gt;. Stay tuned!  &lt;/p&gt;&#xA;&lt;h2 id=&#34;a-battle-is-a-series-of-cause-and-effect&#34;&gt;A battle is a series of cause and effect&lt;/h2&gt;&#xA;&lt;p&gt;The last feature we introduced (I say “we” because the idea came from Hedley Simons, one of our resident tracing experts) was &lt;a href=&#34;https://opentelemetry.io/docs/concepts/signals/traces/#span-links&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;span links&lt;/a&gt;. Links are optional and can be a bit more challenging to implement. Essentially, their role is to create relationships between spans that aren&amp;rsquo;t in a direct parent-child hierarchy. Unlike parent-child relationships (which are synchronous and hierarchical), links are more flexible and can connect spans across different traces or time periods. This becomes particularly useful in our case, as it ties gameplay together by linking a player’s actions across the course of the game. &lt;/p&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s first take a look at how links are represented in Grafana.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x1008/461a5a2616/game-of-traces-span-links.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x1008/461a5a2616/game-of-traces-span-links.png&#34;alt=&#34;A screenshot of span links.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x1008/461a5a2616/game-of-traces-span-links.png&#34;&#xA;alt=&#34;A screenshot of span links.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;p&gt;As we can see, our final all-out attack has a span link attached to it. This references the previous action our player took within the game sequence. Thus, we can track our game to the very beginning move in reverse order. &lt;/p&gt;&#xA;&lt;p&gt;So, what does this allow us to do? Well, this isn’t a practical use of Tempo’s query API, but it allowed us to create a replay feature.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x1098/2a8b5c6025/game-of-traces-visual-game-replay.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x1098/2a8b5c6025/game-of-traces-visual-game-replay.png&#34;alt=&#34;A screenshot of the visual game replay.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x1098/2a8b5c6025/game-of-traces-visual-game-replay.png&#34;&#xA;alt=&#34;A screenshot of the visual game replay.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;p&gt;The war map searches Tempo for a particular game session ID, which is stored as an attribute for each span. It then uses span links to retrieve each Trace within the link from Tempo in reverse order before we invert this. This gives us the ability to step through the actions of the player during the game. &lt;/p&gt;&#xA;&lt;h2 id=&#34;as-the-dust-settles-a-chance-for-reflection&#34;&gt;As the dust settles, a chance for reflection&lt;/h2&gt;&#xA;&lt;p&gt;When building this demo, my own “aha!” moment came with traces when I was designing the game AI and how that could interact with game mechanics. It was hard to know how the set of decision weights affected the AI’s actions — whether the AI would get stuck repeating the same mechanic over and over, or fail to interact with one of the Flask servers (capital or village).&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x1050/905555623f/game-of-traces-ai-decision-cycle.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x1050/905555623f/game-of-traces-ai-decision-cycle.png&#34;alt=&#34;A screenshot of traces that represent the AI decision cycle.&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x1050/905555623f/game-of-traces-ai-decision-cycle.png&#34;&#xA;alt=&#34;A screenshot of traces that represent the AI decision cycle.&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;p&gt;Traces let me track the decisions of the AI opponent throughout our match together. I discovered rather early on that my first attempt at the AI opponent didn’t react quickly enough to imminent threats from the player. If it didn’t recognize an all-out attack or that a village had been captured close to its capital, it remained passively collecting resources and taking villages. After modifying the AI’s behavior, I could see it play a more defensive role in its actions when the enemy was near, through its decision to spend less time collecting resources and more time building armies at its capital. &lt;/p&gt;&#xA;&lt;h2 id=&#34;game-over-for-now&#34;&gt;Game over… for now &lt;/h2&gt;&#xA;&lt;p&gt;I had a lot of fun building this game. It allowed me to truly dive into the OpenTelemetry SDK for Python and understand how traces and spans are created, how context is passed between one span to another, and how metrics and logs can be tied to a given span. &lt;/p&gt;&#xA;&lt;p&gt;I purposefully chose not to auto-instrument &lt;a href=&#34;https://github.com/grafana/alloy-scenarios/tree/main/game-of-tracing&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Game of Traces&lt;/a&gt;, so the techniques of instrumentation can be applicable across programming languages. I plan to write a follow-up post that dives deeper into the code base to cover how the game was instrumented. &lt;/p&gt;&#xA;&lt;p&gt;In the meantime, I hope this game provides a new way to learn observability and its value from the ground up. Until next time, for the north!&lt;/p&gt;</description>
      <pubDate>Mon, 11 Aug 2025 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【How to use SQL to learn more about your Grafana usage】How to use SQL to learn more about your Grafana usage</title>
      <link>https://grafana.com/blog/2025/08/08/how-to-use-slq-to-learn-more-about-your-grafana-usage/</link>
      <description>【&lt;p&gt;&lt;em&gt;Wilfried Roset is an engineering manager who leads an SRE team, and he is also a Grafana Champion. Wilfried currently works at OVHcloud, where he focuses on prioritizing sustainability, resilience, and industrialization to guarantee customers satisfaction.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Grafana needs a &lt;a href=&#34;/docs/grafana/latest/setup-grafana/configure-grafana/&#34;&gt;database&lt;/a&gt; to store all its objects, such as users, dashboards, or even data sources. Each time a user creates a dashboard, it results in a new row created in the database. This database backs everything in Grafana, which makes it a gold mine of information.&lt;/p&gt;&#xA;&lt;p&gt;In this blog I&amp;rsquo;ll show you how to take advantage of all those insights. But first, let&amp;rsquo;s take a quick look at how this all works.&lt;/p&gt;&#xA;&lt;p&gt;Grafana exposes its objects via an HTTP API, which you can essentially think of as the public API. Upon API call, Grafana manipulates the objects in the database and applies its business logic to them. And you can think of SQL queries as the internal API of Grafana, since there&amp;rsquo;s a direct connection between what is exposed via the HTTP API and the objects in the database. &lt;/p&gt;&#xA;&lt;p&gt;Still not convinced? Here is an example. &lt;/p&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s say you create a dashboard in Grafana via a POST &lt;code&gt;/api/dashboards/db&lt;/code&gt;, as per &lt;a href=&#34;/docs/grafana/latest/developers/http_api/dashboard/#create--update-dashboard&#34;&gt;the documentation&lt;/a&gt;. But what the documentation does not say is that the dashboard is stored in the table dashboard.This is also true when you create a data source via a POST &lt;code&gt;/api/datasources&lt;/code&gt; — it will be stored in the table &lt;code&gt;data_source&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;This table is exactly what we will use. With access to this database and a basic SQL expertise you can learn a lot about how a Grafana instance is used. Let&amp;rsquo;s have a quick look at a few examples.&lt;/p&gt;&#xA;&lt;p&gt;Disclaimer:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The blog post is written with the database of a Grafana instance running v10.1 backend by a PostgreSQL database. The SQL queries are subject to change.&lt;/li&gt;&#xA;&lt;li&gt;All of the information gathered via SQL queries are also accessible via Grafana&amp;rsquo;s API.&lt;/li&gt;&#xA;&lt;li&gt;Users must refrain from modifying the database objects. This could lead to breaking your database immediately or in the next upgrade!&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;organizations-users-dashboards-and-data-sources&#34;&gt;Organizations, users, dashboards, and data sources&lt;/h2&gt;&#xA;&lt;p&gt;First, we&amp;rsquo;re looking for general information such as number of &lt;code&gt;users,&lt;/code&gt; &lt;code&gt;dashboards&lt;/code&gt;, or &lt;code&gt;data_source&lt;/code&gt;. (There is a pivot table in Grafana that makes the multi-tenant experience great.)&lt;/p&gt;&#xA;&lt;p&gt;Grafana offers a nice way to organize yourself via organization. For example, your users might have access to an organization or your dashboards are visible in a given organization. Let’s start by looking at the number organizations, users, dashboards, and data sources in your instance:&lt;/p&gt;&#xA;&lt;h3 id=&#34;the-number-of-organizations&#34;&gt;The number of organizations&lt;/h3&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;grafana=&amp;gt; select count(*) from org;&#xA;count&#xA;-------&#xA;95&#xA;(1 row)&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h3 id=&#34;the-number-of-users&#34;&gt;The number of users&lt;/h3&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;grafana=&amp;gt; select count(*) from &amp;#34;user&amp;#34;;&#xA;count&#xA;-------&#xA;2165&#xA;(1 row)&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;Beware that &lt;code&gt;double-quotes&lt;/code&gt; are mandatory because &lt;code&gt;user&lt;/code&gt; is a reserved keyword in PostgreSQL. Without them your query returns the internal information in PostgreSQL rather than the content of the Grafana&amp;rsquo;s table &lt;code&gt;user&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;h3 id=&#34;the-number-of-dashboards&#34;&gt;The number of dashboards&lt;/h3&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;grafana=&amp;gt; select count(*) from dashboard where is_folder= &amp;#39;f&amp;#39;;&#xA;count&#xA;-------&#xA;3684&#xA;(1 row)&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h3 id=&#34;the-number-of-data_sources&#34;&gt;The number of &lt;code&gt;data_sources&lt;/code&gt;&lt;/h3&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;sql&#xA;grafana=&amp;gt; select count(*) from data_source;&#xA;count&#xA;-------&#xA;1947&#xA;(1 row)&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h2 id=&#34;digging-deeper-with-sql-joins&#34;&gt;Digging deeper with SQL joins&lt;/h2&gt;&#xA;&lt;p&gt;Now that we have some general information, we can zoom in. This is doable with SQL joins in any way you like. We could, for example, try to identify the organization with the most users or, more specifically, the organization with the most users with Admin privileges.&lt;/p&gt;&#xA;&lt;h3 id=&#34;the-number-of-users-per-organization&#34;&gt;The number of users per organization&lt;/h3&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;grafana=&amp;gt; select org_id, count(*) from org_user group by org_id order by count desc limit 5;&#xA;org_id | count&#xA;--------&amp;#43;-------&#xA;1 | 2118&#xA;94 | 424&#xA;96 | 222&#xA;2 | 202&#xA;106 | 156&#xA;(5 rows)&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h3 id=&#34;the-number-of-users-with-admin-privileges-per-organization&#34;&gt;The number of users with &lt;code&gt;Admin&lt;/code&gt; privileges per organization&lt;/h3&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;grafana=&amp;gt; select org_id, count(*) from org_user where role = &amp;#39;Admin&amp;#39; group by org_id order by count desc limit 5;&#xA; org_id | count&#xA;--------&amp;#43;-------&#xA;     96 |    30&#xA;     24 |    25&#xA;    537 |    23&#xA;    112 |    19&#xA;      4 |    16&#xA;(5 rows)&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h3 id=&#34;the-list-of-all-users-with-admin-privileges&#34;&gt;The list of all users with &lt;code&gt;Admin&lt;/code&gt; privileges&lt;/h3&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;grafana=&amp;gt; select distinct(u.login) from &amp;#34;user&amp;#34; u join org_user ou on u.id = ou.user_id where ou.role = &amp;#39;Admin&amp;#39; limit 10;&#xA;login&#xA;-------------------&#xA;Bulbasaur&#xA;Ivysaur&#xA;Venusaur&#xA;Charmander&#xA;Charmeleon&#xA;Charizard&#xA;Squirtle&#xA;Wartortle&#xA;Blastoise&#xA;Caterpie&#xA;(10 rows)&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h2 id=&#34;understanding-user-behavior&#34;&gt;Understanding user behavior&lt;/h2&gt;&#xA;&lt;p&gt;Now, let&amp;rsquo;s dig a little deeper to better understand our users. For example, we might want to know the most used data_source type per organization.&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;grafana=&amp;gt; select type, count(*) from data_source group by type order by count desc limit 5;&#xA;type | count&#xA;-------------------------------&amp;#43;-------&#xA;prometheus | 833&#xA;grafana-opensearch-datasource | 349&#xA;elasticsearch | 211&#xA;opentsdb | 134&#xA;marcusolsson-json-datasource | 98&#xA;(5 rows)&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;With this information, we know how to better support our users by providing the appropriate training. However, we don&amp;rsquo;t know which organization uses the most &lt;code&gt;prometheus&lt;/code&gt;. This information is just a SQL query away.&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;grafana=&amp;gt; select org_id, count(*) from data_source where type = &amp;#39;prometheus&amp;#39; group by org_id order by count desc limit 5;&#xA;org_id | count&#xA;--------&amp;#43;-------&#xA;1 | 206&#xA;112 | 72&#xA;4 | 57&#xA;695 | 37&#xA;2 | 31&#xA;(5 rows)&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;Great, we have the organization ID but this is not enough to know who to give training to. By joining the tables &lt;code&gt;user&lt;/code&gt;, &lt;code&gt;org_user&lt;/code&gt;, and &lt;code&gt;org&lt;/code&gt;, we can have in a single statement:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The organization ID&lt;/li&gt;&#xA;&lt;li&gt;The organization name&lt;/li&gt;&#xA;&lt;li&gt;The list of the users with &lt;code&gt;Admin&lt;/code&gt; privileges within a given organization&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;grafana=&amp;gt; select o.id as org_id, o.name as org_name, array_agg(u.login) as admin from &amp;#34;user&amp;#34; u join org_user ou on u.id = ou.user_id join org o on o.id = ou.org_id where ou.role = &amp;#39;Admin&amp;#39; group by o.name, ou.role, o.id order by 1, 2 limit 3;&#xA;org_id | org_name | admin&#xA;--------&amp;#43;-----------------------------------&amp;#43;----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xA;1 | Foo | {Bulbasaur,Charmander}&#xA;2 | Bar | {Charmeleon,Squirtle,Blastoise}&#xA;12 | Baz | {Venusaur}&#xA;(3 rows)&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;As you can see, you can learn a lot by exploring Grafana&amp;rsquo;s database. There is still a lot more that can be done to understand how your Grafana instance is used, but the queries can become harder to write, read, and understand. Let&amp;rsquo;s keep this for another time&amp;hellip; &lt;/p&gt;&#xA;&lt;p&gt;Or not. Here is OVHcloud’s most used panel type across our 3,000 dashboards.&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;grafana=&amp;gt; SELECT&#xA;elements.value AS panel_type,&#xA;COUNT(*) AS count&#xA;FROM&#xA;dashboard,&#xA;jsonb_array_elements_text(jsonb_path_query_array(data::jsonb, &amp;#39;$.panels[*].type ? (@ != &amp;#34;row&amp;#34;)&amp;#39;)) AS elements&#xA;GROUP BY&#xA;elements.value&#xA;ORDER BY&#xA;count DESC;&#xA;panel_type | count&#xA;---------------------------------------&amp;#43;-------&#xA;timeseries | 16045&#xA;stat | 7007&#xA;table | 2630&#xA;graph | 1691&#xA;gauge | 1443&#xA;singlestat | 972&#xA;text | 937&#xA;piechart | 906&#xA;bargauge | 603&#xA;barchart | 311&#xA;grafana-piechart-panel | 197&#xA;state-timeline | 135&#xA;table-old | 132&#xA;heatmap | 123&#xA;dashlist | 76&#xA;petrslavotinek-carpetplot-panel | 55&#xA;logs | 43&#xA;status-history | 42&#xA;grafana-clock-panel | 37&#xA;geomap | 26&#xA;alertlist | 25&#xA;netsage-sankey-panel | 24&#xA;marcusolsson-treemap-panel | 21&#xA;histogram | 20&#xA;grafana-polystat-panel | 14&#xA;knightss27-weathermap-panel | 8&#xA;grafana-worldmap-panel | 6&#xA;natel-discrete-panel | 5&#xA;trend | 4&#xA;xychart | 4&#xA;welcome | 3&#xA;traces | 2&#xA;jdbranham-diagram-panel | 2&#xA;flant-statusmap-panel | 2&#xA;yesoreyeram-boomtable-panel | 2&#xA;alexanderzobnin-zabbix-triggers-panel | 1&#xA;nodeGraph | 1&#xA;canvas | 1&#xA;(38 rows)&#xA;Time: 1413.119 ms (00:01.413)&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x1978/cbb3b60c89/sql-to-learn-about-grafana.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x1978/cbb3b60c89/sql-to-learn-about-grafana.png&#34;alt=&#34;A screenshot of a popular panels dashboard based on a SQL query&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x1978/cbb3b60c89/sql-to-learn-about-grafana.png&#34;&#xA;alt=&#34;A screenshot of a popular panels dashboard based on a SQL query&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;p&gt;SQL is awesome, especially PostgreSQL with its powerful &lt;a href=&#34;https://www.postgresql.org/docs/current/functions-json.html&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;jsonb features&lt;/a&gt;. If you like challenges, you can try to produce the same information by using Grafana&amp;rsquo;s API—with the same response time.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Want to share your Grafana story and dashboards with the community? Drop us a note at&lt;/em&gt; &lt;em&gt;&lt;a href=&#34;mailto:stories@grafana.com&#34;&gt;stories@grafana.com&lt;/a&gt;__.&lt;/em&gt;&lt;/p&gt;】&lt;p&gt;&lt;em&gt;Wilfried Roset is an engineering manager who leads an SRE team, and he is also a Grafana Champion. Wilfried currently works at OVHcloud, where he focuses on prioritizing sustainability, resilience, and industrialization to guarantee customers satisfaction.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Grafana needs a &lt;a href=&#34;/docs/grafana/latest/setup-grafana/configure-grafana/&#34;&gt;database&lt;/a&gt; to store all its objects, such as users, dashboards, or even data sources. Each time a user creates a dashboard, it results in a new row created in the database. This database backs everything in Grafana, which makes it a gold mine of information.&lt;/p&gt;&#xA;&lt;p&gt;In this blog I&amp;rsquo;ll show you how to take advantage of all those insights. But first, let&amp;rsquo;s take a quick look at how this all works.&lt;/p&gt;&#xA;&lt;p&gt;Grafana exposes its objects via an HTTP API, which you can essentially think of as the public API. Upon API call, Grafana manipulates the objects in the database and applies its business logic to them. And you can think of SQL queries as the internal API of Grafana, since there&amp;rsquo;s a direct connection between what is exposed via the HTTP API and the objects in the database. &lt;/p&gt;&#xA;&lt;p&gt;Still not convinced? Here is an example. &lt;/p&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s say you create a dashboard in Grafana via a POST &lt;code&gt;/api/dashboards/db&lt;/code&gt;, as per &lt;a href=&#34;/docs/grafana/latest/developers/http_api/dashboard/#create--update-dashboard&#34;&gt;the documentation&lt;/a&gt;. But what the documentation does not say is that the dashboard is stored in the table dashboard.This is also true when you create a data source via a POST &lt;code&gt;/api/datasources&lt;/code&gt; — it will be stored in the table &lt;code&gt;data_source&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;This table is exactly what we will use. With access to this database and a basic SQL expertise you can learn a lot about how a Grafana instance is used. Let&amp;rsquo;s have a quick look at a few examples.&lt;/p&gt;&#xA;&lt;p&gt;Disclaimer:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The blog post is written with the database of a Grafana instance running v10.1 backend by a PostgreSQL database. The SQL queries are subject to change.&lt;/li&gt;&#xA;&lt;li&gt;All of the information gathered via SQL queries are also accessible via Grafana&amp;rsquo;s API.&lt;/li&gt;&#xA;&lt;li&gt;Users must refrain from modifying the database objects. This could lead to breaking your database immediately or in the next upgrade!&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;organizations-users-dashboards-and-data-sources&#34;&gt;Organizations, users, dashboards, and data sources&lt;/h2&gt;&#xA;&lt;p&gt;First, we&amp;rsquo;re looking for general information such as number of &lt;code&gt;users,&lt;/code&gt; &lt;code&gt;dashboards&lt;/code&gt;, or &lt;code&gt;data_source&lt;/code&gt;. (There is a pivot table in Grafana that makes the multi-tenant experience great.)&lt;/p&gt;&#xA;&lt;p&gt;Grafana offers a nice way to organize yourself via organization. For example, your users might have access to an organization or your dashboards are visible in a given organization. Let’s start by looking at the number organizations, users, dashboards, and data sources in your instance:&lt;/p&gt;&#xA;&lt;h3 id=&#34;the-number-of-organizations&#34;&gt;The number of organizations&lt;/h3&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;grafana=&amp;gt; select count(*) from org;&#xA;count&#xA;-------&#xA;95&#xA;(1 row)&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h3 id=&#34;the-number-of-users&#34;&gt;The number of users&lt;/h3&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;grafana=&amp;gt; select count(*) from &amp;#34;user&amp;#34;;&#xA;count&#xA;-------&#xA;2165&#xA;(1 row)&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;Beware that &lt;code&gt;double-quotes&lt;/code&gt; are mandatory because &lt;code&gt;user&lt;/code&gt; is a reserved keyword in PostgreSQL. Without them your query returns the internal information in PostgreSQL rather than the content of the Grafana&amp;rsquo;s table &lt;code&gt;user&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;h3 id=&#34;the-number-of-dashboards&#34;&gt;The number of dashboards&lt;/h3&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;grafana=&amp;gt; select count(*) from dashboard where is_folder= &amp;#39;f&amp;#39;;&#xA;count&#xA;-------&#xA;3684&#xA;(1 row)&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h3 id=&#34;the-number-of-data_sources&#34;&gt;The number of &lt;code&gt;data_sources&lt;/code&gt;&lt;/h3&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;sql&#xA;grafana=&amp;gt; select count(*) from data_source;&#xA;count&#xA;-------&#xA;1947&#xA;(1 row)&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h2 id=&#34;digging-deeper-with-sql-joins&#34;&gt;Digging deeper with SQL joins&lt;/h2&gt;&#xA;&lt;p&gt;Now that we have some general information, we can zoom in. This is doable with SQL joins in any way you like. We could, for example, try to identify the organization with the most users or, more specifically, the organization with the most users with Admin privileges.&lt;/p&gt;&#xA;&lt;h3 id=&#34;the-number-of-users-per-organization&#34;&gt;The number of users per organization&lt;/h3&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;grafana=&amp;gt; select org_id, count(*) from org_user group by org_id order by count desc limit 5;&#xA;org_id | count&#xA;--------&amp;#43;-------&#xA;1 | 2118&#xA;94 | 424&#xA;96 | 222&#xA;2 | 202&#xA;106 | 156&#xA;(5 rows)&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h3 id=&#34;the-number-of-users-with-admin-privileges-per-organization&#34;&gt;The number of users with &lt;code&gt;Admin&lt;/code&gt; privileges per organization&lt;/h3&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;grafana=&amp;gt; select org_id, count(*) from org_user where role = &amp;#39;Admin&amp;#39; group by org_id order by count desc limit 5;&#xA; org_id | count&#xA;--------&amp;#43;-------&#xA;     96 |    30&#xA;     24 |    25&#xA;    537 |    23&#xA;    112 |    19&#xA;      4 |    16&#xA;(5 rows)&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h3 id=&#34;the-list-of-all-users-with-admin-privileges&#34;&gt;The list of all users with &lt;code&gt;Admin&lt;/code&gt; privileges&lt;/h3&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;grafana=&amp;gt; select distinct(u.login) from &amp;#34;user&amp;#34; u join org_user ou on u.id = ou.user_id where ou.role = &amp;#39;Admin&amp;#39; limit 10;&#xA;login&#xA;-------------------&#xA;Bulbasaur&#xA;Ivysaur&#xA;Venusaur&#xA;Charmander&#xA;Charmeleon&#xA;Charizard&#xA;Squirtle&#xA;Wartortle&#xA;Blastoise&#xA;Caterpie&#xA;(10 rows)&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h2 id=&#34;understanding-user-behavior&#34;&gt;Understanding user behavior&lt;/h2&gt;&#xA;&lt;p&gt;Now, let&amp;rsquo;s dig a little deeper to better understand our users. For example, we might want to know the most used data_source type per organization.&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;grafana=&amp;gt; select type, count(*) from data_source group by type order by count desc limit 5;&#xA;type | count&#xA;-------------------------------&amp;#43;-------&#xA;prometheus | 833&#xA;grafana-opensearch-datasource | 349&#xA;elasticsearch | 211&#xA;opentsdb | 134&#xA;marcusolsson-json-datasource | 98&#xA;(5 rows)&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;With this information, we know how to better support our users by providing the appropriate training. However, we don&amp;rsquo;t know which organization uses the most &lt;code&gt;prometheus&lt;/code&gt;. This information is just a SQL query away.&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;grafana=&amp;gt; select org_id, count(*) from data_source where type = &amp;#39;prometheus&amp;#39; group by org_id order by count desc limit 5;&#xA;org_id | count&#xA;--------&amp;#43;-------&#xA;1 | 206&#xA;112 | 72&#xA;4 | 57&#xA;695 | 37&#xA;2 | 31&#xA;(5 rows)&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;Great, we have the organization ID but this is not enough to know who to give training to. By joining the tables &lt;code&gt;user&lt;/code&gt;, &lt;code&gt;org_user&lt;/code&gt;, and &lt;code&gt;org&lt;/code&gt;, we can have in a single statement:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The organization ID&lt;/li&gt;&#xA;&lt;li&gt;The organization name&lt;/li&gt;&#xA;&lt;li&gt;The list of the users with &lt;code&gt;Admin&lt;/code&gt; privileges within a given organization&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;grafana=&amp;gt; select o.id as org_id, o.name as org_name, array_agg(u.login) as admin from &amp;#34;user&amp;#34; u join org_user ou on u.id = ou.user_id join org o on o.id = ou.org_id where ou.role = &amp;#39;Admin&amp;#39; group by o.name, ou.role, o.id order by 1, 2 limit 3;&#xA;org_id | org_name | admin&#xA;--------&amp;#43;-----------------------------------&amp;#43;----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xA;1 | Foo | {Bulbasaur,Charmander}&#xA;2 | Bar | {Charmeleon,Squirtle,Blastoise}&#xA;12 | Baz | {Venusaur}&#xA;(3 rows)&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;As you can see, you can learn a lot by exploring Grafana&amp;rsquo;s database. There is still a lot more that can be done to understand how your Grafana instance is used, but the queries can become harder to write, read, and understand. Let&amp;rsquo;s keep this for another time&amp;hellip; &lt;/p&gt;&#xA;&lt;p&gt;Or not. Here is OVHcloud’s most used panel type across our 3,000 dashboards.&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;grafana=&amp;gt; SELECT&#xA;elements.value AS panel_type,&#xA;COUNT(*) AS count&#xA;FROM&#xA;dashboard,&#xA;jsonb_array_elements_text(jsonb_path_query_array(data::jsonb, &amp;#39;$.panels[*].type ? (@ != &amp;#34;row&amp;#34;)&amp;#39;)) AS elements&#xA;GROUP BY&#xA;elements.value&#xA;ORDER BY&#xA;count DESC;&#xA;panel_type | count&#xA;---------------------------------------&amp;#43;-------&#xA;timeseries | 16045&#xA;stat | 7007&#xA;table | 2630&#xA;graph | 1691&#xA;gauge | 1443&#xA;singlestat | 972&#xA;text | 937&#xA;piechart | 906&#xA;bargauge | 603&#xA;barchart | 311&#xA;grafana-piechart-panel | 197&#xA;state-timeline | 135&#xA;table-old | 132&#xA;heatmap | 123&#xA;dashlist | 76&#xA;petrslavotinek-carpetplot-panel | 55&#xA;logs | 43&#xA;status-history | 42&#xA;grafana-clock-panel | 37&#xA;geomap | 26&#xA;alertlist | 25&#xA;netsage-sankey-panel | 24&#xA;marcusolsson-treemap-panel | 21&#xA;histogram | 20&#xA;grafana-polystat-panel | 14&#xA;knightss27-weathermap-panel | 8&#xA;grafana-worldmap-panel | 6&#xA;natel-discrete-panel | 5&#xA;trend | 4&#xA;xychart | 4&#xA;welcome | 3&#xA;traces | 2&#xA;jdbranham-diagram-panel | 2&#xA;flant-statusmap-panel | 2&#xA;yesoreyeram-boomtable-panel | 2&#xA;alexanderzobnin-zabbix-triggers-panel | 1&#xA;nodeGraph | 1&#xA;canvas | 1&#xA;(38 rows)&#xA;Time: 1413.119 ms (00:01.413)&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1999x1978/cbb3b60c89/sql-to-learn-about-grafana.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1999x1978/cbb3b60c89/sql-to-learn-about-grafana.png&#34;alt=&#34;A screenshot of a popular panels dashboard based on a SQL query&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1999x1978/cbb3b60c89/sql-to-learn-about-grafana.png&#34;&#xA;alt=&#34;A screenshot of a popular panels dashboard based on a SQL query&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&#xA;&lt;p&gt;SQL is awesome, especially PostgreSQL with its powerful &lt;a href=&#34;https://www.postgresql.org/docs/current/functions-json.html&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;jsonb features&lt;/a&gt;. If you like challenges, you can try to produce the same information by using Grafana&amp;rsquo;s API—with the same response time.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Want to share your Grafana story and dashboards with the community? Drop us a note at&lt;/em&gt; &lt;em&gt;&lt;a href=&#34;mailto:stories@grafana.com&#34;&gt;stories@grafana.com&lt;/a&gt;__.&lt;/em&gt;&lt;/p&gt;</description>
      <pubDate>Fri, 08 Aug 2025 11:36:00 +0000</pubDate>
    </item>
    <item>
      <title>【Deletion protection in Grafana Cloud: a simple way to safeguard your observability stack】Deletion protection in Grafana Cloud: a simple way to safeguard your observability stack</title>
      <link>https://grafana.com/blog/2025/08/07/deletion-protection-in-grafana-cloud-a-simple-way-to-safeguard-your-observability-stack/</link>
      <description>【&lt;p&gt;We&amp;rsquo;ve all had that &amp;ldquo;uh-oh&amp;rdquo; moment. You press &lt;strong&gt;Enter&lt;/strong&gt; and your blood runs cold, as you realize you just deleted something critical.&lt;/p&gt;&#xA;&lt;p&gt;For engineering teams, this type of disaster takes many forms. For example, maybe you used a &lt;code&gt;DELETE&lt;/code&gt; statement without a &lt;code&gt;WHERE&lt;/code&gt; clause to delete a row in a database, and accidentally deleted all of them instead. &lt;/p&gt;&#xA;&lt;p&gt;To protect you from the accidental deletion of critical resources in Grafana Cloud, we&amp;rsquo;re introducing a feature called &lt;strong&gt;&lt;a href=&#34;/docs/grafana-cloud/developer-resources/api-reference/cloud-api/?pg=blog&amp;amp;plcmt=body-txt/#update-stack&#34;&gt;deletion protection&lt;/a&gt;&lt;/strong&gt;. In this blog post, we’ll take a closer look at what deletion protection is, how to enable it, and how to integrate it within your infrastructure as code workflows. &lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-deletion-protection-in-grafana-cloud&#34;&gt;What is deletion protection in Grafana Cloud?&lt;/h2&gt;&#xA;&lt;p&gt;Deletion protection is a safeguard that prevents the unintended removal of your Grafana Cloud stack, meaning all the managed observability solutions used within your Grafana Cloud account. &lt;/p&gt;&#xA;&lt;p&gt;Once enabled, it blocks deletion attempts across multiple channels, including:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;/auth/sign-in&#34;&gt;The Grafana Cloud UI (via grafana.com)&lt;/a&gt; &lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/grafana/terraform-provider-grafana&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;The Grafana Terraform provider&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/grafana/crossplane-provider-grafana&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;The Grafana Crossplane provider&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/grafana/grafana-ansible-collection&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;The Grafana Ansible collection&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;If a stack is protected, any deletion attempts will be explicitly rejected until deletion protection is manually disabled. For example, if you enable deletion protection via the UI, Terraform will reject stack deletions unless you explicitly remove the protection first.&lt;/p&gt;&#xA;&lt;h2 id=&#34;how-to-enable-deletion-protection&#34;&gt;How to enable deletion protection&lt;/h2&gt;&#xA;&lt;p&gt;Starting last month, all newly created Grafana Cloud stacks will have deletion protection enabled by default when created through &lt;a href=&#34;/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;grafana.com&lt;/a&gt;, and supported versions of Terraform, Crossplane, and Ansible. &lt;/p&gt;&#xA;&lt;p&gt;This means that you must explicitly disable the protection before a stack can be deleted.&lt;/p&gt;&#xA;&lt;p&gt;To manually toggle the deletion protection feature on and off, you have a few options:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Use the Grafana Cloud UI&lt;/strong&gt;: Navigate to your stack settings and check the deletion protection check box to enable it. Uncheck the box to disable the feature.&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1357x447/1b0b2ad271/deletion-protection-ui.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1357x447/1b0b2ad271/deletion-protection-ui.png&#34;alt=&#34;&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1357x447/1b0b2ad271/deletion-protection-ui.png&#34;&#xA;alt=&#34;&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Use the Grafana Cloud API&lt;/strong&gt;: Perform a &lt;code&gt;GET&lt;/code&gt; request using the &lt;a href=&#34;/docs/grafana-cloud/developer-resources/api-reference/cloud-api/?pg=blog&amp;amp;plcmt=body-txt/#update-stack&#34;&gt;Cloud API&lt;/a&gt; and update the value of the &lt;code&gt;deleteProtection&lt;/code&gt; property. A value of &lt;code&gt;true&lt;/code&gt; enables the feature, and a value of &lt;code&gt;false&lt;/code&gt; disables it. &lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Use one of the infrastructure as code methods&lt;/strong&gt; described below.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;deletion-protection-infrastructure-as-code-support&#34;&gt;Deletion protection: infrastructure as code support&lt;/h2&gt;&#xA;&lt;p&gt;At Grafana Labs, we believe automation is essential for robust, predictable, and reliable outcomes within your observability workflows. Grafana Cloud supports infrastructure as code by providing several tools and integrations that allow you to manage and provision Grafana resources declaratively, using code. &lt;/p&gt;&#xA;&lt;p&gt;Deletion protection is fully supported in our infrastructure as code integrations for &lt;a href=&#34;/docs/grafana-cloud/developer-resources/infrastructure-as-code/terraform/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Terraform&lt;/a&gt;, &lt;a href=&#34;/docs/grafana-cloud/developer-resources/infrastructure-as-code/?pg=blog&amp;amp;plcmt=body-txt/#grafana-crossplane-provider&#34;&gt;Crossplane&lt;/a&gt;, and &lt;a href=&#34;/docs/grafana-cloud/developer-resources/infrastructure-as-code/?pg=blog&amp;amp;plcmt=body-txt/#grafana-ansible-collection&#34;&gt;Ansible&lt;/a&gt;. &lt;/p&gt;&#xA;&lt;h3 id=&#34;terraform-support&#34;&gt;Terraform support&lt;/h3&gt;&#xA;&lt;p&gt;Starting from provider version &lt;a href=&#34;https://github.com/grafana/terraform-provider-grafana/releases/tag/v4.0.0&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;v4.0.0&lt;/a&gt;, all newly created Grafana Cloud stacks have &lt;code&gt;delete_protection&lt;/code&gt; enabled by default in the stack resource.&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;resource &amp;#34;grafana_cloud_stack&amp;#34; &amp;#34;my_stack&amp;#34; {&#xA;provider = grafana.cloud&#xA;delete_protection = true&#xA;name = &amp;#34;&amp;lt;stack-name&amp;gt;&amp;#34;&#xA;slug = &amp;#34;&amp;lt;stack-name&amp;gt;&amp;#34;&#xA;region_slug = &amp;#34;&amp;lt;region&amp;gt;&amp;#34; # Example &amp;#34;us&amp;#34;,&amp;#34;eu&amp;#34; etc&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h3 id=&#34;crossplane-support&#34;&gt;Crossplane support&lt;/h3&gt;&#xA;&lt;p&gt;Like Terraform, the  &lt;code&gt;deleteProtection&lt;/code&gt; flag will be enabled by default on all newly created Grafana Cloud stacks, starting from supported Crossplane versions &lt;a href=&#34;https://github.com/grafana/crossplane-provider-grafana/releases/tag/v0.31.0&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;v0.31.0&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;# Cloud Stack&#xA;apiVersion: cloud.grafana.crossplane.io/v1alpha1&#xA;kind: Stack&#xA;metadata:&#xA;name: my-stack&#xA;spec:&#xA;forProvider:&#xA;slug: &amp;#39;crossplanetest&amp;#39;&#xA;name: &amp;#39;crossplanetest&amp;#39;&#xA;regionSlug: &amp;#34;us&amp;#34;&#xA;deleteProtection: true&#xA;providerConfigRef:&#xA;name: grafana-cloud-provider&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h3 id=&#34;ansible-support&#34;&gt;Ansible support&lt;/h3&gt;&#xA;&lt;p&gt;Consistent with Terraform and Crossplane, the &lt;code&gt;delete_protection&lt;/code&gt; property is enabled (true) by default for newly created Grafana Cloud stacks, starting from supported Ansible versions &lt;a href=&#34;https://github.com/grafana/grafana-ansible-collection/releases/tag/6.0.2&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;6.0.2.&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;- name: Using grafana collection&#xA;tasks:&#xA;- name: Create a Grafana Cloud stack&#xA;grafana.grafana.cloud_stack:&#xA;name: &amp;lt;name&amp;gt;&#xA;stack_slug: &amp;lt;stack-slug&amp;gt;&#xA;org_slug: &amp;lt;org-slug&amp;gt;&#xA;cloud_api_key: &amp;#34;&amp;lt;api-key&amp;gt;&amp;#34;&#xA;region: eu&#xA;delete_protection: true&#xA;state: present&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h3 id=&#34;protection-by-default&#34;&gt;Protection by default&lt;/h3&gt;&#xA;&lt;p&gt;To better protect your Grafana Cloud stack, Terraform and Crossplane providers supporting the new &lt;code&gt;delete_protection&lt;/code&gt; flag will default to enabling protection, even if the flag isn&amp;rsquo;t explicitly set.&lt;/p&gt;&#xA;&lt;p&gt;This means that if you do not disable it, it will be enabled for you.&lt;/p&gt;&#xA;&lt;p&gt;This default protection will also occur when you upgrade from a version of a provider that does not support deletion protection to a version that does. When you upgrade the Terraform or Crossplane provider or the Ansible collection, drift will be detected because the desired state does not contain the deletion protection flag (and it defaults to &lt;code&gt;true&lt;/code&gt;), whereas the stack in the backend has it set to &lt;code&gt;false&lt;/code&gt; (for backwards compatibility). &lt;/p&gt;&#xA;&lt;p&gt;The recommended action is to apply the changes to remove the drift and get your stack protected against accidental deletions, but if you do not want deletion protection, you can set the flag to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;how-to-learn-more&#34;&gt;How to learn more &lt;/h2&gt;&#xA;&lt;p&gt;We hope this new capability in Grafana Cloud empowers you with greater flexibility to safely manage your resources.&lt;/p&gt;&#xA;&lt;p&gt;To learn more, please check out our &lt;a href=&#34;/docs/grafana-cloud/developer-resources/api-reference/cloud-api/#delete-stack&#34;&gt;technical docs&lt;/a&gt;. &lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;/products/cloud/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Cloud&lt;/a&gt;&lt;/em&gt; &lt;em&gt;is the easiest way to get started with metrics, logs, traces, dashboards, and more. We have a generous forever-free tier and plans for every use case.&lt;/em&gt; &lt;em&gt;&lt;a href=&#34;/auth/sign-up/create-user/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Sign up for free now&lt;/a&gt;__!&lt;/em&gt;&lt;/p&gt;】&lt;p&gt;We&amp;rsquo;ve all had that &amp;ldquo;uh-oh&amp;rdquo; moment. You press &lt;strong&gt;Enter&lt;/strong&gt; and your blood runs cold, as you realize you just deleted something critical.&lt;/p&gt;&#xA;&lt;p&gt;For engineering teams, this type of disaster takes many forms. For example, maybe you used a &lt;code&gt;DELETE&lt;/code&gt; statement without a &lt;code&gt;WHERE&lt;/code&gt; clause to delete a row in a database, and accidentally deleted all of them instead. &lt;/p&gt;&#xA;&lt;p&gt;To protect you from the accidental deletion of critical resources in Grafana Cloud, we&amp;rsquo;re introducing a feature called &lt;strong&gt;&lt;a href=&#34;/docs/grafana-cloud/developer-resources/api-reference/cloud-api/?pg=blog&amp;amp;plcmt=body-txt/#update-stack&#34;&gt;deletion protection&lt;/a&gt;&lt;/strong&gt;. In this blog post, we’ll take a closer look at what deletion protection is, how to enable it, and how to integrate it within your infrastructure as code workflows. &lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-deletion-protection-in-grafana-cloud&#34;&gt;What is deletion protection in Grafana Cloud?&lt;/h2&gt;&#xA;&lt;p&gt;Deletion protection is a safeguard that prevents the unintended removal of your Grafana Cloud stack, meaning all the managed observability solutions used within your Grafana Cloud account. &lt;/p&gt;&#xA;&lt;p&gt;Once enabled, it blocks deletion attempts across multiple channels, including:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;/auth/sign-in&#34;&gt;The Grafana Cloud UI (via grafana.com)&lt;/a&gt; &lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/grafana/terraform-provider-grafana&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;The Grafana Terraform provider&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/grafana/crossplane-provider-grafana&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;The Grafana Crossplane provider&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/grafana/grafana-ansible-collection&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;The Grafana Ansible collection&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;If a stack is protected, any deletion attempts will be explicitly rejected until deletion protection is manually disabled. For example, if you enable deletion protection via the UI, Terraform will reject stack deletions unless you explicitly remove the protection first.&lt;/p&gt;&#xA;&lt;h2 id=&#34;how-to-enable-deletion-protection&#34;&gt;How to enable deletion protection&lt;/h2&gt;&#xA;&lt;p&gt;Starting last month, all newly created Grafana Cloud stacks will have deletion protection enabled by default when created through &lt;a href=&#34;/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;grafana.com&lt;/a&gt;, and supported versions of Terraform, Crossplane, and Ansible. &lt;/p&gt;&#xA;&lt;p&gt;This means that you must explicitly disable the protection before a stack can be deleted.&lt;/p&gt;&#xA;&lt;p&gt;To manually toggle the deletion protection feature on and off, you have a few options:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Use the Grafana Cloud UI&lt;/strong&gt;: Navigate to your stack settings and check the deletion protection check box to enable it. Uncheck the box to disable the feature.&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: none;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;https://a-us.storyblok.com/f/1022730/1357x447/1b0b2ad271/deletion-protection-ui.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;https://a-us.storyblok.com/f/1022730/1357x447/1b0b2ad271/deletion-protection-ui.png&#34;alt=&#34;&#34;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;https://a-us.storyblok.com/f/1022730/1357x447/1b0b2ad271/deletion-protection-ui.png&#34;&#xA;alt=&#34;&#34;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Use the Grafana Cloud API&lt;/strong&gt;: Perform a &lt;code&gt;GET&lt;/code&gt; request using the &lt;a href=&#34;/docs/grafana-cloud/developer-resources/api-reference/cloud-api/?pg=blog&amp;amp;plcmt=body-txt/#update-stack&#34;&gt;Cloud API&lt;/a&gt; and update the value of the &lt;code&gt;deleteProtection&lt;/code&gt; property. A value of &lt;code&gt;true&lt;/code&gt; enables the feature, and a value of &lt;code&gt;false&lt;/code&gt; disables it. &lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Use one of the infrastructure as code methods&lt;/strong&gt; described below.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;deletion-protection-infrastructure-as-code-support&#34;&gt;Deletion protection: infrastructure as code support&lt;/h2&gt;&#xA;&lt;p&gt;At Grafana Labs, we believe automation is essential for robust, predictable, and reliable outcomes within your observability workflows. Grafana Cloud supports infrastructure as code by providing several tools and integrations that allow you to manage and provision Grafana resources declaratively, using code. &lt;/p&gt;&#xA;&lt;p&gt;Deletion protection is fully supported in our infrastructure as code integrations for &lt;a href=&#34;/docs/grafana-cloud/developer-resources/infrastructure-as-code/terraform/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Terraform&lt;/a&gt;, &lt;a href=&#34;/docs/grafana-cloud/developer-resources/infrastructure-as-code/?pg=blog&amp;amp;plcmt=body-txt/#grafana-crossplane-provider&#34;&gt;Crossplane&lt;/a&gt;, and &lt;a href=&#34;/docs/grafana-cloud/developer-resources/infrastructure-as-code/?pg=blog&amp;amp;plcmt=body-txt/#grafana-ansible-collection&#34;&gt;Ansible&lt;/a&gt;. &lt;/p&gt;&#xA;&lt;h3 id=&#34;terraform-support&#34;&gt;Terraform support&lt;/h3&gt;&#xA;&lt;p&gt;Starting from provider version &lt;a href=&#34;https://github.com/grafana/terraform-provider-grafana/releases/tag/v4.0.0&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;v4.0.0&lt;/a&gt;, all newly created Grafana Cloud stacks have &lt;code&gt;delete_protection&lt;/code&gt; enabled by default in the stack resource.&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;resource &amp;#34;grafana_cloud_stack&amp;#34; &amp;#34;my_stack&amp;#34; {&#xA;provider = grafana.cloud&#xA;delete_protection = true&#xA;name = &amp;#34;&amp;lt;stack-name&amp;gt;&amp;#34;&#xA;slug = &amp;#34;&amp;lt;stack-name&amp;gt;&amp;#34;&#xA;region_slug = &amp;#34;&amp;lt;region&amp;gt;&amp;#34; # Example &amp;#34;us&amp;#34;,&amp;#34;eu&amp;#34; etc&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h3 id=&#34;crossplane-support&#34;&gt;Crossplane support&lt;/h3&gt;&#xA;&lt;p&gt;Like Terraform, the  &lt;code&gt;deleteProtection&lt;/code&gt; flag will be enabled by default on all newly created Grafana Cloud stacks, starting from supported Crossplane versions &lt;a href=&#34;https://github.com/grafana/crossplane-provider-grafana/releases/tag/v0.31.0&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;v0.31.0&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;# Cloud Stack&#xA;apiVersion: cloud.grafana.crossplane.io/v1alpha1&#xA;kind: Stack&#xA;metadata:&#xA;name: my-stack&#xA;spec:&#xA;forProvider:&#xA;slug: &amp;#39;crossplanetest&amp;#39;&#xA;name: &amp;#39;crossplanetest&amp;#39;&#xA;regionSlug: &amp;#34;us&amp;#34;&#xA;deleteProtection: true&#xA;providerConfigRef:&#xA;name: grafana-cloud-provider&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h3 id=&#34;ansible-support&#34;&gt;Ansible support&lt;/h3&gt;&#xA;&lt;p&gt;Consistent with Terraform and Crossplane, the &lt;code&gt;delete_protection&lt;/code&gt; property is enabled (true) by default for newly created Grafana Cloud stacks, starting from supported Ansible versions &lt;a href=&#34;https://github.com/grafana/grafana-ansible-collection/releases/tag/6.0.2&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;6.0.2.&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;- name: Using grafana collection&#xA;tasks:&#xA;- name: Create a Grafana Cloud stack&#xA;grafana.grafana.cloud_stack:&#xA;name: &amp;lt;name&amp;gt;&#xA;stack_slug: &amp;lt;stack-slug&amp;gt;&#xA;org_slug: &amp;lt;org-slug&amp;gt;&#xA;cloud_api_key: &amp;#34;&amp;lt;api-key&amp;gt;&amp;#34;&#xA;region: eu&#xA;delete_protection: true&#xA;state: present&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h3 id=&#34;protection-by-default&#34;&gt;Protection by default&lt;/h3&gt;&#xA;&lt;p&gt;To better protect your Grafana Cloud stack, Terraform and Crossplane providers supporting the new &lt;code&gt;delete_protection&lt;/code&gt; flag will default to enabling protection, even if the flag isn&amp;rsquo;t explicitly set.&lt;/p&gt;&#xA;&lt;p&gt;This means that if you do not disable it, it will be enabled for you.&lt;/p&gt;&#xA;&lt;p&gt;This default protection will also occur when you upgrade from a version of a provider that does not support deletion protection to a version that does. When you upgrade the Terraform or Crossplane provider or the Ansible collection, drift will be detected because the desired state does not contain the deletion protection flag (and it defaults to &lt;code&gt;true&lt;/code&gt;), whereas the stack in the backend has it set to &lt;code&gt;false&lt;/code&gt; (for backwards compatibility). &lt;/p&gt;&#xA;&lt;p&gt;The recommended action is to apply the changes to remove the drift and get your stack protected against accidental deletions, but if you do not want deletion protection, you can set the flag to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;how-to-learn-more&#34;&gt;How to learn more &lt;/h2&gt;&#xA;&lt;p&gt;We hope this new capability in Grafana Cloud empowers you with greater flexibility to safely manage your resources.&lt;/p&gt;&#xA;&lt;p&gt;To learn more, please check out our &lt;a href=&#34;/docs/grafana-cloud/developer-resources/api-reference/cloud-api/#delete-stack&#34;&gt;technical docs&lt;/a&gt;. &lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;/products/cloud/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Cloud&lt;/a&gt;&lt;/em&gt; &lt;em&gt;is the easiest way to get started with metrics, logs, traces, dashboards, and more. We have a generous forever-free tier and plans for every use case.&lt;/em&gt; &lt;em&gt;&lt;a href=&#34;/auth/sign-up/create-user/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Sign up for free now&lt;/a&gt;__!&lt;/em&gt;&lt;/p&gt;</description>
      <pubDate>Thu, 07 Aug 2025 00:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>