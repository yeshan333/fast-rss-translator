<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Grafana Labs blog on Grafana Labs</title>
    <link>/blog/index.xml</link>
    <description>Recent content in Grafana Labs blog on Grafana Labs</description>
    <item>
      <title>【Grafana Cloud in Indonesia: Learn how we&#39;re meeting users where they are with our latest region】印度尼西亚的 Grafana Cloud：了解我们如何在最新区域与用户见面</title>
      <link>https://grafana.com/blog/2024/11/01/grafana-cloud-in-indonesia-learn-how-were-meeting-users-where-they-are-with-our-latest-region/</link>
      <description>【&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The Grafana Cloud region in Indonesia went live on Wednesday, Nov. 6, 2024.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;As part of our continuing effort to meet the needs of Grafana users around the world, we are excited to announce a new Grafana Cloud region in Indonesia.&lt;/p&gt;&#xA;&lt;p&gt;This new Grafana Cloud region, which will roll out this month, is made possible through our collaboration with AWS. We will leverage their Asia Pacific (Jakarta) Region to more closely connect with users there, making &lt;a href=&#34;/products/cloud/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Cloud&lt;/a&gt; the first observability platform hosted specifically in that AWS region.&lt;/p&gt;&#xA;&lt;p&gt;To help launch this new region, we are collaborating with iZeno, our trusted local partner. iZeno brings expertise in cloud solutions and a deep understanding of the Indonesian market. &amp;ldquo;Great relationships are built on trust, collaboration, and shared vision,&amp;rdquo; says Andri Firtiyan, Country Sales Director at iZeno. &amp;ldquo;As we work together, we create opportunities that drive innovation and success, proving that together we can achieve far more than we ever could alone.”&lt;/p&gt;&#xA;&lt;p&gt;With data sovereignty becoming increasingly crucial for organizations, this new Indonesia region is designed to meet the growing demand for local data control, improved performance, and compliance with Indonesian data regulations. By bringing our open and composable observability platform closer to our users in Southeast Asia, we are enabling faster, more reliable services that cater to the unique needs of businesses operating in this dynamic market.&lt;/p&gt;&#xA;&lt;h2 id=&#34;grafana-cloud-closer-to-you&#34;&gt;Grafana Cloud, closer to you&lt;/h2&gt;&#xA;&lt;p&gt;This expansion reaffirms our commitment to helping organizations in Indonesia and the wider Asia-Pacific region harness the full potential of Grafana Cloud while adhering to local regulations.&lt;/p&gt;&#xA;&lt;p&gt;It also comes on the heels of our &lt;a href=&#34;/blog/2024/07/26/grafana-labs-expands-its-open-source-observability-community-in-japan/&#34;&gt;recent expansion in Japan&lt;/a&gt;, where we opened a new region earlier this year to support the growing community of developers and engineers who have embraced Grafana. This is in addition to the &lt;a href=&#34;/docs/grafana-cloud/account-management/regional-availability/&#34;&gt;existing regions&lt;/a&gt; in Australia, India, and Singapore.&lt;/p&gt;&#xA;&lt;h3 id=&#34;looking-ahead&#34;&gt;Looking ahead&lt;/h3&gt;&#xA;&lt;p&gt;The launch of the Grafana Cloud region in Indonesia is just the beginning. We remain committed to growing our presence in Southeast Asia and teaming up with industry leaders like AWS and iZeno to enable organizations to adopt observability—from operational dashboards to a fully centralized system and everything in between—without the overhead of building and maintaining their own stacks.&lt;/p&gt;&#xA;&lt;p&gt;To celebrate this exciting milestone, join us on Nov. 12 for &lt;strong&gt;&lt;a href=&#34;https://events.grafana.com/grafana-aws-izeno-jakarta2024/?pg=blog&amp;amp;plcmt=body-txt&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Grafana Cloud Launch Day Jakarta&lt;/a&gt;&lt;/strong&gt;. Don’t miss this chance to hear from and network with industry leaders and experts from Grafana Labs, AWS, and iZeno. We&amp;rsquo;ll be talking about observability trends and best practices, and you&amp;rsquo;ll be able to learn first-hand from experts in the field.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;/products/cloud/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Cloud&lt;/a&gt; is the easiest way to get started with metrics, logs, traces, dashboards, and more. We have a generous forever-free tier and plans for every use case. &lt;a href=&#34;/auth/sign-up/create-user/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Sign up for free now&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;】&lt;块引用&gt;&#xA;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：印度尼西亚的 Grafana Cloud 区域已于 2024 年 11 月 6 日星期三上线。&lt;/p&gt;&#xA;&lt;/块引用&gt;&#xA;&lt;p&gt;作为我们不断努力满足世界各地 Grafana 用户需求的一部分，我们很高兴宣布在印度尼西亚建立一个新的 Grafana Cloud 区域。&lt;/p&gt;&#xA;&lt;p&gt;这个新的 Grafana 云区域将于本月推出，是通过我们与 AWS 的合作实现的。我们将利用他们的亚太（雅加达）区域与那里的用户建立更紧密的联系，使 &lt;a href=&#34;/products/cloud/?pg=blog&amp;plcmt=body-txt&#34;&gt;Grafana Cloud&lt;/a&gt; 成为第一个托管的可观察性平台特别是在该 AWS 区域。&lt;/p&gt;&#xA;&lt;p&gt;为了帮助推出这个新区域，我们正在与我们值得信赖的当地合作伙伴 iZeno 合作。 iZeno 带来了云解决方案方面的专业知识以及对印度尼西亚市场的深入了解。 “良好的关系建立在信任、协作和共同愿景的基础上，”iZeno 国家销售总监 Andri Firtiyan 说道。 “当我们共同努力时，我们创造了推动创新和成功的机会，证明我们共同取得的成就远远超过我们单独取得的成就。”&lt;/p&gt;&#xA;&lt;p&gt;随着数据主权对组织变得越来越重要，这个新的印度尼西亚区域旨在满足对本地数据控制、提高性能和遵守印度尼西亚数据法规不断增长的需求。通过让我们开放且可组合的可观测平台更贴近东南亚用户，我们提供了更快、更可靠的服务，以满足在这个充满活力的市场中运营的企业的独特需求。&lt;/p&gt;&#xA;&lt;h2 id=&#34;grafana-cloud-closer-to-you&#34;&gt;Grafana Cloud，离您更近&lt;/h2&gt;&#xA;&lt;p&gt;此次扩张重申了我们致力于帮助印度尼西亚和更广泛的亚太地区的组织充分利用 Grafana Cloud 的潜力，同时遵守当地法规。&lt;/p&gt;&#xA;&lt;p&gt;紧接着我们&lt;a href=&#34;/blog/2024/07/26/grafana-labs-expands-its-open-source-observability-community-in-japan/&#34;&gt;最近在日本&lt;/a&gt;，我们今年早些时候在日本开设了一个新区域，以支持不断壮大的采用 Grafana 的开发人员和工程师社区。这是对澳大利亚、印度和新加坡的&lt;a href=&#34;/docs/grafana-cloud/account-management/regional-availability/&#34;&gt;现有区域&lt;/a&gt;的补充。&lt;/p&gt;&#xA;&lt;h3 id=&#34;looking-ahead&#34;&gt;展望未来&lt;/h3&gt;&#xA;&lt;p&gt;在印度尼西亚推出 Grafana 云区域只是一个开始。我们仍然致力于扩大在东南亚的影响力，并与 AWS 和 iZeno 等行业领导者合作，使组织能够采用可观察性（从操作仪表板到完全集中的系统以及介于两者之间的一切），而无需构建和维护自己的堆栈的开销.&lt;/p&gt;&#xA;&lt;p&gt;为了庆祝这一激动人心的里程碑，请于 11 月 12 日加入我们&lt;strong&gt;&lt;a href=&#34;https://events.grafana.com/grafana-aws-izeno-jakarta2024/?pg=blog&amp;plcmt=body-txt “目标=”_blank”rel=”noopener noreferrer&#34;&gt;Grafana 云发布日雅加达&lt;/a&gt;&lt;/strong&gt;。不要错过这个聆听来自 Grafana Labs、AWS 和 iZeno 的行业领导者和专家并与他们交流的机会。我们将讨论可观测性趋势和最佳实践，您将能够向该领域的专家学习第一手资料。&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;/products/cloud/?pg=blog&amp;plcmt=body-txt&#34;&gt;Grafana Cloud&lt;/a&gt; 是开始使用指标、日志、跟踪、仪表板等的最简单方法。我们为每个用例提供慷慨的永久免费套餐和计划。 &lt;a href=&#34;/auth/sign-up/create-user/?pg=blog&amp;plcmt=body-txt&#34;&gt;立即免费注册&lt;/a&gt;！&lt;/em&gt;&lt;/p&gt;</description>
      <pubDate>Fri, 01 Nov 2024 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Grafana Labs at KubeCon: OpenTelemetry, Prometheus 3.0, eBPF, and more】KubeCon 上的 Grafana 实验室：OpenTelemetry、Prometheus 3.0、eBPF 等</title>
      <link>https://grafana.com/blog/2024/11/05/grafana-labs-at-kubecon-opentelemetry-prometheus-3.0-ebpf-and-more/</link>
      <description>【&lt;p&gt;We&amp;rsquo;re headed back to KubeCon, and we can&amp;rsquo;t wait to see you there!&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;KubeCon + CloudNativeCon North American 2024&lt;/a&gt; will run from Tuesday, Nov. 12 to Friday, Nov. 15, in Salt Lake City, Utah, bringing together open source enthusiasts for the Cloud Native Computing Foundation&amp;rsquo;s flagship conference. Grafana Labs is a &lt;a href=&#34;/events/kubecon/&#34;&gt;proud silver sponsor&lt;/a&gt; of this year’s KubeCon North America event, including &lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/co-located-events/observability-day/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Observability Day 2024&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;If you plan to attend, drop by &lt;strong&gt;booth R7&lt;/strong&gt; at KubeCon’s sponsor solutions showcase to meet the team and grab some swag (and enter for a chance to win some some special swag if you take our &lt;a href=&#34;/observability-survey/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Observability Survey&lt;/a&gt; while you&amp;rsquo;re there). You can also&lt;a href=&#34;https://go2.grafana.com/2024-11-KubeConNorthAmerica2024-AMER-Externalmeetingrequestpage_KubeCONNA2024-Externalmeetingrequestpage.html/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt; contact us to set up a meeting&lt;/a&gt; with one of our experts, or attend one of the sessions we&amp;rsquo;re participating in (continue reading to find out more).&lt;/p&gt;&#xA;&lt;h2 id=&#34;kubecon-sessions-featuring-grafana-labs&#34;&gt;&lt;strong&gt;KubeCon sessions featuring Grafana Labs&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;The following talks (all times local) feature, or are led by, members of the Grafana Labs team:&lt;/p&gt;&#xA;&lt;h3 id=&#34;but-wait-theresstill-more---observability-data-volumes-and-strategies-for-managing-themhttpscolocatedeventsna2024schedcomevent1izs5but-wait-theresstill-more-observability-data-volumes-and-strategies-for-managing-them-eamon-ryan-grafana-labs&#34;&gt;&lt;a href=&#34;https://colocatedeventsna2024.sched.com/event/1izs5/but-wait-theresstill-more-observability-data-volumes-and-strategies-for-managing-them-eamon-ryan-grafana-labs&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;But wait! There&amp;rsquo;s…still more? - Observability data volumes and strategies for managing them&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;Tuesday, Nov. 12, 10:40 - 11:05 a.m.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;As we add more observability signals and points of insight into the software we design, we create more and more data. Data that has to be processed. Data that has to be stored. Data that has to be iterated over and retrieved. All of this increases stress on the system that stores it, which naturally increases the cost to run the system, in terms of infrastructure, people power, and more.&lt;/p&gt;&#xA;&lt;p&gt;This talk, led by Éamon Ryan, Grafana Labs Senior Principal Field Engineer, takes people through the history of how these volumes have grown over time, then moves into the current strategies and tradeoffs for managing them. It also offers a glimpse into what might come into this space in the future.&lt;/p&gt;&#xA;&lt;h2 id=&#34;so-you-want-to-write-memory-with-ebpfhttpscolocatedeventsna2024schedcomevent1izuaso-you-want-to-write-memory-with-ebpf-nikola-grcevski-grafana-labs-mike-dame-google&#34;&gt;&lt;a href=&#34;https://colocatedeventsna2024.sched.com/event/1izuA/so-you-want-to-write-memory-with-ebpf-nikola-grcevski-grafana-labs-mike-dame-google&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;So you want to write memory with eBPF?&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Tuesday, Nov. 12, 4:30 - 4:55 p.m.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;A lot of eBPF programs fall into the category of observing the Linux system, i.e., the kernel, system libraries, or user-space programs. For the purpose of observing the system, we mostly rely on reading memory with eBPF, either kernel or user-space memory. However, sometimes various eBPF use cases require writing memory—for example, propagating W3C context for various application protocols.&lt;/p&gt;&#xA;&lt;p&gt;This talk, by Nikola Grcevski, Grafana Labs Principal Software Engineer, and Mike Dame, Odigos Senior Software Engineer, focuses on the journey to implement W3C trace context propagation with eBPF at various levels of the protocol stack. They explore what memory write eBPF APIs are available to us today, along with their implications on system security, stability, required permissions and implementation difficulty. They&amp;rsquo;ll present two working solutions with their pros and cons, a lot of dead ends, as well as explore what a new approach might look like by leveraging the “BPF arena” feature in kernel 6.9.&lt;/p&gt;&#xA;&lt;h2 id=&#34;unlocking-cost-savings-and-new-possibilities-your-guide-to-prometheus-remote-write-20httpskccncna2024schedcomevent1i7koiframeno&#34;&gt;&lt;a href=&#34;https://kccncna2024.sched.com/event/1i7kO?iframe=no&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Unlocking cost savings and new possibilities: your guide to Prometheus Remote Write 2.0&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Wednesday, Nov. 13, 11:15 - 11:50 a.m.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Prometheus Remote Write is the protocol used to send Prometheus metrics from Prometheus or any other metric source to compatible remote storage endpoints. Remote Write is generally used for metric long-term storage, centralization, and cloud services. It also enables users to run Prometheus in an agent mode, reducing local storage requirements.&lt;/p&gt;&#xA;&lt;p&gt;Welcome to Remote Write 2.0! In this talk, Bartłomiej Płotka, Google Senior Software Engineer, and Callum Styan, Grafana Labs Senior Software Engineer, introduce you to the next iteration of the popular protocol, which adds more functionality while cutting your egress costs up to 60%, and keeps the previous version’s easy-to-implement stateless design! The audience will learn what&amp;rsquo;s changed in the second version of Remote Write, what it unlocks, and how easy it is to update or adopt. Finally, the speakers, who are Prometheus maintainers and RW2.0 spec. co-authors, will share the latest benchmarks and differences with the common alternatives.&lt;/p&gt;&#xA;&lt;h2 id=&#34;opentelemetry-project-updatehttpskccncna2024schedcomevent1hovyopentelemetry-project-update-alolita-sharma-apple-juraci-paixao-krohling-grafana-labs-ted-young-servicenow-daniel-gomez-blanco-skyscanner-daniel-dyla-dynatraceiframenow10025sidebaryesbgno&#34;&gt;&lt;a href=&#34;https://kccncna2024.sched.com/event/1hovy/opentelemetry-project-update-alolita-sharma-apple-juraci-paixao-krohling-grafana-labs-ted-young-servicenow-daniel-gomez-blanco-skyscanner-daniel-dyla-dynatrace?iframe=no&amp;amp;w=100%25&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;OpenTelemetry project update&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Wednesday, Nov. 13, 3:25 - 4 p.m.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;This is the official OpenTelemetry session at KubeCon, and it&amp;rsquo;s led by:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Morgan Mclean, ​​Director of Product Management, Splunk&lt;/li&gt;&#xA;&lt;li&gt;Juraci Paixão Kröhling, Software Engineer, Grafana Labs&lt;/li&gt;&#xA;&lt;li&gt;Daniel Dyla, Senior Open Source Architect / OpenTelemetry GC, JS, Maintainer, Dynatrace&lt;/li&gt;&#xA;&lt;li&gt;Ted Young, Director of Developer Education, ServiceNow&lt;/li&gt;&#xA;&lt;li&gt;Alolita Sharma, Cloud Observability &amp;amp; Infra Engineering, Apple&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;OpenTelemetry started with distributed traces and metrics, but the project&amp;rsquo;s vision has always been to provide whatever signals are needed from infrastructure, services, and more. This session will focus on what&amp;rsquo;s coming next, including new signals and sources. Join to learn about OpenTelemetry&amp;rsquo;s new logging functionality, including its two logging paths, the benefits of each, and real-world production examples. They&amp;rsquo;ll show the power of the next wave of OpenTelemetry enhancements, including profiling and the insights that this unlocks in combination with distributed traces, and how we&amp;rsquo;re extending your observability to client applications. They&amp;rsquo;ll wrap up with a Q&amp;amp;A of 10+ project maintainers who can speak to these topics and more.&lt;/p&gt;&#xA;&lt;h3 id=&#34;watching-the-watchers-how-we-do-continuous-reliability-at-grafana-labshttpskccncna2024schedcomevent1i7m6watching-the-watchers-how-we-do-continuous-reliability-at-grafana-labs-nicole-van-der-hoeven-grafana-labsiframenow10025sidebaryesbgno&#34;&gt;&lt;a href=&#34;https://kccncna2024.sched.com/event/1i7m6/watching-the-watchers-how-we-do-continuous-reliability-at-grafana-labs-nicole-van-der-hoeven-grafana-labs?iframe=no&amp;amp;w=100%25&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Watching the watchers: How we do continuous reliability at Grafana Labs&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;Wednesday, Nov. 13, 4:30 - 5:05 p.m.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Nothing is foolproof. Everything fails eventually. Observability tools help predict and lessen the impact of those failures, as the watchers of your software systems. But who watches the watchers? At Grafana Labs, we&amp;rsquo;re not immune to production incidents. Just like any company, we still sometimes move too quickly. We run complex, microservices-based systems ourselves, so we have to eat our own dog food on a daily basis.&lt;/p&gt;&#xA;&lt;p&gt;In this talk, Nicole van der Hoeven, Grafana Labs Senior Developer Advocate, reveals:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;How we solved a years-long mystery that cost us $100,000+&lt;/li&gt;&#xA;&lt;li&gt;How we got our internal Grafana Mimir clusters to reliably hold 1.3 billion time series for metrics&lt;/li&gt;&#xA;&lt;li&gt;What we&amp;rsquo;ve had to do to scale our Grafana Loki clusters to handle 324 TB of logs a day&lt;/li&gt;&#xA;&lt;li&gt;What our Grafana dashboards to monitor Grafana Cloud look like&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Sometimes, it&amp;rsquo;s easier to learn from failures in observability than from successes. This talk is a confession of some of our worst sins as well as a realistic look under the hood at how we&amp;rsquo;re improving the continuous reliability of our stack.&lt;/p&gt;&#xA;&lt;h3 id=&#34;celebrating-prometheus-30-a-deep-dive-with-the-maintainershttpskccncna2024schedcomevent1howlcelebrating-prometheus-30-a-deep-dive-with-the-maintainers-kemal-akkoyun-falai-josh-abreu-grafana-labsiframenow10025sidebaryesbgno&#34;&gt;&lt;a href=&#34;https://kccncna2024.sched.com/event/1howl/celebrating-prometheus-30-a-deep-dive-with-the-maintainers-kemal-akkoyun-falai-josh-abreu-grafana-labs?iframe=no&amp;amp;w=100%25&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Celebrating Prometheus 3.0: A deep dive with the maintainers&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;Thursday, Nov. 14, 2:30 - 3:05 p.m.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Prometheus is an open source monitoring system and a CNCF Graduate project. It benefits from a rich ecosystem, including Alertmanager, efficient client libraries for many languages, the Prometheus Operator to install on Kubernetes, and numerous exporters to provide the raw data. This year, Prometheus releases the 3.0 version, which includes new features, a refreshed UI/UX, and plenty of new things that build on what has worked well for years.&lt;/p&gt;&#xA;&lt;p&gt;Join Josue (Josh) Abreu, Grafana Labs Principal Software Engineer and Richard &amp;ldquo;RichiH&amp;rdquo; Hartmann, Director of Community at Grafana Labs, to celebrate the 3.0 version and learn what it enables for new and existing users, how to upgrade, and how to get the most out of the latest version! Prepare tons of questions; they&amp;rsquo;ll have a lot of interactive time for questions and they want to hear community feedback!&lt;/p&gt;】&lt;p&gt;我们将返回 KubeCon，我们迫不及待地想在那里见到您！&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;KubeCon + CloudNativeCon 北美 2024&lt;/a&gt; 将于 11 月 12 日星期二至 11 月 15 日星期五在犹他州盐湖城举行，开源爱好者齐聚一堂，参加云原生计算基金会的旗舰会议。 Grafana Labs 是今年 KubeCon 北美活动的&lt;a href=&#34;/events/kubecon/&#34;&gt;银牌赞助商&lt;/a&gt;，其中包括&lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon -north-america/co- located-events/observability-day/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;2024 年可观测日&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;如果您打算参加，请前往 KubeCon 赞助商解决方案展示会上的&lt;strong&gt;R7 展位&lt;/strong&gt;，与团队见面并获取一些赠品（如果您参加我们的 &lt;当您在那里时进行 href=&#34;/observability-survey/?pg=blog&amp;plcmt=body-txt&#34;&gt;可观测性调查&lt;/a&gt;）。您也可以&lt;a href=&#34;https://go2.grafana.com/2024-11-KubeConNorthAmerica2024-AMER-Externalmeetingrequestpage_KubeCONNA2024-Externalmeetingrequestpage.html/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;联系我们进行设置与我们的一位专家举行会议&lt;/a&gt;，或参加我们正在参加的一场会议（继续阅读以了解更多信息）。&lt;/p&gt;&#xA;&lt;h2 id=&#34;kubecon-sessions-featuring-grafana-labs&#34;&gt;&lt;strong&gt;以 Grafana Labs 为特色的 KubeCon 会议&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;以下演讲（均在本地进行）由 Grafana Labs 团队成员主持或主持：&lt;/p&gt;&#xA;&lt;h3 id=&#34;but-wait-theresstill-more---observability-data-volumes-and-strategies-for-managing-themhttpsco locatedeventsna2024schedcomevent1izs5but-wait-theresstill-more-observability-data-volumes-and-strategies-for-managing -them-eamon-ryan-grafana-labs&#34;&gt;&lt;a href=&#34;https://co locatedeventsna2024.sched.com/event/1izs5/but-wait-theresstill-more-observability-data-volumes-and-strategies-for -managing-them-eamon-ryan-grafana-labs&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;但是等等！还有……还有吗？ - 可观测性数据量及其管理策略&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;11 月 12 日星期二上午 10:40 - 11:05&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;随着我们在设计的软件中添加更多的可观察信号和洞察点，我们创建了越来越多的数据。必须处理的数据。必须存储的数据。必须迭代和检索的数据。所有这些都增加了存储它的系统的压力，这自然会增加运行系统的成本，包括基础设施、人力等。&lt;/p&gt;&#xA;&lt;p&gt;本次演讲由 Grafana Labs 高级首席现场工程师 Éamon Ryan 主持，带领人们了解这些数据量如何随着时间的推移而增长的历史，然后讨论当前的管理策略和权衡。它还让我们得以一睹这个领域未来可能出现的情况。&lt;/p&gt;&#xA;&lt;h2 id=&#34;so-you-want-to-write-memory-with-ebpfhttpsco locatedeventsna2024schedcomevent1izuaso-you-want-to-write-memory-with-ebpf-nikola-grcevski-grafana-labs-mike-dame-google&#34;&gt; &lt;一href=&#34;https://co locatedeventsna2024.sched.com/event/1izuA/so-you-want-to-write-memory-with-ebpf-nikola-grcevski-grafana-labs-mike-dame-google&#34; target=&#34; _blank&#34; rel=&#34;noopener noreferrer&#34;&gt;那么你想用 eBPF 写入内存吗？&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;11 月 12 日星期二下午 4:30 - 4:55&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;许多 eBPF 程序属于观察 Linux 系统的类别，即内核、系统库或用户空间程序。为了观察系统，我们主要依赖于使用 eBPF 读取内存，无论是内核还是用户空间内存。然而，有时各种 eBPF 用例需要写入内存，例如，为各种应用程序协议传播 W3C 上下文。&lt;/p&gt;&#xA;&lt;p&gt;本次演讲由 Grafana Labs 首席软件工程师 Nikola Grcevski 和 Odigos 高级软件工程师 Mike Dame 主持，重点介绍了在协议栈的各个级别使用 eBPF 实现 W3C 跟踪上下文传播的过程。他们探讨了当今我们可以使用哪些内存写入 eBPF API，以及它们对系统安全性、稳定性、所需权限和实现难度的影响。他们将展示两种可行的解决方案，各有利弊，存在很多死胡同，并通过利用内核 6.9 中的“BPF arena”功能来探索新方法可能是什么样子。&lt;/p&gt;&#xA;&lt;h2 id=&#34;unlocking-cost- savings-and-new-possibilities-your-guide-to-prometheus-remote-write-20httpskccncna2024schedcomevent1i7koiframeno&#34;&gt;&lt;a href=&#34;https://kccncna2024.sched.com/event/1i7kO ?iframe=no&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;解锁节省成本和新的可能性：Prometheus Remote Write 2.0 指南&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;11 月 13 日星期三上午 11:15 - 11:50&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Prometheus 远程写入是用于将 Prometheus 指标从 Prometheus 或任何其他指标源发送到兼容的远程存储端点的协议。远程写入一般用于指标长期存储、集中化和云服务。它还允许用户以代理模式运行 Prometheus，从而减少本地存储需求。&lt;/p&gt;&#xA;&lt;p&gt;欢迎使用远程写入2.0！在本次演讲中，Google 高级软件工程师 Bartłomiej Płotka 和 Grafana Labs 高级软件工程师 Callum Styan 向您介绍了流行协议的下一个迭代，该协议增加了更多功能，同时将出口成本降低了 60%，并保持了上一版本易于实现的无状态设计！观众将了解远程写入第二版中的更改、解锁内容以及更新或采用的容易程度。最后是演讲者，他们是 Prometheus 维护者和 RW2.0 规范。合著者将分享最新的基准以及与常见替代方案的差异。&lt;/p&gt;&#xA;&lt;h2 id=&#34;opentelemetry-project-updatehttpskccncna2024schedcomevent1hovyopentelemetry-项目-更新-alolita-sharma-apple-juraci-paixao-krohling-grafana-labs-ted-young-servicenow-daniel-gomez-blanco-skyscanner-daniel-dyla-dynatraceiframenow10025sidebaryesbgno&#34;&gt;&lt;a href=&#34;https://kccncna2024.sched.com/event/1hovy/opentelemetry-project-update-alolita-sharma-apple-juraci-paixao-krohling-g rafana-labs-ted-young-servicenow-daniel-gomez-blanco-skyscanner-daniel-dyla-dynatrace?iframe=no&amp;w=100%25&amp;sidebar=yes&amp;bg=no&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;OpenTelemetry 项目更新&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;11 月 13 日星期三下午 3:25 - 4 点&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;这是 KubeCon 上的官方 OpenTelemetry 会议，由以下人士主持：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Morgan Mclean，Splunk 产品管理总监&lt;/li&gt;&#xA;&lt;li&gt;Juraci Paixão Kröhling，Grafana Labs 软件工程师&lt;/li&gt;&#xA;&lt;li&gt;Daniel Dyla，高级开源架构师/OpenTelemetry GC、JS、维护者，Dynatrace&lt;/li&gt;&#xA;&lt;li&gt;Ted Young，ServiceNow 开发者教育总监&lt;/li&gt;&#xA;&lt;li&gt;Alolita Sharma，Apple 云可观测性和基础设施工程&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;OpenTelemetry 从分布式跟踪和指标开始，但该项目的愿景始终是提供基础设施、服务等所需的任何信号。本次会议将重点关注接下来发生的事情，包括新的信号和来源。加入以了解 OpenTelemetry 的新日志记录功能，包括它的两个日志记录路径、每个路径的优点以及实际生产示例。他们将展示下一波 OpenTelemetry 增强功能的强大功能，包括分析和与分布式跟踪相结合所释放的见解，以及我们如何将您的可观察性扩展到客户端应用程序。他们将以 10 多名项目维护人员的问答结束，他们可以谈论这些主题以及更多内容。&lt;/p&gt;&#xA;&lt;h3 id=&#34;watching-the-watchers-how-we-do-Continous-reliability-at-grafana-labshttpskccncna2024schedcomevent1i7m6watching-the-watchers-how-we-do-Continous-reliability-at-grafana-labs-nicole-van -der-hoeven-grafana-labsiframenow10025sidebaryesbgno&#34;&gt;&lt;a href=&#34;https://kccncna2024.sched.com/event/1i7m6/watching-the-watchers-how-we-do-Continous-reliability-at-grafana-labs-nicole-van-der-hoeven-grafana-labs ?iframe=no&amp;w=100%25&amp;sidebar=yes&amp;bg=no&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;正在观看观察者：我们如何在 Grafana Labs 实现持续可靠性&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;11 月 13 日星期三下午 4:30 - 5:05&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;没有什么是万无一失的。一切最终都会失败。作为软件系统的观察者，可观察性工具有助于预测和减轻这些故障的影响。但谁来监视观察者呢？在 Grafana Labs，我们无法免受生产事故的影响。就像任何公司一样，我们有时仍然行动得太快。我们自己运行复杂的、基于微服务的系统，所以我们每天都得吃自己的狗粮。&lt;/p&gt;&#xA;&lt;p&gt;在本次演讲中，Grafana Labs 高级开发人员倡导者 Nicole van der Hoeven，揭示：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;我们如何解开一个长达数年、耗资超过 10 万美元的谜团&lt;/li&gt;&#xA;&lt;li&gt;我们如何让内部 Grafana Mimir 集群可靠地保存 13 亿个指标时间序列&lt;/li&gt;&#xA;&lt;li&gt;我们必须采取哪些措施来扩展 Grafana Loki 集群以每天处理 324 TB 的日志&lt;/li&gt;&#xA;&lt;li&gt;用于监控 Grafana Cloud 的 Grafana 仪表板是什么样的&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;有时，从可观察性的失败中学习比从成功中学习更容易。这次演讲是对我们一些最严重错误的忏悔，也是对我们如何提高堆栈的持续可靠性的现实审视。&lt;/p&gt;&#xA;&lt;h3 id=&#34;庆祝-prometheus-30-a-deep-dive-with-the-maintainershttpskccncna2024schedcomevent1howlcelebrating-prometheus-30-a-deep-dive-with-the-maintainers-kemal-akkoyun-falai-josh-abreu-grafana -labsiframenow10025sidebaryesbgno&#34;&gt;&lt;a href=&#34;https://kccncna2024.sched.com/event/1howl/celebating-prometheus-30-a-deep-dive-with-the-maintainers-kemal-akkoyun-falai-josh-abreu -grafana-labs?iframe=no&amp;w=100%25&amp;sidebar=yes&amp;bg=no&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;庆祝 Prometheus 3.0：与维护者深入探讨&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;11 月 14 日星期四下午 2:30 - 3:05&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Prometheus 是一个开源监控系统，也是 CNCF 研究生项目。它受益于丰富的生态系统，包括 Alertmanager、适用于多种语言的高效客户端库、安装在 Kubernetes 上的 Prometheus Operator 以及提供原始数据的众多导出器。今年，Prometheus 发布了 3.0 版本，其中包括新功能、更新的 UI/UX 以及大量建立在多年来运行良好的基础上的新内容。&lt;/p&gt;&#xA;&lt;p&gt;与 Grafana Labs 首席软件工程师 Josue (Josh) Abreu 和 Grafana Labs 社区总监 Richard “RichiH” Hartmann 一起庆祝 3.0 版本的发布，并了解它为新用户和现有用户提供的功能、如何升级以及如何充分利用最新版本！准备大量问题；他们将有大量的互动时间来回答问题，并且希望听到社区的反馈！&lt;/p&gt;</description>
      <pubDate>Tue, 05 Nov 2024 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Creating alerts from panels in Kubernetes Monitoring: an overlooked, powerhouse feature】从 Kubernetes 监控中的面板创建警报：一个被忽视的强大功能</title>
      <link>https://grafana.com/blog/2024/11/04/creating-alerts-from-panels-in-kubernetes-monitoring-an-overlooked-powerhouse-feature/</link>
      <description>【&lt;p&gt;As a product manager here at Grafana Labs, I&amp;rsquo;ve learned that sometimes the most powerful features can sneak by unnoticed, buried in those three little dots off to the side of the panel. But what happens when one of those hidden gems suddenly becomes the star of the show?&lt;/p&gt;&#xA;&lt;p&gt;Recently, we released a new &lt;a href=&#34;/solutions/kubernetes/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Kubernetes Monitoring&lt;/a&gt; feature in &lt;a href=&#34;/products/cloud/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Cloud&lt;/a&gt;—an alert system you can use to create alerts from panels in the app. It pulls the query behind the panel, gives you the option to set a threshold, and notifies you when that threshold is exceeded.&lt;/p&gt;&#xA;&lt;p&gt;Simple, right? I thought so too. In fact, while I was pleased to see it, I didn’t give it a second thought. After all, it was just one of many features—including viewing deleted objects, monitoring energy consumption, and network observability—nestled within our &lt;a href=&#34;/docs/grafana-cloud/whats-new/2024-05-14-scenes-powered-dashboards/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Scenes capability&lt;/a&gt;. I didn’t immediately grasp its significance. That is, until I was smack in the middle of a live demo for one of our biggest customers.&lt;/p&gt;&#xA;&lt;h2 id=&#34;small-feature-big-potential&#34;&gt;Small feature, big potential&lt;/h2&gt;&#xA;&lt;p&gt;Before I get into the nerve racking demo and all the good that came from it—for them and me—let&amp;rsquo;s quickly review how you can benefit from this alerting system.&lt;/p&gt;&#xA;&lt;p&gt;You can now set up alerts directly from certain types of panels within the Kubernetes Monitoring app, making incident management smoother than ever. With our preconfigured panels that highlight the essentials—like CPU limits, network saturation, container resource recommendations, power consumption, and cost-saving thresholds—you can easily monitor and manage your Kubernetes infrastructure.&lt;/p&gt;&#xA;&lt;h3 id=&#34;steps-to-set-up-an-alert&#34;&gt;Steps to set up an alert&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Choose a panel&lt;/strong&gt;: Select a panel that fits your needs, whether it’s for tracking resource usage, network health, or cost management.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Create an alert rule&lt;/strong&gt;: Click the top-right corner of the panel and select &lt;strong&gt;New alert rule&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Customize your alert&lt;/strong&gt;: A pre-filled template will appear with a relevant query. From there, just specify:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The threshold (e.g., CPU usage percentage)&lt;/li&gt;&#xA;&lt;li&gt;Runbook and recipient(s)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;That’s it! Your alert system is ready to notify the right people whenever thresholds are met.&lt;/p&gt;&#xA;&lt;h3 id=&#34;why-use-alerts&#34;&gt;Why use alerts?&lt;/h3&gt;&#xA;&lt;p&gt;These alerts can help you proactively manage resources. For example, they can:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Notify your finance team when costs approach the quarterly budget.&lt;/li&gt;&#xA;&lt;li&gt;Trigger an alert for your DevOps team on network saturation or idle cluster costs.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Starting small with a few essential alerts can give you immediate insights. From there, expand your alerting to meet your company’s best practices and optimize Kubernetes operations fully.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-unexpected-spotlight&#34;&gt;The unexpected spotlight&lt;/h2&gt;&#xA;&lt;p&gt;OK, back to the demo. I was presenting to one of our top customers—a company that was very focused on controlling costs. They wanted insights and alerts from their cloud provider all the way down to the container level. You can imagine the cast of characters: the CFO, financial analysts, cloud admins, DevOps engineers—basically, everyone who needs to know when something goes sideways.&lt;/p&gt;&#xA;&lt;p&gt;So, there I was, rolling through the slides, feeling pretty good. And then I got to the live demo. Now, if you&amp;rsquo;ve ever done a live demo, you know how it goes—everything can go perfectly… or it can go horribly wrong.&lt;/p&gt;&#xA;&lt;p&gt;So I took a deep breath and dove in.&lt;/p&gt;&#xA;&lt;p&gt;I pulled up the &lt;a href=&#34;/docs/grafana-cloud/monitor-infrastructure/kubernetes-monitoring/manage-costs/?pg=blog&amp;amp;plcmt=body-txt#:~:text=Kubernetes%20Monitoring%20uses%20an%20OpenCost,infrastructure%20costs%20in%20real%20time.&#34;&gt;cost monitoring view&lt;/a&gt;, showing monthly variations, and casually demonstrated how we could create an alert right there from the panel. A couple of clicks, set a threshold, and—boom!—the system would notify them if the monthly cost suddenly spiked.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 2478px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;/media/blog/kubernetes-alerts-from-panels/Alerts-out-of-cost-panels.gif&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;/media/blog/kubernetes-alerts-from-panels/Alerts-out-of-cost-panels.gif&#34;alt=&#34;&#34;&#xA;width=&#34;2478&#34;&#xA;height=&#34;1188&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/kubernetes-alerts-from-panels/Alerts-out-of-cost-panels.gif&#34;&#xA;alt=&#34;&#34;&#xA;width=&#34;2478&#34;&#xA;height=&#34;1188&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;h2 id=&#34;the-light-bulb-moment&#34;&gt;The light bulb moment&lt;/h2&gt;&#xA;&lt;p&gt;Suddenly, the whole room was buzzing. We started setting up more alerts—one for next month’s projection, another for &lt;a href=&#34;/docs/grafana-cloud/monitor-infrastructure/kubernetes-monitoring/optimize-resource-usage/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;underutilized nodes&lt;/a&gt; to save on cloud spend, and yet another for &lt;a href=&#34;/docs/grafana-cloud/monitor-infrastructure/kubernetes-monitoring/optimize-resource-usage/cpu-throttling/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;containers that were under-provisioned&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 2478px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;/media/blog/kubernetes-alerts-from-panels/NEW-Alerts-out-of-CPU-panels.gif&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;/media/blog/kubernetes-alerts-from-panels/NEW-Alerts-out-of-CPU-panels.gif&#34;alt=&#34;&#34;&#xA;width=&#34;2478&#34;&#xA;height=&#34;1188&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/kubernetes-alerts-from-panels/NEW-Alerts-out-of-CPU-panels.gif&#34;&#xA;alt=&#34;&#34;&#xA;width=&#34;2478&#34;&#xA;height=&#34;1188&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;By this point, the excitement was palpable. They could now have automated budget guardrails and the potential to save money by proactively controlling their spending.&lt;/p&gt;&#xA;&lt;p&gt;They also shared how some of their newer developers were spinning up &lt;a href=&#34;/docs/grafana-cloud/monitor-infrastructure/kubernetes-monitoring/optimize-resource-usage/container-requests-limits-cpu/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;CPU-intensive containers without limits&lt;/a&gt;—costly mistakes that were flying under the radar. So, we set an alert that would scream if any container had limits that were too high or, worse, not set at all.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 1999px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;/media/blog/kubernetes-alerts-from-panels/cpu-alert.jpg&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;/media/blog/kubernetes-alerts-from-panels/cpu-alert.jpg&#34;data-srcset=&#34;/media/blog/kubernetes-alerts-from-panels/cpu-alert.jpg?w=320 320w, /media/blog/kubernetes-alerts-from-panels/cpu-alert.jpg?w=550 550w, /media/blog/kubernetes-alerts-from-panels/cpu-alert.jpg?w=750 750w, /media/blog/kubernetes-alerts-from-panels/cpu-alert.jpg?w=900 900w, /media/blog/kubernetes-alerts-from-panels/cpu-alert.jpg?w=1040 1040w, /media/blog/kubernetes-alerts-from-panels/cpu-alert.jpg?w=1240 1240w, /media/blog/kubernetes-alerts-from-panels/cpu-alert.jpg?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;&#34;&#xA;width=&#34;1999&#34;&#xA;height=&#34;499&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/kubernetes-alerts-from-panels/cpu-alert.jpg&#34;&#xA;alt=&#34;&#34;&#xA;width=&#34;1999&#34;&#xA;height=&#34;499&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;h2 id=&#34;the-aftermath&#34;&gt;The aftermath&lt;/h2&gt;&#xA;&lt;p&gt;The call ended with everyone on the edge of their seats, ready to implement these alerts across their infrastructure. I sat back in my chair, replaying the entire experience in my mind. And that’s when it hit me—what if I hadn’t made that call? What if I hadn’t shown them this feature?&lt;/p&gt;&#xA;&lt;p&gt;This incredibly useful tool, tucked away in the corner of a panel, could have easily been missed. And if they hadn’t seen it in action, it might have never been used to its full potential.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 1006px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;/media/blog/kubernetes-alerts-from-panels/cluster-optimization.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;/media/blog/kubernetes-alerts-from-panels/cluster-optimization.png&#34;data-srcset=&#34;/media/blog/kubernetes-alerts-from-panels/cluster-optimization.png?w=320 320w, /media/blog/kubernetes-alerts-from-panels/cluster-optimization.png?w=550 550w, /media/blog/kubernetes-alerts-from-panels/cluster-optimization.png?w=750 750w, /media/blog/kubernetes-alerts-from-panels/cluster-optimization.png?w=900 900w, /media/blog/kubernetes-alerts-from-panels/cluster-optimization.png?w=1040 1040w, /media/blog/kubernetes-alerts-from-panels/cluster-optimization.png?w=1240 1240w, /media/blog/kubernetes-alerts-from-panels/cluster-optimization.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;&#34;&#xA;width=&#34;1006&#34;&#xA;height=&#34;657&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/kubernetes-alerts-from-panels/cluster-optimization.png&#34;&#xA;alt=&#34;&#34;&#xA;width=&#34;1006&#34;&#xA;height=&#34;657&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;h2 id=&#34;the-takeaways-and-what-you-can-learn-too&#34;&gt;&lt;strong&gt;The takeaways (and what you can learn too)&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;So, what did I learn from this experience? Here are my top three takeaways:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Set your Kubernetes limits and/or requests.&lt;/strong&gt; Seriously, this is the golden rule for saving money and avoiding operational headaches. It’s a small step that can prevent massive overspending and under-performance. (For more on this approach, check out &lt;a href=&#34;https://kubernetes.io/blog/2023/11/16/the-case-for-kubernetes-resource-limits/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;this post we wrote for the Kubernetes blog&lt;/a&gt;.)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Alerts are key.&lt;/strong&gt; Even if you have the fanciest visualizations or custom scrape configs, without alerts, you might miss the boat when it comes to proactive cost saving.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Experiment with new features!&lt;/strong&gt; Sometimes the tools you think are &amp;ldquo;just another release&amp;rdquo; can end up being your team&amp;rsquo;s &lt;em&gt;next big thing&lt;/em&gt;. Give yourself time to explore and unlock their full potential.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 1999px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;/media/blog/kubernetes-alerts-from-panels/overview.jpg&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;/media/blog/kubernetes-alerts-from-panels/overview.jpg&#34;data-srcset=&#34;/media/blog/kubernetes-alerts-from-panels/overview.jpg?w=320 320w, /media/blog/kubernetes-alerts-from-panels/overview.jpg?w=550 550w, /media/blog/kubernetes-alerts-from-panels/overview.jpg?w=750 750w, /media/blog/kubernetes-alerts-from-panels/overview.jpg?w=900 900w, /media/blog/kubernetes-alerts-from-panels/overview.jpg?w=1040 1040w, /media/blog/kubernetes-alerts-from-panels/overview.jpg?w=1240 1240w, /media/blog/kubernetes-alerts-from-panels/overview.jpg?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;&#34;&#xA;width=&#34;1999&#34;&#xA;height=&#34;1006&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/kubernetes-alerts-from-panels/overview.jpg&#34;&#xA;alt=&#34;&#34;&#xA;width=&#34;1999&#34;&#xA;height=&#34;1006&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;So next time you’re deep in the weeds of a product release, remember: even the smallest, most &amp;ldquo;buried&amp;rdquo; features can turn out to be the unsung heroes of your platform. And you? You just might be the one to uncover them.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;/products/cloud/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Cloud &lt;/a&gt;is the easiest way to get started with metrics, logs, traces, dashboards, and more. We have a generous forever-free tier and plans for every use case. &lt;a href=&#34;/auth/sign-up/create-user/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Sign up for free now!&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;】&lt;p&gt;作为 Grafana Labs 的产品经理，我了解到有时最强大的功能可能会被忽视，隐藏在面板侧面的三个小点中。但是，当其中一颗隐藏的宝石突然成为节目的明星时，会发生什么呢？&lt;/p&gt;&#xA;&lt;p&gt;最近，我们在 &lt;a href=&#34;/products/cloud/?pg= blog&amp;plcmt=body-txt&#34;&gt;Grafana Cloud&lt;/a&gt; — 一个警报系统，您可以使用它从应用程序中的面板创建警报。它将查询拉到面板后面，为您提供设置阈值的选项，并在超过该阈值时通知您。&lt;/p&gt;&#xA;&lt;p&gt;很简单，对吧？我也是这么想的。事实上，虽然我很高兴看到它，但我并没有多想。毕竟，它只是我们的 &lt;a href=&#34;/docs/grafana-cloud/whats-new/2024-05-14-scenes 中的众多功能之一，包括查看已删除的对象、监控能耗和网络可观察性-powered-dashboards/?pg=blog&amp;plcmt=body-txt&#34;&gt;场景功能&lt;/a&gt;。我没有立即领会它的意义。也就是说，直到我正在为我们最大的客户之一进行现场演示。&lt;/p&gt;&#xA;&lt;h2 id=&#34;small-feature-big-pottial&#34;&gt;小功能，大潜力&lt;/h2&gt;&#xA;&lt;p&gt;在我开始令人紧张的演示以及由此带来的对他们和我来说的所有好处之前，让我们快速回顾一下如何从这个警报系统中受益。&lt;/p&gt;&#xA;&lt;p&gt;您现在可以直接从 Kubernetes Monitoring 应用程序中的某些类型的面板设置警报，使事件管理比以往更加顺畅。借助我们突出显示基本要素（例如 CPU 限制、网络饱和度、容器资源建议、功耗和成本节省阈值）的预配置面板，您可以轻松监控和管理 Kubernetes 基础设施。&lt;/p&gt;&#xA;&lt;h3 id=&#34;steps-to-set-up-an-alert&#34;&gt;设置提醒的步骤&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;选择面板&lt;/strong&gt;：选择适合您需求的面板，无论是用于跟踪资源使用情况、网络运行状况还是成本管理。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;创建警报规则&lt;/strong&gt;：点击面板右上角并选择&lt;strong&gt;新建警报规则&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;自定义您的提醒&lt;/strong&gt;：将显示一个预填充模板，其中包含相关查询。从那里，只需指定：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;阈值（例如 CPU 使用百分比）&lt;/li&gt;&#xA;&lt;li&gt;运行手册和收件人&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;就是这样！您的警报系统已准备好在达到阈值时通知合适的人员。&lt;/p&gt;&#xA;&lt;h3 id=&#34;why-use-alerts&#34;&gt;为什么使用提醒？&lt;/h3&gt;&#xA;&lt;p&gt;这些警报可以帮助您主动管理资源。例如，他们可以：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;当成本接近季度预算时通知您的财务团队。&lt;/li&gt;&#xA;&lt;li&gt;针对网络饱和或闲置集群成本向您的 DevOps 团队触发警报。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;从小事做起，提供一些重要的警报可以让您立即获得洞察。从在那里，扩展您的警报以满足您公司的最佳实践并充分优化 Kubernetes 运营。&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-unexpected-spotlight&#34;&gt;意想不到的聚光灯&lt;/h2&gt;&#xA;&lt;p&gt;好的，回到演示。我正在向我们的一位顶级客户进行演示——一家非常注重控制成本的公司。他们希望从云提供商处获得一直到容器级别的见解和警报。您可以想象一下角色的阵容：首席财务官、财务分析师、云管理员、DevOps 工程师 - 基本上，每个需要知道事情何时出现问题的人。&lt;/p&gt;&#xA;&lt;p&gt;所以，我就在那里滚动着幻灯片，感觉非常好。然后我就开始了现场演示。现在，如果您曾经做过现场演示，您就会知道它是如何进行的 - 一切都可以完美地进行……也可能会出现严重错误。&lt;/p&gt;&#xA;&lt;p&gt;所以我深吸了一口气，然后投入其中。&lt;/p&gt;&#xA;&lt;p&gt;我拉出了&lt;a href=&#34;/docs/grafana-cloud/monitor-infrastruct/kubernetes-monitoring/manage-costs/?pg=blog&amp;plcmt=body-txt#:~:text=Kubernetes%20Monitoring%20uses %20an%20OpenCost，基础设施%20costs%20in%20real%20time。&#34;&gt;成本监控视图&lt;/a&gt;，显示每月变化，并随意演示了我们如何从面板中创建警报。单击几下，设置阈值，然后，如果每月费用突然飙升，系统就会通知他们。&lt;/p&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：2478px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接”&#xA;href=&#34;/media/blog/kubernetes-alerts-from-panels/Alerts-out-of-cost-panels.gif&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“延迟加载”&#xA;data-src=&#34;/media/blog/kubernetes-alerts-from-panels/Alerts-out-of-cost-panels.gif&#34;alt=&#34;&#34;&#xA;宽度=“2478”&#xA;高度=“1188”&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src =“/media/blog/kubernetes-alerts-from-panels/Alerts-out-of-cost-panels.gif”&#xA;替代=“”&#xA;宽度=“2478”&#xA;高度=“1188”&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;h2 id=&#34;the-light-bulb-moment&#34;&gt;灯泡时刻&lt;/h2&gt;&#xA;&lt;p&gt;突然，整个房间都嗡嗡作响。我们开始设置更多警报 - 一个用于下个月的预测，另一个用于 &lt;a href=&#34;/docs/grafana-cloud/monitor-infrastruct/kubernetes-monitoring/optimize-resource-usage/?pg=blog&amp;plcmt=body-txt&#34; &gt;未充分利用的节点&lt;/a&gt;以节省云支出，还有另一个&lt;a href=&#34;/docs/grafana-cloud/monitor-infrastruct/kubernetes-monitoring/optimize-resource-usage/cpu-throtdling/?pg= blog&amp;plcmt=body-txt&#34;&gt;配置不足的容器&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：2478px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接”&#xA;href=&#34;/media/blog/kubernetes-alerts-from-panels/NEW-Alerts-out-of-CPU-panels.gif&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“延迟加载”&#xA;data-src =“/media/blog/kubernetes-alerts-from-panels/NEW-Alerts-out-of-CPU-panel.gif&#34;alt=&#34;&#34;&#xA;宽度=“2478”&#xA;高度=“1188”&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src =“/media/blog/kubernetes-alerts-from-panels/NEW-Alerts-out-of-CPU-panels.gif”&#xA;替代=“”&#xA;宽度=“2478”&#xA;高度=“1188”&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;p&gt;此时，兴奋之情溢于言表。他们现在可以拥有自动化的预算护栏，并有可能通过主动控制支出来节省资金。&lt;/p&gt;&#xA;&lt;p&gt;他们还分享了一些新开发人员如何启动&lt;a href=&#34;/docs/grafana-cloud/monitor-infrastruct/kubernetes-monitoring/optimize-resource-usage/container-requests-limits-cpu/? pg=blog&amp;plcmt=body-txt&#34;&gt;无限制的 CPU 密集型容器&lt;/a&gt; - 代价高昂的错误在雷达下飞行。因此，我们设置了一个警报，如果任何容器的限制太高，或更糟糕的是根本没有设置，该警报就会尖叫。&lt;/p&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：1999px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接”&#xA;href=&#34;/media/blog/kubernetes-alerts-from-panels/cpu-alert.jpg&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“延迟加载”&#xA;data-src=&#34;/media/blog/kubernetes-alerts-from-panels/cpu-alert.jpg&#34;data-srcset=&#34;/media/blog/kubernetes-alerts-from-panels/cpu-alert.jpg?w= 320 320w，/media/blog/kubernetes-alerts-from-panels/cpu-alert.jpg?w=550 550w， /media/blog/kubernetes-alerts-from-panels/cpu-alert.jpg?w=750 750w, /media/blog/kubernetes-alerts-from-panels/cpu-alert.jpg?w=900 900w, /media /blog/kubernetes-alerts-from-panels/cpu-alert.jpg?w=1040 1040w, /media/blog/kubernetes-alerts-from-panels/cpu-alert.jpg?w=1240 1240w，/media/blog/kubernetes-alerts-from-panels/cpu-alert.jpg?w=1920 1920w&#34;&#xA;数据大小=“自动”alt=“”&#xA;宽度=“1999”&#xA;高度=“499”&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src =“/media/blog/kubernetes-alerts-from-panels/cpu-alert.jpg”&#xA;替代=“”&#xA;宽度=“1999”&#xA;高度=“499”&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;h2 id=&#34;the-aftermath&#34;&gt;后果&lt;/h2&gt;&#xA;&lt;p&gt;通话结束时，每个人都坐立不安，准备在其基础设施中实施这些警报。我坐回椅子上，在脑海中回放整个经历。就在那时，我突然想到——如果我没有打那个电话怎么办？如果我没有向他们展示此功能怎么办？&lt;/p&gt;&#xA;&lt;p&gt;这个非常有用的工具隐藏在面板的角落里，很容易被忽视。如果他们没有看到它的实际应用，它可能永远不会充分发挥其潜力。&lt;/p&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：1006px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接”&#xA;href=&#34;/media/blog/kubernetes-alerts-from-panels/cluster-optimization.png&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“延迟加载”&#xA;data-src=&#34;/media/blog/kubernetes-alerts-from-panels/cluster-optimization.png&#34;data-srcset=&#34;/media/blog/kubernetes-alerts-from-panels/cluster-optimization.png?w= 320 320w、/media/blog/kubernetes-alerts-from-panels/cluster-optimization.png?w=550 550w、/media/blog/kubernetes-alerts-from-panels/cluster-optimization.png?w=750 750w , /media/blog/kubernetes-alerts-from-panels/cluster-optimization.png?w=900 900w，/media/blog/kubernetes-alerts-from-panels/cluster-optimization.png?w=1040 1040w，/media /blog/kubernetes-alerts-from-panels/cluster-optimization.png?w=1240 1240w，/media/blog/kubernetes-alerts-from-panels/cluster-optimization.png?w=1920 1920w&#34;&#xA;数据大小=“自动”alt=“”&#xA;宽度=“1006”&#xA;高度=“657”&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src =“/media/blog/kubernetes-alerts-from-panels/cluster-optimization.png”&#xA;替代=“”&#xA;宽度=“1006”&#xA;高度=“657”&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;h2 id=&#34;the-takeaways-and-what-you-can-learn-too&#34;&gt;&lt;strong&gt;要点（以及您也可以学到的东西）&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;那么，我从这次经历中学到了什么？以下是我的三大收获：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;设置您的 Kubernetes 限制和/或请求。&lt;/strong&gt;说实话，这是节省资金和避免运营难题的黄金法则。这是可以防止大规模超支和绩效不佳的一小步。 （有关此方法的更多信息，请查看 &lt;a href=&#34;https://kubernetes.io/blog/2023/11/16/the-case-for-kubernetes-resource-limits/&#34; target=&#34;_blank&#34; rel= “noopener noreferrer&#34;&gt;我们为 Kubernetes 博客撰写的这篇文章&lt;/a&gt;。）&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;提醒是关键。&lt;/strong&gt;即使您拥有最精美的可视化效果或自定义抓取配置，如果没有提醒，您也可能会在主动节省成本方面错失良机。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;尝试新功能！&lt;/strong&gt;有时，您认为“只是另一个版本”的工具最终可能会成为您团队的&lt;em&gt;下一件大事&lt;/em&gt;。给自己时间去探索并释放他们的全部潜力。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：1999px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接”&#xA;href=&#34;/media/blog/kubernetes-alerts-from-panels/overview.jpg&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“延迟加载”&#xA;data-src=&#34;/media/blog/kubernetes-alerts-from-panels/overview.jpg&#34;data-srcset=&#34;/media/blog/kubernetes-alerts-from-panels/overview.jpg?w=320 320w, /媒体/博客/kubernetes-alerts-from-panels/overview.jpg?w=550 550w, /media/blog/kubernetes-alerts-from-panels/overview.jpg?w=750 750w, /media/blog/kubernetes-alerts-from-panels/overview.jpg?w=900 900w, /media/blog/kubernetes -alerts-from-panels/overview.jpg?w=1040 1040w, /media/blog/kubernetes-alerts-from-panels/overview.jpg?w=1240 1240w，/media/blog/kubernetes-alerts-from-panels/overview.jpg?w=1920 1920w&#34;&#xA;数据大小=“自动”alt=“”&#xA;宽度=“1999”&#xA;高度=“1006”&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src =“/media/blog/kubernetes-alerts-from-panels/overview.jpg”&#xA;替代=“”&#xA;宽度=“1999”&#xA;高度=“1006”&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;p&gt;因此，下次当您深陷产品发布的困境时，请记住：即使是最小的产品，大多数“埋藏”的功能可能会成为您平台的无名英雄。你呢？您可能就是发现它们的人。&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;/products/cloud/?pg=blog&amp;plcmt=body-txt&#34;&gt;Grafana Cloud&lt;/a&gt;是开始使用指标、日志、跟踪、仪表板等的最简单方法。我们为每个用例提供慷慨的永久免费套餐和计划。 &lt;a href=&#34;/auth/sign-up/create-user/?pg=blog&amp;plcmt=body-txt&#34;&gt;立即免费注册！&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</description>
      <pubDate>Mon, 04 Nov 2024 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Prometheus 3.0 and OpenTelemetry: a practical guide to storing and querying OTel data】Prometheus 3.0 和 OpenTelemetry：存储和查询 OTel 数据的实用指南</title>
      <link>https://grafana.com/blog/2024/11/06/prometheus-3.0-and-opentelemetry-a-practical-guide-to-storing-and-querying-otel-data/</link>
      <description>【&lt;p&gt;Over the past year, a lot of work has gone into making Prometheus work better with OpenTelemetry—a move that reflects the growing number of engineers and developers that &lt;a href=&#34;/observability-survey/2024/#oss-is-the-de-facto-approach-to-observability&#34;&gt;rely on both open source projects&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Historically, Prometheus users have faced a number of challenges when trying to work with OpenTelemetry (and vice versa). This includes:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Proper handling of resource attributes&lt;/li&gt;&#xA;&lt;li&gt;UTF-8 support for metric names and attribute names and values&lt;/li&gt;&#xA;&lt;li&gt;Push (OpenTelemetry) vs. Pull (Prometheus) models.&lt;/li&gt;&#xA;&lt;li&gt;Cumulative (Prometheus or OTel) vs. delta (just OTel) temporality.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;We’re happy to say that with the Prometheus 3.0 release, currently in the release candidate phase, it’s going to be easier than ever to store and query OpenTelemetry data inside Prometheus. In this blog, which is based on our recent &lt;a href=&#34;https://www.youtube.com/watch?v=nUFSugrTGW8&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;PromCon 2024 talk&lt;/a&gt;, we&amp;rsquo;ll walk you through how you can better integrate the two.&lt;/p&gt;&#xA;&lt;h2 id=&#34;resource-attributes&#34;&gt;Resource attributes&lt;/h2&gt;&#xA;&lt;p&gt;In OpenTelemetry, a &lt;a href=&#34;https://opentelemetry.io/docs/concepts/resources/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;resource&lt;/a&gt; represents the entity producing telemetry as resource attributes, which are essentially key-value pairs. Maintaining these attributes can be challenging when ingesting OpenTelemetry data into Prometheus.&lt;/p&gt;&#xA;&lt;p&gt;To get around this, we recommend that you promote OTel resource attributes to metric labels in Prometheus. This method corresponds to how Prometheus has historically copied scraping targets as labels.&lt;/p&gt;&#xA;&lt;p&gt;The one catch here is that you don&amp;rsquo;t want to promote too many, because then you&amp;rsquo;ll end up with performance issues if you have too many labels per metric. You&amp;rsquo;ll also find a lot of UI clutter. In our experience, here is the list of the most common attributes you should consider promoting:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;service.instance.id&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;service.name&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;service.namespace&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;cloud.availability_zone&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;cloud.region&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;container.name&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;deployment.environment.name&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;k8s.cluster.name&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;k8s.container.name&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;k8s.cronjob.name&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;k8s.daemonset.name&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;k8s.deployment.name&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;k8s.job.name&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;k8s.namespace.name&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;k8s.pod.name&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;k8s.replicaset.name&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;k8s.statefulset.name&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Alternatively, you can promote labels at query time instead. The resource attributes are already automatically encoded as labels of the &lt;code&gt;target_info&lt;/code&gt; metric, so you can include them in your queries through PromQL joins.&lt;/p&gt;&#xA;&lt;p&gt;The benefit here is you don&amp;rsquo;t have to decide at ingestion time which resource attributes to include. However, join queries can be tricky, and you can end up with conflicts if one or more resource attributes change.&lt;/p&gt;&#xA;&lt;p&gt;To address this, we&amp;rsquo;ve created a new PromQL function called &lt;code&gt;info&lt;/code&gt;, which is included as experimental in Prometheus 3.0. &lt;code&gt;info&lt;/code&gt; offers a much easier user experience since it&amp;rsquo;s just a simple function call which doesn’t require you to know the name of the metric to join with (“target_info”) or the shared labels (“job” and “instance”). It also has performance benefits, as it only fetches the &lt;code&gt;target_info&lt;/code&gt; time series with the correct job and instance labels.&lt;/p&gt;&#xA;&lt;p&gt;As a potential long-term solution, we&amp;rsquo;re also looking at persisting OpenTelemetry attributes as native metadata in Prometheus. We&amp;rsquo;re currently looking at several proposals for creating a metadata store, so we&amp;rsquo;d love to hear any community feedback as we continue to work toward this goal.&lt;/p&gt;&#xA;&lt;h2 id=&#34;otlp-support&#34;&gt;OTLP support&lt;/h2&gt;&#xA;&lt;p&gt;The OpenTelemetry protocol (&lt;a href=&#34;https://opentelemetry.io/docs/specs/otel/protocol/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;OTLP&lt;/a&gt;) endpoint is now stable for ingestion. Users can now rely on default OpenTelemetry exporters like the &lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-collector/blob/main/exporter/otlphttpexporter/README.md&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;OTLP/HTTP exporter&lt;/a&gt; instead of having to use custom exporters that may not be as well maintained. Also, by using the OTLP exporter they can keep their entire telemetry pipeline OTel native. Let&amp;rsquo;s look briefly at some other ways this will make your life easier as a Prometheus user.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Because Prometheus can work without authentication, this type of functionality is disabled by default to avoid accepting unexpected (and unwanted) traffic. To enable it, you&amp;rsquo;ll need to toggle the &lt;code&gt;--web.enable-otlp-receiver&lt;/code&gt; flag.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;As we discussed in the previous section, you can promote resource attributes on ingestion. We&amp;rsquo;ve added a new section to the configuration file where you can use the OTLP endpoint to make this process easier:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;otlp:&#xA;resource_attributes:&#xA;- service.instance.id&#xA;- deployment.environment.name&#xA;- k8s.cluster.name&#xA;- ...&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;This is safe to use as a means to list the resource attributes you want in your metrics. By default, it won&amp;rsquo;t promote anything, so you won&amp;rsquo;t have crazy cardinality or UI/UX issues. We suggest that you review the recommended list in the previous section and include ones you want in the config file.&lt;/p&gt;&#xA;&lt;p&gt;We also strongly recommend enabling out-of-order ingestion. That&amp;rsquo;s because the OTel collector encourages the batching of metrics—as soon as you have multiple replicas, they won&amp;rsquo;t coordinate to send the data and you will naturally run into out-of-order metrics naturally.&lt;/p&gt;&#xA;&lt;p&gt;And finally, we want to call out the fact that Prometheus now independently maintains its own OTLP-to-Prometheus translation code. A lot of work by both communities went into this project, which will be a big help for the Prometheus maintainers. Already, we&amp;rsquo;ve seen the &lt;strong&gt;average request translation time drop by 40%&lt;/strong&gt;, and &lt;strong&gt;memory usage has been reduced by 59% on average&lt;/strong&gt;. So while users won&amp;rsquo;t see any immediate impact from this change, it will free up maintainers to work on other projects that will ultimately lead to a better overall experience down the road.&lt;/p&gt;&#xA;&lt;h2 id=&#34;delta-temporality&#34;&gt;Delta temporality&lt;/h2&gt;&#xA;&lt;p&gt;In monitoring, there are two accepted temporalities: cumulative and delta. To understand the differences between the two, picture a counter that increases by 5 every 15 seconds.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 780px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;/media/blog/prometheus-3-0-otel/cumulative-v-delta.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;/media/blog/prometheus-3-0-otel/cumulative-v-delta.png&#34;data-srcset=&#34;/media/blog/prometheus-3-0-otel/cumulative-v-delta.png?w=320 320w, /media/blog/prometheus-3-0-otel/cumulative-v-delta.png?w=550 550w, /media/blog/prometheus-3-0-otel/cumulative-v-delta.png?w=750 750w, /media/blog/prometheus-3-0-otel/cumulative-v-delta.png?w=900 900w, /media/blog/prometheus-3-0-otel/cumulative-v-delta.png?w=1040 1040w, /media/blog/prometheus-3-0-otel/cumulative-v-delta.png?w=1240 1240w, /media/blog/prometheus-3-0-otel/cumulative-v-delta.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;cumulative vs delta counter chart&#34;&#xA;width=&#34;780&#34;&#xA;height=&#34;238&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/prometheus-3-0-otel/cumulative-v-delta.png&#34;&#xA;alt=&#34;cumulative vs delta counter chart&#34;&#xA;width=&#34;780&#34;&#xA;height=&#34;238&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;That&amp;rsquo;s what we get in pull-based Prometheus where you always expose metrics and get the accumulated value. This type of fixed interval is necessary for functions like &lt;code&gt;rate()&lt;/code&gt; and &lt;code&gt;increase()&lt;/code&gt;. But with delta, you see the difference from the last observation, so you need a completely different function to go through the data.&lt;/p&gt;&#xA;&lt;p&gt;OpenTelemetry supports cumulative and delta temporality, but cumulative is the default in Prometheus. So, if you&amp;rsquo;re coming from a cumulative system like Grafana, you&amp;rsquo;ll be fine. But if you&amp;rsquo;re working with a delta system like Datadog or Graphite, you can run into issues.&lt;/p&gt;&#xA;&lt;p&gt;To address this, we recommend using the &lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/cumulativetodeltaprocessor/README.md&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;delta to cumulative processor&lt;/a&gt; in the OpenTelemetry Collector, which will take the samples, aggregate them, and produce the accumulated value on a fixed interval.&lt;/p&gt;&#xA;&lt;p&gt;We&amp;rsquo;ve considered adding delta temporality to Prometheus. Currently, work is being done to support delta ingestion &lt;a href=&#34;https://github.com/prometheus/prometheus/pull/15165&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;utf-8&#34;&gt;UTF-8&lt;/h2&gt;&#xA;&lt;p&gt;UTF-8 support is coming in Prometheus 3.0! Here&amp;rsquo;s why that&amp;rsquo;s important: The example below represents a common error that OpenTelemetry users (and those coming from other monitoring systems) run into when they start working with Prometheus:&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 922px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;/media/blog/prometheus-3-0-otel/prom-dots-dino.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;/media/blog/prometheus-3-0-otel/prom-dots-dino.png&#34;data-srcset=&#34;/media/blog/prometheus-3-0-otel/prom-dots-dino.png?w=320 320w, /media/blog/prometheus-3-0-otel/prom-dots-dino.png?w=550 550w, /media/blog/prometheus-3-0-otel/prom-dots-dino.png?w=750 750w, /media/blog/prometheus-3-0-otel/prom-dots-dino.png?w=900 900w, /media/blog/prometheus-3-0-otel/prom-dots-dino.png?w=1040 1040w, /media/blog/prometheus-3-0-otel/prom-dots-dino.png?w=1240 1240w, /media/blog/prometheus-3-0-otel/prom-dots-dino.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;screenshot of an error executing a query with dots.&#34;&#xA;width=&#34;922&#34;&#xA;height=&#34;448&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/prometheus-3-0-otel/prom-dots-dino.png&#34;&#xA;alt=&#34;screenshot of an error executing a query with dots.&#34;&#xA;width=&#34;922&#34;&#xA;height=&#34;448&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;People coming from other platforms like Graphite or Datadog use other separators like dots (&lt;code&gt;.&lt;/code&gt;). The OTel spec accepts UTF-8, meaning any character is valid. We want Prometheus to be a good backend for OpenTelemetry, which is why we&amp;rsquo;re adding UTF-8 support.&lt;/p&gt;&#xA;&lt;p&gt;This will be enabled by default in Prometheus 3.0, but full interoperability with OpenTelemetry will take a bit more work. For example, people are already working on adding a feature flag so that when you write through the OTLP endpoint, you can decide whether you want to keep any character sent or enforce classic Prometheus naming convention instead.&lt;/p&gt;&#xA;&lt;p&gt;We&amp;rsquo;ll have more to come on this topic very soon.&lt;/p&gt;&#xA;&lt;h2 id=&#34;looking-ahead&#34;&gt;Looking ahead&lt;/h2&gt;&#xA;&lt;p&gt;If you want to learn more about these topics, we&amp;rsquo;ve also published a &lt;a href=&#34;https://prometheus.io/docs/guides/opentelemetry/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;guide in the Prometheus docs&lt;/a&gt; that covers all the topics addressed in this blog post. It&amp;rsquo;s a simple starting point for now, but we&amp;rsquo;re committed to keeping it up to date as more functionality becomes available in the months ahead.&lt;/p&gt;&#xA;&lt;p&gt;And while we&amp;rsquo;re excited about all the improvements in Prometheus 3.0, it&amp;rsquo;s certainly not the end. We are committed to making this work at scale, and it will be a major focus of future development. Ultimately, our goal is to make Prometheus the best OSS store for OpenTelemetry metrics, so please contribute if you want to make that happen! If you have any questions about where to start, you can reach out in the CNCF Slack channel (&lt;a href=&#34;https://cloud-native.slack.com/archives/C01AUBA4PFE&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;#prometheus-dev&lt;/a&gt;).&lt;/p&gt;&#xA;&lt;p&gt;And if you&amp;rsquo;re at KubeCon + CloudNativeCon North America 2024 next week and want to talk in-person, check out &lt;a href=&#34;https://kccncna2024.sched.com/event/1howl/celebrating-prometheus-30-a-deep-dive-with-the-maintainers-kemal-akkoyun-falai-josh-abreu-grafana-labs?iframe=no&amp;amp;w=100%25&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Celebrating Prometheus 3.0: A deep dive with the maintainers&lt;/a&gt;, which will be run by fellow Grafanistas Richard &amp;ldquo;RichiH&amp;rdquo; Hartmann and Josue (Josh) Abreu.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;/products/cloud/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Cloud &lt;/a&gt;is the easiest way to get started with metrics, logs, traces, dashboards, and more. We have a generous forever-free tier and plans for every use case. &lt;a href=&#34;/auth/sign-up/create-user/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Sign up for free now!&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;】&lt;p&gt;在过去的一年里，为了让 Prometheus 更好地与 OpenTelemetry 配合工作，我们做了很多工作，这一举措反映了越来越多的工程师和开发人员&lt;a href=&#34;/observability-survey/2024/#oss-is -事实上的可观察性方法&#34;&gt;依赖两个开源项目&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;从历史上看，Prometheus 用户在尝试使用 OpenTelemetry 时面临着许多挑战（反之亦然）。这包括：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;正确处理资源属性&lt;/li&gt;&#xA;&lt;li&gt;对指标名称以及属性名称和值的 UTF-8 支持&lt;/li&gt;&#xA;&lt;li&gt;推式 (OpenTelemetry) 与拉式 (Prometheus) 模型。&lt;/li&gt;&#xA;&lt;li&gt;累积（Prometheus 或 OTel）与增量（仅 OTel）时间性。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;我们很高兴地说，随着目前处于候选版本阶段的 Prometheus 3.0 版本的发布，在 Prometheus 内存储和查询 OpenTelemetry 数据将比以往更加容易。本博客基于我们最近的&lt;a href=&#34;https://www.youtube.com/watch?v=nUFSugrTGW8&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;PromCon 2024 演讲&lt;/a&gt; ，我们将引导您了解如何更好地整合两者。&lt;/p&gt;&#xA;&lt;h2 id=&#34;resource-attributes&#34;&gt;资源属性&lt;/h2&gt;&#xA;&lt;p&gt;在 OpenTelemetry 中，&lt;a href=&#34;https://opentelemetry.io/docs/concepts/resources/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;资源&lt;/a&gt; 表示生成遥测数据的实体：资源属性，本质上是键值对。将 OpenTelemetry 数据提取到 Prometheus 中时，维护这些属性可能具有挑战性。&lt;/p&gt;&#xA;&lt;p&gt;为了解决这个问题，我们建议您将 OTel 资源属性提升为 Prometheus 中的指标标签。此方法对应于 Prometheus 历史上将抓取目标复制为标签的方式。&lt;/p&gt;&#xA;&lt;p&gt;这里的一个问题是您不想提升太多，因为如果每个指标的标签太多，最终会出现性能问题。您还会发现很多 UI 混乱。根据我们的经验，以下是您应该考虑推广的最常见属性的列表：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;service.instance.id&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;服务名称&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;service.namespace&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;cloud.availability_zone&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;云区域&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;容器名称&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;deployment.environment.name&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;k8s.cluster.name&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;k8s.container.name&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;k8s.cronjob.name&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;k8s.daemonset.name&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;k8s.deployment.name&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;k8s.job.name&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;k8s.namespace.name&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;k8s.pod.name&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;k8s.replicaset.name&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;k8s.statefulset.name&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;或者，您可以在查询时提升标签。资源属性已自动编码为 &lt;code&gt;target_info&lt;/code&gt; 指标的标签，因此您可以通过 PromQL 连接将它们包含在查询中。&lt;/p&gt;&#xA;&lt;p&gt;T这样做的好处是您不必在摄取时决定要包含哪些资源属性。但是，连接查询可能很棘手，如果一个或多个资源属性发生更改，您可能会遇到冲突。&lt;/p&gt;&#xA;&lt;p&gt;为了解决这个问题，我们创建了一个名为 &lt;code&gt;info&lt;/code&gt; 的新 PromQL 函数，该函数作为实验性包含在 Prometheus 3.0 中。 &lt;code&gt;info&lt;/code&gt; 提供了更轻松的用户体验，因为它只是一个简单的函数调用，不需要您知道要连接的指标名称（“target_info”）或共享标签（“job”和“实例”）。它还具有性能优势，因为它仅获取具有正确作业和实例标签的 &lt;code&gt;target_info&lt;/code&gt; 时间序列。&lt;/p&gt;&#xA;&lt;p&gt;作为潜在的长期解决方案，我们还在考虑将 OpenTelemetry 属性持久保存为 Prometheus 中的本机元数据。我们目前正在考虑创建元数据存储的几项提案，因此在我们继续努力实现这一目标的过程中，我们很乐意听到任何社区反馈。&lt;/p&gt;&#xA;&lt;h2 id=&#34;otlp-support&#34;&gt;OTLP 支持&lt;/h2&gt;&#xA;&lt;p&gt;OpenTelemetry 协议 (&lt;a href=&#34;https://opentelemetry.io/docs/specs/otel/protocol/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;OTLP&lt;/a&gt;) 端点现已推出摄入稳定。用户现在可以依赖默认的 OpenTelemetry 导出器，例如 &lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-collector/blob/main/exporter/otlphttpexporter/README.md&#34; target=&#34;_blank&#34; rel= “noopener noreferrer&#34;&gt;OTLP/HTTP 导出器&lt;/a&gt;，而不必使用可能维护得不好的自定义导出器。此外，通过使用 OTLP 导出器，他们可以保持整个遥测管道 OTel 原生。让我们简要了解一下其他一些方法，这将使您作为 Prometheus 用户的生活变得更轻松。&lt;/p&gt;&#xA;&lt;块引用&gt;&#xA;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;由于 Prometheus 无需身份验证即可工作，因此默认情况下禁用此类功能，以避免接受意外（和不需要的）流量。要启用它，您需要切换 &lt;code&gt;--web.enable-otlp-receiver&lt;/code&gt; 标志。&lt;/p&gt;&#xA;&lt;/块引用&gt;&#xA;&lt;p&gt;正如我们在上一节中讨论的，您可以在摄取时提升资源属性。我们在配置文件中添加了一个新部分，您可以在其中使用 OTLP 端点来简化此过程：&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;按钮 x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;将代码复制到剪贴板&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;复制&lt;/span&gt;&#xA;&lt;/按钮&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;otlp:&#xA;资源属性：&#xA;- 服务.实例.id&#xA;- 部署.环境.名称&#xA;- k8s.cluster.name&#xA;- ...&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;这可以安全地用作列出您想要在度量中的资源属性的方法CS。默认情况下，它不会推广任何内容，因此您不会遇到疯狂的基数或 UI/UX 问题。我们建议您查看上一节中的推荐列表，并将您想要的列表包含在配置文件中。&lt;/p&gt;&#xA;&lt;p&gt;我们还强烈建议启用无序摄取。这是因为 OTel 收集器鼓励对指标进行批处理 - 一旦您拥有多个副本，它们就不会协调发送数据，您自然会遇到无序指标。&lt;/p&gt;&#xA;&lt;p&gt;最后，我们要指出这样一个事实：Prometheus 现在独立维护自己的 OTLP 到 Prometheus 转换代码。两个社区都为这个项目投入了大量的工作，这对 Prometheus 维护者来说将是一个很大的帮助。我们已经看到&lt;strong&gt;平均请求翻译时间下降了 40%&lt;/strong&gt;，并且&lt;strong&gt;内存使用量平均减少了 59%&lt;/strong&gt;。因此，虽然用户不会看到此更改的任何直接影响，但它将使维护人员能够腾出时间来处理其他项目，最终将带来更好的整体体验。&lt;/p&gt;&#xA;&lt;h2 id=&#34;delta-temporality&#34;&gt;增量时间&lt;/h2&gt;&#xA;&lt;p&gt;在监控中，有两种可接受的时间性：累积性和增量性。要了解两者之间的差异，请想象一个每 15 秒增加 5 的计数器。&lt;/p&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：780px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接”&#xA;href=&#34;/media/blog/prometheus-3-0-otel/cumulative-v-delta.png&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“延迟加载”&#xA;data-src =“/media/blog/prometheus-3-0-otel/cumulative-v-delta.png”data-srcset =“/media/blog/prometheus-3-0-otel/cumulative-v-delta.png” png?w=320 320w，/media/blog/prometheus-3-0-otel/cumulative-v-delta.png?w=550 550w，/media/blog/prometheus-3-0-otel/cumulative-v- delta.png?w=750 750w, /media/blog/prometheus-3-0-otel/cumulative-v-delta.png?w=900 900w, /media/blog/prometheus-3-0-otel/cumulative- v-delta.png?w=1040 1040w，/media/blog/prometheus-3-0-otel/cumulative-v-delta.png?w=1240 1240w，/media/blog/prometheus-3-0-otel/累积-v-delta.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;累积与增量计数器图表&#34;&#xA;宽度=“780”&#xA;高度=“238”&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src=&#34;/media/blog/prometheus-3-0-otel/cumulative-v-delta.png&#34;&#xA;alt=&#34;累积与增量计数器图表&#34;&#xA;宽度=“780”&#xA;高度=“238”&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;p&gt;这就是我们在基于拉动的 Prometheus 中得到的，您始终公开指标并获取累积值。这种类型的固定间隔对于 &lt;code&gt;rate()&lt;/code&gt; 和 &lt;code&gt;increase()&lt;/code&gt; 等函数是必需的。但是使用 delta，您会看到与上次观察的差异，因此您需要一个完全不同的函数来遍历数据。&lt;/p&gt;&#xA;&lt;p&gt;OpenTelemetry 支持累积和增量时间性，但累积是 Prometheus 中的默认设置。 So，如果您来自像 Grafana 这样的累积系统，那就没问题。但如果您使用的是 Datadog 或 Graphite 等增量系统，则可能会遇到问题。&lt;/p&gt;&#xA;&lt;p&gt;为了解决这个问题，我们建议使用 &lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/cumulativetodeltaprocessor/README.md&#34; target=&#34;_blank “ rel=&#34;noopener noreferrer&#34;&gt;增量到 OpenTelemetry Collector 中的累积处理器&lt;/a&gt;，它将获取样本、聚合它们，并按固定时间间隔生成累积值。&lt;/p&gt;&#xA;&lt;p&gt;我们已经考虑向 Prometheus 添加增量时间性。目前，我们正在&lt;a href=&#34;https://github.com/prometheus/prometheus/pull/15165&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;此处&lt;/a&gt;支持增量摄取。&lt; /p&gt;&#xA;&lt;h2 id=&#34;utf-8&#34;&gt;UTF-8&lt;/h2&gt;&#xA;&lt;p&gt;Prometheus 3.0 即将支持 UTF-8！这就是为什么这很重要：下面的示例代表了 OpenTelemetry 用户（以及来自其他监控系统的用户）在开始使用 Prometheus 时遇到的常见错误：&lt;/p&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：922px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接”&#xA;href=&#34;/media/blog/prometheus-3-0-otel/prom-dots-dino.png&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“延迟加载”&#xA;data-src =“/media/blog/prometheus-3-0-otel/prom-dots-dino.png”data-srcset =“/media/blog/prometheus-3-0-otel/prom-dots-dino.png” png?w=320 320w，/media/blog/prometheus-3-0-otel/prom-dots-dino.png?w=550 550w，/media/blog/prometheus-3-0-otel/prom-dots- dino.png?w=750 750w, /media/blog/prometheus-3-0-otel/prom-dots-dino.png?w=900 900w, /media/blog/prometheus-3-0-otel/prom-点-dino.png?w=1040 1040w，/media/blog/prometheus-3-0-otel/prom-dots-dino.png?w=1240 1240w，/media/blog/prometheus-3-0-otel/舞会-点-恐龙.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;执行带点查询时出错的屏幕截图。&#34;&#xA;宽度=“922”&#xA;高度=“448”&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src=&#34;/media/blog/prometheus-3-0-otel/prom-dots-dino.png&#34;&#xA;alt=&#34;执行带点查询时出错的屏幕截图。&#34;&#xA;宽度=“922”&#xA;高度=“448”&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;p&gt;来自其他平台（例如 Graphite 或 Datadog）的用户使用其他分隔符，例如点 (&lt;code&gt;.&lt;/code&gt;)。 OTel 规范接受 UTF-8，这意味着任何字符都是有效的。我们希望 Prometheus 成为 OpenTelemetry 的良好后端，这就是我们添加 UTF-8 支持的原因。&lt;/p&gt;&#xA;&lt;p&gt;这将在 Prometheus 3.0 中默认启用，但与 OpenTelemetry 的完全互操作性将需要更多的工作。例如，人们已经在致力于添加功能标志，以便当您通过 OTLP 端点进行编写时，您可以决定是要保留发送的任何字符还是强制执行经典的 Prometheus 命名约定。&lt;/p&gt;&#xA;&lt;p&gt;我们很快就会有更多关于这个主题的内容。&lt;/p&gt;&#xA;&lt;h2 id=&#34;looking-ahead&#34;&gt;寻找头&lt;/h2&gt;&#xA;&lt;p&gt;如果您想了解有关这些主题的更多信息，我们还发布了 &lt;a href=&#34;https://prometheus.io/docs/guides/opentelemetry/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; &gt;Prometheus 文档中的指南&lt;/a&gt;涵盖了本博文中讨论的所有主题。目前这只是一个简单的起点，但随着未来几个月更多功能的推出，我们致力于保持最新状态。&lt;/p&gt;&#xA;&lt;p&gt;虽然我们对 Prometheus 3.0 的所有改进感到兴奋，但这肯定还没有结束。我们致力于将这项工作规模化，这将是未来发展的一个重点。最终，我们的目标是使 Prometheus 成为 OpenTelemetry 指标的最佳 OSS 存储，因此，如果您想实现这一目标，请做出贡献！如果您对从哪里开始有任何疑问，可以通过 CNCF Slack 频道 (&lt;a href=&#34;https://cloud-native.slack.com/archives/C01AUBA4PFE&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;#prometheus-dev&lt;/a&gt;）。&lt;/p&gt;&#xA;&lt;p&gt;如果您下周参加 KubeCon + CloudNativeCon North America 2024 并想亲自演讲，请查看 &lt;a href=&#34;https://kccncna2024.sched.com/event/1howl/celebating-prometheus- 30-a-deep-dive-with-the-maintainers-kemal-akkoyun-falai-josh-abreu-grafana-labs?iframe=no&amp;w=100%25&amp;sidebar=yes&amp;bg=no&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer &#34;&gt;庆祝 Prometheus 3.0：与维护者深入探讨&lt;/a&gt;，该活动将由 Grafanistas Richard “RichiH” Hartmann 和 Josue (Josh) Abreu 负责管理。&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;/products/cloud/?pg=blog&amp;plcmt=body-txt&#34;&gt;Grafana Cloud&lt;/a&gt;是开始使用指标、日志、跟踪、仪表板等的最简单方法。我们为每个用例提供慷慨的永久免费套餐和计划。 &lt;a href=&#34;/auth/sign-up/create-user/?pg=blog&amp;plcmt=body-txt&#34;&gt;立即免费注册！&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</description>
      <pubDate>Wed, 06 Nov 2024 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【How eBPF makes observability awesome】eBPF 如何让可观察性变得出色</title>
      <link>https://grafana.com/blog/2024/11/01/how-ebpf-makes-observability-awesome/</link>
      <description>【&lt;p&gt;You might not think that a coffee concentration meter, the Hubble telescope, or bees have anything to do with each other — let alone observability — but all that means is you probably haven&amp;rsquo;t listened to the latest episode of “Grafana’s Big Tent.&amp;quot;&lt;/p&gt;&#xA;&lt;p&gt;All of those subjects came up during a conversation about &lt;a href=&#34;https://ebpf.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;eBPF&lt;/a&gt;, a technology that allows you to attach your own programs to different points of the Linux kernel. It&amp;rsquo;s also the basis for &lt;a href=&#34;/oss/beyla-ebpf/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Beyla&lt;/a&gt;, an open source eBPF-based auto-instrumentation tool that helps you easily get started with application observability for Go, C/C++, Rust, Python, Ruby, Java, NodeJS, .NET, and more.&lt;/p&gt;&#xA;&lt;p&gt;Leading the podcast discussion are co-hosts Tom Wilkie, Grafana Labs CTO, and Matt Toback, Grafana Labs VP of Culture, who are joined by Mario Macías, Grafana Labs Senior Software Engineer, and &lt;a href=&#34;https://www.lizrice.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Liz Rice&lt;/a&gt;, Chief Open Source Officer at &lt;a href=&#34;https://isovalent.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Isovalent&lt;/a&gt;, a leader in open source cloud native networking and security.&lt;/p&gt;&#xA;&lt;p&gt;You can read some of the show’s highlights below, but listen to the full episode to find out more about eBPF, including and what it &lt;em&gt;shouldn&amp;rsquo;t&lt;/em&gt; be used for, how using eBFP tools impact performance, eBPF for Windows, and even what eBPF has to to with &lt;a href=&#34;https://playgameoflife.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Conway&amp;rsquo;s Game of Life&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;iframe width=&#34;100%&#34; height=&#34;180&#34; frameborder=&#34;no&#34; scrolling=&#34;no&#34; seamless=&#34;&#34; src=&#34;https://share.transistor.fm/e/c8c5dc90&#34;&gt;&lt;/iframe&gt;&#xA;&lt;p&gt;&lt;em&gt;Note: The following are highlights from episode 6, season 2 of “Grafana’s Big Tent” podcast. The transcript below has been edited for length and clarity.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;intro-to-ebpf-and-kernel-basics&#34;&gt;Intro to eBPF and kernel basics&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Tom Wilkie:&lt;/strong&gt; We are here to talk about eBPF — in particular how EBPF makes observability awesome. I&amp;rsquo;m not sure how familiar our audience is actually going to be with the term eBPF, so Liz, what is eBPF? Why is it useful?&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Liz Rice&lt;/strong&gt;: The letters used to stand for Extended Berkeley Packet Filter, but it does so much more than packet filtering, so officially it doesn&amp;rsquo;t stand for anything anymore. What it allows us to do is dynamically load programs into the kernel to change the way the kernel behaves.&lt;/p&gt;&#xA;&lt;p&gt;The kernel is the privileged part of the operating system that can interface with hardware. So your applications are actually asking the kernel to do things on their behalf, and the kernel&amp;rsquo;s also coordinating all your various different applications that might be running at the same time. The kernel is involved in everything that your applications are doing, and that means if we can add instrumentation into it — which we can, using eBPF — we can be in a really powerful place to observe and even affect what&amp;rsquo;s actually happening across the whole system and all of our applications, if we so choose.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Matt Toback:&lt;/strong&gt; What did the world look like before?&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Liz&lt;/strong&gt;: You had a couple of choices: You could either write your own kernel, make bespoke changes to the kernel, or build your own kernel — and that&amp;rsquo;s not an exercise for the faint-hearted. Or, you could try to get your changes accepted into the upstream kernel — also, probably not an exercise for the faint hearted, because if you want something very bespoke, Linux is the most widely used operating system on the planet. You&amp;rsquo;d have to persuade the Linux community that your change is good for everybody, not just for you.&lt;/p&gt;&#xA;&lt;p&gt;Your other option would be a kernel module, and that&amp;rsquo;s a completely legitimate choice, a way of having a custom extension to the kernel. The only problem is that when the kernel crashes, it brings down your whole machine. There is no rescuing a crashed kernel. All software has bugs, and if there&amp;rsquo;s a bug in the kernel module, it could easily crash the kernel. A lot of people have shied away from using them or using other people&amp;rsquo;s third-party kernel modules because of the risk that it&amp;rsquo;s going to crash your machine.&lt;/p&gt;&#xA;&lt;p&gt;We all know what crashed kernels look like, because we all saw the blue screen of death plastered across airports and translations worldwide recently. That was Windows, but it&amp;rsquo;s the same principle. Crashing the kernel is a bad day for a computer.&lt;/p&gt;&#xA;&lt;p&gt;The difference with eBPF is the programs that we load into the kernel go through this verification process to make sure that they are safe to run and won&amp;rsquo;t crash the kernel. And that&amp;rsquo;s the big step forward between kernel module programming and eBPF.&lt;/p&gt;&#xA;&lt;h2 id=&#34;examining-use-cases&#34;&gt;Examining use cases&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Tom&lt;/strong&gt;: One of my pet peeves about eBPF, or Rust, or blockchain, or AI/ML is people are focusing on the technology and not on what problems it solves. What are people using eBPF for?&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Mario Macías&lt;/strong&gt;: When you inject a program in the kernel and can see the memory of the kernel at a given state — or even of the network&amp;rsquo;s stack or of an application — then you can get runtime information that might help you provide visibility of what&amp;rsquo;s going on inside the kernel or your application. This is for observability, but even for security. You can subscribe for multiple events and in your own system, then you can create a trace log.&lt;/p&gt;&#xA;&lt;p&gt;More recently, there are people suggesting that eBPF could be used for hot patching of your system so you can fix security or stability issues.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Liz:&lt;/strong&gt; There are a couple of cases of that. One is the idea of a packet of death. Maybe there&amp;rsquo;s a bug in the kernel that means a particularly formed network packet has an incorrect buffer length or something. If you craft a packet in that way, it will crash the kernel. There were mitigations distributed in the form of eBPF programs that can look at that packet before it gets processed by the stack so the packet can be discarded if it is a packet of death.&lt;/p&gt;&#xA;&lt;p&gt;I also believe there were some mitigations around some of the Spectre-related vulnerabilities that could be distributed in eBPF form.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Matt:&lt;/strong&gt; As eBPF has grown in popularity, has there also been a growing amount of folks that are using this as an attack vector?&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Liz:&lt;/strong&gt; Yes. Everything is an arms race, particularly in the security world. You can do all sorts of incredibly powerful things with eBPF, and if you are a bad person, those could be malicious things. Don&amp;rsquo;t run any old eBPF that you just pull off the internet without checking where it came from.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-benefits-of-ebpf&#34;&gt;The benefits of eBPF&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Tom:&lt;/strong&gt; Why would I build a network in eBPF? Why wouldn&amp;rsquo;t I just use the capabilities that exist in the Linux kernel?&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Liz:&lt;/strong&gt; A lot of it is about performance and scalability, particularly when I talk about cloud native and container networking. One of the things that we can do with eBPF is essentially short-circuit some of the networking paths to miss out bits that really don&amp;rsquo;t need to be run.&lt;/p&gt;&#xA;&lt;p&gt;For example, if you&amp;rsquo;ve got a container, it&amp;rsquo;s typically got its own network namespace and it&amp;rsquo;s running in a host that also has its own network namespace. A packet coming into that machine through the ethernet connection is going to traverse the networking stack traditionally in the host namespace, then go across a virtual ethernet connection into the container net space and then get processed again. Essentially, you can end up with duplicate processing.&lt;/p&gt;&#xA;&lt;p&gt;With eBPF, we can be smart about only really doing that processing once. In fact, there&amp;rsquo;s a new capability called netkit, where we can now achieve zero overhead networking, essentially bypassing all of the excess network processing overhead and get exactly the same networking performance out of a container as you would from just running an application on the host — which is quite a significant jump in performance from traditional container networking.&lt;/p&gt;&#xA;&lt;p&gt;While we are processing a packet and deciding where to send it, we can also apply things like security policies to those packets, so it&amp;rsquo;s super high-performance.&lt;/p&gt;&#xA;&lt;h2 id=&#34;ebpf-at-grafana-labs-and-beyond&#34;&gt;eBPF at Grafana Labs and beyond&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Tom:&lt;/strong&gt; What are we doing with eBPF at Grafana Labs?&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Mario:&lt;/strong&gt; We have a couple of products using eBPF. One is Grafana Beyla, which attaches eBPF programs at different levels of the operating system, including the network stack, and is able to instrument your running applications, your running service, in different protocols — either services and clients — and provide application-level metrics like requests per second, errors, duration, and so on. In the case of a HTTP, it&amp;rsquo;s also able to decorate that information with the path, the request size, the return code, and so on.&lt;/p&gt;&#xA;&lt;p&gt;The advantage of that is that you don&amp;rsquo;t need to modify your applications or reconfigure them or redeploy them. You have your running applications deploy Grafana Beyla in a host, and automatically — thanks to eBPF — those small eBPF programs that are deployed at different levels will hook on different application events and provide that information.&lt;/p&gt;&#xA;&lt;p&gt;Also, Grafana has another tool named &lt;a href=&#34;/blog/2023/03/15/pyroscope-grafana-phlare-join-for-oss-continuous-profiling/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Pyroscope&lt;/a&gt;, which is able to profile the performance of your application by function using flame graphs.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Tom&lt;/strong&gt;: To make sure I understand correctly, Beyla is like an auto instrumentation agent written in eBPF, that you install on the machine. And then anything you run on that machine, you&amp;rsquo;re automatically going to get rich metrics and traces out of those systems without having to modify the binaries at all.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Mario:&lt;/strong&gt; Yeah. It&amp;rsquo;s a normal application written in go that loads those eBPF programs. Those programs in the kernel space communicate with Beyla in the userspace, then Beyla reconstructs all the information and sends it.&lt;/p&gt;&#xA;&lt;p&gt;By the way, it uses the Cilium eBPF library from Isovalent. It&amp;rsquo;s amazing. I think many other big projects are using them because it facilitates the life of eBPF developers a lot.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Tom&lt;/strong&gt;: So Beyla&amp;rsquo;s not the only eBPF observability game in town. What are Isovalent and Cilium bringing to the observability space?&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Liz:&lt;/strong&gt; There&amp;rsquo;s a subproject within Cilium called &lt;a href=&#34;https://tetragon.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Tetragon&lt;/a&gt;, which is security observability and also enforcement, optionally. So this is really focusing on observing events that are outside of some security policy if you are interested in detecting and possibly preventing suspicious looking activity.&lt;/p&gt;&#xA;&lt;p&gt;One of the really nice things is that in Tetragon, we can filter those events within the kernel and only actually report the events that are outside of policy. For example, for a long time you&amp;rsquo;ve been able to use eBPF to, let&amp;rsquo;s say, report on somebody trying to open a file. There have been eBPF-based security tools that have then been able to take all of the file-opening events and filter them in userspace so that you can say, &amp;ldquo;Ah! Here is somebody trying to open your &lt;code&gt;/etc/shadow&lt;/code&gt; file, and that seems like a bad idea.&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Tom:&lt;/strong&gt; For our non-technical listeners, &lt;code&gt;/etc/shadow&lt;/code&gt; is where your passwords are stored.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Liz:&lt;/strong&gt; With Tetragon, rather than passing information about every single file access to see whether or not it is actually &lt;code&gt;/etc/shadow&lt;/code&gt;, we can do that filtering inside the eBPF program in the kernel, and that makes it dramatically more efficient.&lt;/p&gt;&#xA;&lt;h2 id=&#34;good-news-for-platform-teams-and-application-developers&#34;&gt;Good news for platform teams (and application developers)&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Tom:&lt;/strong&gt; I think we&amp;rsquo;ve seen a shift where application developers inside large organizations no longer have to worry about where their software runs, how it&amp;rsquo;s scheduled, how it recovers from hardware failure — all these kinds of things. With eBPF auto instrumentation, is telemetry collection and instrumentation becoming a function of the platform as well?&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Liz:&lt;/strong&gt; I think that&amp;rsquo;s absolutely true. We&amp;rsquo;ve seen that a lot over the evolution of Cilium. Isovalent&amp;rsquo;s customers are typically in platform teams, and they have networking requirements they&amp;rsquo;re going to have to solve. They might have some security problems that they or a security team need to solve between them.&lt;/p&gt;&#xA;&lt;p&gt;You can have so much of this embedded into the underlying platform, such that application developers don&amp;rsquo;t really need to care, and that they can have a service offered to them that gives them visibility into which services are talking to which other services, or that automatically gives you encrypted connections across your network. These are benefits that just roll out automatically to all of the application development teams.&lt;/p&gt;&#xA;&lt;p&gt;Being able to observe how your applications are behaving becomes a service that the platform team offers to the development teams. I think that&amp;rsquo;s a very common model.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Tom:&lt;/strong&gt; I guess the good thing about this is also it becomes more consistent across an organization as well, instead of every application team picking their own vendor, their own technology for doing their own understanding. In these large organizations where we&amp;rsquo;ve all gotta get along and we&amp;rsquo;ve all gotta talk to each other now — and that goes to our software as well — having a common observability, a common networking, a common security standard across the team is kind of useful.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Liz:&lt;/strong&gt; And if you are only instrumenting in the kernel, the application teams don&amp;rsquo;t even need to do any work. It&amp;rsquo;s kind of free, essentially, for them.&lt;/p&gt;&#xA;&lt;h2 id=&#34;looking-ahead&#34;&gt;Looking ahead&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Tom:&lt;/strong&gt; What does the future hold for Beyla, and what does the future hold for Cilium and eBPF?&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Mario:&lt;/strong&gt; For Beyla, we have some main lines of future directions. One is to make it even more automatic to get instant instrumentation. It&amp;rsquo;s already pretty simple to deploy, but we still need to help some users to get more simplicity. We would also like to get better information about some languages and protocols. We already support some protocols like Kafka, but we would like to add other message queues, other databases, and so on.&lt;/p&gt;&#xA;&lt;p&gt;A third implementation line is to let Beyla run with even lower privileges — or at least to let the users be able to say, &amp;ldquo;Okay, I want to steal some capabilities even if I lose some functionality,&amp;rdquo; because there are some sys admins who are still reluctant to give up program admin capabilities.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Liz:&lt;/strong&gt; With eBPF, there&amp;rsquo;s quite a lot of work going on at the moment around things like the verifier, the threat model, the security model, auditing the verifier, and so on. I think it&amp;rsquo;s getting quite a lot of attention, particularly now people seeing the dangers of tooling that directly accesses an operating system kernel. A lot of us in the eBPF community are saying, &amp;ldquo;eBPF is a great solution to that,&amp;rdquo; but we probably need more research and security analysis to really convince people that that&amp;rsquo;s the case.&lt;/p&gt;&#xA;&lt;p&gt;One thing we haven&amp;rsquo;t mentioned, and I probably should, is that Isovalent was acquired by Cisco earlier this year. Cisco has been incredibly supportive of our team continuing to invest time in Cilium. Cilium is a Cloud Native Computing Foundation project. Because it&amp;rsquo;s a foundation-owned project, it&amp;rsquo;s a community run project, it&amp;rsquo;s no longer Isovalent&amp;rsquo;s alone, but we do invest a lot of resources into it. So the fact that Cisco is a hundred percent behind us continuing to do that is fantastic for all of us and it&amp;rsquo;s fantastic for the future of the project.&lt;/p&gt;&#xA;&lt;p&gt;So Cilium will carry on moving from strength to strength. We&amp;rsquo;re very much looking at things like how you seamlessly network between your cloud native workloads and workloads that have been running in your on-prem environments for however many years or decades. You want to be able to access those and communicate between those and your newfangled Kubernetes workload, so that&amp;rsquo;s quite a big area of focus for us right now — and obviously Tetragon and the security that we&amp;rsquo;re providing with that. One of the ways in which that technology is being used is in a product that Cisco is building called Hyper Shield, which takes eBPF, and some fancy AI things, and some fancy dual data plane things.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Tom:&lt;/strong&gt; We managed to go almost the entire podcast without mentioning AI.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Liz:&lt;/strong&gt; Sorry, I failed at the last hurdle. AI had to be mentioned! &lt;em&gt;[laughs]&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;“Grafana’s Big Tent” podcast wants to hear from you. If you have a great story to share, want to join the conversation, or have any feedback, please contact the Big Tent team at &lt;a href=&#34;/blog/2024/08/23/grafanas-big-tent-podcast-season-2-is-here/bigtent@grafana.com&#34;&gt;bigtent@grafana.com&lt;/a&gt;. You can also catch up on the first and second season of “Grafana’s Big Tent” on &lt;a href=&#34;https://podcasts.apple.com/us/podcast/grafanas-big-tent/id1616725129&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Apple Podcasts&lt;/a&gt; and &lt;a href=&#34;https://open.spotify.com/show/3beQvS8to0rYs1gxOnPrfD?si=bf046f54fe214615&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Spotify&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;】&lt;p&gt;您可能不认为咖啡浓度计、哈勃望远镜或蜜蜂彼此有任何关系，更不用说可观测性了，但这意味着您可能没有听过最新一集的“Grafana&#39;s Big”帐篷。”&lt;/p&gt;&#xA;&lt;p&gt;所有这些主题都是在关于 &lt;a href=&#34;https://ebpf.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;eBPF&lt;/a&gt; 的对话中出现的，这项技术允许您将您自己的程序附加到 Linux 内核的不同点。它也是 &lt;a href=&#34;/oss/beyla-ebpf/?pg=blog&amp;plcmt=body-txt&#34;&gt;Grafana Beyla&lt;/a&gt; 的基础，Grafana Beyla 是一个基于 eBPF 的开源自动检测工具，可帮助您轻松入门具有 Go、C/C++、Rust、Python、Ruby、Java、NodeJS、.NET 等应用程序可观察性。&lt;/p&gt;&#xA;&lt;p&gt;主持播客讨论的是 Grafana Labs 首席技术官 Tom Wilkie 和 Grafana Labs 文化副总裁 Matt Toback，Grafana Labs 高级软件工程师 Mario Macías 和 &lt;a href=&#34;https:/ /www.lizrice.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Liz Rice&lt;/a&gt;，&lt;a 首席开源官href=&#34;https://isovalent.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Isovalent&lt;/a&gt;，开源云原生网络和安全领域的领导者。&lt;/p&gt;&#xA;&lt;p&gt;您可以阅读下面的一些节目亮点，但也可以收听完整剧集以了解有关 eBPF 的更多信息，包括它不应该用于什么、使用 eBFP 工具如何影响性能、适用于 Windows 的 eBPF，甚至 eBPF 与 &lt;a href=&#34;https://playgameoflife.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Conway 的游戏生活&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;iframe 宽度=“100%”高度=“180”frameborder=“无”滚动=“无”无缝=“”src=“https://share.transistor.fm/e/c8c5dc90”&gt;&lt;/iframe&gt;&#xA;&lt;p&gt;&lt;em&gt;注意：以下是“Grafana’s Big Tent”播客第二季第 6 集的精彩片段。为了长度和清晰度，下面的文字记录已经过编辑。&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;intro-to-ebpf-and-kernel-basics&#34;&gt;eBPF 和内核基础知识简介&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Tom Wilkie：&lt;/strong&gt;我们来这里是为了讨论 eBPF，特别是 EBPF 如何使可观察性变得很棒。我不确定我们的观众实际上对 eBPF 这个术语有多熟悉，所以 Liz，什么是 eBPF？为什么它有用？&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Liz Rice&lt;/strong&gt;：这些字母过去代表扩展伯克利数据包过滤器，但它的作用远不止数据包过滤，因此正式它不再代表任何东西。它允许我们做的就是动态地将程序加载到内核中以改变内核的行为方式。&lt;/p&gt;&#xA;&lt;p&gt;内核是操作系统中可以与硬件交互的特权部分。因此，您的应用程序实际上要求内核代表它们执行操作，并且内核还协调可能同时运行的所有各种不同的应用程序。内核参与您的应用程序正在执行的所有操作，这意味着如果我们可以向其中添加工具（我们可以使用 eBPF），如果我们选择的话，我们可以处于一个非常强大的位置来观察甚至影响整个系统和所有应用程序中实际发生的情况。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;马特·托巴克：&lt;/strong&gt;世界以前是什么样子？&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Liz&lt;/strong&gt;：您有几个选择：您可以编写自己的内核，对内核进行定制更改，或者构建您自己的内核 - 这不适合胆小的人。或者，您可以尝试让上游内核接受您的更改 - 而且，这可能不适合胆小的人，因为如果您想要一些非常定制的东西，Linux 是地球上使用最广泛的操作系统。您必须说服 Linux 社区，您的更改对每个人都有好处，而不仅仅是您。&lt;/p&gt;&#xA;&lt;p&gt;您的另一个选择是内核模块，这是一个完全合法的选择，是一种对内核进行自定义扩展的方式。唯一的问题是，当内核崩溃时，它会导致整个机器瘫痪。崩溃的内核是无法挽救的。所有软件都有缺陷，如果内核模块存在缺陷，很容易导致内核崩溃。很多人都避免使用它们或使用其他人的第三方内核模块，因为它存在使您的计算机崩溃的风险。&lt;/p&gt;&#xA;&lt;p&gt;我们都知道坠毁的内核是什么样子，因为最近我们都看到了死亡蓝屏贴在世界各地的机场和翻译上。那是Windows，但原理是一样的。对于计算机来说，内核崩溃是糟糕的一天。&lt;/p&gt;&#xA;&lt;p&gt;与 eBPF 的区别在于，我们加载到内核中的程序会经过此验证过程，以确保它们可以安全运行并且不会使内核崩溃。这是内核模块编程和 eBPF 之间的一大进步。&lt;/p&gt;&#xA;&lt;h2 id=&#34;examining-use-cases&#34;&gt;检查用例&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Tom&lt;/strong&gt;：我对 eBPF、Rust、区块链或 AI/ML 的一大不满是人们只关注技术而不是它解决的问题。人们使用 eBPF 的目的是什么？&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Mario Macías&lt;/strong&gt;：当您在内核中注入程序并可以看到给定状态下的内核内存（甚至是网络堆栈或应用程序的内存）时，您可以获得运行时可以帮助您了解内核或应用程序内部发生的情况的信息。这是为了可观察性，但也是为了安全性。您可以订阅多个事件并在您自己的系统中，然后您可以创建跟踪日志。&lt;/p&gt;&#xA;&lt;p&gt;最近，有人建议可以使用 eBPF 对系统进行热修补，以便修复安全性或稳定性问题。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;莉兹：&lt;/strong&gt;有几个这样的例子。一个是死亡包的想法。也许内核中存在一个错误，这意味着一部分特别形成的网络数据包的缓冲区长度不正确或有其他问题。如果你以这种方式制作一个数据包，它会使内核崩溃。有以 eBPF 程序形式分发的缓解措施，这些程序可以在堆栈处理该数据包之前查看该数据包，因此如果该数据包是死亡数据包，则可以将其丢弃。&lt;/p&gt;&#xA;&lt;p&gt;我还相信，针对一些与 Spectre 相关的漏洞有一些缓解措施，可以以 eBPF 形式分发。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Matt：&lt;/strong&gt;随着 eBPF 越来越受欢迎，是否也有越来越多的人使用它作为攻击媒介？&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;莉兹：&lt;/strong&gt;是的。一切都是军备竞赛，尤其是在安全领域。你可以使用 eBPF 做各种令人难以置信的强大事情，如果你是一个坏人，这些可能是恶意的事情。不要运行任何从互联网上下载的旧 eBPF，而不检查它的来源。&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-benefits-of-ebpf&#34;&gt;eBPF 的优势&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Tom：&lt;/strong&gt;为什么我要在 eBPF 中构建网络？为什么我不直接使用 Linux 内核中存在的功能？&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Liz：&lt;/strong&gt; 其中很多与性能和可扩展性有关，特别是当我谈论云原生和容器网络时。我们可以使用 eBPF 做的一件事本质上是短路一些网络路径，以错过真正不需要运行的位。&lt;/p&gt;&#xA;&lt;p&gt;例如，如果您有一个容器，它通常有自己的网络命名空间，并且运行在也有自己的网络命名空间的主机中。通过以太网连接进入该计算机的数据包将传统上遍历主机命名空间中的网络堆栈，然后通过虚拟以太网连接进入容器网络空间，然后再次进行处理。本质上，您最终可能会进行重复处理。&lt;/p&gt;&#xA;&lt;p&gt;使用 eBPF，我们可以聪明地只真正执行一次处理。事实上，有一个名为 netkit 的新功能，我们现在可以实现零开销网络，基本上绕过所有多余的网络处理开销，并从容器中获得与在主机上运行应用程序完全相同的网络性能— 与传统容器网络相比，性能有了相当大的飞跃。&lt;/p&gt;&#xA;&lt;p&gt;当我们处理数据包并决定将其发送到何处时，我们还可以对这些数据包应用安全策略等内容，因此它具有超高性能。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ebpf-at-grafana-labs-and-beyond&#34;&gt;Grafana Labs 及其他领域的 eBPF&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Tom：&lt;/strong&gt;我们在 Grafana 实验室使用 eBPF 做什么？&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Mario：&lt;/strong&gt;我们有几个使用 eBPF 的产品。其中之一是 Grafana Beyla，它将 eBPF 程序附加到操作系统的不同级别（包括网络堆栈），并且能够检测正在运行的应用程序、正在运行的服务，在不同的协议（服务和客户端）中，并提供应用程序级指标，例如每秒请求数、错误、持续时间等。对于 HTTP，它还能够使用路径、请求大小、返回代码等来修饰该信息。&lt;/p&gt;&#xA;&lt;p&gt;这样做的优点是您不需要修改应用程序或重新配置它们或重新部署它们。您让正在运行的应用程序在主机中部署 Grafana Beyla，并且由于 eBPF，这些部署在不同级别的小型 eBPF 程序将自动挂钩不同的应用程序事件并提供该信息。&lt;/p&gt;&#xA;&lt;p&gt;此外，Grafana 还有另一个名为 &lt;a href=&#34;/blog/2023/03/15/pyrscope-grafana-phlare-join-for-oss-continuous-profiling/?pg=blog&amp;plcmt=body-txt&#34;&gt; 的工具Pyrscope&lt;/a&gt;，它能够使用火焰图按功能分析应用程序的性能。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Tom&lt;/strong&gt;：为了确保我理解正确，Beyla 就像一个用 eBPF 编写的自动检测代理，您可以将其安装在计算机上。然后，您在该计算机上运行的任何内容都将自动从这些系统中获取丰富的指标和跟踪，而无需修改二进制文件。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;马里奥：&lt;/strong&gt;是的。这是一个用 go 编写的普通应用程序，用于加载这些 eBPF 程序。内核空间中的程序与用户空间中的Beyla进行通信，然后Beyla重建所有信息并将其发送。&lt;/p&gt;&#xA;&lt;p&gt;顺便说一句，它使用 Isovalent 的 Cilium eBPF 库。太棒了。我认为许多其他大型项目正在使用它们，因为它极大地方便了 eBPF 开发人员的生活。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Tom&lt;/strong&gt;：所以 Beyla 并不是镇上唯一的 eBPF 可观察性游戏。 Isovalent 和 Cilium 给可观测空间带来了什么？&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Liz：&lt;/strong&gt; Cilium 中有一个名为 &lt;a href=&#34;https://tetragon.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Tetragon&lt;/a&gt; 的子项目，这是安全可观察性和强制执行（可选）。因此，如果您有兴趣检测并可能阻止可疑的活动，那么这实际上侧重于观察某些安全策略之外的事件。&lt;/p&gt;&#xA;&lt;p&gt;真正好的事情之一是，在 Tetragon 中，我们可以过滤内核中的这些事件，并且只实际报告策略之外的事件。例如，很长一段时间以来，您一直能够使用 eBPF 来报告某人试图打开文件的情况。已经有基于 eBPF 的安全工具能够获取所有文件打开事件并在用户空间中过滤它们，这样您就可以说，“啊！有人试图打开您的 &lt;code&gt;/etc/shadow&lt;/code&gt; 文件，这似乎是个坏主意。”&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Tom：&lt;/strong&gt;对于我们的非技术听众来说，&lt;code&gt;/etc/shadow&lt;/code&gt; 是存储您的密码的位置。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;莉兹：&lt;/strong&gt;与四方，老鼠与传递有关每个文件访问的信息来查看它是否实际上是 &lt;code&gt;/etc/shadow&lt;/code&gt; 相比，我们可以在内核中的 eBPF 程序内部进行过滤，这使得它的效率大大提高。 &lt;/p&gt;&#xA;&lt;h2 id=&#34;good-news-for-platform-teams-and-application-developers&#34;&gt;平台团队（和应用开发者）的好消息&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Tom：&lt;/strong&gt;我认为我们已经看到了一种转变，大型组织内的应用程序开发人员不再需要担心他们的软件在哪里运行、如何安排、如何从硬件故障中恢复 - 所有这些各种各样的事情。借助 eBPF 自动检测，遥测收集和检测是否也成为平台的一项功能？&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;莉兹：&lt;/strong&gt;我认为这绝对是真的。我们在 Cilium 的进化过程中已经看到很多这样的情况。 Isovalent 的客户通常属于平台团队，他们有必须解决的网络需求。他们可能存在一些安全问题，需要他们或安全团队共同解决。&lt;/p&gt;&#xA;&lt;p&gt;您可以将如此多的内容嵌入到底层平台中，这样应用程序开发人员就不需要真正关心，并且他们可以向他们提供一项服务，使他们能够了解哪些服务正在与哪些其他服务进行通信服务，或者自动为您提供跨网络的加密连接。这些好处会自动向所有应用程序开发团队推出。&lt;/p&gt;&#xA;&lt;p&gt;能够观察应用程序的行为方式成为平台团队向开发团队提供的一项服务。我认为这是一个非常常见的模型。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Tom：&lt;/strong&gt;我想这样做的好处是它在整个组织中也变得更加一致，而不是每个应用程序团队都选择自己的供应商、自己的技术来进行自己的理解。在这些大型组织中，我们都必须和睦相处，现在我们都必须互相交谈——这也适用于我们的软件——整个团队拥有共同的可观察性、共同的网络、共同的安全标准是有点有用。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Liz：&lt;/strong&gt;如果您只在内核中进行检测，那么应用程序团队甚至不需要做任何工作。从本质上讲，这对他们来说是免费的。&lt;/p&gt;&#xA;&lt;h2 id=&#34;looking-ahead&#34;&gt;展望未来&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Tom：&lt;/strong&gt;Beyla 的未来会怎样，Cilium 和 eBPF 的未来会怎样？&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Mario：&lt;/strong&gt;对于 Beyla，我们有一些未来方向的主线。一是让即时检测变得更加自动化。部署已经非常简单，但我们仍然需要帮助一些用户变得更加简单。我们还希望获得有关某些语言和协议的更好信息。我们已经支持一些协议，例如 Kafka，但是我们想要添加其他消息队列、其他数据库等等。&lt;/p&gt;&#xA;&lt;p&gt;第三个实现路线是让 Beyla 以更低的权限运行 - 或者至少让用户能够说，“好吧，即使我失去了一些功能，我也想窃取一些功能”，因为有一些系统管理员仍然不愿意放弃程序管理能力。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Liz&lt;/strong&gt;：对于 eBPF，目前围绕验证者、威胁模型、安全模型、审核验证者等方面正在进行大量工作。我认为它引起了相当多的关注，特别是现在人们看到了直接访问操作系统内核的工具的危险。 eBPF 社区中的很多人都说，“eBPF 是一个很好的解决方案”，但我们可能需要更多的研究和安全分析才能真正让人们相信情况确实如此。&lt;/p&gt;&#xA;&lt;p&gt;有一件事我们没有提到，但我可能应该提到的是，Isovalent 于今年早些时候被思科收购。思科非常支持我们的团队继续在 Cilium 上投入时间。 Cilium 是一个云原生计算基金会项目。因为它是一个基金会拥有的项目，它是一个社区运行的项目，它不再是 Isovalent 的一个项目，但我们确实投入了大量的资源。因此，思科百分百支持我们继续这样做，这对我们所有人来说都很棒，对于该项目的未来也很棒。&lt;/p&gt;&#xA;&lt;p&gt;因此，Cilium 将继续不断发展壮大。我们非常关注诸如如何在云本机工作负载和已在本地环境中运行多年或数十年的工作负载之间无缝联网之类的问题。您希望能够访问这些内容并在它们与新奇的 Kubernetes 工作负载之间进行通信，因此这是我们目前关注的一个重要领域 - 显然是 Tetragon 以及我们为此提供的安全性。该技术的使用方式之一是思科正在构建的一款名为 Hyper Shield 的产品，该产品采用 eBPF 和一些奇特的人工智能技术，以及一些奇特的双数据平面技术。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Tom：&lt;/strong&gt;我们几乎在整个播客中都没有提到人工智能。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;莉兹：&lt;/strong&gt;抱歉，我在最后一栏失败了。不得不提的是AI！ &lt;em&gt;[笑]&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;“Grafana 的大帐篷”播客希望收到您的来信。如果您有精彩的故事要分享、想要加入对话或有任何反馈，请联系 Big Tent 团队：&lt;a href=&#34;/blog/2024/08/23/grafanas-big-tent-podcast-season -2-is-here/bigtent@grafana.com&#34;&gt;bigtent@grafana.com&lt;/a&gt;。您还可以在 &lt;a href=&#34;https://podcasts.apple.com/us/podcast/grafanas-big-tent/id1616725129&#34; target=&#34;_blank&#34; 上观看《Grafana&#39;s Big Tent》第一季和第二季rel=&#34;noopener noreferrer&#34;&gt;Apple Pod演员表&lt;/a&gt; 和 &lt;a href=&#34;https://open.spotify.com/show/3beQvS8to0rYs1gxOnP​​rfD?si=bf046f54fe214615&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Spotify&lt;/a&gt;。&lt;/em &gt;&lt;/p&gt;</description>
      <pubDate>Fri, 01 Nov 2024 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Visualize GitHub repos, projects, and more: get started with the GitHub data source for Grafana】可视化 GitHub 存储库、项目等：开始使用 Grafana 的 GitHub 数据源</title>
      <link>https://grafana.com/blog/2024/10/28/visualize-github-repos-projects-and-more-get-started-with-the-github-data-source-for-grafana/</link>
      <description>【&lt;p&gt;In 2020, we introduced the GitHub data source plugin for Grafana, helping organizations visualize and gain deeper insights into their use of the popular version control and collaboration platform.&lt;/p&gt;&#xA;&lt;p&gt;Since then, thousands of users have installed the data source, and we’ve been working hard to extend its capabilities and make it even easier to use. In this blog post, we’ll take a closer look at how the &lt;a href=&#34;/grafana/plugins/grafana-github-datasource/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;GitHub data source plugin&lt;/a&gt; enables you to visualize key metrics and data related to your team’s daily GitHub use, reported issues, and more. We’ll also review key features and recent updates, as well as some helpful resources to install and start using the data source today.&lt;/p&gt;&#xA;&lt;div&#xA;class=&#34;youtube-lazyload responsive-video&#34;&#xA;data-embed=&#34;DW693S3cO48&#34;&#xA;data-url=&#34;https://www.youtube.com/embed/DW693S3cO48?autoplay=1&amp;amp;rel=0&#34;&#xA;data-title=&#34;YouTube Video&#34;&#xA;&gt;&#xA;&lt;div class=&#34;play-button&#34;&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;h2 id=&#34;why-visualize-github-in-grafana&#34;&gt;Why visualize GitHub in Grafana&lt;/h2&gt;&#xA;&lt;p&gt;Whether you’re an SRE, DevOps engineer, system administrator or product manager, you need a development and version control platform to collaborate with your team on projects, report issues and bugs, track pull requests (PRs), and more. GitHub is one of the most widely used platforms to meet these needs, and has revolutionized code collaboration across the industry.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 680px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link captioned&#34;&#xA;href=&#34;/media/blog/github-data-source/github-data-source_github-screenshot.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload mb-0&#34;&#xA;data-src=&#34;/media/blog/github-data-source/github-data-source_github-screenshot.png&#34;data-srcset=&#34;/media/blog/github-data-source/github-data-source_github-screenshot.png?w=320 320w, /media/blog/github-data-source/github-data-source_github-screenshot.png?w=550 550w, /media/blog/github-data-source/github-data-source_github-screenshot.png?w=750 750w, /media/blog/github-data-source/github-data-source_github-screenshot.png?w=900 900w, /media/blog/github-data-source/github-data-source_github-screenshot.png?w=1040 1040w, /media/blog/github-data-source/github-data-source_github-screenshot.png?w=1240 1240w, /media/blog/github-data-source/github-data-source_github-screenshot.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;A screenshot of PRs in GitHub.&#34;&#xA;width=&#34;680&#34;&#xA;height=&#34;673&#34;&#xA;title=&#34;*Image source: https://github.com/features/issues*&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/github-data-source/github-data-source_github-screenshot.png&#34;&#xA;alt=&#34;A screenshot of PRs in GitHub.&#34;&#xA;width=&#34;680&#34;&#xA;height=&#34;673&#34;&#xA;title=&#34;*Image source: https://github.com/features/issues*&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;figcaption class=&#34;w-100p caption text-gray-13 &#34;&gt;&lt;em&gt;Image source: &lt;a href=&#34;https://github.com/features/issues&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;https://github.com/features/issues&lt;/a&gt;&lt;/em&gt;&lt;/figcaption&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;While GitHub is a powerful platform, allowing you to manage a range of tasks required for production-level projects, it can be a challenge to monitor the platform to ensure you’re meeting key requirements and deadlines. For example, your team might be solving all PRs reported internally within a defined timeframe, but what about PRs submitted by external users that relate to product usage or the overall end-user experience?&lt;/p&gt;&#xA;&lt;p&gt;Similarly, if you are an engineering manager or a product owner and need to work simultaneously on two different projects with multiple teams, it can be difficult to track how many issues the support team resolved after the launch of a new feature or, similarly, how many bugs were found during QA testing.&lt;/p&gt;&#xA;&lt;p&gt;While you can use the GitHub web UI to keep track of data and view repository status, that UI is somewhat limited, in terms of showing you all the data you need in one centralized location.&lt;/p&gt;&#xA;&lt;p&gt;This is the exact challenge we aim to solve with our GitHub data source plugin, which uses the GitHub API to fetch the required data defined in the query editor, and then display it in a Grafana dashboard.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 1257px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;/media/blog/github-data-source/github-data-source_dashboard-screenshot.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;/media/blog/github-data-source/github-data-source_dashboard-screenshot.png&#34;data-srcset=&#34;/media/blog/github-data-source/github-data-source_dashboard-screenshot.png?w=320 320w, /media/blog/github-data-source/github-data-source_dashboard-screenshot.png?w=550 550w, /media/blog/github-data-source/github-data-source_dashboard-screenshot.png?w=750 750w, /media/blog/github-data-source/github-data-source_dashboard-screenshot.png?w=900 900w, /media/blog/github-data-source/github-data-source_dashboard-screenshot.png?w=1040 1040w, /media/blog/github-data-source/github-data-source_dashboard-screenshot.png?w=1240 1240w, /media/blog/github-data-source/github-data-source_dashboard-screenshot.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;A screenshot of a Grafana dashboard using the GitHub data source.&#34;&#xA;width=&#34;1257&#34;&#xA;height=&#34;705&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/github-data-source/github-data-source_dashboard-screenshot.png&#34;&#xA;alt=&#34;A screenshot of a Grafana dashboard using the GitHub data source.&#34;&#xA;width=&#34;1257&#34;&#xA;height=&#34;705&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;The data source is maintained by Grafana Labs and is available in &lt;a href=&#34;/products/cloud/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Cloud&lt;/a&gt; (including in our generous forever-free tier), &lt;a href=&#34;/products/enterprise/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Enterprise&lt;/a&gt;, and &lt;a href=&#34;/oss/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana OSS&lt;/a&gt;. You can also use the GitHub data source whether you have a &lt;a href=&#34;https://github.com/pricing&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;free or Enterprise-level GitHub account&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;key-features-and-recent-updates&#34;&gt;Key features and recent updates&lt;/h2&gt;&#xA;&lt;p&gt;The GitHub data source plugin provides a range of features to help you quickly and easily visualize your GitHub activity. The plugin currently supports the following query types:&lt;/p&gt;&#xA;&lt;table&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;&lt;strong&gt;Query Type&lt;/strong&gt;&#xA;&lt;/td&gt;&#xA;&lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;Commits&#xA;&lt;/td&gt;&#xA;&lt;td&gt;View the number of commits that are made to one or more files in a branch&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;Issues&#xA;&lt;/td&gt;&#xA;&lt;td&gt;Track reported issues for bug fixes, feature requests, etc.&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;Contributors&#xA;&lt;/td&gt;&#xA;&lt;td&gt;View users who contributed to a GitHub repo&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;Tags&#xA;&lt;/td&gt;&#xA;&lt;td&gt;View references that point to specific points in Git history&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;Releases&#xA;&lt;/td&gt;&#xA;&lt;td&gt;See when software is released for deployment&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;Pull requests&#xA;&lt;/td&gt;&#xA;&lt;td&gt;Visualize the status of PRs, such as open or closed&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;Labels&#xA;&lt;/td&gt;&#xA;&lt;td&gt;See categories of issues, pull requests, discussions, etc.&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;Repositories&#xA;&lt;/td&gt;&#xA;&lt;td&gt;View different repos for different projects&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;Milestones&#xA;&lt;/td&gt;&#xA;&lt;td&gt;Track progress on groups of issues or PRs in a repository&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;Packages&#xA;&lt;/td&gt;&#xA;&lt;td&gt;View all available packages&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;Vulnerabilities&#xA;&lt;/td&gt;&#xA;&lt;td&gt;View any security vulnerabilities&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;Projects&#xA;&lt;/td&gt;&#xA;&lt;td&gt;Visualize projects (collections of data)&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;Stargazers&#xA;&lt;/td&gt;&#xA;&lt;td&gt;Visualize the GitHub stars in a repository&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;Workflows&#xA;&lt;/td&gt;&#xA;&lt;td&gt;Visualize GitHub workflows&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;Workflow usage&#xA;&lt;/td&gt;&#xA;&lt;td&gt;Monitor workflow usage limits&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;variables-and-macros&#34;&gt;Variables and macros&lt;/h3&gt;&#xA;&lt;p&gt;You can use variables in your dashboards and queries to make them more dynamic and interactive. Rather than having to hard-code options to query and visualize GitHub data, variables allow you to select a value from a drop-down to easily change the data being displayed.&lt;/p&gt;&#xA;&lt;p&gt;Similarly, you can use macros within query syntax to make queries more dynamic. For example, you can add the &lt;code&gt;multiVar&lt;/code&gt; macro to expand a multi-value variable into a GitHub query string, or use the &lt;code&gt;day&lt;/code&gt; macro to return the day in UTC time. Here’s an example of using the macro &lt;code&gt;$__multiVar(prefix,$var)&lt;/code&gt; in the Query field.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 1205px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;/media/blog/github-data-source/github-data-source_macros.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;/media/blog/github-data-source/github-data-source_macros.png&#34;data-srcset=&#34;/media/blog/github-data-source/github-data-source_macros.png?w=320 320w, /media/blog/github-data-source/github-data-source_macros.png?w=550 550w, /media/blog/github-data-source/github-data-source_macros.png?w=750 750w, /media/blog/github-data-source/github-data-source_macros.png?w=900 900w, /media/blog/github-data-source/github-data-source_macros.png?w=1040 1040w, /media/blog/github-data-source/github-data-source_macros.png?w=1240 1240w, /media/blog/github-data-source/github-data-source_macros.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;A screenshot showing a macro. &#34;&#xA;width=&#34;1205&#34;&#xA;height=&#34;354&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/github-data-source/github-data-source_macros.png&#34;&#xA;alt=&#34;A screenshot showing a macro. &#34;&#xA;width=&#34;1205&#34;&#xA;height=&#34;354&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;To learn more about variables and macros, refer to our &lt;a href=&#34;/docs/plugins/grafana-github-datasource/latest/variables-and-macros/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;technical docs&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h3 id=&#34;annotations&#34;&gt;Annotations&lt;/h3&gt;&#xA;&lt;p&gt;With annotations, you can overlay events on your graphs to provide team members with additional context when looking at a visualization. For example, with annotations for the GitHub data source plugin, you can display events related to GitHub commits, issues, PRs, releases and tags.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 1437px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;/media/blog/github-data-source/github-data-source_annotations.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;/media/blog/github-data-source/github-data-source_annotations.png&#34;data-srcset=&#34;/media/blog/github-data-source/github-data-source_annotations.png?w=320 320w, /media/blog/github-data-source/github-data-source_annotations.png?w=550 550w, /media/blog/github-data-source/github-data-source_annotations.png?w=750 750w, /media/blog/github-data-source/github-data-source_annotations.png?w=900 900w, /media/blog/github-data-source/github-data-source_annotations.png?w=1040 1040w, /media/blog/github-data-source/github-data-source_annotations.png?w=1240 1240w, /media/blog/github-data-source/github-data-source_annotations.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;A screenshot of annotations. &#34;&#xA;width=&#34;1437&#34;&#xA;height=&#34;349&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/github-data-source/github-data-source_annotations.png&#34;&#xA;alt=&#34;A screenshot of annotations. &#34;&#xA;width=&#34;1437&#34;&#xA;height=&#34;349&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;To learn more about annotations, check out our &lt;a href=&#34;/docs/plugins/grafana-github-datasource/latest/annotations/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h3 id=&#34;caching&#34;&gt;Caching&lt;/h3&gt;&#xA;&lt;p&gt;Caching for the GitHub data source is enabled by default. This stores query data temporarily and automatically fetches it if the same query is requested again, helping to reduce dashboard loading times and improve the user experience.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/em&gt;: &lt;em&gt;Caching reduces the number of calls made to GitHub via the API. However, if the queries are requested too rapidly, the &lt;a href=&#34;https://docs.github.com/en/rest/using-the-rest-api/rate-limits-for-the-rest-api&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;GitHub rate limit&lt;/a&gt; will apply, and it may take up to 5 minutes to return the query result.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;github-app-authentication&#34;&gt;GitHub App authentication&lt;/h3&gt;&#xA;&lt;p&gt;As part of a recent update, you can now authenticate the GitHub data source using a &lt;a href=&#34;https://docs.github.com/en/apps/creating-github-apps/registering-a-github-app/registering-a-github-app&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;GitHub App&lt;/a&gt;, providing an alternative to the classic &lt;a href=&#34;/docs/plugins/grafana-github-datasource/latest/setup/token/#creating-a-personal-access-token-classic&#34;&gt;personal access tokens (PATs)&lt;/a&gt;. GitHub App authentication offers enhanced security by granting more granular permissions and reducing the risk of over-permissioning.&lt;/p&gt;&#xA;&lt;p&gt;You can learn how to set up GitHub App authentication in our &lt;a href=&#34;/docs/plugins/grafana-github-datasource/latest/setup/token/#using-github-app-authentication&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;get-started-with-the-github-data-source-plugin&#34;&gt;Get started with the GitHub data source plugin&lt;/h2&gt;&#xA;&lt;p&gt;We offer &lt;a href=&#34;/docs/plugins/grafana-github-datasource/latest/setup/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;detailed, step-by-step documentation&lt;/a&gt; on how to install and configure the GitHub data source plugin. In addition, you can find &lt;a href=&#34;https://play.grafana.org/d/cdgx261sa1ypsa/github-single-repo-with-overrides&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;live, real-time examples of dashboards&lt;/a&gt; on the &lt;a href=&#34;https://play.grafana.org/d/bdnahipisghdsa/getting-started-with-grafana-play?from=now-1h&amp;amp;to=now&amp;amp;timezone=browser&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Grafana Play platform&lt;/a&gt; that help showcase usage of the plugin.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 1920px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;/media/blog/github-data-source/github-data-source_grafana-play-example-1.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;/media/blog/github-data-source/github-data-source_grafana-play-example-1.png&#34;data-srcset=&#34;/media/blog/github-data-source/github-data-source_grafana-play-example-1.png?w=320 320w, /media/blog/github-data-source/github-data-source_grafana-play-example-1.png?w=550 550w, /media/blog/github-data-source/github-data-source_grafana-play-example-1.png?w=750 750w, /media/blog/github-data-source/github-data-source_grafana-play-example-1.png?w=900 900w, /media/blog/github-data-source/github-data-source_grafana-play-example-1.png?w=1040 1040w, /media/blog/github-data-source/github-data-source_grafana-play-example-1.png?w=1240 1240w, /media/blog/github-data-source/github-data-source_grafana-play-example-1.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;A screenshot of GitHub data source resources on Grafana Play.&#34;&#xA;width=&#34;1920&#34;&#xA;height=&#34;1080&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/github-data-source/github-data-source_grafana-play-example-1.png&#34;&#xA;alt=&#34;A screenshot of GitHub data source resources on Grafana Play.&#34;&#xA;width=&#34;1920&#34;&#xA;height=&#34;1080&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Also on Grafana Play, you can &lt;a href=&#34;https://play.grafana.org/d/d5b56357-1a57-4821-ab27-16fdf79cab57/github3a-queries-and-multi-variables?from=now-24h&amp;amp;to=now&amp;amp;var-repo=grafana%2Fgrafana&amp;amp;var-repo=grafana%2Fk6&amp;amp;var-repo=grafana%2Floki&amp;amp;var-repo=grafana%2Fmimir&amp;amp;var-repo=grafana%2Ftempo&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;find examples&lt;/a&gt; of how to use the GitHub data source to fetch data about issues from repositories, as well as how to use multiple variable values in queries.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 1868px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;/media/blog/github-data-source/github-data-source_grafana-play-example-2.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;/media/blog/github-data-source/github-data-source_grafana-play-example-2.png&#34;data-srcset=&#34;/media/blog/github-data-source/github-data-source_grafana-play-example-2.png?w=320 320w, /media/blog/github-data-source/github-data-source_grafana-play-example-2.png?w=550 550w, /media/blog/github-data-source/github-data-source_grafana-play-example-2.png?w=750 750w, /media/blog/github-data-source/github-data-source_grafana-play-example-2.png?w=900 900w, /media/blog/github-data-source/github-data-source_grafana-play-example-2.png?w=1040 1040w, /media/blog/github-data-source/github-data-source_grafana-play-example-2.png?w=1240 1240w, /media/blog/github-data-source/github-data-source_grafana-play-example-2.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;A screenshot of the GitHub data source plugin from Grafana Play.&#34;&#xA;width=&#34;1868&#34;&#xA;height=&#34;650&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/github-data-source/github-data-source_grafana-play-example-2.png&#34;&#xA;alt=&#34;A screenshot of the GitHub data source plugin from Grafana Play.&#34;&#xA;width=&#34;1868&#34;&#xA;height=&#34;650&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Lastly, we have a collection of &lt;a href=&#34;/grafana/dashboards/?dataSource=grafana-github-datasource&#34;&gt;pre-configured dashboards for the GitHub data source&lt;/a&gt; on the Grafana dashboard marketplace, along with &lt;a href=&#34;/docs/plugins/grafana-github-datasource/latest/sample-dashboards/#use-pre-configured-dashboards&#34;&gt;step-by-step instructions&lt;/a&gt; on how to import them.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 1920px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;/media/blog/github-data-source/github-data-source_preconfigured-dashboard.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;/media/blog/github-data-source/github-data-source_preconfigured-dashboard.png&#34;data-srcset=&#34;/media/blog/github-data-source/github-data-source_preconfigured-dashboard.png?w=320 320w, /media/blog/github-data-source/github-data-source_preconfigured-dashboard.png?w=550 550w, /media/blog/github-data-source/github-data-source_preconfigured-dashboard.png?w=750 750w, /media/blog/github-data-source/github-data-source_preconfigured-dashboard.png?w=900 900w, /media/blog/github-data-source/github-data-source_preconfigured-dashboard.png?w=1040 1040w, /media/blog/github-data-source/github-data-source_preconfigured-dashboard.png?w=1240 1240w, /media/blog/github-data-source/github-data-source_preconfigured-dashboard.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;A screenshot of a pre-configured dashboard.&#34;&#xA;width=&#34;1920&#34;&#xA;height=&#34;1080&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/github-data-source/github-data-source_preconfigured-dashboard.png&#34;&#xA;alt=&#34;A screenshot of a pre-configured dashboard.&#34;&#xA;width=&#34;1920&#34;&#xA;height=&#34;1080&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;h2 id=&#34;want-to-get-involved&#34;&gt;Want to get involved?&lt;/h2&gt;&#xA;&lt;p&gt;We’d love your feedback on the GitHub data source plugin, and how we might improve it moving forward. Please try it out and let us know what you think, and also consider &lt;a href=&#34;https://github.com/grafana/github-datasource/issues&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;contributing&lt;/a&gt;! And again, if you want more information to help you get started, please check out our &lt;a href=&#34;/docs/plugins/grafana-github-datasource/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;technical docs&lt;/a&gt;.&lt;/p&gt;】&lt;p&gt;2020 年，我们推出了适用于 Grafana 的 GitHub 数据源插件，帮助组织可视化并更深入地了解他们对流行版本控制和协作平台的使用情况。&lt;/p&gt;&#xA;&lt;p&gt;从那时起，成千上万的用户安装了该数据源，我们一直在努力扩展其功能并使其更易于使用。在这篇博文中，我们将仔细了解 &lt;a href=&#34;/grafana/plugins/grafana-github-datasource/?pg=blog&amp;plcmt=body-txt&#34;&gt;GitHub 数据源插件&lt;/a&gt;如何启用您可以可视化与团队日常 GitHub 使用、报告的问题等相关的关键指标和数据。我们还将回顾主要功能和最近的更新，以及一些用于立即安装和开始使用数据源的有用资源。&lt;/p&gt;&#xA;&lt;div&#xA;类 =“youtube-lazyload 响应视频”&#xA;数据嵌入=“DW693S3cO48”&#xA;data-url=&#34;https://www.youtube.com/embed/DW693S3cO48?autoplay=1&amp;rel=0&#34;&#xA;数据标题=“YouTube 视频”&#xA;&gt;&#xA;&lt;div class=&#34;play-button&#34;&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;h2 id=&#34;why-visualize-github-in-grafana&#34;&gt;为什么在 Grafana 中可视化 GitHub&lt;/h2&gt;&#xA;&lt;p&gt;无论您是 SRE、DevOps 工程师、系统管理员还是产品经理，您都需要一个开发和版本控制平台来与您的团队在项目上进行协作、报告问题和错误、跟踪拉取请求 (PR) 等。 GitHub 是满足这些需求的最广泛使用的平台之一，并彻底改变了整个行业的代码协作。&lt;/p&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：680px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接标题”&#xA;href=&#34;/media/blog/github-data-source/github-data-source_github-screenshot.png&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“lazyload mb-0”&#xA;data-src =“/media/blog/github-data-source/github-data-source_github-screenshot.png”data-srcset =“/media/blog/github-data-source/github-data-source_github-screenshot。 png?w=320 320w，/media/blog/github-data-source/github-data-source_github-screenshot.png?w=550 550w， /media/blog/github-data-source/github-data-source_github-screenshot.png?w=750 750w, /media/blog/github-data-source/github-data-source_github-screenshot.png?w=900 900w，/media/blog/github-data-source/github-data-source_github-screenshot.png?w=1040 1040w， /media/blog/github-data-source/github-data-source_github-screenshot.png?w=1240 1240w，/media/blog/github-data-source/github-data-source_github-screenshot.png?w=1920 1920瓦”&#xA;data-sizes=&#34;auto&#34;alt=&#34;GitHub 中 PR 的屏幕截图。&#34;&#xA;宽度=“680”&#xA;高度=“673”&#xA;title=&#34;*图片来源：https://github.com/features/issues*&#34;&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src =“/media/blog/github-data-source/github-data-source_github-screenshot.png”&#xA;alt=&#34;GitHub 中 PR 的屏幕截图。&#34;&#xA;宽度=“680”&#xA;高度=“673”&#xA;title=&#34;*图片来源：https://github.com/features/issues*&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;figcaption class=&#34;w-100p title text-gray-13 &#34;&gt;&lt;em&gt;图片来源：&lt;a href=&#34;https://github.com/features/issues&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;https://github.com/features/issues&lt;/a&gt;&lt;/em&gt;&lt;/figcaption&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;p&gt;虽然 GitHub 是一个功能强大的平台，允许您管理生产级项目所需的一系列任务，但监控该平台以确保满足关键要求和截止日期可能是一项挑战。例如，您的团队可能会在规定的时间范围内解决内部报告的所有 PR，但是外部用户提交的与产品使用或整体最终用户体验相关的 PR 又如何呢？&lt;/p&gt;&#xA;&lt;p&gt;同样，如果您是工程经理或产品负责人，需要与多个团队同时处理两个不同的项目，则可能很难跟踪支持团队在推出新功能后解决了多少问题，或者，同样，在 QA 测试期间发现了多少错误。&lt;/p&gt;&#xA;&lt;p&gt;虽然您可以使用 GitHub Web UI 来跟踪数据并查看存储库状态，但该 UI 在向您在一个集中位置显示所需的所有数据方面存在一定限制。&lt;/p&gt;&#xA;&lt;p&gt;这正是我们旨在通过 GitHub 数据源插件解决的挑战，该插件使用 GitHub API 获取查询编辑器中定义的所需数据，然后将其显示在 Grafana 仪表板中。&lt;/p&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：1257px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接”&#xA;href=&#34;/media/blog/github-data-source/github-data-source_dashboard-screenshot.png&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“延迟加载”&#xA;data-src =“/media/blog/github-data-source/github-data-source_dashboard-screenshot.png”data-srcset =“/media/blog/github-data-source/github-data-source_dashboard-screenshot。 png?w=320 320w，/media/blog/github-data-source/github-data-source_dashboard-screenshot.png?w=550 550w，/media/blog/github-data-source/github-data-source_dashboard- Screenshot.png?w=750 750w，/media/blog/github-data-source/github-data-source_dashboard-screenshot.png?w=900 900w，/media/blog/github-data-source/github-data- source_dashboard-screenshot.png?w=1040 1040w，/media/blog/github-data-source/github-data-source_dashboard-screenshot.png?w=1240 1240w，/media/blog/github-data-source/github-数据源_仪表板-屏幕截图.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;使用 GitHub 数据源的 Grafana 仪表板的屏幕截图。&#34;&#xA;宽度=“1257”&#xA;高度=“705”&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src =“/media/blog/github-data-source/github-data-source_dashboard-screenshot.png”&#xA;alt=&#34;使用 GitHub 数据源的 Grafana 仪表板的屏幕截图。&#34;&#xA;宽度=“1257”&#xA;高度=“705”&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;p&gt;数据源由 Grafana Labs 维护，可在 &lt;a href=&#34;/products/cloud/?pg=blog&amp;plcmt=body-txt&#34;&gt;Grafana Cloud&lt;/a&gt; 中使用（包括我们慷慨的永久免费套餐） )、&lt;a href=&#34;/products/enterprise/?pg=blog&amp;plcmt=body-txt&#34;&gt;Grafana Enterprise&lt;/a&gt; 和 &lt;a href=&#34;/oss/?pg=blog&amp;plcmt=body-txt&#34;&gt;Grafana OSS&lt;/a&gt;。无论您是否拥有&lt;a href=&#34;https://github.com/pricing&#34; target=&#34;_blank，也可以使用 GitHub 数据源&#34; rel=&#34;noopener noreferrer&#34;&gt;免费或企业级 GitHub 帐户&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;key-features-and-recent-updates&#34;&gt;主要功能和最近更新&lt;/h2&gt;&#xA;&lt;p&gt;GitHub 数据源插件提供了一系列功能，可帮助您快速轻松地可视化 GitHub 活动。该插件目前支持以下查询类型：&lt;/p&gt;&#xA;&lt;表&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;&lt;strong&gt;查询类型&lt;/strong&gt;&#xA;&lt;/td&gt;&#xA;&lt;td&gt;&lt;strong&gt;描述&lt;/strong&gt;&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;提交&#xA;&lt;/td&gt;&#xA;&lt;td&gt;查看对分支中的一个或多个文件进行的提交次数&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;问题&#xA;&lt;/td&gt;&#xA;&lt;td&gt;跟踪报告的错误修复、功能请求等问题。&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;贡献者&#xA;&lt;/td&gt;&#xA;&lt;td&gt;查看为 GitHub 存储库做出贡献的用户&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;标签&#xA;&lt;/td&gt;&#xA;&lt;td&gt;查看指向 Git 历史记录中特定点的引用&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;发布&#xA;&lt;/td&gt;&#xA;&lt;td&gt;查看软件何时发布用于部署&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;拉取请求&#xA;&lt;/td&gt;&#xA;&lt;td&gt;可视化 PR 的状态，例如打开或关闭&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;标签&#xA;&lt;/td&gt;&#xA;&lt;td&gt;查看问题类别、拉取请求、讨论等。&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;存储库&#xA;&lt;/td&gt;&#xA;&lt;td&gt;查看不同项目的不同存储库&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;里程碑&#xA;&lt;/td&gt;&#xA;&lt;td&gt;跟踪存储库中问题组或 PR 的进度&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;套餐&#xA;&lt;/td&gt;&#xA;&lt;td&gt;查看所有可用的包&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;漏洞&#xA;&lt;/td&gt;&#xA;&lt;td&gt;查看任何安全漏洞&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;项目&#xA;&lt;/td&gt;&#xA;&lt;td&gt;可视化项目（数据集合）&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;观星者&#xA;&lt;/td&gt;&#xA;&lt;td&gt;可视化存储库中的 GitHub star&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;工作流程&#xA;&lt;/td&gt;&#xA;&lt;td&gt;可视化 GitHub 工作流程&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;工作流程使用&#xA;&lt;/td&gt;&#xA;&lt;td&gt;监控工作流程使用限制&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;/表&gt;&#xA;&lt;h3 id=&#34;variables-and-macros&#34;&gt;变量和宏&lt;/h3&gt;&#xA;&lt;p&gt;您可以在仪表板和查询中使用变量，使其更具动态性和交互性。变量允许您从下拉列表中选择一个值，从而轻松更改所显示的数据，而不必硬编码选项来查询和可视化 GitHub 数据。&lt;/p&gt;&#xA;&lt;p&gt;同样，您可以在查询语法中使用宏来使查询更加动态。例如，您可以添加 &lt;code&gt;multiVar&lt;/code&gt; 宏将多值变量扩展为 GitHub 查询字符串，或使用 &lt;code&gt;day&lt;/code&gt; 宏返回 UTC 时间的日期。以下是在查询字段中使用宏 &lt;code&gt;$__multiVar(prefix,$var)&lt;/code&gt; 的示例。&lt;/p&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：1205px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接”&#xA;href=&#34;/media/blog/github-data-source/github-data-source_macros.png&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“延迟加载”&#xA;数据-src =“/媒体/博客/github-data-source/github-data-source_macros.png&#34;data-srcset=&#34;/media/blog/github-data-source/github-data-source_macros.png?w=320 320w, /media/blog/github -data-source/github-data-source_macros.png?w=550 550w，/media/blog/github-data-source/github-data-source_macros.png?w=750 750w，/media/blog/github-data-source/github-data-source_macros.png？w=900 900w，/media/blog/github-data-source/github-data-source_macros.png？w=1040 1040w， /media/blog/github-data-source/github-data-source_macros.png?w=1240 1240w, /media/blog/github-data-source/github-data-source_macros.png?w=1920 1920w&#34;&#xA;data-size=&#34;auto&#34;alt=&#34;显示宏的屏幕截图。&#34;&#xA;宽度=“1205”&#xA;高度=“354”&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src =“/media/blog/github-data-source/github-data-source_macros.png”&#xA;alt=&#34;显示宏的屏幕截图。&#34;&#xA;宽度=“1205”&#xA;高度=“354”&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;p&gt;要了解有关变量和宏的更多信息，请参阅我们的&lt;a href=&#34;/docs/plugins/grafana-github-datasource/latest/variables-and-macros/?pg=blog&amp;plcmt=body-txt&#34;&gt;技术文档&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h3 id=&#34;annotations&#34;&gt;注释&lt;/h3&gt;&#xA;&lt;p&gt;通过注释，您可以在图表上叠加事件，以便在查看可视化效果时为团队成员提供额外的上下文。例如，通过 GitHub 数据源插件的注释，您可以显示与 GitHub 提交、问题、PR、发布和标签相关的事件。&lt;/p&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：1437px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接”&#xA;href=&#34;/media/blog/github-data-source/github-data-source_annotations.png&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“延迟加载”&#xA;data-src=&#34;/media/blog/github-data-source/github-data-source_annotations.png&#34;data-srcset=&#34;/media/blog/github-data-source/github-data-source_annotations.png?w= 320 320w，/media/blog/github-data-source/github-data-source_annotations.png?w=550 550w， /media/blog/github-data-source/github-data-source_annotations.png?w=750 750w, /media/blog/github-data-source/github-data-source_annotations.png?w=900 900w, /media /blog/github-data-source/github-data-source_annotations.png?w=1040 1040w, /media/blog/github-data-source/github-data-source_annotations.png?w=1240 1240w，/media/blog/github-data-source/github-data-source_annotations.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;注释的屏幕截图。&#34;&#xA;宽度=“1437”&#xA;高度=“349”&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src =“/media/blog/github-data-source/github-data-source_annotations.png”&#xA;alt=&#34;注释的屏幕截图。&#34;&#xA;宽度=“1437”&#xA;高度=“349”&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;p&gt;要了解有关注释的更多信息，请查看我们的&lt;a href=&#34;/docs/plugins/grafana-github-datasource/latest/annotations/?pg=blog&amp;plcmt=body-txt&#34;&gt;文档&lt;/a&gt;。&lt;/ p&gt;&#xA;&lt;h3 id=&#34;caching&#34;&gt;缓存&lt;/h3&gt;&#xA;&lt;p&gt;默认情况下启用 GitHub 数据源的缓存。这会临时存储查询数据，并在再次请求相同查询时自动获取数据，从而帮助减少仪表板加载时间并改善用户体验。&lt;/p&gt;&#xA;&lt;块引用&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/em&gt;：&lt;em&gt;缓存减少了通过 API 对 GitHub 进行的调用次数。但是，如果查询请求太快，&lt;a href=&#34;https://docs.github.com/en/rest/using-the-rest-api/rate-limits-for-the-rest-api&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;GitHub 速率限制&lt;/a&gt;将适用，最多可能需要 5 分钟才能返回查询结果。&lt;/em&gt;&lt;/p&gt;&#xA;&lt;/块引用&gt;&#xA;&lt;h3 id=&#34;github-app-authentication&#34;&gt;GitHub 应用身份验证&lt;/h3&gt;&#xA;&lt;p&gt;作为最近更新的一部分，您现在可以使用 &lt;a href=&#34;https://docs.github.com/en/apps/creating-github-apps/registering-a-github 对 GitHub 数据源进行身份验证-app/registering-a-github-app&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;GitHub App&lt;/a&gt;，提供经典 &lt;a href=&#34;/docs/plugins/grafana-github- 的替代方案datasource/latest/setup/token/#creating-a-personal-access-token-classic&#34;&gt;个人访问令牌 (PAT)&lt;/a&gt;。 GitHub 应用程序身份验证通过授予更精细的权限并降低过度许可的风险来增强安全性。&lt;/p&gt;&#xA;&lt;p&gt;您可以在我们的&lt;a href=&#34;/docs/plugins/grafana-github-datasource/latest/setup/token/#using-github-app-authentication&#34;&gt;文档中了解如何设置 GitHub 应用程序身份验证&lt;/一个&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;get-started-with-the-github-data-source-plugin&#34;&gt;开始使用 GitHub 数据源插件&lt;/h2&gt;&#xA;&lt;p&gt;我们提供&lt;a href=&#34;/docs/plugins/grafana-github-datasource/latest/setup/?pg=blog&amp;plcmt=body-txt&#34;&gt;详细的分步文档&lt;/a&gt;，介绍如何安装并配置 GitHub 数据源插件。此外，您还可以找到&lt;a href=&#34;https://play.grafana.org/d/cdgx261sa1ypsa/github-single-repo-with-overrides&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;实时、真实的- &lt;a href=&#34;https://play.grafana.org/d/bdnahipisghdsa/getting-started-with-grafana-play?from=now-1h&amp;to=now&amp;timezone=browser&#34; 上的仪表板时间示例&lt;/a&gt; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Grafana Play 平台&lt;/a&gt;，帮助展示插件的使用情况。&lt;/p&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：1920px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接”&#xA;href=&#34;/media/blog/github-data-source/github-data-source_grafana-play-example-1.png&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“延迟加载”&#xA;data-src=&#34;/media/blog/github-data-source/github-data-source_grafana-play-example-1.png&#34;data-srcset=&#34;/media/blog/github-data-source/github-data- source_grafana-play-example-1.png?w=320 320w，/media/blog/github-data-source/github-data-source_grafana-play-example-1.png?w=550 550w，/media/blog/ github-data-source/github-data-source_grafana-play-example-1.png?w=750 750w，/media/blog/github-data-source/github-data-source_grafana-play-example-1.png？ w=900 900w，/media/blog/github-data-source/github-data-source_grafana-play-example-1.png?w=1040 1040w，/media/blog/github-data-source/github-data-source_grafana-play-example-1.png?w=1240 1240w，/media/blog/github-data-source/github-data-source_grafana-play -example-1.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;Grafana Play 上 GitHub 数据源资源的屏幕截图。&#34;&#xA;宽度=“1920”&#xA;高度=“1080”&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src =“/media/blog/github-data-source/github-data-source_grafana-play-example-1.png”&#xA;alt=&#34;Grafana Play 上 GitHub 数据源资源的屏幕截图。&#34;&#xA;宽度=“1920”&#xA;高度=“1080”&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;p&gt;此外，在 Grafana Play 上，您还可以&lt;a href=&#34;https://play.grafana.org/d/d5b56357-1a57-4821-ab27-16fdf79cab57/github3a-queries-and-multi-variables?from=now-24h&amp;to=no w&amp;var-repo=grafana%2Fgrafana&amp;var-repo=grafana%2Fk6&amp;var-repo=grafana%2Floki&amp;var-repo=grafana%2Fmimir&amp;var-repo=grafana%2Ftempo&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;查找示例&lt;/a&gt;，了解如何使用 GitHub 数据源从存储库获取有关问题的数据，以及如何在查询中使用多个变量值。&lt;/p&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：1868px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接”&#xA;href=&#34;/media/blog/github-data-source/github-data-source_grafana-play-example-2.png&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“延迟加载”&#xA;data-src=&#34;/media/blog/github-data-source/github-data-source_grafana-play-example-2.png&#34;data-srcset=&#34;/media/blog/github-data-source/github-data- source_grafana-play-example-2.png?w=320 320w，/media/blog/github-data-source/github-data-source_grafana-play-example-2.png?w=550 550w，/media/blog/github-data-source/github-data-source_grafana-play-example-2.png?w=750 750w，/media/blog/github-data-source/github-data-source_grafana-play -example-2.png?w=900 900w, /media/blog/github-data-source/github-data-source_grafana-play-example-2.png?w=1040 1040w，/media/blog/github-data-source/github-data-source_grafana-play-example -2.png?w=1240 1240w, /media/blog/github-data-source/github-data-source_grafana-play-example-2.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;Grafana Play 的 GitHub 数据源插件的屏幕截图。&#34;&#xA;宽度=“1868”&#xA;高度=“650”&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src =“/media/blog/github-data-source/github-data-source_grafana-play-example-2.png”&#xA;alt=&#34;Grafana Play 的 GitHub 数据源插件的屏幕截图。&#34;&#xA;宽度=“1868”&#xA;高度=“650”&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;p&gt;最后，我们在 Grafana 仪表板市场上收集了一系列&lt;a href=&#34;/grafana/dashboards/?dataSource=grafana-github-datasource&#34;&gt;针对 GitHub 数据源的预配置仪表板&lt;/a&gt;，以及以及关于如何操作的&lt;a href=&#34;/docs/plugins/grafana-github-datasource/latest/sample-dashboards/#use-pre-configured-dashboards&#34;&gt;分步说明&lt;/a&gt;导入它们。&lt;/p&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：1920px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;我temtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接”&#xA;href=&#34;/media/blog/github-data-source/github-data-source_preconfigured-dashboard.png&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“延迟加载”&#xA;data-src =“/media/blog/github-data-source/github-data-source_preconfigured-dashboard.png”data-srcset =“/media/blog/github-data-source/github-data-source_preconfigured-dashboard。 png?w=320 320w，/media/blog/github-data-source/github-data-source_preconfigured-dashboard.png?w=550 550w， /media/blog/github-data-source/github-data-source_preconfigured-dashboard.png?w=750 750w，/media/blog/github-data-source/github-data-source_preconfigured-dashboard.png?w=900 900w，/media/blog/github-data-source/github-data-source_preconfigured-dashboard.png?w=1040 1040w， /media/blog/github-data-source/github-data-source_preconfigured-dashboard.png?w=1240 1240w，/media/blog/github-data-source/github-data-source_preconfigured-dashboard.png?w=1920 1920瓦”&#xA;data-sizes=&#34;auto&#34;alt=&#34;预配置仪表板的屏幕截图。&#34;&#xA;宽度=“1920”&#xA;高度=“1080”&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src =“/media/blog/github-data-source/github-data-source_preconfigured-dashboard.png”&#xA;alt=&#34;预配置仪表板的屏幕截图。&#34;&#xA;宽度=“1920”&#xA;高度=“1080”&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;h2 id=&#34;want-to-get-involved&#34;&gt;想参与其中吗？&lt;/h2&gt;&#xA;&lt;p&gt;我们希望收到您对 GitHub 数据源插件的反馈，以及我们今后如何改进它。请尝试一下，让我们知道您的想法，并考虑&lt;a href=&#34;https://github.com/grafana/github-datasource/issues&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;贡献&lt; /a&gt;!再次强调，如果您需要更多信息来帮助您入门，请查看我们的&lt;a href=&#34;/docs/plugins/grafana-github-datasource/?pg=blog&amp;plcmt=body-txt&#34;&gt;技术文档&lt;/a&gt; .&lt;/p&gt;</description>
      <pubDate>Mon, 28 Oct 2024 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Grafana dashboards are now powered by Scenes: big changes, same UI】Grafana 仪表板现在由场景提供支持：重大变化，相同的 UI</title>
      <link>https://grafana.com/blog/2024/10/31/grafana-dashboards-are-now-powered-by-scenes-big-changes-same-ui/</link>
      <description>【&lt;p&gt;Though you might not immediately notice it the next time you log in, Grafana&amp;rsquo;s frontend has undergone a major upgrade. We recently migrated our dashboard architecture to utilize the &lt;a href=&#34;/developers/scenes/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Scenes library&lt;/a&gt;, enabling the creation of more stable, dynamic, and flexible Scenes-powered dashboards.&lt;/p&gt;&#xA;&lt;p&gt;Yes, the UI is pretty much the same, but under the hood, the engine responsible for visualizing the dashboards used by millions of people around the world has largely been rewritten. In this post, I’ll explain why we made this change, how this new architecture works, and how it helps everyone (us and you!) get more out of dashboards. Plus, we’ll talk about the new possibilities this migration will open up in the future.&lt;/p&gt;&#xA;&lt;h2 id=&#34;why-we-migrated-to-scenes-to-power-grafana-dashboards&#34;&gt;Why we migrated to Scenes to power Grafana dashboards&lt;/h2&gt;&#xA;&lt;p&gt;Anyone who has gone through a migration knows they&amp;rsquo;re often challenging and costly. So why did we decide to do one?&lt;/p&gt;&#xA;&lt;p&gt;Well, the Grafana project had &lt;a href=&#34;/blog/2024/02/12/the-story-of-grafana-documentary-from-one-developers-dream-to-20-million-users-worldwide/&#34;&gt;10 years under its belt&lt;/a&gt;! A decade of code would represent a lot of change for any organization, but it&amp;rsquo;s especially challenging with an open source project. Behind the scenes, we had to navigate webs of complexity in critical components, and there were lots of great feature requests we received over the years that we simply couldn&amp;rsquo;t implement.&lt;/p&gt;&#xA;&lt;p&gt;For instance, we would hear requests from people who create and edit dashboards like:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Can we support multiple different time ranges on a dashboard?&lt;/li&gt;&#xA;&lt;li&gt;What about multiple different sets of nested variable scopes, such as variables on row and panel levels that depend on variables defined on a higher level?&lt;/li&gt;&#xA;&lt;li&gt;Can we create groups and hierarchies for panels and rows? Can we arrange panels into tabs?&lt;/li&gt;&#xA;&lt;li&gt;What about displaying annotations for just one row or panel?&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;And our answers were always something like:&lt;/p&gt;&#xA;&lt;p&gt;“We could… but hacking things to make those features would impact the stability of the product, which means more bugs in the long run for you and increased degradation in user experience :(”&lt;/p&gt;&#xA;&lt;p&gt;Of course, we knew this wasn’t a great answer, and we needed to come up with a solution.&lt;/p&gt;&#xA;&lt;h3 id=&#34;the-journey-of-the-grafana-scenes-library&#34;&gt;The journey of the Grafana Scenes library&lt;/h3&gt;&#xA;&lt;p&gt;At first, we wanted to burn it all down and start over again! But that wasn’t going to work because, as &lt;a href=&#34;https://en.wikipedia.org/wiki/Law_of_conservation_of_complexity&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Tesler&amp;rsquo;s Law&lt;/a&gt; states, complexity can’t be removed—it can only be moved around.&lt;/p&gt;&#xA;&lt;p&gt;So, we created the Grafana Scenes library to move the complexity of the engine that visualizes dashboards somewhere else. In essence, Scenes is a frontend library that provides an intuitive, declarative API that allows developers to build dynamic dashboarding experiences. (You can read more about Scenes in &lt;a href=&#34;/blog/2023/09/12/grafana-scenes-is-generally-available-start-building-highly-interactive-apps-today/&#34;&gt;this blog about the library becoming generally available&lt;/a&gt;.)&lt;/p&gt;&#xA;&lt;p&gt;The Scenes library was also born to serve two main user groups:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Plugin developers&lt;/strong&gt;, who build dashboard-like experiences (applications) and don’t need deep knowledge of Grafana&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Grafana dashboard developers&lt;/strong&gt;, who manage the core dashboard visualization engine.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The following timeline describes the Scenes library&amp;rsquo;s journey:&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 960px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;/media/blog/scenes-migration/migration-timeline.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;/media/blog/scenes-migration/migration-timeline.png&#34;data-srcset=&#34;/media/blog/scenes-migration/migration-timeline.png?w=320 320w, /media/blog/scenes-migration/migration-timeline.png?w=550 550w, /media/blog/scenes-migration/migration-timeline.png?w=750 750w, /media/blog/scenes-migration/migration-timeline.png?w=900 900w, /media/blog/scenes-migration/migration-timeline.png?w=1040 1040w, /media/blog/scenes-migration/migration-timeline.png?w=1240 1240w, /media/blog/scenes-migration/migration-timeline.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;Timeline diagram&#34;&#xA;width=&#34;960&#34;&#xA;height=&#34;540&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/scenes-migration/migration-timeline.png&#34;&#xA;alt=&#34;Timeline diagram&#34;&#xA;width=&#34;960&#34;&#xA;height=&#34;540&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;h2 id=&#34;how-we-migrated-the-grafana-core-dashboards-to-utilize-scenes&#34;&gt;How we migrated the Grafana core dashboards to utilize Scenes&lt;/h2&gt;&#xA;&lt;p&gt;At the start of the migration project in January 2023, we agreed that the best way to fully benefit from the Scenes library was to replace the core dashboard code completely, creating a new dashboard runtime built on Scenes.&lt;/p&gt;&#xA;&lt;p&gt;We went into the project with these guideposts:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Reuse what works:&lt;/strong&gt; Although our goal was to replace the core dashboard code, we recognized that some UI components could be reused. This approach helped us save time and avoid reinventing features that already functioned well—for example, UI components that managed annotation settings, variable settings, all data source query editors, and similar functions.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Lean on Scenes for core features:&lt;/strong&gt; Since Scenes already handles essentials like templating, querying, data transformation, layout, and rendering, we focused on integrating these rather than starting from scratch.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Feature parity first:&lt;/strong&gt; Our top priority was ensuring the new dashboard completely matched the functionality of the old one before we went ahead with any fancy upgrades. Minor UI improvements were OK as long as they didn’t slow us down.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;migration-stages&#34;&gt;Migration stages&lt;/h3&gt;&#xA;&lt;h5 id=&#34;feature-parity-stage&#34;&gt;Feature parity stage&lt;/h5&gt;&#xA;&lt;p&gt;With feature parity as our guiding star, we kept the old and new architectures running in parallel using feature toggles (&lt;code&gt;dashboardScene&lt;/code&gt; and &lt;code&gt;dashboardSceneForViewers&lt;/code&gt;). By May 3 of this year, our team—10 engineers, an engineering manager, a technical writer, and a product owner—had hit this milestone, allowing us to launch the new &lt;code&gt;dashboardScene&lt;/code&gt; as a public preview in Grafana version 11.&lt;/p&gt;&#xA;&lt;h5 id=&#34;phased-rollout-stage-with-rolling-release-channels&#34;&gt;Phased rollout stage with rolling release channels&lt;/h5&gt;&#xA;&lt;p&gt;To bring &lt;code&gt;dashboardScene&lt;/code&gt; to cloud users, we followed Grafana Labs&amp;rsquo; &lt;a href=&#34;/docs/rolling-release/&#34;&gt;rolling release strategy&lt;/a&gt;, which essentially looks like this:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;We started by bringing the migration to tests and canary instances.&lt;/li&gt;&#xA;&lt;li&gt;After no more issues were found, we began to roll out &lt;code&gt;dashboardScene&lt;/code&gt; incrementally across production instances by channels (fast, instant, steady).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Of course, as you can imagine, this phase was challenging for the team. Our day-to-day workflow looked something like this:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Wake up and get caffeinated. ☕&lt;/li&gt;&#xA;&lt;li&gt;Check user feedback, bug reports, and escalate issues (&lt;em&gt;try not to cry&lt;/em&gt;).&lt;/li&gt;&#xA;&lt;li&gt;Triage and prioritize fixes based on urgency (&lt;em&gt;full&lt;/em&gt; &lt;em&gt;teamwork&lt;/em&gt;).&lt;/li&gt;&#xA;&lt;li&gt;Fix bugs, investigate quirks, and report blockers. (try to &lt;em&gt;feel hopeful&lt;/em&gt;)&lt;/li&gt;&#xA;&lt;li&gt;Rinse, sleep, repeat.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;By October, after five months of doing this, we had rolled out &lt;code&gt;dashboardScene&lt;/code&gt; to 85% of Grafana Cloud users, marking the migration ready for our on-prem users.&lt;/p&gt;&#xA;&lt;p&gt;Then, on October 22, with the release of Grafana v11.3.0 ( both OSS and Enterprise), we made several features previously hidden behind toggles generally available (GA) for our on-prem users. These feature toggles include, in no particular order: &lt;code&gt;dashboardSceneForViewers&lt;/code&gt;, &lt;code&gt;dashboardScene&lt;/code&gt;, &lt;code&gt;dashboardSceneSolo&lt;/code&gt;, and &lt;code&gt;publicDashboardsScene&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;how-the-migration-will-help-usand-what-it-means-for-you&#34;&gt;How the migration will help us—and what it means for you&lt;/h2&gt;&#xA;&lt;p&gt;As I mentioned previously, this new framework comes with lots of benefits. First, let’s walk through how this migration will affect you, our users.&lt;/p&gt;&#xA;&lt;h3 id=&#34;new-framework-same-ui&#34;&gt;New framework, same UI&lt;/h3&gt;&#xA;&lt;p&gt;At first glance, Grafana users won&amp;rsquo;t notice much impact at all from this migration. And that&amp;rsquo;s a good thing! Consistency is one of the key principles of good re-architecting, and we made sure that the new dashboard experience essentially felt the same as the old one.&lt;/p&gt;&#xA;&lt;p&gt;That said, we have made some small UI improvements, including:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Edit mode:&lt;/strong&gt; When editing a dashboard, users will see a new &lt;code&gt;Edit&lt;/code&gt; button in the toolbar. We noticed it was sometimes hard to efficiently navigate through all the visual options during the dashboard editing process, but with Edit mode we&amp;rsquo;re providing an easier way to discover and interact with the dashboard editing experience.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Fixed positioning of template variables and time picker:&lt;/strong&gt; We moved the time picker into the dashboard canvas and now, together with template variables, it will stick to the top as you scroll through your dashboard. This has historically been a highly &lt;a href=&#34;https://github.com/grafana/grafana/issues/11166&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;requested feature&lt;/a&gt; that we’re happy to finally roll out for the community.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div&#xA;class=&#34;youtube-lazyload responsive-video&#34;&#xA;data-embed=&#34;kcKwBhvrsHc&#34;&#xA;data-url=&#34;https://www.youtube.com/embed/kcKwBhvrsHc?autoplay=1&amp;amp;rel=0&#34;&#xA;data-title=&#34;YouTube Video&#34;&#xA;&gt;&#xA;&lt;div class=&#34;play-button&#34;&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;But overall, Scenes-powered dashboards will look a lot like the old dashboards. So don&amp;rsquo;t worry, the same Grafana you know will continue to operate the way you expect. And if you’re curious about how a dashboard will look in this new setup, you can test it out yourself in Grafana Play. Click &lt;a href=&#34;https://play.grafana.org/d/bf26a4fb-4c49-44b7-a9f2-8f6f57b4c847/kube-state-metrics-home?orgId=1&amp;amp;refresh=30s&amp;amp;var-datasource=grafanacloud-play-prom&amp;amp;var-cluster=play-db-cluster&amp;amp;var-instance=gke-raintank-dev-pla-raintank-dev-pla-92dee7ce-joec&amp;amp;var-lokids=ddhr3fttaw8aod&amp;amp;scenes=false&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;here&lt;/a&gt; to see the old architecture, and then go &lt;a href=&#34;https://play.grafana.org/d/bf26a4fb-4c49-44b7-a9f2-8f6f57b4c847/kube-state-metrics-home?orgId=1&amp;amp;refresh=30s&amp;amp;var-datasource=grafanacloud-play-prom&amp;amp;var-cluster=play-db-cluster&amp;amp;var-instance=gke-raintank-dev-pla-raintank-dev-pla-92dee7ce-joec&amp;amp;var-lokids=ddhr3fttaw8aod&amp;amp;scenes&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;here&lt;/a&gt; to see the new one.&lt;/p&gt;&#xA;&lt;p&gt;Last but not least, the &amp;ldquo;Services loading&amp;rdquo; screen that our users frequently saw when loading a dashboard has been removed. Now users will see the dashboards quickly because our variables are run in the background.&lt;/p&gt;&#xA;&lt;h3 id=&#34;are-there-more-enhancements-post-migration-oh-yes&#34;&gt;Are there more enhancements post-migration? Oh yes!&lt;/h3&gt;&#xA;&lt;p&gt;There are some additional user benefits that have come from this migration as well. For example, Grafana Enterprise customers will notice some huge improvements in PDF exports thanks to a &lt;a href=&#34;https://github.com/grafana/grafana-enterprise/issues/6104&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;new architecture for PDF generation&lt;/a&gt;:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Small dashboards&lt;/strong&gt; (4 panels): Generation time was reduced from 11.87s to 7.07s&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Medium dashboards&lt;/strong&gt; (11 panels): Generation time was reduced from 25s to 6.3s&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Large dashboards&lt;/strong&gt; (200 panels): Generation time was reduced from 7.5min to 11s&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;This refactor also resolved issues with rendering reports containing repeated panels or rows. If you want to try it out, enable the &lt;code&gt;newPDFRendering&lt;/code&gt; feature toggle together with the &lt;code&gt;dashboardScene&lt;/code&gt; toggle.&lt;/p&gt;&#xA;&lt;p&gt;Other enhancements and bug fixes include:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;A new URL &lt;code&gt;timezone&lt;/code&gt; parameter lets users &lt;a href=&#34;https://github.com/grafana/grafana/issues/81538&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;set the dashboard time zone&lt;/a&gt; using a Grafana URL.&lt;/li&gt;&#xA;&lt;li&gt;Kiosk mode now supports showing template variables and dashboard controls &lt;a href=&#34;https://github.com/grafana/grafana/issues/20176&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;by default&lt;/a&gt;; however, users can configure them to be hidden.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/grafana/grafana-enterprise/issues/1429&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Added support&lt;/a&gt; for the &lt;strong&gt;All&lt;/strong&gt; option in repeating panels.&lt;/li&gt;&#xA;&lt;li&gt;Fixed an issue where users &lt;a href=&#34;https://github.com/grafana/grafana/issues/59293&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;couldn’t add&lt;/a&gt; an existing dashboard to the &lt;strong&gt;General&lt;/strong&gt; folder.&lt;/li&gt;&#xA;&lt;li&gt;Fixed issues with &lt;a href=&#34;https://github.com/grafana/support-escalations/issues/8454&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;repeated panels&amp;rsquo; positioning&lt;/a&gt; in dashboards.&lt;/li&gt;&#xA;&lt;li&gt;Fixed missing &lt;strong&gt;Unsaved changes&lt;/strong&gt; dialog when clicking on &lt;strong&gt;Explore&lt;/strong&gt; &lt;a href=&#34;https://github.com/grafana/grafana/issues/80415&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;from a new dashboard&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;current-known-limitations&#34;&gt;Current known limitations&lt;/h3&gt;&#xA;&lt;p&gt;The main limitation that we’re currently aware of is that the &lt;a href=&#34;/docs/grafana/latest/dashboards/variables/inspect-variable/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;manage and inspect variables&lt;/a&gt; are not yet available. We’ll be working on better understanding how this feature was used and how to best implement it in our new architecture.&lt;/p&gt;&#xA;&lt;h3 id=&#34;better-workflows-are-helping-us-the-maintainers-of-the-dashboard-engine&#34;&gt;Better workflows are helping us, the maintainers of the dashboard engine&lt;/h3&gt;&#xA;&lt;p&gt;When we switched to this new &lt;code&gt;dashboardScene&lt;/code&gt; architecture, we noticed several ways it would benefit us internally:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;First, the Scenes library manages the new dashboard architecture like a tree, allowing quick access to different parts—visualizations, variables, queries, and time ranges—without depending on the visual components being displayed.&lt;/li&gt;&#xA;&lt;li&gt;Because the state is no longer tied to the components, we could preserve data between different components. This meant we could avoid queries being re-run when React components are unmounted.&lt;/li&gt;&#xA;&lt;li&gt;We could reuse all our &lt;a href=&#34;/developers/scenes/visualizations?pg=blog&amp;amp;plcmt=body-txt#standard-grafana-visualizations&#34;&gt;existing visualizations&lt;/a&gt; without having to rewrite anything when migrating the dashboard to use Scenes.&lt;/li&gt;&#xA;&lt;li&gt;While working with this migration, we saw our internal engineering culture changing. We established better testing practices, gained knowledge of features that in the past few people knew about, and gained resilience and expertise in migrations&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Ultimately, this helps us bring more value to our users, as it gives us the ability to implement things quickly and efficiently in the future.&lt;/p&gt;&#xA;&lt;h2 id=&#34;a-quick-look-at-the-new-architecture&#34;&gt;A quick look at the new architecture&lt;/h2&gt;&#xA;&lt;p&gt;I won’t go too deep into the technical details of the Scenes library itself, which you can learn more about &lt;a href=&#34;/developers/scenes/core-concepts&#34;&gt;here&lt;/a&gt;. Instead, I want to briefly illustrate, in simple terms, how the Scenes library is being used in &lt;strong&gt;dashboards,&lt;/strong&gt; the core element of Grafana, from a coding perspective.&lt;/p&gt;&#xA;&lt;h3 id=&#34;old-and-new-architecture-the-dashboard-json-is-still-the-source-of-truth&#34;&gt;Old and new architecture: The dashboard JSON is still the source of truth&lt;/h3&gt;&#xA;&lt;p&gt;The source of truth for Grafana dashboards has always been a dashboard JSON. These files include the representation of panels, template variables, time ranges, and anything that can describe how a dashboard should look.&lt;/p&gt;&#xA;&lt;p&gt;With the old architecture:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;We took that dashboard JSON.&lt;/li&gt;&#xA;&lt;li&gt;Created an instance called the &lt;code&gt;DashboardModel&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;And then, using React, we rendered the dashboard. To keep that dashboard updated, we listened to user and data events and reacted to them.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 960px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;/media/blog/scenes-migration/old-architecture.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;/media/blog/scenes-migration/old-architecture.png&#34;data-srcset=&#34;/media/blog/scenes-migration/old-architecture.png?w=320 320w, /media/blog/scenes-migration/old-architecture.png?w=550 550w, /media/blog/scenes-migration/old-architecture.png?w=750 750w, /media/blog/scenes-migration/old-architecture.png?w=900 900w, /media/blog/scenes-migration/old-architecture.png?w=1040 1040w, /media/blog/scenes-migration/old-architecture.png?w=1240 1240w, /media/blog/scenes-migration/old-architecture.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;Diagram of of the old architecture &#34;&#xA;width=&#34;960&#34;&#xA;height=&#34;540&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/scenes-migration/old-architecture.png&#34;&#xA;alt=&#34;Diagram of of the old architecture &#34;&#xA;width=&#34;960&#34;&#xA;height=&#34;540&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;In the new architecture, the dashboard JSON remains our source of truth, and the only difference is the mechanism used to render the dashboard:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;We take the dashboard JSON.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/grafana/grafana/blob/main/public/app/features/dashboard-scene/serialization/transformSaveModelToScene.ts&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Transform the JSON&lt;/a&gt; to create a &lt;code&gt;dashboardScene&lt;/code&gt; object. The object is a tree where nodes represent the different aspects of a dashboard—visualizations, data, variables, and time range.&lt;/li&gt;&#xA;&lt;li&gt;Then, with the Scenes library, we render the dashboard. Here the library handles all the logic for keeping the dashboard updated.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 960px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;/media/blog/scenes-migration/new-dashboard-architecture.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;/media/blog/scenes-migration/new-dashboard-architecture.png&#34;data-srcset=&#34;/media/blog/scenes-migration/new-dashboard-architecture.png?w=320 320w, /media/blog/scenes-migration/new-dashboard-architecture.png?w=550 550w, /media/blog/scenes-migration/new-dashboard-architecture.png?w=750 750w, /media/blog/scenes-migration/new-dashboard-architecture.png?w=900 900w, /media/blog/scenes-migration/new-dashboard-architecture.png?w=1040 1040w, /media/blog/scenes-migration/new-dashboard-architecture.png?w=1240 1240w, /media/blog/scenes-migration/new-dashboard-architecture.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;Diagram of the new architecture&#34;&#xA;width=&#34;960&#34;&#xA;height=&#34;540&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/scenes-migration/new-dashboard-architecture.png&#34;&#xA;alt=&#34;Diagram of the new architecture&#34;&#xA;width=&#34;960&#34;&#xA;height=&#34;540&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;h2 id=&#34;whats-possible-post-migration&#34;&gt;What&amp;rsquo;s possible post-migration?&lt;/h2&gt;&#xA;&lt;p&gt;While our main focus was on feature parity and stability to make the new architecture available by default, the migration of the dashboard to utilize the Scenes library opens up numerous possibilities that we&amp;rsquo;ve been eager to explore going forward. While nothing is officially on our roadmap just yet, there have been lots of discussions related to dashboards at scale. For instance, we want to:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Offer the possibility of structuring dashboards more efficiently with the use of tabs.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;We’ve heard you asking for the ability to visualize information in different contexts or to address different audiences, and we think tabs could help accomplish this.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Bring in interactive metrics comparison as part of your daily workflows.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;We want you to be able to compare metrics between different time frames or compare panels with different selected template variables.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Support large dashboards with dozens or hundreds of panels, providing an easy way to focus on what matters the most.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;For instance, this might mean enabling you to search and view specific panels in a dashboard while dynamically adapting the view of it.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;These are some of the scenarios that we’d like to help you with within your dashboards, and we expect to be able to build out even more features by using the Scenes library. For now, stay tuned for some exciting new features in core Grafana dashboards. If you have any feedback don’t hesitate to share it in the &lt;a href=&#34;https://community.grafana.com/c/support/dashboards/61&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;community forums&lt;/a&gt; and if you find any issues you can report those to our &lt;a href=&#34;https://github.com/grafana/grafana/issues/new?template=0-bug-report.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;/products/cloud/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Cloud &lt;/a&gt;is the easiest way to get started with metrics, logs, traces, dashboards, and more. We have a generous forever-free tier and plans for every use case. &lt;a href=&#34;/auth/sign-up/create-user/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Sign up for free now!&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;】&lt;p&gt;尽管您下次登录时可能不会立即注意到，Grafana 的前端已经进行了重大升级。我们最近迁移了仪表板架构以利用 &lt;a href=&#34;/developers/scenes/?pg=blog&amp;plcmt=body-txt&#34;&gt;Grafana 场景库&lt;/a&gt;，从而能够创建更稳定、动态和灵活的场景 -动力仪表板。&lt;/p&gt;&#xA;&lt;p&gt;是的，用户界面几乎是相同的，但在幕后，负责可视化全球数百万人使用的仪表板的引擎已很大程度上被重写。在这篇文章中，我将解释我们为何进行此更改、这种新架构如何工作，以及它如何帮助每个人（我们和您！）从仪表板中获得更多收益。另外，我们将讨论此迁移将在未来带来的新可能性。&lt;/p&gt;&#xA;&lt;h2 id=&#34;why-we-migerated-to-scenes-to-power-grafana-dashboards&#34;&gt;为什么我们迁移到 Scenes 以支持 Grafana 仪表板&lt;/h2&gt;&#xA;&lt;p&gt;任何经历过迁移的人都知道迁移往往充满挑战且成本高昂。那么我们为什么决定做一个呢？&lt;/p&gt;&#xA;&lt;p&gt;嗯，Grafana 项目有 &lt;a href=&#34;/blog/2024/02/12/the-story-of-grafana-documentary-from-one-developers-dream-to-20-million-users-worldwide /&#34;&gt;10 年了&lt;/a&gt;！对于任何组织来说，十年的代码都会带来很大的变化，但对于开源项目来说尤其具有挑战性。在幕后，我们必须浏览关键组件中复杂的网络，多年来我们收到了许多很棒的功能请求，但我们根本无法实现。&lt;/p&gt;&#xA;&lt;p&gt;例如，我们会听到创建和编辑仪表板的人员提出的请求，例如：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;我们可以在仪表板上支持多个不同的时间范围吗？&lt;/li&gt;&#xA;&lt;li&gt;多组不同的嵌套变量范围（例如依赖于更高级别定义的变量的行和面板级别的变量）怎么样？&lt;/li&gt;&#xA;&lt;li&gt;我们可以为面板和行创建组和层次结构吗？我们可以将面板排列成选项卡吗？&lt;/li&gt;&#xA;&lt;li&gt;仅显示一行或一个面板的注释怎么样？&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;我们的答案总是这样的：&lt;/p&gt;&#xA;&lt;p&gt;“我们可以……但是通过黑客攻击来实现这些功能会影响产品的稳定性，这意味着从长远来看会出现更多错误，并且用户体验会进一步恶化:(”&lt;/p&gt;&#xA;&lt;p&gt;当然，我们知道这不是一个很好的答案，我们需要想出一个解决方案。&lt;/p&gt;&#xA;&lt;h3 id=&#34;the-journey-of-the-grafana-scenes-library&#34;&gt;Grafana 场景库之旅&lt;/h3&gt;&#xA;&lt;p&gt;一开始，我们想把它全部烧掉，然后重新开始！但这是行不通的，因为正如&lt;a href=&#34;https://en.wikipedia.org/wiki/Law_of_conservation_of_complexity&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;特斯勒定律&lt;/a&gt;所述，复杂性无法消除——只能移动。&lt;/p&gt;&#xA;&lt;p&gt;因此，我们创建了 Grafana 场景库，以将仪表板可视化引擎的复杂性转移到其他地方。从本质上讲，场景是前端库提供直观的声明式 API，允许开发人员构建动态仪表板体验。 （您可以在&lt;a href=&#34;/blog/2023/09/12/grafana-scenes-is-generally-available-start-building-highly-interactive-apps-today/&#34;&gt;此博客中阅读有关场景的更多信息库变得普遍可用&lt;/a&gt;。）&lt;/p&gt;&#xA;&lt;p&gt;场景库的诞生也是为了服务两个主要用户组：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;插件开发人员&lt;/strong&gt;，他们构建类似仪表板的体验（应用程序），不需要深入了解 Grafana&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Grafana 仪表板开发人员&lt;/strong&gt;，管理核心仪表板可视化引擎。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;以下时间线描述了场景库的历程：&lt;/p&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：960px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接”&#xA;href=&#34;/media/blog/scenes-migration/migration-timeline.png&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“延迟加载”&#xA;data-src=&#34;/media/blog/scenes-migration/migration-timeline.png&#34;data-srcset=&#34;/media/blog/scenes-migration/migration-timeline.png?w=320 320w，/media/blog/场景迁移/迁移时间线.png?w=550 550w, /media/blog/scenes-migration/migration-timeline.png?w=750 750w, /media/blog/scenes-migration/migration-timeline.png?w=900 900w, /media/blog/scenes-migration/migration -时间线.png?w=1040 1040w, /media/blog/scenes-migration/migration-timeline.png?w=1240 1240w, /media/blog/scenes-migration/migration-timeline.png?w=1920 1920w&#34;&#xA;data-size=&#34;auto&#34;alt=&#34;时间线图&#34;&#xA;宽度=“960”&#xA;高度=“540”&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src =“/media/blog/scenes-migration/migration-timeline.png”&#xA;alt=&#34;时间轴图&#34;&#xA;宽度=“960”&#xA;高度=“540”&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;h2 id=&#34;how-we-migerated-the-grafana-core-dashboards-to-utilize-scenes&#34;&gt;我们如何迁移 Grafana 核心仪表板以利用场景&lt;/h2&gt;&#xA;&lt;p&gt;在 2023 年 1 月迁移项目开始时，我们一致认为充分受益于 Scenes 库的最佳方式是完全替换核心仪表板代码，创建基于 Scenes 的新仪表板运行时。&lt;/p&gt;&#xA;&lt;p&gt;我们进入该项目时遵循以下指导原则：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;重用有效的内容&lt;/strong&gt;：虽然我们的目标是替换核心仪表板代码，但我们认识到某些 UI 组件可以重用。这种方法帮助我们节省了时间并避免重新发明已经运行良好的功能，例如管理注释设置、变量设置、所有数据源查询编辑器和类似功能的 UI 组件。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;依靠场景来实现核心功能：&lt;/strong&gt;由于场景已经处理了模板、查询、数据转换、布局和渲染等基本功能，因此我们专注于集成这些功能，而不是从头开始。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;功能对等第一：&lt;/strong&gt;我们的首要任务是确保新仪表板的完整性在我们进行任何花哨的升级之前，先与旧版本的功能相匹配。只要不降低我们的速度，小的 UI 改进就可以了。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;migration-stages&#34;&gt;迁移阶段&lt;/h3&gt;&#xA;&lt;h5 id=&#34;feature-parity-stage&#34;&gt;功能奇偶校验阶段&lt;/h5&gt;&#xA;&lt;p&gt;以功能对等作为我们的指导星，我们使用功能切换（&lt;code&gt;dashboardScene&lt;/code&gt; 和 &lt;code&gt;dashboardSceneForViewers&lt;/code&gt;）保持新旧架构并行运行。到今年 5 月 3 日，我们的团队（10 名工程师、一名工程经理、一名技术作家和一名产品负责人）已经达到了这一里程碑，使我们能够在Grafana 版本 11。&lt;/p&gt;&#xA;&lt;h5 id=&#34;phased-rollout-stage-with-rolling-release-channels&#34;&gt;带有滚动发布渠道的分阶段推出阶段&lt;/h5&gt;&#xA;&lt;p&gt;为了将 &lt;code&gt;dashboardScene&lt;/code&gt; 带给云用户，我们遵循了 Grafana Labs 的&lt;a href=&#34;/docs/rolling-release/&#34;&gt;滚动发布策略&lt;/a&gt;，其基本如下所示： &lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;我们首先将迁移引入测试和金丝雀实例。&lt;/li&gt;&#xA;&lt;li&gt;在没有发现更多问题后，我们开始按渠道（快速、即时、稳定）在生产实例中逐步推出 &lt;code&gt;dashboardScene&lt;/code&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;当然，正如您可以想象的那样，这个阶段对团队来说是充满挑战的。我们的日常工作流程如下所示：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;醒来并摄入咖啡因。 ☕&lt;/li&gt;&#xA;&lt;li&gt;检查用户反馈、错误报告并升级问题（&lt;em&gt;尽量不要哭泣&lt;/em&gt;）。&lt;/li&gt;&#xA;&lt;li&gt;根据紧急程度（&lt;em&gt;全面&lt;/em&gt;&lt;em&gt;团队合作&lt;/em&gt;）对修复进行分类和优先级。&lt;/li&gt;&#xA;&lt;li&gt;修复错误、调查异常情况并报告拦截程序。 （尝试&lt;em&gt;感到希望&lt;/em&gt;）&lt;/li&gt;&#xA;&lt;li&gt;漱口，睡觉，重复。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;到 10 月份，经过五个月的努力，我们已向 85% 的 Grafana Cloud 用户推出了 &lt;code&gt;dashboardScene&lt;/code&gt;，这标志着我们的本地用户已做好迁移准备。&lt;/p&gt;&#xA;&lt;p&gt;然后，在 10 月 22 日，随着 Grafana v11.3.0（OSS 和 Enterprise）的发布，我们为我们的本地用户提供了一些以前隐藏在切换后面的功能（GA）。这些功能切换包括（排名不分先后）：&lt;code&gt;dashboardSceneForViewers&lt;/code&gt;、&lt;code&gt;dashboardScene&lt;/code&gt;、&lt;code&gt;dashboardSceneSolo&lt;/code&gt; 和 &lt;code&gt;publicDashboardsScene&lt;/code&gt;。&lt;/p &gt;&#xA;&lt;h2 id=&#34;how-the-migration-will-help-usand-what-it-means-for-you&#34;&gt;迁移将如何帮助我们以及对您意味着什么&lt;/h2&gt;&#xA;&lt;p&gt;正如我之前提到的，这个新框架有很多好处。首先，让我们了解一下此迁移将如何影响您（我们的用户）。&lt;/p&gt;&#xA;&lt;h3 id=&#34;new-framework-same-ui&#34;&gt;新框架，相同的 UI&lt;/h3&gt;&#xA;&lt;p&gt;乍一看，Grafana 用户根本不会注意到此迁移带来的太大影响。这是一件好事！一致性是良好重新架构的关键原则之一，我们确保新的仪表板体验本质上与旧的仪表板体验相同。&lt;/p&gt;&#xA;&lt;p&gt;也就是说，我们已经做了一些商城 UI 改进，包括：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;编辑模式&lt;/strong&gt;：编辑仪表板时，用户将在工具栏中看到一个新的&lt;code&gt;编辑&lt;/code&gt;按钮。我们注意到，在仪表板编辑过程中有时很难有效地浏览所有视觉选项，但通过编辑模式，我们提供了一种更简单的方法来发现仪表板编辑体验并与之交互。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;模板变量和时间选择器的固定位置&lt;/strong&gt;：我们将时间选择器移至仪表板画布中，现在，当您滚动浏览仪表板时，它与模板变量一起会粘在顶部。从历史上看，这是一个高度&lt;a href=&#34;https://github.com/grafana/grafana/issues/11166&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;请求的功能&lt;/a&gt;，我们很高兴最终向社区推出。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div&#xA;类 =“youtube-lazyload 响应视频”&#xA;数据嵌入=“kcKwBhvrsHc”&#xA;data-url=&#34;https://www.youtube.com/embed/kcKwBhvrsHc?autoplay=1&amp;rel=0&#34;&#xA;数据标题=“YouTube 视频”&#xA;&gt;&#xA;&lt;div class=&#34;play-button&#34;&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;但总的来说，场景驱动的仪表板看起来很像旧的仪表板。所以不用担心，您所熟悉的 Grafana 将继续按照您期望的方式运行。如果您对仪表板在这个新设置中的外观感到好奇，您可以在 Grafana Play 中自行测试。单击 &lt;a href=&#34;https://play.grafana.org/d/bf26a4fb-4c49-44b7-a9f2-8f6f57b4c847/kube-state-metrics-home?orgId=1&amp;refresh=30s&amp;var-datasource=grafanacloud-play-prom&amp;var- cluster=play-db-cluster&amp;var-instance=gke-raintank-dev-pla-raintank-dev-pla-92dee7ce-joec&amp;var-lokids=ddhr3fttaw8aod&amp;scenes=false&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;此处&lt;/a &gt; 查看旧架构，然后转到 &lt;a href=&#34;https://play.grafana.org/d/bf26a4fb-4c49-44b7-a9f2-8f6f57b4c847/kube-state-metrics-home?orgId=1&amp;refresh=30s&amp;var -datasource=grafanacloud-play-prom&amp;var-cluster=play-db-cluster&amp;var-instance=gke-raintank-dev-pla-raintank-dev-pla-92dee7ce-joec&amp;var-lokids=ddhr3fttaw8aod&amp;scenes&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;在这里&lt;/a&gt;查看新的。&lt;/p&gt;&#xA;&lt;p&gt;最后但并非最不重要的一点是，我们的用户在加载仪表板时经常看到的“服务加载”屏幕已被删除。现在，用户将很快看到仪表板，因为我们的变量在后台运行。&lt;/p&gt;&#xA;&lt;h3 id=&#34;are-there-more-enhancements-post-migration-oh-yes&#34;&gt;迁移后是否有更多增强功能？哦，是的！&lt;/h3&gt;&#xA;&lt;p&gt;此次迁移还为用户带来了一些额外的好处。例如，Grafana Enterprise 客户会注意到 PDF 导出方面的一些巨大改进，这要归功于 &lt;a href=&#34;https://github.com/grafana/grafana-enterprise/issues/6104&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer &#34;&gt;PDF 生成的新架构&lt;/a&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;小型仪表板&lt;/strong&gt;（4 个面板）：生成时间从 11.87 秒缩短至 7.07 秒&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;中dashboards&lt;/strong&gt;（11 个面板）：生成时间从 25 秒缩短至 6.3 秒&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;大型仪表板&lt;/strong&gt;（200 个面板）：生成时间从 7.5 分钟缩短至 11 秒&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;此重构还解决了呈现包含重复面板或行的报告的问题。如果您想尝试一下，请同时启用 &lt;code&gt;newPDFRendering&lt;/code&gt; 功能切换和 &lt;code&gt;dashboardScene&lt;/code&gt; 切换。&lt;/p&gt;&#xA;&lt;p&gt;其他增强功能和错误修复包括：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;新的网址&lt;code&gt;时区&lt;/code&gt;参数让用户&lt;a href=&#34;https://github.com/grafana/grafana/issues/81538&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;使用 Grafana URL 设置仪表板时区&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;信息亭模式现在支持显示模板变量和仪表板控件&lt;a href=&#34;https://github.com/grafana/grafana/issues/20176&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;默认情况&lt;/一个&gt;;但是，用户可以将它们配置为隐藏。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/grafana/grafana-enterprise/issues/1429&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;添加了对&lt;strong&gt;All 的支持&lt;/a&gt; &lt;/strong&gt; 重复面板中的选项。&lt;/li&gt;&#xA;&lt;li&gt;修复了用户&lt;a href=&#34;https://github.com/grafana/grafana/issues/59293&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;无法添加&lt;/a&gt;的问题将现有仪表板复制到&lt;strong&gt;常规&lt;/strong&gt;文件夹。&lt;/li&gt;&#xA;&lt;li&gt;修复了&lt;a href=&#34;https://github.com/grafana/support-escalations/issues/8454&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;重复面板定位&lt;/a&gt;的问题仪表板。&lt;/li&gt;&#xA;&lt;li&gt;修复了点击&lt;strong&gt;探索&lt;/strong&gt;时丢失&lt;strong&gt;未保存的更改&lt;/strong&gt;对话框的问题&lt;a href=&#34;https://github.com/grafana/grafana/issues/80415&#34; target=&#34; _blank&#34; rel=&#34;noopener noreferrer&#34;&gt;来自新仪表板&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;current-known-limitations&#34;&gt;当前已知限制&lt;/h3&gt;&#xA;&lt;p&gt;我们目前意识到的主要限制是&lt;a href=&#34;/docs/grafana/latest/dashboards/variables/inspect-variable/?pg=blog&amp;plcmt=body-txt&#34;&gt;管理和检查变量&lt;/a&gt; 尚不可用。我们将努力更好地了解如何使用此功能以及如何在我们的新架构中最好地实现它。&lt;/p&gt;&#xA;&lt;h3 id=&#34;better-workflows-are-helping-us-the-maintainers-of-the-dashboard-engine&#34;&gt;更好的工作流程正在帮助我们，仪表板引擎的维护者&lt;/h3&gt;&#xA;&lt;p&gt;当我们切换到这个新的 &lt;code&gt;dashboardScene&lt;/code&gt; 架构时，我们注意到它可以在几个方面让我们内部受益：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;首先，场景库像树一样管理新的仪表板架构，允许快速访问不同部分（可视化、变量、查询和时间范围），而无需依赖于所显示的可视化组件。&lt;/li&gt;&#xA;&lt;li&gt;因为状态不再与组件绑定，所以我们可以在不同组件之间保留数据。这意味着我们可以避免在卸载 React 组件时重新运行查询。&lt;/li&gt;&#xA;&lt;li&gt;我们可以重用所有&lt;a href=&#34;/developers/scenes/visualizations?pg=blog&amp;plcmt=body-txt#standard-grafana-visualizations&#34;&gt;现有可视化&lt;/a&gt;，在迁移仪表板以使用场景时无需重写任何内容。&lt;/li&gt;&#xA;&lt;li&gt;在进行此次迁移的过程中，我们看到我们的内部工程文化发生了变化。我们建立了更好的测试实践，获得了过去很少有人知道的功能知识，并获得了迁移方面的弹性和专业知识&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;最终，这有助于我们为用户带来更多价值，因为它使我们能够在未来快速有效地实施事情。&lt;/p&gt;&#xA;&lt;h2 id=&#34;a-quick-look-at-the-new-architecture&#34;&gt;快速浏览新架构&lt;/h2&gt;&#xA;&lt;p&gt;我不会太深入地讨论场景库本身的技术细节，您可以在&lt;a href=&#34;/developers/scenes/core-concepts&#34;&gt;此处&lt;/a&gt;了解更多信息。相反，我想从编码角度简单地说明如何在 Grafana 的核心元素&lt;strong&gt;仪表板&lt;/strong&gt;中使用 Scenes 库。&lt;/p&gt;&#xA;&lt;h3 id=&#34;old-and-new-architecture-the-dashboard-json-is-still-the-source-of-truth&#34;&gt;新旧架构：仪表板 JSON 仍然是事实来源&lt;/h3&gt;&#xA;&lt;p&gt;Grafana 仪表板的真实来源始终是仪表板 JSON。这些文件包括面板的表示、模板变量、时间范围以及任何可以描述仪表板外观的内容。&lt;/p&gt;&#xA;&lt;p&gt;使用旧架构：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;我们采用了仪表板 JSON。&lt;/li&gt;&#xA;&lt;li&gt;创建了一个名为 &lt;code&gt;DashboardModel&lt;/code&gt; 的实例。&lt;/li&gt;&#xA;&lt;li&gt;然后，我们使用 React 渲染了仪表板。为了保持仪表板更新，我们监听用户和数据事件并对它们做出反应。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：960px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接”&#xA;href=&#34;/media/blog/scenes-migration/old-architecture.png&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“延迟加载”&#xA;data-src =“/media/blog/scenes-migration/old-architecture.png”data-srcset =“/media/blog/scenes-migration/old-architecture.png？w = 320 320w，/media/blog/场景迁移/old-architecture.png？w=550 550w，/media/blog/scenes-migration/old-architecture.png？w=750 750w，/media/blog/scenes-migration/old-architecture.png？ w=900 900w，/media/blog/scenes-migration/old-architecture.png？w=1040 1040w，/media/blog/scenes-migration/old-architecture.png？w=1240 1240w，/media/blog/场景迁移/old-architecture.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;旧架构图&#34;&#xA;宽度=“960”&#xA;高度=“540”&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src =“/media/blog/scenes-migration/old-architecture.png”&#xA;alt=&#34;旧建筑图&#34;&#xA;宽度=“960”&#xA;高度=“540”&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;p&gt;在新架构中，仪表板 JSON 仍然是我们的事实来源，唯一的区别是用于呈现仪表板的机制：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;湿获取仪表板 JSON。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/grafana/grafana/blob/main/public/app/features/dashboard-scene/serialization/transformSaveModelToScene.ts&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer &#34;&gt;转换 JSON&lt;/a&gt; 以创建 &lt;code&gt;dashboardScene&lt;/code&gt; 对象。该对象是一棵树，其中节点代表仪表板的不同方面 - 可视化、数据、变量和时间范围。&lt;/li&gt;&#xA;&lt;li&gt;然后，使用场景库，我们渲染仪表板。此处，库处理保持仪表板更新的所有逻辑。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：960px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接”&#xA;href=&#34;/media/blog/scenes-migration/new-dashboard-architecture.png&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“延迟加载”&#xA;data-src =“/media/blog/scenes-migration/new-dashboard-architecture.png”data-srcset =“/media/blog/scenes-migration/new-dashboard-architecture.png？w = 320 320w，/媒体/博客/场景迁移/new-dashboard-architecture.png?w=550 550w, /media/blog/scenes-migration/new-dashboard-architecture.png?w=750 750w, /media/blog/scenes-migration/new-dashboard-architecture.png?w=900 900w, /media/blog/scenes -migration/new-dashboard-architecture.png?w=1040 1040w, /media/blog/scenes-migration/new-dashboard-architecture.png?w=1240 1240w，/media/blog/scenes-migration/new-dashboard-architecture.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;新架构图&#34;&#xA;宽度=“960”&#xA;高度=“540”&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src =“/media/blog/scenes-migration/new-dashboard-architecture.png”&#xA;alt=&#34;新架构图&#34;&#xA;宽度=“960”&#xA;高度=“540”&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;h2 id=&#34;whats-possible-post-migration&#34;&gt;迁移后可能发生什么？&lt;/h2&gt;&#xA;&lt;p&gt;虽然我们主要关注的是功能对等性和稳定性，以使新架构默认可用，但仪表板的迁移以利用场景库开启了我们一直渴望探索的众多可能性。虽然我们的路线图上还没有正式的内容，但已经有很多与大规模仪表板相关的讨论。例如，我们想要：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;提供使用选项卡更有效地构建仪表板的可能性。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;我们听说您希望能够在不同的环境中可视化信息或针对不同的受众群体，我们认为标签可以帮助实现这一目标。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;将交互式指标比较作为日常工作流程的一部分。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;我们希望您能够比较不同时间范围之间的指标，或者比较具有不同选定模板变量的面板。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;支持具有数十个或数百个面板的大型仪表板，提供一种简单的方法来专注于最重要的事情。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;例如，这可能意味着您能够搜索和查看查看仪表板中的特定面板，同时动态调整其视图。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;这些是我们希望在仪表板中为您提供帮助的一些场景，并且我们希望能够通过使用场景库构建更多功能。现在，请继续关注 Grafana 核心仪表板中一些令人兴奋的新功能。如果您有任何反馈，请随时在&lt;a href=&#34;https://community.grafana.com/c/support/dashboards/61&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;社区中分享论坛&lt;/a&gt;，如果您发现任何问题，可以将这些问题报告给我们的 &lt;a href=&#34;https://github.com/grafana/grafana/issues/new?template=0-bug-report.yaml&#34; target= &#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;GitHub 存储库&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;/products/cloud/?pg=blog&amp;plcmt=body-txt&#34;&gt;Grafana Cloud&lt;/a&gt;是开始使用指标、日志、跟踪、仪表板等的最简单方法。我们为每个用例提供慷慨的永久免费套餐和计划。 &lt;a href=&#34;/auth/sign-up/create-user/?pg=blog&amp;plcmt=body-txt&#34;&gt;立即免费注册！&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</description>
      <pubDate>Thu, 31 Oct 2024 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【How to work with multiple data sources in Grafana dashboards: best practices to get started】如何在 Grafana 仪表板中使用多个数据源：入门最佳实践</title>
      <link>https://grafana.com/blog/2024/11/07/how-to-work-with-multiple-data-sources-in-grafana-dashboards-best-practices-to-get-started/</link>
      <description>【&lt;p&gt;Grafana dashboards enable you to visualize and correlate data from a wide range of sources. With a centralized view of your data, you can troubleshoot faster, make better decisions, and streamline monitoring.&lt;/p&gt;&#xA;&lt;p&gt;But for those of you ramping up with Grafana, you might have a few questions about how, exactly, to create these rich dashboards featuring data from disparate sources, or even how to incorporate multiple queries from a single source into your visualization.&lt;/p&gt;&#xA;&lt;p&gt;To start, it’s helpful to understand how dashboards are built in Grafana. Grafana dashboards consist of panels that display data in beautiful graphs, charts, and other visualizations. These panels are created using components that transform raw data from a data source into visualizations. The process involves passing data through three gates: a data source plugin (there are &lt;a href=&#34;/grafana/plugins/data-source-plugins/&#34;&gt;over 150 of them&lt;/a&gt; in the Grafana ecosystem), a query, and an optional transformation.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 1436px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-data-flow-diagram.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-data-flow-diagram.png&#34;data-srcset=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-data-flow-diagram.png?w=320 320w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-data-flow-diagram.png?w=550 550w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-data-flow-diagram.png?w=750 750w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-data-flow-diagram.png?w=900 900w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-data-flow-diagram.png?w=1040 1040w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-data-flow-diagram.png?w=1240 1240w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-data-flow-diagram.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;A diagram depicting how data flows from its source to a Grafana visualization.&#34;&#xA;width=&#34;1436&#34;&#xA;height=&#34;818&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-data-flow-diagram.png&#34;&#xA;alt=&#34;A diagram depicting how data flows from its source to a Grafana visualization.&#34;&#xA;width=&#34;1436&#34;&#xA;height=&#34;818&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;You can learn more about how data flows from its source into a Grafana dashboard in our &lt;a href=&#34;/docs/grafana/latest/fundamentals/dashboards-overview/&#34;&gt;technical documentation&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;In this post, we’ll move beyond this basic model and cover how to do the following in your Grafana dashboards:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Use multiple queries from the same source in a panel&lt;/li&gt;&#xA;&lt;li&gt;Join/connect multiple data frames with transformations&lt;/li&gt;&#xA;&lt;li&gt;Use mixed-source queries for different formats and databases&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;You can find all the examples in this post&lt;a href=&#34;https://play.grafana.org/d/ddyay9nx75gxsf/multiple-data-sources-in-one-visualization?folderUid=e04a2013-1aef-4c39-87e4-4d6c1698820a&amp;amp;from=now-6h&amp;amp;to=now&amp;amp;timezone=utc&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt; on Grafana Play&lt;/a&gt; to reference as you read through.&lt;/p&gt;&#xA;&lt;h2 id=&#34;how-to-use-multiple-queries-in-a-single-panel&#34;&gt;How to use multiple queries in a single panel&lt;/h2&gt;&#xA;&lt;p&gt;When you edit any visualization in Grafana, in the &lt;strong&gt;Queries&lt;/strong&gt; section, you would normally write a query that resembles what’s shown in the screenshot below. For simplicity, rather than a SQL or PromQL query, here we are using static CSV data; this could be any query that results in a similar data set.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 1564px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-queries-section.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-queries-section.png&#34;data-srcset=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-queries-section.png?w=320 320w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-queries-section.png?w=550 550w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-queries-section.png?w=750 750w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-queries-section.png?w=900 900w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-queries-section.png?w=1040 1040w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-queries-section.png?w=1240 1240w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-queries-section.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;A screenshot of the Queries section.&#34;&#xA;width=&#34;1564&#34;&#xA;height=&#34;1174&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-queries-section.png&#34;&#xA;alt=&#34;A screenshot of the Queries section.&#34;&#xA;width=&#34;1564&#34;&#xA;height=&#34;1174&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;We can click the &lt;strong&gt;Add query&lt;/strong&gt; button to create a second query, piping two (potentially different) data sets into the same visualization. Let’s add a second one. Notice that Grafana automatically names these queries “A” and “B,” but you can edit the label to make it more specific.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 1282px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_A-and-B-queries.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_A-and-B-queries.png&#34;data-srcset=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_A-and-B-queries.png?w=320 320w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_A-and-B-queries.png?w=550 550w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_A-and-B-queries.png?w=750 750w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_A-and-B-queries.png?w=900 900w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_A-and-B-queries.png?w=1040 1040w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_A-and-B-queries.png?w=1240 1240w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_A-and-B-queries.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;A screenshot showing the addition of a second query. &#34;&#xA;width=&#34;1282&#34;&#xA;height=&#34;582&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_A-and-B-queries.png&#34;&#xA;alt=&#34;A screenshot showing the addition of a second query. &#34;&#xA;width=&#34;1282&#34;&#xA;height=&#34;582&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;These are just the basics. You can add as many queries as you like to any visualization, and you can give them all custom names.&lt;/p&gt;&#xA;&lt;p&gt;Here, our very basic example results in a selectable visualization; it is really two tables in one with a selector at the bottom. We got two tables because we gave Grafana &lt;em&gt;&lt;strong&gt;two different data sets&lt;/strong&gt;&lt;/em&gt; with no connection. What we really want is a single, unified table, so that’s next!&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 1538px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-and-data-sets.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-and-data-sets.png&#34;data-srcset=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-and-data-sets.png?w=320 320w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-and-data-sets.png?w=550 550w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-and-data-sets.png?w=750 750w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-and-data-sets.png?w=900 900w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-and-data-sets.png?w=1040 1040w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-and-data-sets.png?w=1240 1240w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-and-data-sets.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;A screenshot showing the two different data sets. &#34;&#xA;width=&#34;1538&#34;&#xA;height=&#34;642&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-and-data-sets.png&#34;&#xA;alt=&#34;A screenshot showing the two different data sets. &#34;&#xA;width=&#34;1538&#34;&#xA;height=&#34;642&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;h2 id=&#34;how-to-join-data-with-transformations&#34;&gt;How to join data with transformations&lt;/h2&gt;&#xA;&lt;p&gt;Whenever you query data in Grafana, you transform that data into an intermediate format called &lt;a href=&#34;/developers/plugin-tools/key-concepts/data-frames&#34;&gt;data frames&lt;/a&gt;. Many Grafana visualizations support multiple data frames only by letting you choose which one to view at a time, as we saw above. To consolidate them, we need to turn those two data frames into a single frame, and we can do this with &lt;a href=&#34;/docs/grafana/latest/panels-visualizations/query-transform-data/transform-data/&#34;&gt;transformations&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h3 id=&#34;merge-transformation-union-operation&#34;&gt;Merge transformation (UNION operation)&lt;/h3&gt;&#xA;&lt;p&gt;In our CSV example above, the two data frames had the same schema and columns. So the simplest way we can combine them is with a merge transformation, as shown below. By going to the &lt;strong&gt;Transformations&lt;/strong&gt; tab, clicking &lt;strong&gt;Add Transformation,&lt;/strong&gt; and selecting &lt;strong&gt;Merge&lt;/strong&gt;, we essentially create a union of all of the data.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 1546px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-list.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-list.png&#34;data-srcset=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-list.png?w=320 320w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-list.png?w=550 550w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-list.png?w=750 750w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-list.png?w=900 900w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-list.png?w=1040 1040w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-list.png?w=1240 1240w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-list.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;A screenshot showing a merge transformation.&#34;&#xA;width=&#34;1546&#34;&#xA;height=&#34;850&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-list.png&#34;&#xA;alt=&#34;A screenshot showing a merge transformation.&#34;&#xA;width=&#34;1546&#34;&#xA;height=&#34;850&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;h3 id=&#34;join-transformation-sql-like-joins-on-any-grafana-query&#34;&gt;Join transformation: SQL-like joins on any Grafana query&lt;/h3&gt;&#xA;&lt;p&gt;In this second example, we will define two different CSV data sets that store different data (this time, Grafana products and their initial release years).&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 1296px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-and-release-year.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-and-release-year.png&#34;data-srcset=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-and-release-year.png?w=320 320w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-and-release-year.png?w=550 550w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-and-release-year.png?w=750 750w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-and-release-year.png?w=900 900w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-and-release-year.png?w=1040 1040w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-and-release-year.png?w=1240 1240w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-and-release-year.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;A screenshot of defining two different CSV data sets. &#34;&#xA;width=&#34;1296&#34;&#xA;height=&#34;1322&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-and-release-year.png&#34;&#xA;alt=&#34;A screenshot of defining two different CSV data sets. &#34;&#xA;width=&#34;1296&#34;&#xA;height=&#34;1322&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;In this case, we can’t simply combine the data sets because their schema and columns don’t match. So instead, we use a “Join by field” transformation, and specify that we want the data joined by the &lt;strong&gt;ID&lt;/strong&gt; field.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 1766px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-transformations.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-transformations.png&#34;data-srcset=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-transformations.png?w=320 320w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-transformations.png?w=550 550w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-transformations.png?w=750 750w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-transformations.png?w=900 900w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-transformations.png?w=1040 1040w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-transformations.png?w=1240 1240w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-transformations.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;A screenshot of the ID field.&#34;&#xA;width=&#34;1766&#34;&#xA;height=&#34;1002&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-transformations.png&#34;&#xA;alt=&#34;A screenshot of the ID field.&#34;&#xA;width=&#34;1766&#34;&#xA;height=&#34;1002&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;We combine two data frames into another, just as a SQL join operation might connect two tables. You may notice that the new, combined data frame has “qualified names” and that the columns are now called “ProductName Dataset1” to indicate which source each column came from. If you do not want this kind of field renaming to help keep things separate, you can add another transformation, “Organize fields by name,” and rename those fields.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 1720px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_organize-fields-by-name.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_organize-fields-by-name.png&#34;data-srcset=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_organize-fields-by-name.png?w=320 320w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_organize-fields-by-name.png?w=550 550w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_organize-fields-by-name.png?w=750 750w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_organize-fields-by-name.png?w=900 900w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_organize-fields-by-name.png?w=1040 1040w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_organize-fields-by-name.png?w=1240 1240w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_organize-fields-by-name.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;A screenshot of the Organize fields by name transformation.&#34;&#xA;width=&#34;1720&#34;&#xA;height=&#34;482&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_organize-fields-by-name.png&#34;&#xA;alt=&#34;A screenshot of the Organize fields by name transformation.&#34;&#xA;width=&#34;1720&#34;&#xA;height=&#34;482&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;h2 id=&#34;how-to-use-mixed-source-queries&#34;&gt;How to use mixed-source queries&lt;/h2&gt;&#xA;&lt;p&gt;Let’s take this a step further and connect JSON data to tabular data to show that we do not have to be using sample test data, schemas do not have to match, and the form of the data (JSON vs. tables) does not have to match.&lt;/p&gt;&#xA;&lt;p&gt;In the previous examples, we were using the test data source. For this one, we’ll need to choose the Mixed data source, because we’ll be defining multiple queries pointing to different sources.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 580px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;/media/blog/multiple-data-sources-grafana/mulitple-data-sources_mixed-data-source.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;/media/blog/multiple-data-sources-grafana/mulitple-data-sources_mixed-data-source.png&#34;data-srcset=&#34;/media/blog/multiple-data-sources-grafana/mulitple-data-sources_mixed-data-source.png?w=320 320w, /media/blog/multiple-data-sources-grafana/mulitple-data-sources_mixed-data-source.png?w=550 550w, /media/blog/multiple-data-sources-grafana/mulitple-data-sources_mixed-data-source.png?w=750 750w, /media/blog/multiple-data-sources-grafana/mulitple-data-sources_mixed-data-source.png?w=900 900w, /media/blog/multiple-data-sources-grafana/mulitple-data-sources_mixed-data-source.png?w=1040 1040w, /media/blog/multiple-data-sources-grafana/mulitple-data-sources_mixed-data-source.png?w=1240 1240w, /media/blog/multiple-data-sources-grafana/mulitple-data-sources_mixed-data-source.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;A screenshot of the mixed data source.&#34;&#xA;width=&#34;580&#34;&#xA;height=&#34;194&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/multiple-data-sources-grafana/mulitple-data-sources_mixed-data-source.png&#34;&#xA;alt=&#34;A screenshot of the mixed data source.&#34;&#xA;width=&#34;580&#34;&#xA;height=&#34;194&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;The first query gets a list of target countries. In a further, built-out example, we could limit this to the countries that Grafana Labs does business in, but let’s start with all the countries first.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Notice that we aliased a column here; I selected the “Code2” field as a different name, “iso.” This will become important in a minute.&lt;/strong&gt;&lt;/em&gt; The &lt;strong&gt;Code2&lt;/strong&gt; field contains a two-character country code: US for the United States, CN for China, and so on.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 1022px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_mySQL-query-for-countries-data.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_mySQL-query-for-countries-data.png&#34;data-srcset=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_mySQL-query-for-countries-data.png?w=320 320w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_mySQL-query-for-countries-data.png?w=550 550w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_mySQL-query-for-countries-data.png?w=750 750w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_mySQL-query-for-countries-data.png?w=900 900w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_mySQL-query-for-countries-data.png?w=1040 1040w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_mySQL-query-for-countries-data.png?w=1240 1240w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_mySQL-query-for-countries-data.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;A screenshot of an example query.&#34;&#xA;width=&#34;1022&#34;&#xA;height=&#34;576&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_mySQL-query-for-countries-data.png&#34;&#xA;alt=&#34;A screenshot of an example query.&#34;&#xA;width=&#34;1022&#34;&#xA;height=&#34;576&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;The second query gets data about &lt;a href=&#34;https://raw.githubusercontent.com/samayo/country-json/refs/heads/master/src/country-by-IATA-code.json&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;airports, heliports, and other locations from GitHub&lt;/a&gt;. We use the &lt;a href=&#34;/grafana/plugins/yesoreyeram-infinity-datasource/&#34;&gt;Infinity data source plugin&lt;/a&gt;, a versatile plugin that allows you to query and visualize data from JSON, CSV, XML, and GraphQL endpoints (aka, a Swiss army knife for dealing with data available on the web.)&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 1162px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_infinity-plugin.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_infinity-plugin.png&#34;data-srcset=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_infinity-plugin.png?w=320 320w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_infinity-plugin.png?w=550 550w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_infinity-plugin.png?w=750 750w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_infinity-plugin.png?w=900 900w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_infinity-plugin.png?w=1040 1040w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_infinity-plugin.png?w=1240 1240w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_infinity-plugin.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;A screenshot of another query using the Infinity data source plugin.&#34;&#xA;width=&#34;1162&#34;&#xA;height=&#34;822&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_infinity-plugin.png&#34;&#xA;alt=&#34;A screenshot of another query using the Infinity data source plugin.&#34;&#xA;width=&#34;1162&#34;&#xA;height=&#34;822&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;After creating these two queries, we’re going to apply another join, by the field &lt;em&gt;&lt;strong&gt;iso&lt;/strong&gt;&lt;/em&gt;. We will then further cut down the data to only large locations that are airports, excluding, for example, small heliports, to make the amount of data more manageable.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 1526px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_join-by-field.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_join-by-field.png&#34;data-srcset=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_join-by-field.png?w=320 320w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_join-by-field.png?w=550 550w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_join-by-field.png?w=750 750w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_join-by-field.png?w=900 900w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_join-by-field.png?w=1040 1040w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_join-by-field.png?w=1240 1240w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_join-by-field.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;A screenshot of another Join by field transformation.&#34;&#xA;width=&#34;1526&#34;&#xA;height=&#34;558&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_join-by-field.png&#34;&#xA;alt=&#34;A screenshot of another Join by field transformation.&#34;&#xA;width=&#34;1526&#34;&#xA;height=&#34;558&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;“Join by field” requires both data frames to share a field by a given name (in this case, &lt;em&gt;&lt;strong&gt;iso&lt;/strong&gt;&lt;/em&gt;). &lt;em&gt;&lt;strong&gt;So, if I had not aliased that field earlier, there would be no common field to do the join on,&lt;/strong&gt;&lt;/em&gt; and it would not be possible to perform the join.&lt;/p&gt;&#xA;&lt;p&gt;If you don’t have the option I used to SQL alias a field, you can use the “Organize fields by name” transformation to rename a field. If, for example, you wanted to join two JSON data frames with no shared fields, you could rename a field on one side as your first transformation, and then have a shared field on which to join.&lt;/p&gt;&#xA;&lt;p&gt;All of that data from GitHub has latitude and longitude information in it, so we can simply change the visualization type to Geomap, and now we get a fused view of all of the world’s largest airports on a map, which you interact with.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 1762px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_airport-geomap.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_airport-geomap.png&#34;data-srcset=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_airport-geomap.png?w=320 320w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_airport-geomap.png?w=550 550w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_airport-geomap.png?w=750 750w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_airport-geomap.png?w=900 900w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_airport-geomap.png?w=1040 1040w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_airport-geomap.png?w=1240 1240w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_airport-geomap.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;A screenshot of a geomap showing airports. &#34;&#xA;width=&#34;1762&#34;&#xA;height=&#34;1158&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_airport-geomap.png&#34;&#xA;alt=&#34;A screenshot of a geomap showing airports. &#34;&#xA;width=&#34;1762&#34;&#xA;height=&#34;1158&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: While Grafana can perform many operations similar to a database, if you’re dealing with large data volumes, it’s better to filter data as extensively as possible at the database layer before getting it into Grafana. If you query three systems for 100,000 records each, only to join and filter in Grafana to the 10 records you really want, performance might get slugging because of the amount of work required.&lt;/p&gt;&#xA;&lt;p&gt;Your best bet is to “push work down” to each data query as much as you can. I had to filter that airport JSON from GitHub using Grafana because I couldn’t query it live, but if I had the option to query it through a service endpoint, that would be preferable.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;summary-and-how-to-learn-more&#34;&gt;Summary and how to learn more&lt;/h2&gt;&#xA;&lt;p&gt;Using these techniques, you can create rich dashboards that borrow and connect data from many different sources. You can use these same techniques beyond just two queries, applying them to three or more.&lt;/p&gt;&#xA;&lt;p&gt;To recap, these techniques work because of three important things:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Any data query to a source turns into a “data frame” inside of Grafana, and gives you a common basis for dealing with a query result set, no matter where it came from or how it was originally formatted&lt;/li&gt;&#xA;&lt;li&gt;Grafana’s big tent and open source approach means you can use just about anything you can imagine as a datasource; &lt;a href=&#34;/grafana/plugins/data-source-plugins/&#34;&gt;there are over 150 data source plugins&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;A flexible set of transformations lets you perform database-like filtering and joining inside of your data definitions.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;For dashboard creators, all of this means you don’t need centralized data to create cool, centralized visualizations. If you want to learn more about how Grafana works, we recommend the &lt;a href=&#34;/docs/grafana/latest/datasources/&#34;&gt;data sources topic in our documentation&lt;/a&gt;. Our &lt;a href=&#34;/docs/grafana/latest/panels-visualizations/query-transform-data/transform-data/&#34;&gt;transformations docs&lt;/a&gt; also offer more information about what you can do with multiple data sources. Lastly, you can check out our extensive collection of &lt;a href=&#34;/grafana/dashboards/?pg=graf&amp;amp;plcmt=dashboard-below-text&#34;&gt;community-submitted dashboards&lt;/a&gt; for Grafana.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;/products/cloud/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Cloud&lt;/a&gt; is the easiest way to get started with metrics, logs, traces, dashboards, and more. We have a generous forever-free tier and plans for every use case. &lt;a href=&#34;/auth/sign-up/create-user/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Sign up for free now&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;】&lt;p&gt;Grafana 仪表板使您能够可视化和关联来自各种来源的数据。通过集中查看数据，您可以更快地排除故障、做出更好的决策并简化监控。&lt;/p&gt;&#xA;&lt;p&gt;但是对于那些正在使用 Grafana 的人来说，您可能有一些疑问，具体如何创建这些包含不同来源数据的丰富仪表板，甚至如何将来自单个来源的多个查询合并到可视化中。 &lt;/p&gt;&#xA;&lt;p&gt;首先，了解如何在 Grafana 中构建仪表板会很有帮助。 Grafana 仪表板由面板组成，这些面板以漂亮的图形、图表和其他可视化形式显示数据。这些面板是使用将原始数据从数据源转换为可视化的组件创建的。该过程涉及通过三个入口传递数据：数据源插件（Grafana 生态系统中有 &lt;a href=&#34;/grafana/plugins/data-source-plugins/&#34;&gt;超过 150 个&lt;/a&gt;）、查询，以及可选的转换。&lt;/p&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：1436px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接”&#xA;href=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-data-flow-diagram.png&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“延迟加载”&#xA;data-src=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-data-flow-diagram.png&#34;data-srcset=&#34;/media/blog/multiple-data-sources-grafana/ multiple-data-sources_grafana-data-flow-diagram.png?w=320 320w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-data-flow-diagram.png?w=550 550w，/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana -data-flow-diagram.png?w=750 750w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-data-flow-diagram.png?w=900 900w，/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana -数据流图.png?w=1040 1040w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-data-flow-diagram.png?w=1240 1240w，/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana -data-flow-diagram.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;描述数据如何从源流向 Grafana 可视化的图表。&#34;&#xA;宽度=“1436”&#xA;高度=“818”&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src =“/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-data-flow-diagram.png”&#xA;alt=&#34;描述数据如何从源流向 Grafana 可视化的图表。&#34;&#xA;宽度=“1436”&#xA;高度=“818”&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;p&gt;您可以在我们的&lt;a href=&#34;/docs/grafana/latest/fundamentals/dashboards-overview/&#34;&gt;技术文档&lt;/a&gt;中详细了解数据如何从源头流入 Grafana 仪表板。&lt;/p &gt;&#xA;&lt;p&gt;在这篇文章中，我们将超越这个基本模型，并介绍如何在 Grafana 仪表板中执行以下操作：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;使用来自 sam 的多个查询面板中的源代码&lt;/li&gt;&#xA;&lt;li&gt;通过转换连接/连接多个数据框&lt;/li&gt;&#xA;&lt;li&gt;对不同格式和数据库使用混合源查询&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;您可以在这篇文章中找到所有示例&lt;a href=&#34;https://play.grafana.org/d/ddyay9nx75gxsf/multiple-data-sources-in-one-visualization?folderUid=e04a2013-1aef-4c39 -87e4-4d6c1698820a&amp;from=now-6h&amp;to=now&amp;timezone=utc&#34; Grafana Play 上的 target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&lt;/a&gt; 供您阅读时参考。&lt;/p&gt;&#xA;&lt;h2 id=&#34;how-to-use-multiple-queries-in-a-single-panel&#34;&gt;如何在单个面板中使用多个查询&lt;/h2&gt;&#xA;&lt;p&gt;当您在 Grafana 中编辑任何可视化效果时，在&lt;strong&gt;查询&lt;/strong&gt;部分中，您通常会编写一个类似于下面屏幕截图所示的查询。为了简单起见，这里我们使用静态 CSV 数据，而不是 SQL 或 PromQL 查询；这可以是产生类似数据集的任何查询。&lt;/p&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：1564px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接”&#xA;href=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-queries-section.png&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“延迟加载”&#xA;data-src =“/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-queries-section.png”data-srcset =“/media/blog/multiple-data-sources-grafana/ multiple-data-sources_grafana-products-queries-section.png?w=320 320w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-queries-section.png?w=550 550w，/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana -products-queries-section.png?w=750 750w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-queries-section.png?w=900 900w，/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana -产品查询部分.png?w=1040 1040w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-queries-section.png?w=1240 1240w，/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana -产品查询部分.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;查询部分的屏幕截图。&#34;&#xA;宽度=“1564”&#xA;高度=“1174”&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src =“/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-queries-section.png”&#xA;alt=&#34;查询部分的屏幕截图。&#34;&#xA;宽度=“1564”&#xA;高度=“1174”&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;p&gt;我们可以单击&lt;strong&gt;添加查询&lt;/strong&gt;按钮来创建第二个查询，将两个（可能不同的）数据集通过管道传输到同一可视化中。让我们添加第二个。请注意，Grafana 会自动将这些查询命名为“A”和“B”，但您可以编辑标签以使其更加具体。&lt;/p&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：1282px；”&#xA;itemprop =“关联媒体”&#xA;项目范围e=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接”&#xA;href=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_A-and-B-queries.png&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“延迟加载”&#xA;data-src=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_A-and-B-queries.png&#34;data-srcset=&#34;/media/blog/multiple-data-sources-grafana/ multiple-data-sources_A-and-B-queries.png?w=320 320w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_A-and-B-queries.png?w=550 550w ，/media/blog/multiple-data-sources-grafana/multiple-data-sources_A-and-B-queries.png?w=750 750w，/media/blog/multiple-data-sources-grafana/multiple-data- resources_A-and-B-queries.png?w=900 900w，/media/blog/multiple-data-sources-grafana/multiple-data-sources_A-and-B-queries.png?w=1040 1040w，/media/博客/multiple-data-sources-grafana/multiple-data-sources_A-and-B-queries.png?w=1240 1240w，/media/blog/multiple-data-sources-grafana/multiple-data-sources_A-and- B-查询.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;显示添加第二个查询的屏幕截图。&#34;&#xA;宽度=“1282”&#xA;高度=“582”&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src =“/media/blog/multiple-data-sources-grafana/multiple-data-sources_A-and-B-queries.png”&#xA;alt=&#34;显示添加第二个查询的屏幕截图。&#34;&#xA;宽度=“1282”&#xA;高度=“582”&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;p&gt;这些只是基础知识。您可以向任何可视化添加任意数量的查询，并且可以为它们指定所有自定义名称。&lt;/p&gt;&#xA;&lt;p&gt;在这里，我们非常基本的示例产生了可选择的可视化结果；它实际上是两个表合二为一，底部有一个选择器。我们得到了两个表，因为我们为 Grafana 提供了&lt;em&gt;&lt;strong&gt;两个不同的数据集&lt;/strong&gt;&lt;/em&gt;，但没有任何连接。我们真正想要的是一个单一的、统一的表格，所以这就是下一步！&lt;/p&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：1538px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接”&#xA;href=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-and-data-sets.png&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“延迟加载”&#xA;data-src=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-and-data-sets.png&#34;data-srcset=&#34;/media/blog/multiple-data-sources- grafana/multiple-data-sources_grafana-products-and-data-sets.png?w=320 320w，/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-and-data-sets。 png?w=550 550w，/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-and-data-sets.png?w=750 750w，/media/blog/multiple-data-来源-grafana/multiple-data-sources_grafana-products-and-data-sets.png?w=900 900w，/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-and-data- set.png?w=1040 1040w，/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-and-data-sets.png?w=1240 1240w，/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-and-data-sets.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;显示两个不同数据集的屏幕截图。&#34;&#xA;宽度=“1538”&#xA;高度=“642”&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src =“/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-and-data-sets.png”&#xA;alt=&#34;显示两个不同数据集的屏幕截图。&#34;&#xA;宽度=“1538”&#xA;高度=“642”&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;h2 id=&#34;how-to-join-data-with-transformations&#34;&gt;如何通过转换连接数据&lt;/h2&gt;&#xA;&lt;p&gt;每当您在 Grafana 中查询数据时，都会将该数据转换为称为&lt;a href=&#34;/developers/plugin-tools/key-concepts/data-frames&#34;&gt;数据帧&lt;/a&gt;的中间格式。许多 Grafana 可视化仅通过让您选择一次查看哪个数据框来支持多个数据框，如我们上面所见。为了合并它们，我们需要将这两个数据框转换为单个框架，我们可以使用 &lt;a href=&#34;/docs/grafana/latest/panels-visualizations/query-transform-data/transform-data/&#34; 来完成此操作&gt;转换&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;h3 id=&#34;merge-transformation-union-operation&#34;&gt;合并转换（UNION 操作）&lt;/h3&gt;&#xA;&lt;p&gt;在上面的 CSV 示例中，两个数据框具有相同的架构和列。因此，我们组合它们的最简单方法是使用合并转换，如下所示。通过转到&lt;strong&gt;转换&lt;/strong&gt;选项卡，单击&lt;strong&gt;添加转换&lt;/strong&gt;并选择&lt;strong&gt;合并&lt;/strong&gt;，我们实质上创建了所有数据的并集。&lt;/p &gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：1546px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接”&#xA;href=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-list.png&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“延迟加载”&#xA;data-src =“/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-list.png”data-srcset =“/media/blog/multiple-data-sources-grafana/multiple- data-sources_grafana-products-list.png?w=320 320w，/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-list.png?w=550 550w，/media/blog/多个数据源grafana/multiple-data-sources_grafana-products-list.png？w=750 750w，/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-list.png？ w=900 900w，/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-list.png?w=1040 1040w，/media/blog/multiple-data-sources-grafana/multiple- data-sources_grafana-products-list.png?w=1240 1240w，/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-list.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;显示合并转换的屏幕截图。&#34;&#xA;宽度=“1546”&#xA;高度=“850”&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src =“/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-list.png”&#xA;alt=&#34;显示合并转换的屏幕截图。&#34;宽度=“1546”&#xA;高度=“850”&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;h3 id=&#34;join-transformation-sql-like-joins-on-any-grafana-query&#34;&gt;连接转换：任何 Grafana 查询上的类似 SQL 的连接&lt;/h3&gt;&#xA;&lt;p&gt;在第二个示例中，我们将定义两个不同的 CSV 数据集来存储不同的数据（这次是 Grafana 产品及其初始发布年份）。&lt;/p&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：1296px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接”&#xA;href=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-and-release-year.png&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“延迟加载”&#xA;data-src=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-and-release-year.png&#34;data-srcset=&#34;/media/blog/multiple-data-sources- grafana/multiple-data-sources_grafana-products-and-release-year.png?w=320 320w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-and-release-year.png?w=550 550w，/media/blog/multiple-data-sources-grafana/multiple-data -sources_grafana-products-and-release-year.png?w=750 750w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-and-release-year.png?w=900 900w，/media/blog/multiple-data-sources-grafana/multiple-data -sources_grafana-products-and-release-year.png?w=1040 1040w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-and-release-year.png?w=1240 1240w，/media/blog/multiple-data-sources-grafana/multiple-data -sources_grafana-products-and-release-year.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;定义两个不同 CSV 数据集的屏幕截图。&#34;&#xA;宽度=“1296”&#xA;高度=“1322”&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src =“/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-and-release-year.png”&#xA;alt=&#34;定义两个不同的 CSV 数据集的屏幕截图。&#34;&#xA;宽度=“1296”&#xA;高度=“1322”&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;p&gt;在这种情况下，我们不能简单地组合数据集，因为它们的架构和列不匹配。因此，我们使用“按字段连接”转换，并指定我们希望通过 &lt;strong&gt;ID&lt;/strong&gt; 字段连接数据。&lt;/p&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：1766px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接”&#xA;href=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-transformations.png&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“延迟加载”&#xA;data-src =“/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-transformations.png”data-srcset =“/media/blog/multiple-data-sources-grafana/multiple- data-sources_grafana-products-transformations.png?w=320 320w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-transformations.png?w=550 550w，/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-transformations.png?w=750 750w，/media/blog/multiple-data-sources-grafana/ multiple-data-sources_grafana-products-transformations.png?w=900 900w，/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-transformations.png?w=1040 1040w，/media/博客/multiple-data-sources-grafana/multiple-data-sources_grafana-products-transformations.png?w=1240 1240w，/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-transformations。 png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;ID 字段的屏幕截图。&#34;&#xA;宽度=“1766”&#xA;高度=“1002”&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src =“/media/blog/multiple-data-sources-grafana/multiple-data-sources_grafana-products-transformations.png”&#xA;alt=&#34;ID 字段的屏幕截图。&#34;&#xA;宽度=“1766”&#xA;高度=“1002”&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;p&gt;我们将两个数据框组合成另一个数据框，就像 SQL 连接操作可能连接两个表一样。您可能会注意到，新的组合数据框具有“限定名称”，并且这些列现在称为“ProductName Dataset1”，以指示每列来自哪个源。如果您不希望这种字段重命名有助于保持事物分离，您可以添加另一个转换“按名称组织字段”，然后重命名这些字段。&lt;/p&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：1720px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接”&#xA;href=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_organize-fields-by-name.png&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“延迟加载”&#xA;data-src=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_organize-fields-by-name.png&#34;data-srcset=&#34;/media/blog/multiple-data-sources-grafana/ multiple-data-sources_organize-fields-by-name.png?w=320 320w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_organize-fields-by-name.png?w=550 550w ，/media/blog/multiple-data-sources-grafana/multiple-data-sources_organize-fields-by-name.png?w=750 750w，/media/blog/multiple-data-sources-grafana/multiple-data- resources_organize-fields-by-name.png?w=900 900w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_organize-fields-by-name.png?w=1040 1040w, /media/博客/multiple-data-sources-grafana/multiple-data-sources_organize-fields-by-name.png?w=1240 1240w，/media/blog/multiple-data-sources-grafana/multiple-data-sources_organize-fields- by-name.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;按名称转换组织字段的屏幕截图。&#34;&#xA;宽度=“1720”&#xA;高度=“482”&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_organize-fields-by-name.png&#34;&#xA;alt=&#34;按名称组织字段转换的屏幕截图。&#34;&#xA;宽度=“1720”&#xA;高度=“482”&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;h2 id=&#34;how-to-use-mixed-source-queries&#34;&gt;如何使用混合源查询&lt;/h2&gt;&#xA;&lt;p&gt;让我们更进一步，将 JSON 数据连接到表格数据，以表明我们不必使用示例测试数据，模式不必匹配，并且数据的形式（JSON 与表）不需要匹配不必匹配。&lt;/p&gt;&#xA;&lt;p&gt;在前面的示例中，我们使用了测试数据源。对于这一点，我们需要选择混合数据源，因为我们将定义指向不同源的多个查询。&lt;/p&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：580px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接”&#xA;href=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_mixed-data-source.png&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“延迟加载”&#xA;data-src =“/media/blog/multiple-data-sources-grafana/multiple-data-sources_mixed-data-source.png”data-srcset =“/media/blog/multiple-data-sources-grafana/multiple- data-sources_mixed-data-source.png?w=320 320w，/media/blog/multiple-data-sources-grafana/multiple-data-sources_mixed-data-source.png?w=550 550w，/media/blog/多个数据源grafana/multiple-data-sources_mixed-data-source.png？w=750 750w，/media/blog/multiple-data-sources-grafana/multiple-data-sources_mixed-data-source.png？ w=900 900w，/media/blog/multiple-data-sources-grafana/multiple-data-sources_mixed-data-source.png?w=1040 1040w，/media/blog/multiple-data-sources-grafana/multiple- data-sources_mixed-data-source.png?w=1240 1240w，/media/blog/multiple-data-sources-grafana/multiple-data-sources_mixed-data-source.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;混合数据源的屏幕截图。&#34;&#xA;宽度=“580”&#xA;高度=“194”&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src =“/media/blog/multiple-data-sources-grafana/multiple-data-sources_mixed-data-source.png”&#xA;alt=&#34;混合数据源的屏幕截图。&#34;&#xA;宽度=“580”&#xA;高度=“194”&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;p&gt;第一个查询获取目标国家/地区的列表。在进一步的内置示例中，我们可以将其限制为 Grafana Labs 开展业务的国家/地区，但让我们首先从所有国家/地区开始。&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;请注意，我们在这里为一列添加了别名；我选择“Code2”字段作为不同的名称“iso”。这很快就会变得很重要。&lt;/strong&gt;&lt;/em&gt; &lt;strong&gt;Code2&lt;/strong&gt; 字段包含两个字符的国家/地区代码：US 代表美国，CN 代表中国，依此类推。&lt;/strong&gt;&lt;/em&gt; p&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：1022px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接”&#xA;href=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_mySQL-query-for-countries-data.png&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“延迟加载”&#xA;data-src=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_mySQL-query-for-countries-data.png&#34;data-srcset=&#34;/media/blog/multiple-data-sources-格拉法纳/穆ltiple-data-sources_mySQL-query-for-countries-data.png？w=320 320w，/media/blog/multiple-data-sources-grafana/multiple-data-sources_mySQL-query-for-countries-data.png？ w=550 550w，/media/blog/multiple-data-sources-grafana/multiple-data-sources_mySQL-query-for-countries-data.png?w=750 750w，/media/blog/multiple-data-sources- grafana/multiple-data-sources_mySQL-query-for-countries-data.png?w=900 900w，/media/blog/multiple-data-sources-grafana/multiple-data-sources_mySQL-query-for-countries-data。 png?w=1040 1040w，/media/blog/multiple-data-sources-grafana/multiple-data-sources_mySQL-query-for-countries-data.png?w=1240 1240w，/media/blog/multiple-data-来源-grafana/multiple-data-sources_mySQL-query-for-countries-data.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;示例查询的屏幕截图。&#34;&#xA;宽度=“1022”&#xA;高度=“576”&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src =“/media/blog/multiple-data-sources-grafana/multiple-data-sources_mySQL-query-for-countries-data.png”&#xA;alt=&#34;示例查询的屏幕截图。&#34;&#xA;宽度=“1022”&#xA;高度=“576”&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;p&gt;第二个查询获取有关 &lt;a href=&#34;https://raw.githubusercontent.com/samayo/country-json/refs/heads/master/src/country-by-IATA-code.json&#34; target= 的数据&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;来自 GitHub 的机场、直升机场和其他位置&lt;/a&gt;。我们使用&lt;a href=&#34;/grafana/plugins/yesoreyeram-infinity-datasource/&#34;&gt;无限数据源插件&lt;/a&gt;，这是一个多功能插件，可让您查询和可视化来自 JSON、CSV、XML 和 GraphQL 的数据端点（又名，用于处理网络上可用数据的瑞士军刀。）&lt;/p&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：1162px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接”&#xA;href=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_infinity-plugin.png&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“延迟加载”&#xA;data-src =“/media/blog/multiple-data-sources-grafana/multiple-data-sources_infinity-plugin.png”data-srcset =“/media/blog/multiple-data-sources-grafana/multiple-data- resources_infinity-plugin.png?w=320 320w，/media/blog/multiple-data-sources-grafana/multiple-data-sources_infinity-plugin.png?w=550 550w，/media/blog/multiple-data-sources- grafana/multiple-data-sources_infinity-plugin.png?w=750 750w，/media/blog/multiple-data-sources-grafana/multiple-data-sources_infinity-plugin.png?w=900 900w，/media/blog/多个数据源grafana/multiple-data-sources_infinity-plugin.png?w=1040 1040w，/media/blog/multiple-data-sources-grafana/multiple-data-sources_infinity-plugin.png?w=1240 1240w ，/media/blog/multiple-data-sources-grafana/multiple-data-sources_infinity-plugin.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;使用 Infinity 数据源插件的另一个查询的屏幕截图。&#34;&#xA;宽度=“1162”&#xA;高度=“822”&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src =“/media/blog/multiple-data-sources-grafana/multiple-data-sources_infinity-plugin.png”&#xA;alt=&#34;另一个问题的屏幕截图尝试使用 Infinity 数据源插件。”&#xA;宽度=“1162”&#xA;高度=“822”&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;p&gt;创建这两个查询后，我们将通过字段&lt;em&gt;&lt;strong&gt;iso&lt;/strong&gt;&lt;/em&gt;应用另一个连接。然后，我们将进一步将数据缩减到仅机场等大型地点，不包括小型直升机场等，以使数据量更易于管理。&lt;/p&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：1526px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接”&#xA;href=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_join-by-field.png&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“延迟加载”&#xA;data-src=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_join-by-field.png&#34;data-srcset=&#34;/media/blog/multiple-data-sources-grafana/multiple- data-sources_join-by-field.png?w=320 320w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_join-by-field.png?w=550 550w，/media/blog/multiple-data-sources-grafana/multiple-data-sources_join-by -field.png?w=750 750w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_join-by-field.png?w=900 900w，/media/blog/multiple-data-sources-grafana/multiple-data-sources_join-by -field.png?w=1040 1040w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_join-by-field.png?w=1240 1240w，/media/blog/multiple-data-sources-grafana/multiple-data-sources_join-by -field.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;另一个通过字段转换连接的屏幕截图。&#34;&#xA;宽度=“1526”&#xA;高度=“558”&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src =“/media/blog/multiple-data-sources-grafana/multiple-data-sources_join-by-field.png”&#xA;alt=&#34;另一个通过字段转换连接的屏幕截图。&#34;&#xA;宽度=“1526”&#xA;高度=“558”&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;p&gt;“按字段连接”要求两个数据帧按给定名称共享字段（在本例中为&lt;em&gt;&lt;strong&gt;iso&lt;/strong&gt;&lt;/em&gt;）。 &lt;em&gt;&lt;strong&gt;因此，如果我之前没有为该字段添加别名，则不会有公共字段来执行联接，&lt;/strong&gt;&lt;/em&gt;并且不可能执行联接。&lt;/em&gt; p&gt;&#xA;&lt;p&gt;如果您没有我用来为字段设置 SQL 别名的选项，您可以使用“按名称组织字段”转换来重命名字段。例如，如果您想要连接两个没有共享字段的 JSON 数据帧，则可以将一侧的字段重命名为第一个转换，然后有一个要连接的共享字段。&lt;/p&gt;&#xA;&lt;p&gt;来自 GitHub 的所有数据都包含纬度和经度信息，因此我们可以简单地将可视化类型更改为 Geomap，现在我们可以在地图上获得世界上所有最大机场的融合视图，您可以与之交互.&lt;/p&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：1762px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接”&#xA;href=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_airport-geomap.png&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“延迟加载”&#xA;data-src=&#34;/media/blog/multiple-data-sources-grafana/multiple-data-sources_airport-geomap.png&#34;data-srcset=&#34;/media/blog/multiple-data-sources-grafana/multiple-data- resources_airport-geomap.png?w=320 320w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_airport-geomap.png?w=550 550w，/media/blog/multiple-data-sources-grafana/multiple-data-sources_airport-geomap.png ?w=750 750w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_airport-geomap.png?w=900 900w，/media/blog/multiple-data-sources-grafana/multiple-data-sources_airport-geomap.png ?w=1040 1040w, /media/blog/multiple-data-sources-grafana/multiple-data-sources_airport-geomap.png?w=1240 1240w，/media/blog/multiple-data-sources-grafana/multiple-data-sources_airport-geomap.png ?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;显示机场的地理地图的屏幕截图。&#34;&#xA;宽度=“1762”&#xA;高度=“1158”&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src =“/media/blog/multiple-data-sources-grafana/multiple-data-sources_airport-geomap.png”&#xA;alt=&#34;显示机场的地理地图的屏幕截图。&#34;&#xA;宽度=“1762”&#xA;高度=“1158”&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;块引用&gt;&#xA;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：虽然 Grafana 可以执行许多类似于数据库的操作，但如果您正在处理大量数据，最好在将数据放入数据库之前在数据库层尽可能广泛地过滤数据格拉法纳。如果您查询三个系统各 100,000 条记录，只是为了在 Grafana 中连接和过滤您真正想要的 10 条记录，则性能可能会因为所需的工作量而变得缓慢。&lt;/p&gt;&#xA;&lt;p&gt;最好的选择是尽可能将工作“下推”到每个数据查询。我必须使用 Grafana 从 GitHub 过滤机场 JSON，因为我无法实时查询它，但如果我可以选择通过服务端点查询它，那就更好了。&lt;/p&gt;&#xA;&lt;/块引用&gt;&#xA;&lt;h2 id=&#34;summary-and-how-to-learn-more&#34;&gt;摘要以及如何了解更多信息&lt;/h2&gt;&#xA;&lt;p&gt;使用这些技术，您可以创建丰富的仪表板，借用和连接来自许多不同来源的数据。除了两个查询之外，您还可以使用这些相同的技术，将它们应用于三个或更多查询。&lt;/p&gt;&#xA;&lt;p&gt;回顾一下，这些技术之所以有效，是因为三个重要的事情：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对源的任何数据查询都会变成 Grafana 内部的“数据框架”，并为您提供处理查询结果集的通用基础，无论它来自何处或最初的格式如何&lt;/li&gt;&#xA;&lt;li&gt;Grafana 的大帐篷和开源方法意味着您可以使用任何您能想象到的数据源； &lt;a href=&#34;/grafana/plugins/data-source-plugins/&#34;&gt;有超过 150 个数据源插件&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;通过一组灵活的转换，您可以在数据定义内部执行类似数据库的过滤和连接。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;对于仪表板创建者来说，所有这一切意味着您不需要集中数据来创建很酷的内容实现了可视化。如果您想了解有关 Grafana 工作原理的更多信息，我们推荐&lt;a href=&#34;/docs/grafana/latest/datasources/&#34;&gt;文档中的数据源主题&lt;/a&gt;。我们的&lt;a href=&#34;/docs/grafana/latest/panels-visualizations/query-transform-data/transform-data/&#34;&gt;转换文档&lt;/a&gt;还提供了有关如何使用多个数据源执行操作的更多信息。最后，您可以查看我们针对 Grafana 的&lt;a href=&#34;/grafana/dashboards/?pg=graf&amp;plcmt=dashboard-below-text&#34;&gt;社区提交的仪表板&lt;/a&gt;的广泛集合。&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;/products/cloud/?pg=blog&amp;plcmt=body-txt&#34;&gt;Grafana Cloud&lt;/a&gt; 是开始使用指标、日志、跟踪、仪表板等的最简单方法。我们为每个用例提供慷慨的永久免费套餐和计划。 &lt;a href=&#34;/auth/sign-up/create-user/?pg=blog&amp;plcmt=body-txt&#34;&gt;立即免费注册&lt;/a&gt;！&lt;/em&gt;&lt;/p&gt;</description>
      <pubDate>Thu, 07 Nov 2024 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Grafana variables: what they are and how they create dynamic dashboards】Grafana 变量：它们是什么以及它们如何创建动态仪表板</title>
      <link>https://grafana.com/blog/2024/10/30/grafana-variables-what-they-are-and-how-they-create-dynamic-dashboards/</link>
      <description>【&lt;p&gt;A common pattern when building Grafana dashboards is to represent data for many items at once, such as simultaneously monitoring hundreds of servers. But what if there’s a problem with &lt;em&gt;one&lt;/em&gt; of those servers? You’d want the ability to quickly identify that single server, and drill into the details without noise from all the other systems. In Grafana, dashboard &lt;em&gt;variables&lt;/em&gt; are a great way to filter data and focus on the information that’s most important to you.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;/docs/grafana/latest/dashboards/variables/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Variables&lt;/a&gt; make your Grafana dashboards dynamic instead of static. They allow you to filter and search for the data you care about most, without having to edit queries or rebuild dashboards. They’re one of the most powerful features in Grafana, making it fast and easy to find the data you need.&lt;/p&gt;&#xA;&lt;div&#xA;class=&#34;youtube-lazyload responsive-video&#34;&#xA;data-embed=&#34;mMUJ3iwIYwc&#34;&#xA;data-url=&#34;https://www.youtube.com/embed/mMUJ3iwIYwc?autoplay=1&amp;amp;rel=0&#34;&#xA;data-title=&#34;YouTube Video&#34;&#xA;&gt;&#xA;&lt;div class=&#34;play-button&#34;&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;Let’s explore how Grafana variables work and when, where, and how to use them.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-are-grafana-variables&#34;&gt;What are Grafana variables?&lt;/h2&gt;&#xA;&lt;p&gt;Variables let you set values that can be passed into a &lt;a href=&#34;/docs/grafana/latest/panels-visualizations/query-transform-data/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;query&lt;/a&gt; or &lt;a href=&#34;/docs/grafana/latest/panels-visualizations/query-transform-data/transform-data/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;transformation&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;To revisit our earlier example with the servers, it would be painful to have to build a dashboard for every single server you want to monitor. By using variables, you can create one generic dashboard and pick the specific server you want to monitor from a dropdown list.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 1240px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link captioned&#34;&#xA;href=&#34;/media/blog/grafana-variables/grafana-variables_dropdown.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload mb-0&#34;&#xA;data-src=&#34;/media/blog/grafana-variables/grafana-variables_dropdown.png&#34;data-srcset=&#34;/media/blog/grafana-variables/grafana-variables_dropdown.png?w=320 320w, /media/blog/grafana-variables/grafana-variables_dropdown.png?w=550 550w, /media/blog/grafana-variables/grafana-variables_dropdown.png?w=750 750w, /media/blog/grafana-variables/grafana-variables_dropdown.png?w=900 900w, /media/blog/grafana-variables/grafana-variables_dropdown.png?w=1040 1040w, /media/blog/grafana-variables/grafana-variables_dropdown.png?w=1240 1240w, /media/blog/grafana-variables/grafana-variables_dropdown.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;A screenshot showing the variables dropdown list.&#34;&#xA;width=&#34;1240&#34;&#xA;height=&#34;394&#34;&#xA;title=&#34;*Variables are displayed as dropdown lists at the top of the dashboard.*&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/grafana-variables/grafana-variables_dropdown.png&#34;&#xA;alt=&#34;A screenshot showing the variables dropdown list.&#34;&#xA;width=&#34;1240&#34;&#xA;height=&#34;394&#34;&#xA;title=&#34;*Variables are displayed as dropdown lists at the top of the dashboard.*&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;figcaption class=&#34;w-100p caption text-gray-13 &#34;&gt;&lt;em&gt;Variables are displayed as dropdown lists at the top of the dashboard.&lt;/em&gt;&lt;/figcaption&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/em&gt; &lt;em&gt;To create and manage variables in Grafana, you need either &lt;a href=&#34;/docs/grafana/latest/administration/roles-and-permissions/?pg=blog&amp;amp;plcmt=body-txt/#organization-roles&#34;&gt;editor or admin permissions&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;In addition to the dropdown list, variables can display as text boxes at the top of a dashboard for easy access (though, can optionally be hidden from view).&lt;/p&gt;&#xA;&lt;p&gt;Variables in Grafana are like variables in a computer program or mathematical formula. They’re a placeholder that you can put into a query that will be replaced by the actual value of the variable when your query is run.&lt;/p&gt;&#xA;&lt;p&gt;By default, variables have just one value at a time. However, you can set up variables to allow for the selection of multiple values, which Grafana will then pass along in a format that makes sense for your data source. For example, if you use a SQL data source, Grafana will use commas to separate multiple values; if you use Prometheus, Grafana will use pipe characters (|) to separate them; and so on.&lt;/p&gt;&#xA;&lt;p&gt;Also by default, variables are written &lt;code&gt;$varname&lt;/code&gt;. There are more advanced uses that are outside the scope of this blog post. Please visit our &lt;a href=&#34;/docs/grafana/latest/dashboards/variables/variable-syntax/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana variable documentation&lt;/a&gt; for more information.&lt;/p&gt;&#xA;&lt;h2 id=&#34;types-of-variables-and-when-to-use-them&#34;&gt;Types of variables and when to use them&lt;/h2&gt;&#xA;&lt;p&gt;There are two main types of variables in Grafana: &lt;strong&gt;global variables&lt;/strong&gt; and &lt;strong&gt;user-defined variables&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;/docs/grafana/latest/dashboards/variables/add-template-variables/?pg=blog&amp;amp;plcmt=body-txt/#global-variables&#34;&gt;Global variables&lt;/a&gt; are built-in and automatically populated. For example, &lt;code&gt;${__user}&lt;/code&gt; contains the name of the currently logged in user. These exist for all dashboards and you don’t have to do anything special to create them.&lt;/p&gt;&#xA;&lt;p&gt;User-defined variables are variables that you create and set values for. All examples below are user-defined variables and can also be found on &lt;a href=&#34;https://play.grafana.org/d/ddvzyhqvzw83kf/dashboard-variables&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;play.grafana.org&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h3 id=&#34;query-variables&#34;&gt;Query variables&lt;/h3&gt;&#xA;&lt;p&gt;It’s useful to be able to select from a list of values that you know are in your data. For example, on a dashboard displaying information about servers, you could attempt to filter by server name, but there’s always the risk of typos. Instead, you could use a dropdown list containing actual server names.&lt;/p&gt;&#xA;&lt;p&gt;Query variables let you populate a dropdown with values that come directly from your data source. To do this, you write a query that returns those values. The actual query you write will vary depending on your data source — for example, a SQL query will look different from a PromQL or Influx query.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 686px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link captioned&#34;&#xA;href=&#34;/media/blog/grafana-variables/grafana-variables_query-variables.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload mb-0&#34;&#xA;data-src=&#34;/media/blog/grafana-variables/grafana-variables_query-variables.png&#34;data-srcset=&#34;/media/blog/grafana-variables/grafana-variables_query-variables.png?w=320 320w, /media/blog/grafana-variables/grafana-variables_query-variables.png?w=550 550w, /media/blog/grafana-variables/grafana-variables_query-variables.png?w=750 750w, /media/blog/grafana-variables/grafana-variables_query-variables.png?w=900 900w, /media/blog/grafana-variables/grafana-variables_query-variables.png?w=1040 1040w, /media/blog/grafana-variables/grafana-variables_query-variables.png?w=1240 1240w, /media/blog/grafana-variables/grafana-variables_query-variables.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;A screenshot of a query variable.&#34;&#xA;width=&#34;686&#34;&#xA;height=&#34;819&#34;&#xA;title=&#34;*A query variable that selects label values from Prometheus. This will return all of the label values for a selected label.*&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/grafana-variables/grafana-variables_query-variables.png&#34;&#xA;alt=&#34;A screenshot of a query variable.&#34;&#xA;width=&#34;686&#34;&#xA;height=&#34;819&#34;&#xA;title=&#34;*A query variable that selects label values from Prometheus. This will return all of the label values for a selected label.*&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;figcaption class=&#34;w-100p caption text-gray-13 &#34;&gt;&lt;em&gt;A query variable that selects label values from Prometheus. This will return all of the label values for a selected label.&lt;/em&gt;&lt;/figcaption&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;em&gt;In our documentation, you’ll see references to &lt;a href=&#34;/docs/grafana/latest/dashboards/variables/?pg=blog&amp;amp;plcmt=body-txt/#templates&#34;&gt;templates&lt;/a&gt; when talking about variables. A template is simply any query that uses a variable. For example, if you were administering a dashboard to monitor several servers, you could make a dashboard for each server. Or you could create one dashboard and use panels with template queries.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;custom-variables&#34;&gt;Custom variables&lt;/h3&gt;&#xA;&lt;p&gt;Custom variables are similar to query variables in that they provide a dropdown list for you to select from. However, instead of getting values from a data source, you set the values for the list manually.&lt;/p&gt;&#xA;&lt;p&gt;You can approach custom variables in a couple of ways. The simplest is to write out a comma-separated list of values you want to be able to select from.&lt;/p&gt;&#xA;&lt;p&gt;You can also provide key/value pairs, which can offer a more user-friendly view of the data. For example, you might have internal application codes that are hard to remember. In this case, you could use friendlier names as the key, and then the app code as the value.&lt;/p&gt;&#xA;&lt;p&gt;Key/value pairs are separated by a &lt;code&gt;:&lt;/code&gt; character. So, for a list of applications, you might have something like:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt; Cart Service : CRTS005Q , Checkout Service : CK614 , Review Service : RV115T&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;In this example, you would see the name “Cart Service,” but queries would use the actual application codes, such as “CRTS005Q.”&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 679px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link captioned&#34;&#xA;href=&#34;/media/blog/grafana-variables/grafana-variables_custom-variables.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload mb-0&#34;&#xA;data-src=&#34;/media/blog/grafana-variables/grafana-variables_custom-variables.png&#34;data-srcset=&#34;/media/blog/grafana-variables/grafana-variables_custom-variables.png?w=320 320w, /media/blog/grafana-variables/grafana-variables_custom-variables.png?w=550 550w, /media/blog/grafana-variables/grafana-variables_custom-variables.png?w=750 750w, /media/blog/grafana-variables/grafana-variables_custom-variables.png?w=900 900w, /media/blog/grafana-variables/grafana-variables_custom-variables.png?w=1040 1040w, /media/blog/grafana-variables/grafana-variables_custom-variables.png?w=1240 1240w, /media/blog/grafana-variables/grafana-variables_custom-variables.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;A screenshot of a custom variable.&#34;&#xA;width=&#34;679&#34;&#xA;height=&#34;887&#34;&#xA;title=&#34;*A custom variable defining four possible values to select from.*&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/grafana-variables/grafana-variables_custom-variables.png&#34;&#xA;alt=&#34;A screenshot of a custom variable.&#34;&#xA;width=&#34;679&#34;&#xA;height=&#34;887&#34;&#xA;title=&#34;*A custom variable defining four possible values to select from.*&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;figcaption class=&#34;w-100p caption text-gray-13 &#34;&gt;&lt;em&gt;A custom variable defining four possible values to select from.&lt;/em&gt;&lt;/figcaption&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;h3 id=&#34;textbox-variables&#34;&gt;Textbox variables&lt;/h3&gt;&#xA;&lt;p&gt;A textbox variable creates a box at the top of the dashboard where you can enter text. This is useful for things like custom searches in logs or similar data where you don’t know ahead of time what you’re looking for.&lt;/p&gt;&#xA;&lt;p&gt;For example, you might have a database that contains information about all the employees in a company and a dashboard for viewing information about them. There could be tens of thousands of names, so creating a dropdown list in a query variable would not be particularly useful. Instead, you could have a textbox where you input a name that is used in a SQL query to find the employee you’re looking for.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 679px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link captioned&#34;&#xA;href=&#34;/media/blog/grafana-variables/grafana-variables_textbox-variables.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload mb-0&#34;&#xA;data-src=&#34;/media/blog/grafana-variables/grafana-variables_textbox-variables.png&#34;data-srcset=&#34;/media/blog/grafana-variables/grafana-variables_textbox-variables.png?w=320 320w, /media/blog/grafana-variables/grafana-variables_textbox-variables.png?w=550 550w, /media/blog/grafana-variables/grafana-variables_textbox-variables.png?w=750 750w, /media/blog/grafana-variables/grafana-variables_textbox-variables.png?w=900 900w, /media/blog/grafana-variables/grafana-variables_textbox-variables.png?w=1040 1040w, /media/blog/grafana-variables/grafana-variables_textbox-variables.png?w=1240 1240w, /media/blog/grafana-variables/grafana-variables_textbox-variables.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;A screenshot of a textbox variable.&#34;&#xA;width=&#34;679&#34;&#xA;height=&#34;686&#34;&#xA;title=&#34;*A textbox variable that lets you set the variable value based on whatever you type in.*&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/grafana-variables/grafana-variables_textbox-variables.png&#34;&#xA;alt=&#34;A screenshot of a textbox variable.&#34;&#xA;width=&#34;679&#34;&#xA;height=&#34;686&#34;&#xA;title=&#34;*A textbox variable that lets you set the variable value based on whatever you type in.*&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;figcaption class=&#34;w-100p caption text-gray-13 &#34;&gt;&lt;em&gt;A textbox variable that lets you set the variable value based on whatever you type in.&lt;/em&gt;&lt;/figcaption&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;h3 id=&#34;constant-variables&#34;&gt;Constant variables&lt;/h3&gt;&#xA;&lt;p&gt;Constant variables are unique in that they do not appear on the dashboard and their values can only be changed within the dashboard settings panel by an admin or editor. So, you might ask: if these variables aren’t visible or changeable, why have them at all?&lt;/p&gt;&#xA;&lt;p&gt;Constants are useful when you have a value that is usually static, but may be changed occasionally. For example, you might be slowly rolling out a service in multiple regions. In a dashboard that shows the infrastructure for that service, you’d want to exclude regions where that service doesn’t yet exist. Manually putting the region filter into every query is tedious and error-prone, so you could use a constant instead. As you add regions, you could add them to the constant in one place and all queries could update immediately.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 679px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link captioned&#34;&#xA;href=&#34;/media/blog/grafana-variables/grafana-variables_constant-variables.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload mb-0&#34;&#xA;data-src=&#34;/media/blog/grafana-variables/grafana-variables_constant-variables.png&#34;data-srcset=&#34;/media/blog/grafana-variables/grafana-variables_constant-variables.png?w=320 320w, /media/blog/grafana-variables/grafana-variables_constant-variables.png?w=550 550w, /media/blog/grafana-variables/grafana-variables_constant-variables.png?w=750 750w, /media/blog/grafana-variables/grafana-variables_constant-variables.png?w=900 900w, /media/blog/grafana-variables/grafana-variables_constant-variables.png?w=1040 1040w, /media/blog/grafana-variables/grafana-variables_constant-variables.png?w=1240 1240w, /media/blog/grafana-variables/grafana-variables_constant-variables.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;A screenshot of a constant variable.&#34;&#xA;width=&#34;679&#34;&#xA;height=&#34;625&#34;&#xA;title=&#34;*A constant variable can’t be changed when viewing the dashboard. The value set here is what will be used in your queries.*&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/grafana-variables/grafana-variables_constant-variables.png&#34;&#xA;alt=&#34;A screenshot of a constant variable.&#34;&#xA;width=&#34;679&#34;&#xA;height=&#34;625&#34;&#xA;title=&#34;*A constant variable can’t be changed when viewing the dashboard. The value set here is what will be used in your queries.*&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;figcaption class=&#34;w-100p caption text-gray-13 &#34;&gt;&lt;em&gt;A constant variable can’t be changed when viewing the dashboard. The value set here is what will be used in your queries.&lt;/em&gt;&lt;/figcaption&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;h3 id=&#34;data-source-variables&#34;&gt;Data source variables&lt;/h3&gt;&#xA;&lt;p&gt;Sometimes you have data in multiple repositories. You might have development and production environments, each with their own separate Prometheus backend, or you might have a SQL database for each service that you run. It would be nice to have one dashboard that can support all of these, but let you switch between backend databases when looking at the dashboard.&lt;/p&gt;&#xA;&lt;p&gt;Data source queries enable this. You select the type of data source that you want as the target (e.g., MySQL, Influx, or Prometheus) and then can switch between them in the dashboard. Any panel that uses a data source variable as its backend data source will be updated automatically when you change the variable.&lt;/p&gt;&#xA;&lt;p&gt;You can apply more advanced filtering when defining the variable using regular expressions. For example, you might want to remove unrelated data sources. If you have an application dashboard where all the application databases start with “APP,” you can apply a regular expression like “^APP.*” to filter out anything that doesn’t start with “APP.”&lt;/p&gt;&#xA;&lt;p&gt;Note that this only works when the data sources are of the same type. You can’t mix different data sources, such as Prometheus and PostgreSQL, because they have different (and incompatible) query languages.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 694px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link captioned&#34;&#xA;href=&#34;/media/blog/grafana-variables/grafana-variables_data-source-variable.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload mb-0&#34;&#xA;data-src=&#34;/media/blog/grafana-variables/grafana-variables_data-source-variable.png&#34;data-srcset=&#34;/media/blog/grafana-variables/grafana-variables_data-source-variable.png?w=320 320w, /media/blog/grafana-variables/grafana-variables_data-source-variable.png?w=550 550w, /media/blog/grafana-variables/grafana-variables_data-source-variable.png?w=750 750w, /media/blog/grafana-variables/grafana-variables_data-source-variable.png?w=900 900w, /media/blog/grafana-variables/grafana-variables_data-source-variable.png?w=1040 1040w, /media/blog/grafana-variables/grafana-variables_data-source-variable.png?w=1240 1240w, /media/blog/grafana-variables/grafana-variables_data-source-variable.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;A screenshot of a data source variable.&#34;&#xA;width=&#34;694&#34;&#xA;height=&#34;1067&#34;&#xA;title=&#34;*An example data source variable that selects Prometheus backends. Note that this is filtered with a regular expression to show only data sources whose names end with “prom.”*&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/grafana-variables/grafana-variables_data-source-variable.png&#34;&#xA;alt=&#34;A screenshot of a data source variable.&#34;&#xA;width=&#34;694&#34;&#xA;height=&#34;1067&#34;&#xA;title=&#34;*An example data source variable that selects Prometheus backends. Note that this is filtered with a regular expression to show only data sources whose names end with “prom.”*&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;figcaption class=&#34;w-100p caption text-gray-13 &#34;&gt;&lt;em&gt;An example data source variable that selects Prometheus backends. Note that this is filtered with a regular expression to show only data sources whose names end with “prom.”&lt;/em&gt;&lt;/figcaption&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;h3 id=&#34;interval-variables&#34;&gt;Interval variables&lt;/h3&gt;&#xA;&lt;p&gt;An interval variable behaves similarly to the default time selector on the dashboard. It lets you select a period of time, in addition to the default time range on the dashboard. Like other variables, this can be used anywhere in your query where a time range makes sense — it doesn’t override &lt;a href=&#34;/docs/grafana/latest/dashboards/use-dashboards/?pg=blog&amp;amp;plcmt=body-txt/#time-units-and-relative-ranges&#34;&gt;the default time selector&lt;/a&gt; on the dashboard.&lt;/p&gt;&#xA;&lt;p&gt;Interval variables are useful to compare data from one time period to another. For example, you might want to look at current data, but see how the same environment looked an hour, day, or week ago. With interval variables, you can easily switch the historical period on some queries without changing the main time range on the dashboard.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 679px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link captioned&#34;&#xA;href=&#34;/media/blog/grafana-variables/grafana-variables_interval-variables.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload mb-0&#34;&#xA;data-src=&#34;/media/blog/grafana-variables/grafana-variables_interval-variables.png&#34;data-srcset=&#34;/media/blog/grafana-variables/grafana-variables_interval-variables.png?w=320 320w, /media/blog/grafana-variables/grafana-variables_interval-variables.png?w=550 550w, /media/blog/grafana-variables/grafana-variables_interval-variables.png?w=750 750w, /media/blog/grafana-variables/grafana-variables_interval-variables.png?w=900 900w, /media/blog/grafana-variables/grafana-variables_interval-variables.png?w=1040 1040w, /media/blog/grafana-variables/grafana-variables_interval-variables.png?w=1240 1240w, /media/blog/grafana-variables/grafana-variables_interval-variables.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;A screenshot of an interval variable.&#34;&#xA;width=&#34;679&#34;&#xA;height=&#34;835&#34;&#xA;title=&#34;*Interval variables can be set to time ranges that make sense for your data. They use the same syntax for selecting time ranges as the default time picker.*&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/grafana-variables/grafana-variables_interval-variables.png&#34;&#xA;alt=&#34;A screenshot of an interval variable.&#34;&#xA;width=&#34;679&#34;&#xA;height=&#34;835&#34;&#xA;title=&#34;*Interval variables can be set to time ranges that make sense for your data. They use the same syntax for selecting time ranges as the default time picker.*&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;figcaption class=&#34;w-100p caption text-gray-13 &#34;&gt;&lt;em&gt;Interval variables can be set to time ranges that make sense for your data. They use the same syntax for selecting time ranges as the default time picker.&lt;/em&gt;&lt;/figcaption&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;h3 id=&#34;ad-hoc-filter-variables&#34;&gt;Ad hoc filter variables&lt;/h3&gt;&#xA;&lt;p&gt;Certain data sources support automatic filtering, similar to query variables, but don’t require you to actually write a query. If you’re using a data source like Prometheus, Grafana Loki, InfluxDB, or Elasticsearch, ad hoc filters are an easy way to filter data — again, without having to write a query.&lt;/p&gt;&#xA;&lt;p&gt;If a data source doesn’t support ad hoc filters, Grafana will notify you.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 573px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link captioned&#34;&#xA;href=&#34;/media/blog/grafana-variables/grafana-variables_ad-hoc.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload mb-0&#34;&#xA;data-src=&#34;/media/blog/grafana-variables/grafana-variables_ad-hoc.png&#34;data-srcset=&#34;/media/blog/grafana-variables/grafana-variables_ad-hoc.png?w=320 320w, /media/blog/grafana-variables/grafana-variables_ad-hoc.png?w=550 550w, /media/blog/grafana-variables/grafana-variables_ad-hoc.png?w=750 750w, /media/blog/grafana-variables/grafana-variables_ad-hoc.png?w=900 900w, /media/blog/grafana-variables/grafana-variables_ad-hoc.png?w=1040 1040w, /media/blog/grafana-variables/grafana-variables_ad-hoc.png?w=1240 1240w, /media/blog/grafana-variables/grafana-variables_ad-hoc.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;A screenshot of an ad hoc filter variable.&#34;&#xA;width=&#34;573&#34;&#xA;height=&#34;801&#34;&#xA;title=&#34;*MySQL doesn’t currently have ad hoc filtering support, so Grafana will let you know this if you try to add that variable to your dashboard.*&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/grafana-variables/grafana-variables_ad-hoc.png&#34;&#xA;alt=&#34;A screenshot of an ad hoc filter variable.&#34;&#xA;width=&#34;573&#34;&#xA;height=&#34;801&#34;&#xA;title=&#34;*MySQL doesn’t currently have ad hoc filtering support, so Grafana will let you know this if you try to add that variable to your dashboard.*&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;figcaption class=&#34;w-100p caption text-gray-13 &#34;&gt;&lt;em&gt;MySQL doesn’t currently have ad hoc filtering support, so Grafana will let you know this if you try to add that variable to your dashboard.&lt;/em&gt;&lt;/figcaption&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;h3 id=&#34;chained-variables&#34;&gt;Chained variables&lt;/h3&gt;&#xA;&lt;p&gt;Sometimes you want to use the value of one variable in the query for another. For example, you might want to select a region and then an application to filter your data. If not all applications are available in all regions, you want to only show the applications that are available for the region you’ve selected.&lt;/p&gt;&#xA;&lt;p&gt;To do this, you can use the region variable in the query for the application variable; this is often referred to as chaining, or a chained variable. It works exactly the same as using a variable in a dashboard panel — just reference the variable name, like ‘$region’.&lt;/p&gt;&#xA;&lt;p&gt;To learn more, please visit our &lt;a href=&#34;/docs/grafana/latest/dashboards/variables/add-template-variables/?pg=blog&amp;amp;plcmt=body-txt/#chained-variables&#34;&gt;Grafana variable documentation&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;using-variables-with-data-links&#34;&gt;Using variables with data links&lt;/h2&gt;&#xA;&lt;p&gt;As we’ve covered, variables show up as a set of dropdown lists or text boxes at the top of a dashboard. But when filtering a dashboard, you often have to sort through a long list of items.&lt;/p&gt;&#xA;&lt;p&gt;Wouldn’t it be nice to be able to just click on a value in a panel on the dashboard to filter data quickly? Rather than sort through a long list, you could just click on the value you care about when looking at the data. This is exactly where &lt;a href=&#34;/docs/grafana/latest/panels-visualizations/configure-data-links/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;data links&lt;/a&gt; come in.&lt;/p&gt;&#xA;&lt;p&gt;Imagine we have a dashboard that displays facts about different countries: the languages spoken, major cities, and demographics. There are 195 countries in the world, and even more when you start to include territories and protectorates. Scrolling through a dropdown that long could take awhile. Instead, you can use data links to make those countries clickable to change the variable directly in the dashboard.&lt;/p&gt;&#xA;&lt;p&gt;In this section, we’ll walk through how to do this, and you can also see an example dashboard on &lt;a href=&#34;https://play.grafana.org/d/edvi435reeio0c/clickable-values-to-set-variables&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;play.grafana.org&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h3 id=&#34;setting-variables-with-data-links&#34;&gt;Setting variables with data links&lt;/h3&gt;&#xA;&lt;p&gt;Let’s start with some data in MySQL, though this works for any data source.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 1273px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;/media/blog/grafana-variables/grafana-variables_countries-dashboard-screenshot.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;/media/blog/grafana-variables/grafana-variables_countries-dashboard-screenshot.png&#34;data-srcset=&#34;/media/blog/grafana-variables/grafana-variables_countries-dashboard-screenshot.png?w=320 320w, /media/blog/grafana-variables/grafana-variables_countries-dashboard-screenshot.png?w=550 550w, /media/blog/grafana-variables/grafana-variables_countries-dashboard-screenshot.png?w=750 750w, /media/blog/grafana-variables/grafana-variables_countries-dashboard-screenshot.png?w=900 900w, /media/blog/grafana-variables/grafana-variables_countries-dashboard-screenshot.png?w=1040 1040w, /media/blog/grafana-variables/grafana-variables_countries-dashboard-screenshot.png?w=1240 1240w, /media/blog/grafana-variables/grafana-variables_countries-dashboard-screenshot.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;A sample dashboard showing data about different countries.&#34;&#xA;width=&#34;1273&#34;&#xA;height=&#34;917&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/grafana-variables/grafana-variables_countries-dashboard-screenshot.png&#34;&#xA;alt=&#34;A sample dashboard showing data about different countries.&#34;&#xA;width=&#34;1273&#34;&#xA;height=&#34;917&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;This dashboard shows country and city demographics. There’s a lot of data, so we want to be able to zoom in and look at just a single country at a time. Let’s add a dashboard variable to filter this view.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 1273px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;/media/blog/grafana-variables/grafana-variables_variables-for-countries-dashboard.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;/media/blog/grafana-variables/grafana-variables_variables-for-countries-dashboard.png&#34;data-srcset=&#34;/media/blog/grafana-variables/grafana-variables_variables-for-countries-dashboard.png?w=320 320w, /media/blog/grafana-variables/grafana-variables_variables-for-countries-dashboard.png?w=550 550w, /media/blog/grafana-variables/grafana-variables_variables-for-countries-dashboard.png?w=750 750w, /media/blog/grafana-variables/grafana-variables_variables-for-countries-dashboard.png?w=900 900w, /media/blog/grafana-variables/grafana-variables_variables-for-countries-dashboard.png?w=1040 1040w, /media/blog/grafana-variables/grafana-variables_variables-for-countries-dashboard.png?w=1240 1240w, /media/blog/grafana-variables/grafana-variables_variables-for-countries-dashboard.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;A screenshot of variables for an example dashboard.&#34;&#xA;width=&#34;1273&#34;&#xA;height=&#34;1274&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/grafana-variables/grafana-variables_variables-for-countries-dashboard.png&#34;&#xA;alt=&#34;A screenshot of variables for an example dashboard.&#34;&#xA;width=&#34;1273&#34;&#xA;height=&#34;1274&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;This gives us a list of all country codes, which we can use to filter queries on the dashboard. (Note that we’re adding a custom ‘%’ value for the “All” option. This is because SQL uses ‘%’ as a wildcard character that will match anything. This way, if we still want to see all the countries at once in our dashboard, we can use this to do that.)&lt;/p&gt;&#xA;&lt;p&gt;We can use that variable in our queries to sort based on what we’ve selected.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 1273px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;/media/blog/grafana-variables/grafana-variables_mysql-data-source.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;/media/blog/grafana-variables/grafana-variables_mysql-data-source.png&#34;data-srcset=&#34;/media/blog/grafana-variables/grafana-variables_mysql-data-source.png?w=320 320w, /media/blog/grafana-variables/grafana-variables_mysql-data-source.png?w=550 550w, /media/blog/grafana-variables/grafana-variables_mysql-data-source.png?w=750 750w, /media/blog/grafana-variables/grafana-variables_mysql-data-source.png?w=900 900w, /media/blog/grafana-variables/grafana-variables_mysql-data-source.png?w=1040 1040w, /media/blog/grafana-variables/grafana-variables_mysql-data-source.png?w=1240 1240w, /media/blog/grafana-variables/grafana-variables_mysql-data-source.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;A screenshot showing example variables in queries. &#34;&#xA;width=&#34;1273&#34;&#xA;height=&#34;912&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/grafana-variables/grafana-variables_mysql-data-source.png&#34;&#xA;alt=&#34;A screenshot showing example variables in queries. &#34;&#xA;width=&#34;1273&#34;&#xA;height=&#34;912&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;So far, this is pretty standard. We have a list of country codes in a dropdown box and can select the one we want. But there are a lot of countries! Ideally, we could just click on the relevant entry in the larger table and immediately filter to that country.&lt;/p&gt;&#xA;&lt;p&gt;So, let’s use data links to set that variable. Start by picking a table panel and adding a &lt;a href=&#34;/docs/grafana/latest/panels-visualizations/configure-overrides/&#34;&gt;field override&lt;/a&gt; on the country code field.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 1273px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;/media/blog/grafana-variables/grafana-variables_country-code-field.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;/media/blog/grafana-variables/grafana-variables_country-code-field.png&#34;data-srcset=&#34;/media/blog/grafana-variables/grafana-variables_country-code-field.png?w=320 320w, /media/blog/grafana-variables/grafana-variables_country-code-field.png?w=550 550w, /media/blog/grafana-variables/grafana-variables_country-code-field.png?w=750 750w, /media/blog/grafana-variables/grafana-variables_country-code-field.png?w=900 900w, /media/blog/grafana-variables/grafana-variables_country-code-field.png?w=1040 1040w, /media/blog/grafana-variables/grafana-variables_country-code-field.png?w=1240 1240w, /media/blog/grafana-variables/grafana-variables_country-code-field.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;A screenshot of a field override.&#34;&#xA;width=&#34;1273&#34;&#xA;height=&#34;912&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/grafana-variables/grafana-variables_country-code-field.png&#34;&#xA;alt=&#34;A screenshot of a field override.&#34;&#xA;width=&#34;1273&#34;&#xA;height=&#34;912&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;In that override, we will add a data link, which will make the content in that field a clickable URL.&lt;/p&gt;&#xA;&lt;p&gt;Now for the magic: for the URL, we’ll use the URL of the dashboard we’re currently editing, and add the value of the variable to the request. The variable will be called “var-country” because we named the dashboard variable “country”. (Variables in Grafana URLs always have “var-” in front of whatever you name them.)&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;em&gt;You might have noticed that variables get set in the URL when they’re changed. If not, open a dashboard with some variables and try changing the values. If you look in the URL bar, you’ll see the variables change there as you select them. You might need to click into it to highlight the full URL, as some browsers hide this by default.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;We want to set the variable to the value that the viewer is clicking on. So, hit &lt;strong&gt;control+space&lt;/strong&gt; (or &lt;strong&gt;command+space&lt;/strong&gt; on a Mac) to bring up the variable picker and select the CountryCode field.&lt;/p&gt;&#xA;&lt;p&gt;Once this is done, we’ll have something that looks like this as our variable:&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 756px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;/media/blog/grafana-variables/grafana-variables_URLs.png&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;/media/blog/grafana-variables/grafana-variables_URLs.png&#34;data-srcset=&#34;/media/blog/grafana-variables/grafana-variables_URLs.png?w=320 320w, /media/blog/grafana-variables/grafana-variables_URLs.png?w=550 550w, /media/blog/grafana-variables/grafana-variables_URLs.png?w=750 750w, /media/blog/grafana-variables/grafana-variables_URLs.png?w=900 900w, /media/blog/grafana-variables/grafana-variables_URLs.png?w=1040 1040w, /media/blog/grafana-variables/grafana-variables_URLs.png?w=1240 1240w, /media/blog/grafana-variables/grafana-variables_URLs.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;A screenshot of an example variable.&#34;&#xA;width=&#34;756&#34;&#xA;height=&#34;373&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/grafana-variables/grafana-variables_URLs.png&#34;&#xA;alt=&#34;A screenshot of an example variable.&#34;&#xA;width=&#34;756&#34;&#xA;height=&#34;373&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;We’d then repeat these steps for all the panels on our dashboard.&lt;/p&gt;&#xA;&lt;p&gt;Once finished, we’ll have clickable links that will point to the same dashboard, letting the dashboard update the variable by clicking on the table.&lt;/p&gt;&#xA;&lt;figure&#xA;class=&#34;figure-wrapper figure-wrapper__lightbox w-100p &#34;&#xA;style=&#34;max-width: 1271px;&#34;&#xA;itemprop=&#34;associatedMedia&#34;&#xA;itemscope=&#34;&#34;&#xA;itemtype=&#34;http://schema.org/ImageObject&#34;&#xA;&gt;&#xA;&lt;a&#xA;class=&#34;lightbox-link&#34;&#xA;href=&#34;/media/blog/grafana-variables/grafana-variables_countries-dashboard.gif&#34;&#xA;itemprop=&#34;contentUrl&#34;&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;class=&#34;lazyload &#34;&#xA;data-src=&#34;/media/blog/grafana-variables/grafana-variables_countries-dashboard.gif&#34;alt=&#34;A gif of an example dashboard.&#34;&#xA;width=&#34;1271&#34;&#xA;height=&#34;909&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;img&#xA;src=&#34;/media/blog/grafana-variables/grafana-variables_countries-dashboard.gif&#34;&#xA;alt=&#34;A gif of an example dashboard.&#34;&#xA;width=&#34;1271&#34;&#xA;height=&#34;909&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;Now we can use our dashboard to zoom into the data we care about without having to search through a long list.&lt;/p&gt;&#xA;&lt;h1 id=&#34;learn-more&#34;&gt;Learn more&lt;/h1&gt;&#xA;&lt;p&gt;Variables are a powerful feature of Grafana. Using them can make your dashboards interactive, letting you reuse one dashboard to show a variety of information. Adding variables also lets dashboard viewers focus on the data that’s important to them, excluding anything that’s irrelevant.&lt;/p&gt;&#xA;&lt;p&gt;To learn more about variables, you can check out our &lt;a href=&#34;/docs/grafana/latest/dashboards/variables/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;documentation&lt;/a&gt; and also visit our &lt;a href=&#34;https://community.grafana.com/c/support/33&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Grafana community forums&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;/products/cloud/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Cloud&lt;/a&gt; is the easiest way to get started with metrics, logs, traces, and dashboards. We have a generous forever-free tier and plans for every use case. &lt;a href=&#34;/auth/sign-up/create-user/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Sign up for free now&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;】&lt;p&gt;构建 Grafana 仪表板时的常见模式是同时表示多个项目的数据，例如同时监控数百台服务器。但如果其中一个服务器出现问题怎么办？您希望能够快速识别该单个服务器，并深入了解详细信息，而不会受到所有其他系统的干扰。在 Grafana 中，仪表板&lt;em&gt;变量&lt;/em&gt;是过滤数据和关注对您最重要的信息的好方法。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;/docs/grafana/latest/dashboards/variables/?pg=blog&amp;plcmt=body-txt&#34;&gt;变量&lt;/a&gt;使您的 Grafana 仪表板动态而不是静态。它们允许您过滤和搜索您最关心的数据，而无需编辑查询或重建仪表板。它们是 Grafana 中最强大的功能之一，可以让您快速轻松地找到所需的数据。&lt;/p&gt;&#xA;&lt;div&#xA;类 =“youtube-lazyload 响应视频”&#xA;数据嵌入=“mMUJ3iwIYwc”&#xA;data-url=&#34;https://www.youtube.com/embed/mMUJ3iwIYwc?autoplay=1&amp;rel=0&#34;&#xA;数据标题=“YouTube 视频”&#xA;&gt;&#xA;&lt;div class=&#34;play-button&#34;&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;让我们探索 Grafana 变量的工作原理以及何时、何地以及如何使用它们。&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-are-grafana-variables&#34;&gt;什么是 Grafana 变量？&lt;/h2&gt;&#xA;&lt;p&gt;通过变量，您可以设置可传递到&lt;a href=&#34;/docs/grafana/latest/panels-visualizations/query-transform-data/?pg=blog&amp;plcmt=body-txt&#34;&gt;查询的值&lt;/a &gt; 或&lt;a href=&#34;/docs/grafana/latest/panels-visualizations/query-transform-data/transform-data/?pg=blog&amp;plcmt=body-txt&#34;&gt;转换&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;要重新审视我们之前的服务器示例，必须为要监控的每台服务器构建一个仪表板将是一件很痛苦的事情。通过使用变量，您可以创建一个通用仪表板并从下拉列表中选择要监控的特定服务器。&lt;/p&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：1240px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接标题”&#xA;href=&#34;/media/blog/grafana-variables/grafana-variables_dropdown.png&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“lazyload mb-0”&#xA;data-src =“/media/blog/grafana-variables/grafana-variables_dropdown.png”data-srcset =“/media/blog/grafana-variables/grafana-variables_dropdown.png？w = 320 320w，/media/blog/ grafana-variables/grafana-variables_dropdown.png？w=550 550w，/media/blog/grafana-variables/grafana-variables_dropdown.png？w=750 750w，/media/blog/grafana-variables/grafana-variables_dropdown.png？ w=900 900w，/media/blog/grafana-variables/grafana-variables_dropdown.png？w=1040 1040w，/media/blog/grafana-variables/grafana-variables_dropdown.png？w=1240 1240w，/media/blog/ grafana-variables/grafana-variables_dropdown.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;显示变量下拉列表的屏幕截图。&#34;&#xA;宽度=“1240”&#xA;高度=“394”&#xA;title=&#34;*变量在仪表板顶部显示为下拉列表。*&#34;&#xA;/&gt;&#xA;&lt;noscript&gt;&#xA;&lt;图片&#xA;src =“/media/blog/grafana-variables/grafana-variables_dropdown.png”&#xA;alt=&#34;显示变量下拉列表的屏幕截图。&#34;&#xA;宽度=“1240”&#xA;高度=“394”&#xA;title=&#34;*变量在仪表板顶部显示为下拉列表。*&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;figcaption class=&#34;w-100p title text-gray-13 &#34;&gt;&lt;em&gt;变量在仪表板顶部显示为下拉列表。&lt;/em&gt;&lt;/figcaption&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/em&gt; &lt;em&gt;要在 Grafana 中创建和管理变量，您需要 &lt;a href=&#34;/docs/grafana/latest/administration/roles-and -permissions/?pg=blog&amp;plcmt=body-txt/#organization-roles&#34;&gt;编辑或管理员权限&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;除了下拉列表之外，变量还可以显示为仪表板顶部的文本框，以便于访问（不过，可以选择从视图中隐藏）。&lt;/p&gt;&#xA;&lt;p&gt;Grafana 中的变量就像计算机程序或数学公式中的变量。它们是一个占位符，您可以将其放入查询中，当查询运行时，该占位符将被变量的实际值替换。&lt;/p&gt;&#xA;&lt;p&gt;默认情况下，变量一次只有一个值。但是，您可以设置变量以允许选择多个值，然后 Grafana 将以对您的数据源有意义的格式传递这些值。例如，如果您使用SQL数据源，Grafana将使用逗号分隔多个值；如果你使用Prometheus，Grafana将使用管道符（|）来分隔它们；等等。&lt;/p&gt;&#xA;&lt;p&gt;默认情况下，变量写作&lt;code&gt;$varname&lt;/code&gt;。还有更多高级用途超出了本博客文章的范围。请访问我们的 &lt;a href=&#34;/docs/grafana/latest/dashboards/variables/variable-syntax/?pg=blog&amp;plcmt=body-txt&#34;&gt;Grafana 变量文档&lt;/a&gt;了解更多信息。&lt;/p&gt;&#xA;&lt;h2 id=&#34;types-of-variables-and-when-to-use-them&#34;&gt;变量的类型以及何时使用它们&lt;/h2&gt;&#xA;&lt;p&gt;Grafana 中有两种主要类型的变量：&lt;strong&gt;全局变量&lt;/strong&gt;和&lt;strong&gt;用户定义变量&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;/docs/grafana/latest/dashboards/variables/add-template-variables/?pg=blog&amp;plcmt=body-txt/#global-variables&#34;&gt;全局变量&lt;/a&gt;是内置的并自动填充。例如，&lt;code&gt;${__user}&lt;/code&gt; 包含当前登录用户的名称。所有仪表板都存在这些，您无需执行任何特殊操作即可创建它们。&lt;/p&gt;&#xA;&lt;p&gt;用户定义变量是您创建并设置值的变量。下面的所有示例都是用户定义的变量，也可以在 &lt;a href=&#34;https://play.grafana.org/d/ddvzyhqvzw83kf/dashboard-variables&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;play 上找到.grafana.org&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h3 id=&#34;query-variables&#34;&gt;查询变量&lt;/h3&gt;&#xA;&lt;p&gt;能够从数据中已知的值列表中进行选择非常有用。例如，在显示有关服务器信息的仪表板上，您可以尝试按服务器名称进行过滤，但始终存在拼写错误的风险。相反，你可以使用 dropdown 包含实际服务器名称的列表。&lt;/p&gt;&#xA;&lt;p&gt;查询变量可让您使用直接来自数据源的值填充下拉列表。为此，您需要编写一个返回这些值的查询。您编写的实际查询将根据您的数据源而有所不同 - 例如，SQL 查询看起来与 PromQL 或 Influx 查询不同。&lt;/p&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：686px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接标题”&#xA;href=&#34;/media/blog/grafana-variables/grafana-variables_query-variables.png&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“lazyload mb-0”&#xA;data-src =“/media/blog/grafana-variables/grafana-variables_query-variables.png”data-srcset =“/media/blog/grafana-variables/grafana-variables_query-variables.png？w = 320 320w，/媒体/博客/grafana-variables/grafana-variables_query-variables.png？w=550 550w，/media/blog/grafana-variables/grafana-variables_query-variables.png？w=750 750w，/media/blog/grafana-变量/grafana-variables_query-variables.png？w=900 900w，/media/blog/grafana-variables/grafana-variables_query-variables.png？w=1040 1040w，/media/blog/grafana-variables/grafana-variables_query-变量.png?w=1240 1240w，/media/blog/grafana-variables/grafana-variables_query-variables.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;查询变量的屏幕截图。&#34;&#xA;宽度=“686”&#xA;高度=“819”&#xA;title=&#34;*从 Prometheus 选择标签值的查询变量。这将返回所选标签的所有标签值。*&#34;&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src =“/media/blog/grafana-variables/grafana-variables_query-variables.png”&#xA;alt=&#34;查询变量的屏幕截图。&#34;&#xA;宽度=“686”&#xA;高度=“819”&#xA;title=&#34;*从 Prometheus 选择标签值的查询变量。这将返回所选标签的所有标签值。*&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;figcaption class=&#34;w-100p title text-gray-13 &#34;&gt;&lt;em&gt;从 Prometheus 选择标签值的查询变量。这将返回选定标签的所有标签值。&lt;/em&gt;&lt;/figcaption&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;块引用&gt;&#xA;&lt;p&gt;&lt;em&gt;在我们的文档中，您将看到对&lt;a href=&#34;/docs/grafana/latest/dashboards/variables/?pg=blog&amp;plcmt=body-txt/#templates&#34;&gt;模板&lt;/a&gt;的引用当谈论变量时。模板就是任何使用变量的查询。例如，如果您正在管理仪表板来监控多台服务器，则可以为每台服务器创建一个仪表板。或者，您可以创建一个仪表板并使用带有模板查询的面板。&lt;/em&gt;&lt;/p&gt;&#xA;&lt;/块引用&gt;&#xA;&lt;h3 id=&#34;custom-variables&#34;&gt;自定义变量&lt;/h3&gt;&#xA;&lt;p&gt;自定义变量与查询变量类似，它们提供一个下拉列表供您选择。但是，您不是从数据源获取值，而是手动设置列表的值。&lt;/p&gt;&#xA;&lt;p&gt;您可以通过多种方式处理自定义变量。最简单的方法是写出一个以逗号分隔的值列表，其中包含您希望能够看到的值从中选择。&lt;/p&gt;&#xA;&lt;p&gt;您还可以提供键/值对，这可以提供更加用户友好的数据视图。例如，您可能有难以记住的内部应用程序代码。在这种情况下，您可以使用更友好的名称作为键，然后使用应用代码作为值。&lt;/p&gt;&#xA;&lt;p&gt;键/值对由 &lt;code&gt;:&lt;/code&gt; 字符分隔。因此，对于应用程序列表，您可能会看到如下内容：&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;按钮 x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;将代码复制到剪贴板&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;复制&lt;/span&gt;&#xA;&lt;/按钮&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;购物车服务：CRTS005Q，结帐服务：CK614，评论服务：RV115T&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;在此示例中，您将看到名称“Cart Service”，但查询将使用实际的应用程序代码，例如“CRTS005Q”。&lt;/p&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：679px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接标题”&#xA;href=&#34;/media/blog/grafana-variables/grafana-variables_custom-variables.png&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“lazyload mb-0”&#xA;data-src =“/media/blog/grafana-variables/grafana-variables_custom-variables.png”data-srcset =“/media/blog/grafana-variables/grafana-variables_custom-variables.png？w = 320 320w，/媒体/博客/grafana-variables/grafana-variables_custom-variables.png？w=550 550w，/media/blog/grafana-variables/grafana-variables_custom-variables.png？w=750 750w，/media/blog/grafana-变量/grafana-variables_custom-variables.png？w=900 900w，/media/blog/grafana-variables/grafana-variables_custom-variables.png？w=1040 1040w，/media/blog/grafana-variables/grafana-variables_custom-变量.png?w=1240 1240w，/media/blog/grafana-variables/grafana-variables_custom-variables.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;自定义变量的屏幕截图。&#34;&#xA;宽度=“679”&#xA;高度=“887”&#xA;title=&#34;*自定义变量，定义四个可能的值以供选择。*&#34;&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src =“/media/blog/grafana-variables/grafana-variables_custom-variables.png”&#xA;alt=&#34;自定义变量的屏幕截图。&#34;&#xA;宽度=“679”&#xA;高度=“887”&#xA;title=&#34;*自定义变量，定义四个可能的值以供选择。*&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;figcaption class=&#34;w-100p title text-gray-13 &#34;&gt;&lt;em&gt;自定义变量，定义四个可能的值以供选择。&lt;/em&gt;&lt;/figcaption&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;h3 id=&#34;textbox-variables&#34;&gt;文本框变量&lt;/h3&gt;&#xA;&lt;p&gt;文本框变量会在仪表板顶部创建一个框，您可以在其中输入文本。这对于日志中的自定义搜索或类似数据（您事先不知道要查找什么）非常有用。&lt;/p&gt;&#xA;&lt;p&gt;例如，您可能有一个数据库，其中包含有关公司中所有员工的信息，以及用于查看有关他们的信息的仪表板。可能有数以万计的名称，因此在查询变量中创建下拉列表并不是特别有用。相反，您可以使用一个文本框，在其中输入一个姓名，该姓名将在 SQL 查询中使用，以查找您要查找的员工。&lt;/p&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：679px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接标题”&#xA;href=&#34;/media/blog/grafana-variables/grafana-variables_textbox-variables.png&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“lazyload mb-0”&#xA;data-src =“/media/blog/grafana-variables/grafana-variables_textbox-variables.png”data-srcset =“/media/blog/grafana-variables/grafana-variables_textbox-variables.png？w = 320 320w，/媒体/博客/grafana-variables/grafana-variables_textbox-variables.png？w=550 550w，/media/blog/grafana-variables/grafana-variables_textbox-variables.png？w=750 750w，/media/blog/grafana-变量/grafana-variables_textbox-variables.png？w=900 900w，/media/blog/grafana-variables/grafana-variables_textbox-variables.png？w=1040 1040w，/media/blog/grafana-variables/grafana-variables_textbox-变量.png?w=1240 1240w，/media/blog/grafana-variables/grafana-variables_textbox-variables.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;文本框变量的屏幕截图。&#34;&#xA;宽度=“679”&#xA;高度=“686”&#xA;title=&#34;*一个文本框变量，可让您根据输入的内容设置变量值。*&#34;&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src =“/media/blog/grafana-variables/grafana-variables_textbox-variables.png”&#xA;alt=&#34;文本框变量的屏幕截图。&#34;&#xA;宽度=“679”&#xA;高度=“686”&#xA;title=&#34;*一个文本框变量，可让您根据输入的内容设置变量值。*&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;figcaption class=&#34;w-100p title text-gray-13 &#34;&gt;&lt;em&gt;一个文本框变量，可让您根据输入的内容设置变量值。&lt;/em&gt;&lt;/figcaption&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;h3 id=&#34;constant-variables&#34;&gt;常量变量&lt;/h3&gt;&#xA;&lt;p&gt;常量变量的独特之处在于它们不会出现在仪表板上，并且它们的值只能由管理员或编辑者在仪表板设置面板中更改。因此，您可能会问：如果这些变量不可见或不可更改，为什么还要有它们呢？&lt;/p&gt;&#xA;&lt;p&gt;当您的值通常是静态的但有时可能会更改时，常量非常有用。例如，您可能会在多个区域慢慢推出一项服务。在显示该服务的基础设施的仪表板中，您需要排除该服务尚不存在的区域。手动将区域过滤器放入每个查询中既乏味又容易出错，因此您可以使用常量来代替。添加区域时，您可以将它们添加到一处的常量中，并且所有查询都可以立即更新。&lt;/p&gt;&#xA;&lt;图&#xA;类=“图形包装图”ure-wrapper__lightbox w-100p“&#xA;样式=“最大宽度：679px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接标题”&#xA;href=&#34;/media/blog/grafana-variables/grafana-variables_constant-variables.png&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“lazyload mb-0”&#xA;data-src=&#34;/media/blog/grafana-variables/grafana-variables_constant-variables.png&#34;data-srcset=&#34;/media/blog/grafana-variables/grafana-variables_constant-variables.png?w=320 320w, /media/blog/grafana-variables/grafana-variables_constant-variables.png?w=550 550w, /media/blog/grafana-variables/grafana-variables_constant-variables.png?w=750 750w, /media/blog/grafana-variables/grafana-variables_constant-variables.png?w=900 900w, /media/blog/grafana-variables/grafana-variables_constant-variables.png?w=1040 1040w, /media/blog/grafana-variables/grafana-variables_constant-variables.png?w=1240 1240w，/media/blog/grafana-variables/grafana-variables_constant-variables.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;常量变量的屏幕截图。&#34;&#xA;宽度=“679”&#xA;高度=“625”&#xA;title=&#34;*查看仪表板时无法更改常量变量。此处设置的值将在您的查询中使用。*&#34;&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src =“/media/blog/grafana-variables/grafana-variables_constant-variables.png”&#xA;alt=&#34;常量变量的屏幕截图。&#34;&#xA;宽度=“679”&#xA;高度=“625”&#xA;title=&#34;*查看仪表板时无法更改常量变量。此处设置的值将在您的查询中使用。*&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;figcaption class=&#34;w-100p title text-gray-13 &#34;&gt;&lt;em&gt;查看仪表板时无法更改常量变量。此处设置的值将在您的查询中使用。&lt;/em&gt;&lt;/figcaption&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;h3 id=&#34;data-source-variables&#34;&gt;数据源变量&lt;/h3&gt;&#xA;&lt;p&gt;有时您的数据位于多个存储库中。您可能有开发和生产环境，每个环境都有自己单独的 Prometheus 后端，或者您可能为运行的每个服务都有一个 SQL 数据库。如果有一个仪表板可以支持所有这些功能，但让您在查看仪表板时可以在后端数据库之间切换，那就太好了。&lt;/p&gt;&#xA;&lt;p&gt;数据源查询可以实现这一点。您选择想要作为目标的数据源类型（例如 MySQL、Influx 或 Prometheus），然后可以在仪表板中在它们之间切换。任何使用数据源变量作为后端数据源的面板都会在您更改变量时自动更新。&lt;/p&gt;&#xA;&lt;p&gt;使用正则表达式定义变量时，您可以应用更高级的过滤。例如，您可能想要删除不相关的数据源。如果您有一个应用程序仪表板，其中所有应用程序数据库都以“APP”开头，则可以应用“^APP.*”等正则表达式来过滤掉任何不以“APP”开头的内容。&lt;/p&gt;&#xA;&lt;p&gt;请注意，这仅在数据源具有相同类型时才有效。你不能混合不同的数据ces，例如 Prometheus 和 PostgreSQL，因为它们具有不同（且不兼容）的查询语言。&lt;/p&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：694px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接标题”&#xA;href=&#34;/media/blog/grafana-variables/grafana-variables_data-source-variable.png&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“lazyload mb-0”&#xA;data-src=&#34;/media/blog/grafana-variables/grafana-variables_data-source-variable.png&#34;data-srcset=&#34;/media/blog/grafana-variables/grafana-variables_data-source-variable.png?w= 320 320w，/media/blog/grafana-variables/grafana-variables_data-source-variable.png?w=550 550w，/media/blog/grafana-variables/grafana-variables_data-source-variable.png？w=750 750w，/media/blog/grafana-variables/grafana-variables_data-source-variable.png？w=900 900w， /media/blog/grafana-variables/grafana-variables_data-source-variable.png?w=1040 1040w, /media/blog/grafana-variables/grafana-variables_data-source-variable.png?w=1240 1240w, /media/blog/grafana-variables/grafana-variables_data-source-variable.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;数据源变量的屏幕截图。&#34;&#xA;宽度=“694”&#xA;高度=“1067”&#xA;title=&#34;*选择 Prometheus 后端的示例数据源变量。请注意，这是使用正则表达式过滤的，以仅显示名称以“prom”结尾的数据源。*&#34;&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src =“/media/blog/grafana-variables/grafana-variables_data-source-variable.png”&#xA;alt=&#34;数据源变量的屏幕截图。&#34;&#xA;宽度=“694”&#xA;高度=“1067”&#xA;title=&#34;*选择 Prometheus 后端的示例数据源变量。请注意，这是使用正则表达式过滤的，以仅显示名称以“prom”结尾的数据源。*&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;figcaption class=&#34;w-100p title text-gray-13 &#34;&gt;&lt;em&gt;选择 Prometheus 后端的示例数据源变量。请注意，这是使用正则表达式进行过滤的，以仅显示名称以“prom”结尾的数据源。&lt;/em&gt;&lt;/figcaption&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;h3 id=&#34;interval-variables&#34;&gt;区间变量&lt;/h3&gt;&#xA;&lt;p&gt;间隔变量的行为与仪表板上的默认时间选择器类似。除了仪表板上的默认时间范围之外，它还允许您选择一个时间段。与其他变量一样，它可以在查询中的任何时间范围有意义的地方使用 - 它不会覆盖 &lt;a href=&#34;/docs/grafana/latest/dashboards/use-dashboards/?pg=blog&amp;plcmt=body-txt /#time-units-and-relative-ranges&#34;&gt;仪表板上的默认时间选择器&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;区间变量可用于比较一个时间段与另一个时间段的数据。例如，您可能想要查看当前数据，但想了解同一环境一小时、一天或一周前的情况。使用间隔变量，您可以轻松切换某些查询的历史周期，而无需更改仪表板上的主要时间范围。&lt;/p&gt;&#xA;&lt;图&#xA;类=“图形包装器”图包装__lightbox w-100p“&#xA;样式=“最大宽度：679px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接标题”&#xA;href=&#34;/media/blog/grafana-variables/grafana-variables_interval-variables.png&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“lazyload mb-0”&#xA;data-src =“/media/blog/grafana-variables/grafana-variables_interval-variables.png”data-srcset =“/media/blog/grafana-variables/grafana-variables_interval-variables.png？w = 320 320w，/媒体/博客/grafana-variables/grafana-variables_interval-variables.png?w=550 550w，/media/blog/grafana-variables/grafana-variables_interval-variables.png？w=750 750w，/media/blog/grafana-variables/grafana-variables_interval-variables.png？w=900 900w， /media/blog/grafana-variables/grafana-variables_interval-variables.png?w=1040 1040w, /media/blog/grafana-variables/grafana-variables_interval-variables.png?w=1240 1240w, /media/blog/grafana-variables/grafana-variables_interval-variables.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;区间变量的屏幕截图。&#34;&#xA;宽度=“679”&#xA;高度=“835”&#xA;title=&#34;*间隔变量可以设置为对您的数据有意义的时间范围。它们使用与默认时间选择器相同的语法来选择时间范围。*&#34;&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src =“/media/blog/grafana-variables/grafana-variables_interval-variables.png”&#xA;alt=&#34;区间变量的屏幕截图。&#34;&#xA;宽度=“679”&#xA;高度=“835”&#xA;title=&#34;*间隔变量可以设置为对您的数据有意义的时间范围。它们使用与默认时间选择器相同的语法来选择时间范围。*&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;figcaption class=&#34;w-100p title text-gray-13 &#34;&gt;&lt;em&gt;间隔变量可以设置为对数据有意义的时间范围。它们使用与默认时间选择器相同的语法来选择时间范围。&lt;/em&gt;&lt;/figcaption&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;h3 id=&#34;ad-hoc-filter-variables&#34;&gt;临时过滤器变量&lt;/h3&gt;&#xA;&lt;p&gt;某些数据源支持自动过滤，类似于查询变量，但不需要您实际编写查询。如果您使用的是 Prometheus、Grafana Loki、InfluxDB 或 Elasticsearch 等数据源，那么临时过滤器是过滤数据的一种简单方法，而且无需编写查询。&lt;/p&gt;&#xA;&lt;p&gt;如果数据源不支持临时过滤器，Grafana 会通知您。&lt;/p&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：573px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接标题”&#xA;href=&#34;/media/blog/grafana-variables/grafana-variables_ad-hoc.png&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“lazyload mb-0”&#xA;data-src =“/media/blog/grafana-variables/grafana-variables_ad-hoc.png”data-srcset =“/media/blog/grafana-variables/grafana-variables_ad-hoc.png？w = 320 320w，/媒体/博客/grafana-variables/grafana-variables_ad-hoc.png？w=550 550w， /media/blog/grafana-variables/grafana-variables_ad-hoc.png?w=750 750w，/media/b日志/grafana-variables/grafana-variables_ad-hoc.png？w=900 900w，/media/blog/grafana-variables/grafana-variables_ad-hoc.png？w=1040 1040w，/media/blog/grafana-variables/ grafana-variables_ad-hoc.png?w=1240 1240w，/media/blog/grafana-variables/grafana-variables_ad-hoc.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;临时过滤器变量的屏幕截图。&#34;&#xA;宽度=“573”&#xA;高度=“801”&#xA;title=&#34;*MySQL 目前没有临时过滤支持，因此如果您尝试将该变量添加到仪表板，Grafana 会让您知道这一点。*&#34;&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src =“/media/blog/grafana-variables/grafana-variables_ad-hoc.png”&#xA;alt=&#34;临时过滤器变量的屏幕截图。&#34;&#xA;宽度=“573”&#xA;高度=“801”&#xA;title=&#34;*MySQL 目前没有临时过滤支持，因此如果您尝试将该变量添加到仪表板，Grafana 会让您知道这一点。*&#34;&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;figcaption class=&#34;w-100p title text-gray-13 &#34;&gt;&lt;em&gt;MySQL 目前不支持临时过滤，因此如果您尝试将该变量添加到仪表板，Grafana 会通知您。&lt;/ em&gt;&lt;/figcaption&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;h3 id=&#34;chained-variables&#34;&gt;链式变量&lt;/h3&gt;&#xA;&lt;p&gt;有时您想在查询中使用另一个变量的值。例如，您可能想要选择一个区域，然后选择一个应用程序来过滤数据。如果并非所有应用程序在所有区域都可用，您只想显示在您选择的区域可用的应用程序。&lt;/p&gt;&#xA;&lt;p&gt;为此，您可以在应用程序变量的查询中使用区域变量；这通常称为链接或链接变量。它的工作原理与在仪表板面板中使用变量完全相同 - 只需引用变量名称，例如“$region”。&lt;/p&gt;&#xA;&lt;p&gt;要了解更多信息，请访问我们的 &lt;a href=&#34;/docs/grafana/latest/dashboards/variables/add-template-variables/?pg=blog&amp;plcmt=body-txt/#chained-variables&#34;&gt;Grafana 变量文档&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;using-variables-with-data-links&#34;&gt;使用带有数据链接的变量&lt;/h2&gt;&#xA;&lt;p&gt;正如我们所介绍的，变量在仪表板顶部显示为一组下拉列表或文本框。但在过滤仪表板时，您通常必须对一长串项目进行排序。&lt;/p&gt;&#xA;&lt;p&gt;只需单击仪表板上面板中的值即可快速过滤数据，这不是很好吗？您无需对长列表进行排序，只需在查看数据时单击您关心的值即可。这正是&lt;a href=&#34;/docs/grafana/latest/panels-visualizations/configure-data-links/?pg=blog&amp;plcmt=body-txt&#34;&gt;数据链接&lt;/a&gt;发挥作用的地方。&lt;/p&gt;&#xA;&lt;p&gt;假设我们有一个仪表板，显示有关不同国家/地区的事实：使用的语言、主要城市和人口统计数据。世界上有 195 个国家，如果您开始包括领土和保护国，则数量会更多。滚动浏览这么长的下拉菜单可能需要一段时间。相反，您可以使用数据链接使这些国家/地区可单击以直接在仪表板中更改变量路。&lt;/p&gt;&#xA;&lt;p&gt;在本节中，我们将逐步介绍如何执行此操作，您还可以在 &lt;a href=&#34;https://play.grafana.org/d/edvi435reeio0c/clickable-values-to 上查看示例仪表板-set-variables&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;play.grafana.org&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;h3 id=&#34;setting-variables-with-data-links&#34;&gt;使用数据链接设置变量&lt;/h3&gt;&#xA;&lt;p&gt;让我们从 MySQL 中的一些数据开始，尽管这适用于任何数据源。&lt;/p&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：1273px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接”&#xA;href=&#34;/media/blog/grafana-variables/grafana-variables_countries-dashboard-screenshot.png&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“延迟加载”&#xA;data-src=&#34;/media/blog/grafana-variables/grafana-variables_countries-dashboard-screenshot.png&#34;data-srcset=&#34;/media/blog/grafana-variables/grafana-variables_countries-dashboard-screenshot.png?w= 320 320w、/media/blog/grafana-variables/grafana-variables_countries-dashboard-screenshot.png?w=550 550w、/media/blog/grafana-variables/grafana-variables_countries-dashboard-screenshot.png?w=750 750w , /media/blog/grafana-variables/grafana-variables_countries-dashboard-screenshot.png?w=900 900w, /media/blog/grafana-variables/grafana-variables_countries-dashboard-screenshot.png?w=1040 1040w, /媒体/博客/grafana-variables/grafana-variables_countries-dashboard-screenshot.png？w=1240 1240w，/media/blog/grafana-variables/grafana-variables_countries-dashboard-screenshot.png？w=1920 1920w”&#xA;data-sizes=&#34;auto&#34;alt=&#34;显示不同国家/地区数据的示例仪表板。&#34;&#xA;宽度=“1273”&#xA;高度=“917”&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src =“/media/blog/grafana-variables/grafana-variables_countries-dashboard-screenshot.png”&#xA;alt=&#34;显示不同国家/地区数据的示例仪表板。&#34;&#xA;宽度=“1273”&#xA;高度=“917”&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;p&gt;此仪表板显示国家和城市的人口统计数据。有大量数据，因此我们希望能够一次放大并仅查看一个国家/地区。让我们添加一个仪表板变量来过滤此视图。&lt;/p&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：1273px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接”&#xA;href=&#34;/media/blog/grafana-variables/grafana-variables_variables-for-countries-dashboard.png&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“延迟加载”&#xA;data-src =“/media/blog/grafana-variables/grafana-variables_variables-for-countries-dashboard.png”data-srcset =“/media/blog/grafana-variables/grafana-variables_variables-for-countries-dashboard。 png?w=320 320w，/media/blog/grafana-variables/grafana-variables_variables-for-countries-dashboard.png?w=550 550w，/media/blog/grafana-variables/grafana-variables_variables-for-countries-仪表板.png？w = 750 750w，/media/blog/grafana-variables/grafana-variables_variables-for-countries-dashboard.png?w=900 900w，/media/blog/grafana-variables/grafana-variables_variables-for-countries-dashboard.png?w=1040 1040w，/media/blog/grafana-variables/grafana-variables_variables-for-国家/地区-dashboard.png?w=1240 1240w, /media/blog/grafana-variables/grafana-variables_variables-for-countries-dashboard.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;示例仪表板的变量屏幕截图。&#34;&#xA;宽度=“1273”&#xA;高度=“1274”&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src =“/media/blog/grafana-variables/grafana-variables_variables-for-countries-dashboard.png”&#xA;alt=&#34;示例仪表板的变量屏幕截图。&#34;&#xA;宽度=“1273”&#xA;高度=“1274”&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;p&gt;这为我们提供了所有国家/地区代码的列表，我们可以使用它来过滤仪表板上的查询。 （请注意，我们为“All”选项添加了自定义“%”值。这是因为 SQL 使用“%”作为通配符来匹配任何内容。这样，如果我们仍想查看位于一旦进入我们的仪表板，我们就可以使用它来做到这一点。）&lt;/p&gt;&#xA;&lt;p&gt;我们可以在查询中使用该变量根据我们选择的内容进行排序。&lt;/p&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：1273px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接”&#xA;href=&#34;/media/blog/grafana-variables/grafana-variables_mysql-data-source.png&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“延迟加载”&#xA;data-src=&#34;/media/blog/grafana-variables/grafana-variables_mysql-data-source.png&#34;data-srcset=&#34;/media/blog/grafana-variables/grafana-variables_mysql-data-source.png?w= 320 320w，/media/blog/grafana-variables/grafana-variables_mysql-data-source.png?w=550 550w，/media/blog/grafana-variables/grafana-variables_mysql-data-source.png？w=750 750w，/media/blog/grafana-variables/grafana-variables_mysql-data-source.png？w=900 900w， /media/blog/grafana-variables/grafana-variables_mysql-data-source.png?w=1040 1040w, /media/blog/grafana-variables/grafana-variables_mysql-data-source.png?w=1240 1240w, /media/blog/grafana-variables/grafana-variables_mysql-data-source.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;显示查询中示例变量的屏幕截图。&#34;&#xA;宽度=“1273”&#xA;高度=“912”&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src =“/media/blog/grafana-variables/grafana-variables_mysql-data-source.png”&#xA;alt=&#34;显示查询中示例变量的屏幕截图。&#34;&#xA;宽度=“1273”&#xA;高度=“912”&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;p&gt;到目前为止，这是相当标准的。我们在下拉框中有一个国家/地区代码列表，可以选择我们想要的。但国家有很多！理想情况下，我们只需单击较大表格中的相关条目即可立即筛选到该国家/地区。&lt;/p&gt;&#xA;&lt;p&gt;那么，让我们使用数据链接来设置该变量。首先选择一个表格面板，然后在国家/地区代码字段上添加&lt;a href=&#34;/docs/grafana/latest/panels-visualizations/configure-overrides/&#34;&gt;字段覆盖&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightb”牛w-100p”&#xA;样式=“最大宽度：1273px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接”&#xA;href=&#34;/media/blog/grafana-variables/grafana-variables_country-code-field.png&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“延迟加载”&#xA;data-src=&#34;/media/blog/grafana-variables/grafana-variables_country-code-field.png&#34;data-srcset=&#34;/media/blog/grafana-variables/grafana-variables_country-code-field.png?w= 320 320w，/media/blog/grafana-variables/grafana-variables_country-code-field.png?w=550 550w、/media/blog/grafana-variables/grafana-variables_country-code-field.png?w=750 750w、/media/blog/grafana-variables/grafana-variables_country-code-field.png?w=900 900w、 /media/blog/grafana-variables/grafana-variables_country-code-field.png?w=1040 1040w, /media/blog/grafana-variables/grafana-variables_country-code-field.png?w=1240 1240w, /media/blog/grafana-variables/grafana-variables_country-code-field.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;字段覆盖的屏幕截图。&#34;&#xA;宽度=“1273”&#xA;高度=“912”&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src =“/media/blog/grafana-variables/grafana-variables_country-code-field.png”&#xA;alt=&#34;字段覆盖的屏幕截图。&#34;&#xA;宽度=“1273”&#xA;高度=“912”&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;p&gt;在该覆盖中，我们将添加一个数据链接，这将使该字段中的内容成为可点击的 URL。&lt;/p&gt;&#xA;&lt;p&gt;现在我们来看看神奇之处：对于 URL，我们将使用当前正在编辑的仪表板的 URL，并将变量的值添加到请求中。该变量将被称为“var-country”，因为我们将仪表板变量命名为“country”。 （Grafana URL 中的变量始终在您命名的任何名称前面带有“var-”。）&lt;/p&gt;&#xA;&lt;块引用&gt;&#xA;&lt;p&gt;&lt;em&gt;您可能已经注意到，变量在更改时会在 URL 中设置。如果没有，请打开包含一些变量的仪表板并尝试更改值。如果您查看 URL 栏，您会看到变量在您选择时发生变化。您可能需要单击它以突出显示完整的 URL，因为某些浏览器默认隐藏它。&lt;/em&gt;&lt;/p&gt;&#xA;&lt;/块引用&gt;&#xA;&lt;p&gt;我们希望将变量设置为查看者单击的值。因此，点击 &lt;strong&gt;control+space&lt;/strong&gt;（或 Mac 上的 &lt;strong&gt;command+space&lt;/strong&gt;）来调出变量选择器并选择 CountryCode 字段。&lt;/p&gt;&#xA;&lt;p&gt;完成后，我们将得到如下所示的变量：&lt;/p&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：756px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接”&#xA;href=&#34;/media/blog/grafana-variables/grafana-variables_URLs.png&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“延迟加载”&#xA;data-src =“/media/blog/grafana-variables/grafana-variables_URLs.png”data-srcset =“/media/blog/grafana-variables/grafana-variables_URLs.png？w = 320 320w，/media/blog/ grafana-variables/grafana-variables_URLs.png?w=550 550w，/media/blog/grafana-variables/grafana-variables_URLs.png?w=750 750w，/media/blog/grafana-variables/grafana-variables_URLs.png?w=900 900w，/media/blog/grafana-variables/grafana-variables_URLs。 w=1040 1040w, /media/blog/grafana-variables/grafana-variables_URLs.png?w=1240 1240w，/media/blog/grafana-variables/grafana-variables_URLs.png?w=1920 1920w&#34;&#xA;data-sizes=&#34;auto&#34;alt=&#34;示例变量的屏幕截图。&#34;&#xA;宽度=“756”&#xA;高度=“373”&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src =“/media/blog/grafana-variables/grafana-variables_URLs.png”&#xA;alt=&#34;示例变量的屏幕截图。&#34;&#xA;宽度=“756”&#xA;高度=“373”&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;p&gt;然后，我们会对仪表板上的所有面板重复这些步骤。&lt;/p&gt;&#xA;&lt;p&gt;完成后，我们将拥有指向同一仪表板的可点击链接，让仪表板通过单击表格来更新变量。&lt;/p&gt;&#xA;&lt;图&#xA;类=“图包装图包装__lightbox w-100p”&#xA;样式=“最大宽度：1271px；”&#xA;itemprop =“关联媒体”&#xA;项目范围=“”&#xA;itemtype =“http://schema.org/ImageObject”&#xA;&gt;&#xA;&lt;一&#xA;类=“灯箱链接”&#xA;href=&#34;/media/blog/grafana-variables/grafana-variables_countries-dashboard.gif&#34;&#xA;itemprop=“内容网址”&#xA;&gt;&#xA;&lt;div class=&#34;img-wrapper w-100p h-auto&#34;&gt;&lt;img&#xA;类=“延迟加载”&#xA;data-src=&#34;/media/blog/grafana-variables/grafana-variables_countries-dashboard.gif&#34;alt=&#34;示例仪表板的 gif。&#34;&#xA;宽度=“1271”&#xA;高度=“909”&#xA;/&gt;&#xA;&lt;无脚本&gt;&#xA;&lt;图片&#xA;src =“/media/blog/grafana-variables/grafana-variables_countries-dashboard.gif”&#xA;alt=&#34;示例仪表板的 gif。&#34;&#xA;宽度=“1271”&#xA;高度=“909”&#xA;/&gt;&#xA;&lt;/noscript&gt;&lt;/div&gt;&#xA;&lt;/a&gt;&#xA;&lt;/图&gt;&#xA;&lt;p&gt;现在我们可以使用仪表板放大我们关心的数据，而无需搜索长列表。&lt;/p&gt;&#xA;&lt;h1 id=&#34;learn-more&#34;&gt;了解更多&lt;/h1&gt;&#xA;&lt;p&gt;变量是 Grafana 的一个强大功能。使用它们可以使您的仪表板具有交互性，让您可以重复使用一个仪表板来显示各种信息。添加变量还可以让仪表板查看者专注于对他们来说重要的数据，排除任何不相关的数据。&lt;/p&gt;&#xA;&lt;p&gt;要了解有关变量的更多信息，您可以查看我们的&lt;a href=&#34;/docs/grafana/latest/dashboards/variables/?pg=blog&amp;plcmt=body-txt&#34;&gt;文档&lt;/a&gt;，还可以访问我们的&lt; a href=&#34;https://community.grafana.com/c/support/33&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Grafana 社区论坛&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;/products/cloud/?pg=blog&amp;plcmt=body-txt&#34;&gt;Grafana Cloud&lt;/a&gt; 是开始使用指标、日志、跟踪和仪表板的最简单方法。我们为每个用例提供慷慨的永久免费套餐和计划。 &lt;a href=&#34;/auth/sign-up/create-user/?pg=blog&amp;plcmt=body-txt&#34;&gt;立即免费注册&lt;/a&gt;！&lt;/em&gt;&lt;/p&gt;</description>
      <pubDate>Wed, 30 Oct 2024 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Edit your Git-based Grafana dashboards locally】在本地编辑基于 Git 的 Grafana 仪表板</title>
      <link>https://grafana.com/blog/2024/10/29/edit-your-git-based-grafana-dashboards-locally/</link>
      <description>【&lt;p&gt;Grafana has grown to become one of the most prominent dashboarding tools available, with an extensive set of features that support organizations of all sizes. There can come a time, however, when you have too many dashboards.&lt;/p&gt;&#xA;&lt;p&gt;As a software engineer, you might think, &amp;ldquo;Why can&amp;rsquo;t I do with dashboards what I do with my code?&amp;rdquo; That is, you know how to keep your code in version control (e.g., Git). You know how to share and review your code with colleagues (e.g., pull requests). And you know how to build automated deployment pipeline to deploy our code (i.e., CI/CD). With this, we get scale, we get history, and all our code is reviewed before deployment. So why can&amp;rsquo;t you do this with your Grafana installation(s)?&lt;/p&gt;&#xA;&lt;p&gt;Actually, you can.&lt;/p&gt;&#xA;&lt;p&gt;You can edit dashboards as JSON using your IDE, or create them using tools such as &lt;a href=&#34;https://grafana.github.io/grafonnet/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Grafonnet&lt;/a&gt; (in Jsonnet) or the &lt;a href=&#34;https://github.com/grafana/grafana-foundation-sdk&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Grafana Foundation SDK&lt;/a&gt; (Go, TypeScript, Python, Java, PHP). You can then publish them to your Grafana instance(s) with tools such as the Grafana Terraform provider, Grizzly, and the Grafana Operator for Kubernetes.&lt;/p&gt;&#xA;&lt;p&gt;But once you&amp;rsquo;ve made (or updated) your dashboard, how do you confirm that it works as expected? And how will your colleagues confirm that it works as expected in order to review it? In this post, we&amp;rsquo;re going to focus on a tool that helps us review dashboards before they are ready to be published. This can help you save time, close the review feedback loop earlier and with less pain, and get a better overall experience.&lt;/p&gt;&#xA;&lt;h2 id=&#34;how-to-review-dashboards-before-theyre-published&#34;&gt;How to review dashboards before they&amp;rsquo;re published&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://grafana.github.io/grizzly/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Grizzly&lt;/a&gt;, a command line tool for Grafana, has a new &lt;code&gt;serve&lt;/code&gt; function that can be used to validate (or even edit!) our dashboards in a Grafana Cloud instance (or any other Grafana instance).&lt;/p&gt;&#xA;&lt;h3 id=&#34;configuring-grizzly&#34;&gt;Configuring Grizzly&lt;/h3&gt;&#xA;&lt;p&gt;First, we configure Grizzly by pointing it at a Grafana instance. (You&amp;rsquo;ll need Grizzly 0.4.6 or higher to follow the steps outlined in this blog.)&lt;/p&gt;&#xA;&lt;p&gt;For these purposes, I suggest a development Grafana instance—one that has meaningful data in it but isn&amp;rsquo;t used in production. For this to work, the data source UIDs must be the same as those on your production instance.&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;grr config create-context dev&#xA;grr config set grafana.url https://mystack.grafana.net ← or my dev instance URL&#xA;grr config set grafana.token &amp;lt;my-service-account-token&amp;gt; ← get this from my Grafana instance&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;Now my instance is ready to work.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;h4 id=&#34;grafana-data-source-requirements&#34;&gt;Grafana data source requirements&lt;/h4&gt;&#xA;&lt;p&gt;If you want to use a different Grafana instance for editing than the one you eventually plan to deploy your dashboards to, you need to take care of your data source UIDs, which must be the same on both Grafana instances.&lt;/p&gt;&#xA;&lt;p&gt;To achieve this, you&amp;rsquo;ll need to create the data sources via the API—for example, using Grizzly or Terraform. You won&amp;rsquo;t need to replace the existing data sources. You could also add additional data sources pointing to the same backend, so this needn&amp;rsquo;t be an issue for existing dashboards.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;editing-our-offline-dashboards-with-grafana-and-grizzly&#34;&gt;Editing our &amp;lsquo;offline&amp;rsquo; dashboards with Grafana and Grizzly&lt;/h3&gt;&#xA;&lt;p&gt;Next, let&amp;rsquo;s look at how to edit your dashboards locally, or as I like to think of it, &amp;ldquo;offline&amp;rdquo; editing. Let&amp;rsquo;s say we have a dashboard file, stored in JSON in our Git repository. We have a local checkout we want to make a change to it, but for some changes, that&amp;rsquo;s really hard (if not impossible) to achieve by editing a JSON file.&lt;/p&gt;&#xA;&lt;p&gt;Instead, we can use Grizzly to help us. Let&amp;rsquo;s create our dashboard file and call it &lt;code&gt;my-dashboard.json&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet &#34;&gt;&lt;div class=&#34;lang-toolbar&#34;&gt;&#xA;&lt;span class=&#34;lang-toolbar__item&#34;&gt;json&lt;/span&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;div class=&#34;lang-toolbar__border&#34;&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet &#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;&amp;#34;graphTooltip&amp;#34;: 1,&#xA;&amp;#34;panels&amp;#34;: [&#xA;{&#xA;&amp;#34;datasource&amp;#34;: {&#xA;&amp;#34;type&amp;#34;: &amp;#34;datasource&amp;#34;,&#xA;&amp;#34;uid&amp;#34;: &amp;#34;-- Mixed --&amp;#34;&#xA;},&#xA;&amp;#34;fieldConfig&amp;#34;: {&#xA;&amp;#34;defaults&amp;#34;: {&#xA;&amp;#34;unit&amp;#34;: &amp;#34;reqps&amp;#34;&#xA;}&#xA;},&#xA;&amp;#34;gridPos&amp;#34;: {&#xA;&amp;#34;h&amp;#34;: 8,&#xA;&amp;#34;w&amp;#34;: 24&#xA;},&#xA;&amp;#34;id&amp;#34;: 1,&#xA;&amp;#34;pluginVersion&amp;#34;: &amp;#34;v11.0.0&amp;#34;,&#xA;&amp;#34;targets&amp;#34;: [&#xA;{&#xA;&amp;#34;datasource&amp;#34;: {&#xA;&amp;#34;type&amp;#34;: &amp;#34;datasource&amp;#34;,&#xA;&amp;#34;uid&amp;#34;: &amp;#34;grafana&amp;#34;&#xA;},&#xA;&amp;#34;queryType&amp;#34;: &amp;#34;randomWalk&amp;#34;&#xA;}&#xA;],&#xA;&amp;#34;title&amp;#34;: &amp;#34;Requests / sec&amp;#34;,&#xA;&amp;#34;type&amp;#34;: &amp;#34;timeseries&amp;#34;&#xA;}&#xA;],&#xA;&amp;#34;schemaVersion&amp;#34;: 39,&#xA;&amp;#34;title&amp;#34;: &amp;#34;Example dashboard&amp;#34;,&#xA;&amp;#34;uid&amp;#34;: &amp;#34;example-dashboard&amp;#34;&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;Then we can review and edit this dashboard with:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;grr serve my-dashboard.json&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;This will open a web server (by default) at &lt;a href=&#34;http://localhost:8080&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;http://localhost:8080&lt;/a&gt;. Visiting that URL in a browser will show the name of our dashboard within the Grizzly serve UI. Clicking on the link to our dashboard, we&amp;rsquo;ll see our dashboard in the configured Grafana instance.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This dashboard DOES NOT exist in our Grafana instance. Grizzly runs client-side, intercepting requests to Grafana and reading your dashboard JSON from disk.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Next, make a change to your dashboard, then click &lt;strong&gt;Save&lt;/strong&gt;. Again, the dashboard won&amp;rsquo;t exist in Grafana; saving it will update the file on disk.&lt;/p&gt;&#xA;&lt;h3 id=&#34;reviewing-our-generated-dashboards-with-grafana-and-grizzly&#34;&gt;Reviewing our generated dashboards with Grafana and Grizzly&lt;/h3&gt;&#xA;&lt;p&gt;So far, we&amp;rsquo;ve looked at using Grizzly and Grafana together to edit and save our dashboards to a local disk. What if we want to review our generated dashboards?&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;h4 id=&#34;what-is-a-generated-dashboard&#34;&gt;What is a generated dashboard?&lt;/h4&gt;&#xA;&lt;p&gt;If dashboards are represented as JSON, that means that we can create that JSON with code. However, the structure of that JSON is complex, making the task harder. Fortunately, there are libraries in a range of languages that can make this much easier, including working with code completion in your chosen IDE.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Fortunately, Grizzly supports &amp;ldquo;generated&amp;rdquo; dashboards. When we plan to make the change to a file directly—instead of changing the dashboard in the UI—we want to tell Grizzly to watch the filesystem for changes with the &lt;code&gt;-w&lt;/code&gt; switch. Sometimes, we will want to tell Grizzly to watch a directory of files. Grizzly can do this too. Then, all it takes to see our changes is reloading the dashboard in our browser.&lt;/p&gt;&#xA;&lt;p&gt;Grizzly supports Jsonnet directly. For other languages, our code will need to output the dashboards to &lt;code&gt;stdout&lt;/code&gt;—either a single dashboard JSON, or as an array of dashboard JSONs. Then, we can reference a command to execute our code in our call to Grizzly. (We will give examples for each language below.)&lt;/p&gt;&#xA;&lt;p&gt;Next, let&amp;rsquo;s look at how we create dashboard code and preview your dashboard, using the supported languages.&lt;/p&gt;&#xA;&lt;div class=&#34;br-4 base-border border-color-gray-3 docs_tabs&#34;&gt;&#xA;&lt;div x-data=&#34;app_content_tabs([&amp;#34;Jsonnet&amp;#34;,&amp;#34;TypeScript&amp;#34;,&amp;#34;Golang&amp;#34;,&amp;#34;Python&amp;#34;,&amp;#34;Java&amp;#34;,&amp;#34;PHP&amp;#34;], &#39;05005e3df7d24a7bec02c11e6bb37441&#39;)&#34; x-init=&#34;init()&#34;&gt;&#xA;&lt;div class=&#34;d-flex w-100p flex-direction-row align-items-center justify-content-flex-start d-md-none&#34;&gt;&#xA;&lt;select class=&#34;docs_tabs--select w-100p base-border-bottom border-color-gray-3&#34; @change=&#34;toggle($event.target.value)&#34;&gt;&#xA;&lt;option value=&#34;Jsonnet&#34; :selected=&#34;active === &#39;Jsonnet&#39;&#34;&gt;Jsonnet&lt;/option&gt;&#xA;&lt;option value=&#34;TypeScript&#34; :selected=&#34;active === &#39;TypeScript&#39;&#34;&gt;TypeScript&lt;/option&gt;&#xA;&lt;option value=&#34;Golang&#34; :selected=&#34;active === &#39;Golang&#39;&#34;&gt;Golang&lt;/option&gt;&#xA;&lt;option value=&#34;Python&#34; :selected=&#34;active === &#39;Python&#39;&#34;&gt;Python&lt;/option&gt;&#xA;&lt;option value=&#34;Java&#34; :selected=&#34;active === &#39;Java&#39;&#34;&gt;Java&lt;/option&gt;&#xA;&lt;option value=&#34;PHP&#34; :selected=&#34;active === &#39;PHP&#39;&#34;&gt;PHP&lt;/option&gt;&#xA;&lt;/select&gt;&#xA;&lt;/div&gt;&#xA;&lt;nav class=&#34;docs_tabs--navigation base-border-bottom border-color-gray-3 d-none d-md-block&#34; role=&#34;tablist&#34; data-codetoggle=&#34;true&#34;&gt;&#xA;&lt;button&#xA;class=&#34;docs_tabs--label f-14 bg-transparent color-gray-11 py-8 px-1&#34;&#xA;data-toggle=&#34;tab&#34;&#xA;role=&#34;tab&#34;&#xA;@click=&#34;toggle(&#39;Jsonnet&#39;)&#34;&#xA;:class=&#34;{ &#39;docs_tabs--label-active&#39;: active === &#39;Jsonnet&#39; }&#34;&#xA;&gt;&#xA;Jsonnet&#xA;&lt;/button&gt;&#xA;&lt;button&#xA;class=&#34;docs_tabs--label f-14 bg-transparent color-gray-11 py-8 px-1&#34;&#xA;data-toggle=&#34;tab&#34;&#xA;role=&#34;tab&#34;&#xA;@click=&#34;toggle(&#39;TypeScript&#39;)&#34;&#xA;:class=&#34;{ &#39;docs_tabs--label-active&#39;: active === &#39;TypeScript&#39; }&#34;&#xA;&gt;&#xA;TypeScript&#xA;&lt;/button&gt;&#xA;&lt;button&#xA;class=&#34;docs_tabs--label f-14 bg-transparent color-gray-11 py-8 px-1&#34;&#xA;data-toggle=&#34;tab&#34;&#xA;role=&#34;tab&#34;&#xA;@click=&#34;toggle(&#39;Golang&#39;)&#34;&#xA;:class=&#34;{ &#39;docs_tabs--label-active&#39;: active === &#39;Golang&#39; }&#34;&#xA;&gt;&#xA;Golang&#xA;&lt;/button&gt;&#xA;&lt;button&#xA;class=&#34;docs_tabs--label f-14 bg-transparent color-gray-11 py-8 px-1&#34;&#xA;data-toggle=&#34;tab&#34;&#xA;role=&#34;tab&#34;&#xA;@click=&#34;toggle(&#39;Python&#39;)&#34;&#xA;:class=&#34;{ &#39;docs_tabs--label-active&#39;: active === &#39;Python&#39; }&#34;&#xA;&gt;&#xA;Python&#xA;&lt;/button&gt;&#xA;&lt;button&#xA;class=&#34;docs_tabs--label f-14 bg-transparent color-gray-11 py-8 px-1&#34;&#xA;data-toggle=&#34;tab&#34;&#xA;role=&#34;tab&#34;&#xA;@click=&#34;toggle(&#39;Java&#39;)&#34;&#xA;:class=&#34;{ &#39;docs_tabs--label-active&#39;: active === &#39;Java&#39; }&#34;&#xA;&gt;&#xA;Java&#xA;&lt;/button&gt;&#xA;&lt;button&#xA;class=&#34;docs_tabs--label f-14 bg-transparent color-gray-11 py-8 px-1&#34;&#xA;data-toggle=&#34;tab&#34;&#xA;role=&#34;tab&#34;&#xA;@click=&#34;toggle(&#39;PHP&#39;)&#34;&#xA;:class=&#34;{ &#39;docs_tabs--label-active&#39;: active === &#39;PHP&#39; }&#34;&#xA;&gt;&#xA;PHP&#xA;&lt;/button&gt;&#xA;&lt;/nav&gt;&#xA;&lt;div class=&#34;docs_tabs--content-container&#34; id=&#34;&#34;&gt;&#xA;&lt;div&#xA;class=&#34;docs_tabs--content py-1 px-2&#34;&#xA;:class=&#34;active === &#39;Jsonnet&#39; ? &#39;d-block&#39; : &#39;d-none&#39;&#34;&#xA;id=&#34;&#34;&#xA;role=&#34;tabpanel&#34;&#xA;aria-labelledby=&#34;&#34;&#xA;&gt;&#xA;&lt;p&gt;&lt;strong&gt;Requirements:&lt;/strong&gt; &lt;a href=&#34;https://github.com/google/go-jsonnet&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;go-jsonnet&lt;/a&gt;/&lt;a href=&#34;https://github.com/jsonnet-bundler/jsonnet-bundler&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;jsonnet-bundler&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;First we want to install Grafonnet:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;jb init&#xA;jb install github.com/grafana/grafonnet/gen/grafonnet-latest@main&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;Then, create &lt;code&gt;main.jsonnet&lt;/code&gt; containing this code:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;local g = import &amp;#39;github.com/grafana/grafonnet/gen/grafonnet-latest/main.libsonnet&amp;#39;;&#xA;g.dashboard.new(&amp;#39;Example dashboard&amp;#39;)&#xA;&amp;#43; g.dashboard.withUid(&amp;#39;example-dashboard&amp;#39;)&#xA;&amp;#43; g.dashboard.withDescription(&amp;#39;Example Dashboard for Grizzly&amp;#39;)&#xA;&amp;#43; g.dashboard.graphTooltip.withSharedCrosshair()&#xA;&amp;#43; g.dashboard.withPanels([&#xA;g.panel.timeSeries.new(&amp;#39;Requests / sec&amp;#39;)&#xA;&amp;#43; g.panel.timeSeries.queryOptions.withTargets([&#xA;g.query.testData.withQueryType(&amp;#39;randomWalk&amp;#39;)&#xA;&amp;#43; g.query.testData.withDatasource()&#xA;])&#xA;&amp;#43; g.panel.timeSeries.standardOptions.withUnit(&amp;#39;reqps&amp;#39;)&#xA;&amp;#43; g.panel.timeSeries.gridPos.withW(24)&#xA;&amp;#43; g.panel.timeSeries.gridPos.withH(8),&#xA;])&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;To preview this dashboard with Grizzly, we can run:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;grr serve -w main.jsonnet&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;We can then visit the Grizzly server at http://localhost:8080, and select our dashboard. Now, when we change &lt;code&gt;main.jsonnet&lt;/code&gt; (e.g., change the dashboard title) and save it, we can reload the dashboard and see the changes in our Grafana instance.&lt;/p&gt;&#xA;&lt;p&gt;Try this out. Edit &lt;code&gt;main.jsonnet&lt;/code&gt; (e.g., change the title - in the &lt;code&gt;new()&lt;/code&gt; call), and when you save it, reload the dashboard and see the changes in your Grafana instance.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div&#xA;class=&#34;docs_tabs--content py-1 px-2&#34;&#xA;:class=&#34;active === &#39;TypeScript&#39; ? &#39;d-block&#39; : &#39;d-none&#39;&#34;&#xA;id=&#34;&#34;&#xA;role=&#34;tabpanel&#34;&#xA;aria-labelledby=&#34;&#34;&#xA;&gt;&#xA;&lt;p&gt;&lt;strong&gt;Requirements:&lt;/strong&gt; Yarn/NodeJS/NPX&lt;/p&gt;&#xA;&lt;p&gt;First, we must install TypeScript and the Grafana Foundation SDK:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;yarn add --dev typescript ts-node @types/node&#xA;yarn add &amp;#39;@grafana/grafana-foundation-sdk@~11.2.0-cogv0.0.x.1728036865&amp;#39;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;Then, create a simple &lt;code&gt;tsconfig.json&lt;/code&gt; file:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet &#34;&gt;&lt;div class=&#34;lang-toolbar&#34;&gt;&#xA;&lt;span class=&#34;lang-toolbar__item&#34;&gt;json&lt;/span&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;div class=&#34;lang-toolbar__border&#34;&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet &#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;&amp;#34;compilerOptions&amp;#34;: {&#xA;&amp;#34;moduleResolution&amp;#34;: &amp;#34;Node16&amp;#34;,&#xA;&amp;#34;module&amp;#34;: &amp;#34;node16&amp;#34;,&#xA;&amp;#34;lib&amp;#34;: [&amp;#34;ES2022&amp;#34;]&#xA;}&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;Next, we create our TypeScript dashboard code, as &lt;code&gt;main.ts&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet &#34;&gt;&lt;div class=&#34;lang-toolbar&#34;&gt;&#xA;&lt;span class=&#34;lang-toolbar__item&#34;&gt;typescript&lt;/span&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;div class=&#34;lang-toolbar__border&#34;&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet &#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-typescript&#34;&gt;import * as dashboard from &amp;#39;@grafana/grafana-foundation-sdk/dashboard&amp;#39;;&#xA;import * as testdata from &amp;#39;@grafana/grafana-foundation-sdk/testdata&amp;#39;;&#xA;import { PanelBuilder as TimeseriesBuilder } from &amp;#39;@grafana/grafana-foundation-sdk/timeseries&amp;#39;;&#xA;function makeDashboard() {&#xA;let builder = new dashboard.DashboardBuilder(&amp;#39;Example dashboard&amp;#39;)&#xA;.uid(&amp;#39;example-dashboard&amp;#39;)&#xA;.description(&amp;#39;Example Dashboard for Grizzly&amp;#39;)&#xA;.tooltip(dashboard.DashboardCursorSync.Crosshair)&#xA;.withPanel(&#xA;new TimeseriesBuilder()&#xA;.title(&amp;#39;Requests / sec&amp;#39;)&#xA;.unit(&amp;#34;reqps&amp;#34;)&#xA;.withTarget(&#xA;new testdata.DataqueryBuilder()&#xA;.queryType(&amp;#39;randomWalk&amp;#39;)&#xA;.datasource({uid: &amp;#34;grafana&amp;#34;, type: &amp;#34;grafana&amp;#34;})&#xA;)&#xA;.span(24)&#xA;.height(8)&#xA;);&#xA;const dash = JSON.stringify(builder.build(), null, 2);&#xA;return dash;&#xA;}&#xA;console.log(makeDashboard());&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;Now, let&amp;rsquo;s say we run our code with &lt;code&gt;npx ts-node main.ts&lt;/code&gt;. Then we can tell Grizzly to watch for changes in our &lt;code&gt;main.ts&lt;/code&gt; file, and then execute our &lt;code&gt;npx&lt;/code&gt; command to regenerate the dashboard:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;grr serve -w -S &amp;#39;npx ts-node main.ts&amp;#39; main.ts&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;We can then visit the Grizzly server at &lt;a href=&#34;http://localhost:8080&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;http://localhost:8080&lt;/a&gt;, and select our dashboard. Now, when we change &lt;code&gt;main.ts&lt;/code&gt; (e.g., change the dashboard title) and save it, we can reload the dashboard and see the changes in our Grafana instance.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div&#xA;class=&#34;docs_tabs--content py-1 px-2&#34;&#xA;:class=&#34;active === &#39;Golang&#39; ? &#39;d-block&#39; : &#39;d-none&#39;&#34;&#xA;id=&#34;&#34;&#xA;role=&#34;tabpanel&#34;&#xA;aria-labelledby=&#34;&#34;&#xA;&gt;&#xA;&lt;p&gt;&lt;strong&gt;Requirements:&lt;/strong&gt; Golang&lt;/p&gt;&#xA;&lt;p&gt;First, we must install the Grafana Foundation SDK:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;go mod init example&#xA;go get github.com/grafana/grafana-foundation-sdk/go@v11.2.x&amp;#43;cog-v0.0.x&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;Next, we create our Golang dashboard code, as &lt;code&gt;main.go&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet &#34;&gt;&lt;div class=&#34;lang-toolbar&#34;&gt;&#xA;&lt;span class=&#34;lang-toolbar__item&#34;&gt;Go&lt;/span&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;div class=&#34;lang-toolbar__border&#34;&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet &#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;import (&#xA;&amp;#34;encoding/json&amp;#34;&#xA;&amp;#34;fmt&amp;#34;&#xA;&amp;#34;github.com/grafana/grafana-foundation-sdk/go/cog&amp;#34;&#xA;&amp;#34;github.com/grafana/grafana-foundation-sdk/go/dashboard&amp;#34;&#xA;&amp;#34;github.com/grafana/grafana-foundation-sdk/go/testdata&amp;#34;&#xA;&amp;#34;github.com/grafana/grafana-foundation-sdk/go/timeseries&amp;#34;&#xA;)&#xA;func grafanaDatasourceRef() dashboard.DataSourceRef {&#xA;return dashboard.DataSourceRef{&#xA;Uid: cog.ToPtr(&amp;#34;grafana&amp;#34;),&#xA;Type: cog.ToPtr(&amp;#34;grafana&amp;#34;),&#xA;}&#xA;}&#xA;func makeDashboard() string {&#xA;builder := dashboard.NewDashboardBuilder(&amp;#34;Example dashboard&amp;#34;).&#xA;Uid(&amp;#34;example-dashboard&amp;#34;).&#xA;Description(&amp;#34;Example Dashboard for Grizzly&amp;#34;).&#xA;Tooltip(dashboard.DashboardCursorSyncCrosshair).&#xA;WithPanel(&#xA;timeseries.NewPanelBuilder().&#xA;Title(&amp;#34;Requests / sec&amp;#34;).&#xA;Unit(&amp;#34;reqps&amp;#34;).&#xA;WithTarget(&#xA;testdata.NewDataqueryBuilder().&#xA;QueryType(&amp;#34;randomWalk&amp;#34;).&#xA;Datasource(grafanaDatasourceRef()),&#xA;).&#xA;Span(24).&#xA;Height(8),&#xA;)&#xA;dashboard, err := builder.Build()&#xA;if err != nil {&#xA;panic(err)&#xA;}&#xA;dashboardJson, err := json.MarshalIndent(dashboard, &amp;#34;&amp;#34;, &amp;#34; &amp;#34;)&#xA;if err != nil {&#xA;panic(err)&#xA;}&#xA;return string(dashboardJson)&#xA;}&#xA;func main() {&#xA;fmt.Println(makeDashboard())&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;Now we can tell Grizzly to watch for changes in our &lt;code&gt;main.go&lt;/code&gt; file, and then execute our code to regenerate the dashboard:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;grr serve -w -S &amp;#39;go run main.go&amp;#39; main.go&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;We can then visit the Grizzly server at &lt;a href=&#34;http://localhost:8080&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;http://localhost:8080&lt;/a&gt;, and select our dashboard. Now, when we change &lt;code&gt;main.go&lt;/code&gt; (e.g., change the dashboard title) and save it, we can reload the dashboard and see the changes in our Grafana instance.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div&#xA;class=&#34;docs_tabs--content py-1 px-2&#34;&#xA;:class=&#34;active === &#39;Python&#39; ? &#39;d-block&#39; : &#39;d-none&#39;&#34;&#xA;id=&#34;&#34;&#xA;role=&#34;tabpanel&#34;&#xA;aria-labelledby=&#34;&#34;&#xA;&gt;&#xA;&lt;p&gt;&lt;strong&gt;Requirements:&lt;/strong&gt; Python 3.11+, Python venv&lt;/p&gt;&#xA;&lt;p&gt;First, we must install the Grafana Foundation SDK:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;python -m venv .&#xA;bin/pip install &amp;#39;grafana_foundation_sdk==1728036865!11.2.0&amp;#39;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;On some systems, the first command might need to be &lt;code&gt;python3 -m venv .&lt;/code&gt;, which creates a Python virtual environment in the current directory.&lt;/p&gt;&#xA;&lt;p&gt;Next, we create our Python dashboard code, as &lt;code&gt;main.py&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet &#34;&gt;&lt;div class=&#34;lang-toolbar&#34;&gt;&#xA;&lt;span class=&#34;lang-toolbar__item&#34;&gt;python&lt;/span&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;div class=&#34;lang-toolbar__border&#34;&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet &#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;from grafana_foundation_sdk.builders import dashboard, testdata, timeseries&#xA;from grafana_foundation_sdk.models.dashboard import DataSourceRef, DashboardCursorSync, DashboardLinkType&#xA;from grafana_foundation_sdk.cog.encoder import JSONEncoder&#xA;def make_dashboard():&#xA;builder = (&#xA;dashboard.Dashboard(&amp;#39;Example dashboard&amp;#39;)&#xA;.uid(&amp;#39;example-dashboard&amp;#39;)&#xA;.description(&amp;#39;Example Dashboard for Grizzly&amp;#39;)&#xA;.tooltip(DashboardCursorSync.CROSSHAIR)&#xA;.with_panel(&#xA;timeseries.Panel()&#xA;.title(&amp;#39;Requests / sec&amp;#39;)&#xA;.unit(&amp;#34;reqps&amp;#34;)&#xA;.with_target(&#xA;testdata.Dataquery().query_type(&amp;#39;randomWalk&amp;#39;)&#xA;.datasource(DataSourceRef(uid=&amp;#34;grafana&amp;#34;, type_val=&amp;#34;grafana&amp;#34;))&#xA;)&#xA;.span(24)&#xA;.height(8)&#xA;)&#xA;)&#xA;dash = JSONEncoder(sort_keys=True, indent=2).encode(builder.build())&#xA;return dash&#xA;print(make_dashboard())&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;Now we can tell Grizzly to watch for changes in our &lt;code&gt;main.py&lt;/code&gt; file, and then execute our code to regenerate the dashboard:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;grr serve -w -S &amp;#39;bin/python main.py&amp;#39; main.py&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;We can then visit the Grizzly server at &lt;code&gt;http://localhost:8080&lt;/code&gt;, and select our dashboard. Now, when we change &lt;code&gt;main.py&lt;/code&gt; (e.g., change the dashboard title) and save it, we can reload the dashboard and see the changes in our Grafana instance.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div&#xA;class=&#34;docs_tabs--content py-1 px-2&#34;&#xA;:class=&#34;active === &#39;Java&#39; ? &#39;d-block&#39; : &#39;d-none&#39;&#34;&#xA;id=&#34;&#34;&#xA;role=&#34;tabpanel&#34;&#xA;aria-labelledby=&#34;&#34;&#xA;&gt;&#xA;&lt;p&gt;&lt;strong&gt;Requirements:&lt;/strong&gt; Java 17+, Maven&lt;/p&gt;&#xA;&lt;p&gt;First, we need to create a &lt;code&gt;pom.xml&lt;/code&gt; file for Maven:&lt;/p&gt;&#xA;&lt;p&gt;File Type: XML&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet &#34;&gt;&lt;div class=&#34;lang-toolbar&#34;&gt;&#xA;&lt;span class=&#34;lang-toolbar__item&#34;&gt;xml&lt;/span&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;div class=&#34;lang-toolbar__border&#34;&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet &#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&#xA;&amp;lt;project xmlns=&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34;&#xA;xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&#xA;xsi:schemaLocation=&amp;#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;#34;&amp;gt;&#xA;&amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;&#xA;&amp;lt;groupId&amp;gt;example&amp;lt;/groupId&amp;gt;&#xA;&amp;lt;artifactId&amp;gt;java&amp;lt;/artifactId&amp;gt;&#xA;&amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;&#xA;&amp;lt;properties&amp;gt;&#xA;&amp;lt;maven.compiler.source&amp;gt;17&amp;lt;/maven.compiler.source&amp;gt;&#xA;&amp;lt;maven.compiler.target&amp;gt;17&amp;lt;/maven.compiler.target&amp;gt;&#xA;&amp;lt;/properties&amp;gt;&#xA;&amp;lt;dependencies&amp;gt;&#xA;&amp;lt;dependency&amp;gt;&#xA;&amp;lt;groupId&amp;gt;com.grafana&amp;lt;/groupId&amp;gt;&#xA;&amp;lt;artifactId&amp;gt;grafana-foundation-sdk&amp;lt;/artifactId&amp;gt;&#xA;&amp;lt;version&amp;gt;11.2.0-1728036865&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&amp;lt;/dependencies&amp;gt;&#xA;&amp;lt;/project&amp;gt;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;Then, we can install the Grafana Foundation SDK:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt; mvn install&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;Once our dependencies have downloaded, we can create our Java dashboard code, as &lt;code&gt;src/main/java/example/App.java&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet &#34;&gt;&lt;div class=&#34;lang-toolbar&#34;&gt;&#xA;&lt;span class=&#34;lang-toolbar__item&#34;&gt;java&lt;/span&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;div class=&#34;lang-toolbar__border&#34;&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet &#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;package example;&#xA;import com.fasterxml.jackson.core.JsonProcessingException;&#xA;import com.grafana.foundation.dashboard.Dashboard;&#xA;import com.grafana.foundation.dashboard.DashboardCursorSync;&#xA;import com.grafana.foundation.dashboard.DataSourceRef;&#xA;import com.grafana.foundation.testdata.Dataquery;&#xA;import com.grafana.foundation.timeseries.PanelBuilder;&#xA;public class App {&#xA;public static void main(String[] args) {&#xA;DataSourceRef ref = new DataSourceRef();&#xA;ref.type = &amp;#34;grafana&amp;#34;;&#xA;ref.uid = &amp;#34;grafana&amp;#34;;&#xA;Dashboard dashboard = new Dashboard.Builder(&amp;#34;Example Dashboard&amp;#34;).&#xA;uid(&amp;#34;example-dashboard&amp;#34;).&#xA;description(&amp;#34;Example Dashboard for Grizzly&amp;#34;).&#xA;tooltip(DashboardCursorSync.CROSSHAIR).&#xA;withPanel(&#xA;new PanelBuilder().&#xA;title(&amp;#34;Requests / sec&amp;#34;).&#xA;unit(&amp;#34;reqps&amp;#34;).&#xA;span(24).&#xA;height(8).&#xA;withTarget(&#xA;new Dataquery.Builder().&#xA;datasource(ref).&#xA;queryType(&amp;#34;randomWalk&amp;#34;)&#xA;)&#xA;).build();&#xA;try {&#xA;System.out.println(dashboard.toJSON());&#xA;} catch (JsonProcessingException e) {&#xA;e.printStackTrace();&#xA;}&#xA;}&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;Now we can tell Grizzly to watch for changes in our &lt;code&gt;src&lt;/code&gt; directory, and then execute our code to regenerate the dashboard:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;grr serve -w -S &amp;#39;mvn exec:java -q -Dexec.mainClass=&amp;#34;example.App&amp;#34;&amp;#39; src&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;We can then visit the Grizzly server at &lt;a href=&#34;http://localhost:8080&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;http://localhost:8080&lt;/a&gt;, and select our dashboard. Now, when we change &lt;code&gt;App.java&lt;/code&gt; (e.g., change the dashboard title) and save it, we can reload the dashboard and see the changes in our Grafana instance.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div&#xA;class=&#34;docs_tabs--content py-1 px-2&#34;&#xA;:class=&#34;active === &#39;PHP&#39; ? &#39;d-block&#39; : &#39;d-none&#39;&#34;&#xA;id=&#34;&#34;&#xA;role=&#34;tabpanel&#34;&#xA;aria-labelledby=&#34;&#34;&#xA;&gt;&#xA;&lt;p&gt;&lt;strong&gt;Requirements:&lt;/strong&gt; PHP CLI, Composer&lt;/p&gt;&#xA;&lt;p&gt;First, we must install the Grafana Foundation SDK:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt; composer require grafana/foundation-sdk:dev-v11.2.x&amp;#43;cog-v0.0.x&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;Next, we create our PHP dashboard code, as &lt;code&gt;main.php&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet &#34;&gt;&lt;div class=&#34;lang-toolbar&#34;&gt;&#xA;&lt;span class=&#34;lang-toolbar__item&#34;&gt;php&lt;/span&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;div class=&#34;lang-toolbar__border&#34;&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet &#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;require_once(__DIR__ . &amp;#34;/vendor/autoload.php&amp;#34;);&#xA;use Grafana\Foundation\Dashboard\DataSourceRef;&#xA;use Grafana\Foundation\Dashboard\DashboardBuilder;&#xA;use Grafana\Foundation\Dashboard\DashboardCursorSync;&#xA;use Grafana\Foundation\Testdata;&#xA;use Grafana\Foundation\Timeseries;&#xA;function makeDashboard(): string {&#xA;$builder = (new DashboardBuilder(title: &amp;#39;Example Dashboard&amp;#39;))&#xA;-&amp;gt;uid(&amp;#39;example-dashboard&amp;#39;)&#xA;-&amp;gt;description(&amp;#39;Example Dashboard for Grizzly&amp;#39;)&#xA;-&amp;gt;tooltip(DashboardCursorSync::crosshair())&#xA;-&amp;gt;withPanel(&#xA;(new Timeseries\PanelBuilder())&#xA;-&amp;gt;title(&amp;#39;Requests / sec&amp;#39;)&#xA;-&amp;gt;unit(&amp;#39;reqps&amp;#39;)&#xA;-&amp;gt;withTarget(&#xA;(new Testdata\DataqueryBuilder())&#xA;-&amp;gt;queryType(&amp;#39;randomWalk&amp;#39;)&#xA;-&amp;gt;datasource((new DataSourceRef(&amp;#39;grafana&amp;#39;, &amp;#39;grafana&amp;#39;)))&#xA;)&#xA;-&amp;gt;span(24)&#xA;-&amp;gt;height(8)&#xA;);&#xA;$json = $builder-&amp;gt;build();&#xA;return json_encode($json, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES).PHP_EOL;&#xA;}&#xA;echo makeDashboard();&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;Now we can tell Grizzly to watch for changes in our &lt;code&gt;main.php&lt;/code&gt; file, and then execute our code to regenerate the dashboard:&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;button x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;Copy code to clipboard&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;Copy&lt;/span&gt;&#xA;&lt;/button&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;grr serve -w -S &amp;#39;php main.php&amp;#39; main.php&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;We can then visit the Grizzly server at &lt;a href=&#34;http://localhost:8080&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;http://localhost:8080&lt;/a&gt;, and select our dashboard. Now, when we change &lt;code&gt;main.php&lt;/code&gt; (e.g., change the dashboard title) and save it, we can reload the dashboard and see the changes in our Grafana instance.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;h2 id=&#34;see-grizzly-serve-in-action&#34;&gt;See Grizzly serve in action&lt;/h2&gt;&#xA;&lt;p&gt;To take a closer look at the steps I&amp;rsquo;ve outlined above, check out the video below. In it, I demo the Grizzly serve functionality with static files as well as with Grafonnet, but the same basic principles will apply for any of the languages we have discussed above.&lt;/p&gt;&#xA;&lt;div&#xA;class=&#34;youtube-lazyload responsive-video&#34;&#xA;data-embed=&#34;sPD5ZUeoPus&#34;&#xA;data-url=&#34;https://www.youtube.com/embed/sPD5ZUeoPus?autoplay=1&amp;amp;rel=0&#34;&#xA;data-title=&#34;YouTube Video&#34;&#xA;&gt;&#xA;&lt;div class=&#34;play-button&#34;&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;If you have any questions or want to discuss further, please reach out to the #dashboards-as-code channel in the &lt;a href=&#34;https://slack.grafana.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Grafana community Slack&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Senior Software Engineer Selene Pinillos contributed to this blog post.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;/products/cloud/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Grafana Cloud&lt;/a&gt; is the easiest way to get started with metrics, logs, traces, dashboards, and more, and works well with Grizzly&amp;rsquo;s serve feature. We have a generous forever-free tier and plans for every use case. &lt;a href=&#34;/auth/sign-up/create-user/?pg=blog&amp;amp;plcmt=body-txt&#34;&gt;Sign up for free now&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;】&lt;p&gt;Grafana 已发展成为最著名的仪表板工具之一，拥有支持各种规模组织的广泛功能。然而，有时您可能会拥有太多仪表板。&lt;/p&gt;&#xA;&lt;p&gt;作为一名软件工程师，您可能会想，“为什么我不能用仪表板做我用代码做的事情？”也就是说，您知道如何将代码置于版本控制（例如 Git）中。您知道如何与同事共享和审查您的代码（例如拉取请求）。并且您知道如何构建自动化部署管道来部署我们的代码（即 CI/CD）。通过这个，我们获得了规模，我们获得了历史记录，并且我们所有的代码在部署之前都经过了审查。那么为什么不能在 Grafana 安装中执行此操作呢？&lt;/p&gt;&#xA;&lt;p&gt;事实上，你可以。&lt;/p&gt;&#xA;&lt;p&gt;您可以使用 IDE 以 JSON 形式编辑仪表板，或使用 &lt;a href=&#34;https://grafana.github.io/grafonnet/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener 等工具创建仪表板noreferrer&#34;&gt;Grafonnet&lt;/a&gt;（Jsonnet 格式）或 &lt;a href=&#34;https://github.com/grafana/grafana-foundation-sdk&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Grafana Foundation SDK &lt;/a&gt;（Go、TypeScript、Python、Java、PHP）。然后，您可以使用 Grafana Terraform 提供程序、Grizzly 和 Grafana Operator for Kubernetes 等工具将它们发布到 Grafana 实例。&lt;/p&gt;&#xA;&lt;p&gt;但是，一旦您制作（或更新）了仪表板，您如何确认它是否按预期工作？您的同事将如何确认它按预期工作以便对其进行审核？在这篇文章中，我们将重点介绍一个工具，该工具可以帮助我们在准备发布仪表板之前对其进行审查。这可以帮助您节省时间、更早地结束审核反馈循环并减少痛苦，并获得更好的整体体验。&lt;/p&gt;&#xA;&lt;h2 id=&#34;how-to-review-dashboards-before-theyre-published&#34;&gt;如何在发布仪表板之前对其进行审核&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://grafana.github.io/grizzly/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Grizzly&lt;/a&gt;，Grafana 的命令行工具，有一个新的 &lt; code&gt;serve&lt;/code&gt; 函数，可用于验证（甚至编辑！）Grafana Cloud 实例（或任何其他 Grafana 实例）中的仪表板。&lt;/p&gt;&#xA;&lt;h3 id=&#34;configuring-grizzly&#34;&gt;配置 Grizzly&lt;/h3&gt;&#xA;&lt;p&gt;首先，我们通过将 Grizzly 指向 Grafana 实例来配置它。 （您需要 Grizzly 0.4.6 或更高版本才能按照本博客中概述的步骤进行操作。）&lt;/p&gt;&#xA;&lt;p&gt;出于这些目的，我建议使用一个开发 Grafana 实例，其中包含有意义的数据，但不在生产中使用。为此，数据源 UID 必须与生产实例上的 UID 相同。&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;按钮 x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;将代码复制到剪贴板&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;复制&lt;/span&gt;&#xA;&lt;/按钮&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div 类=”代码片段 代码片段__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;grr config create-context dev&#xA;grr config set grafana.url https://mystack.grafana.net ← 或我的开发实例 URL&#xA;grr config set grafana.token &lt;my-service-account-token&gt; ← 从我的 Grafana 实例获取此令牌&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;现在我的实例已准备好运行。&lt;/p&gt;&#xA;&lt;块引用&gt;&#xA;&lt;h4 id=&#34;grafana-data-source-requirements&#34;&gt;Grafana 数据源要求&lt;/h4&gt;&#xA;&lt;p&gt;如果您想使用与最终计划部署仪表板的实例不同的 Grafana 实例进行编辑，则需要注意您的数据源 UID，两个 Grafana 实例上的 UID 必须相同。&lt;/p &gt;&#xA;&lt;p&gt;为此，您需要通过 API 创建数据源，例如使用 Grizzly 或 Terraform。您不需要替换现有的数据源。您还可以添加指向同一后端的其他数据源，因此这对于现有仪表板来说不一定是问题。&lt;/p&gt;&#xA;&lt;/块引用&gt;&#xA;&lt;h3 id=&#34;editing-our-offline-dashboards-with-grafana-and-grizzly&#34;&gt;使用 Grafana 和 Grizzly 编辑我们的“离线”仪表板&lt;/h3&gt;&#xA;&lt;p&gt;接下来，让我们看看如何在本地编辑仪表板，或者像我喜欢的那样，“离线”编辑。假设我们有一个仪表板文件，以 JSON 格式存储在 Git 存储库中。我们有一个本地结帐，我们想要对其进行更改，但对于某些更改，通过编辑 JSON 文件确实很难（如果不是不可能）实现。&lt;/p&gt;&#xA;&lt;p&gt;相反，我们可以使用 Grizzly 来帮助我们。让我们创建仪表板文件并将其命名为 &lt;code&gt;my-dashboard.json&lt;/code&gt;：&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet&#34;&gt;&lt;div class=&#34;lang-toolbar&#34;&gt;&#xA;&lt;span class=&#34;lang-toolbar__item&#34;&gt;json&lt;/span&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;按钮 x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;将代码复制到剪贴板&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;复制&lt;/span&gt;&#xA;&lt;/按钮&gt;&#xA;&lt;/span&gt;&#xA;&lt;div class=&#34;lang-toolbar__border&#34;&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;“图形工具提示”：1，&#xA;“面板”：[&#xA;{&#xA;“数据源”：{&#xA;“类型”：“数据源”，&#xA;&#34;uid&#34;: &#34;-- 混合 --&#34;&#xA;},&#xA;“字段配置”：{&#xA;“默认”：{&#xA;“单位”：“要求”&#xA;}&#xA;},&#xA;“网格位置”：{&#xA;“h”：8，&#xA;“w”：24&#xA;},&#xA;“id”：1，&#xA;&#34;插件版本&#34;: &#34;v11.0.0&#34;,&#xA;“目标”：[&#xA;{&#xA;“数据源”：{&#xA;“类型”：“数据源”，&#xA;“uid”：“格拉法纳”&#xA;},&#xA;“查询类型”：“随机行走”&#xA;}&#xA;],&#xA;&#34;title&#34;: &#34;请求数/秒&#34;,&#xA;“类型”：“时间序列”&#xA;}&#xA;],&#xA;“架构版本”：39，&#xA;&#34;title&#34;: &#34;仪表板示例&#34;,&#xA;“uid”：“示例仪表板”&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;然后我们可以使用以下命令查看和编辑此仪表板：&lt;/p&gt;&#xA;&lt;div class=&#34;代码片段 代码片段pet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;按钮 x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;将代码复制到剪贴板&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;复制&lt;/span&gt;&#xA;&lt;/按钮&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;grr 服务 my-dashboard.json&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;这将在 &lt;a href=&#34;http://localhost:8080&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;http://localhost:8080 打开一个 Web 服务器（默认情况下） &lt;/a&gt;。在浏览器中访问该 URL 将在 Grizzly 服务 UI 中显示我们的仪表板的名称。单击仪表板的链接，我们将在配置的 Grafana 实例中看到我们的仪表板。&lt;/p&gt;&#xA;&lt;块引用&gt;&#xA;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;此仪表板在我们的 Grafana 实例中不存在。 Grizzly 运行客户端，拦截对 Grafana 的请求并从磁盘读取仪表板 JSON。&lt;/p&gt;&#xA;&lt;/块引用&gt;&#xA;&lt;p&gt;接下来，对仪表板进行更改，然后点击&lt;strong&gt;保存&lt;/strong&gt;。同样，仪表板不会存在于 Grafana 中；保存它将更新磁盘上的文件。&lt;/p&gt;&#xA;&lt;h3 id=&#34;reviewing-our- generated-dashboards-with-grafana-and-grizzly&#34;&gt;使用 Grafana 和 Grizzly 查看我们生成的仪表板&lt;/h3&gt;&#xA;&lt;p&gt;到目前为止，我们已经研究了如何一起使用 Grizzly 和 Grafana 来编辑仪表板并将其保存到本地磁盘。如果我们想查看生成的仪表板怎么办？&lt;/p&gt;&#xA;&lt;块引用&gt;&#xA;&lt;h4 id=&#34;what-is-a- generated-dashboard&#34;&gt;什么是生成的仪表板？&lt;/h4&gt;&#xA;&lt;p&gt;如果仪表板表示为 JSON，则意味着我们可以使用代码创建该 JSON。然而，该 JSON 的结构很复杂，使得任务变得更加困难。幸运的是，有多种语言的库可以使这一切变得更加容易，包括在您选择的 IDE 中使用代码完成。&lt;/p&gt;&#xA;&lt;/块引用&gt;&#xA;&lt;p&gt;幸运的是，Grizzly 支持“生成”仪表板。当我们计划直接更改文件（而不是更改 UI 中的仪表板）时，我们希望告诉 Grizzly 使用 &lt;code&gt;-w&lt;/code&gt; 开关监视文件系统的更改。有时，我们会想要告诉 Grizzly 监视文件目录。灰熊也能做到这一点。然后，只需在浏览器中重新加载仪表板即可看到我们的更改。&lt;/p&gt;&#xA;&lt;p&gt;Grizzly 直接支持 Jsonnet。对于其他语言，我们的代码需要将仪表板输出到 stdout - 单个仪表板 JSON 或仪表板 JSON 数组。然后，我们可以在调用 Grizzly 时引用命令来执行代码。 （我们将在下面给出每种语言的示例。）&lt;/p&gt;&#xA;&lt;p&gt;接下来，让我们看看如何使用支持的语言创建仪表板代码并预览仪表板。&lt;/p&gt;&#xA;&lt;div class=&#34;br-4 base-border border-color-gray-3 docs_tabs&#34;&gt;&#xA;&lt;div x-data=&#34;app_content_tabs([&#34;Jsonnet&#34;,&#34;TypeScript&#34;,&#34;Golang&#34;,&#34;Python&#34;,&#34;Java&#34;,&#34;PHP&#34;], &#39;05005e3df7d24a7bec02c11e6bb37441&#39;)&#34; x-init=&#34;init()&#34;&gt;&#xA;&lt;div class=&#34;d-flex w-100p flex-direction-rowalign-items-center justify-content-flex-start d-md-none&#34;&gt;&#xA;&lt;select class=&#34;docs_tabs--select w-100p base-border-bottom border-color-gray-3&#34; @change=&#34;toggle($event.target.value)&#34;&gt;&#xA;&lt;option value=&#34;Jsonnet&#34; :selected=&#34;active === &#39;Jsonnet&#39;&#34;&gt;Jsonnet&lt;/option&gt;&#xA;&lt;option value=&#34;TypeScript&#34; :selected=&#34;active === &#39;TypeScript&#39;&#34;&gt;TypeScript&lt;/option&gt;&#xA;&lt;option value=&#34;Golang&#34; :selected=&#34;active === &#39;Golang&#39;&#34;&gt;Golang&lt;/option&gt;&#xA;&lt;option value=&#34;Python&#34; :selected=&#34;active === &#39;Python&#39;&#34;&gt;Python&lt;/option&gt;&#xA;&lt;option value=&#34;Java&#34; :selected=&#34;active === &#39;Java&#39;&#34;&gt;Java&lt;/option&gt;&#xA;&lt;option value=&#34;PHP&#34; :selected=&#34;active === &#39;PHP&#39;&#34;&gt;PHP&lt;/option&gt;&#xA;&lt;/选择&gt;&#xA;&lt;/div&gt;&#xA;&lt;nav class=&#34;docs_tabs--navigation base-border-bottom border-color-gray-3 d-none d-md-block&#34; role=&#34;tablist&#34; data-codetoggle=&#34;true&#34;&gt;&#xA;&lt;按钮&#xA;类=“docs_tabs--标签f-14 bg-透明颜色-灰色-11 py-8 px-1”&#xA;数据切换=“选项卡”&#xA;角色=“选项卡”&#xA;@click=&#34;切换(&#39;Jsonnet&#39;)&#34;&#xA;:class=&#34;{ &#39;docs_tabs--label-active&#39;: active === &#39;Jsonnet&#39; }&#34;&#xA;&gt;&#xA;杰森网&#xA;&lt;/按钮&gt;&#xA;&lt;按钮&#xA;类=“docs_tabs--标签f-14 bg-透明颜色-灰色-11 py-8 px-1”&#xA;数据切换=“选项卡”&#xA;角色=“选项卡”&#xA;@click=&#34;切换(&#39;TypeScript&#39;)&#34;&#xA;:class=&#34;{ &#39;docs_tabs--label-active&#39;: active === &#39;TypeScript&#39; }&#34;&#xA;&gt;&#xA;打字稿&#xA;&lt;/按钮&gt;&#xA;&lt;按钮&#xA;类=“docs_tabs--标签f-14 bg-透明颜色-灰色-11 py-8 px-1”&#xA;数据切换=“选项卡”&#xA;角色=“选项卡”&#xA;@click=&#34;切换(&#39;Golang&#39;)&#34;&#xA;:class=&#34;{ &#39;docs_tabs--label-active&#39;: active === &#39;Golang&#39; }&#34;&#xA;&gt;&#xA;戈兰&#xA;&lt;/按钮&gt;&#xA;&lt;按钮&#xA;类=“docs_tabs--标签f-14 bg-透明颜色-灰色-11 py-8 px-1”&#xA;数据切换=“选项卡”&#xA;角色=“选项卡”&#xA;@click=&#34;切换(&#39;Python&#39;)&#34;&#xA;:class=&#34;{ &#39;docs_tabs--label-active&#39;: active === &#39;Python&#39; }&#34;&#xA;&gt;&#xA;Python&#xA;&lt;/按钮&gt;&#xA;&lt;按钮&#xA;类=“docs_tabs--标签f-14 bg-透明颜色-灰色-11 py-8 px-1”&#xA;数据切换=“选项卡”&#xA;角色=“选项卡”&#xA;@click=&#34;切换(&#39;Java&#39;)&#34;&#xA;:class=&#34;{ &#39;docs_tabs--label-active&#39;: active === &#39;Java&#39; }&#34;&#xA;&gt;&#xA;爪哇&#xA;&lt;/按钮&gt;&#xA;&lt;按钮&#xA;类=“docs_tabs--标签f-14 bg-透明颜色-灰色-11 py-8 px-1”&#xA;数据切换=“选项卡”&#xA;角色=“选项卡”&#xA;@click=&#34;切换(&#39;PHP&#39;)&#34;&#xA;:class=&#34;{ &#39;docs_tabs--label-active&#39;: active === &#39;PHP&#39; }&#34;&#xA;&gt;&#xA;PHP&#xA;&lt;/按钮&gt;&#xA;&lt;/导航&gt;&#xA;&lt;div class=&#34;docs_tabs--content-container&#34; id=&#34;&#34;&gt;&#xA;&lt;div&#xA;类=“docs_tabs--内容py-1 px-2”&#xA;:class=&#34;active === &#39;Jsonnet&#39; ? &#39;d-block&#39; : &#39;d-none&#39;&#34;&#xA;id=&#34;&#34;&#xA;角色=“选项卡面板”&#xA;咏叹调-labelledby=&#34;&#34;&#xA;&gt;&#xA;&lt;p&gt;&lt;strong&gt;要求：&lt;/strong&gt; &lt;a href=&#34;https://github.com/google/go-jsonnet&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;go-jsonnet&lt;/a&gt; /&lt;a href=&#34;https://github.com/jsonnet-bundler/jsonnet-bundler&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;jsonnet-bundler&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;首先我们要安装 Grafonnet：&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;按钮 x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;将代码复制到剪贴板&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;复制&lt;/span&gt;&#xA;&lt;/按钮&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class =“代码片段代码片段__border”&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;jb 初始化&#xA;jb安装github.com/grafana/grafonnet/gen/grafonnet-latest@main&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;然后，创建包含以下代码的 &lt;code&gt;main.jsonnet&lt;/code&gt;：&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;按钮 x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;将代码复制到剪贴板&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;复制&lt;/span&gt;&#xA;&lt;/按钮&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;本地 g = import &#39;github.com/grafana/grafonnet/gen/grafonnet-latest/main.libsonnet&#39;;&#xA;g.dashboard.new(&#39;示例仪表板&#39;)&#xA;+ g.dashboard.withUid(&#39;示例仪表板&#39;)&#xA;+ g.dashboard.withDescription(&#39;Grizzly 仪表板示例&#39;)&#xA;+ g.dashboard.graphTooltip.withSharedCrosshair()&#xA;+ g.dashboard.withPanels([&#xA;g.panel.timeSeries.new(&#39;请求数/秒&#39;)&#xA;+ g.panel.timeSeries.queryOptions.withTargets([&#xA;g.query.testData.withQueryType(&#39;randomWalk&#39;)&#xA;+ g.query.testData.withDatasource()&#xA;]）&#xA;+ g.panel.timeSeries.standardOptions.withUnit(&#39;reqps&#39;)&#xA;+ g.panel.timeSeries.gridPos.withW(24)&#xA;+ g.panel.timeSeries.gridPos.withH(8),&#xA;])&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;要使用 Grizzly 预览此仪表板，我们可以运行：&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;按钮 x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;将代码复制到剪贴板&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;复制&lt;/span&gt;&#xA;&lt;/按钮&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;grrserve -w main.jsonnet&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;然后我们可以访问 Grizzly 服务器（http://localhost:8080），并选择我们的仪表板。现在，当我们更改 &lt;code&gt;main.jsonnet&lt;/code&gt; （例如，更改仪表板标题）并保存它时，我们可以重新加载仪表板并查看 Grafana 实例中的更改。&lt;/p&gt;&#xA;&lt;p&gt;试试这个。编辑 &lt;code&gt;main.jsonnet&lt;/code&gt; （例如，在 &lt;code&gt;new()&lt;/code&gt; 调用中更改标题），保存后，重新加载仪表板并查看 Grafana 实例中的更改.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div&#xA;类=“docs_tabs--内容py-1 px-2”&#xA;:class=&#34;active === &#39;TypeScript&#39; ? &#39;d-block&#39; : &#39;d-none&#39;&#34;&#xA;id=&#34;&#34;&#xA;角色=“选项卡面板”&#xA;咏叹调-labelledby=&#34;&#34;&#xA;&gt;&#xA;&lt;p&gt;&lt;strong&gt;要求：&lt;/strong&gt; Yarn/NodeJS/NPX&lt;/p&gt;&#xA;&lt;p&gt;首先，我们必须安装 TypeScript 和 Grafana Foundation SDK：&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;按钮 x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;将代码复制到剪贴板&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;复制&lt;/span&gt;&#xA;&lt;/按钮&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;纱线添加 --dev typescript ts-node @types/node&#xA;纱线添加&#39;@grafana/grafana-foundation-sdk@~11.2.0-cogv0.0.x.1728036865&#39;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;然后，创建一个简单的 &lt;code&gt;tsconfig.json&lt;/code&gt; 文件：&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet&#34;&gt;&lt;div class=&#34;lang-toolbar&#34;&gt;&#xA;&lt;span class=&#34;lang-toolbar__item&#34;&gt;json&lt;/span&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;按钮 x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;将代码复制到剪贴板&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;复制&lt;/span&gt;&#xA;&lt;/按钮&gt;&#xA;&lt;/span&gt;&#xA;&lt;div class=&#34;lang-toolbar__border&#34;&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;“编译器选项”：{&#xA;“模块分辨率”：“Node16”，&#xA;“模块”：“节点16”，&#xA;“lib”：[“ES2022”]&#xA;}&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;接下来，我们创建 TypeScript 仪表板代码，如 &lt;code&gt;main.ts&lt;/code&gt;：&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet&#34;&gt;&lt;div class=&#34;lang-toolbar&#34;&gt;&#xA;&lt;span class=&#34;lang-toolbar__item&#34;&gt;打字稿&lt;/span&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;按钮 x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;将代码复制到剪贴板&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;复制&lt;/span&gt;&#xA;&lt;/按钮&gt;&#xA;&lt;/span&gt;&#xA;&lt;div class=&#34;lang-toolbar__border&#34;&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-typescript&#34;&gt;从 &#39;@grafana/grafana-foundation-sdk/dashboard&#39; 导入 * 作为仪表板；&#xA;从&#39;@grafana/grafana-foundation-sdk/testdata&#39;导入*作为测试数据；&#xA;从 &#39;@grafana/grafana-foundation-sdk/timeseries&#39; 导入 { PanelBuilder as TimeseriesBuilder }；&#xA;函数 makeDashboard() {&#xA;let builder = new dashboard.DashboardBuilder(&#39;示例仪表板&#39;)&#xA;.uid(&#39;示例仪表板&#39;)&#xA;.description(&#39;Grizzly 仪表板示例&#39;)&#xA;.tooltip(仪表板.DashboardCursorSync.Crosshair)&#xA;.withPanel(&#xA;新的时间序列生成器（）&#xA;.title(&#39;请求数/秒&#39;)&#xA;.unit(&#34;要求&#34;)&#xA;.withTarget(&#xA;新的 testdata.DataqueryBuilder()&#xA;.queryType(&#39;randomWalk&#39;)&#xA;.datasource({uid: &#34;grafana&#34;, 类型: &#34;grafana&#34;})&#xA;）&#xA;.span(24)&#xA;.高度(8)&#xA;）；&#xA;const dash = JSON.stringify(builder.build(), null, 2);&#xA;返回破折号；&#xA;}&#xA;console.log(makeDashboard());&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;现在，假设我们使用 &lt;code&gt;npx ts-node main.ts&lt;/code&gt; 运行代码。然后我们可以告诉 Grizzly 观察 &lt;code&gt;main.ts&lt;/code&gt; 文件中的更改，然后执行 &lt;code&gt;npx&lt;/code&gt; 命令来重新生成仪表板：&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;按钮 x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;将代码复制到剪贴板&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;复制&lt;/span&gt;&#xA;&lt;/按钮&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;grrserve -w -S &#39;npx ts-node main.ts&#39; main.ts&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;然后我们可以访问 Grizzly 服务器 &lt;a href=&#34;http://localhost:8080&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;http://localhost:8080&lt;/a &gt;，然后选择我们的仪表板。现在，当我们更改 &lt;code&gt;main.ts&lt;/code&gt; （例如，更改仪表板标题）并保存它时，我们可以重新加载仪表板并查看 Grafana 实例中的更改。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div&#xA;类=“docs_tabs--内容py-1 px-2”&#xA;:class=&#34;active === &#39;Golang&#39; ? &#39;d-block&#39; : &#39;d-none&#39;&#34;&#xA;id=&#34;&#34;&#xA;角色=“选项卡面板”&#xA;咏叹调-labelledby=&#34;&#34;&#xA;&gt;&#xA;&lt;p&gt;&lt;strong&gt;要求：&lt;/strong&gt;Golang&lt;/p&gt;&#xA;&lt;p&gt;首先，我们必须安装 Grafana Foundation SDK：&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;按钮 x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;将代码复制到剪贴板&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;复制&lt;/span&gt;&#xA;&lt;/按钮&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;go mod 初始化示例&#xA;去获取 github.com/grafana/grafana-foundation-sdk/go@v11.2.x+cog-v0.0.x&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;接下来，我们创建 Golang 仪表板代码，如 &lt;code&gt;main.go&lt;/code&gt;：&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet&#34;&gt;&lt;div class=&#34;lang-toolbar&#34;&gt;&#xA;&lt;span class=&#34;lang-toolbar__item&#34;&gt;开始&lt;/span&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;按钮 x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;将代码复制到剪贴板&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;复制&lt;/span&gt;&#xA;&lt;/按钮&gt;&#xA;&lt;/span&gt;&#xA;&lt;div class=&#34;lang-toolbar__border&#34;&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-go&#34;&gt;包主要内容&#xA;进口 （&#xA;“编码/json”&#xA;“FMMT”&#xA;“github.com/grafana/grafana-foundation-sdk/go/cog”&#xA;“github.com/grafana/grafana-foundation-sdk/go/dashboard”&#xA;“github.com/grafana/grafana-foundation-sdk/go/testdata”&#xA;“github.com/grafana/grafana-foundation-sdk/go/timeseries”&#xA;）&#xA;func grafanaDatasourceRef() 仪表板.DataSourceRef {&#xA;返回仪表板.DataSourceRef{&#xA;Uid: cog.ToPtr(&#34;grafana&#34;),&#xA;类型：cog.ToPtr(&#34;grafana&#34;),&#xA;}&#xA;}&#xA;func makeDashboard() 字符串 {&#xA;builder :=仪表板.NewDashboardBuilder(“示例仪表板”)。&#xA;Uid(“示例仪表板”)。&#xA;描述（“Grizzly 仪表板示例”）。&#xA;工具提示（仪表板.DashboardCursorSyncCrosshair）。&#xA;与面板（&#xA;timeseries.NewPanelBuilder()。&#xA;标题（“请求数/秒”）。&#xA;单位（“要求”）。&#xA;与目标（&#xA;testdata.NewDataqueryBuilder()。&#xA;查询类型（“随机行走”）。&#xA;数据源(grafanaDatasourceRef()),&#xA;）。&#xA;跨度(24)。&#xA;高度(8),&#xA;）&#xA;仪表板，err := builder.Build()&#xA;如果错误！= nil {&#xA;恐慌（错误）&#xA;}&#xA;dashboardJson, err := json.MarshalIndent(dashboard, &#34;&#34;, &#34; &#34;)&#xA;如果错误！= nil {&#xA;恐慌（错误）&#xA;}&#xA;返回字符串（dashboardJson）&#xA;}&#xA;函数主() {&#xA;fmt.Println(makeDashboard())&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;现在我们可以告诉 Grizzly 监视 &lt;code&gt;main.go&lt;/code&gt; 文件中的更改，然后执行我们的代码来重新生成仪表板：&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;按钮 x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;将代码复制到剪贴板&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;复制&lt;/span&gt;&#xA;&lt;/按钮&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;grrserve -w -S &#39;go run main.go&#39; main.go&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;然后我们可以访问 Grizzly 服务器 &lt;a href=&#34;http://localhost:8080&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;http://localhost:8080&lt;/a &gt;，然后选择我们的仪表板。现在，当我们更改 &lt;code&gt;main.go&lt;/code&gt; （例如，更改仪表板标题）并保存它时，我们可以重新加载仪表板并查看 Grafana 实例中的更改。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div&#xA;类=“docs_tabs--内容py-1 px-2”&#xA;:class=&#34;active === &#39;Python&#39; ? &#39;d-block&#39; : &#39;d-none&#39;&#34;&#xA;id=&#34;&#34;&#xA;角色=“选项卡面板”&#xA;咏叹调-labelledby=&#34;&#34;&#xA;&gt;&#xA;&lt;p&gt;&lt;strong&gt;要求：&lt;/strong&gt;Python 3.11+、Python venv&lt;/p&gt;&#xA;&lt;p&gt;首先，我们必须安装 Grafana Foundation SDK：&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;按钮 x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;将代码复制到剪贴板&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;复制&lt;/span&gt;&#xA;&lt;/按钮&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;python -m venv 。&#xA;bin/pip install &#39;grafana_foundation_sdk==1728036865!11.2.0&#39;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;在某些系统上，第一个命令可能需要是&lt;code&gt;python3 -m venv .&lt;/code&gt;，它在当前目录中创建一个Python虚拟环境。&lt;/p&gt;&#xA;&lt;p&gt;接下来，我们创建 Python 仪表板代码，如 &lt;code&gt;main.py&lt;/code&gt;：&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet&#34;&gt;&lt;div class=&#34;lang-toolbar&#34;&gt;&#xA;&lt;span class=&#34;lang-toolbar__item&#34;&gt;Python&lt;/span&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;按钮 x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;将代码复制到剪贴板&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;复制&lt;/span&gt;&#xA;&lt;/按钮&gt;&#xA;&lt;/span&gt;&#xA;&lt;div class=&#34;lang-toolbar__border&#34;&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;从grafana_foundation_sdk.builders导入仪表板、测试数据、时间序列&#xA;来自grafana_foundation_sdk.models.dashboard 导入 DataSourceRef、DashboardCursorSync、DashboardLinkType&#xA;从 grafana_foundation_sdk.cog.encoder 导入 JSONEncoder&#xA;def make_dashboard():&#xA;建造者 = (&#xA;仪表板.仪表板（&#39;示例仪表板&#39;）&#xA;.uid(&#39;示例仪表板&#39;)&#xA;.description(&#39;Grizzly 仪表板示例&#39;)&#xA;.tooltip(DashboardCursorSync.CROSSHAIR)&#xA;.with_panel(&#xA;timeseries.Panel()&#xA;.title(&#39;请求数/秒&#39;)&#xA;.unit(&#34;要求&#34;)&#xA;.with_target(&#xA;testdata.Dataquery().query_type(&#39;randomWalk&#39;)&#xA;.datasource(DataSourceRef(uid=&#34;grafana&#34;, type_val=&#34;grafana&#34;))&#xA;）&#xA;.span(24)&#xA;.高度(8)&#xA;）&#xA;）&#xA;破折号 = JSONEncoder(sort_keys=True, indent=2).encode(builder.build())&#xA;返回破折号&#xA;打印（make_dashboard（））&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;现在我们可以告诉 Grizzly 监视 &lt;code&gt;main.py&lt;/code&gt; 文件中的更改，然后执行我们的代码来重新生成仪表板：&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;按钮 x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;将代码复制到剪贴板&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;复制&lt;/span&gt;&#xA;&lt;/按钮&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;grrserve -w -S &#39;bin/python main.py&#39; main.py&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;然后我们可以通过 &lt;code&gt;http://localhost:8080&lt;/code&gt; 访问 Grizzly 服务器，并选择我们的仪表板。现在，当我们更改 &lt;code&gt;main.py&lt;/code&gt; （例如，更改仪表板标题）并保存它时，我们可以重新加载仪表板并查看 Grafana 实例中的更改。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div&#xA;类=“docs_tabs--内容py-1 px-2”&#xA;:class=&#34;active === &#39;Java&#39; ? &#39;d-block&#39; : &#39;d-none&#39;&#34;&#xA;id=&#34;&#34;&#xA;角色=“选项卡面板”&#xA;咏叹调-labelledby=&#34;&#34;&#xA;&gt;&#xA;&lt;p&gt;&lt;strong&gt;要求：&lt;/strong&gt;Java 17+、Maven&lt;/p&gt;&#xA;&lt;p&gt;首先，我们需要为 Maven 创建一个 &lt;code&gt;pom.xml&lt;/code&gt; 文件：&lt;/p&gt;&#xA;&lt;p&gt;文件类型：XML&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet&#34;&gt;&lt;div class=&#34;lang-toolbar&#34;&gt;&#xA;&lt;span class=&#34;lang-toolbar__item&#34;&gt;xml&lt;/span&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;按钮 x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;将代码复制到剪贴板&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;复制&lt;/span&gt;&#xA;&lt;/按钮&gt;&#xA;&lt;/span&gt;&#xA;&lt;div class=&#34;lang-toolbar__border&#34;&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-xml&#34;&gt;&lt;?xml version=&#34;1.0&#34;encoding=&#34;UTF-8&#34;?&gt;&#xA;&lt;项目 xmlns=&#34;http://maven.apache.org/POM/4.0.0&#34;&#xA;xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;&#xA;xsi:schemaLocation=&#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&#34;&gt;&#xA;&lt;模型版本&gt;4.0.0&lt;/模型版本&gt;&#xA;&lt;groupId&gt;示例&lt;/groupId&gt;&#xA;&lt;artifactId&gt;java&lt;/artifactId&gt;&#xA;&lt;版本&gt;1.0-SNAPSHOT&lt;/版本&gt;&#xA;&lt;属性&gt;&#xA;&lt;maven.compiler.source&gt;17&lt;/maven.编译器.源码&gt;&#xA;&lt;maven.compiler.target&gt;17&lt;/maven.compiler.target&gt;&#xA;&lt;/属性&gt;&#xA;&lt;依赖关系&gt;&#xA;&lt;依赖关系&gt;&#xA;&lt;groupId&gt;com.grafana&lt;/groupId&gt;&#xA;&lt;artifactId&gt;grafana-foundation-sdk&lt;/artifactId&gt;&#xA;&lt;版本&gt;11.2.0-1728036865&lt;/版本&gt;&#xA;&lt;/依赖&gt;&#xA;&lt;/依赖项&gt;&#xA;&lt;/项目&gt;&lt;/代码&gt;&lt;/预&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;然后，我们可以安装Grafana Foundation SDK：&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;按钮 x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;将代码复制到剪贴板&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;复制&lt;/span&gt;&#xA;&lt;/按钮&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt; mvn install&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;下载依赖项后，我们可以创建 Java 仪表板代码，如 src/main/java/example/App.java&lt;/code&gt;：&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet&#34;&gt;&lt;div class=&#34;lang-toolbar&#34;&gt;&#xA;&lt;span class=&#34;lang-toolbar__item&#34;&gt;java&lt;/span&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;按钮 x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;将代码复制到剪贴板&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;复制&lt;/span&gt;&#xA;&lt;/按钮&gt;&#xA;&lt;/span&gt;&#xA;&lt;div class=&#34;lang-toolbar__border&#34;&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;包示例；&#xA;导入 com.fasterxml.jackson.core.JsonProcessingException；&#xA;导入 com.grafana.foundation.dashboard.Dashboard；&#xA;导入 com.grafana.foundation.dashboard.DashboardCursorSync；&#xA;导入 com.grafana.foundation.dashboard.DataSourceRef;&#xA;导入 com.grafana.foundation.testdata.Dataquery;&#xA;导入 com.grafana.foundation.timeseries.PanelBuilder;&#xA;公开课应用程序{&#xA;公共静态无效主（字符串[] args）{&#xA;DataSourceRef ref = new DataSourceRef();&#xA;ref.type =“grafana”；&#xA;ref.uid =“grafana”；&#xA;仪表板仪表板 = new Dashboard.Builder(&#34;仪表板示例&#34;).&#xA;uid(“示例仪表板”)。&#xA;描述（“Grizzly 仪表板示例”）。&#xA;工具提示（DashboardCursorSync.CROSSHAIR）。&#xA;与面板（&#xA;新的PanelBuilder()。&#xA;title(&#34;请求数/秒&#34;).&#xA;单位（“要求”）。&#xA;跨度（24）。&#xA;高度（8）。&#xA;与目标（&#xA;新的 Dataquery.Builder()。&#xA;数据源（参考）。&#xA;查询类型（“随机行走”）&#xA;）&#xA;）。建造（）;&#xA;尝试 {&#xA;System.out.println(dashboard.toJSON());&#xA;} catch (JsonProcessingException e) {&#xA;e.printStackTrace();&#xA;}&#xA;}&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;现在我们可以告诉 Grizzly 监视 &lt;code&gt;src&lt;/code&gt; 目录中的更改，然后执行我们的代码来重新生成仪表板：&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;按钮 x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;将代码复制到剪贴板&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;复制&lt;/span&gt;&#xA;&lt;/按钮&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;grrserve -w -S &#39;mvn exec:java -q -Dexec.mainClass=&#34;example.App&#34;&#39; src&lt;/code&gt;&lt; /上一页&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;然后我们可以访问 Grizzly 服务器 &lt;a href=&#34;http://localhost:8080&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;http://localhost:8080&lt;/a &gt;，然后选择我们的仪表板。现在，当我们更改 App.java（例如，更改仪表板标题）并保存它时，我们可以重新加载仪表板并查看 Grafana 实例中的更改。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div&#xA;类=“docs_tabs--内容py-1 px-2”&#xA;:class=&#34;active === &#39;PHP&#39; ? &#39;d-block&#39; : &#39;d-none&#39;&#34;&#xA;id=&#34;&#34;&#xA;角色=“选项卡面板”&#xA;咏叹调-labelledby=&#34;&#34;&#xA;&gt;&#xA;&lt;p&gt;&lt;strong&gt;要求：&lt;/strong&gt; PHP CLI、Composer&lt;/p&gt;&#xA;&lt;p&gt;首先，我们必须安装 Grafana Foundation SDK：&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;按钮 x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;将代码复制到剪贴板&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;复制&lt;/span&gt;&#xA;&lt;/按钮&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;作曲家需要grafana/foundation-sdk:dev-v11.2.x+cog-v0.0.x&lt;/code&gt;&lt;/pre &gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;接下来，我们创建 PHP 仪表板代码，如 &lt;code&gt;main.php&lt;/code&gt;：&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet&#34;&gt;&lt;div class=&#34;lang-toolbar&#34;&gt;&#xA;&lt;span class=&#34;lang-toolbar__item&#34;&gt;php&lt;/span&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;按钮 x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;将代码复制到剪贴板&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;复制&lt;/span&gt;&#xA;&lt;/按钮&gt;&#xA;&lt;/span&gt;&#xA;&lt;div class=&#34;lang-toolbar__border&#34;&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-php&#34;&gt;&lt;?php&#xA;require_once(__DIR__ . &#34;/vendor/autoload.php&#34;);&#xA;使用 Grafana\Foundation\Dashboard\DataSourceRef；&#xA;使用 Grafana\Foundation\Dashboard\DashboardBuilder；&#xA;使用 Grafana\Foundation\Dashboard\DashboardCursorSync；&#xA;使用 Grafana\Foundation\Testdata；&#xA;使用 Grafana\Foundation\Timeseries；&#xA;函数 makeDashboard(): 字符串 {&#xA;$builder = (new DashboardBuilder(标题: &#39;示例仪表板&#39;))&#xA;-&gt;uid(&#39;示例仪表板&#39;)&#xA;-&gt;description(&#39;Grizzly 仪表板示例&#39;)&#xA;-&gt;工具提示(DashboardCursorSync::crosshair())&#xA;-&gt;withPanel(&#xA;(新的时间序列\PanelBuilder())&#xA;-&gt;title(&#39;请求数/秒&#39;)&#xA;-&gt;单位(&#39;reqps&#39;)&#xA;-&gt;withTarget(&#xA;(新的测试数据\DataqueryBuilder())&#xA;-&gt;queryType(&#39;randomWalk&#39;)&#xA;-&gt;数据源((new DataSourceRef(&#39;grafana&#39;, &#39;grafana&#39;)))&#xA;）&#xA;-&gt;跨度(24)&#xA;-&gt;高度(8)&#xA;）；&#xA;$json = $builder-&gt;build();&#xA;返回 json_encode($json, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES).PHP_EOL;&#xA;}&#xA;回声makeDashboard();&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;现在我们可以告诉 Grizzly 监视 &lt;code&gt;main.php&lt;/code&gt; 文件中的更改，然后执行我们的代码来重新生成仪表板：&lt;/p&gt;&#xA;&lt;div class=&#34;code-snippet code-snippet__mini&#34;&gt;&lt;div class=&#34;lang-toolbar__mini&#34;&gt;&#xA;&lt;span class=&#34;code-clipboard&#34;&gt;&#xA;&lt;按钮 x-data=&#34;app_code_snippet()&#34; x-init=&#34;init()&#34; @click=&#34;copy()&#34;&gt;&#xA;&lt;img class=&#34;code-clipboard__icon&#34; src=&#34;/media/images/icons/icon-copy-small-2.svg&#34; alt=&#34;将代码复制到剪贴板&#34; width=&#34;14&#34; height=&#34;13&#34;&gt;&#xA;&lt;span&gt;复制&lt;/span&gt;&#xA;&lt;/按钮&gt;&#xA;&lt;/span&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;code-snippet code-snippet__border&#34;&gt;&#xA;&lt;pre data-expanded=&#34;false&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;grrserve -w -S &#39;php main.php&#39; main.php&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;然后我们可以访问 Grizzly 服务器 &lt;a href=&#34;http://localhost:8080&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;http://localhost:8080&lt;/a &gt;，然后选择我们的仪表板。现在，当我们更改 &lt;code&gt;main.php&lt;/code&gt; （例如，更改仪表板标题）并保存它时，我们可以重新加载仪表板并查看 Grafana 实例中的更改。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;h2 id=&#34;see-grizzly-serve-in-action&#34;&gt;观看 Grizzly 的发球实践&lt;/h2&gt;&#xA;&lt;p&gt;要仔细了解我上面概述的步骤，请观看下面的视频。在其中，我使用静态文件和 Grafonnet 演示了 Grizzly 服务功能，但相同的基本原则适用于我们上面讨论的任何语言。&lt;/p&gt;&#xA;&lt;div&#xA;类 =“youtube-lazyload 响应视频”&#xA;数据嵌入=“sPD5ZUeoPus”&#xA;data-url=&#34;https://www.youtube.com/embed/sPD5ZUeoPus?autoplay=1&amp;rel=0&#34;&#xA;数据标题=“YouTube 视频”&#xA;&gt;&#xA;&lt;div class=&#34;play-button&#34;&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;如果您有任何疑问或想进一步讨论，请联系 &lt;a href=&#34;https://slack.grafana.com/&#34; target=&#34;_blank&#34; rel 中的 #dashboards-as-code 频道=&#34;noopener noreferrer&#34;&gt;Grafana 社区 Slack&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;高级软件工程师 Selene Pinillos 对这篇博文做出了贡献。&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;/products/cloud/?pg=blog&amp;plcmt=body-txt&#34;&gt;Grafana Cloud&lt;/a&gt; 是开始使用指标、日志、跟踪、仪表板等的最简单方法，并且与 Grizzly 的发球功能配合良好。我们为每个用例提供慷慨的永久免费套餐和计划。 &lt;a href=&#34;/auth/sign-up/create-user/?pg=blog&amp;plcmt=body-txt&#34;&gt;立即免费注册&lt;/a&gt;！&lt;/em&gt;&lt;/p&gt;</description>
      <pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>