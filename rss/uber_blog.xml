<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Uber Engineering Blog</title>
    <link>http://rsshub.rssforever.com/uber/blog</link>
    <description>The technology behind Uber Engineering - Powered by RSSHub</description>
    <managingEditor>contact@rsshub.app (RSSHub)</managingEditor>
    <item>
      <title>【Adopting Arm at Scale: Transitioning to a Multi-Architecture Environment】大规模采用ARM：过渡到多结构的环境</title>
      <link>https://www.uber.com/blog/adopting-arm-at-scale-transitioning-to-a-multi-architecture-environment/</link>
      <description>【&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7908407a-0b16-4ed2-861d-079d34884a2d&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-beyond-bootstrapping&#34;&gt;Beyond Bootstrapping&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2d0f6cf3-9e26-45fd-a434-8b624e70c4a0&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;This is the second blog in a two-part series that describes how Uber adopted Arm at scale. In the &lt;a href=&#34;https://www.uber.com/blog/adopting-arm-at-scale-bootstrapping-infrastructure/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;first part&lt;/a&gt;, we described the foundational work of introducing Arm-based hosts into an extensive x86 infrastructure. We covered how we untangled multiple layers of infrastructure tailored to a single architecture environment and reached the initial milestone of building and deploying a simple service to Arm-based hosts through our deployment platform.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9114a972-96aa-4c9a-9e07-fcd99f82f145&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In this blog, we describe the journey from a single service running on Arm-based hosts to scaling the adoption of thousands of services. Each service brought its own dependencies, build nuances, and performance considerations. We had to address hidden issues that hadn’t surfaced in years and refine our operational strategies to ensure that we could run both x86 and Arm with confidence.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e685934c-b02e-448e-b5e9-1fa7d2665a6c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;A new mindset emerged that viewed multi-architecture as an integral aspect of our production environment. As we dig deeper, you’ll see how we prepared our codebases, revised our container images, and gradually introduced more services into this multi-architecture environment.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f5423e00-34bd-4773-9e97-2ed1df35937f&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;80fd3b52-af8a-4455-a943-d0ad7d07dded&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-addressing-technical-debt&#34;&gt;Addressing Technical Debt&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6e63d776-f8f9-4b10-8811-6c28b02244e1&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;After proving a handful of services could run successfully on Arm-based hosts, we faced a new challenge of extending the adoption of our entire platform, which includes more than 5,000 services. Achieving this would mean revisiting and refining multiple code repositories, untangling years of legacy dependencies, and ensuring nothing would break when we switched architectures at scale.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ced56143-33f5-4dcb-ae2b-d41317b5e52e&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Uber’s services are mostly built from three language-specific monorepos with the following CPU allocation distribution: 60% Go, 20% Java, and 10% Web. The rest are scattered across numerous micro-repositories. This distribution mattered as our monorepos, built with Google&lt;sup&gt;®&lt;/sup&gt; Bazel&lt;sup&gt;™&lt;/sup&gt;, are relatively uniform and more straightforward to transition to Arm. In contrast, the micro-repositories have custom toolchains, making it more time-consuming to make them compatible with Arm. We focused first on monorepos to avoid getting stuck, making rare exceptions only for critical micro-repository services.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;825cbca3-9505-4101-afbc-e4ba9d80a4c7&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-preparing-the-source-code&#34;&gt;&lt;br&gt;Preparing the Source Code&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;80f69067-cdf6-422b-a912-1529f765d160&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The goal was to ensure all services could be built in a multi-architecture variant, which meant that all dependencies in the language monorepos had to be available in a Linux&lt;sup&gt;®&lt;/sup&gt; Arm-compatible variant. Bazel’s repository dependencies, retrieved from our internal instance of JFrog&lt;sup&gt;®&lt;/sup&gt; Artifactory&lt;sup&gt;®&lt;/sup&gt;, had to be prepared.&amp;nbsp; In addition, our monorepos included C++ dependencies, for which we use the &lt;a href=&#34;https://www.uber.com/en-DK/blog/bootstrapping-ubers-infrastructure-on-arm64-with-zig/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Zig CC compiler&lt;/a&gt;, as it excels at cross-compiling. As part of this work, we developed a &lt;a href=&#34;https://github.com/uber/hermetic_cc_toolchain&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Bazel wrapper&lt;/a&gt;, so the compiler could be integrated into our build toolchain. With this in place, building for Arm was no longer a special case—it became another supported target in our build ecosystem.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;2e07a597-f42f-4d7d-93c8-22ea1ed79410&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-fixing-container-images&#34;&gt;&lt;br&gt;Fixing Container Images&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;247930ee-1664-450e-bae9-282260d62d5a&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;With the source code prepared, we turned our attention to container images. Our new multi-architecture build pipeline, introduced in the first &lt;a href=&#34;https://www.uber.com/blog/adopting-arm-at-scale-bootstrapping-infrastructure/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Bootstrapping Infrastructure blog&lt;/a&gt;, allowed us to produce images compatible with x86 and Arm. However, as soon as we started mass-building services, we encountered old container image dependencies and other incompatibilities that needed to be fixed on Arm.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a6747425-a1ed-4431-b74b-5cefea93f770&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Some of the more common issues included legacy base images and outdated Debian&lt;sup&gt;®&lt;/sup&gt; packages. Some services depended on outdated, single-architecture base images. We replaced these with updated, multi-architecture versions. Others relied on Debian packages that had never been built for Arm. We tackled these one by one, rebuilding or replacing them wherever possible, which was quite time-consuming.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;8a5506c9-9c35-40c1-b198-49e6efdafe4b&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;This cleanup wasn’t glamorous work, but it was undeniably essential.&amp;nbsp; Each replaced base image, each rebuilt package, and each dependency sorted out brought us closer to a world where multi-architecture builds were the default and not the exception.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9e2b3875-a7e4-4ad2-b36a-a9a4d47b88f7&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2b8d9813-d96d-41ee-8e7e-36a7941099c9&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-ensuring-a-reliable-transition&#34;&gt;Ensuring a Reliable Transition&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9c1b3380-960e-4a39-871a-2b7724af9d92&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;With most services enabled in a multi-architecture version, the next goal was establishing a reliable adoption process for the new Arm-based hosts. Adopting thousands of services onto Arm-based hosts involved more than updating code and container images. It also required ensuring that every service functions correctly in terms of correctness and performance. To achieve this, we’ve introduced several initiatives, described below.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;ec328587-db4d-4f44-b22f-c8919ea36142&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-unit-test-compatibility&#34;&gt;&lt;br&gt;Unit Test Compatibility&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a70c23fd-eb2d-4ede-868e-7f0ab5a06c91&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We updated our CI setup to trigger tests on both architectures to ensure our services would function correctly on both x86 and Arm. This approach helped us spot subtle, architecture-specific issues such as floating-point behavioral discrepancies before they could affect production. Interestingly, &lt;a href=&#34;https://go.dev/ref/spec#Arithmetic_operators&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Go allows implementors&lt;/a&gt; to use fused floating-point operations despite rounding differences. We maintained consistent business logic across both architectures by catching these differences early.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;b184a63d-7b08-431d-98df-2c3dad2785e1&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-extensive-monitoring&#34;&gt;&lt;br&gt;Extensive Monitoring&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;05f3a429-e3af-4a8d-8a55-377446709b3c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;After services had been adopted to Arm, we needed a reliable way to spot problems if the adoption introduced regressions. To capture that, we built an extensive monitoring tool that tracked latency, error rates, CPU utilization, and resource throttling and conducted A/B testing across both architectures and the different failure domains to better identify issues. By closely watching these metrics, we could detect if a service behaved unexpectedly on Arm before minor discrepancies turned into major incidents.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;b1fb086a-c8b2-414f-95d4-10bef6e2a611&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-dev-pod-compatibility&#34;&gt;&lt;br&gt;Dev Pod Compatibility&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;1cea174c-9899-4500-9198-7bccf95a1f8d&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Our developers rely heavily on Dev Pods, remote development environments tailored with Uber’s internal tools. Previously, these environments were limited to x86, making it hard to anticipate architecture-specific issues. Extending Dev Pods to support Arm gave engineers the power to run, build, and debug services on either x86 or Arm. This early exposure to multi-architecture conditions gave our teams the context they needed to write architecture-agnostic code.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;b8a08ee4-07b2-48bf-b3ff-d1ce52345673&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-sku-qualification-and-benchmarking&#34;&gt;&lt;br&gt;SKU Qualification and Benchmarking&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;887de6b3-fc01-48c0-a9bf-2106edd46983&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;To validate the suitability of the Ampere&lt;sup&gt;®&lt;/sup&gt; Computing A1 and A2 instances, we conducted comprehensive benchmarking and compared their performance against our existing x86 fleet. Automated performance tests, designed to simulate production conditions, provided valuable insights.&amp;nbsp; Furthermore, we partnered with product teams to run synthetic load tests on Arm. These tests exposed nuances that didn’t appear in controlled benchmarks. For instance, the Ampere A1 instances we use offered predictable, steady performance rather than opportunistic bursts typical of some x86 hosts. While initially surprising, these insights underscored that different architectures follow different design philosophies. Understanding these philosophies helped us plan more effectively. Furthermore, these benchmarking results helped us understand where Arm fits into our overall performance spectrum and guided how networking traffic should be balanced between x86 and Arm hosts.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;94ef265c-90e4-4ba2-8c6e-2d197e61b928&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;These initiatives formed the groundwork for our multi-architecture adoption strategy. By combining rigorous testing, benchmarking, monitoring, and hands-on developer experience, we ensured that moving thousands of services onto Arm wouldn’t require a leap of faith.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6f716887-468c-4c40-9ae0-b3e89df0077e&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;bc8d7439-fa36-4ab4-b512-cfc2da3c371e&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-adoption-strategy&#34;&gt;Adoption Strategy&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0df4090a-57fd-4c60-83dd-045d70fe93b0&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We implemented a gradual adoption strategy for migrating services to Arm-based infrastructure to minimize impact and ensure a smooth transition. Our adoption and qualification of services was done across the following dimensions.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;3cf0991c-0ccc-4f93-b39f-b8569a3cfd04&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Tier-by-tier:&lt;/strong&gt; Each service at Uber is assigned a tier that represents how critical the service is to the core business flows. We used a tiered adoption strategy to ensure a reliable adoption, allowing us to prioritize services based on criticality and impact. After each large cohort of a tier was adopted, a production readiness review gate was conducted to assess stability and performance, determining whether the tier was ready to be fully adopted and whether the next tier could proceed. This structured approach allowed us to identify and address potential issues in lower-criticality services before advancing to more critical tiers.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Non-production&lt;/strong&gt; &lt;strong&gt;before&lt;/strong&gt; &lt;strong&gt;production:&lt;/strong&gt; We first migrated the services’ non-production environments, which serve as testing grounds. If everything looked good, we proceeded to the production environments.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Zone-by-zone:&lt;/strong&gt; To further mitigate risk, we adopted a zone-by-zone migration approach. This strategy allowed us to initiate failovers in the event of a major incident or drain network traffic from an availability zone.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;b86fe249-bc1b-43fd-951f-08342acd0d08&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Throughout the migration process, testing was automatically triggered whenever a service was deployed. Additionally, continuous monitoring ensured that adopted services performed as expected. The process was automatically reverted if any alerts were triggered or SLA degradation occurred so that it could be hands-free.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;46435294-6ba3-4755-bd3d-c4e9ba3f04ce&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2dd59743-a3fe-485f-bc99-41b625bdd24b&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-automating-the-adoption&#34;&gt;Automating the Adoption&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;db79e28d-1370-47be-a2e8-19f41c5fa82b&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Manual adoption quickly becomes time-consuming and error-prone when faced with thousands of services. To streamline this process, we built a goal-state-driven system that automates and manages the entire process. It starts by reading a high-level plan, defining which services should be adopted and in which zones. Then, it relies on a reconciliation loop, implemented as a &lt;a href=&#34;https://cadenceworkflow.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Cadence&lt;/a&gt; workflow, to determine the right services to move at each step.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;007c2f89-7b37-40e9-a103-cf0c3505a7ef&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;It handles these migrations in small, controlled batches rather than attempting one massive “big bang” to minimize risk and keep any potential issues manageable. This automated approach ensures every transition adheres to the original plan and that services are migrated predictably, resulting in a more reliable adoption process.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1105400,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;96ce4f44-2b8d-44eb-b9ee-a3b524e519fd&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;589&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/02/adoptiondiagram-17406029623557-1024x589.png&#34; alt=&#34;&#34; class=&#34;wp-image-1105400&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/02/adoptiondiagram-17406029623557.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/02/adoptiondiagram-17406029623557.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/02/adoptiondiagram-17406029623557.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1040,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/02/adoptiondiagram-17406029623557.png 1040w&#34; sizes=&#34;auto, (max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 1: Goal state driven system for automating the adoption process.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7122f30b-7bbd-4eb2-888a-86668d6179a3&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;a href=&#34;https://lucid.app/lucidchart/3a9d610e-b3fc-458e-a8cf-d944cce14b67/edit?beaconFlowId=78C90806E4C4E174&amp;amp;invitationId=inv_f64b9674-5c82-4b4e-9fad-0fcff8405a6f&amp;amp;page=0_0#&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;72aa175e-6c33-49c9-b631-51cfb3b885a7&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7cc34bfe-00d5-410e-b06d-51c96ce8d9e6&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-results&#34;&gt;Results&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;aedcdc9f-8ccc-4336-beae-8879af0cdcbe&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We have successfully adopted over 2,800 stateless Go-based services to Arm-based hosts and transformed nearly 20% of our Oracle&lt;sup&gt;®&lt;/sup&gt; Cloud Infrastructure capacity from x86 to Ampere A1 and A2 CPUs without a serious incident. We’ve reevaluated old assumptions, upgraded legacy dependencies, and learned how to run an efficient and reliable multi-architecture environment.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;3394f329-f127-46e7-b6d9-407110680316&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;This transformation demonstrated the benefits of better price-performance, a more flexible platform, and a meaningful step toward reducing our carbon footprint. We proved that Arm could coexist with x86 at Uber’s scale and enhance our overall platform.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;cb26c890-4a48-488e-b1d1-f1568474636c&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:1,&amp;quot;hash&amp;quot;:&amp;quot;d036a477-fd43-4afd-82cb-7fcb9d5348dd&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-conclusion&#34;&gt;Conclusion&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c7c8fa92-7820-4f08-bba7-4af4a6c8b877&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Looking ahead, our multi-architecture environment is poised for even more diversity. While we’ve already seen success with stateless, Go-based services, Java services will join the fold in the coming year. We’re also preparing to tackle more complex territory: stateful workloads like Redis&lt;sup&gt;®&lt;/sup&gt;, etcd&lt;sup&gt;®&lt;/sup&gt;, Apache Cassandra&lt;em&gt;&lt;sup&gt;®&lt;/sup&gt;&lt;/em&gt;, and MySQL&lt;em&gt;&lt;sup&gt;®&lt;/sup&gt;&lt;/em&gt;, and M3, batch processing, and machine learning jobs.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d7e15ed9-f3ef-4ab9-b2e6-5c220a0dd6c0&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;This isn’t the end of our story. As we continue exploring this evolving landscape, we’ll keep pushing the limits of what’s possible in a heterogeneous world. Our goal remains the same: to build an environment where every architecture thrives, and every workload finds its best fit.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a8b622c1-be62-477d-a757-8944fabfd499&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;b9b84743-ed9b-454b-b2af-35149207618f&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-acknowledgments&#34;&gt;Acknowledgments&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0b8d8028-fda6-48c2-a76f-e907347b5774&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The successful adoption of Arm-based hosts at Uber was made possible through the collective efforts of numerous internal and external contributors, including our partners at Oracle Cloud Infrastructure and Ampere. The authors would like to thank all who worked on this initiative and helped make it a success.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;00b8ad49-5b92-4d26-8d8d-570552a7550b&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;Cover Photo Attribution: The cover photo was generated using OpenAI ChatGPT Enterprise&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;ce73edfe-aa76-4033-8dff-edc9462282ad&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Ampere&lt;sup&gt;®&lt;/sup&gt;, Altra, and the A and Ampere logos are registered trademarks or trademarks of Ampere Computing.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;c8eca7e5-ef30-4ae0-a1b5-bc306f1bdb4c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Apache&lt;/em&gt;&lt;em&gt;&lt;sup&gt;®&lt;/sup&gt;&lt;/em&gt;&lt;em&gt;, Apache Cassandra&lt;/em&gt;&lt;em&gt;&lt;sup&gt;®&lt;/sup&gt;&lt;/em&gt;&lt;em&gt;, and Cassandra&lt;/em&gt;&lt;em&gt;&lt;sup&gt;®&lt;/sup&gt;&lt;/em&gt;&lt;em&gt;, are either registered trademarks or trademarks of the Apache Software Foundation in the United States and/or other countries. No endorsement by The Apache Software Foundation is implied by the use of these marks.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;b8718417-c813-4661-90d6-79d9b00d615c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;a href=&#34;https://github.com/ajbouh/bazel-zig-cc/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;em&gt;bazel-zig-cc&lt;/em&gt;&lt;/a&gt;&lt;em&gt;, which we cloned and was the foundation for the cross-compiler tooling, was originally created by Adam Bouhenguel.&amp;nbsp;&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;b92bdac8-9139-45ec-9040-2f52ca304544&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Debian&lt;sup&gt;®&lt;/sup&gt; is a registered trademark owned by Software in the Public Interest, Inc. This blog is not affiliated with Debian.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;94188885-771c-4c79-9e10-780554c9fdb8&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Google Cloud Platform&lt;sup&gt;™&lt;/sup&gt; and Bazel are trademarks of Google LLC and this blog post is not endorsed by or affiliated with Google in any way.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;00c89fee-19a2-4353-ba95-286b61d4c360&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;JFrog&lt;sup&gt;®&lt;/sup&gt;”, “Artifactory&lt;sup&gt;®&lt;/sup&gt;”, “Bintray&lt;sup&gt;®&lt;/sup&gt;”,. “JFrog Mission Control&lt;sup&gt;®&lt;/sup&gt;” and the logos of JFrog, and other marks are Marks of JFrog or its affiliates.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;e0b9a56f-7653-4829-b1d9-83d56402d88f&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Linux&lt;sup&gt;®&lt;/sup&gt; is the registered trademark of Linus Torvalds in the U.S. and other countries.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;af21f54e-428a-410f-9a8f-c8a87344e702&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Oracle&lt;sup&gt;®&lt;/sup&gt;, Java, and MySQL are registered trademarks of Oracle and/or its affiliates. No endorsement by Oracle is implied by the use of these marks.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;9c5b2f14-dd51-4c25-96fd-2676231b6b96&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Redis is a registered trademark of Redis Ltd. Any rights therein are reserved to Redis Ltd. Any use by Uber is for referential purposes only and does not indicate any sponsorship, endorsement or affiliation between Redis and Uber.&lt;/em&gt;&lt;/p&gt;】&lt;H2 Data-wp-block-name =“ core/head”“ data-wp-block =” {“ hash”：“ 7908407A-0B16-4ED2-861D-079D34884A2D”，“ calle&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 2D0F6CF3-9E26-9E26-45FD-A434-8B624E70C4A0”，“ dropcap”：false}“&gt;这是两部分系列中的第二个博客，描述了uber的第二个博客。在&lt;a a href =“ https://www.uber.com/blog/adopting-arm-at-scale-bootstrapping-infrastructure/” target =“ _ black” rel =“ noreferrer noopener”&gt;第一部分&lt;/a&gt;我们对基于基于军械库的主机的基本工作进行了广泛的X86 Infrasturs &lt;/a&gt;我们介绍了如何无目的地为单个体系结构环境量身定制的多层基础架构，并通过我们的部署平台达到了构建和部署基于ARM的主机的简单服务的最初里程碑。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;9114a972-96aa-4c9a-9e07-fcd99f82f145&#34;,&#34;dropCap&#34;:false}&#34;&gt;In this blog, we describe the journey from a single service running on Arm-based hosts to scaling the adoption of thousands of services.每项服务都带来了自己的依赖性，建立细微差别和绩效注意事项。我们必须解决多年未浮出水面的隐藏问题，并完善我们的操作策略，以确保我们可以充满信心地运行X86和ARM。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ E685934C-B02E-448E-B5E-B5E9-1FA7D2665A6C”，“ dropcap”：dropcap“：dropcap”：false}“&gt;新的思维方式均出现了一个新的心态，这些新的心态呈现为整合的整体环境，我们的整合环境是我们的整合环境。当我们更深入地研究时，您将看到我们如何准备代码库，修改了我们的容器图像，并逐渐将更多的服务引入了这个多架构环境中。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data data-wp-block-name =“ core/saparator” data-wp-block =“ {” hash&#39;：“ F5423E00-34BD-4773-9E977-2ED1DF35937F”，“ opcity”，“ opcity”，“ opcity”：“ alpha-channel” class =“ class =” wp-block-separator-separator-ablphaant-alpha and-alphaant-alphaant-alpha n&gt;&#xA;&#xA;&#xA;&#xA;&lt;H2 Data-wp-block-name =“ core/tearing“ data-wp-block =” {“ hash”：“ 80fdd3b52-af8a-4455-A943-A943-D0AD7D07DDDDDDED”，“ LEVEL”：2} class class class =“ Wp-block-Heading” wp-block-Heading =“ ID =” H-Addechnical-Technical-technical-technical-technical-decrive techtict&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;6e63d776-f8f9-4b10-8811-6c28b02244e1&#34;,&#34;dropCap&#34;:false}&#34;&gt;After proving a handful of services could run successfully on Arm-based hosts, we faced a new challenge of extending the adoption of our entire platform, which includes more than 5,000服务。实现这一目标将意味着重新访问和完善多个代码存储库，毫无疑问的遗产依赖性，并确保在我们大规模切换体系结构时不会破裂。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ CED56143-33F5-4DCB-ae2B-ae2b-ae2b-d41317b5e52e“，“ dropcap”：false}“：false}”&gt; Uber的服务主要是由三种语言特定的MonorePos构建的，其三种特定于CPU的分配分配：60％go，20％java，和20％java，10％java。其余的散布在众多微型重复库中。该分布与我们的monorepos有关，它是由Google &lt;sup&gt;®&lt;/sup&gt; bazel &lt;sup&gt;™&lt;/sup&gt;构建的，是相对均匀的，更直接过渡到手臂。相比之下，微型重新构件具有自定义的工具链，使其与手臂兼容更加耗时。我们首先专注于monorepos，以避免被卡住，仅对关键的微叛逆服务造成极少数例外。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;H3 Data Data-Wp-block-name =“ core/thead” data-wp-block =“ {”级别“：3，“哈希”：“ 825CBCA3-9505-4101-4101-AFBC-E4BA9D80A4C7}&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 80f69067-cdf6-422b-a912b-a912-1529f765d160”，“ dropcap”，“ dropcap”：dropcap“：false}”的目标是确保所有服务都可以在多个依赖的语言中构建。 Linux &lt;sup&gt;®&lt;/sup&gt;臂兼容的变体。 Bazel的存储库依赖性从我们的内部实例&lt;Sup&gt;®&lt;/sup&gt;文物&lt;sup&gt;®&lt;/sup&gt;中获取。  此外，我们的monorepos还包括C ++依赖性，我们为此我们使用&lt;a href =“ https://www.uber.com/en-dk/bootstrapping-ubers-ubers-infrasture-in-arm64-with-marm64-with-zig/”作为这项工作的一部分，我们开发了a &lt;a href =“ https://github.com/uber/hermetic_cc_toolchain” target =“ _ blank” rel =“ noreferrer noopener”&gt; bazel包装器&lt;/a&gt;，可以将编译器集成到我们的构建工具中。有了这一点，为ARM构建不再是特殊情况，它成为我们构建生态系统中的另一个支持目标。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;H3 Data Data-Wp-block-name =“ core/tearing” data-wp-block =“ {”级别“：3，“哈希”：“ 2E07A597-F42F-4D7D-93C8-93C8-22AC8-22EA1ED79410”} class =“ class =” wp-block-heading =“ wp-block-heading”&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 247930EE-1664-450E-BAE9-282260D62D5A”，“ dropcap”：false}“：false}”&gt;用源代码准备了源代码，我们将注意力转向集装箱图像。我们在第一个&lt;a href =“ https://www.uber.com/blog/adopting-arm-at-scale-bootstrapping-infrastructure/“ target =” target =“ _ black” rel =“ noreferrer noopener”&gt;“ nooreferrer noopener”&gt; Bootstrapplapplapplatiblibliblibliblibliblibliblible &lt;/aighbobl Blogn中，我们允许US x8 &lt;/aighablobs，我们的新的多架结构构建管道。但是，一旦我们开始大规模建设服务，我们就会遇到旧的容器图像依赖性和其他需要的不兼容性ed要固定在手臂上。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/conagraph“ data-wp-block =” {“ hash”：“ A6747425-A1ED-4431-B74B-5CEFEA93F770”，“ dropcap”，“ dropcap”：false}“：false}”&gt;更常见的问题包括遗产基础图像和遗产的debian &lt;sup &lt;sup&gt; sup）一些服务取决于过时的单架结构基础图像。我们用更新的多构造版本代替了这些版本。其他人则依靠从未为ARM建造的Debian包裹。我们一一解决这些问题，在可能的情况下重建或更换它们，这很耗时。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph“ data-wp-block =” {“ hash”：“ 8a5506c9-9c35-40c1-b198-498-49e6e6efdafe4b”，“ dropcap”，“ dropcap”：false}“：false}”&gt;这种清理不是魅力的工作，但它是无关紧要的。  每个都替换了基本图像，每个重建软件包以及每个依赖的依赖性，使我们更加接近一个默认的多建筑结构，而不是例外。&lt;/p&gt;。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data data-wp-block-name =“ core/saparator” data-wp-block =“ {” hash“：” 9E2B3875-A7E4-4AD2-B36A-A9A4D47B88F7，“ opitical&#xA;&#xA;&#xA;&#xA;&lt;H2 Data-wp-block-name =“ core/head”“ data-wp-block =” {“ hash”：“ 2B8D9813-D96D-41EE-8E7E-8E7E-36A7941099C9 C9”，“ LEVEL”：2} class =“ class =” wp-block-head =“ wp-block-heading”&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coraph”“ data-wp-block =” {“ hash”：“ 9C1B3380-960E-4A39-4A39-871A-2B7724AF9D92”，“ dropcap”：dropcap“：false}”&gt;在多大程度上启用了一个不可用力的过程中，大多数服务启用了一个不可行的过程。在基于ARM的主机上采用数千份服务涉及的涉及更新代码和容器图像。它还需要确保每个服务在正确性和性能方面都能正确运行。为了实现这一目标，我们介绍了下面描述的几项计划。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;H3 Data Data-Wp-block-name =“ core/tearing” data-wp-block =“ {”级别“：3，” hash&#39;：“ EC328587-DB4D-4F4F44F44B22F-C891919EA36142”}&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/conagraph” data-wp-block =“ {” hash&#39;：“ A70C23FD-EB2D-4EDE-868E-868E-7F0AB5A06C91”，“ dropcap”，“ dropcap”：false}“&gt;我们更新了CI设置，以确保两个架构触发架构和架构都可以触发ARM，并纠正了我们的架构。这种方法帮助我们发现了特定于建筑的问题，例如浮点行为差异可能会影响生产。有趣的是，&lt;a href =“ https://go.dev/ref/spec#arithmetic_operators” target =“ _ blank” rel =“ noreferrer noopener”&gt; go允许实现者&lt;/a&gt;尽管有差异差异，但使用融合的浮动点操作。我们在机器人之间保持了一致的业务逻辑H架构通过尽早捕获这些差异。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;H3 Data Data-Wp-block-name =“ core/phecing” data-wp-block =“ {”级别“：3，“ hash”：“ B184A63D-7B08-431D-98DF-2C3DAD2785E1”}&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 05F3A429-E3AF-4A8D-8A55-8A55-3774446709B3C”，“ dropcap”&gt;在使用服务后，我们需要采用一个可靠的问题，如果采用了一个问题，如果采用了一个问题，如果采用了一个问题，如果介绍了一个问题，如果介绍了一个问题。为了捕捉到这一点，我们构建了一个广泛的监视工具，该工具跟踪延迟，错误率，CPU利用率以及资源节流，并在架构和不同的失败域进行了A/B测试，以更好地识别问题。通过密切观看这些指标，我们可以检测到服务是否在小小的差异变成重大事件之前在手臂上表现出意外行事。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;H3 Data Data-Wp-block-name =“ core/tearing” data-wp-block =“ {”级别“：3，“ hash”：“ B1FB086A-C8B2-414F-95D4-10BEF6E2A611“}”&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 1CEA174C-9899-4500-9198-9198-7BCCF95A1F8D”，“ dropcap”，“ dropcap”：false}“：false}”&gt;我们的开发人员很大程度上依赖开发环境，远程开发环境，偏远地使用偏远的内部工具。以前，这些环境仅限于X86，因此很难预见特定于建筑的问题。扩展Dev Pods支持ARM，使工程师有能力在X86或ARM上运行，建立和调试服务。这种早期接触多结构的条件为我们的团队提供了编写体系结构不可或缺代码所需的上下文。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data data-wp-block-name =“ core/heading” data-wp-block =“ {”级别“：3，”哈希：“ b8a08ee4-07b2-48bf-b3ff-d1ce52345673”}基准测试&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {” hash&#39;：“ 887DE6B3-FC01-48C0-48C0-A9BF-2106EDD46983”，“ dropcap”：dropcap“：false}”&gt;验证临时&lt;/sup&gt;®&lt;/sup&gt; bents的适用性，并将其性能与我们现有的X86机队进行了比较。旨在模拟生产条件的自动绩效测试提供了宝贵的见解。  此外，我们与产品团队合作，在ARM上进行合成负载测试。这些测试暴露了没有在受控基准测试中出现的细微差别。例如，我们使用的Ampere A1实例提供了可预测的，稳定的性能，而不是某些X86主机的典型机会爆发。尽管最初令人惊讶，但这些见解强调了不同的架构遵循不同的设计理念。了解这些哲学有助于我们更有效地计划。此外，这些基准测试结果有助于我们了解ARM适合我们的整体性能范围的位置，并指导了如何在X86和ARM主机之间平衡网络流量。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph“ data-wp-block =” {“ hash”：“ 94EF265C-90E4-4BA2-8C6E-8C6E-2D197E61B928”，“ DROPCAP”，“ dropcap”：false}&gt;这些倡议构成了我们的多项构成我们的多型结构策略。通过结合严格的测试，基准测试，监视和动手开发人员的经验，我们确保将数千个服务转移到ARM上不需要信仰的飞跃。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name =“ core/saparator” data-wp-block =“ {” hash&#39;：“ 6f716887-468c-4C4C-4C4C-4C40-9AE0-B3E89DF0077E“&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name =“ core/head”“ data-wp-block =” {“ hash”：“ BC8D7439-FA36-4AB4-B512-CFC2DA3C371E”，“ LEALC&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {” hash&#39;：“ 0DF4090A-57FD-4C60-4C60-83DD-045D70FE93B0”，“ dropcap”：dropcap“：false}”&gt;我们实现了基于迁移的迁移式运输的迁移式运输策略，以确保迁移的迁移式迁移。我们的采用和服务资格是在以下维度上完成的。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;3cf0991c-0ccc-4f93-b39f-b8569a3cfd04&#34;,&#34;ordered&#34;:false,&#34;values&#34;:&#34;&#34;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []“&gt; &lt;strong&gt; by-tier-tier：&lt;/strong&gt; &lt;/strong&gt; Uber的每个服务都分配了一个层，该级别表示服务对核心业务流量的关键程度。我们使用了分层的采用策略来确保可靠的采用率，从而使我们能够根据批判性和影响力确定服务的优先级。在采用了每个大型级别队列后，进行了生产准备审查门以评估稳定性和性能，确定该层是否准备好被完全采用，以及下一个层是否可以进行。这种结构化的方法使我们能够识别和解决低批判性服务中的潜在问题，然后才能晋升为更批判性的层次。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt; &lt;strong&gt;非生产&lt;/strong&gt; &lt;strong&gt; &lt;/strong&gt; &lt;strong&gt; &lt;/strong&gt; &lt;strong&gt;生产：&lt;/strong&gt;我们首先迁移了服务的非生产环境，该环境是测试场的。如果一切看起来都不错，我们将进入生产环境。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt; by by Zone：&lt;/strong&gt;为了进一步减轻风险，我们采用了区域迁移方法。这种策略使我们能够在发生可用性区域发生重大事件或排出网络流量的情况下启动故障转移。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/paragraph” data-wp-block =“ {” hash&#39;：“ b86fe249-bc1b-43fd-951f-08342acd08”，“ dropcap”：dropcap“：false}”&gt;在整个迁移过程中，测试在整个迁移过程中被自动触发。此外，连续监控确保了采用的服务按预期执行。如果触发了任何警报或发生SLA降解，则该过程会自动恢复，因此可以免提。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;46435294-6ba3-4755-bd3d-c4e9ba3f04ce&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;H2 Data-Wp-block-name =“ core/thead” data-wp-block =“ {” hash&#39;：“ 2DDDDDD59743-A3FE-485F-BC99-41B625BDD24B”，“ calle&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ DB79E28D-1370-47BE-A2E8-19F41C5FA82B”，“ dropcap”：dropcap“：false}”&gt;在面对较时的服务时，可以迅速采用时效率。为了简化此过程，我们构建了一个以目标状态驱动的系统，该系统可以自动化并管理整个过程。它首先要阅读高级计划，以定义应采用哪些服务以及哪些区域。然后，它依赖于对帐循环，以a &lt;a href =“ https://cadenceworkflow.io/”实现。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;007c2f89-7b37-40e9-a103-cf0c3505a7ef&#34;,&#34;dropCap&#34;:false}&#34;&gt;It handles these migrations in small, controlled batches rather than attempting one massive “big bang” to minimize risk and keep any potential issues manageable.这种自动化方法可确保每个过渡都遵守原始计划，并可以预测地迁移服务，从而导致更可靠的采用过程。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ id”：1105400，“ sizeSlug”：“大”，“ linkdestination”：“ none”，“ aLign”：“ center”，“ hash”：“ 96CE4F4F4F4F4F4F4F4F4F4DD-44EB-44EB-B9EEB-B9EE” class =“ AlignCenter size-large”&gt; &lt;img loading =“ lazy” dododing =“ async” width =“ 1024” height =“ 589” src =“ https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80，quality = 80，onerror = redirct，format = auto/wp-content/uploads/2025/02/02/adoptiondiagram gramel class =“ wp-image-11105400” srcset =“ https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80，qualit = 80 ,， https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror = redirect，format = auto/wp-content/uploads/2025/02/distimiondiagram-1740602962357.png 300W， https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80，onerror = redirect，format，format = auto/wp-content/uploads/2025/2025/02/adoptiondiagram-174060606060296625555555768.png 768.png 768.png 768w，pmpn w， https://blog.uber-cdn.com/cdn-cgi/image/width=1040,quality=80，onerror = redirect，format = auto/wp-content/uploads/2025/02/2025/02/adoptiondiagram-174060606060602966255555555557.pny spect 1024px）100VW，1024px“ ReverrerPolicy =“ No-Referrer”&gt; &lt;figcaption class =“ WP-元素接合”&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {” hash&#39;：“ 7122F30B-7BBD-4EB2-888A-888A-86668D6179A3”，“ dropcap”，“ dropcap”&gt; &lt;a href =“ https://lucid.app/lucidchart/3a9d610e-b3fc-458e-a8cf-d944cce14b67/edit？beaconflowid= 78C90806E4C4E174＆邀请ID = INV_F64B9674-5C82-4B4E-9B4E-9FAD-0FCFF8405A6F＆page = 0_0＃&gt; &lt;/a&gt; &lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name =“ core/saparator” data-wp-block =“ {” hash&#39;：“ 72AA175E-6C33-49C9-B631-51CFB3B885A7”，“ opitical&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name =“ core/heading” data-wp-block =“ {” hash&#39;：“ 7cc34bfe-00d55-410e-b06d-51C96CE8D9E6“&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/encor” data-wp-block =“ {” hash&#39;：“ AEDCDC9F-8CCC-4336-BEAE-88799AF0CDCBE”，“ dropcap”，“ dropcap”：false}“&gt;我们已经成功地采用了2,800个基于Nequ go的服务，几乎是基于手臂的Nectect &lt;20％，几乎是20％或sucl &lt;20％&gt;从X86到Ampere A1和A2 CPU的基础设施容量而没有发生严重事件。我们已经重新评估了旧的假设，升级了遗产依赖性，并学会了如何运行高效且可靠的多架构环境。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/core”“ data-wp-block =” {“ hash”：“ 3394F329-F127-46E7-B6D9-407110680316”，“ Dropcap”：false}“&gt;此转换证明了更好的价格的平台，并有意义地介绍了一个有意义的平台，并有意义地介绍了一个有意义的平台。我们证明了ARM可以在Uber的规模上与X86共存并增强我们的整体平台。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;cb26c890-4a48-488e-b1d1-f1568474636c&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h1 data-data-wp-block-name =“ core/heading” data-wp-block =“ {”级别“：1，“哈希”：&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph” data-wp-block =“ {” hash&#39;：“ C7C8FA92-7820-4F08-BBA7-4AF4AF4A6C8B877”，“ dropcap”：dropcap“：false}”&gt;，您可以提前，我们的多架构环境可以使我们更加多样化。尽管我们已经看到了无国籍，基于GO的服务的成功，Java Services将在来年加入该折扣。我们还准备解决更复杂的领域：诸如REDIS &lt;sup&gt;®&lt;/sup&gt;，ETCD &lt;sup&gt;®&lt;/sup&gt;，Apache cassandra &lt;em&gt; &lt;em&gt; &lt;sup&gt; &lt;/sup&gt;®&lt;/sup&gt; &lt;/em&gt; &lt;/em&gt;和mysql &lt;em&gt; &lt;em&gt; &lt;em&gt; &lt;em&gt; &lt;em&gt; &lt;em&gt; &lt;em&gt; &lt;/sup&gt;®&lt;/ep &lt;/em&gt; &lt;/em&gt; &lt;/em&gt; &lt;/3，&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {” hash&#39;：“ d7e15ed9-f3ef-4ab9-b2e6-5c220a0dd6c0”，“ dropcap”，“ dropcap”：false}“&gt;这不是我们故事的结局。当我们继续探索这一不断发展的景观时，我们将继续推动异质世界中可能的限制。我们的目标保持不变：构建每个建筑蓬勃发展的环境，每个工作负载都可以找到最合适的环境。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data data-wp-block-name =“ core/saparator” data-wp-block =“ {” hash&#39;：“ A8B622C1-BE62-477D-A757-8944FABFD499”，“ obisitical&#xA;&#xA;&#xA;&#xA;&lt;H2 Data-wp-block-name =“ core/head”“ data-wp-block =” {“ hash”：“ B9B84743-ED9B-454B-B2AF-B2AF-35149207618F”，“ LEVEL”：2} class =“ class =” wp-block-block-heading =“ wp-block-heading” id =“ id =”&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coragraph” data-wp-block =“ {“ hash”：“ 0b8d8028-fda6-48c2-48c2-a76f-e907347b5774”，“ dropcap”：dropcap“：dropcap”：false}“：false}”&gt;通过UBER的众多努力使我们成为了多个贡献的众多和众多的综合综合综合综合的综合综合，并且综合了综合的综合综合，并综合了综合的综合，基础设施和安培。作者要感谢所有从事这项倡议的人，并使其成功。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coragraph” data-wp-block =“ {“ fontsize”：“ small”，“ hash”：“ 00b8ad49-5b92-4d26-4d26-8d8d-5705522a7550b” Chatgpt Enterprise &lt;em&gt;。&lt;/em&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coragraph” data-wp-block =“ {“ fontsize”：“ small”，“ hash”：“ CE73EDFE-AA76-AA76-4033-8DFF-EDC9462282AD”，“ Altra，A和Ampere徽标是Ampere Computing的注册商标或商标。&lt;/em&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ fontsize”：“ small”，“ hash”：“ c8eca7e5-ef30-4ae0-a1b5-a1b5-a1b5-a1b5-bc306f1bdb4c”， class =“ has small-font-size”&gt; &lt;em&gt; apache &lt;/em&gt; &lt;em&gt; &lt;sup&gt;®&lt;/sep&gt; &lt;/em&gt; &lt;/em&gt; &lt;em&gt;，apache cassandra &lt;/em&gt; &lt;em&gt; &lt;em&gt; &lt;em&gt; &lt;em&gt; &lt;sup&gt; &lt;/sup&gt;®&lt;/sup&gt; &lt;/em&gt; &lt;/em&gt; &lt;em&gt; &lt;em&gt;和cassandra美国和/或其他国家的Apache软件基金会的商标。使用这些标记，Apache软件基金会没有任何认可。&lt;/em&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/paraGraph“ data-wp-block =” {“ fontsize”：“ Small”，“ Hash”：“ B8718417-C813-4661-90D6-79D9B00D615C”，“ dropcap”，“ dropcap”：false} class =“ class =” class =“具有微妙的font-font-size size”&gt; &lt;a href =“ https://github.com/ajbouh/ajbouh/bazel-zig-cc/” target =“ _ black” rel =“ noreferrer noopener”&gt; &lt;em&gt; &lt;em&gt; &lt;em&gt; &lt;em&gt; &lt;em&gt; &lt;em&gt; &lt;em&gt; bazel-zig-cc &lt;/em&gt; &lt;/em&gt; &lt;/a&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/encor” data-wp-block =“ {” fontsize“：” small“”，“ hash”：“ B92BDAC8-9139-45EC-9040-9040-2F52CA304544”，“由软件在公共利益公司拥有的注册商标。此博客不隶属于Debian。&lt;/em&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ fontsize”：“ small”，“ hash”：“ 9418885-771C-4C-4C79-9E10-780554C9FDB8”，“ Platform &lt;Sup&gt;™&lt;/sup&gt;和Bazel是Google LLC的商标，此博客文章不受任何方式认可或与Google相关。&lt;/em&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ fontsize”：“ small”，“ hash”：“ 00c89fee-19a2-4353-ba95-ba95-286b61d4c360 class =“ hasmall-font-size”&gt; &lt;em&gt; jfrog &lt;sup&gt;®&lt;/sup&gt;”，“文物&lt;sup&gt;®&lt;/sup&gt;”，“ bintray &lt;sup&gt;®®&lt;/sup&gt;”，。 “ Jfrog Mission Control &lt;Sup&gt;®&lt;/sup&gt;”和Jfrog的徽标，其他标记是Jfrog或其分支机构的标记。&lt;/em&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ fontsize”：“ small”，“ hash”：“ E0B9A56F-7653-4829-B1D9-83D9-83D556402D88F”，“ class =“ hasmall-font-size”&gt; &lt;em&gt; linux &lt;sup&gt;®&lt;/sup&gt;是美国和其他国家/地区的Linus Torvalds的注册商标。&lt;/em&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {” fontsize“：” small“”，“ hash”：“ af21f54e-428a-4110f-9a8f-9a8f-c8a8773444e702 Java和MySQL是Oracle和/或其分支机构的注册商标。使用这些标记不暗示甲骨文的认可。&lt;/em&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/encor” data-wp-block =“ {“ fontsize”：“ small”，“ hash”：“ 9C5B2F14-DD51-4C25-4C25-96FD-2676231B6B96B96B96”，“ dropcap”，“ dropcap”，“ dropcap”：fals} class =“ ISMISE-size size” Ltd.其中任何权利都保留给Redis Ltd. Uber的任何用途仅用于参考目的，并且不表示Redis和Uber之间的任何赞助，认可或隶属关系。&lt;/em&gt; &lt;/p&gt;</description>
      <pubDate>Thu, 27 Feb 2025 06:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Unified Checkout: Streamlining Uber’s Payment Ecosystem】统一结帐：简​​化Uber的付款生态系统</title>
      <link>https://www.uber.com/blog/unified-checkout/</link>
      <description>【&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:1,&amp;quot;hash&amp;quot;:&amp;quot;7136f2d5-0242-41b5-9146-965a2657f0ac&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0a33db00-7c46-4bc3-9f03-1fd88a301f06&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Uber started as a ridesharing company with a simple yet ambitious mission: make transportation as reliable as running water, everywhere, for everyone.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;8339e8e9-b7ab-46eb-89e7-53ff0f8811ce&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;When the company focused on ridesharing, most back-end systems were built around a trip, a rider, and a driver. Since it was the only LOB (line of business) at the time, any payment-specific operations were implemented directly into the ridesharing system. For example, supporting Apple Pay&lt;sup&gt;®&lt;/sup&gt; was implemented on the Rides back end.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;766df407-ddf0-44f4-a9ae-30bcf4479602&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;When Uber grew as a company, so did the number and complexity of LOBs. Uber started offering food and grocery delivery, bike and scooter rentals, public transportation tickets, and car rentals. Each LOB built their own system on the back end where their business logic lived. Still, they all needed payments and risk support, and that required specific operations like 2FA and fingerprinting. Implementing payment business logic became expensive because any change had to be made many times across services. This harmed ‌velocity and feature parity, and increased the complexity, cost, and risk of maintaining services.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;1786d6d3-6cfe-4841-97b1-0fd115c1aca0&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Payment methods weren’t uniformly supported across user flows and LOBs. For example, Apple Pay wasn’t supported in every user flow or LOB at Uber. You could use it to pay for an on-demand ride, but you couldn’t use it to pay for a scheduled ride until very recently. Other payment methods like Google Pay&lt;sup&gt;™&lt;/sup&gt;&lt;strong&gt; &lt;/strong&gt;and direct bank transfers were in the same situation. That was because a different service handled scheduling rides, and it followed a different model of securing funds before fulfillment. Upfront charge payment methods and ones that required any form of 2FA to initialize or finalize a payment weren’t supported by some LOBs or flows, like scheduling a trip, switching the payment profile for an ongoing trip, or even changing the payment method&amp;nbsp; after the completion. This was especially important for popular payment methods in markets like PIX in Brazil and UPI in India.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;646721ae-f279-4e2e-8ac9-dcca5dab8fe6&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;After years of having to implement payment methods individually and once per LOB, we were determined to find a better solution for the next compliance requirement where we’d need to repeat the same change multiple times across back-end services. The trigger point to fund a team and solve this problem was Strong Customer Authentication, which was a mandate initially rolled out in the European Union. It dictated that any transaction with a European credit card that was higher than a certain threshold would be subject to a multi-factor authentication process using 3-D Secure to confirm the shopper’s identity. The protocol involved fingerprinting the shopper’s device and had a chance to throw a challenge for the shopper to complete, like a biometric challenge or a one-time password.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;14ae3cf7-eca7-404d-8423-ca4d5800a8fd&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We had around 70 endpoints that might result in a financial transaction, all of which integrated directly with our risk and payment systems. This blog describes how we implemented these authentication methods and supported payment methods while dealing with this complexity.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e1ea7abc-6eba-4dd4-ae66-e342abac4991&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;357f8633-ce9e-4122-a464-bb54a638464f&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-unified-checkout&#34;&gt;Unified Checkout&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;33692168-6439-4e35-af22-9c64be2a76ed&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We built a checkout layer to allow LOBs access to the Uber payment ecosystem via one connection. This introduced a new layer in our systems to hold checkout business logic and act as an orchestrator. Any payment method support or need for a cross-LOB change can now be implemented once by a single team.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;04e0a1b0-8b55-425e-b90c-6b38489b4d59&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXf5Aw22eJyQTPnah17ZVYK3MEc3Avsu_-s4Ozq93O8uSVjomfyWP26LKhcL7BtiCRHyWUnxystQI_Mix2thIZtcFkjAuQo36nWAfPL--kCL8ftyjcoYYsen5zZKk7SSyxI3XTXic0S1wiUzFdH93gCCJQA?key=8HfQhqD5HD_dFi-j9eqKYw&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 1: Uber LoBs without and with Unified Checkout.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c3b541aa-e41b-4f5d-9216-8d601d034b29&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;96828353-5359-4329-a5d9-7072f81b81f7&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;All of the business logic to support payment methods and their specific operations moved to this new layer. If Unified Checkout supports a given payment method, all it takes to enable it on an LOB or flow is a few configuration changes.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;890710d7-77ae-481f-a5ae-a5b1a266f060&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;New payment methods are only supported fully in Unified Checkout, which serves as a moving force for adoption across the company and delivers value to ‌existing consumers. The strategy of the Unified Checkout platform was to treat each Uber LOB as an external company that we knew very little about, similar to existing checkout offerings in the market. By decoupling the system from the LOB’s product layer, we keep the platform agnostic of their inner workings and only aware of payment method specifics. This allows the platform to evolve faster and pushes the team to model all operations in a generic way while ensuring that people can pay with their preferred payment methods in any flow across all Uber LOBs.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c83ea450-b5f7-40c5-93e8-26d5cb86066b&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9af08c74-b847-4963-a432-b2f0e0223985&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-architecture&#34;&gt;Architecture&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;80479027-22d3-4f65-9d17-12a285734311&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Unified Checkout is available in a modular and hosted version with client components that are coupled with the checkout back-end service.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0edb52ae-0d84-4763-8aef-5b170af69b6f&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;It provides generic payment method support for global and local instruments, a risk system integration on the client side and on the back-end side for risk evaluation, and the execution of arbitrary flows through a generic actioning framework called Checkout Actions.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9d100c95-9ad9-4ecf-9eec-ea98f0c4ab89&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;A small set of microservices handle the checkout request and execute a set of operations:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;ordered&amp;quot;:true,&amp;quot;hash&amp;quot;:&amp;quot;75305263-b62f-4254-ae10-165c78580011&amp;quot;,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Prepares the payment profile &lt;/strong&gt;by exchanging transactional data captured on the client side with other payment systems. This can be passing a short-lived token all the way to the third-party processor, extracting authentication identifiers from the request, or initializing the request to generate a 2FA URL.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Invokes the risk system&lt;/strong&gt; &lt;strong&gt;to score the request and later secure the funds&lt;/strong&gt; on the person’s chosen payment profile either by placing an authorization hold on the funds so they can be captured when the order is completed or by charging the person upfront before the order is fulfilled, depending on the strategy decided by the risk system.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Generates Checkout Actions&lt;/strong&gt; to either guide the person through any necessary steps, or to display a failure message along with buttons that trigger corrective actions, like reauthenticating an account, editing the payment method details, or selecting another payment profile.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;If the risk system instructs Unified Checkout to initiate an upfront charge, it &lt;strong&gt;waits for the payment confirmation signal &lt;/strong&gt;emitted from the payments platform once we get a response from the third-party processor. This is a necessary complexity, as most processors are asynchronous. Once Unified Checkout consumes this event, it either confirms the order’s preparation or cancels it by emitting another event or calling an LOB service directly.&amp;nbsp;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;bec50a0e-7af0-4fec-a11c-57475b79a046&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXdyMsKQO_GI_QVbqkJan89j8BgOhLI1B_4xB9nTw7L7XE8uC3kuo_a4uY5FjYXM56RuRiLJXxkkTP-j-kO_f69zjkiiPg08FcGi_od_O5XfvQy5ZMDnvSzi93NXG5Nz8wpWGy8wkTqkRnPZRMALrDBiEjy2?key=8HfQhqD5HD_dFi-j9eqKYw&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 2: Unified Checkout architecture diagram.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;92338aff-0105-4208-8f97-fd758fb776ca&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;4502b8a4-8af5-4acb-8564-38fef5f705da&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-modular&#34;&gt;&lt;br&gt;Modular&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;b62e1373-8002-40a5-bd80-f952230322ac&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In the modular version, ‌clients can integrate the pre-built components on their own screens and checkout funnel and invoke them throughout the person’s journey of checking out.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;98330e4d-ef0e-4220-a8e6-64824302f069&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In this integration model, the LOB back end calls the checkout back end directly. Any Checkout Actions that need to be surfaced externally are then propagated through the response in an opaque manner and passed to the client checkout component. The payload is opaque to the LOB so that only the checkout back end and checkout client can process it. This was a deliberate design choice to prevent payment complexity from leaking to the LOB services and having those teams building features on top of the payload.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;87056699-cf4f-4874-bc3c-f1c22aeb6928&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXdBRUV1nRzBK01_R-PzIL5q-wCTK_y3IXLmGe0LSTjTX5Dk5Ovh7TiYmcN_ubkgQvbuJQGhiSQstEP5xvcrzxz8D831CBPBt-JrRpmhwGZA6LxRW7iBKrBS444ZS6HmG4Yw7NIVLzIEXw1gPqvU2bSS-TM?key=8HfQhqD5HD_dFi-j9eqKYw&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 3: Screen owned by Rides LOB.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0abe1c39-2029-42ec-97ef-dd146497c858&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;7bc83ca9-3780-480b-a604-b26d1a767c4b&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-hosted&#34;&gt;&lt;br&gt;Hosted&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a5008b0a-5f72-455d-8cc5-a12eaa95fb08&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We offer the hosted solution to new verticals or smaller LOBs so that they can use a complete payments and checkout solution out-of-the-box. This accelerates their time-to -market and experimentation while maintaining the same or very similar level of payment method support.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7c61055a-4899-4601-8110-baae00611680&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;With the hosted implementation, once the person is ready to check out, the checkout solution takes control over the application and displays a summary view of the order. On the same screen, the person can select their payment profile and place the order. Once the order is successfully prepared, a signal is sent to the client and to the back end, which will then dismiss the hosted checkout screens on the client side and give control back to the LOB.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6d89bc12-f4b8-4746-91bf-17865deb2e55&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In this model, all the communication once the hosted solution has been invoked happens between the checkout client and checkout back end. This means that the LOB back end doesn’t call the checkout back end.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;570021e8-f329-4001-b7e2-f42708ce21e1&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXeT3PjMLpMKQ1lANNNdpsukdoTnjQb6AdfOokRq-CJ8qYyFleWTanAE8vny-QFvtA4EHN350dfZfB-b7rzeen3vmnI_mNYPKFej-HA7MxaQAjFMhXaVV6dMap8LQ8jTiwoqoBXAg0lUeDcf06QOZzx2bl4?key=8HfQhqD5HD_dFi-j9eqKYw&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 4: Hosted checkout summary view.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a5c5ecbb-1318-4fef-bc41-ed4288ad6042&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2e8a462a-6a8a-4466-853d-47a392af2795&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ab7ab23e-ea83-4241-889e-03474e8f825b&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-checkout-actions&#34;&gt;Checkout Actions&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7375adc2-c256-48fb-9c8f-9b1b22bb2f95&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Checkout Actions is a stateless framework to execute arbitrary flows that are required for someone to convert successfully. These actions can be 2FA operations, clearing your arrears, executing an identity challenge, authorizing a payment operation, device fingerprinting, and more. The actions have to be generic enough that they can be applied across all LOBs. If there’s an action specific to a single business, like confirming your delivery address, then it shouldn’t be implemented as a Checkout Action. Checkout Actions may not require any interaction, and can be a data collection process or the initialization of a back-end process‌.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;16d696de-057d-4541-8218-174e9ec8d261&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The client side runs the Checkout Actions and generates the results payload. This payload is sent to the checkout back end on the subsequent checkout request and any state required is carried along with it. This request can either succeed or generate more Checkout Actions for the person to complete.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;c3841530-7454-4ad5-9db4-d640620a5df1&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXeT0ezeO78ft5Sq5bzdxJx-WZhO1_4o9s-ke-hKM6PaWnEs0B66Y3zzFoDUY3kNrOElJQ4P4iBYmJNpWh6rAPYFj3gC8gZcUIdyRtmS55ViSo0zZs_2EDvXHryHMW896ANvS17xJMFd7EczH2yrzzs8yLpW?key=8HfQhqD5HD_dFi-j9eqKYw&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 5: Checkout Actions sequence diagram.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d6118ee7-8694-4bed-a9d4-03f0058b2dab&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;ab10679a-d467-4934-a5b8-9d0773cb11c4&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-pre-checkout-actions&#34;&gt;&lt;br&gt;Pre-checkout Actions&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7b8c7c18-1e3f-4c30-abcf-f31e4f8bb0b3&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Pre-checkout actions are actions that must be executed on the client side before the first interaction with the back end for the checkout request. These are usually deterministic operations and can be generated by our back end in real time since their execution is already known to be a mandatory step. Someone checking out with Apple Pay will always need to pick a payment method in their Apple Wallet&lt;sup&gt;®&lt;/sup&gt;, for example.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;135b7a20-056d-4b8f-97de-5c9a899d4502&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXd9OOze2NKOcEK3sgHzRQBImA97YquUsygX6K7UK_ZFPcm1lvYOiNlYp3kPRPdgtKm4eSv5b2L-fgl-g9ff41bEKobXXTJ3zTvdh-fZLm-JgQEIu06kS8pEbSjdK6Tzm7LFLGzQfrpHDSbYaEzfQIIIrtpI?key=8HfQhqD5HD_dFi-j9eqKYw&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 6: Pre-checkout actions.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;bcf279bc-a07c-40e6-a00b-922cb243a553&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;8e4d5b83-837f-4f28-949f-34e74dd5d299&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-post-checkout-actions&#34;&gt;&lt;br&gt;Post-checkout Actions&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f7b54403-044e-47b7-a184-b8015a304d9b&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Post-checkout actions are generated after the first interaction with the checkout back end. These can be operations required to authorize or complete a payment transaction or they can be rejection actions, in case of insufficient balance, an error while placing an auth-hold, or even a rejection by Uber risk systems or someone’s bank. Every checkout action generated by the system offers a corrective action, even if it’s as simple as allowing someone to select another payment profile and try again. There are also more complex recovery flows like confirming your identity, connecting a social media account to your Uber account, or going through an identity challenge.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;1d076ebe-e466-4b1a-b4ab-3ed3e5774399&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXfj8PYdPAUpYiAexDrve9JBOyT3eoM9pwsk9nmGlvYuu29YMDkDkvm0Sw40NcydRs1mkla_ZyG3_lSDrIJ4b8r1D7Vvb_EHPURc0FCn_eDu4Tj5wgJlfxcV4d4VNbNRe8F8PmdIUmxz0LWezZ36J0YaPKN_?key=8HfQhqD5HD_dFi-j9eqKYw&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 7: Post-checkout actions.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;93a2729f-2f1d-4080-9720-87d4cbe0fe23&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;dbd7b493-6bb3-4df4-bb97-9576d62afc7d&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;33b1960e-6e5e-4d19-b82f-fea19d6e53ac&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-impact&#34;&gt;Impact&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a229624d-db07-4b05-9ab9-3eabd3744c9f&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Every launch of Unified Checkout goes through an experiment to measure its impact on metrics like checkout request conversion, session conversion, session recovery, and number of orders completed. After launching the most frequently used payment methods globally on Uber Eats, we performed a holdout experiment where a percentage of the participants didn’t get their requests routed to the Unified Checkout system and stayed in the legacy experience where their system connected directly to risk and payments. As a result, we observed that the Unified Checkout experience had a &lt;em&gt;3% higher checkout conversion rate&lt;/em&gt; and a &lt;em&gt;4.5% higher session recovery rate&lt;/em&gt; when compared to the legacy experience. This means that people saw fewer errors when checking out. Those that saw errors could recover from them and convert more often.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c3904e65-0520-4356-8870-5a8cfd117d48&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Even though this holdout experiment was only executed on one LOB, we extrapolated the impact to the entire order placement traffic and calculated an estimated impact of incremental gross bookings in the order of hundreds of millions of dollars annually.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2d51d43d-a896-4bdc-90a4-d5c80cd6e35e&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Other than the lift in the metrics, every flow now supports at least the top 5 most-used payment methods globally. The biggest LOBs also support popular local payment methods, unlocking more availability. The lack of support for a specific payment method is now a strategic decision rather than a technical limitation, cost barrier, or complexity of implementation.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;8010fab0-ac04-4a00-b2cd-ff5394bcceaa&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:1,&amp;quot;hash&amp;quot;:&amp;quot;eed3585c-cf4b-4d37-8a43-22bc7adaf3fa&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-conclusion&#34;&gt;Conclusion&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;b05f85a9-306b-45a7-9d98-2b1ed8abe0be&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Following the strategy of treating Uber LOBs as external customers, the Checkout Platform team experiments with new experiences and features to identify opportunities to increase conversion metrics and decrease drop off. This includes new types of Checkout Actions, new error messaging models, more granularity with error messages, optimizing existing operations, new modalities for Memberships, scheduled orders, clientless flows, split tender, and more.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d430a191-5999-4f36-b913-8e161355d532&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;It’s natural for software solutions to have an inflection point in which common or duplicated operations must be transformed into platforms or redesigned in a more generic way so that it can be applied a number of times with minimum maintenance cost. You could call this the moment in which you are paying tech debt incurred due to the hyper-growth of the company.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;1344ee70-b4cc-411b-a8ab-cc587130889f&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;At Uber scale, having a system that handles the entire order placement traffic from all mobile and web applications means that we can impact and improve the user experience from all of our users placing orders at once with a single change or deployment. Optimizing a checkout flow can have a significant impact on key business indicators, such as gross bookings.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7ac719f3-ec72-4532-8a46-2b21e360c51f&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;It’s our job as Software Engineers to identify opportunities as such and to design solutions that address those opportunities in a way that’s beneficial to both users and the business, even if that means starting from a bottoms-up project and pushing for it until it eventually becomes a product.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;f517b7b6-9daa-4061-a46f-0b9eddfde2a8&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;Google Pay&lt;sup&gt;™&lt;/sup&gt; is a trademark of Google LLC.&lt;/p&gt;】&lt;h1 data-wp-block-name =“ core/heading” data-wp-block =“ {”级别“：1，“哈希”：“ 7136F2D55-0242-41B5-9146-9146-965A2657F0AC”}&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;0a33db00-7c46-4bc3-9f03-1fd88a301f06&#34;,&#34;dropCap&#34;:false}&#34;&gt;Uber started as a ridesharing company with a simple yet ambitious mission: make transportation as reliable as running water, everywhere, for everyone.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 8339E8E9-B7AB-46EB-46EB-89E7-53FF0F8811CE”，“ dropcap”：false}“：false}”&gt;当公司集中在骑行中，大多数背部式系统围绕着一个骑行式的驾驶员，一个驾驶员a trip a a a ride a ride，a ride s a ride n ride s ride s ride ride ride。由于它是当时唯一的LOB（业务范围），因此直接将任何特定于付款的操作实施到乘车共享系统中。例如，支持Apple Pay &lt;Sup&gt;®&lt;/sup&gt;在骑行后端实施。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph“ data-wp-block =” {“ hash”：“ 766DF407-DDF0-44F4-A9AE-A9AE-A9AE-30BCF4479602”，“ dropcap”：dropcap“：false}”&gt;当Uber作为公司时，lob和Complactity和Complactity of Lobs和Complactity和Complovene of lobs and complove and copplact。 Uber开始提供食物和杂货店，自行车和踏板车租赁，公共交通票以及汽车租赁。每个叶在其业务逻辑寿命的后端建立了自己的系统。尽管如此，他们都需要付款和风险支持，并且需要特定的操作，例如2FA和指纹识别。实施付款业务逻辑变得昂贵，因为必须多次在服务中进行多次更改。这损害了‌级和特征奇偶校验，并增加了维护服务的复杂性，成本和风险。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph“ data-wp-block =” {“ hash”：“ 1786d6d3-6cfe-4841-4841-97b1-0fd115c1aca0”，“ dropcap”：dropcap“：false}”&gt;付款方式，&gt;付款方式不是均匀的用户flow and flow and-flow and flow and flow和lopbs。例如，在Uber的每个用户流或LOB中都不支持Apple Pay。您可以使用它来支付按需乘车，但是直到最近才能使用它来支付预定的乘车费用。 Google Pay &lt;Sup&gt;™&lt;/sup&gt; &lt;strong&gt; &lt;/strong&gt;和直接银行转移的其他付款方式也处于同样的情况。那是因为另一项服务处理的安排骑行，并且遵循了在履行之前确保资金的不同模型。前期费用付款方式和需要任何形式的2FA才能初始化或最终确定付款的方法不受某些小小的或流量的支持，例如安排旅行，切换付款资料进行正在进行的旅行，甚至在完成后更改付款方式。这对于巴西Pix和印度UPI等市场的流行付款方式尤其重要。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 646721AE-F279-4E2E-8AC9-DCCA5DAB8FE6”，“dropcap“：false}”&gt;经过多年的单独实施付款方式，每段一次实现付款方式后，我们决心为下一个合规性要求找到更好的解决方案，在该要求中，我们需要在后端服务中多次重复相同的更改。为团队提供资金并解决此问题的触发点是强大的客户身份验证，这是最初在欧盟推出的任务。它规定，使用3D安全的多因素身份验证过程，使用欧洲信用卡高于某个门槛的任何交易都将受到购物者身份。该协议涉及指纹识别购物者的设备，并有机会为购物者提供挑战，例如生物识别挑战或一次性密码。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 14AE3CF7-ECA7-404D-8423-CA4D5800A8FD”，“ dropcap”：dropcap“：false}”&gt;我们拥有70个端点，这可能会导致金融经济上的70个端点，这些端口可能会直接与我们的所有风险进行，所有这些都可以与我们的所有风险进行了整合，并且我们的所有风险和我们的所有风险都可以和我们我们的风险。该博客描述了我们在处理这种复杂性时如何实施这些身份验证方法和支持的付款方式。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;e1ea7abc-6eba-4dd4-ae66-e342abac4991&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data data-wp-block-name =“ core/head” data-wp-block =“ {” hash&#39;：“ 357F8633-CE9E-4122-4122-A464-BB54A638464F”，“ LEAVE&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 33692168-6439-4E35-4E35-AF22-222222-9C64BE2A76ED”，“ dropcap”：dropcap“：false}”&gt;我们允许Loibbs访问一台访问Uber EcosSemple的核对层。这在我们的系统中引入了一个新层，以保持结帐业务逻辑并充当编排。现在，一个团队可以实施一次付款方式支持或对跨块变更的需求。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ align”：“ center”，“ hash”：“ 04E0A1B0-8B55-425E-B90C-6B90C-6B38489B49B4D59”，“ src =“ https://lh7-rt.googleusercontent.com/docsz/ad_4nxf5aw22ejyqtpnah17zvyk3mec3mec3mec3mec3mec3mec3mec3mec3mec3mec3mec3Mecq93o8usvjjomfywp26lkhcl7btic Rhywunxystqi_mix2thiztcfkjauqo36nwafpl- -kcl8ftyjcoyysen5zzkkk7ssyxi3xtxic0s1wiuzfdh93gccjqa？ alt =“” referrerpolicy =“ no-toferrer”&gt; &lt;figcaption class =“ WP-元素caption”&gt;图1：无统一结帐的Uber Lobs。&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {” hash&#39;：“ C3B541AA-E41B-4F-4F5D-9216-8D601D034B29”，“ Dropcap”：dropcap“：fals}”&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“核心/段落” data-wp-block =“ {” hash：“ 96828353-5359-4329-A59-7072F81B81F7”，“ dropcap”：false}}“&gt;所有业务逻辑，以支持支付付款方式及其特定操作。如果统一的结帐支持给定的付款方式，则在LOB或FLOW上启用它所需的只是一些配置更改。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;890710d7-77ae-481f-a5ae-a5b1a266f060&#34;,&#34;dropCap&#34;:false}&#34;&gt;New payment methods are only supported fully in Unified Checkout, which serves as a moving force for adoption across the company and delivers value to ‌existing消费者。统一结帐平台的策略是将每个Uber Lob视为我们对市场知之甚少的外部公司，类似于市场上现有的结帐产品。通过将系统与LOB的产品层分离，我们将平台不可公开对其内部工作，并且只了解付款方式的细节。这使得平台可以更快地发展，并推动团队以通用的方式对所有操作进行建模，同时确保人们可以在所有Uber Lobs的任何流程中使用其首选的付款方式付款。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;c83ea450-b5f7-40c5-93e8-26d5cb86066b&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name =“ core/heading” data-wp-block =“ {” hash&#39;：“ 9AF08C74-B847-4963-A432-B2F0E0223985”，“等级”，“：2}”：2} class =“ class =” WP-Block-Heading to&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/core” data-wp-block =“ {“ hash”：“ 80479027-22D3-4F65-4F65-9D17-9D17-12A285734311”，“ dropcap”，“ dropcap”：false}“：false}”&gt;与COUNEDENTS中的COUNBORD-BENDENT中的counifient &lt;unifiend cookout一起使用。&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;0edb52ae-0d84-4763-8aef-5b170af69b6f&#34;,&#34;dropCap&#34;:false}&#34;&gt;It provides generic payment method support for global and local instruments, a risk system integration on the client side and on the back-end side for risk evaluation, and the execution of任意流入称为结帐操作的通用操作框架。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph“ data-wp-block =” {“ hash”：“ 9D100C95-9AD9-4ECF-9EEC-9EEC-EA98F0C4AB89”，“ dropcap”，“ dropcap”：false}&#xA;&#xA;&#xA;&#xA;&lt;ol data-wp-block-name =“ core/list” data-wp-block =“ {“ ordered”：true，“ hash”：“ 75305263-B62F-4254-AE10-165C78580011”，“值&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt;通过交换捕获的交易数据来准备支付配置文件&lt;/strong&gt;客户端具有其他付款系统。这可以将短的令牌一直传递到第三方处理器，从请求中提取身份验证标识符，或初始化生成2FA URL的请求。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Invokes the risk system&lt;/strong&gt; &lt;strong&gt;to score the request and later secure the funds&lt;/strong&gt; on the person’s chosen payment profile either by placing an authorization hold on the funds so they can be captured when the order is completed or by charging the person upfront before the order is fulfilled, depending on the strategy decided by the risk系统。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data data-wp-block-name =“ core/list-item” data-wp-block =“ []“&gt; &lt;strong&gt;生成结帐操作&lt;/strong&gt;可以通过任何必要的步骤指导人员，或者显示故障消息以及触发纠正措施的按钮，例如重新验证帐户，编辑付款方式，或选择另一个付款方式，或选择另一个付款方式，或选择其他付款资料。&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;如果风险系统指示统一的结帐启动预付款，则&lt;strong&gt;等待一旦我们从第三方处理器获得响应，就等待从付款平台发出的付款确认信号&lt;/strong&gt;。这是必要的复杂性，因为大多数处理器都是异步的。一旦统一结帐消耗了此事件，它可以确认订单的准备工作，或者通过发射另一个事件或直接致电LOB服务来取消订单的准备。 &lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ align”：“ center”，“ hash”：“ bec50a0e-7af0-7af0-4fec-a11c-a11c-a11c-57475b79a046”，“ src =“ https://lh7-rt.googleusercontent.com/docsz/ad_4nxdymskqo_gi_gi_qvbqkjan89j8bgohli1bgohli1b_4xb_4xb9l7l7l7xe8uc3kuo_a4uy5fjyxm56 RuRiLJXxkkTP-j-kO_f69zjkiiPg08FcGi_od_O5XfvQy5ZMDnvSzi93NXG5Nz8wpWGy8wkTqkRnPZRMALrDBiEjy2?key=8HfQhqD5HD_dFi-j9eqKYw&#34; alt =“” referrerpolicy =“ no-treferrer”&gt; &lt;figcaption class =“ WP-元素caption”&gt;图2：统一的结帐体系结构图。&lt;/figcaption&gt; &lt;/figcaption&gt; &lt;/fige&gt; &lt;/div&gt;&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 92338AFF-0105-4208-8F97-F97-FD758FB776CA”，“ dropcap”，“ dropcap”：false}&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;H3 Data Data-Wp-block-name =“ core/heading“ data-wp-block =” {“ latve”：3，“哈希”：“ 4502B8A4-8AF5-4ACB-8564-38FEF5F705DA”}“}” class =“ class =” Wp-block-heading =“ wp-block-heading”&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;b62e1373-8002-40a5-bd80-f952230322ac&#34;,&#34;dropCap&#34;:false}&#34;&gt;In the modular version, ‌clients can integrate the pre-built components on their own screens and checkout funnel and invoke them throughout the person’s journey of检查。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 98330E4D-EF0E-4220-A8E6-64824302F069”，“ dropcap”：false}在此集成模型中，Lob后端直接调用结帐后端。结帐端和结帐客户端可以对其进行处理。&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ align”：“ center”，“ hash”：“ 8705699-CF4F-4874-BC3C-F1C222AEB6928”，“ src =“ https://lh7-rt.googleusercontent.com/docsz/ad_4nxdbruv1nrzbk01_r-pzil5q-wctk_y3ixlmge0lstjtx5k5k5k5k5k5k5k5ovh7tiovh7tiymcn_ubkgq vbujqghisqstep5xvcrzxz8d831cbpbt-jrrpmhwgza6lxrw7ibkrbs444444zs6hmg4yw7nivlziexiexwlziexw1gpqvu2bss-tm？ alt =“” referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ wp- element-caption”&gt;图3：屏幕由Rides lob。&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 0abe1c39-2029-42ec-97EF-DD146497C858”，“ dropcap”，“ dropcap”：false}“：false}”&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data data-wp-block-name =“ core/head”“ data-wp-block =” {“ latve”：3，“哈希”：“ 7BC83CA9-3780-480B-A604-B26D1A767C4B”}&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;a5008b0a-5f72-455d-8cc5-a12eaa95fb08&#34;,&#34;dropCap&#34;:false}&#34;&gt;We offer the hosted solution to new verticals or smaller LOBs so that they can use a complete payments and checkout solution out-of-the-box.这加速了他们的市场时间和实验，同时维持相同或非常相似的付款方式支持。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/chagraph” data-wp-block =“ {” hash&#39;：“ 7c61055a-4899-4601-4601-4601-8110-baae00611680”，“ dropcap”：false}“：false}”&gt;带有托管实现的实现，一旦将托管人员签到了订单，就可以使用订单，并显示出订单的订单，并将其命名为一定的订单。在同一屏幕上，该人可以选择其付款资料并下订单。成功准备好订单后，将信号发送给客户和后端，然后将托管在客户端的托管结帐屏幕上，并将控件还给LOB。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 6d89bc12-f4b8-4746-4746-91bf-17865deb2e55”，“ dropcap”：dropcap“：dropcap”：false}在此模型中，一旦托管的解决方案都在托管的解决方案中，都会遇到过派遣的派遣。这意味着LOB后端不会调用结帐后端。 &lt;/p&gt;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ align”：“ center”，“ hash”：“ 570021E8-F329-4001-B7E2-F42708CE21E1”，“ src =“ https://lh7-rt.googleusercontent.com/docsz/ad_4nxet3pjmlpmkq1lannndpsukdpsukdpsukdpsukdppsukdnjqb6adfookrq-cj8qyyyflewtanae8vnae8vny-qfvt A4EHN350DFZFB-B7RZEEN3VMNI_MNYPKFEJ-HA7MXAQAJJFMHXAVVDMAP8LQ8LQ8JTIWOQOBXAG0LUEDCF06QOZZX2BL4？ alt =“” referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ wp- element-caption”&gt;图4：托管结帐摘要视图。&lt;/figcaption&gt; &lt;/figapaption&gt; &lt;/fige&gt; &lt;/div&gt;&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ A5C5CBB-1318-4FEF-BC41-ED4288AD6042”，“ Dropcap”，“ dropcap”：false}&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data data-wp-block-name =“ core/saparator” data-wp-block =“ {” hash&#39;：“ 2e8a462a-6a8a-4466-4466-853d-47a392af2795”，“ opcity”，“ obycity”，“ obycity”：“ alpha-channel”：“ alpha-channel” alpha-channel“ alpha-channel”} class =“ wp-block-separane-separaTor-separa inspara”&gt;“&#xA;&#xA;&#xA;&#xA;&lt;H2 Data-wp-block-name =“ core/head”“ data-wp-block =” {“ hash”：“ ab7ab23e-ea83-4241-889e-03474e825b”，“ level”：2} class =“ class =” wp-block-heading =“&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 7375ADC2-C256-48FB-9C8F-9C8F-9B1B222B2F95”，“ dropcap”：dropcap“：false}”&gt;结帐行动是为执行成功的人的无用框架，可以成功地执行某人，以执行成功。这些操作可以是2FA操作，清除欠款，执行身份挑战，授权付款操作，设备指纹识别等。这些动作必须足够通用，以便可以在所有叶片上应用它们。如果有针对单个业务的行动，例如确认您的送货地址，则不应将其作为结帐行动实施。结帐操作可能不需要任何互动，可以是数据收集过程或后端过程的初始化。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 16d696de-057D-4541-4541-8218-174E9EC8D261”，“ dropcap”，“ dropcap”：false}“此有效载荷将在随后的结帐请求中发送到结帐后端，并随身携带任何状态。此请求可以成功或为人完成更多结帐措施。 &lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ align”：“中心”，“ hash”：“ C3841530-7454-4AD5-9DB4-D640620A5DF1”，“ src =“ https://lh7-rt.googleusercontent.com/docsz/ad_4nxet0ezeo78ft5sq5bzdxjxjx-wzho1_4o9s-ke-ke-hkm6pawnes0b666y3zzfod UY3KNROELJQ4P4IBYMJNPWH6RAPYFJ3GC8GZCUIDYRTMS55VISO0ZZS_2EDVXHRYHMW896ANVS17XJMFD7ECZH2YRZZS8YLPW？_dfi-j9eqkyw“ alt =”“ referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ wp-element-caption”&gt;图5：结帐操作序列序列图。&lt;/figcaption&gt; &lt;/figapation&gt; &lt;/figife&gt; &lt;/div&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ d6118ee7-8694-4bed-a9d4-03f0058b2dab”，“ dropcap”，“ dropcap”：false}&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;H3 Data Data-Wp-block-name =“ core/thead” data-wp-block =“ {”级别“：3，“ hash”：“ AB10679A-D467-467-4934-A5B8-9D07773CB11C4”}&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph” data-wp-block =“ {” hash&#39;：“ 7B8C7C18-1E3F-4C30-ABCF-F31E4F8BB0B3”，“ dropcap”，“ dropcap”：false}“&gt; pre-ceckout动作都必须在client侧进行互动，以便在contert互动之前执行操作。这些通常是确定性的操作，可以由我们的后端实时生成，因为他们的执行已知是强制性的步骤。例如，与Apple Pay结帐的人总是需要在其Apple Wallet &lt;sup&gt;®&lt;/sup&gt;中选择付款方式。 &lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;图data-data-wp-block-name =“ core/image” data-wp-block =“ {“ align”：“ center”，“ hash”：“ 135b7a20-056D-4B8F-97DE-5C9A8999D4502” src =“ https://lh7-rt.googleusercontent.com/docsz/ad_4nxd9ooze2nkocek3sghzrqbima97yquusygx6k7uk_zfppcm1lvyoinlyoinlyp3kprpdgtk M4ESV5B2L-FGL-G9FF41BEKOBXXTJ3ZTVDH-FZLM-JGQEIU06KS8PEBSJDK6TZM7LFLGZQFRPHDSBYAEZFQIIIRTPI？ alt =“” referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ wp- element-caption”&gt;图6：pre-eckeckout操作。&lt;/figcatpion&gt; &lt;/figcaption&gt; &lt;/figife&gt; &lt;/div&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {” hash&#39;：“ BCF279BC-A07C-40E6-A00B-922CB243A553”，“ Dropcap”&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data data-wp-block-name =“ core/head”“ data-wp-block =” {“ level”：3，“哈希”：&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph“ data-wp-block =” {“ hash”：“ F7B54403-044E-47B7-A184-B8015A304D9B”，“ dropcap”：dropcap“：false}”&gt;在与检查后的conseckout后首次与检查后产生。这些可能是授权或完成付款交易所需的操作，也可以是拒绝行动，如果余额不足，在放置身份验证的同时出现错误，甚至由Uber风险系统或某人的银行拒绝。系统生成的每个结帐操作都提供纠正措施，即使它很简单，就像允许某人选择其他付款配置文件并重试。还有更复杂的恢复流，例如确认您的身份，将社交媒体帐户连接到您的Uber帐户或经历身份挑战。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ align”：“ center”，“ hash”：“ 1d076ebe-e466-4b1a-b4ab-3Ed3E5774399”，“ src =“ https://lh7-rt.googleusercontent.com/docsz/ad_4nxfj8pydpaupyiaexdrve9jboyt3eom9pwsk9nmglvyuu29mdkdkdkm0sw40ncydrs 1MKLA_ZYG3_LSDRIJ4B8R1D7VVB_EHPURC0FCN_EDU4TJ5WGJLFXCV4D4VNBNRE8F8PMDIUMXZ0LWEZZ36J0YAPKN_？ alt =“” referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ wp- element-caption”&gt;图7：后检查操作。&lt;/figcatpion&gt; &lt;/figcaption&gt; &lt;/figife&gt; &lt;/div&gt;&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 93A2729F-2F1D-4080-9720-9720-8720-87D4CBE0FE23”，“ dropcap”，“ dropcap”：false}“：false}”&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;dbd7b493-6bb3-4df4-bb97-9576d62afc7d&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name =“ core/heading” data-wp-block =“ {” hash&#39;：“ 33b1960e-6e5e-4d19-b82f-fea19d6e53ac”，“ level”：2&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/encor” data-wp-block =“ {“ hash”：“ a229624d-db07-4b07-4b05-9ab9-9ab9-9ab9-3ebd3744c9f”，“ dropcap”，“ dropcap”，“ dropcap”：false}“：false}”&gt;通过统一请求的每次启动的次数进行了计数召集，否则会议率会恢复，以恢复量的交流。 完全的。在在Uber Eats上启动了最常用的付款方式之后，我们进行了一项保留实验，其中一部分参与者没有将其请求接收到统一结帐系统，并留在传统体验中，并将其系统直接连接到风险和付款中。结果，我们观察到，与传统体验相比，统一的结帐经验的结帐转换率&lt;/em&gt; &lt;/em&gt; &lt;/em&gt; &lt;/em&gt; &lt;/em&gt; &lt;/em&gt; &lt;/em&gt; &lt;/em&gt; &lt;/em&gt;。这意味着人们在退房时看到的错误较少。那些看到错误的人可以从他们身上恢复并更频繁地转换。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;c3904e65-0520-4356-8870-5a8cfd117d48&#34;,&#34;dropCap&#34;:false}&#34;&gt;Even though this holdout experiment was only executed on one LOB, we extrapolated the impact to the entire order placement traffic and calculated an estimated impact of每年以数亿美元的订单订购的总预订。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;2d51d43d-a896-4bdc-90a4-d5c80cd6e35e&#34;,&#34;dropCap&#34;:false}&#34;&gt;Other than the lift in the metrics, every flow now supports at least the top 5 most-used payment methods globally.最大的叶子还支持流行的本地付款方式，从而解开了更多的可用性。缺乏支持现在，用于特定付款方式的RT是战略决策，而不是技术限制，成本障碍或实施的复杂性。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name =“ core/saparator” data-wp-block =“ {” hash&#39;：“ 8010FAB0-AC04-4A00-B2CD-FF5394BCCEAA”，“ obacity”，“ obacity”：“ alpha-channel”}&#xA;&#xA;&#xA;&#xA;&lt;h1 data-wp-block-name =“ core/heading” data-wp-block =“ {”级别“：1，“哈希”：“ EED3585C-CF4B-4D37-4D37-8A43-22BC7ADAF3FA”}“&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ B05F85A9-306B-45A7-9D98-298-2B1B1ED8B1ED8ABE0BE”，“ dropcap”，“ dropcap”，“ dropcap”：false}“&gt;在识别持续群体的策略中，可以识别出新的经验和签到的经验，并签署了新的经验，并签署了新的经验，并且会遇到新的经验，并签署了新的经验，并且签署了群体，并且不断地介绍了持续的群体，并且签署了新的经验，并且不断地进行了交流的功能，并且不断地进行了群体的交流。 离开。这包括新类型的结帐操作，新的错误消息传递模型，带有错误消息的更多粒度，优化现有操作，成员资格的新模式，计划的订单，无客户流量，拆分招标等等。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/core/段落” data-wp-block =“ {“ hash”：“ D430A191-5999-4F36-B913-8E161355532”，“ dropcap”&gt;通用方式，以便可以在最低维护成本的情况下多次应用。您可以在由于公司的超增长而偿还技术债务的那一刻。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coragraph” data-wp-block =“ {” {“ hash”：“ 1344EE70-B4CC-411b-411b-a8ab-cc587130889f”，“ dropcap”，“ dropcap”：false}“：false}”进行一次更改或部署。优化结帐流可以对关键业务指标（例如总预订）产生重大影响。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coragraph” data-wp-block =“ {” {“ hash”：“ 7AC719F3-EC72-4532-4532-8A46-2B2B21E360C51F”，“ dropcap”，“ dropcap”，“ dropcap”：dropcap“：false}”&gt;它是我们作为这样的机会，即使是这些机会，即使是这样的机会，即使是这样的机会，即使是这样的机会，即使是这样的机会，即从自下而上的项目开始，然后推动它最终成为产品。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ fontsize”：“ small”，“ hash”：“ F517B6-9DAA-4061-4061-A46F-0B9EDDFDEDFDE2A8” Google LLC的商标&lt;/p&gt;</description>
      <pubDate>Thu, 14 Nov 2024 06:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Introducing the Prompt Engineering Toolkit】引入及时的工程工具包</title>
      <link>https://www.uber.com/blog/introducing-the-prompt-engineering-toolkit/</link>
      <description>【&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:1,&amp;quot;hash&amp;quot;:&amp;quot;017052cc-70c9-4332-bf04-69fa7f4a8be8&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;b7bc8d85-9cd1-4d57-9148-41ce69ac3084&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;A well-crafted prompt is essential for obtaining accurate and relevant outputs from LLMs (Large Language Models). Prompt design enables users new to machine learning to control model output with minimal overhead.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;705831fa-9844-4560-85b6-fd321c40fb8c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;To facilitate rapid iteration and experimentation of LLMs at Uber, there was a need for centralization to seamlessly construct prompt templates, manage them, and execute them against various underlying LLMs to take advantage of LLM support tasks.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c5c2a0c0-9608-4c58-bb46-9085e37f53e2&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;To meet these needs, we built a prompt engineering toolkit that offers standard strategies that encourage prompt engineers to develop well-crafted prompt templates. It also provides functionality to enrich these templates with context obtained from RAG (Retrieval-Augmented Generation) and runtime feature datasets.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;97444062-6f99-4121-9750-6216787eb03c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The centralized prompt engineering toolkit enables the creation of effective prompts with system instructions, dynamic contextualization, massive batch offline generation (LLM inference), and evaluation of prompt responses. Furthermore, there’s a need for version control, collaboration, and robust safety measures (hallucination checks, standardized evaluation framework, and a safety policy) to ensure responsible AI usage.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f7750aa8-383b-47f3-9c15-138d5ec4fde2&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;This blog post gives an overview of the prompt template lifecycle, the architecture used to build the prompt toolkit, and the production usage of the toolkit at Uber.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;96debefe-ace7-409b-8951-2492f11910ae&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f7af8fe7-ca53-4a6f-85fa-96476bc5c987&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-goals&#34;&gt;Goals&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;3f5cadc6-3359-40c4-b372-c4c25dbefc20&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;When we built the prompt toolkit, our goals were that users at Uber could:&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;928707a3-c450-4996-b7e1-418b86170c4e&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Explore all the available LLM models&amp;nbsp;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Search and discover all the prompt templates&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Create and update prompt templates and tune parameters with access control&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Iterate on prompt template through code review and revision control&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Generate batch offline generation by applying RAG and testing datasets with different LLM models for LLM inference&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Evaluate prompt templates via offline evaluation through testing dataset and online evaluation&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Monitor prompt template performance with LLMs in production to detect regressions and continuously monitor LLM quality through systematic tracking&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;45261a03-0eae-4b6d-b559-0bd75f8c18a2&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;cf804320-9a8b-4be5-8bfa-53efe56c7c87&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-prompt-engineering-lifecycle&#34;&gt;Prompt Engineering Lifecycle&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9fa592ff-e9ed-4f0d-8316-2f46b6521d81&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The prompt engineering lifecycle consists of two stages: the development stage and the productionization stage. Users interact with the prompt toolkit during each of these stages.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;e2588716-190f-4a86-b76a-ee35e746aaf9&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-development-stage&#34;&gt;Development Stage&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f6708f16-5ec8-4e02-a6f2-c2c5ac178c3e&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The development stage has three phases: LLM exploration, prompt template iteration, and evaluation.&lt;br&gt;&lt;br&gt;In the LLM exploration phase, users interact with a model catalog and Uber’s GenAI Playground. A model catalog is a model repository that contains all the available LLM models and its corresponding description, metrics, and usage guide. The GenAI Playground helps users explore the capabilities of different LLMs available at Uber and test their use case applicability. Users explore available LLM models from a model catalog and test LLM responses with prompts in the GenAI playground.&lt;br&gt;&lt;br&gt;In the prompt template iteration phase, users pinpoint their specific business needs, gather sample data, create/analyze/test prompts with LLM models and datasets, assess the responses, and make revisions as needed. Auto-prompting suggests prompt creation so users don’t need to create the prompt template from scratch. With a prompt template catalog, users can explore and reuse the existing prompt templates. In this phase, users perform continual experimentation and iteration.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;67d4e70c-2dd5-42c4-9c37-62d46bb771d7&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In the evaluation phase, users evaluate the effectiveness of the prompt template by testing it with a more extensive dataset to measure its performance. It could leverage LLM as a judge or leverage a customized code-based LLM evaluator to evaluate the performance of the prompt template.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;20ee8da5-f987-4c8f-b0b6-aae132cbdd13&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-productionization-stage&#34;&gt;&lt;br&gt;Productionization Stage&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;8e60077b-f2d1-4ff3-b097-c436879b56c9&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In the productionization stage, users only productionize the prompt template that passed the evaluation threshold on an evaluation dataset.&lt;br&gt;&lt;br&gt;Users track and monitor usage in a production environment, collecting data on system usage. This data can inform further enhancements to the process.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;96cb832a-2766-4bc0-bfeb-6dbf8c133c66&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;78d40108-f817-4352-99da-371078275090&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-architecture&#34;&gt;Architecture&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d2737e54-b66d-486d-9e3f-0a89a2cc823a&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;With the prompt engineering toolkit, various components interact to facilitate LLM model deployment, prompt evaluation, and batch inference responses.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a5d33a03-0d98-40cf-b989-21886b5fe273&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The toolkit is composed of a Prompt Template UI/SDK that manages prompt templates and their revisions. The Prompt Template UI/SDK integrates with APIs like &lt;em&gt;GetAPI&lt;/em&gt; and &lt;em&gt;Execute API&lt;/em&gt;. These APIs interface with the LLM models deployed from the LLM Model Catalog. Models and prompts are stored in ETCD and UCS (object configuration storage), which are then used in an Offline Generation Pipeline and a Prompt Template Evaluation Pipeline.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;4a29a44e-cf91-4cb2-a032-adf6e223a059&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXdEq8Ow776xewryQ9ZnJ4Ii0MeuIjlDHx-7A-uFCFkM_j0ANWKYpPtn9AglumBRcWd3ypLTgnkERfI2pyXESzdX2o8ZNRinQoAbALFew8wFDJDFEQ_e6P_Qm-HluxXwetm__w-I23uEvenKM53PWZ_3vgnX?key=zCghPvr7E6rGgGY5x5OXaQ&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 1: Overview of the prompt engineering toolkit.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6895502e-4910-422c-afef-79ccab8a6420&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;a href=&#34;https://lucid.app/lucidchart/cbde0172-054f-4f6a-94cc-133e6b3208d4/edit?page=0&amp;amp;v=1087&amp;amp;s=612&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;91c4de30-e36b-4097-816a-8158637d10e2&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d2b25754-4a62-4ebc-912f-77f4849e8d7e&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-ui-design-nbsp&#34;&gt;UI/Design&amp;nbsp;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;59b93f45-511e-407c-8aab-6551c6e971be&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Users first interact with the prompt toolkit in Gen AI Playground. Gen AI Playground is designed to interface seamlessly with the Model Catalog, a comprehensive repository of large language models available at Uber. This platform allows users to explore detailed specifications, expected use cases, cost estimations, and performance metrics for each model. Within the Gen AI Playground, users can select any model from the catalog, craft custom prompts, and adjust parameters, such as temperature, to evaluate the model’s responses during the ideation stage.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;c448354b-dd5a-4c51-a2ea-ea2dbcd39d4f&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXe7EvU-FNtBJuwXVWyMAruW8BJQ9v0q-cFRqxpoQ22ctq7Y8hnILHp5j_tBMjG9WKx0M2F6QXD0bUWDb-30XdlW_GNPoYBy_F7LBirv5q2IaJTRuM9IV2WF4hyaLHyCjREDTHnktDXK2GD_ABLdVQ9ZBhIW?key=zCghPvr7E6rGgGY5x5OXaQ&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 2: The model catalog UI.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9f156d2a-e307-4018-816b-86f8566f9868&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;592d6aab-fbbd-4e2d-94f6-86e138f792f9&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXdtu3U7VhGD9p4zaJcUAHvWTkBfbGFQOubBOuRw2r9C7pXBHbECRibmJ9MlkbkAIndAU1tIVZSOUEdu1F_JirRlwgWkw3iT2Av8dG4nctl67hMOd5jandMMvzyF_rQf7FdXAvrbhJL8woWVXCscZo3E06Yg?key=zCghPvr7E6rGgGY5x5OXaQ&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 3: The prompt template edit page.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;8db44de9-ddd7-4fad-bfcb-17bfc44ed350&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;5f2bf7b0-f410-4ab4-bd57-a8479a0c3341&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;61df70e2-6fe2-48ee-85e6-ca6e36e19efc&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-prompt-template-creation&#34;&gt;Prompt Template Creation&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9529b325-db14-4b77-8f62-8010c78f67ba&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The prompt toolkit prompt builder automatically creates prompts for users and helps them discover advanced prompting techniques tailored to their specific AI use case. The auto-prompt builder, built on top of the Langfx framework (an Uber internal Langfx service built on top of LangChain&lt;sup&gt;™&lt;/sup&gt;), follows these steps:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f5b948f8-e353-4e66-a241-301d5723ffd7&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;strong&gt;1. Prompt engineering best practices:&lt;/strong&gt; Incorporates the best practices for context RAG retrievers.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9ac781ce-84e0-4983-86c4-bd2982b837f7&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;strong&gt;2. Prompt builder instructions and examples: &lt;/strong&gt;Provides a template listing detailed instructions and few-shot examples to help LLMs ‌craft user prompts.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;395f1476-49fa-4f39-96a5-4923cb5529b8&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;strong&gt;3. Leverage LLM models:&lt;/strong&gt; Utilizes LLM models to auto-generate suggested prompts, acting as a creator to assist users in prompt generation.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;ce761521-f084-4da5-adc7-89a8ec52f17b&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-advanced-prompt-guidance&#34;&gt;&lt;br&gt;Advanced Prompt Guidance&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d2fc4119-5d30-477d-96f1-bdcd0724dd1c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The prompt builder leverages these principles to create prompts.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure data-wp-block-name=&#34;core/table&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ff3309d7-3851-46b8-acb1-521d955d370a&amp;quot;,&amp;quot;hasFixedLayout&amp;quot;:true,&amp;quot;head&amp;quot;:[],&amp;quot;body&amp;quot;:[],&amp;quot;foot&amp;quot;:[]}&#34; class=&#34;wp-block-table&#34;&gt;&lt;table class=&#34;has-fixed-layout&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Technique&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;Prompt Principle for Instructions&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;CoT (Chain of thought), introduced by &lt;a href=&#34;https://arxiv.org/abs/2201.11903&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Wei et al. (2022)&lt;/a&gt;&lt;/td&gt;&lt;td&gt;CoT (Chain-of-thought) prompting enables complex reasoning capabilities through intermediate reasoning steps. You can combine it with few-shot prompting to get better results on more complex tasks that require reasoning before responding.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Auto-CoT (Automatic Chain of Thought), introduced in &amp;nbsp;&lt;a href=&#34;https://arxiv.org/abs/2210.03493&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Zhang et al. (2022)&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Use leading words like ‌“think step by step.” Specify the steps required to complete a task. This is an approach to eliminate manual efforts by leveraging LLMs with the “Let’s think step by step” prompt to generate reasoning chains for demonstrations one by one.&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Prompt chaining&lt;/td&gt;&lt;td&gt;Prompt chaining can be used in different scenarios involving several operations or transformations.&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ToT (Tree of thought)&lt;/td&gt;&lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/2305.10601&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Yao et el. (2023)&lt;/a&gt; and &lt;a href=&#34;https://arxiv.org/abs/2305.08291&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Long (2023)&lt;/a&gt; proposed Tree of Thoughts (ToT). This framework generalizes ‌chain-of-thought prompting and encourages the exploration of thoughts that serve as intermediate steps for general problem-solving with language models.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Automatic prompt engineer&lt;/td&gt;&lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/2211.01910&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Zhou et al. (2022)&lt;/a&gt; proposed APE (automatic prompt engineering), a framework for automatic instruction generation and selection. The instruction generation problem is framed as natural language synthesis addressed as a black-box optimization problem using LLMs to generate and search over candidate solutions.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Multimodal CoT prompting&lt;/td&gt;&lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/2302.00923&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Zhang et al. (2023)&lt;/a&gt; proposed a multimodal chain-of-thought-prompting approach. Traditional CoT focuses on the language modality. In contrast, Multimodal CoT incorporates text and vision into a two-stage framework. The first step involves rationale generation based on multimodal information. This is followed by the second-phase, answer inference, which leverages the informative generated rationales.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;7d4c3a44-a2d5-4dca-93a6-527fa0f80e77&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-revision-control&#34;&gt;&lt;br&gt;Revision Control&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7611356a-d6fc-4894-99f8-16a8a2cdc3a0&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Prompt template iteration follows code-based iteration best practices. Users could modify the instruction and model parameters for testing responses, testing it out with a test dataset. A code review is needed for every iteration of the prompt template. Once approved and landed, a new prompt template revision gets created.&lt;br&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6b59a79e-89db-4649-bf2f-593c2b605e98&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Furthermore, for the production serving flow, users may prefer not to have their prompt template in the production altered with each update. A user could inadvertently introduce errors in their revisions; therefore, deploying the prompt template should follow a structured process.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;978ac977-7920-40b8-8ea1-5670bc8c7943&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We support a system where the prompt template can be deployed under an arbitrary deployment name, allowing users to “tag” their preferred prompt template for the production model. This prevents ‌an accidental change of prompt template in their production service. This deployed prompt template is disseminated through ObjectConfig, which is an internal configuration deployment system at Uber. With this safe deployment with explicit deployment revision tagging and universal configuration synchronization (with the ObjectConfig system), the user application in the production service fetches the prompt template upon its deployment.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;72690eee-bf6e-4d91-8167-bcad93e434f9&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXcPH2IGjaHaYkc7Qbn_Gcdg7h73GsmrPzcFBVieuq9lGqo5ob5l5GVWqxuDlqZC6r6MsGrm3RNrF8tmrn-94OR5kkmtlWYIVCIblLFkCfVe6nJaob6XsQQQ2D143KSiktcl8AEbw12OzvKjEImev2sPVocq?key=zCghPvr7E6rGgGY5x5OXaQ&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 4: Prompt template revision control.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e3f48ea1-be88-4be1-ac1e-c2d71fdde322&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;a href=&#34;https://lucid.app/lucidchart/862dd0ba-26c2-4131-b00b-c6f0607dbfbf/edit?page=7&amp;amp;v=15814&amp;amp;s=448&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f2f6f4e6-9c3e-44e8-9f9b-09a52b1eb958&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;424bd0fe-808a-4347-8ea5-b0968f6b3c92&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-prompt-template-evaluation-nbsp&#34;&gt;Prompt Template Evaluation&amp;nbsp;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;101a1fff-401c-40b5-bcde-0825ce0bf52a&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Several components are involved in the process to evaluate the performance of one or more prompt templates along with their LLM models, model parameters, and context.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;03ea20ce-7042-4bcb-b0a8-9d7a1a6248c3&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;For evaluation mechanisms, two methods can be employed:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e81cb057-6e8e-4a93-a53d-1eef0b74fdf4&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Using an LLM as the evaluator (LLM as Judge).&lt;/strong&gt; This type of evaluation is particularly useful for tasks where subjective quality or linguistic nuances are important, such as generating text that should be engaging, persuasive, or stylistically specific.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Using custom, user-defined code to assess performance.&lt;/strong&gt; Specific metrics and criteria are coded and used to automatically evaluate the performance of an LLM. This method is beneficial because it can be highly tailored to the specific aspects of performance one wishes to measure.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7ae607be-77fd-4226-a2d3-24f12dd9066f&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The toolkit also offers prompt templates. The evaluation prompt template is a straightforward, user-friendly prompt template detailing the instructions for evaluation. It includes brief examples, metrics, and the format for responses. The production prompt template offers the same, but for production use. This template gets hydrated during production runtime and is the one for performance evaluation.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;39fd0734-4583-4b45-ba0f-1d65253ce663&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;When evaluating prompt templates, input dataset options include a golden dataset with labeled data specifically for evaluation and a dataset derived from production traffic, also used for evaluation purposes. Each template gets evaluated considering its specific instructions, context, involved models, and model parameters.&lt;br&gt;&lt;br&gt;To provide a high-level comparison of different prompt templates’ effectiveness, aggregated metrics get generated by applying the prompt templates across a large dataset.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;205ac0fc-636b-4600-a700-d96573505a28&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXfidNj0hbdndvXHIB124H4Y9WEzqtllzC1R3d-DfNadLV0Ae49YU23NU0KY_RmX0G3LUC2Pb9J-pX9HBW8TC48ucniAYaidv-KlOidE0wlHUOz4KydXdbZf1rja1I_uKKWKsAKE4t0j-RUC5DZqSc0YPCG2?key=zCghPvr7E6rGgGY5x5OXaQ&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 5: Prompt evaluation flow.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;cbc4b816-3e33-43f4-81e6-2c3a4dbcb420&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;87111bff-7d08-4d7d-b3f0-6056433091f0&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;756646f6-ae74-4d87-bdcf-30218bc99080&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-use-cases-at-uber&#34;&gt;Use Cases at Uber&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;498a6343-858c-4f6d-80a1-bcd945a2a36a&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Let’s see how the prompt toolkit works for some production use cases Uber.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;d4aaaf66-bfcb-4f91-9606-93c1053e0412&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-offline-llm-service-nbsp&#34;&gt;Offline LLM Service&amp;nbsp;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;bd5d7874-0980-4dc1-a09f-7355e4d94fb1&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The LLM Batch Offline Generation pipeline facilitates batch inference for large-scale LLM response generation. For example, this pipeline can be integral to the rider name validation use case, which verifies the legitimacy of consumer usernames. It assesses all existing usernames in Uber’s consumer database as well as those of newly registered users, employing an asynchronous method to process and generate responses for usernames in batches.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;cbad961e-b4d4-4dde-ac3c-3862834326a2&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In &lt;a href=&#34;https://www.uber.com/blog/from-predictive-to-generative-ai/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;MA Studio&lt;/a&gt;, setting up this Offline Generation pipeline is straightforward: users select the relevant dataset and input it as data. The prompt template is dynamically hydrated with this dataset. For instance, if the user’s prompt template includes the sentence “Is this {{user_name}} a valid human name?” the pipeline extracts the user_name column from each data row, using it to generate a custom prompt for each entry.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;1f81b66b-1039-49b6-aaf2-1acc040edc2d&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXc-6Yd_prNMs2rmCxa5MgLa2gc42RsIJ_u4GewFsoEj6PoxSGmItv-8o04yFAl_MRQPiBsr376eZ6XKNeNPX3-QMqY86pTJIMcCjB6mNsgn1YWVudBhwYAluyQ9QJZqmU7Hx7c0XslTe1H_a0BnVMYO6xI?key=zCghPvr7E6rGgGY5x5OXaQ&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 6: Prompt offline generation.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;dc3cb8ce-6df5-4f45-b707-d10d22b005bc&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;88887d03-d00a-4c34-a278-e1f38e503b34&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-online-llm-service&#34;&gt;&lt;br&gt;Online LLM Service&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;29d8506e-c759-4634-ae99-4a9d8a14b60c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The prompt template contains dynamic placeholders that need to get replaced with specific runtime values provided by the caller. The caller is responsible for hydrating and passing the values that must get substituted on the placeholders. The model’s hyperspace service currently supports substitution using Jinja-based template syntax. At the moment, we only handle the substitution of string types.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0bfd2754-99e3-438c-9dc0-ed258536cb36&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;This service also supports fan-out capabilities across prompts, templates, and models. The fan-out capabilities can be divided into:&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;bccb522e-36ec-459d-b4e3-501761a0eb8b&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Templates: &lt;/strong&gt;The API templates include formatting the payload into a vendor-specific API structure from the generic data model we exposed from the service. Multiple templates, such as chat completion and text completion templates, are supported.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Prompts and Models: &lt;/strong&gt;The prompts are pinned to a specific model and template. The service fetches the prompt and call the genAI APIs with the required model and template parameters for execution.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7c14d858-b787-4ee2-b707-0f96a43af69a&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Let’s explore the above functionalities through a summarization use case. A contact is a support ticket used to contact a customer support agent. There are scenarios where multiple agents can handle a contact. In this case, the new agent receiving the handoff must either go through the ticket to understand the context or ask the customer to reiterate the problem. Usually, it’s the former. To solve this, we provide a summary to the agents when there’s a handoff from one agent to another.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;be530b64-38dc-4be9-8ab4-f0d5355ba5b1&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXcRypOfJB3oF0Mz9dz7e1y2WQkZdXKhAMYmIaEvUJWh2wCCX8EMwIUoFP8jMyihLUsu-PIC980aeARb53xdcTvKH74bAba5T22uE4tHMAi4M3hKUshjk_KLrzSSG62r0eVkiThFW0Igpd-k1wMH0rsmKDGT?key=zCghPvr7E6rGgGY5x5OXaQ&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 7: Prompt execution and summarization flow.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f6e92da4-70ec-4b20-8b0f-8f0a52150b8e&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;90c930a0-a992-4901-8007-5433411ebb50&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;4d78b852-e5c7-4885-8e69-80c6dc008fbf&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-monitoring-nbsp&#34;&gt;Monitoring&amp;nbsp;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2cb39b1b-6ba3-4dfb-9c19-8d3ab432a36e&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Monitoring measures the performance of the production prompt template used in production. The purpose is to track the regression and performance of the currently prompt template in production. A daily performance monitoring pipeline runs towards production traffic to evaluate the performance. Metrics include latency, accuracy, correctness, and more to monitor each prompt template production iteration.&lt;br&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;4c3b9783-1e40-4ba5-8cd8-ccd41a9185ce&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;An MES dashboard gets refreshed daily with performance monitoring metrics. Refer to the &lt;a href=&#34;https://www.uber.com/blog/enhancing-the-quality-of-machine-learning-systems-at-scale/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;MES blog post&lt;/a&gt; for more information about the MES dashboard&lt;a href=&#34;https://www.uber.com/blog/enhancing-the-quality-of-machine-learning-systems-at-scale/&#34;&gt;.&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;96067813-bed7-4ac5-bd12-06ef0e6ab27f&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:1,&amp;quot;hash&amp;quot;:&amp;quot;a8a354c4-350e-440f-b08a-278402412a71&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-conclusion&#34;&gt;Conclusion&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2fe53062-4ac0-49a1-9be1-8bd8c99f2ba9&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The prompt engineering toolkit outlined in this blog represents a comprehensive framework designed to enhance the interaction with and utilization of LLMs across various stages of development and production at Uber. From the initial exploration of LLM capabilities in the Gen AI Playground to the detailed iteration and creation of prompt templates, the toolkit facilitates a dynamic environment for both novice and expert users to harness the power of LLMs effectively.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a2be8b6c-ff04-4ae3-aed4-56620fa71e06&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The architecture of the toolkit allows for a systematic approach to prompt design, incorporating advanced guidance techniques and robust evaluation methods to ensure the production of high-quality, effective prompts. The structured lifecycle of prompt templates—from development through to production usage and monitoring—ensures that each template is rigorously tested and optimized for performance.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e0788b5d-a8c7-47ed-9fe2-cf3cc29dc50a&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;As a next step, we hope to evolve the prompt toolkit to integrate with online evaluation and with RAG for evaluation and offline generation.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;a5cfb2c3-e1f4-48d8-9c70-33469d3a4805&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;LangChain&lt;sup&gt;™&lt;/sup&gt; is a trademark of LangChain Inc., registered with the United States Patent and Trademark Office.&amp;nbsp; All other product and company names mentioned herein may be trademarks of their respective owners. The use of these marks does not imply any affiliation with or endorsement by their respective owners.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;71f5a7bd-1692-4de5-af7a-cb4fb0efa5ec&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;Cover Photo attribution: “Artificial Intelligence &amp;amp; AI &amp;amp; Machine Learning” by mikemacmarketing. This image was marked with a CC BY 2.0 license:No modifications.&lt;/p&gt;】&lt;H1 data-wp-block-name =“ core/heading” data-wp-block =“ {”级别“：1，“哈希”：“ 017052cc-70c9-​​4332-bf04-69fa7f4a8be8”}&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ b7bc8d85-9cd1-4d57-9148-418-41ce69ac3084”，“ dropcap”：dropcap“：dropcap”：false}“&gt;对于获得准确和相关的模型（大型）的必不可少的提示（false}”是必不可少的。提示设计使机器学习的新手能够以最小的开销来控制模型输出。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;705831fa-9844-4560-85b6-fd321c40fb8c&#34;,&#34;dropCap&#34;:false}&#34;&gt;To facilitate rapid iteration and experimentation of LLMs at Uber, there was a need for centralization to seamlessly construct prompt templates, manage他们，并针对各种基础LLM处决以利用LLM支持任务。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/core”“ data-wp-block =” {“ hash”：“ C5C2A0C0-9608-4C58-4C58-BB46-9085E37F53E2”，“ dropcap”：dropcap“：false}”&gt;以满足这些及时的工程工具工程，鼓励迅速的工具工程师，以满足这些需求，以满足这些需求，以满足这些需求。它还提供了功能，可以通过从抹布（检索效果生成）和运行时特征数据集获得上下文丰富这些模板。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coragraph” data-wp-block =“ {” hash&#39;：“ 97444062-6F99-6F99-4121-9750-6216787EB03C”，“ dropcap”，“ dropcap”：dropcap“：false}”&gt;集中式及时的及时及时的及时及时的工程构造，构成系统的构造，有效性地构成有效的效果，有效地，有效地启用了有效的效果，有效地，有效性地，有效地，有效地， （LLM推论）和及时响应的评估。此外，需要进行版本控制，协作和强大的安全措施（幻觉检查，标准化评估框架和安全政策），以确保负责任的AI使用。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/encor” data-wp-block =“ {” hash&#39;：“ F7750AA8-383B-47F3-9C15-138D5EC4FDE2”，“ dropcap”，“ dropcap”，“ dropcap“：false}”&gt;此博客对及时的构建工具，构建工具，构建工具，构建工具，并构建工具，并构建工具，并构建工具，在Uber。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name =“ core/saparator” data-wp-block =“ {” hash&#39;：“ 96Debefe-ace7-409b-8951-2492f11910ae”，“ obacity”，“ obacity”：“ alpha-channel”} class =“ wp-block-separator =”&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name =“ core/heading” data-wp-block =“ {” hash&#39;：“ F7AF8FE7-CA53-4A6F-85FA-96476BC5C987”，“ LEVEL”：2} class =“ class =” wp-block-block-heading to&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 3F5CADC6-3359-40C4-B372-C4C25DBEFC20”，“ dropcap”，“ dropcap”，“ dropcap”：false}在Uber可以：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name =“ core/list” data-wp-block =“ {“ hash”：“ 928707A3-C450-4996-B7E1-418B86170C4E”，“订购”，“ false”：false“：false”：false，“值&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;探索所有可用的LLM模型&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;搜索并发现所有提示模板&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;创建和更新带有访问控制的提示模板和调整参数&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;通过代码审核和修订控制&lt;/li&gt;在提示模板上迭代&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data data-wp-block-name =“ core/list-item” data-wp-block =“ []“&gt;通过应用抹布和使用不同的LLM模型的LLM推理来生成批处理离线生成&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;通过测试数据集和在线评估评估提示模板&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;监视器提示模板在生产中使用LLMS的提示模板性能检测回归，并通过系统跟踪&lt;/li&gt;不断地监视LLM质量&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data data-wp-block-name =“ core/saparator” data-wp-block =“ {” hash&#39;：“ 45261A03-0EAE-4B6D-B559-0BD759-0BD75F8C18A2”，“ obisitical&#xA;&#xA;&#xA;&#xA;&lt;H2 Data-Wp-block-name =“ core/head”“ data-wp-block =” {“哈希”：&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 9fa592ff-e9ed-4F0-4F0D-8316-2F46B6521D81”，“ dropcap”：dropcap“：false}”&gt;迅速的工程生命阶段包括两个阶段：开发阶段：开发阶段：生产阶段和生产阶段和生产阶段。在每个阶段中，用户可以与及时工具包进行交互。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data data-wp-block-name =“ core/heading“ data-wp-block =” {“ latve”：3，“哈希”：&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/encor” data-wp-block =“ {“ hash”：“ f6708f16-5ec8-4e02-a6f2-a6f2-c2c5ac178c3e”，“ dropcap”，“ dropcap”，“ dropcap”：false}“&gt;开发阶段具有三个perase：llm exploration，inders interapor，inder interaportration，inder interplate temaper，和interplape template intape temaper，loughtiation &lt;br&gt; extruation。与模型目录和Uber的Genai游乐场进行互动。模型目录是一个模型存储库，其中包含所有可用的LLM型号及其相应的描述，指标和用法指南。 Genai游乐场可帮助用户探索Uber上可用的不同LLM的功能，并测试其用例适用性。用户探索来自模型催化的可用LLM型号OG和测试LLM在Genai Playground中的提示。&lt;br&gt; &lt;br&gt;在及时的模板迭代阶段，用户查明其特定业务需求，收集样本数据，使用LLM模型和数据集创建/分析/测试提示，评估响应，并根据需要进行修订。自动宣传建议提示创建，因此用户无需从头开始创建及时的模板。使用及时的模板目录，用户可以探索并重复使用现有的提示模板。在此阶段，用户执行持续的实验和迭代。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coraph”“ data-wp-block =” {“ hash”：“ 67D4E70C-2DD5-42C4-9C4-9C37-9C37-62D46BBB771D7”，“ dropcap”，“ dropcap”：dropcap“：fals}”&gt;在评估阶段中，用户对提示的效率进行了测试，并通过测试效率，并通过测试效率，并通过测试效率。它可以利用LLM作为法官或利用基于定制代码的LLM评估器来评估及时模板的性能。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;20ee8da5-f987-4c8f-b0b6-aae132cbdd13&#34;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-productionization-stage&#34;&gt;&lt;br&gt;Productionization Stage&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 8e60077b-f21-4ff3-b097-c436879b56c9”，“ dropcap”，“ dropcap”：dropcap“：false}”在生产阶段中，用户仅通过评估模板来进行评估&lt;threSner &lt;thebr&gt; nerth intranbr &lt;threSner &lt;threSner &lt;brollyde &lt;brollyde &lt;brollyde &lt;brollyde &lt;br&gt;在生产环境中，收集有关系统使用的数据。这些数据可以为该过程提供进一步的增强。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data data-wp-block-name =“ core/saparator” data-wp-block =“ {” hash&#39;：“ 96CB832A-2766-4BC0-BC0-BFEB-6DBF8C1333C66”，“ opcity”，“ opcity”，“ opcity”：“ alpha-channel” class =“ class =” wp-block-separator-separator-and and-alpha and-alpha and-alpha and-alpha and-alpha and-alpha and and-alpha and-alpha n&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name =“ core/heading” data-wp-block =“ {” hash&#39;：“ 78d40108-f817-4352-99da-371078275090”，“ clact”，“：2}” class =“ WP-Block-Heading” wp-block-Heading“ ID =” id =“ H-Architect&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;d2737e54-b66d-486d-9e3f-0a89a2cc823a&#34;,&#34;dropCap&#34;:false}&#34;&gt;With the prompt engineering toolkit, various components interact to facilitate LLM model deployment, prompt evaluation, and batch inference responses. &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ A5D33A03-0D98-0D98-40CF-B989-21886B5FE273”，“ dropcap”：dropcap“：false}”&gt;该工具基组成了一个及时的模板ui/sdk的工具，并将其组成。提示模板UI/SDK与API集成，例如&lt;em&gt; getapi &lt;/em&gt;和&lt;em&gt;执行API &lt;/em&gt;。这些与从LLM模型目录部署的LLM模型接口。模型和提示存储在ETCD和UCS（对象配置存储）中，然后将其用于离线生成管道和及时的模板评估管道。 &lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ align”：“ center”，“ hash”：“ 4A29A44E-CF91-4CB2-A032-A032-ADF6E2223A059” src =“ https://lh7-rt.googleusercontent.com/docsz/ad_4nxdeq8776xewryq9znj4iiiiiiiiiiii uijldhx-7a-7a-ufcfkm_j0anwkypptn9aglumbrcw d3ypltgnkerfi2pyxeszdx2o8znrinqoabalfew8wfdjdfeq_e6p_qm-hluxxwetm__w-i23uevenkm53pwz_3vgnx？ alt =“” referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ wp- element-caption”&gt;图1：提示工程工具包的概述。&lt;/figcaption&gt; &lt;/figcaption&gt; &lt;/fige&gt; &lt;/div&gt;&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 6895502e-4910-422c-422c-422c-afef-79ccab8a6420”，“ dropcap”，“ dropcap”：false} href =“ https://lucid.app/lucidchart/cbde0172-054f-4f-4f-4f6a-94cc-133e6b3208d4/edit?page=0&amp;v=1087&amp;s = 612”&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;91c4de30-e36b-4097-816a-8158637d10e2&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name =“ core/heading” data-wp-block =“ {” hash&#39;：“ D2B25754-4A62-4EBC-912F-912F-77F4849E849E8D7E”，“级别”，“级别”：2} class =“ class =” wp-block-heading =“ wp-block-heading”&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 59b93f45-511e-407C-8AAB-6551C6E971BE”，“ dropcap”：dropcap“：false}”&gt;用户首先与及时的工具kit在AI ai plantogend中相互作用。 AI Playground Gen旨在与模型目录无缝接口，该目录是Uber可用的大型语言模型的全面存储库。该平台允许用户探索每个模型的详细规格，预期用例，成本估算和性能指标。在Gen AI游乐场中，用户可以从目录中选择任何型号，工艺自定义提示和调整参数（例如温度），以评估概念阶段的模型响应。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ align”：“ center”，“ hash”：“ C4448354B-DD5A-4C51-4C51-A2EA-A2EA-A2EA-EA2DBCD39D4F”，“ src =“ https://lh7-rt.googleusercontent.com/docsz/ad_4nxe7evu-fntbjuwxvwymaruw8bjq9v0q-cfrqxpoq2222ctq7y8hnilhp5j_tbmjg9wk X0M2F6QXD0BUWDB-30XDLW_GNPOYBY_F7LBIRV5Q2IAJTRUM9IV2WF4HYYCJREDTHNKTDXK2GDXK2GD_ABLD_ABLDVQ9ZBHIW？ alt =“” referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ wp- element-caption”&gt;图2：模型目录UI。&lt;/figcatpion&gt; &lt;/figapation&gt; &lt;/fig&gt; &lt;/div&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 9f156d2a-e307-4018-816b-816b-816b-86f8566566f9868”，“ dropcap” dropcap“：dropcap”&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;图data-wp-block-name =“ core/image”数据 - wp-block =“ {“ align”：“ center”，“ hash”：“ 592D6AAB-FBBD-4E2D-94F6-86E138F792F9“ src =“ https://lh7-rt.googleusercontent.com/docsz/ad_4nxdtu3u3u7vhgd9p4zajcuahvwtkbfbfbfbfbfqubboubbourw2r9c7pxbhbhbhbhbhbecribmj9mlkbkain dau1tivzsouedu1f_jirrlwgwkw3it2av8dg4nctl67hmod5jandmmvzyf_rqf7fdxavrbhjl8wowvxcsczo3e06yg？ alt =“” referrerpolicy =“ no-treferrer”&gt; &lt;figcaption class =“ wp- element-caption”&gt;图3：提示模板编辑页面。&lt;/figcaption&gt; &lt;/figcaption&gt; &lt;/figife&gt; &lt;/div&gt;&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 8db44de9-dddd7-4fad-bfcb-17b-17b-17bfc444ed350”，“ dropcap”，“ dropcap”：false}&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;5f2bf7b0-f410-4ab4-bd57-a8479a0c3341&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data data-wp-block-name =“ core/heading” data-wp-block =“ {“ hash”：“ 61DF70E2-6FE2-6FE2-6FE2-48EE-85E-85E6-CA6E36E19EFC”，“ LEVEL”：2} class class =“ WP-Block-Heading”&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/encor”“ data-wp-block =” {“ hash”：“ 9529b325-DB14-4B77-4B77-8F62-8010C78F67BA”，“ dropcap”，“ dropcap”：dropcap“：false}”&gt;迅速的工具迅速构成构建的提示级别以上的用户均应提示他们的用户和技术提示，并将某些提示端子验证为技术和技术。在Langfx框架顶部建造的自动推出构建器（Uber Internall Langfx在Langchain &lt;Sup&gt;™&lt;/sup&gt;上构建的Uber Internal Langfx服务）遵循以下步骤：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ F5B948F8-E353-4E66-A241-A241-301D5723FFD7”，“ dropcap”，“ dropcap”：false}&gt; &lt;strong&gt; &lt;strong&gt; &lt;strong&gt; 1。及时工程最佳实践：&lt;/strong&gt;纳入上下文抹布猎犬的最佳实践。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 9AC781CE-84E0-4983-86C4-BD2982B837F7”，“ dropcap”，“ dropcap”：false}“：false}”&gt; &lt;strong&gt; &lt;strong&gt; 2。提示构建器的说明和示例：&lt;/strong&gt;提供了一个模板列出详细说明和几个示例，以帮助LLMS ‌Craft用户提示。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 395F1476-49FA-4FA-4F39-96A5-4923CB55529B8”，“ dropcap”：dropcap“：falle}”：fals}&gt; &lt;strong&gt; &lt;strong&gt; &lt;strong&gt; 3。利用LLM型号：&lt;/strong&gt;利用LLM模型自动生成建议的提示，充当创造者，以帮助用户及时生成。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;H3 Data Data-Wp-block-name =“ core/tearing” data-wp-block =“ {”级别“：3，“ hash”：“ CE761521-F084-4DA5-ADC7-ADC7-89A8EC52F17B”}&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ D2FC4119-5D30-477D-96F1-BDCD0724DD1C”，“ dropcap”，“ dropcap”：false}密码创建提示。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;&lt;图data-wp-block-name =“ core/table” data-wp-block =“ {” hash&#39;：“ FF3309D7-3851-46B8-ACB1-521D955555D370A”，“ hasfixedlayout”： class =“ has-fixed-layout”&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt; &lt;td&gt; &lt;strong&gt;技术&lt;/strong&gt; &lt;/td&gt; &lt;td&gt; &lt;td&gt; &lt;td&gt; &lt;strong&gt;及时的说明&lt;/strong&gt; &lt;/strong&gt; &lt;/td&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/tr&gt; &lt;tr&gt; &lt;tr&gt; &lt;td&gt; cot（of Thought），由&lt;a href =“ href =” href =“ href =” href =“ target =“ _ blank” rel =“ noreferrer noopener”&gt; wei等。 （2022）&lt;/a&gt; &lt;/td&gt; &lt;td&gt; cot（theque of-thought）提示通过中间推理步骤实现复杂的推理能力。您可以将其与几乎没有弹药的提示结合起来，以在响应之前需要推理的更复杂的任务上获得更好的结果。&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; auto-cot（自动思想链），在&lt;a href =“ https：//arxiv.org/arxiv.org/abs/abs/2210.03493” _____________的no https：//arxiv.org.org/arxiv.org.orgs =“ al。 （2022）&lt;/a&gt; &lt;/td&gt; &lt;td&gt;使用诸如‌“逐步思考”之类的主词。指定完成任务所需的步骤。这是一种通过“逐步思考”提示来消除LLM来消除手动努力的方法，以一个逐一产生推理链。 &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;提示链接&lt;/td&gt; &lt;td&gt;提示链接可以在涉及多种操作或转换的不同情况下使用。 &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; tot（思想之树）&lt;/td&gt; &lt;td&gt; &lt;a href =“ https://arxiv.org/abs/2305.10601” target =“ _ black” （2023）&lt;/a&gt;和&lt;a href =“ https://arxiv.org/abs/2305.08291” target =“ _ blank” rel =“ noreferrer noopener”&gt; long（2023）&lt;/a&gt;提议的思想树（tot）。该框架概括了them的链接，并鼓励人们探索思想，这些思想是与语言模型一起解决一般问题的中间步骤。&lt;/td&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;自动提示工程师&lt;/td&gt; &lt;td&gt; &lt;a href = &lt;a href =“ NOOPENER“&gt; Zhou等。 （2022）&lt;/a&gt;拟议的APE（自动及时工程），这是一种自动指令生成和选择的框架。指令生成问题被构成自然语言综合，用LLMS使用LLMS来解决和搜索候选解决方案。&lt;/td&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;tr&gt; &lt;td&gt;多模态COT提示&lt;/td&gt; &lt;td&gt; &lt;td&gt; &lt;td&gt; &lt;a href = rel =“ noreferrer nooopener”&gt; Zhang等。 （2023）&lt;/a&gt;提出了一种多模式的提出促进的方法。传统的COT专注于语言方式。相比之下，多模式COT将文本和视觉融合到两个阶段的框架中。第一步涉及基于多模式信息的理由生成。接下来是第二相，答案推理，它利用了信息生成的理由。&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/table&gt; &lt;/figie&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name =“ core/pearting” data-wp-block =“ {＆quot; latve“：3，“ hash”：“ 7D4C3A44-A2D5-4DCA-93A6-527FA0F80E77”}“ class =” wp-block-heading“ id =” h-revision-control“ h-revision-control”&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 7611356A-D6FC-4894-99F8-16A8A2CDC3A0”，“ dropcap”：dropcap“：false}”&gt;提示模板遵循代码的迭代迭代最佳实践。用户可以修改用于测试响应的指令和模型参数，并使用测试数据集对其进行测试。提示模板的每次迭代都需要进行代码审查。批准并着陆后，创建了一个新的提示模板修订。&lt;br&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph“ data-wp-block =” {“ hash”：“ 6B59A79E-89DB-4649-BF2F-593C2B605E98”，“ dropcap”：dropcap“：false}”&gt; forthermore forthers note fort and frols toffers offers toffers offers toffers toffers toffers forts proffect and profort tomplate tofernept，否则使用了这些提示。用户可以无意间在修订中引入错误；因此，部署提示模板应遵循结构化过程。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;978ac977-7920-40b8-8ea1-5670bc8c7943&#34;,&#34;dropCap&#34;:false}&#34;&gt;We support a system where the prompt template can be deployed under an arbitrary deployment name, allowing users to “tag” their preferred prompt template for the production 模型。这样可以防止其生产服务中迅速模板的意外更改。该部署的提示模板通过ObjectConfig传播，这是Uber的内部配置部署系统。使用此安全部署具有明确的部署修订标签和通用配置同步（使用ObjectConfig系统），生产服务中的用户应用程序在其部署时将提示模板获取。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ align”：“ center”，“ hash”：“ 72690eee-bf6e-4d91-4d91-8167-bcad93e4343434f9”，“ src =“ https://lh7-rt.googleusercontent.com/docsz/ad_4nxcph2igjahaykc7qbn_gcdg7h73gsmrpzmrpzcfbvieuq9lgqqo5ob5b5l5l5gvwqwqxudlqzczczczc6r 6MSGRM3RNRF8TMRN-94OR5KKMTLWYIVCIBLLFKCFVE6NJAAB6XSSQQQQQQQQQQQQQQQQQQQQQQQQQQ2D143KSIKTCL8AEAEBW1OZVKJEIMEVKJEIMEVKJEIMEV2SPVOCQ？ alt =“” referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ wp- element-caption”&gt;图4：提示模板修订控制。&lt;/figcaption&gt; &lt;/figcaption&gt; &lt;/figife&gt; &lt;/div&gt;&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ E3F48EA1-BE88-4BE1-AC1-AC1E-C2D71FDDDE322”，“ dropcap”，“ dropcap”：false}&gt; &lt;a href =“ https://lucid.app/lucidchart/862DD0BA-26C2-4131-B00B-C6F0607DBFBF/EDIT？&#xA;&#xA;&#xA;&#xA;&lt;hr data data-wp-block-name =“ core/saparator” data-wp-block =“ {” hash&#39;：“ F2F6F4E6-9C3E-44E-44E8-9F9B-09A52B1EB958”，“ opacity”，“ opacity”，“ opacity”：r has-alpha-enannel-opacity“&gt;&#xA;&#xA;&#xA;&#xA;&lt;H2 Data-Wp-Block-name =“ core/phay”“ data-wp-block =” {“ hash”：“ 424BD0FE-808A-4347-4347-8EA5-B0968F6B3C92”，“ LEVEL”：2} class =“ class =” wp-block-head =“ wp-block-heading =” id-plate template template template template template templuation-h2 templuation-h2-nbluation-h2-nbluation-h2 nbluation &lt;&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coraph” data-wp-block =“ {“ hash”：“ 101A1FFF-401C-401C-401C-40B5-BCDE-0825CE0BF52A”，“ dropcap”，“ dropcap”：false}“：false}”&gt;在该过程中涉及多个组件，以评估一个或更多提示性的参与者，以及他们的提示剂和更高的验证效果。上下文。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph” data-wp-block =“ {” hash&#39;：“ 03EA20CE-7042-4BCB-BCB-B0A8-9D7A6248C3”，“ dropcap”，“ dropcap”：false}&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name =“ core/list” data-wp-block =“ {“ hash”：“&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt;使用llm作为评估器（llm作为判断）。&lt;/strong&gt;这种类型的评估对于主观质量或语言的细微差别而言特别有用，例如重要的文本很重要，例如应该与persuasive compugains getgegage，persuasive，stylistimalsime comgange congegage，persuasive，stylistimalsime &lt;/stylistimalsime。&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt;使用自定义的，用户定义的代码来评估性能。&lt;/strong&gt;特定的指标和标准已编码，并用于自动评估LLM的性能。此方法是有益的，因为它可以高度量身定制为衡量绩效的特定方面。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 7AE607BE-77FD-4226-4226-A2D3-24F12DD9066F”，“ dropcap”，“ dropcap”：false}&gt;该工具工还提供了及时的模板。评估提示模板是一个直接，用户友好的提示模板，详细介绍了评估的说明。它包括简短的示例，指标和响应格式。生产及时模板提供了相同的功能，但用于生产。该模板在生产运行时得到水合，并且是进行性能评估的模板。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 39fd0734-4583-4583-4b45b45-ba0f-1d65253ce6663”，“ dropcap”，“ dropcap”，“ dropcap”：false}“：false}”&gt;评估提示模板的选项，指定数据数据列表，该数据指定数据列表，该数据列表的数据列表，该数据列表数据列表，该数据列表数据列表数据列表，goldenepation DataDation DataDation DataDation Data Datation Datative生产流量，也用于评估目的。考虑其特定说明，上下文，涉及模型和模型参数的评估。&lt;br&gt; &lt;br&gt;提供对不同及时模板有效性的高级比较，通过在大型数据集中应用及时模板来生成汇总的指标。&lt;/p&gt; &lt;/p&gt;。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;图Data-wp-block-name =“ core/image” data-wp-block =“ {“ align”：“ center”，“ hash”：“ 205AC0FC-636B-4600-A700-A700-D96573505A28”，“ ALT”：“}”} class =“ AlignCenter”&gt; &lt;img &lt;img decoding =“ async” async“ async” src =“ https://lh7-rt.googleusercontent.com/docsz/ad_4nxfidnj0hbdndvxhib124h4y9wezqtllzc1r3d-dfnadlv0ae49yu23nuu23nu0ky_rmx0g 3LUC2PB9J-PX9HBW8TC48UCNIAYAIDV-KLOIDE0WLHUOZ4KYDXDBZF1RJA1I_UKKKWKSAKE4T0J-RUC5DZQSCSSC0YPCG2？ alt =“” referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ WP-元素caption”&gt;图5：提示评估流程。&lt;/figcaption&gt; &lt;/figcaption&gt; &lt;/figie&gt; &lt;/div&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {” hash&#39;：“ CBC4B816-3E33-43F4-81E6-2C3A4DBCB420”，“ dropcap”，“ dropcap”：dropcap“：false}”&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name =“ core/saparator” data-wp-block =“ {” hash&#39;：“ 87111BFF-7D08-4D7D-B3F0-6056433091F0&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name =“ core/heading” data-wp-block =“ {” hash&#39;：“ 756646f6-ae74-4d87-bdcf-30218bc99080”，“ level”：2} class =“ class =” wp-block-heading =“ wp-block-heading”&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph” data-wp-block =“ {“ hash”：“ 498A6343-858C-4F6D-80A1-BCD945A2A36A”，“ dropcap”：dropcap“：false}”&gt;让我们查看如何为某些生产案例提供某些生产情况。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;H3 Data Data-Wp-block-name =“ core/thead” data-wp-block =“ {”级别“：3，“ hash”：“ D4AAAF66-BFCB-4F91-9606-9606-93C1053E0412”}&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coragraph” data-wp-block =“ {” hash“：” BD5D7874-0980-4DC1-A09F-735E4D94FB1“，” dropcap“：dropcap”：dropcap“：false}”&gt; llm batch Offline offline feneration popenteal for intere tepressiates blm scccate batscate interefers batchant batchate interefers batchands batchate inscate interfery batchate inscate。例如，该管道可能是Rider名称验证用例的组成部分，该案例验证了消费者用户名的合法性。它通过使用异步方法来评估Uber消费者数据库中的所有现有用户名以及新注册的用户的所有用户名。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ cbad961e-b4d4-4dde-ac3c-3862834326a2”，“ dropcap”，“ dropcap”：false} href =“ https://www.uber.com/blog/from-predictive-to-generative-ai/” target =“ _ black” rel =“ noreferrer noopener”&gt; ma Studio&gt; Ma Studio &lt;/a&gt;，设置此离线生成管道很简单：用户选择相关的数据集和输入IT IT和数据。使用此数据集将提示模板动态水合。例如，如果用户的提示模板包含句子“这{{user_name}}是有效的人类名称吗？”管道从每个数据行中提取user_name列，使用它为每个条目生成自定义提示。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ align”：“ center”，“ hash”：“ 1f81b66b-1039-49b6-49b6-aaf2-1acc04040edc2d“ src =“ https://lh7-rt.googleusercontent.com/docsz/AD_4NXC-6YD_PRNMS2RMCXA5MGLA2GC42GC42RSIJ_U4GEWFSOEWFSOEJ6POXSGMITV-MITV-8O04YFAL_FAL_M RQPIBSR376EZ6XKNENPX3-QMQY86PTJIMCCJB6MNSGN1YWVUDBHWYALUYQ9QJZQMU7HX7C0XSLTE1H_A_A_A_A0BNVMYO6XI？ alt =“” referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ WP-元素caption”&gt;图6：提示离线生成。&lt;/figcaption&gt; &lt;/figcaption&gt; &lt;/figife&gt; &lt;/div&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ dc3cb8ce-6df5-4f45-b707-d107-d107-d10d22b005bc”，“ dropcap”，“ dropcap”：false}&#39;&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;H3 Data-wp-block-name =“ core/thead” data-wp-block =“ {”级别“：3，“哈希”：“ 88887D03-D00A-4C34-A278-E1F38E503B34”} class =“ wp-block-Heading”&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 29d8506e-c759-4634-AE99-4A99-4A9D8A14B60C”，“ dropcap”：dropcap“：false}”&gt;提示模板包含需要在特定时间内换取特定时间的动态占位符。呼叫者负责保湿并通过必须替代占位符的价值。该模型的Hyperspace服务目前支持使用基于Jinja的模板语法替换。目前，我们仅处理替代字符串类型。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph“ data-wp-block =” {“ hash”：“ 0BFD2754-99E3-438C-9DC-9DC-9DC0-ED258536CB36”，“ dropcap”：dropcap“：false}”&gt;此服务还支持跨粉丝跨越范围的粉丝范围，并支持跨越跨的提示性。扇出的功能可以分为：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name =“ core/list” data-wp-block =“ {“ hash”：“ BCCB522E-36EC-459D-B4E3-501761A0EB8B”，“订购”：false&#39;：false“：false”：false，“ values，” values，“} class =” class =“ wp-block-list =” wp-block-list =“”&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt;模板：&lt;/strong&gt; API模板包括将有效载荷格式化为我们从服务中暴露的通用数据模型中将有效载荷格式化为特定于供应商的API结构。支持多个模板，例如聊天完成和文本完成模板。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt;提示和模型：&lt;/strong&gt;提示将固定在特定的模型和模板上。该服务获取提示，并使用所需的模型和模板参数调用Genai API。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 7C14D858-B787-4EE2-B707-0707-0F96A43AF69A”，“ dropcap”，“ dropcap”：false}“：false}”&gt;通过Summarization用途探索上述功能。联系人是用于与客户支持代理联系的支持票。在某些情况下，多个代理可以处理接触。在这种情况下，接收交接的新代理必须通过机票来了解上下文，或者要求客户重申问题。通常是前者。为了解决这个问题，我们在从一个代理到另一个代理商的交接时向代理提供了摘要。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ align”：“ center”，“ hash”：“ BE530B64-38DC-4BE9-8B4BE9-8AB4-F0D5355B1”，“ src =“ https://lh7-rt.googleusercontent.com/docsz/ad_4nxcrypofjb3of0mz9dz7e1y2wqkzdxkkzdxkhamymiaevujwh2wccx wccx8emwiuofp8jmyihlu SU-PIC980AEARB53XDCTVKH74BABA5T22UE4THMAI4M3HKUSHJK_KLRZSSG62R0EVKITHFKITHFW0IGPD-K1WMH0RSMKDGT？ alt =“” referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ wp- element-caption”&gt;图7：提示执行和摘要流。&lt;/figcaption&gt; &lt;/figcaption&gt; &lt;/fig&gt; &lt;/div&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ F6E92DA4-70EC-4B20-4B20-8B0F-8B0F-8F0A52150B8E”，“ dropcap”，“ dropcap”：dropcap“：false}”&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data data-wp-block-name =“ core/saparator” data-wp-block =“ {” hash&#39;：“ 90C930A0-A992-4901-4901-8007-5433411EBB50&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name =“ core/head”“ data-wp-block =” {“ hash”：“ 4D78B852-E5C7-4885-8E69-8E69-80C6DC008FBF”，“级别”级&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 2CB39B1B-6BA3-4DFB-9C19-8D3AB432A36E”，“ dropcap”：dropcap“：false}”&gt;监视生产及其生产模板的性能。目的是跟踪生产中当前及时模板的回归和性能。每日性能监控管道朝着生产流量进行评估。指标包括延迟，准确性，正确性等，以监视每个提示模板生产迭代。&lt;br&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph” data-wp-block =“ {” hash&#39;：“ 4C3B9783-1E40-4BA5-8CD8-8CD8-CCD41A9185CE”，“ dropcap”，“ dropcap”：false}“&gt; false}”&gt; Mes仪表板每天都会通过性能进行重新调查。请参阅&lt;a href =“ https://www.uber.com/blog/enhancing-the-the--cequality-of-machine-learning-systems-asystems-at-scale/” target =“ _ _ black” rel =“ noreferrer noopener” href =“ https://www.uber.com/blog/enhancing-the-the--quality-of-machine-learning-systems-at-scale/”&gt;。&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;96067813-bed7-4ac5-bd12-06ef0e6ab27f&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h1 data-wp-block-name =“ core/tearing” data-wp-block =“ {”级别“：1，“ hash”：“ A8A354C4-350E-440F-B08A-278402412A71“}” class =“ wp-block-heading” id =“ h-conconclusion”&gt;结论&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/encor” data-wp-block =“ {“ hash”：“ 2FE53062-4AC0-49A1-49A1-9BE1-8BD8BD8C99F2BA9”，“ dropcap”，“ dropcap”，“ dropcap”：false}“&gt;迅速的工程工具中的综合框架，都在整体上进行了综合框架，并具有综合的框架，并具有一致性的范围，并具有一定的互动，并具有一致性的范围。和在Uber的生产。从对Gen AI游乐场中LLM功能的最初探索到详细的迭代和及时模板的创建，该工具包为新手和专家用户都有效地利用LLMS的动力。&lt;/p&gt;。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coraph”“ data-wp-block =” {“ hash”：“ A2BE8B6C-FF04-4AE3-AED4-56620FA71E06”，“ dropcap”，“ dropcap”，“ dropcap”：false}“：false}”&gt;启动工具的架构，以促进系统的构建，以促进高级指南，并建立了高级指南，并建立了高级技术，并允许使用高级技术。高质量的有效提示。及时模板的结构化生命周期（从开发到生产用法和监视）都可以确定每个模板经过严格测试和优化的性能。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coragraph” data-wp-block =“ {“ hash”：“ E0788B5D-A8C7-47ED-9FE-9FE2-CF3CC29DC50A”，“ dropcap”，“ dropcap”，“ dropcap”：false}&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ fontsize”：“ small”，“ hash”：“ A5CFB2C3-E1F4-48D8-9C70-334699D3A4805 class =“ hasmall-font-size”&gt; langchain &lt;sup&gt;™&lt;/sup&gt;是Langchain Inc.的商标，已在美国专利和商标办公室注册。  本文提到的所有其他产品和公司名称可能是其各自所有者的商标。这些标记的使用并不意味着与其各自所有者的任何隶属关系或认可。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ fontsize”：“ small”，“ hash”：“ 71F5A7BD-1692-1692-4DE5-AF7A-CB4FB4FB4FB0EFA5EC” mikemackmarketing。该图像用2.0许可证标记了CC：无修改。&lt;/p&gt;</description>
      <pubDate>Tue, 26 Nov 2024 06:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Adopting Arm at Scale: Bootstrapping Infrastructure】大规模采用手臂：自举基础设施</title>
      <link>https://www.uber.com/blog/adopting-arm-at-scale-bootstrapping-infrastructure/</link>
      <description>【&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:1,&amp;quot;hash&amp;quot;:&amp;quot;bb7d3c98-e4dc-4f97-b42e-ba2a3a75a60f&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-arm-a-new-era-for-cloud&#34;&gt;Arm: A New Era for Cloud&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7b5013fe-2504-44e6-b7a3-546e76062a65&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In February 2023, Uber embarked on a strategic journey: migrating from on-premise data centers to the cloud with Oracle&lt;sup&gt;®&lt;/sup&gt; Cloud Infrastructure and Google Cloud Platform&lt;sup&gt;™&lt;/sup&gt;. While the scale of such a migration was already daunting, Uber added another ambitious goal: integrating Arm-based computers into a fleet dominated by x86. Why? To reduce costs, improve price-performance, and secure hardware flexibility in an unpredictable supply chain environment.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;790963c6-d1fb-4371-955f-00492c67dfc4&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;What followed was a journey of technical challenges and cross-team collaboration as Uber adopted Arm-based hosts into the fleet. This blog is the first in a two-part series that describes that journey and focuses on the technical challenges we faced when transitioning into a multi-architecture environment.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d5e9f0b0-5655-4181-8319-9be0574dcc73&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a39c60c9-039e-4b17-b9c3-353614e880d4&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-oci-strategy&#34;&gt;OCI Strategy&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;aba29113-b00a-48a9-b3e7-0ca268ea26f5&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;To understand our motivations for moving to Arm-based hosts, it’s important first to understand OCI’s (Oracle Cloud Infrastructure) motivation for adopting Ampere&lt;sup&gt;®&lt;/sup&gt; Computing processors in their data centers. Energy efficiency is a key factor driving all hyperscale cloud service providers to use Arm processors. Arm’s reputation for low-power designs in mobile devices has extended to data center products, with Ampere processors setting a new benchmark for performance per watt. This efficiency reduces energy costs and provides OCI with significant savings. Another less obvious benefit is space densification. Ampere processors enable higher compute density within a smaller data center footprint, delivering superior performance at the rack level while minimizing real estate and infrastructure costs.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;60c63730-8ff1-4b92-beab-e019557f27bf&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;So, what motivates Uber? Our decision is rooted in the pursuit of hardware and capacity diversity. As part of our commitment to becoming a zero-emissions company, adopting high-performing, energy-efficient hosts is a critical step toward reducing our environmental footprint. The energy and space savings realized by OCI translate directly into better price-performance and cost optimizations for Uber, helping us achieve our goals of sustainability and operational efficiency.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c051ada2-da2d-4d98-beb1-d615f98db86e&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;70caa79b-4860-4ccd-86f2-b37bd215f2c4&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-adoption-phases&#34;&gt;Adoption Phases&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;4b8d6a4d-d774-450f-a4e6-23746e77c3d6&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Uber’s adoption of a multi-architecture environment was a complex process requiring multiple layers of bootstrapping, careful planning, and execution across many teams. The effort was divided roughly into seven phases, as shown in Figure 1.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1104594,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;79ecc812-4d2f-4cf0-b9b3-2afab90ebf73&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1005&#34; height=&#34;131&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/02/overviewwithoutlogos-17394207847479.svg&#34; alt=&#34;&#34; class=&#34;wp-image-1104594&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 1: Arm adoption phases.&amp;nbsp;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e4ef9927-a65e-4088-b27e-60b1b0b82de2&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a5f95c01-ef52-45cc-b0a5-2e1d439a0517&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Host Readiness:&lt;/strong&gt; Ensuring host-level software is compatible with Arm.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Build Readiness:&lt;/strong&gt; Updating the build pipeline to support multi-architecture container images.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Platform Readiness:&lt;/strong&gt; Enhancing deployment systems with architecture-specific placement constraints and safeguards.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;SKU Qualification:&lt;/strong&gt; Assessing hardware reliability and performance to determine if the SKU is feasible.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Workload Readiness:&lt;/strong&gt; Making code repositories and container images compatible with Arm.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Adoption Readiness:&lt;/strong&gt; Establishing testing and monitoring protocols to validate workload performance on Arm.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Adoption:&lt;/strong&gt; Executing the migration, workload by workload, to Arm-based environments.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;cf9c718c-9824-473e-96b1-eec17245a90b&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;While adoption primarily followed a sequential process, certain phases were conducted concurrently, enabling us to accelerate progress where possible. The following sections explore the challenges of bootstrapping our infrastructure on Arm-based hosts.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9a946ed6-584f-4642-b921-6f1458a4553d&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6d3fca2c-aac9-4afc-b6e6-09fb4cd6cf90&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-initial-goal&#34;&gt;Initial Goal&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6674da7e-1c9b-4e0c-b332-05d6efc1324e&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;It started with a simple goal: build a single service for Arm and deploy it to our Arm-based hosts using our existing deployment platform. However, this seemingly simple goal unraveled into a more profound challenge, as every layer of our infrastructure, from the hosts to the build pipeline responsible for creating container images, was deeply tied to x86.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f8566678-79b4-495f-91ef-0ef155b17a31&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;cdae5c44-a580-4ed8-9b43-772509e3dc20&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-host-readiness&#34;&gt;Host Readiness&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;20487771-0601-482a-b52c-0773a953435d&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Before building and deploying services, we had to ensure our hosts were ready to support Arm. This meant starting from the ground up. The first step was to create an Arm-compatible host image, which includes the operating system, kernel, and all the essential host-level software that powers Uber’s most foundational infrastructure components.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6c0b6e83-b5ec-4849-90e0-ea3048685813&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Every component had to be rebuilt carefully, tested, and validated to ensure it’d work correctly with Arm-based hardware. Once the host image was in place, we could begin integrating Arm hosts into our fleet and bootstrap our build platform to support the next step in the journey: building services for Arm.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f91a1d8a-e529-4a7c-a51c-627a7ab89e02&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;4b33ea42-5f94-4597-8946-e9f0e107a13f&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-building-services-for-arm&#34;&gt;Building Services for Arm&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c592f9ba-e889-469e-b66c-ce3804811f35&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;At first, the task sounded straightforward, but as we began to pull on that thread, it quickly became a more complex challenge due to the many layers of our build infrastructure that were strongly tied to a single architecture.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;fba04952-4b6e-490c-b706-5adb04c5b7a0&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;For years, Uber’s container image stack relied on a centralized Buildkite&lt;sup&gt;™&lt;/sup&gt; pipeline powered by &lt;a href=&#34;https://www.uber.com/en-DK/blog/makisu/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Makisu&lt;/a&gt;, which is an efficient and lightning-fast container image builder optimized for single-architecture builds. While Makisu served us well, it had a critical limitation: it couldn’t cross-compile for Arm. This meant we couldn’t just flip a switch to produce Arm-compatible container images. Instead, we had to rethink how container images were built across the fleet.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0f01b3f3-97e1-4b59-b9a7-c3d5d23f4ee1&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;To make things worse, we have more than 5,000 services whose build processes are tightly coupled to Makisu, and many of them have several custom build steps tightly coupled to Makisu’s build flow. So, migrating away from Makisu was a substantial undertaking.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;eccb8767-4664-4b64-899b-259f4353a738&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;73f34659-5357-4360-958b-33ed89a98e00&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-evolving-the-build-pipeline&#34;&gt;Evolving the Build Pipeline&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;b37c49a9-1248-4afa-8c74-df930fe15581&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Instead of attempting to migrate away from Makisu, we decided to evolve our build pipeline by introducing a new container image builder capable of building for Arm. The plan was to use the new container image builder to create an Arm-compatible version of Makisu. Once we had that, Makisu could be used to build Arm versions of all other services. However, as we’ll see, bootstrapping Makisu on Arm started a chain reaction of bootstrapping other components.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2e7e407c-c56e-4270-ac56-37d9c8ff9b93&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We chose Google&lt;sup&gt;®&lt;/sup&gt; Bazel&lt;sup&gt;™&lt;/sup&gt; as the container image builder to address the bootstrap challenge of building Makisu for Arm. This decision was driven by Bazel’s ability to build container images for architectures different from the host it runs on by leveraging the &lt;a href=&#34;https://github.com/bazel-contrib/rules_oci&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OCI container image rules&lt;/a&gt;. Additionally, since our language monorepos already rely on Bazel, this choice allowed us to leverage existing expertise and tooling.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;3b6b3cf4-bd70-4ae5-bc9c-1c9e5544ac43&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;3bd11b01-d0ee-42eb-86b5-81496682a1b4&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-breaking-the-circular-dependency-nbsp&#34;&gt;Breaking the Circular Dependency&amp;nbsp;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f05239d8-a432-4a2d-bd96-409d0df26cea&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;With Bazel integrated into the container image build pipeline, we could now build Makisu for Arm. However, Makisu runs on Buildkite, our primary CI system, and Buildkite runs on our Stateful Platform, &lt;a href=&#34;https://www.uber.com/en-DK/blog/odin-stateful-platform&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Odin&lt;/a&gt;.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;029fb603-5071-4cf9-ba67-42c9bb0ccb05&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In addition, Odin relied on a collection of foundational host agents for logging, metrics, networking, and more. These critical foundation components are deployed to every host in our fleet, and all these components were built using Makisu.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;96309a80-3a34-477b-88e4-4b29e4c13386&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;This meant that before we could fully bootstrap Makisu for Arm, we had to untangle and rebuild every piece of this puzzle. Each component had to be migrated from being built with Makisu to being built with Bazel instead. It was a cascade of dependencies that required a lot of coordination.&amp;nbsp; First, the host agents were migrated, then the components of the stateful platform, then our Buildkite stack, and finally, Makisu itself. It was a significant effort, but we tackled each layer systematically using Bazel’s multi-architecture capabilities, transforming our infrastructure one piece at a time.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1104600,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;183f25fb-5e89-46f9-8e71-fa7dac7b8211&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1060&#34; height=&#34;444&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/02/buildstack-17394210019516.svg&#34; alt=&#34;&#34; class=&#34;wp-image-1104600&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 2: Components for bootstrapping the build stack.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;09bfe58e-5b53-48c7-a672-478777d9b0b7&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;a href=&#34;https://lucid.app/lucidchart/7eaacaba-5ba5-41eb-9cf7-aa4730262953/edit?invitationId=inv_f8da6fbd-1220-43a5-8368-c3f2975d8a6d&amp;amp;page=0_0#&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6f0ddbaf-0973-4ce6-8874-a9233386f14c&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;4819400b-7e62-4e72-ab2d-4c69b4a0c3c0&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-distributing-the-build-process&#34;&gt;Distributing the Build Process&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;15879445-d019-4b27-8450-580cbf49133f&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Once Makisu and the entire Buildkite stack were up and running on Arm-based hosts, we took the next big step: advancing our build setup by setting up a distributed build pipeline for container images.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2a87a2ca-bea6-4cf6-b778-da5601a34fd1&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;This new pipeline multiplexes the build process across Arm and x86 hosts, running Makisu natively on each architecture. Once images have been built, the pipeline triggers a last step that merges the x86 and Arm images into a unified multi-architecture container image using a multi-architecture container manifest.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1104602,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;a01cf1a8-3f5a-4468-9e73-1b146f392681&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1142&#34; height=&#34;202&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/02/distributedbuildpipeline-17394210469874.svg&#34; alt=&#34;&#34; class=&#34;wp-image-1104602&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 3: Distributed build pipeline for container images.&lt;br&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;92003044-1813-4407-b1bd-8adac9281438&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;49c9e547-e83f-4e4a-8ee3-5750d47bc1eb&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Adopting the multi-architecture build pipeline provided significant advantages. It allowed us to avoid the extensive effort of migrating every container image build process from Makisu to Bazel, which had been deemed a substantial undertaking. Additionally, building images natively for both x86 and Arm enables us to support workloads that can’t cross-compile. Moreover, native builds eliminated the overhead associated with cross-compilation, reducing build times and helping us stay within our build latency SLAs.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;79f04c26-7582-4b2d-bc17-f650f8966e07&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;However, adopting multi-architecture builds wasn’t without its trade-offs. One significant downside was the doubling of build costs, as container images needed to be built for both architectures. With more than 400,000 container image builds per week (at the time of writing), this additional cost quickly became substantial. However, despite the increase in build costs, the unit economics of transitioning to Arm still made it worthwhile. Furthermore, multi-architecture builds enable us to perform a gradual adoption as it allows the same image tag to be deployed across both Arm and x86 hosts.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e3b711b1-d94d-4ff7-b7c0-d4a6cf691493&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a866bd12-cc6c-4fb5-a65d-a6a1378c01f8&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-deploying-the-first-services&#34;&gt;Deploying the First Services&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e2af6829-1dbe-4f90-a862-2164b4c057f8&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Now that we could build images with multiple architectures, the next challenge was to ensure that our &lt;a href=&#34;https://www.uber.com/en-DK/blog/up-portable-microservices-ready-for-the-cloud/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;stateless&lt;/a&gt; and &lt;a href=&#34;https://www.uber.com/en-DK/blog/odin-stateful-platform/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;stateful&lt;/a&gt; platforms could leverage other architectures.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c72fe98f-02f0-427b-9034-91cdbe672d35&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;At Uber, we take great care in gradually introducing changes to our production environment, gradually increasing the scope of changes. This applies to image upgrades and hardware changes alike. For Arm, we had to extend these systems to support architecture-specific placement. This enabled fine-grained control over which architecture a service runs on, allowing us to transition from x86 to Arm with great care. Furthermore, we built a safety mechanism into our platforms that’d automatically revert the Arm placement constraint and fall back to x86 if a single architecture image was deployed for a service.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7ac736fc-75b2-4b45-a165-35018025dea9&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;With these placement constraints and safety mechanisms in place, we reached a significant milestone: the first services were successfully built, scheduled, and running on Arm-based hosts. It was a moment of joy, proof that Arm could coexist alongside x86 in our infrastructure.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;4e87ff86-155e-45d8-a8f0-ec816cf9ce88&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:1,&amp;quot;hash&amp;quot;:&amp;quot;5ec0b0ad-24d5-441c-a252-037eb39093ac&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-conclusion&#34;&gt;Conclusion&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f0c74471-47e8-4bd7-9851-4794db840be8&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Our work was far from over. The initial success of bootstrapping the infrastructure was only the start of a larger journey. Adapting 5,000 services to run on a multi-architecture platform would require more effort and ingenuity.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;efc41ad5-f55e-4504-854e-719ee862b8eb&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In the &lt;a href=&#34;https://www.uber.com/blog/adopting-arm-at-scale-transitioning-to-a-multi-architecture-environment/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;next part of this blog series&lt;/a&gt;, we’ll dive into the adoption process in greater detail and explain the initiatives and strategies implemented to support a transition of this scale.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ace71ac0-6cc8-438e-875a-2f75a7cd22d4&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;82a125a5-6bdb-4bfe-be9e-bb50ba354952&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-acknowledgments&#34;&gt;Acknowledgments&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;5879952d-ad54-4792-a557-4318a36ff7e5&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The successful adoption of Arm-based hosts at Uber was made possible through the collective efforts of numerous internal and external contributors, including our partners at Oracle Cloud Infrastructure (OCI), Google (GCP), Ampere, and Arm. The authors would like to thank all who worked on this initiative and helped make it a success.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;faa5ff8f-3a56-42ff-9a68-2438f731d34f&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;Cover Photo Attribution: The cover photo was generated using OpenAI ChatGPT Enterprise&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;d733d2e7-a812-4156-a147-4d6a1dc6d655&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Ampere&lt;sup&gt;®&lt;/sup&gt;, Altra, and the A and Ampere logos are registered trademarks or trademarks of Ampere Computing.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;aed525e7-0206-463e-bcb9-5376365931b5&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Buildkite&lt;sup&gt;™&lt;/sup&gt; is a trademark of Buildkite Pty. Ltd.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;357cc5e6-8bf3-4a40-87e9-c9e59aba7dc0&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Google Cloud Platform&lt;sup&gt;™&lt;/sup&gt; and Bazel&lt;sup&gt;™&lt;/sup&gt; are trademarks of Google LLC and this blog post is not endorsed by or affiliated with Google in any way.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;51b03bba-3668-4abc-a6ba-7f82872007c9&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Oracle&lt;sup&gt;®&lt;/sup&gt; is a registered trademark of Oracle and/or its affiliates. No endorsement by Oracle is implied by the use of these marks.&lt;/em&gt;&lt;/p&gt;】&lt;h1 data-data-wp-block-name =“ core/head”“ data-wp-block =” {“ level”：1，“哈希”：“ BB7D3C98-E4DC-4F97-B42E-B42E-BA2A3A75A60F”&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/core/段落” data-wp-block =“ {” hash&#39;：“ 7B5013FE-2504-44E6-B7A3-546E3-546E76062A65”，“ dropcap”，“ dropcap”：false} Oracle &lt;sup&gt;®&lt;/sup&gt;云基础结构和Google Cloud Platform &lt;Sup&gt;™&lt;/sup&gt;。尽管这种迁移的规模已经令人生畏，但Uber增加了另一个雄心勃勃的目标：将基于ARM的计算机集成到由X86主导的车队中。为什么？为了降低成本，提高价格效果并在不可预测的供应链环境中确保硬件灵活性。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 790963c6-d1fb-4371-4371-955f-00492c67dfc4”，“ dropcap”：dropcap“：false}”&gt;随后是技术挑战和交叉团队的旅程，并采用了交叉团队的旅程。该博客是两部分系列中的第一个，它描述了这一旅程，并重点介绍了我们过渡到多建筑环境时面临的技术挑战。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data data-wp-block-name =“ core/saparator” data-wp-block =“ {” hash&#39;：“ D5E9F0B0-5655-4181-4181-8319-9BE0574DCC73”，“ obisitical&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name =“ core/head” data-wp-block =“ {” hash&#39;：“ A39C60C9-039E-4B17-B17-B9C3-353614E8880D4”，“级别”，“级别”：2} class =“ clast =” wp-block-heading =“ wp-block-heading”&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coragraph” data-wp-block =“ {” hash&#39;：“ ABA29113-B00A-48A-48A9-B3E7-0CA268EA26F5”，“ dropcap”，“ dropcap“：false} Ampere &lt;sup&gt;®&lt;/sup&gt;其数据中心中的计算处理器。能源效率是推动所有Hyperscale Cloud服务提供商使用ARM处理器的关键因素。 ARM在移动设备中的低功率设计声誉已扩展到数据中心产品，Ampere处理器为每瓦的性能设定了新的基准。这种效率降低了能源成本，并为OCI提供了可观的节省。另一个不太明显的好处是空间致密化。 Ampere处理器可以在较小的数据中心足迹内实现更高的计算密度，在机架水平上提供卓越的性能，同时最小化房地产和基础设施成本。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 60c63730-8ff1-4b92-beab-e019557bf27bf”，“ dropcap”，“ dropcap”：false}我们的决定源于追求硬件和容量多样性。作为一部分我们致力于成为一家零排放公司的承诺，采用高性能，节能的主机是减少我们环境足迹的关键一步。 OCI实现的能源和空间节省直接转化为优先的价格效果和成本优化，帮助我们实现了可持续性和运营效率的目标。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-data-wp-block-name =“ core/saparator” data-wp-block =“ {” hash&#39;：“ C051ADA2-DA2D-4D98-BEB1-D615F98DB86E“&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name =“ core/head” data-wp-block =“ {” hash&#39;：“ 70CAA79B-4860-4CCD-4CCD-86F2-B37BD215F2C4”，“ LEVEL”：2} class =“ class =” wp-block-head =“ wp-block-heading”&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/encor”“ data-wp-block =” {“ hash”：“ 4B8D6A4D-D774-450F-A4E6-23746E77777C3D6”，“ dropcap”：dropcap“：false}”&gt; uber对多层进行了多层的操作。大约将努力分为七个阶段，如图1所示。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ id”：1104594，“ sizeSlug”：“大”，“ linkdestination”：“ none”，“ align”，“ align”：“ center”，“ hash”：“ 79ecc812-4d22f-4cf-4cf-4cf-4cf0-b9b3b3-b9b3-b9b3-b9b3-2afab9-bf73-bf73” class =“ AlignCenter size-large”&gt; &lt;img loading =“ lazy” dododing =“ async” width =“ 1005” height =“ 131” src =“ https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80，quality=80,oRERR = REDRECT，format cerformat = auto/wp-content/uploads/2025/02/02/02/overviewwithoutvithoutlogos-173942074777.s. class =“ wp-image-11104594” referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ wp- element-caption”&gt;图1：手臂采用阶段。 &lt;/figcaption&gt; &lt;/fige&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ E4EF9927-A65E-4088-B27E-60B27E-60B1B1B0B82DE2”，“ dropcap”，“ dropcap”：dropcap“：dropcap”：false}&gt; &lt;/p&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name =“ core/list” data-wp-block =“ {“ hash”：“ A5F95C01-EF52-45CC-B0A5-2E1D439A0517”，“订购”：false“：false”：false，“ valse，” valut，“ values”} class =“ class =” wp-block-list =“ wp-block-list”&gt;“”&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt;主机准备就绪：&lt;/strong&gt;确保主机级软件与ARM兼容。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt;构建准备就绪：&lt;/strong&gt;更新构建管道以支持多架构容器图像。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt;平台准备就绪：&lt;/strong&gt;使用特定于体系结构的放置约束和保障增强部署系统。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt; SKU资格：&lt;/strong&gt;评估硬件可靠性和性能如果SKU可行，则终止。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt;工作负载准备就绪：&lt;/strong&gt;制作代码存储库和与ARM兼容的容器图像。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt;采用准备就绪：&lt;/strong&gt;建立测试和监视协议以验证ARM上的工作负载。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt;采用：&lt;/strong&gt;执行迁移，工作负载，工作量到基于ARM的环境。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coraph” data-wp-block =“ {” hash&#39;：“ CF9C718C-9824-473E-96B1-EEC17245A90B”，“ dropcap”：dropcap“：false}”&gt;，在某些阶段进行了某些阶段，对某些阶段进行了操作，从而启用了某些阶段，从而启用了某些阶段，从而启用了某些阶段，从而启用了某些阶段，从而启用了某些阶段，从而启用了这些阶段，从而启用了某些阶段，从而启用了这些阶段。以下各节探讨了在基于ARM的主机上引导我们的基础架构的挑战。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;9a946ed6-584f-4642-b921-6f1458a4553d&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name =“ core/heading” data-wp-block =“ {” hash&#39;：“ 6D3FCA2C-AAC9-4AFC-B6E6-09FB4CD6CF90”，“ LEVEL”：2} class class =“ WP-Block-Heading”&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph” data-wp-block =“ {” hash&#39;：“ 6674DA7E-1C9B-4E0C-B332-05D6EFC1324E”，“ dropcap”，“ dropcap”：dropcap“：false}”&gt;以简单的目标开始：启动一个简单的服务，以构建单个武器平台，以我们的武器为基础，并在我们的武器基础上启动了我们的现有宿主。但是，这个看似简单的目标揭开了一个更深刻的挑战，因为从主机到负责创建容器图像的构建管道的每一层都与x86息息相关。&lt;/p&gt;。&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;f8566678-79b4-495f-91ef-0ef155b17a31&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name =“ core/heading” data-wp-block =“ {“ hash”：“ cdae5c44-a580-4ed8-9b43-772509e3dc20&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph“ data-wp-block =” {“ hash”：“ 2048771-0601-482A-B52C-077773A953435D”，“ dropcap”：dropcap“：false}”&gt;，我们必须在建立和部署服务之前，我们必须支持我们的主持人。这意味着从头开始。第一步是创建一个兼容ARM兼容的主机图像，其中包括操作系统，内核和所有为Uber最基本的基础架构组件提供动力的主机级软件。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 6C0B6E83-B5EC-4849-90E0-EA3048685813”，＆quot; dropcap“：false}”&gt;必须仔细地重建每个组件，经过测试和验证，以确保其与基于ARM的硬件正确使用。主机图像到位后，我们可以开始将ARM主机集成到我们的舰队中，并引导我们的构建平台以支持旅途中的下一步：为ARM建造服务。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name =“ core/saparator” data-wp-block =“ {“ hash”：“ F91A1D8A-E529-4A7C-A7C-A51C-A51C-627A7AB89E02”，“ opitical&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name =“ core/heading“ data-wp-block =” {“ hash”：“ 4B33EA42-5F94-4597-4597-8946-E9F0E107A13F”，“级别”：2}&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/core/段落” data-wp-block =“ {“ hash”：“ c592f9ba-e889-469e-b66c-ce3804811f35”，“ dropcap”，“ dropcap”：false}“&gt;首先，我们的任务是直接的，我们开始了许多层，很快就开始了，我们很快就开始了构建的构建。与单个架构密切相关的基础架构。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coragraph” data-wp-block =“ {” hash&#39;：“ FBA04952-4B6E-490C-B706-5ADB04C5B7A0”，“ dropcap”，“ dropcap”：dropcap“：false}”&gt;多年来，Uber的集装箱图像堆&lt;/sup &lt;/sup &lt;/sup &lt;/sup &lt;/sup &lt;/ href =“ https://www.uber.com/en-dk/blog/makisu/” target =“ _ blank” rel =“ noreferrer noopener”&gt; makisu &lt;/a&gt;，这是一个有效且闪电 -  fast-fast-fast-fast的容器映像构成单架的构建。尽管Makisu为我们提供了很好的服务，但它具有关键的限制：它无法交叉编译。这意味着我们不能仅仅翻转开关来产生与臂兼容的容器图像。取而代之的是，我们不得不重新考虑如何在舰队之间建造容器图像。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;0f01b3f3-97e1-4b59-b9a7-c3d5d23f4ee1&#34;,&#34;dropCap&#34;:false}&#34;&gt;To make things worse, we have more than 5,000 services whose build processes are tightly coupled to Makisu, and many of them have several custom build steps tightly加上Makisu的构建流。因此，从Makisu迁移是一项艰巨的任务。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-data-wp-block-name =“ core/saparator” data-wp-block =“ {” hash&#39;：“ ECCB8767-4664-4B64-4B64-899B-259F435353A738”，“ obisitical&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;73f34659-5357-4360-958b-33ed89a98e00&#34;,&#34;level&#34;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-evolving-the-build-pipeline&#34;&gt;Evolving the Build Pipeline&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {” hash&#39;：“ B37C49A9-1248-4AFA-8C74-DF930FE15581”，“ dropcap”，“ dropcap”：false}从Makisu到Makisu，我们决定通过引入一个能够为ARM建造的新容器图像构建器来发展我们的构建管道。该计划是使用新的容器图像构建器创建兼容臂兼容的Makisu版本。一旦有了，Makisu就可以用于构建所有其他服务的ARM版本。但是，正如我们将看到的那样，在手臂上进行的Makisu引导Makisu开始了引导其他组件的链反应。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 2e7e407c-c56e-4270-AC56-AC56-AC56-37D9C8FF9B93”，“ dropcap”，“ dropcap”：dropcap“：false}”&gt;我们选择Google &lt;sup&gt;&gt; bu&gt; bu&gt; bu&gt; bu&gt; bu&gt; buip&gt; buip&gt; buip&gt; bu&gt;建立Makisu为ARM的Bootstrap挑战。这项决定是由巴泽尔（Bazel）构建容器图像的能力来驱动的，该体系结构与主机不同，通过利用&lt;a href =“ https://github.com/bazel-com/bazel-contrib/rules_oci” target =“ _ black” res nooreferrer noopener noopener&gt; oci Contuler“&gt; oci Contuler”&gt; oci contuler Image Image &lt;/a&gt;。此外，由于我们的语言MonorePos已经依赖Bazel，因此这种选择使我们能够利用现有的专业知识和工具。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;3b6b3cf4-bd70-4ae5-bc9c-1c9e5544ac43&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;H2 DATA DADA-WP-BLOCK-NAME =“ core/head”“ data-wp-block =” {“ hash”：“ 3BD11B01-D0EE-42EB-86B-86B5-814966682A1B4”，“ LEAVE&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ F05239D8-A432-4A2D-BD96-409D0D0DF26CEA”，“ dropcap”：dropcap“：false}”&gt; bazel与Bazel组成了集装式构建Pipeline，我们可以构建pipeline，我们可以构建Armisusususu。但是，Makisu在我们的主要CI系统上运行，并且BuildKite在我们的状态平台上运行&lt;a href =“ https://www.uber.com/en-dk/blog/blog/odin-s-stateful-platform- &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;029fb603-5071-4cf9-ba67-42c9bb0ccb05&#34;,&#34;dropCap&#34;:false}&#34;&gt;In addition, Odin relied on a collection of foundational host agents for logging, metrics, networking, and more.这些关键的基础组件被部署到我们车队中的每个主机，所有这些组件都是使用makisu构建的。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coragraph“ data-wp-block =” {“ hash”：“ 96309a80-3a34-477b-88e4-4b29e4b29e4c13386”，“ dropcap”：false}“&gt;这意味着我们可以完全bam trap for Arm，我们可以求婚。每个组件都必须从与Makisu一起迁移到与Bazel一起建造的。这是一系列需要大量协调的依赖关系。  首先，主机被迁移，然后状态平台的组件，然后是我们的buildkite堆栈，最后是makisu本身。这是一项巨大的努力，但是我们使用Bazel的多架结构功能系统地解决了每个层，一次将基础设施转换为一部分。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ id”：1104600，“ sizeSlug”：“大”，“ linkDestinati class =“ AlignCenter size-large”&gt; &lt;img loading =“ lazy” dododing =“ async” width =“ 1060” height =“ 444” src =“ https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80，quality=80，onerror = redirect，format = auto/wp-content/uploads/2025/2025/02/02/02/buildstack-1739421942194219516.sv” class =“ wp-image-11104600” referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ wp-element-caption”&gt;图2：bootstragping build stack stack的组件。&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 09bfe58e-5b53-48c7-a672-478777777777777777777777777777777777777777d9b7”，“ dropcap”，“ dropcap”：dropcap“：false}”&gt; &lt;a href =“ https://lucid.app/lucidchart/7eaacaba-5ba-5ba-5ba5-41eb-9cf7-aa4730262953/eedit?invitationId = inv_f_f.f8da6fbdbdbdbd-d8da6fbd-1220-43a5-43a5-43a5-8368-c368-c3f2975 d88apage &lt;/page &lt;0.0 &lt;&lt;/page&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;6f0ddbaf-0973-4ce6-8874-a9233386f14c&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;H2 Data-wp-block-name =“ core/head”“ data-wp-block =” {“ hash”：“ 4819400b-7e62-4e62-4e72-ab2d-4c69b4a0c3c0”，“ level”：2} class =“ class =” wp-block-head =“ wp-block-head =” id =“ id =” h-distrib h-distrib h-distrib h-distrib h-distruts&gt; the-build-procting&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;15879445-d019-4b27-8450-580cbf49133f&#34;,&#34;dropCap&#34;:false}&#34;&gt;Once Makisu and the entire Buildkite stack were up and running on Arm-based hosts, we took the next big step: advancing our build setup by setting up a分布式构建容器图像的管道。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;2a87a2ca-bea6-4cf6-b778-da5601a34fd1&#34;,&#34;dropCap&#34;:false}&#34;&gt;This new pipeline multiplexes the build process across Arm and x86 hosts, running Makisu natively on each architecture.构建图像后，管道将触发最后一步，将X86并使用多架构容器清单合并到统一的多架构容器图像中。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;id&#34;:1104602,&#34;sizeSlug&#34;:&#34;large&#34;,&#34;linkDestination&#34;:&#34;none&#34;,&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;a01cf1a8-3f5a-4468-9e73-1b146f392681&#34;,&#34;alt&#34;:&#34;&#34;}&#34; class =“ AlignCenter size-large”&gt;&lt;img loading =“ lazy”解码=“ async” width =“ 1142” height =“ 202” src =“ https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80，qualit = 80,ORERR = REDIRT = REDERT = auto/wp-content/wp-content/uploads/2025/2025/02/distribedibedbuetedbuildpipellepelelpelele-173942104698744.s. class =“ wp-image-11104602” referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ wp-element-caption”&gt;图3：容器图像的分布式构建管道。&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 92003044-1813-4407-B1BD-8ADAC9281438”，“ dropcap”：false}&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph” data-wp-block =“ {“ hash”：“ 49C9E547-E83F-4E4E-4E4A-8EE3-5750D47BC1EB”，“ dropcap”，“ dropcap”：false}：false}“：false}”&gt;使用多架构结构提供了重要的pipeline Pipeline。它使我们能够避免迁移从Makisu到Bazel的每个集装箱图像构建过程的广泛努力，而Bazel被认为是一项实质性的工作。此外，X86和ARM本地构建图像使我们能够支持无法交叉编译的工作负载。此外，本地建造消除了与交叉兼容相关的间接费用，减少了构建时间并帮助我们留在构建潜伏期中。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph“ data-wp-block =” {“ hash”：“ 79F04C26-7582-4B2D-B2D-BC17-F650F650F8966E07”，“ dropcap”：dropcap“：false}”&gt;但是，使用多架构的建筑物并非没有其折叠。一个重要的缺点是建造成本增加了一倍，因为两个架构都需要构建容器图像。每周有超过400,000个集装箱图像构建（在撰写本文时），这项额外的成本很快就变得巨大。但是，尽管建造成本增加了，但过渡到ARM的单位经济学仍然值得。此外，多建筑结构构建使我们能够执行逐渐采用，因为它允许在ARM和X86主机上部署相同的图像标签。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data data-wp-block-name =“ core/saparator” data-wp-block =“ {” hash&#39;：“&#xA;&#xA;&#xA;&#xA;&lt;h2 data data-wp-block-name =“ core/head” data-wp-block =“ {” hash&#39;：“ A866BD12-CC6C-4FB5-A65D-A65D-A65D-A6A1378C01F8”，“ level”：2}“：2}” class =“ class =” wp-block-Heading =“ wp-block-heading”&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph” data-wp-block =“ {” hash&#39;：“ e2af6829-1dbe-4f90-a862-2164b4c057f8”，“ dropcap”，“ dropcap”：false}“&gt;，我们可以与下一个挑战构建图像，我们可以确保&lt;我们的下一个挑战， href =“ https://www.uber.com/en-dk/blog/up-portable-microservices-microservices-ready-for-the-cloud/” target =“ _ black” rel =“ noreferrer noopener”&gt; notecteless&gt; notecteless&gt; notecteless &lt;/a&gt; target =“ _ blank” rel =“ noreferrer noopener”&gt; statefuL &lt;/a&gt;平台可以利用其他架构。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph” data-wp-block =“ {” hash&#39;：“ C72FE98F-02F0-427B-9034-9034-91CDBE672D35”，“ dropcap”：dropcap“：false}”&gt;在Uber上，我们逐渐改变了生产环境，从而逐渐介绍了逐渐改变的环境。这适用于图像升级和硬件更改。对于ARM，我们必须扩展这些系统以支持特定于体系结构的放置。这使得对服务进行的体系结构进行了细粒度的控制，从而使我们从X86过渡到非常谨慎的武器。此外，我们在平台中构建了一个安全机制，该机制自动恢复了ARM放置约束，如果部署了单个体系结构图像进行服务，则将其恢复到X86。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coragraph“ data-wp-block =” {“ hash”：“ 7ac736fc-75b2-4b2-4b2-4b2-4b45-a165-a165-35018025dea9”，“ dropcap”，“ dropcap”：dropcap“：false}”&gt;，并在这些位置约束和安全机制上进行了启动，我们最初是在零件上构建的。基于手臂的主机。这是一个喜悦的时刻，证明了手臂可以与我们的基础设施并存。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;4e87ff86-155e-45d8-a8f0-ec816cf9ce88&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;H1 data-wp-block-name =“ core/heading” data-wp-block =“ {”级别“：1，”哈希：“ 5EC0B0AD-24D5-441C-A252-A252-037EB39093AC“}”&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ F0C74471-47E8-4BD7-9851-4794DB840BE8”，“ Dropcap”&gt; fallcap“：false}”&gt;我们的工作远非远。引导基础架构的最初成功仅仅是更大的旅程的开始。适应5,000个服务以在多架结构平台上运行将需要更多的努力和独创性。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {” hash&#39;：“ efc41ad5-f55e-4504-854e-719EE862b8eb”，“ dropcap”，“ dropcap”：false} href =“ https://www.uber.com/blog/adopting-arm-at-scale-transitioning-to-a-multi-architecture-environment/” target =“ _ black” rel =“ noreferrer noopener”&gt; noreferrer noopener“&gt;该博客系列的下一个部分&lt;/a&gt;，我们将在此范围内进行策略，并在此策略中进行了策略，并在策略中进行了策略，并在策略中进行了策略，并在策略中启动了一项详细信息，比例。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;ace71ac0-6cc8-438e-875a-2f75a7cd22d4&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data data-wp-block-name =“ core/preading” data-wp-block =“ {” hash&#39;：“ 82A125A5-6BDB-4BFE-BE9E-BE9E-BE9E-BB50BA354952”，“ LEVEL”：2}ments“&gt;确认&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coragraph” data-wp-block =“ {“ hash”：“ 5879952d-ad54-4792-A54-4792-A557-4318A36FF7E5”，“ dropcap”，“ dropcap”：dropcap“：false}”&gt;通过UBER的组成部分和众多的众多概念，众多概念的众多概念是众多的，并且众多概念众多概念众多概念众多，并且众多概念众所基础设施（OCI），Google（GCP），Ampere和ARM。作者要感谢所有从事这项倡议的人，并使其成功。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coragraph” data-wp-block =“ {“ fontsize”：“ small”，“ hash”：“ FAA5FF8F-3A56-42FF-9A68-2438-2438F738F731D34F” Chatgpt Enterprise &lt;em&gt;。&lt;/em&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ fontsize”：“ small”，“ hash”：“ d733d2e7-a812-4156-a147-417-47-4d6a1d6a1d6a1dc655 class =“ hasmall-font-size”&gt; &lt;em&gt; ampere &lt;sup&gt;®&lt;/sup&gt;，altra和A和Ampere徽标是Ampere Computing的注册商标或商标。&lt;/em&gt; &lt;/em&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ fontsize”：“ small”，“ hash”：“ AED525E7-0206-463E-BCB9-53763659365931B5”，“是BuildkitePty。Ltd。&lt;/em&gt; &lt;/p&gt;的商标&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {” fontSize“：”小“”，“哈希”：“ 357cc5e6-8bf3-4a40-87e9-c9e59e59e59aba7dc0”和Bazel &lt;sup&gt;™&lt;/sup&gt;是Google LLC的商标，此博客文章不受任何方式认可或与Google相关。&lt;/em&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {” fontsize“：”小“”，“哈希”：“ 51B03BBA-3668-3668-4ABC-A6BA-7F82828282872007C9”，“ dropcap”，“ dropcap”：dropcap“：fals}” class =“ class =” sm-small-font-sips-size size size size size size size size &lt;em&gt; Oracle和/或其分支机构的注册商标。使用这些标记不暗示甲骨文的认可。&lt;/em&gt; &lt;/p&gt;</description>
      <pubDate>Thu, 13 Feb 2025 06:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Serving Millions of Apache Pinot™ Queries with Neutrino】用中微子提供数百万的Apache Pinot™查询</title>
      <link>https://www.uber.com/blog/serving-millions-of-apache-pinot-queries-with-neutrino/</link>
      <description>【&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:1,&amp;quot;hash&amp;quot;:&amp;quot;e881b093-d759-4d94-adcc-4bb52b2f698e&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a8cf8484-ba77-49bb-a4bd-e9a522de7491&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Apache Pinot&lt;sup&gt;™&lt;/sup&gt; is a real-time OLAP database capable of ingesting data from real-time streams and offline data sources. Uber has used Pinot for over 6 years, and in that time we’ve seen a rapid increase in its adoption. Today, Pinot handles a wide spectrum of use cases at Uber, from real-time use cases with over 1 million writes per second, 100 QPS, and less than 500 ms latency, to use cases that require &lt;a href=&#34;https://www.uber.com/blog/pinot-for-low-latency/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;low-latency analytics on offline data&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;574c79c2-fa29-4ada-a5d7-f36fc39696ab&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In this blog, we share how our platform users leverage Neutrino, an internal fork of Presto&lt;sup&gt;®&lt;/sup&gt;, to query their data in Pinot.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7df2c3b4-1232-43ae-916d-ed98e48976b5&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Throughout this blog, queries refer to read queries,&amp;nbsp; because in Pinot we usually refer to writes as ingestion.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;984756fb-93c5-4b61-ac93-9132a1b303e9&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a935428f-4b50-4447-ae82-5533a893bfd7&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-background&#34;&gt;Background&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;321b6370-0ced-4e5f-940d-62456902980b&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Pinot can be queried using SQL, but it has two query engines: the V1 Engine and the more recent Multistage Engine. As of this writing, Pinot’s V1 Engine is the default engine, and the Multistage Engine has to be explicitly configured for use.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;788922ee-a2ba-4433-96be-582e75fe248d&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Pinot’s V1 Engine can handle higher QPS at a much lower latency when compared with the Pinot Multistage Engine. The tradeoff is that ‌SQL features are quite limited with the V1 engine. Presto is a stateless query engine capable of reading from many different data sources via its connector architecture.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2342b5b8-f632-4031-9577-99e165003fc7&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;4c37084d-a105-4bdf-931c-3effd7ae1590&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-pinot-s-v1-query-engine&#34;&gt;Pinot’s V1 Query Engine&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9b0731fc-6cde-4cbf-86da-1969216c8d24&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Pinot’s V1 Engine is optimized for high QPS and low latency. The engine has a scatter-gather execution and it only supports queries with a single SELECT, WHERE, GROUP BY, and ORDER BY clause. In other words, it doesn’t support sub-queries, joins, or window functions. The engine has a custom planner that handles specific query shapes with custom operators. For example, a SELECT query without ORDER BY uses a &lt;em&gt;SelectionOnlyOperator&lt;/em&gt;, whereas one with an ORDER BY uses a &lt;em&gt;SelectionOrderByOperator&lt;/em&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7a41b408-6b11-485b-8bce-3ea4ae16d3d9&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Figure 1 shows a high-level design of Pinot query execution in the V1 query engine. Pinot brokers receive HTTP requests from clients, which are scattered to the servers that‌ ingest and store the data. The results are sent back to the broker, which performs a reduce before sending it back to the client.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1101585,&amp;quot;sizeSlug&amp;quot;:&amp;quot;full&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;72d8d018-2a08-4b21-8def-617c25155daf&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-full&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;647&#34; height=&#34;468&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/12/figure-1-17338905589143.png&#34; alt=&#34;&#34; class=&#34;wp-image-1101585&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=647,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/12/figure-1-17338905589143.png 647w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/12/figure-1-17338905589143.png 300w&#34; sizes=&#34;auto, (max-width: 647px) 100vw, 647px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;&amp;nbsp;Figure 1: Pinot’s V1 Engine has a scatter-gather design.&amp;nbsp;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;67556974-bbb9-447d-b01b-207a2223851e&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;a51bf39d-6f9b-420f-8a22-f39cbf5a1f80&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-pinot-s-multistage-query-engine&#34;&gt;&lt;br&gt;Pinot’s Multistage Query Engine&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2229e477-8d52-4a5d-969b-68711d46a5a0&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Pinot’s Multistage Engine was made generally available in 2023 with Pinot 1.0, and it supports distributed joins, window functions, and sub-queries. It uses Apache Calcite™ to create a logical plan, which is then used to derive the physical plan. The plan may consist of multiple stages, and data transfer between each stage may incur a shuffle. The entirety of the plan, except for the penultimate stage or two, is run on the servers.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9a698396-827c-4aa2-9da9-887db83ac088&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Figure 2, taken from the Apache Pinot documentation, shows the execution model.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;993da0da-7494-494f-a5a9-e083d47a94d6&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXed8FO_EOgN3KY8oDIn8F1AIGd3K5c1i4uUXAPjIeYf879uQXrkb8tdbJO_qDtm0r0kvZCtC7uWtECR9Gl1Y7UBOpBC0GSsJqzOyHgg_wWZ1EQ09jgIQTpIrm0_xce86UYBLNC4deGLbX4hV_3e6VaB_RgI?key=IEbiY4aSF3msvi6T_qc0CA&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 2: Pinot’s multistage query execution model. Source: &lt;a href=&#34;https://docs.pinot.apache.org/reference/multi-stage-engine&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Apache Pinot Docs&lt;/a&gt;.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0511e894-8237-4907-b531-0faa6fdb60f2&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;8cade7c6-b4c5-46b8-9ca0-c5bdb963456f&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;When a Multistage Engine query is submitted to the brokers, the broker uses Calcite to create and optimize a logical plan, which is converted to a physical plan that’s dispatched to the servers for execution. The servers execute their assigned stages, shuffling data between them if required. The last stage in each server sends the data back to the broker, where a final reduce runs.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;a5b68727-4a74-4293-a17a-f662ca2d2c7e&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-presto&#34;&gt;&lt;br&gt;Presto&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ba193dc9-4b18-4948-85c6-870588bd785e&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Presto is a stateless query engine designed for interactive analytics use cases. It has its own SQL dialect called PrestoSQL. Presto’s connector architecture allows it to query any data source: be it a distributed storage system like object-stores/HDFS, where the table layout may be defined via something like the Apache Hive Metastore, or SQL databases like MySQL and Apache Pinot. Presto supports joins, sub-queries, and arbitrarily complex queries.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d2b60bb2-7cc3-4e4f-b450-0212dcd2bf19&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;A Presto deployment consists of a coordinator, which accepts the queries and returns the results, and many stateless workers which execute the query by running all the operators.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0022c2b1-f49b-45c9-b4fd-c3e35c6ee6fe&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Typically, a Presto cluster runs queries at less than 50 QPS, with latencies on the order of a few seconds to up to several minutes. Figure 3 shows Presto’s execution at a high level. Presto’s coordinator receives queries from clients via an HTTP request, compiles and plans the query, and dispatches the plan to the workers. The workers execute the query, exchanging data between them as required.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;6e45b682-36d6-432d-93b1-f64356261f2c&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXckm6y3eiKdVHgINX3RRMujp22vqoJAOKPXOk00gLC_uCiDk-RenlxNLoyi0ccjUn4cO8knPBiK1POwOhxtJVBNwppeTRr170vwJyEGnFj6p4Vs0XshvQlScO04-LO-TyuU5tCDaUU0NqXPhCbgRKJO7QQ?key=IEbiY4aSF3msvi6T_qc0CA&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 3: High-level execution of Presto.&lt;br&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9b0543e0-61df-4ce1-b865-00681d6e2db3&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;aa074041-9e5c-4457-8d7a-7ae23ca14ce5&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Presto allows connectors to alter the query plan and read and write to any data source. Connectors can implement the &lt;em&gt;ConnectorPageSourceProvider&lt;/em&gt;, which Presto calls in the table scan operator to read data. They can also implement the &lt;em&gt;ConnectorPageSinkProvider&lt;/em&gt; if they want to write the query output using a custom mechanism.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;dd88a3d4-f7b8-4b1e-bed2-f144b9f6f4ba&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;99eda46b-589c-477c-b1ce-838cfff281fc&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-leveraging-neutrino&#34;&gt;Leveraging Neutrino&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;62b947aa-e7f5-4d52-9387-48601b421a50&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Neutrino is an Uber-internal fork of Presto that’s capable of running queries at over 10,000 QPS with sub-second latencies. Neutrino currently proxies Pinot queries for roughly 95% of our use cases. But as the following sections show, it isn’t just a proxy, but also a query execution engine running logically on top of the Pinot V1 Engine.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;3e647a07-4c14-4e0c-aa8b-a99bc6dc5bd0&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-design&#34;&gt;Design&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;17016b3b-8c55-47bc-b42b-bd828c7c7411&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;With Neutrino, we’ve optimized Presto for high QPS and low latency. Neutrino runs the coordinator and the worker in a single JVM, and the HTTP calls between the worker and the coordinator are bypassed in favor of method calls. We achieved this by making internal changes that required tweaking Presto’s execution engine in several places.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;87f6ffb9-533c-43ac-aa66-344ed46c318a&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We also have an internal fork of the Presto-Pinot Connector Optimizer to support query pushdown. Presto SQL submitted by a user goes through the logical planner and a bunch of optimizers, which are common for all connectors. After all the common optimizers run, Presto runs the specific connector optimizer relevant to the query. In our case, our internal fork of the Presto-Pinot Connector Optimizer runs. At a high level, the optimizer tries to find the maximal sub-plan that can be pushed down to Pinot, and converts it into a table scan node with a generated Pinot query.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;3a8f8864-e7de-45fa-828f-807aa1b25c1a&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-multistage-execution-via-neutrino-and-the-pinot-v1-engine&#34;&gt;&lt;br&gt;Multistage Execution via Neutrino and the Pinot V1 Engine&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;292de9ee-e668-42b5-98ff-9d3199fa1cfb&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;To better understand the design described above, consider the Neutrino query in Figure 4, which tries to mimic an Uber-themed use case.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1101652,&amp;quot;width&amp;quot;:&amp;quot;354px&amp;quot;,&amp;quot;height&amp;quot;:&amp;quot;auto&amp;quot;,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;76fbe998-a93e-422e-bf96-f8748ecfea76&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large is-resized&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;1017&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/12/figure-4-17339483771858-1024x1017.png&#34; alt=&#34;&#34; class=&#34;wp-image-1101652&#34; style=&#34;width:354px;height:auto&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/12/figure-4-17339483771858.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/12/figure-4-17339483771858.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=150,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/12/figure-4-17339483771858.png 150w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/12/figure-4-17339483771858.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/12/figure-4-17339483771858.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=1572,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/12/figure-4-17339483771858.png 1572w&#34; sizes=&#34;auto, (max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 4: Neutrino query leveraging window functions to deduplicate rows on (&lt;em&gt;trip_id, line_item&lt;/em&gt;) before performing an aggregation.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;fa4fd676-476c-4e76-9a97-91a23f90974c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f4a7b909-f276-42bc-9b55-8388c3ec22ed&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Here we’re trying to compute the total trip amount at the line-item level over a period of time. However, the original real-time stream may have multiple entries for the same line item and trip, as amounts can change later due to various reasons (like a rider adjusting the tip amount). We can’t use Pinot upserts because it would lead to too many primary keys.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;423083d9-89ce-46b7-b6f1-bb4c73fbcedc&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The query leverages window functions to keep the latest amount for each line item and is essentially deduping rows at query time, with the deduplication key being &lt;em&gt;trip_id, line_item&lt;/em&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6750474b-0284-4036-87b3-8a1519b0ed8a&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Figure 5 shows the query plan in Neutrino for this query. The table scan is executed by sending the SQL query to the Pinot broker.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1101647,&amp;quot;width&amp;quot;:&amp;quot;413px&amp;quot;,&amp;quot;height&amp;quot;:&amp;quot;auto&amp;quot;,&amp;quot;sizeSlug&amp;quot;:&amp;quot;full&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;4786f4eb-86d3-474e-b21b-42de415ff248&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-full is-resized&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;956&#34; height=&#34;856&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/12/figure-5-17339476173180.png&#34; alt=&#34;&#34; class=&#34;wp-image-1101647&#34; style=&#34;width:413px;height:auto&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=956,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/12/figure-5-17339476173180.png 956w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/12/figure-5-17339476173180.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/12/figure-5-17339476173180.png 768w&#34; sizes=&#34;auto, (max-width: 956px) 100vw, 956px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 5: Query plan for the query in Figure 4.&amp;nbsp;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;1628c092-cf24-40c4-a40f-65ff3089712e&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f2e890ab-948a-47ad-aa04-c8ce51f30dc7&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Neutrino pushes down a SQL query to Pinot that Pinot’s V1 Engine can run, and executes the rest of the plan within itself using its own execution engine. This design achieves something remarkable:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f02c3b7b-c217-4a02-9eb6-43a71e03b040&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;We can support complex query shapes that couldn’t be supported with Pinot’s V1 Engine like window functions and sub-queries&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;We can run such queries at hundreds of QPS with very minimal hardware, without requiring any user hints for query optimization&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e65c12f4-e1ce-41a0-9072-2b7eb1f655d7&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;One may wonder why we don’t use the Pinot MSE for this, as the MSE can support arbitrarily complex queries. There are a few reasons for this:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ec1ceb3a-8ee8-4527-a05b-892b0006c121&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;MSE by default resorts to shuffles, which don’t scale well. Neutrino, on the other hand, executes the entire plan using a single thread.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Our internal testing suggests MSE can’t scale to 100 QPS. However, queries like the above may need to be run at over 500 QPS.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;MSE only became generally available recently, and queries such as the one above have been running reliably in Neutrino for years.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;233a9666-32e6-4d18-ac30-d01237c1382c&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-rate-limiting-at-the-routing-layer&#34;&gt;&lt;br&gt;Rate Limiting at the Routing Layer&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2ccfc265-75ac-48ae-9722-667d77beca96&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Our internal load balancing system, dubbed Muttley, provides a way to configure the QPS for each caller. If a caller exceeds their set QPS, then Muttley starts dropping requests before they reach the target service.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;03e6ad0c-e205-4dd6-b178-52b851418b57&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We use this extensively in Neutrino to shield it from QPS spikes from our over 100 unique callers.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;f7808e6a-e914-4ad7-8164-5864c927b269&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-query-fingerprinting-and-validation-framework&#34;&gt;&lt;br&gt;Query Fingerprinting and Validation Framework&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;807d7c14-5c1c-4c27-abdb-2c57e0e96e54&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We’ve added a simple mechanism to compute query fingerprints in Neutrino. Given Pinot is primarily used for powering end-user-facing applications, most of our traffic is from back-end services, which have a predetermined query fingerprint. So, the number of unique query fingerprints is multiple orders of magnitude lower than the total QPS, and is also a very effective dimension for identifying expensive queries.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;fba15a22-4a7f-41ec-837f-6eb3e626a65e&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Furthermore, we use Flipr, Uber’s dynamic config store, to configure a deny list of fingerprints. This is quite useful to mitigate rare scenarios where one query may impact other callers.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;25931d23-94df-4da7-b159-366d9a79448f&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-dynamic-split-execution-timeouts&#34;&gt;&lt;br&gt;Dynamic Split Execution Timeouts&lt;/h3&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;width&amp;quot;:&amp;quot;568px&amp;quot;,&amp;quot;height&amp;quot;:&amp;quot;auto&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;176c1b20-4083-4a56-b3af-98972eeff07a&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter is-resized&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXcsWLieVMwU3pXSWyB1s5CbxVPXjEalGrcNsOXQbKoeTLRaIWE2BZk7e0ZJVODO1FARn8oed10f25gGx430A3yvd0kC-RKId_gEQg6Ehr6omR3Ognc7HV8NlrDlhXFaNgax2jo7F3pb1dex7JruH6a7ZnCS?key=IEbiY4aSF3msvi6T_qc0CA&#34; alt=&#34;&#34; style=&#34;width:568px;height:auto&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 6: Dynamic split execution timeout logic.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;67ceb3ca-6f6a-409b-8fe5-59a1d3450e8a&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;87119003-f841-46e0-985f-c91ca407bbe5&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Three years back, we had a couple of incidents due to one user overwhelming our Neutrino deployment, causing impact to other high-tier callers. The issue essentially was: if a given caller running at a sufficiently high QPS experiences high latencies, it leads to a pile-up of requests and threads in Neutrino. At the time, we wanted to keep the number of internal changes in our fork as low as possible, because we wanted to keep in sync with Presto’s main branch and move our fork ahead every few months.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9c00415d-fb25-47b1-bf1d-507dbb78edc9&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We wanted to solve this problem quickly and with minimal surgical intervention to Presto’s core code. To achieve this, we built a simple mechanism that dynamically adjusted Pinot’s query timeout in case of high load. Even to our surprise, this simple mechanism, combined with our routing-layer-based rate limits, has served us well over the past 3 years with no repeat of such incidents.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;04ba68ae-7f12-4d2e-8672-2c8c24dd7e5c&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-historical-context&#34;&gt;&lt;br&gt;Historical Context&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;dbfa61c3-9c6e-4297-860c-7b04034b546a&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;One may wonder why we didn’t directly expose PinotSQL to users and build a simple passthrough proxy. The reasons for going with the Neutrino approach are that at the time, Uber had two OLAP databases: AresDB and Pinot. Using Presto, we could hide the complexity of dealing with different query languages across these two stores. Beyond that, using Presto, we could enable multistage queries, which weren’t available in Pinot at the time (2019).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;7d958c3d-b6bc-4de2-b7cd-94f87707e079&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-challenges&#34;&gt;&lt;br&gt;Challenges&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;50454c5d-05b0-4c26-b1c4-186068573e00&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We have faced a few challenges working with Neutrino over the years.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c94e05e8-3684-4d1b-ba85-d9cb55d1eb90&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;First, Neutrino is a complex system for users. Neutrino, as part of its design, has to do SQL-to-SQL translation. Moreover, it can only partially push down the query plan to Pinot. Naturally, the response returned by Pinot has to be trimmed at a certain limit, and since we send a SQL query to Pinot, the limit has to be enforced using the LIMIT clause.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;fec4fbac-d74c-4677-a6d6-9ffe5b060933&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The pushed-down plan may not always have a limit, and Neutrino may need to put a default limit of its own in such cases (or fail the query). Putting a default limit of our own changes the semantics of the query and can lead to incorrect results, while failing the query will lead to a poor experience for users. This is also demonstrated in the example in Figure 5, where we add a default limit of 10,000.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c758f982-accc-4a9f-bcb0-e3b2583d1e38&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Additionally, a visual inspection of the query isn’t enough to determine how the pushed-down query looks, and changing a single UDF could lead to a complete change in the pushed-down query.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d0874aef-8420-4fb8-b524-d036343d3413&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The second challenge was a lack of join support. Neutrino doesn’t support joins, and can only support queries whose unoptimized plan-tree has no node with a greater than one child node.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7a58e363-10c1-443c-ac17-57055ac8b9d5&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The Multistage Engine in Pinot enables distributed join queries, but since Neutrino can only translate to Pinot V1 Engine queries, we’re unable to take advantage of the Multistage Engine with Neutrino. This also put us in a position where our current tech stack didn’t align with the next-generation query engine in Pinot.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c3254ed6-b57d-4b58-9b83-773a3f0457c9&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The third challenge was breaking tenant isolation. Neutrino proxies traffic from over 100 callers, many of which may be hitting their dedicated Pinot tenants. So, Neutrino ends up becoming a shared resource and breaks tenant-level isolation at the query level.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e8d63612-32b7-4491-b19e-07e39ea6c68d&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The last challenge was development overhead. We’ve spent significant effort over the last 2-3 years fixing a ton of query translation issues and improving support for query pushdown. However, Pinot continues to improve rapidly still, and catching up to the new SQL features in Pinot (even new Pinot UDFs) requires a corresponding change in Neutrino. This often becomes a bottleneck for users trying to leverage these new features.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;007f6534-c06a-4a7e-abbe-00e0eb8471a8&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-scale-and-impact&#34;&gt;&lt;br&gt;Scale and Impact&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;578fb714-b8fd-4bd1-a9db-c80f11e521a0&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Neutrino is a business-critical, tier-0 service at Uber, and serves more than half a billion Apache Pinot queries daily. Our estimates suggest that more than a third of those queries leverage Neutrino’s execution engine, i.e. they only partially push down the query and execute the rest of the plan within Neutrino.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;4981dd44-f59e-42c4-8a07-f0beca467845&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;With over 100 unique service callers querying over 1,000 tables, Neutrino and Apache Pinot easily serve 100 use cases across all our lines of business.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9928b44e-113a-4dc7-91ce-55477c4b699b&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0929bab1-5781-4d32-b5d9-1d16789b03f5&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-next-steps&#34;&gt;Next Steps&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2f8653dc-1fd4-4db2-8ce5-1558cf75035e&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Currently, we only serve a handful of use cases via the Pinot Multistage Engine at Uber. In a subsequent blog, we’ll share how we plan to adopt Pinot SQL at Uber more broadly, and how we plan to address the challenges with our Neutrino-based approach.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c3283466-39e2-455a-9628-5fac51fb3096&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:1,&amp;quot;hash&amp;quot;:&amp;quot;e38ad6d1-506c-4313-a62e-f8cbc023450c&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-conclusion&#34;&gt;Conclusion&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7bb07e93-6bab-4dfa-bee2-69ea1879722f&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Our experience at Uber of serving hundreds of low-latency analytics use cases has made it clear that OLAP systems should be able to support query features such as window functions and sub-queries. Apache Pinot didn’t have this support until 2023, and Neutrino has proven to be immensely useful in bridging that gap. Moreover, Neutrino’s approach of running the entire plan within a single process has proven to be scalable enough to handle 10,000 QPS reliably.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;79b746e5-e7fa-4e40-a20f-3dbf29a2ee50&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;Apache&lt;sup&gt;®&lt;/sup&gt;, Apache Pinot&lt;sup&gt;™&lt;/sup&gt;, Apache Hive&lt;sup&gt;™&lt;/sup&gt;, Apache Calcite&lt;sup&gt;™&lt;/sup&gt;, Pinot, and Hive are either registered trademarks or trademarks of the Apache Software Foundation in the United States and/or other countries. No endorsement by The Apache Software Foundation is implied by the use of these marks.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;00bf4a57-ab56-410e-9e0f-ac42bd409e36&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;Oracle, Java, MySQL are registered trademarks of Oracle and/or its affiliates. Other names may be trademarks of their respective owners.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;e7fd827a-9427-4a8c-8f62-afcbb7a39077&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Presto&lt;sup&gt;®&lt;/sup&gt; is a registered trademark of LF Projects, LLC.&lt;/em&gt;&lt;br&gt;Cover Photo Attribution: “&lt;a href=&#34;https://openverse.org/image/c8fc21ac-901a-4fe5-a3ea-96669610fecb&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Let Sparks Fly&lt;/a&gt;” by &lt;a href=&#34;https://openverse.org/image/collection?source=flickr&amp;amp;creator=mightyboybrian&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;mightyboybrian&lt;/a&gt; is licensed under &lt;a href=&#34;https://creativecommons.org/licenses/by-nc/2.0/?ref=openverse&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;CC BY-NC 2.0&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;e7fd827a-9427-4a8c-8f62-afcbb7a39077&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;Copyright Apache Pinot. Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements under the Apache License, Version 2.0.&lt;/p&gt;】&lt;h1 data-wp-block-name =“ core/heading” data-wp-block =“ {”级别“：1，”哈希：&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;a8cf8484-ba77-49bb-a4bd-e9a522de7491&#34;,&#34;dropCap&#34;:false}&#34;&gt;Apache Pinot&lt;sup&gt;™&lt;/sup&gt; is a real-time OLAP database capable of ingesting data from real-time streams and offline数据源。 Uber使用了Pinot已有6年以上，在那段时间，我们看到了它的采用迅速增加。 Today, Pinot handles a wide spectrum of use cases at Uber, from real-time use cases with over 1 million writes per second, 100 QPS, and less than 500 ms latency, to use cases that require &lt;a href=&#34;https://www.uber.com/blog/pinot-for-low-latency/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;low-latency analytics on offline数据&lt;/a&gt;。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 574C79C2-FA29-4ADA-4ADA-4ADA-A5D7-F36FC39696BAB”，“ dropcap”，“ dropcap”，“ dropcap”：false}“：false}”&gt;在此博客中，我们在平台中分享了我们的平台用户loverne lovalles lovally sust prestrino，sup sup presto &lt;/sup presto &lt;/sup presto&gt;黑皮诺。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coragraph” data-wp-block =“ {” hash&#39;：“ 7df2c3b4-1232-43ae-916d-ed98e48976b5”，“ dropcap”，“ dropcap”：false}“&gt; Queries coolies to read queritiation，因为我们在picot中引用write &lt;/writes writes write &lt;/dropcap“：dropcap”：dropcap“：dropcap”&gt; forse}。&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name =“ core/saparator” data-wp-block =“ {” hash&#39;：“ 984756FB-93C5-4B61-AC93-9132A1B303E9”，“ obisitical&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name =“ core/heading” data-wp-block =“ {” hash&#39;：“ A935428F-4B50-4447-4447-AE82-5533A893BFD7”，“ LEVEL”：2} class =“ class =” wp-block-heading =“ wp-block-heading”&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {” hash&#39;：“ 321b6370-0ced-4E5F-940D-62456902980b”，“ dropcap”：dropcap“：dropcap”：：fals}“&gt;使用sql，但可以使用两个Query Engine，它可以使用SQL Engine be Everines and It necter，nof}”截至撰写本文时，Pinot的V1引擎是默认引擎，必须明确配置多阶段的引擎。&lt;/p&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 7888922EE-A2BA-4433-96BE-582E-582E75FE248D”，“ dropcap”：false}“&gt; pinot的V1发动机在与较低的QPS上相比，与Pinot的较低量延迟相比，可以处理更高的QPS。权衡的是，V1发动机的SQL功能非常有限。 Presto是一种无状态查询引擎，能够通过其连接器架构从许多不同的数据源读取。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name =“ core/saparator” data-wp-block =“ {” hash&#39;：Nel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;H3 Data Data-Wp-block-name =“ core/pread” data-wp-block =“ {”级别“：3，”哈希：“ 4C37084D-A105-A105-4BDF-931C-931C-3EFFD7AE1590”}“&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph” data-wp-block =“ {“ hash”：“ 9B0731FC-6CDE-4CBF-86DA-1969216C8D24”，“ dropcap”：dropcap“：fals}”&gt; pinot的V1发动机适用于高QPS和低LATENCY。该引擎具有散点机的执行，它仅支持单个选择的查询，其中，按子句组成和订购。换句话说，它不支持子查询，连接或窗口功能。该引擎具有一个自定义规划师，可以使用自定义操作员处理特定的查询形状。例如，一个无订单的选择查询&lt;em&gt; selectiononlyserator &lt;/em&gt;，而使用&lt;em&gt; selectiveordordorderbyoperator &lt;/em&gt;。&lt;/em&gt;。&lt;/p&gt;的订单。&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph“ data-wp-block =” {“ hash”：“ 7A41B408-6B11-11-485B-8B-8BCE-3EA4AE16D3D9”，“ dropcap”：false}“&gt;图1显示了Pinot Query Query在V1 Query Engrion的高级设计。 Pinot经纪人从客户端接收HTTP请求，这些请求分散到摄入并存储数据的服务器。结果将发送回经纪人，该经纪人在将其发送回客户之前执行降低。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;图data-data-wp-block-name =“ core/image” data-wp-block =“ {“ id”：1101585，“ sizeSlug”：“ full”，“ linkDestination”：“ none”，“ aLign”：“ center”，“ hash”，“ hash”：72D8D018-2A018-2A08-4B21-4B21-4B21-8DEF-6DEF-6117C25555555555555555555555555555555. class =“ aligncenter size-full”&gt; &lt;img loading =“ lazy” dododing =“ async” width =“ 647” height =“ 468” src =“ https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80，quality=80，onerror = redirect，format = auto/wp-content/uploads/2024/12/12/12/12/figure-1-1-1733890555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555933.PN =” class=&#34;wp-image-1101585&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=647,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/12/figure-1-17338905589143.png 647W，https：//blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror = redirect，format = auto/wp-content/uploads/2024/2024/12/12/12/figure-1-1-1-1-1-1-1-173389055555555589143.PN = 300：s = 300 ng： 647px）100VW，647px“ referrerpolicy =“ no-toferrer”&gt; &lt;figcaption class =“ WP-元素caption”&gt;图1：Pinot的V1发动机具有散点收集设计。 &lt;/figcaption&gt; &lt;/fige&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 67556974-BB9-447D-B01B-207A222223851E”，“ dropcap”，“ dropcap”：false}&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;H3 Data Data-Wp-block-name =“ core/head”“ data-wp-block =” {“级别”：3，“ hash”：“ A51BF39D-6F9B-420F-420F-8A22-F39CBF5A1F80”}发动机&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 2229E477-8D52-4A5D-969B-68711D46A5A0“，” dropcap“：false}”&gt; Pinot的多阶段发动机通常在2023年使用Pinot 1.0提供，并且它支持分布的分布式连接，窗口函数，窗口函数和子Querions和sub-Querne。它使用Apache Cortite™来创建逻辑计划，然后将其用于得出物理计划。该计划可能由多个阶段组成，每个阶段之间的数据传输可能会导致混乱。除倒数第二阶段以外的整个计划都在服务器上运行。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph“ data-wp-block =” {“ hash”：“ 9A698396-827C-4AAA2-9DA9-9DA9-887DB83AC088”，“ dropcap”：false}&gt;图2 &lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ align”：“ center”，“ hash”：“ 993DA0DA-7494-494F-A5A9-E083D47A94D6”，“ src =“ https://lh7-rt.googleusercontent.com/docsz/ad_4nxed8fo_eogn3ky8.8din8f1aigd3k5c1i4uuxapjieyf879uqxrkbb bb8tbjo_qdtm0r 0KVZCTC7UWTECR9GL1Y7UBOPBC0GSJQZOYHGG_WWZ1EQ09JGIQTPIRM0_XCE86UYBLNC4DEGLBX4HV_3E6VAB_RGI？ alt =“” referrerpolicy =“ no-toferrer”&gt; &lt;figcaption class =“ WP-元素caption”&gt;图2：Pinot的多阶段查询执行模型。来源：&lt;a href =“ https://docs.pinot.apache.org/reference/multi-stage-eengine” target =“ _ blank” rel =“ noreferrer noopener”&gt; apache-docs docs &lt;/a&gt;。&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {” hash&#39;：“ 0511E894-8237-4907-B531-0FAA6FDB60F2“，” dropcap“：dropcap”：false}“：false}”&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;8cade7c6-b4c5-46b8-9ca0-c5bdb963456f&#34;,&#34;dropCap&#34;:false}&#34;&gt;When a Multistage Engine query is submitted to the brokers, the broker uses Calcite to create and optimize a logical plan, which is converted to a physical plan将其派往服务器进行执行。服务器执行他们分配的阶段，如果需要，将它们之间的数据调整。每个服务器的最后阶段将数据发送回经纪人，最终降低运行。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data data-wp-block-name =“ core/head” data-wp-block =“ {”级别“：3，“哈希”：&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph“ data-wp-block =” {“ hash”：“ BA193DC9-4B18-4948-4948-85C6-870588BD785E”，“ dropcap”：：falle}&gt; presto是一种用于互动的用例。它具有自己的SQL方言，称为Prestosql。 Presto的连接器体系结构允许它查询任何数据源：无论是一个分布式存储系统，例如Object商店/HDFS，可以通过Apache Hive Metastore之类的内容定义表布局，或者可以使用MySQL和Apache Pinot之类的SQL数据库来定义。 Presto Sup端口连接，子查询和任意复杂的查询。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;d2b60bb2-7cc3-4e4f-b450-0212dcd2bf19&#34;,&#34;dropCap&#34;:false}&#34;&gt;A Presto deployment consists of a coordinator, which accepts the queries and returns the results, and many stateless workers which execute the通过运行所有操作员来查询。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;0022c2b1-f49b-45c9-b4fd-c3e35c6ee6fe&#34;,&#34;dropCap&#34;:false}&#34;&gt;Typically, a Presto cluster runs queries at less than 50 QPS, with latencies on the order of a few seconds to up to several minutes.图3显示了Presto的执行高水平。 Presto的协调员通过HTTP请求收到客户端的查询，编译和计划查询，并将计划派遣给工人。工人执行查询，根据需要交换数据。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ align”：“ center”，“ hash”：“ 6e45b682-36d6-432d-93b1-f64356262626261f261f261f2c“ src =“ https://lh7-rt.googleusercontent.com/docsz/AD_4NXCKM6Y3EIKDVHGINX3RRMUJP22VQOJAOKPXOKPXOKPXOK00GLC_UIDK00GLC_UCUCIDK-RENLXNLXNLXNLOYII0CCCJU N4CO8KNPBIK1POWOHXJVBNWPPERRR170VWJYEGNFJ6P4VS0XSHVQLSCO04-LO-TYUU5TCDAUU5TCDAUU0NQXPHCBGRKGOJO7QQ？ alt =“” referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ wp- element-caption”&gt;图3：presto的高级执行。&lt;br&gt; &lt;/figcaption&gt; &lt;/figcaption&gt; &lt;/dig&gt; &lt;/div&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 9B0543E0-61DF-4CE1-B865-00681D6E2DB3”，“ dropcap”，“ dropcap”：false}“：false}”&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph” data-wp-block =“ {“ hash”：“ AA074041-9E5C-4457-8D7A-7A-7AE23CA14CE5”，“ dropcap”：false}“：false}”&gt; presto允许连接器更改查询计划和读取任何数据。连接器可以实现&lt;em&gt; connectorPagesourceProvider &lt;/em&gt;，Presto在表扫描操作员中呼吁读取数据。如果他们想使用自定义机制编写查询输出，他们还可以实现&lt;em&gt; ConnectorPagesInkProvider &lt;/em&gt;。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-data-wp-block-name =“ core/saparator” data-wp-block =“ {” hash&#39;：“ dd88a3d4-f7b8-4b1e-b1-bed2-f144b9f6f6f4ba”，“ opacity”，“ obicitice”：“ alpha-channel”} class =“ class =” wp-block-separatiencation&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name =“ core/heading” data-wp-block =“ {” hash&#39;：“ 99EDA46B-589C-477C-B1CE-838CFFF281FC”，“ LEALC&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;62b947aa-e7f5-4d52-9387-48601b421a50&#34;,&#34;dropCap&#34;:false}&#34;&gt;Neutrino is an Uber-internal fork of Presto that’s capable of running queries at over 10,000 QPS with sub-second latencies.中微子Curr代理对我们用例中约95％的Pinot查询。但是如下各节所示，它不仅是代理，而且是在Pinot V1引擎顶部逻辑运行的查询执行引擎。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data data-wp-block-name =“ core/heading” data-wp-block =“ {”级别“：3，“哈希”：“ 3E647A07-4C14-4C14-4E0C-AA8B-A99B-A99BC6DC5BDBD0”}&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph“ data-wp-block =” {“ hash”：“ 17016B3B-8C55-8C55-47BC-B42B-B42B-BD828C7411”，“ dropcap”，“ dropcap”：false}“：false}”&gt;具有Neutrino，我们对高QPS和低量化级别进行了优化的Presto。中微子在单个JVM中运行协调员和工人，并且工人和协调器之间的HTTP调用被绕开以支持方法调用。我们通过进行内部更改，需要在几个地方调整Presto的执行引擎来实现这一目标。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 87F6FFB9-533C-43C-43AC-AA66-344ED46C318A”，“ dropcap”：dropcap“：false}”&gt;我们还具有presto-Pinot-Pinot-Pinot-Pinot-Pinot conternor unternoter unternoter funterdounder fultor tupporter Query Query Query QUERY QUERY QUERY QUERY QUERY QUERY QUERY QUERY QUERY QUERY。用户提交的PRESTO SQL会通过逻辑计划器和一堆优化器，这些优化器对于所有连接器都是常见的。在所有常见的优化器运行后，Presto运行与查询相关的特定连接器优化器。就我们而言，我们的Presto Pinot连接器优化器的内部叉子运行。在高级别上，优化器试图找到可以向下推到Pinot的最大子计划，并将其转换为带有生成的Pinot查询的表扫描节点。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data data-wp-block-name =“ core/pread”“ data-wp-block =” {“ level”：3，“ hash”：“ 3A85864-E7DE-45FA-45FA-828F-828F-807AA1B25C1A” id =“ h-multistage-oxecution-via-neutrino and pinot-v1-engine”&gt; &lt;br&gt;通过neutminino和pinot v1 Engine执行多阶段&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 292de9ee-e668-42b5-98ff-98ff-98ff-9d31999999999fa1cfb”，“ dropcap”，“ dropcap”：dropcap“：falses}”案例。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;图数据 -  wp-block-name =“ core/image” data-wp-block =“ {“ id”：1101652，“ width”：“ 354px”，“高度”：“自动”，“ sizeLug”：“大型”，“ linkdest ination&#39;：“ none”，“ align”：“ center”，“ hash”：“ 76FBE998-A93E-422E-BF96-F96-F8748ECFEA76”，“ ALT”：“”}“}” class =“ AlignCenter size-large ins-indized”&gt; &lt;img loading =“ lazy” dexoding =“ async” width =“ 1024” height =“ 1017” src =“ https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80，onerror = redirt = redirect，format = auto/wp-content/uploads/2024/12/12/12/figure-4-173394839483948377777124-1124112401240124124012401240124.PEN class =“ wp-image-11101652”样式=“宽度：354px;高度：自动” srcset =“ https://blog.uber.uber-cdn.com/cdn-cgi/image/width = 1024，质量= 80，OnError =重定向，格式= auto/wp-content/uploads/2024/12/fige-4-1733948371858.png 1024W， https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror=redirect，format，format = auto/wp-content/uploads/2024/2024/12/12/12/4-17394-1739483771858.png 3008.pn.pn00w.ppns https://blog.uber-cdn.com/cdn-cgi/image/width=150, Quality=80，onerror=redirect，format，format = auto/wp-content/uploads/2024/2024/12/12/figure-4-173394837771858.png 15000. https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80，onerror=redirect，format，format = auto/wp-content/uploads/2024/2024/12/12/12/figure-4-4-173394837771858.png 768868.png 76868.pn， https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80，onerror=redirect，format，format = auto/wp-content/uploads/2024/2024/2024/12/12/figure-4-4-17339483777188.png 15366.pn https://blog.uber-cdn.com/cdn-cgi/image/width=1572，quality=80，onerrt = redirect，format，format = auto/wp-content/uploads/2024/2024/2024/12/figure-4-173394837771858.pnips 1024px）100VW，1024px“ referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ wp-element-caption”&gt;图4：中微子查询在（&lt;em&gt; trig_id，line_it，line_item &lt;/em&gt;）上defuplicate cow defuplicate cowertion &lt;/em&gt;）&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ FA4FD676-476C-4E76-9A97-91A23F90974C”，“ Dropcap”：dropcap“：fals}”&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ F4A7B909-F276-42BC-9BC-9B55-8388C3EC22ED”，“ dropcap”：dropcap“：false}”&gt;在这里，我们试图在线路上计算一级级别的总级别。但是，原始的实时流可能具有相同的订单项和旅行的多个条目，因为由于各种原因，金额可能会更改（例如骑手调整小费数量）。我们不能使用pinot upserts，因为它会导致过多的主要键。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coraph” data-wp-block =“ {“ hash”：“ 423083d9-89ce-46b7-b6f1-bb4c73fbce73fbcedc”，“ dropcap”，“ dropcap”：false&gt; &lt;em&gt; trip_id，line_item &lt;/em&gt;。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {” hash&#39;：“ 675044b-0284-4036-4036-87B3-8A1519B0ED8A”，“ dropcap”：dropcap“：false}”&gt;图5显示了此Query中市场的Query Plan。表扫描是通过将SQL查询发送到Pinot Broker执行的。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;图数据 -  wp-block-name =“ core/image” data-wp-block =“ {“ id”：1101647，“宽度”：“ 413px”，“高度”：“自动”，“ sizeLug”：“ full”，“ linkdest ination“：“ none”，“ align”：“ center”，“ hash”：“ 4786F4EB-86D3-474E-B21B-42DE415FF248”，“ ALT”：“}”}“}” class =“ AlignCenter size-full ins-indized”&gt; &lt;img loading =“ lazy” dexoding =“ async” width =“ 956” height =“ 856” src =“ https：// blog。uber-cdn.com/cdn-cgi/image/width=2160,quality=80，onErr = redirect，format = auto/wp-content/uploads/2024/2024/12/figure-5-17339476176173173180.png样式=“宽度：413px;高度：自动” srcset =“ https://blog.uber-cdn.com/cdn-cgi/image/width=956,quality=80，onerror = redirt = redirct，format = auto/wp-content/uploads/2024/12/12/12/figure-5-17339476176176176176176180.pn https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror = redirect，format，format = auto/wp-content/uploads/2024/2024/12/12/12/figure-5-173394761739476173173180.png 300.pn00.pn00.pn00.pn00.pn00.pn00.pn00.pn00.pn00.pn00.pn00.pn00.pns https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80, ereror=redirect，format，format = auto/wp-content/uploads/2024/2024/12/12/12/figure-5-17339476173173173180.png 76686868wid： 956px）100VW，956px“ referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ wp-element-caption”&gt;图5：图4中查询的查询计划。&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 1628C092-CF24-40C4-A40F-65FF3089712E”，“ dropcap”：false}“：false}”&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;f2e890ab-948a-47ad-aa04-c8ce51f30dc7&#34;,&#34;dropCap&#34;:false}&#34;&gt;Neutrino pushes down a SQL query to Pinot that Pinot’s V1 Engine can run, and executes the rest of the plan within itself using its own execution engine.此设计实现了非凡的事情：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name =“ core/list” data-wp-block =“ {“ hash”：“ F02C3B7B-C217-4A02-9EB6-43A71E03B040”，“订购&#xA;&lt;li data data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;我们可以支持无法用pinot的V1引擎（例如窗口函数）和sub-queries &lt;/li&gt;支持的复杂查询形状&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;我们可以在数百个Qps上运行此类查询，而无需任何用户提示查询优化&lt;/li&gt; &lt;/li&gt; &lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ e65c12f4-e1ce-41A0-9072-2B7EB1F655D7”，“ dropcap”：dropcap“：false}”&gt;一个人可能不知道为什么我们不想知道pinot mse for the mse confectime confectime conforce conforce conforce conforce utife contimance conforce conformine contimance converinase。有几个原因：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name =“ core/list” data-wp-block =“ {“ hash”：“ ec1ceb3a-8ee8-4527-A05B-892B-892B0006C121”，“订购”：false“：false”：false，“ values，” valuat&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; MSE默认情况下，求MSE求助于缩放不佳的缩放。另一方面，中微子使用一个线程执行整个计划。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;我们的内部测试表明MSE不能扩展到100 QPS。但是，类似上述查询的查询可能需要以超过500 qps进行。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; MSE仅最近才可用，诸如一个ab之类的查询Ove多年来一直在中微子上可靠地运行。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data data-wp-block-name =“ core/thead” data-wp-block =“ data wp-block =”级别“：3，”哈希：“ 233a96666-32e6-4d18-ac30-ac30-ac30-d01237c1382c“}”层&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 2CCFC265-75AC-48AE-9722-667D77BECA96”，“ dropcap”：dropcap“：false}”&gt;我们的内部负载平衡系统，为每个拨号提供了QPS QPS qps qps。如果呼叫者超过其设置QP，则Muttley在达到目标服务之前就开始删除请求。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coragraph” data-wp-block =“ {” hash&#39;：“ 03E6AD0C-E205-4DD6-B178-52B851418B57”，“ dropcap”：dropcap“：false}”&gt;我们在Qps SpikeS中广泛使用它在QPS SpikeS中，我们将其广泛使用，以屏蔽Qps Spikees，&lt;/e &lt;/persikes specikes specikes specikes specikes specikes persikes specikes。&#xA;&#xA;&#xA;&#xA;&lt;H3 Data Data-Wp-block-name =“ core/head”“ data-wp-block =”级别“：3，“ hash”：“ F7808E6A-E914-4AD7-8164-5864-5864C927B269”}指纹和验证框架&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph“ data-wp-block =” {“ hash”：“ 807D7C14-5C1C-4C27-ABDB-2C57E0E96E54”，“ dropcap”：false}“&gt;我们添加了一种简单的机制来计算Query fingingers in Neptrino。给定的Pinot主要用于为面向用户的应用程序供电，我们的大多数流量来自后端服务，后端服务具有预定的查询指纹。因此，唯一查询指纹的数量比总QPS低多个数量级，也是识别昂贵查询的非常有效的维度。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;fba15a22-4a7f-41ec-837f-6eb3e626a65e&#34;,&#34;dropCap&#34;:false}&#34;&gt;Furthermore, we use Flipr, Uber’s dynamic config store, to configure a deny list of fingerprints.这对于减轻一个查询可能影响其他呼叫者的罕见情况非常有用。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;H3 Data Data-Wp-block-name =“ core/thead” data-wp-block =“ {”级别“：3，“ hash”：“ 25931D23-94DF-4DA7-DA7-B159-366D9A79448F”超时&lt;/h3&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;图data data-wp-block-name =“ core/image” data-wp-block =“ {”宽度“：” 568px“，“高度”：“自动”，“ align”，“ Align”：“中心”，“ HASH”：“ 176C1B20-4083-4A56-B3AF-98972EEF-98972EEFF07A”解码=“ async” src =“ https://lh7-rt.googleusercontent.com/docsz/ad_4nxcswlievmwu3pxswyb1s5cbxvpxjealgrcnsoxqbkoetlraiiwe2bzk7e0zjvodo1f ARN8OED10F25GGX430A3YVD0KC-RKID_GEQG6EHR6OMR3OGNC7HV8NLRDLHXFANGAX2JO7F3PB1DEX7JRUH6A7ZNCS？ alt =“”样式=“宽度：568px;高度：自动“ reverrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ wp-element-caption”&gt;图6：动态拆分执行超时逻辑。&lt;/figcaption&gt; &lt;/fig&gt; &lt;/dig&gt; &lt;/div&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 67CEB3CA-6F6A-409B-8FE5-59A1D3450E8A”，“ dropcap”，“ dropcap”：false}&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;87119003-f841-46e0-985f-c91ca407bbe5&#34;,&#34;dropCap&#34;:false}&#34;&gt;Three years back, we had a couple of incidents due to one user overwhelming our Neutrino deployment, causing impact to other high-tier callers.本质上的问题是：如果给定的呼叫者以足够高的QPS经验运行，则会导致中微子的大量请求和线程。当时，我们希望将叉子内部变化的数量保持尽可能低，因为我们想与普雷斯托的主分支保持同步，并每隔几个月将叉子前进。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;9c00415d-fb25-47b1-bf1d-507dbb78edc9&#34;,&#34;dropCap&#34;:false}&#34;&gt;We wanted to solve this problem quickly and with minimal surgical intervention to Presto’s core code.为了实现这一目标，我们建立了一个简单的机制，该机制在高负载的情况下动态调整了Pinot的查询超时。即使令我们惊讶的是，这种简单的机制，加上我们的基于路由层的费率限制，在过去的3年中，我们对我们有很好的服务，没有重复此类事件。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data data-wp-block-name =“ core/heading” data-wp-block =“ {”级别“：3，”哈希：“ 04BA68AE-7F12-4D2E-8672-8672-2C8C24DD7E5C”}&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ dbfa61c3-9c6e-4297-4297-860c-7b0404034b546a”，“ dropcap”：dropcap“：false}”&gt;一个人可能不直接地揭示了Pinotsql tosther和build plotefter，又可能想知道一个人可能不想再启用了一个简单的pass。使用中微子方法的原因是，当时，Uber有两个OLAP数据库：AresDB和Pinot。使用Presto，我们可以隐藏在这两家商店中处理不同查询语言的复杂性。除此之外，使用PRESTO，我们可以启用多阶段查询，当时Pinot中没有可用的查询。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;H3 Data Data-Wp-block-name =“ core/heading” data-wp-block =“ {”级别“：3，” hash&#39;：“ 7d958c3d-b6bc-4de2-b7cd-b7cd-94f877707e079e079}&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 50454C5D-05B0-4C26-B1C4-1C4-186068573E00”，“ dropcap”：dropcap“：false}”&gt;我们已经面对一些与中族有关的挑战。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ C94E05E8-3684-4D1B-BA85-D9CB555555551EB90”，“ dropcap”：dropcap“：false}”&gt;首先是用户的复杂系统。作为设计的一部分，中微子必须进行SQL-to-SQL翻译。此外，它只能部分将查询计划推向Pinot。自然，Pinot返回的响应必须在一定限制下修剪，并且由于我们向Pinot发送了SQL查询，因此必须使用限制条款执行限制。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coraph”“ data-wp-block =” {“ hash”：“ FEC4FBAC-D74C-4677-4677-A6D6-9FFE5B060933”，“ dropcap”，“ dropcap”：false}“&gt; false}”&gt;推送的计划可能不会限制限制限制，并且可能会限制限制，并且会限制限制，或者将其置于quertion fip的限制，或者限制（或者均可限制）（或者）（或者）（或者）（或者）（或者）（或者）（或者）（或者）（或者）（或者）（或者）（或者均可限制）。放置我们自己的默认限制会更改查询的语义，并可能导致不正确的结果，而未能使查询失败会导致用户的经验不佳。这也在图5中的示例中证明了这一点，在该示例中，我们添加了10,000的默认限制。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coragraph” data-wp-block =“ {” hash&#39;：“ C758F982-ACCC-4A9F-BCB0-E3B2583D1E38”，“ dropcap”，“ dropcap”：false}“：false}”推入查询。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ D0874AEF-8420-4FB8-B524-D24-D036343D3413”，“ dropcap”：false}“：false}”&gt;第二个挑战是缺乏联接支持。中微子不支持加入，并且只能支持其不优化的plan-tree的查询，没有一个大于一个子节点的节点。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 7a58e363-10c1-443c-ac17-570555Ac8b9d5”，“ dropcap”，“ dropcap”，“ dropcap”，“ dropcap“：false}”利用具有Neutrino的多阶段引擎。这也使我们处于目前的技术堆栈与Pinot的下一代查询引擎不符的位置。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ C3254ED6-B57D-4B58-4B58-9B83-773A3A3F0457C9”，“ dropcap”&gt; dropcap“：false}”&gt;第三个挑战是违反租户隔离的范围。中微子代理来自100多个呼叫者的交通，其中许多可能正在击中其专用的黑皮诺租户。因此，中微子最终成为共享资源，并在查询级别打破租户级别的隔离。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ E8D63612-32B7-4491-B19E-07E-07E-07E39EA6C68D”，“ dropcap”&gt; false}“&gt;最后一个挑战是发展的挑战。在过去的2  -  3年中，我们花费了巨大的精力来解决大量查询翻译问题并改善对查询下降的支持。但是，Pinot继续迅速改善，并赶上Pinot中新的SQL功能（甚至是新的Pinot UDFS）需要中微子的相应变化。这通常变成瓶颈K适用于试图利用这些新功能的用户。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data data-wp-block-name =“ core/head” data-wp-block =“ {”级别“：3，”哈希：“ 007F6534-C06A-4A7E-4A7E-ABBE-abbe-abbe-abbe-00eb8471a8}”&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;578fb714-b8fd-4bd1-a9db-c80f11e521a0&#34;,&#34;dropCap&#34;:false}&#34;&gt;Neutrino is a business-critical, tier-0 service at Uber, and serves more than half a billion Apache Pinot queries daily.我们的估计表明，这些查询中有超过三分之一利用了中微子的执行引擎，即它们仅部分推出查询并在中微子内执行其余的计划。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/encor” data-wp-block =“ {“ hash”：“ 4981DD44-F59E-42C4-8A07-F07-F0BECA467845”，“ dropcap”，“ dropcap”，“ dropcap”：false}“&gt; fords}”&gt; cisters cisters cisters cisters cistery cistery cistery cistery cistery apceert的100,000个ipecache apacke avers cippers apacke avers，&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;9928b44e-113a-4dc7-91ce-55477c4b699b&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;H2 Data-Wp-block-name =“ core/heading“ data-wp-block =” {“ hash”：“ 0929BAB1-5781-4D32-B5D9-1D9-1D16789B03F5”，“ LEVEL”：2} class =“ class =” wp-block-heading =“ wp-block-heading”&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph“ data-wp-block =” {“ hash”：“ 2F8653DC-1FD4-4DB2-8CE5-1558CF75035E”，“ dropcap”：false}“：false}”在随后的博客中，我们将分享我们计划如何在Uber更广泛地采用Pinot SQL，以及我们计划如何通过基于中微子的方法来应对挑战。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data data-wp-block-name =“ core/saparator” data-wp-block =“ {” hash&#39;：“ C3283466-39E2-455A-9628-5FAC51FB3096”，“ obisitical&#xA;&#xA;&#xA;&#xA;&lt;h1 data-wp-block-name =“ core/heading” data-wp-block =“ {”级别“：1，”哈希：“&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;7bb07e93-6bab-4dfa-bee2-69ea1879722f&#34;,&#34;dropCap&#34;:false}&#34;&gt;Our experience at Uber of serving hundreds of low-latency analytics use cases has made it clear that OLAP systems should be able to support query features such as window functions和子征服。阿帕奇·皮诺（Apache Pinot）直到2023年才得到这种支持，而中微子被证明在弥合差距方面非常有用。此外，中微子在单个过程中运行整个计划的方法已被证明足以可靠地处理10,000 QP。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ fontsize”：“ small”，“ hash”：“ 79b746e5-e7fa-4e40-a20f-3dbf29a2ee50”，“ dropcap”：dropcap“：false}” class =“ smmall-font-font-font-font-font-size”&gt; apache &lt;sapache &lt;sapache &lt;sapache &lt;sapache &lt;sapache &lt;sapache &lt;sapache &lt;/sup&gt;® Hive &lt;Sup&gt;™&lt;/sup&gt;，Apache Cortite &lt;sup&gt;™&lt;/sup&gt;，Pinot和Hive是美国和/或其他国家/地区Apache Software Foundation的注册商标或商标。使用这些标记不暗示Apache软件基金会的认可。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ fontsize”：“ small”，“ hash”：“ 00bf4a57-ab56-410e-9e0f-ac42bd42bd42bd409e36，“ dropcap”，“ dropcap”： Oracle和/或其分支机构的商标。其他名称可能是其各自所有者的商标。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ fontsize”：“ small”，“ hash”：“ E7FD827A-9427-4A8C-8C-8F62-AFCBBBBBBB4A39077”，“ class =“ has-small-font-size”&gt; &lt;em&gt; presto &lt;sup&gt;®&lt;/sup&gt;是LF Projects，LLC的注册商标。 target =“ _空白” rel =“ noreferrer nooopener”&gt;让火花飞&lt;/a&gt;”，&lt;a href =“ https://openverse.org/image/collection？ href =“ https://creativecommons.org/licenses/by-nc/2.0/?ref=openverse” target =“ _ blank” rel =“ noreferrer noopener”&gt; cc by-nc 2.0 &lt;/a&gt;。&lt;/a&gt;。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ fontsize”：“ small”，“ hash”：“ E7FD827A-9427-4A8C-8C-8F62-AFCBBBBBB7A39077”，“ dropcap”，“ dropcap”，“ dropcap”：fals} class =“ size-size-size size size size”，根据APACHE许可证的一个或多个贡献者许可协议，版本2.0。</description>
      <pubDate>Wed, 11 Dec 2024 06:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【How Uber Uses Ray® to Optimize the Rides Business】Uber如何使用Ray®优化乘车业务</title>
      <link>https://www.uber.com/blog/how-uber-uses-ray-to-optimize-the-rides-business/</link>
      <description>【&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:1,&amp;quot;hash&amp;quot;:&amp;quot;6d4db847-5b7c-4304-8e08-f8f10adad1e6&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;98553b3a-2116-4d3d-8689-809446b59914&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Computational efficiency is a significant challenge when scaling solutions to a marketplace as large and as complex as Uber. The running and tuning of the Uber rides business relies on substantial numbers of machine learning models and optimization algorithms. Luckily, many pieces of the system can be treated in parallel. &lt;a href=&#34;https://www.ray.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Ray&lt;/a&gt;&lt;sup&gt;®&lt;/sup&gt; is a general compute engine for Python® that’s designed for ML, AI, and other algorithmic workloads. We describe how Uber has adopted Ray to enable mission-critical systems. Using Uber’s mobility marketplace allocation tuning system as an example, we found performance improvements of up to 40 times that unlocked new capabilities. It also improved developer productivity by increasing iteration speed, reducing incident mitigation time, and lowering code complexity.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;24bc7b6a-4e02-4ec2-b304-1ce564234cf7&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;5fafdb91-c35e-411d-8867-695b33547d03&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-motivation-and-background&#34;&gt;Motivation and Background&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f019c193-5447-427b-9955-ce38bda5ac78&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;To manage the health and efficiency of the mobility marketplace, Uber has several levers it can adjust, such as offering incentives for drivers to complete a certain number of trips per week or promotions that provide riders with discounts on their trips. Figuring out how to set these levers to efficiently achieve various targets and maximize outcomes is both a technically challenging task and a high-value opportunity for the company.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d4a8bd64-9c55-4ca6-a646-6f0a6226128d&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;One of the problems we’d like to solve is shown in Figure 1:&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1102900,&amp;quot;sizeSlug&amp;quot;:&amp;quot;full&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;7896eba9-0b13-4be1-ac5e-355b6d9ad115&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-full&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;408&#34; height=&#34;161&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-1-17363101223168.png&#34; alt=&#34;&#34; class=&#34;wp-image-1102900&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=408,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-1-17363101223168.png 408w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-1-17363101223168.png 300w&#34; sizes=&#34;auto, (max-width: 408px) 100vw, 408px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 1: Marketplace incentive objective function.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;b82215ba-5c00-45f0-beef-299dde7b571c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;fe9f3f3c-e70c-4a1d-95ba-924428069524&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In this problem, we’d like to maximize some objective “f” that has some value to the business by changing the variables we control, “b.” Since these variables are controlled per city, we refer to the granularity as city-lever. We’re also subject to some constraints that are meant to keep the marketplace healthy. In practice, this is a problem that gets solved weekly, and the control variables remain in effect for a week.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;5ccfb09e-1c98-4694-a7b2-bc0e7f12bf8e&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;To accomplish this, we leverage the vast amount of observational and experimental data at our disposal to inform these decisions. This requires building a system that can scale to handle large amounts of data for model training and inference, and accommodate many decision variables.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ab142ea2-a84c-40f3-8ee2-8dd231a2d60d&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We designed a workflow shown in Figure 2 to achieve our goal. There’s a feature store system at the beginning to process the data and populate features for ML models for machine learning models. The second ML model training part does the model training and serving for predicting budget allocations. The third budget allocation part is doing the optimization and evaluation based on the equation in Figure 1 to find the most optimal budget allocation solution.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;84a371a9-b2b8-497e-bc68-d7433c0df820&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXfqqWRtH072l_ep3noNNwZuaCagDtKO71HZoHvS-ACQKOu76s2Un8HuAXnGdvyg7mGeFcI7eCik03dAUc08SD_EzHQt70z8tprDLyIkfWHVkAg18qTxnKuGuijOe5JoqtePrQJEtNUtXzRogqroa0Bm2VFl?key=49MxSqxpePS_HACi2LK4Iw&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 2: Budget allocation system workflow.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;32ee6859-0bef-4a41-9c53-5f1f914f822a&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c48b9695-c709-4982-b38f-8906c7c75a22&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;This original workflow is purely based on ‌Apache Spark&lt;sup&gt;™&lt;/sup&gt; for distributed computations. Spark works pretty well when it comes to the data processing in the first feature store system part. However, when it comes to Pandas isn’t as good. We’ve tried Pandas UDF (User-Defined Function) or multi-threading for parallelism, but the speed improvement isn’t ideal. So, we decided to try Ray, as it’s designed for natural Python code parallelism.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;bdb75536-fc7b-49c4-a0ac-be487a3f5e2b&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;b73fa749-93f8-4b1c-9da1-3286bc1beff0&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-development-and-deployment-challenges&#34;&gt;Development and Deployment Challenges&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;659518be-ac2f-4b02-bf1a-66484316a33d&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;There are some major bottlenecks in the original Spark-based budget allocation.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;7fdcc9c8-2e05-4f32-ad7b-b5d6ddeaf4d6&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-parallel-nature-of-spark-vs-ray-distributed-framework-choice-bottleneck&#34;&gt;&lt;br&gt;Parallel Nature of Spark vs. Ray: Distributed Framework Choice Bottleneck&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6f443bf9-2797-4467-b49b-d23a88b30d4b&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;As briefly introduced at the end of the previous section, Spark and Ray have their own pros and cons as a distributed framework. Spark is good at handling data processing given specific Spark/PySpark APIs, and it takes care of all the parallelisms between different Spark executors under the hood. However, Spark can’t accept Pandas operations or user-customized Python code and make them run in parallel automatically. On the contrary, Ray can easily make Pandas code or natural Python functions run in parallel, which is a perfect use case for applications that Spark can’t accelerate in our workflow. However, Ray can’t support Spark-related APIs so far and Ray itself has limited data processing API support like Spark. Ray data may be a potential solution in the future, but so far it’s mainly used for machine learning instead of general data processing purposes. So, it’s difficult to just use one simple distributed framework to achieve our goal. Both Spark and Ray have their own benefits we can take advantage of.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;663f37e9-d88e-4bdb-adb4-cfea54cb71dd&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-high-concurrency-lightweight-parallelism-application-speed-bottleneck&#34;&gt;&lt;br&gt;High-Concurrency, Lightweight Parallelism: Application Speed Bottleneck&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d51eaeca-7245-4fcb-8215-ff5a7d349c69&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We have many high-concurrency, lightweight parallel Python functions inside our applications. For example, we have an optimization function for each city and they can finish quickly in 1-2 seconds. However, if we want to do thousands of cities’ optimization functions simultaneously, the ‌ arrangement and allocation can be a problem. We’ve considered several methods:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;ordered&amp;quot;:true,&amp;quot;hash&amp;quot;:&amp;quot;98ae92d3-8b45-43ce-8575-ac1d9c20bd95&amp;quot;,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Spark&lt;/strong&gt;: Since Spark doesn’t support Python functions in parallel without using Spark APIs, all these city optimization functions are‌ running in series in Spark’s driver node only.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Pandas UDF&lt;/strong&gt;: We tried Pandas UDF on Spark to accelerate the Pandas dataframe operation speed. However, the speed improvement isn’t ideal. Also, Pandas UDF can’t parallelize general Python code.&amp;nbsp;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Independent job for each city&lt;/strong&gt;: We need to launch a Docker&lt;sup&gt;®&lt;/sup&gt; container for each city to run, which contains a launching overhead and potential computing resource waste.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;beab0f37-e28f-4557-933c-933eb40f086e&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-spark-and-pandas-based-codebase-code-migration-bottleneck&#34;&gt;&lt;br&gt;Spark and Pandas-Based Codebase: Code Migration Bottleneck&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;476fe46e-6593-4202-b20e-2c850aedd6d1&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Since we have legacy code running on a Spark-based cluster, there’s a lot of PySpark code written to do the data preprocessing and postprocessing. However, Ray doesn’t naturally support PySpark or Spark-related code. If we want to migrate all of our code to run on Ray, the code migration cost can be huge and requires many engineers to work together to convert all the legacy PySpark code to some equivalent Ray-understandabledable code.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c0dd0a4d-9b75-4a78-a8d8-b1c36a77a34a&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;86b680a1-7bbc-4598-b49a-fa91a881dfc5&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-architecture-solutions&#34;&gt;Architecture Solutions&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6f9c2a1c-56fd-417b-8e05-2b337d5b00ad&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;To address the bottlenecks mentioned in the previous section, we developed a hybrid mode with both Spark and Ray available in Figure 3. We think we should take advantage of the benefits from both Spark and Ray. The logic is simple and straightforward: put the data-processing related work on Spark and put the parallel Python functions on Ray.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;be792b5b-afe1-49fb-b423-ee9b004e2e5c&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXfRi56StMWb49BA7ThjaNgJpstMqXzxFk2RjPgny7kIFn3elCOdEofPCCkIlSUcKSw9KXHgHNx_ndT7AZuRHhFPIlPV3zjGyaNUevcaXU622M4M2N0K0JIlrJKQ1HLTgNeDnnXh2fGbk_AKvIOvR9lJa6qe?key=49MxSqxpePS_HACi2LK4Iw&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 3: Spark and Ray hybrid execution mode.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;3bc15eaf-6c76-44ef-a992-17ca9bed7b5a&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;da9cc907-8b38-4081-bb1c-1f45c0600557&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Figure 4 shows the application workflow. Spark driver plays an application master role here, and the application code mainly runs on Spark driver. When loading the data from Apache HDFS&lt;sup&gt;™&lt;/sup&gt; or doing data preprocessing, Spark driver distributes the workload to Spark executors and does any data-related computations. When the Spark driver encounters something that can’t be computed in parallel on Spark, it sends the task to Ray. The Ray cluster serves as an external computation server here on request. After receiving the function requests from Spark, it executes the functions sent from Spark driver in parallel and sends the results back to Spark driver when it’s done. Spark driver summarizes the output from Ray and does some data post-processing together with Spark executors. Finally, Spark writes the output data frame back to HDFS.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;89e7acaa-40cf-472a-adcb-86b13bfc51a6&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXetdUpXnTHfnqKQhs-rJgL9qpLhHbC7mduH5CCRBEAMT_BOPI37DXmhMcq873xPd_F_rzOROVhV3tQgZv2tgKGaSVhyzEAHrE7_TxvlJ-1jm-sCkULpQbMC2ccUzuC_gTmqf6b0GlKfPhRD3jH7ekc8BgXq?key=49MxSqxpePS_HACi2LK4Iw&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 4: Spark and Ray application workflow.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;8a2eb10d-20b3-4cb1-954d-da89fd9e00c4&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;36c2f76c-db7c-4705-b1be-ac701213e496&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;This design can resolve the previous main blockers for our applications. We don’t need to worry about the trade-offs between Spark and Ray because we have both of them. As an external server to Spark, Ray can accept any high-concurrent requests from Spark and return the compute result back to Spark efficiently. Since Ray has a controller inside to arrange the tasks sent to the Ray cluster, we don’t need to implement an orchestrator to monitor the existing tasks or a message queue to arrange all the waiting tasks. The code migration cost is also low because we can still keep most of the PySpark code inside the Spark cluster to be executed. Only the functions suitable for Ray will be moved to the Ray cluster to be executed in parallel.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6538b045-f1ae-40c3-8fb2-2ce2bc4987ad&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Following up on this hybrid design, we have also developed several features and tools to help further improve our application speed and also help our engineers improve their developing iteration speed.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;f10c6d36-59ee-4e7a-9b12-583e649428c5&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-deployment-and-launch-time-optimization-iteration-speed-improvement&#34;&gt;&lt;br&gt;Deployment and Launch Time Optimization: Iteration Speed Improvement&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c0ba2548-5e10-4066-b523-4b903ee6586a&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Figure 5 shows how we optimize our job deployment and launch methods for our engineers to improve the development iteration speed. We find that it can be time-consuming for users if they want to do a remote test because they need to build a new Docker image every time, even if they just do a small change to the application code. Usually it takes about 15-20 minutes to build a Docker image. To accelerate this process, we use an object store like Amazon S3&lt;sup&gt;®&lt;/sup&gt; as an intermediate storage layer for application code. Every time a user launches a job, they just need to provide a basic Docker image that only stores the libraries. The changed application code gets deployed in real time, so they don’t need to build a new Docker image every time. As a result, we can control our job deployment and launch time within 2 minutes, which significantly increases our experiment iteration speed.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;89d59452-3a43-404b-b058-4d3b39004d85&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXf1ZfT9gn2YWCZkHti3Q71Q4iHZhFudLFEFuI4AfalgafjlK5BNS11Ty1jC_JiKhVNeLXl9P_9HWxxUKuZ2SM5A6Te26R_L2G9HrkzFv6GE6H0Z-iVKkhZJd9wGHgVNzXVPKDw0jA6d9uODTL4O1GXevou8?key=49MxSqxpePS_HACi2LK4Iw&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 5: Ray cluster deployment and launch process.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;8e9ae225-e41e-4ab4-bf33-a1ffa261bebd&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;df00e836-1035-45ed-8a55-d9e3ea5c28dc&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-data-transmission-speed-optimization&#34;&gt;&lt;br&gt;Data Transmission Speed Optimization&amp;nbsp;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7281956d-90fd-4862-9ace-e04b96b51ee7&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;When introducing a Ray cluster as an external cluster, communication between the Spark cluster and Ray cluster can sometimes become an issue. It’s good when the data size is small so that we can send the data quickly and ignore the transmission overhead. However, when the data size is big at the GB or TB level, the transmission time can’t be ignored. If directly sending the data from a Spark cluster to Ray, several factors can affect the transmission rate:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;562c3dfe-b24e-4a41-b2c1-58081816b103&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Internet bandwidth&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Data serialization and deserialization&amp;nbsp;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Spark driver Pandas converting speed&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;b13ade3f-8f60-492a-ac94-ff1ec893facb&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Since Ray doesn’t support Spark dataframe, Spark driver needs to collect the Spark dataframe from different executors into Spark driver and convert that into a Pandas dataframe. Also, it can potentially cause an out-of-memory issue on Spark driver if the Pandas dataframe is too large.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;532ac1ab-0b64-4d16-8d68-44f59e9539be&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXfVIoGLcaYYYMPZ_A1J_ftBDNs95K-_QUBAlbCtfyfimUhZLJukWjsJDcOPXBy0HPp2HKbPCIKEYZHe4psv7zDNp_24m-VWnosHuQCUHV0DkDWyG1stSuIJtjodg9OR4bAhuGkkFl7pzEYdlRadkJSvRn6U?key=49MxSqxpePS_HACi2LK4Iw&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 6: Data transmission between Spark and Ray.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;39fe1c02-9e98-4cdf-8344-7455ae0ed05c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;53cadc0f-8112-4c36-a344-f40c29e49d94&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;To accelerate ‌data transfer speed and avoid the potential out-of-memory issue, we introduced HDFS as an intermediate storage layer for large dataset transfers. We get a bigger bandwidth when communicating with HDFS. More importantly, we can directly use Spark to write data to HDFS as Parquet files and use Ray’s data API to load the data from HDFS to Ray.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;c9fcc6f9-8bd1-4c72-9d71-5e9838c37337&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-production-and-development-environment-aligned-notebook&#34;&gt;&lt;br&gt;Production and Development Environment-Aligned Notebook&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ef582e36-d3af-492b-a3f0-2876b74e1faf&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;To help developers improve their speed and decrease the workload to convert ‌staging code into production, we designed a notebook that has the same environment setup and standard as the production environment. Our developers can test their code in the notebook. After they make the program run in Notebook, the same code can also run in production. A classic example is our data scientists prefer to write Pandas related code in Notebook. However, previously we didn’t have a good method to accelerate Pandas operations in parallel in production. Sometimes backend engineers need to manually convert these operations into Pyspark to make the program faster. After adopting Ray, data scientists can directly write their Pandas code in the Notebook and backend engineers can easily migrate those Pandas code into production without much conversion.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;23cabf88-20a1-4dfc-a2ab-968553404efd&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXdnotI1dkCTova1OLQqKmUVlnixdP5MhM15RW8Pd3txLln0ec4wMGDygwcjh4XY9GgWQo8yf6XRfMJypTAcX4xikAt__aTVlGAUlAgDvMdwTwqCOBc6L9opCe_Av7kguTAzGosLzLxZH4uOcXjs-vqD-_A?key=49MxSqxpePS_HACi2LK4Iw&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 7: Production and development environment-aligned notebook.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;eb644d2c-10f5-4377-80c7-ed130cae6707&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e180eaf8-8e0d-405b-ab0e-d00f223699ee&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;89fc67ee-3624-4d06-900e-e525c1dbd9ce&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-use-cases-at-uber-admm-optimizer&#34;&gt;Use Cases at Uber: ADMM Optimizer&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;071b4ced-c104-43d3-a5ed-4ba3dc818c5f&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In this section, we describe the implementation of one component within our incentive budget allocation system with Ray, the optimizer that divides a total budget into a vector of allocations for each city-lever.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9cf35de9-6865-4852-8379-3b3240499378&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Because we impose simple, conic constraints on the allocations and impose smoothness conditions on our machine learning models, the ADMM (Alternating Direction Method of Multipliers) is a good fit solving our allocation problem, given its ability to solve non-linear, non-convex, differentiable problems.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f16e26be-59f7-4537-b3df-72f895131d81&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;One additional advantage of the ADMM algorithm is that it can parallelize well, which allows our system to scale when we add cities or levers.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;836bf0f7-c9fc-4578-b1dc-51213ff06d18&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;To solve our optimization problem, we translate it to a slightly different formulation in Figure 8:&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;ec1f3e64-016d-4b45-bf1d-2401ca6edf7f&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXeoaGP55ysoOT1y0NerkCw1bFEuAMbX38rMW10EMsqFLmUnrIhhWMs8xjJmwUWzNFyMfGy4SbeRba6SaxsRjOmQ3rFzW2-3SD-VB7_8gBdp9cltOhe5FHfYTDfBJiNQCqAS6Lhl3z8Y-FnuXPiZvvkHXpY?key=49MxSqxpePS_HACi2LK4Iw&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 8: Optimization formulation.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;743ceca4-4508-499e-8dda-3a7abddaaa6f&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a5a52dcc-6ec4-4522-ad1c-a7144cdb3505&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;That results in update steps, which we solve to execute the ADMM algorithm in Figure 9:&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;f54b8a15-a0b3-42ba-bbdf-293e7ffebc7a&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXeimruB8A1gbb_dt-93BrrBKj0m4-jG7IzRZk926_vpatRAHtLplzWcNNfOYrPdMhTvSKVUW27yJSDXH9mPevAOwupZM_9kjWiXlLcskVnFfrv_b2FTdW9fmqcjuXj-qrOpzebMFqJfxryCouhjdx6lnCNW?key=49MxSqxpePS_HACi2LK4Iw&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 9: Optimization solver.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;8513c251-769f-4b80-802b-a07b2c85f758&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a7388e24-93f0-4399-a3be-931cc7472974&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The first step is solved in parallel, using Ray, with a primal-dual interior point algorithm implemented in cvxopt. Rho can be tuned to ensure this problem has a positive semi-definite Hessian. The second step can be solved analytically, and the third step is trivial.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c13fce89-ec2e-4233-9a8e-3022576a2510&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;This is the workflow for our ADMM optimization algorithm and how Ray is applied to this architecture in Figure 10. Basically, it’s a loop for recurrent budget allocation ADMM optimization. It can be divided into the following steps:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9a977171-1f85-4cdd-944d-25df5bae3567&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Step 1: Initialize the problem.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;b82a92ec-2aae-4561-a2c3-f1d15a5ce0f5&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Step 2: Optimization in a for loop.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;ordered&amp;quot;:true,&amp;quot;hash&amp;quot;:&amp;quot;bcc32ae6-d982-4f10-a94a-2a46a7539056&amp;quot;,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Solve the individual city problems for each week in parallel [Ray].&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Summarize the city optimization result [Spark].&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Update cross-city constraint variables [Spark].&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Update the slack variables. [Spark].&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Check convergence criteria [Spark].&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9b95a230-f850-4c58-9dd2-975014a6e992&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Step 3: Record optimal allocation values, metadata, and convergence variables.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;ordered&amp;quot;:true,&amp;quot;hash&amp;quot;:&amp;quot;545199c2-1565-4382-b2f9-a916bfb65b21&amp;quot;,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&lt;/ol&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;83e61d49-cf0b-4a38-8943-dcb5ce0b9802&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXf_sfjVThyK76EzeSPEqJH-IEelIIOMJ53gAM3g3BwkJqYcwDkkHYC7O0RIr-LACqPbSc44JNj6QdwThAfx0ItulzLmFsZwhHIKAl2VKERWiYldjDuvnPdpEmvqUPoabZObwjuMERChn03sCuGEWB9ONhgV?key=49MxSqxpePS_HACi2LK4Iw&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 10: ADMM optimization workflow.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2349c725-068d-4601-b16b-42532ed3c803&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;66fb3d30-8144-4129-a658-42f210fea55b&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Each city week optimization function with ADMM is very lightweight, which takes about 1-2 seconds to finish. However, due to the large volume of high-concurrent optimization functions, the optimization speed becomes a bottleneck for our optimizer. After applying Ray for the city parallel optimization computations, we’ve achieved about a 40-time improvement for our budget allocation optimizer.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ea6d149f-78cf-4d1e-b50d-6cf6cdbf3979&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9b0076be-6133-4f40-8342-ab64940eaa48&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-kuberay-back-end-support-from-uber-michelangelo&#34;&gt;KubeRay Back End Support from Uber Michelangelo&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;23b64f73-81bb-47ec-8cf6-3c3eab887683&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;A good Ray application should have a good parallelism strategy at the application level and a solid Ray back end to support all these parallel computations. In this section, we describe how the &lt;a href=&#34;https://www.uber.com/blog/from-predictive-to-generative-ai/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Michelangelo (Uber’s AI platform)&lt;/a&gt; team built a reliable Ray back end for all the client teams to use in Uber.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0ba763e7-3698-4b86-b33f-83c1d56736c6&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Figure 11 shows how the Ray cluster is provisioned in the back end. When Ray clusters are initiated upon job submission, resources for the Ray cluster are provisioned dynamically based on the job’s requirements, such as the number of nodes, CPU, GPU, and memory specifications. Once the Ray cluster is provisioned, the Ray head node is first established, then it discovers and connects all of Ray’s worker nodes. The application connects to the Ray head node, which coordinates the distributed execution of Ray tasks across worker nodes. The connection details (IP address and port) for the Ray head node are automatically discovered and provided to the application, allowing seamless execution without manual intervention. After job completion, the application sends a request to the compute layer and releases the allocated resources back to the pool, ensuring efficient utilization across the platform.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;15d1b3b5-98ff-46db-a08c-820c2253fbc0&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXegzZLISz3aS6ggnyA3UcVk3PrhB5pxWxBnGtVk-y2a8F_Ttw7Kf4ReKfd7ck_Vh0FnIWV9dCH8W8YYQ7R2hYVgP_afVEYxXd3d2j58WugVlURDZIbTyimZ2fzNgbEcw_wLboCzbYOqdaiEdtgaGTjyekj_?key=49MxSqxpePS_HACi2LK4Iw&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 11: Ray cluster provision workflow.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ad5c5720-1bb5-40c0-81e2-e520bf0b058f&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c7d48eb8-82b0-4fac-ab88-ce554fd83a98&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We also investigated and adopted ‌other modules outside of Ray’s Core service. Ray integrates well with a variety of open-source frameworks and libraries in the ecosystem, and makes it easier to experiment with new techniques from industry. We integrated &lt;a href=&#34;https://www.uber.com/blog/horovod-ray/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Horovod with Ray&lt;/a&gt;, adopted &lt;a href=&#34;https://www.uber.com/blog/elastic-xgboost-ray/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Ray XGBoost&lt;/a&gt;, Ray Data, Heterogeneous training cluster, and Ray Tune, which made Ray the common layer in Michelangelo for training and fine tuning XGB, DL, and LLM models.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;4e7dadae-db90-47ec-a264-fb94108889aa&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In 2023, we modernized our resource cluster from &lt;a href=&#34;https://www.uber.com/blog/resource-scheduler-cluster-management-peloton/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Peloton&lt;/a&gt; (old resource scheduler) to a new Kubernetes&lt;sup&gt;®&lt;/sup&gt; based &lt;a href=&#34;https://www.uber.com/blog/scaling-ai-ml-infrastructure-at-uber/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Michelangelo Job Controller&lt;/a&gt; service, and uplevel the resource management experience for both CPU and GPU training jobs.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;56e235a1-b3c2-48c2-b9ef-188b8a482fda&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Despite infrastructure constraints across on-premises and cloud providers, the service abstracts compute cluster and hardware complexities from the user, and ensures a dynamic resource selection, high scalability and flexibility, and more efficient resource scheduling, which makes it well-suited for diverse user needs in Uber. Benefits include:&amp;nbsp;&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ca6f83cb-7b8b-420e-b412-b58f46261e06&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Automated Resource Allocation&lt;/strong&gt;: The design uses CRDs to define resource pools, automatically assigning jobs to appropriate pools based on organizational hierarchy, cluster size, and HW type requirements. This eliminates manual resource allocation, reducing contention and oversubscription.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Dynamic Scheduling&lt;/strong&gt;: A federated scheduler intelligently matches jobs to clusters, considering factors like resource availability, affinities, and job priorities. This ensures optimal resource usage and prevents scheduling failures.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Cluster Health Monitoring&lt;/strong&gt;: Continuous monitoring of cluster health and maintaining an up-to-date resource snapshot ensures jobs are only scheduled on healthy clusters with available resources.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Simplified User Experience&lt;/strong&gt;: Users don’t need to manage the underlying infrastructure—the system abstracts complexities, allowing them to focus on their workloads while the system handles resource management.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Scalability and Extensibility&lt;/strong&gt;: The design supports new hardware, cloud bursting, and is compatible with emerging technologies, ensuring it can scale and adapt to future needs while maintaining efficient resource management.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d5a3f1be-a170-4c50-be4f-56848d8a942c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Later in early 2024, we successfully migrated all existing XGB and deep learning training jobs to the Michelangelo Job controller. With the benefits from the job controller, we keep unblocking more use cases, like large language model fine-tuning and optimization applications.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;65033d4c-f363-487b-9629-f1a89e2216ce&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:1,&amp;quot;hash&amp;quot;:&amp;quot;2fe3859d-0f0f-4143-abc7-e1c523a72018&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-conclusion&#34;&gt;Conclusion&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;27937173-9673-496d-bd90-1b7e0c8ccc7f&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Ray has become a critical tool in Uber for machine learning and everything that has the potential to be parallelized, like optimization algorithms, evaluation algorithms, and more. Ray is now widely used at Uber, starting with the Uber Michelangelo team as a fundamental back end and applied to different application teams like the Marketplace Investment team to do budget allocation optimization for Uber. By using Ray in Uber applications, we’ve achieved a huge performance improvement and provided a more friendly user experience to our data analysts and developers.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;56dcedb1-91d0-4f97-ac4c-93cd6520a2d6&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-acknowledgments&#34;&gt;Acknowledgments&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0bb1342b-ad46-45ed-9d99-721bce369294&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Thanks to all the members from the Uber Marketplace Investment team and the Uber Michelangelo team for the great effort.&amp;nbsp;Thanks to Ryan Clark for actively reviewing the blog and giving valuable feedback.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;32beef5a-6370-4a6c-9536-78743702801c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;Cover Photo Attribution: ”&lt;a href=&#34;https://www.flickr.com/photos/40803964@N08/4712207733&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Fast Train&lt;/a&gt;” by &lt;a href=&#34;https://openverse.org/image/collection?source=flickr&amp;amp;creator=Sander+van+der+Wel&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Sander van der Wel&lt;/a&gt; is licensed under &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/2.0/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;CC BY-SA 2.0&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;96d29206-02d2-4650-ae6e-1fb050dc8928&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;Amazon Web Services, AWS, Amazon S3, and the Powered by AWS logo are trademarks of Amazon.com, Inc. or its affiliates.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;59a5cba3-be93-4729-a5a2-2f4530473fe4&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;Apache&lt;sup&gt;®&lt;/sup&gt;, Apache Spark&lt;sup&gt;™&lt;/sup&gt;, HDFS, and the star logo are either registered trademarks or trademarks of the Apache Software Foundation in the United States and/or other countries. No endorsement by The Apache Software Foundation is implied by the use of these marks.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;f9421f9f-1104-4649-880e-39ba6dc193a5&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;Docker&lt;sup&gt;®&lt;/sup&gt; is a registered trademark of Docker, Inc in the United States and/or other countries. No endorsement by Docker, Inc is implied by the use of this mark.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;3bc99d4f-9762-45e3-890f-085e9145e52e&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;Kubernetes&lt;sup&gt;®&lt;/sup&gt;, etcd&lt;sup&gt;®&lt;/sup&gt;, and Kubernetes&lt;sup&gt;®&lt;/sup&gt; logo are registered trademarks of the Linux Foundation in the United States and/or other countries. No endorsement by The Linux Foundation is implied by the use of these marks.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;33c27c14-0493-445d-8d88-9b83ee14aadc&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;Python&lt;sup&gt;®&lt;/sup&gt; and the Python logos are trademarks or registered trademarks of the Python Software Foundation.&lt;/p&gt;】&lt;h1 data-data-wp-block-name =“ core/heading” data-wp-block =“ {”级别“：1，”哈希：“ 6D4DB847-5B7C-4304-8E08-F8F10ADAD1E6”}“}” class =“ class =” Wp-block-Heading-Heading-Heading“ ID =”&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 98553b3a-2116-2116-4d3d-8689-809446b59914”，“ dropcap”：dropcap“：false}”&gt;计算效率是对大型市场的缩放和大型市场的重大挑战。 Uber Rides业务的运行和调整取决于大量的机器学习模型和优化算法。幸运的是，系统的许多部分都可以并行处理。 &lt;a href =“ https://www.ray.io/” target =“ _ black” rel =“ noreferrer noopener”&gt; ray &lt;/a&gt; &lt;sup&gt;®&lt;/sup&gt;是Python®的一般计算引擎，是用于ML，AI和其他Algorithmit Workloads的一般计算引擎。我们描述了Uber如何采用Ray启用关键任务系统。以Uber的Mobility Market Place分配调整系统为例，我们发现绩效提高了40倍，可以解锁新功能。它还通过提高迭代速度，减少事件缓解时间并降低代码复杂性来提高开发人员的生产率。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data data-wp-block-name =“ core/saparator” data-wp-block =“ {” hash&#39;：“ 24BC7B6A-4E02-4EC2-B304-1CE564234CF7”，“不透明度”：“ alpha-channel“&#xA;&#xA;&#xA;&#xA;&lt;h2 data data-wp-block-name =“ core/head”“ data-wp-block =” {“ hash”：“ 5FAFFDB91-C35E-411D-411D-8867-695B33547D03”，“ LEVEL”，“：2}” class =“ class =” WP-Block-Heading =“ WP-Block-Heading”&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;f019c193-5447-427b-9955-ce38bda5ac78&#34;,&#34;dropCap&#34;:false}&#34;&gt;To manage the health and efficiency of the mobility marketplace, Uber has several levers it can adjust, such as offering incentives for drivers to complete a certain number每周旅行或促销活动为骑手提供折扣的旅行。弄清楚如何设置这些杠杆以有效实现各种目标并最大化结果既是技术挑战性的任务，又是公司的高价值机会。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph“ data-wp-block =” {“ hash”：“ D4A8BD64-9C55-4CA6-A646-A646-646-6F0A62226128D”，“ dropcap”&gt;我们想解决的问题之一如图1：&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {” id“：1102900，“ sizeSlug”：“ full”，“ linkdestination”：“ none”，“ align”：“中心”，“ hash”：“ 7899-0bba9-0b13-0b13-4be1-4be1-4be1-4be1-ac5e-35e-355b6d9ad” class =“ alignCenter size-full”&gt; &lt;img loading =“ lazy” decoding =“ async” width =“ 408” height =“ 161” src =“ https：//blog.uber-cdn.com/cdn-c.com/cdn-cgi/image/image/image/image/image/image/width=2160，质量= 80，OnError =重定向，格式= auto/wp-content/uploads/2025/01/fige-1-1-17363101223168.png“ alt =” class =“ wp-image-11102900” srcset =“ https://blog.uber-cdn.com/cdn-cgi/image/width=408,quality=80，quality = 80，onerror = redirect，format = auto/wp-content/uploads/2025/2025/01/5 https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror=redirect，format = auto/wp-content/wp-content/uploads/2025/01/01/01/figure-1-1736363101223168.png 30 sizes sizes sizes：sizes： 100VW，408px“ referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ WP-元素caption”&gt;图1：市场奖励目标函数。&lt;/figcaption&gt; &lt;/figcaption&gt; &lt;/figif&gt; &lt;/div&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ B82215BA-5C00-45F0-BEEF-299DDE7B571C”，“ dropcap”，“ dropcap”：false}&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;fe9f3f3c-e70c-4a1d-95ba-924428069524&#34;,&#34;dropCap&#34;:false}&#34;&gt;In this problem, we’d like to maximize some objective “f” that has some value to the business by changing the variables we control, “b.”由于这些变量是每个城市控制的，因此我们将粒度称为城市杠杆。我们还受到一些限制，旨在使市场保持健康。实际上，这是一个每周解决的问题，并且控制变量保持了一周的有效。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 5CCFB09E-1C98-4694-A7B2-BC0E7F12BF8E”，“ dropcap”：dropcap“：dropcap”：false}“&gt;为此，我们可以实现大量的观察力和实验性数据，以确定这些数据的范围，以这些数据验证这些数据。这需要建立一个可以扩展的系统以处理大量数据进行模型培训和推理，并适应许多决策变量。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ AB142EA2-A84C-40F3-8EE2-8DD231A2D60D”，“ dropcap”，“ dropcap”：false}“&gt;我们设计了一个工作流程以实现我们的目标。开始时有一个功能存储系统，可以处理数据并填充机器学习模型的ML模型。第二个ML模型培训零件可以进行模型培训和服务，以预测预算分配。第三个预算分配部分是根据图1中的方程进行优化和评估，以找到最佳的预算分配解决方案。 &lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ align”：“ center”，“ hash”：“ 84A371A9-B2B8-497E-BC68-D7433C0DF820 src =“ https://lh7-rt.googleusercontent.com/docsz/ad_4nxfqqwrth072l_ep3nonnwzuacagdtko71hzohvs-acqkkou76s2un8huaxngdvygg7m GEFCI7ECIK03DAUC08SD_EZHQT70Z8TPRDLYIKFWHVKAG18QTXNKUGUIJOE5JOQTEPRQJETRQJETRQJETNETXZROGQROGQROGQROGQROGQROGQROGQROAA0BM2VFL？ alt =“” referrerpolicy =“ no-tr-referrer”&gt; &lt;figcaption类=“ WP-元素捕获”&gt;图2：预算分配系统工作流程。&lt;/figcaption&gt; &lt;/fige&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {” hash&#39;：“ 32EE6859-0BEF-4A41-4A41-9C53-5F1F1F914F822A”，“ dropcap”，“ dropcap”：dropcap“：false}”：false}“&gt; &lt;/p&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph” data-wp-block =“ {” hash&#39;：“ C48B9695-C709-4982-B38F-8906C75A22”，“ dropcap”：dropcap“：false}”&gt;此原始工作流程纯粹基于parpache parkaphe &lt;sup&gt; sup&gt; usp，在第一个功能存储系统部件中的数据处理方面，Spark效果很好。但是，当涉及到熊猫不是那么好。我们已经尝试了Pandas UDF（用户定义的功能）或多线程以进行并行性，但是速度提高并不理想。因此，我们决定尝试Ray，因为它是为天然Python代码并行性设计的。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name =“ core/saparator” data-wp-block =“ {” hash&#39;：“ BDB75536-FC7B-49C4-A0AC-BE487A3F5E2B”，“ opacity”，“ opacity”，“ opacity”：“ alpha-channel” class =“ class =” wp-block-separator-separator-and and separator-abalpha and-alpha&gt;&#xA;&#xA;&#xA;&#xA;&lt;H2 Data-Wp-block-name =“ core/heading” data-wp-block =“ {” hash&#39;：“ B73FA749-93F8-4B1C-9DA1-9DA1-3286BC1BEFF0”，“ calle挑战&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph“ data-wp-block =” {“ hash”：“ 659518BE-AC2F-4B02-B02-BF1A-66484316A33D”，“ dropcap”，“ dropcap”：false}“：false}”&#xA;&#xA;&#xA;&#xA;&lt;h3 data data-wp-block-name =“ core/preading“ data-wp-block =” {“ latve”：3，“ hash”：“ 7fdcc9c8-2e05-4f32-4f32-ad7b-ad7b-b5d6ddeaf4d6”} id =“ h-paralallel-nature-nature-nature-vs-vs-distribed-framework-choice-bottleneck”&gt; &lt;br&gt; &lt;br&gt; Spark vs. Ray的平行性质：分布式框架选择瓶颈&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 6f443bf9-2797-4467-4467-b49b-d23a888888b30d4b”，“ dropcap”：dropcap“：false}”&gt;在上一节中简要介绍了他们的先前部分，Spark和Ray的Prosect and Comps and Cons和CONS的最终。在特定的Spark/Pyspark API下，Spark擅长处理数据处理，并且它可以照顾引擎盖下不同火花执行者之间的所有并行性。但是，Spark无法接受Pandas操作或用户注定的Python代码，并使它们自动并行运行。相反，Ray可以轻松地使PANDAS代码或天然Python函数并联运行，这对于Spark无法在我们的工作流程中无法加速的应用程序是一个完美的用例。但是，到目前为止，Ray无法支持与火花相关的API，Ray本身具有有限的数据处理API支持，例如Spark。射线数据将来可能是潜在的解决方案，但到目前为止，它主要用于机器学习，而不是通用数据处理。因此，很难只使用一个简单的区域核心框架以实现我们的目标。 Spark和Ray都可以利用自己的利益。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data data-wp-block-name =“ core/preading” data-wp-block =“ {”级别“：3，“ hash”：“ 663F37E9-D88E-4BDB-4BDB-ADB-ADB4-CFEA54CB71DD”} id =“ h-high-currency-lightweight-Weights-Paralleleism-应用速度 - 底层”&gt; &lt;br&gt;高恒流，轻量级并行性：应用速度瓶装瓶颈&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ d51eeeca-7245-4fcb-8215-ff5a7d349c69 c69”，“ dropcap”：false}“&gt;我们有许多高率，轻度燃料，problecurrency，proffalcap“：dropcap”：例如，我们对每个城市都有一个优化功能，它们可以在1-2秒内快速完成。但是，如果我们想同时执行数千个城市的优化功能，则‌排列和分配可能是一个问题。我们考虑了几种方法：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol data-wp-block-name =“ core/list” data-wp-block =“ {“ ordered”：true，“ hash”：“ 98AE92D3-8B45-43CE-8575-AC1D9C20BD95”，“值&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt; spark &lt;/strong&gt;：由于Spark不支持Python在不使用Spark API的情况下并行函数，因此所有这些城市优化功能均在Spark的驱动程序中串联运行。&lt;/li li&gt;。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt; pandas udf &lt;/strong&gt;：我们尝试了Spark上的Pandas Udf，以加速Pandas DataFrame操作速度。但是，提高速度并不理想。另外，Pandas UDF无法并行化一般Python代码。 &lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt;每个城市的独立工作&lt;/strong&gt;：我们需要启动一个docker &lt;sup&gt;®&lt;/sup&gt;®&lt;/sup&gt;容器，以供每个城市运行，其中包含一个启动的上空和潜在的计算资源浪费的启动&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data data-wp-block-name =“ core/heading” data-wp-block =“级别”：3，“哈希”：“ BeaB0F37-E28F-4557-933C-933C-933EB40F086E”}和基于熊猫的代码库：代码迁移瓶颈&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coraph”“ data-wp-block =” {“ hash”：“ 476fe46e-6593-4202-b20e-b20e-2c850aeedd6d6d1”，“ dropcap”：dropcap“：false}”&gt;，因为我们在基于spark的群集上运行了旧版代码，因此可以编写pyspers of pys pred preps ports ports ports pod/podrap tograp not pod/podrack working and podrap nod podrap notrap toprip。但是，Ray自然不会支持Pyspark或Spark相关的代码。如果我们想迁移所有代码以在射线上运行，则代码迁移成本可能很大，并且需要许多工程师一起工作以将所有旧版Pyspark代码转换为某些等效的Ray可遇到的代码。&lt;/p&gt;。&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name =“ core/saparator” data-wp-block =“ {“ hash”：“ C0DD0A4D-9B75--4A78-A8D8-B1C36A77A34A“，“不透明度”：“ alpha-channel”}“ class =” WP-block-separator has-alpha-channel-opacity&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data data-wp-block-name =“ core/head”“ data-wp-block =” {“ hash”：“ 86B680A1-7BBC-4598-B49A-FA91A881DFC5”，“ LEALC&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;6f9c2a1c-56fd-417b-8e05-2b337d5b00ad&#34;,&#34;dropCap&#34;:false}&#34;&gt;To address the bottlenecks mentioned in the previous section, we developed a hybrid mode with both Spark and Ray available in Figure 3. We think we should take advantage of the benefits来自Spark和Ray。逻辑简单明了：将与数据处理相关的工作放在Spark上，并将并行的Python功能放在射线上。 &lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ align”：“ center”，“ hash”：“ be792b5b-afe1-49fb-b423-ee9b004e2e5c”，“ src =“ https://lh7-rt.googleusercontent.com/docsz/ad_4nxfri56stmwb49ba7taba7thjangjpstmqpstmqxzxfk2rjpgny7kifny7kifn3elcodeofpccckilsucks W9KXHGHNX_NDT7AZURHHFPILPV3ZJGYANUEVCAXU62M4M2N0K0K0JILRJKQ1HLTGNNDNXH2FGBKBK_AKVIOVR9LJA6QE？ alt =“” referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ wp- element-caption”&gt;图3：Spark和Ray Hybrid执行模式。&lt;/figcaption&gt; &lt;/figcaption&gt; &lt;/fige&gt; &lt;/div&gt;&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 3BC15EAF-6C76-44EF-A992-17CA9BED7B5A”，“ dropcap”，“ dropcap”：false}&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ da9cc907-8b38-4081-bb1c-1f45c0600557”，“ dropcap”，“ dropcap”：false}“：false}”&gt;图4显示了应用程序工作流程。 Spark Driver在此处扮演应用程序主角，并且应用代码主要在Spark Driver上运行。加载来自Apache HDFS &lt;sup&gt;™&lt;/sup&gt;的数据或进行数据预处理时，Spark Driver将工作负载分发以激发执行者并进行任何与数据相关的计算。当Spark驱动程序遇到无法在Spark上并行计算的东西时，它将任务发送到Ray。射线群集可应要求用作外部计算服务器。从SPARK接收到功能请求后，它将并行执行从Spark驱动程序发送的功能，并在完成后将结果发送回Spark驱动程序。 Spark Driver总结了Ray的输出，并与Spark Executor一起进行了一些数据后处理。最后，Spark将输出数据框架写回HDFS。 &lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ align”：“ center”，“ hash”：“ 89E7ACAA-40CF-472A-472A-ADCB-86B13B13B13BFC51A6” src =“ https://lh7-rt.googleusercontent.com/docsz/AD_4NXETDUPXNTHFNQKQHS-RJGL9QPLHHBC7MDUH5CCRBEAMT_BOPI37DXMHMHMCQ873XPD_F_RZOROVHV3TQGZV2TQGZV2TGKGASV hyzeahre7_txvlj-1jm-sckulpqbmc2ccuzuc_gtmqf6b0glkfphrd3jh7ekc8bgxq？key = 49mxsqxpeps_haci2lk4iw = 49mxssqxpeps_haci2lk4iw&#39; alt =“” referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ wp- element-caption”&gt;图4：Spark和Ray应用程序工作流程。&lt;/figcatpion&gt; &lt;/figcaption&gt; &lt;/fige&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 8A2EB10D-20B3-4CB1-954D-DA89FD9E00C4”，“ dropcap”，“ dropcap”：false}“：false}”&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 36C2F76C-DB7C-4705-B1BE-AC701213E496”，“ dropcap”：false}“：false}”&gt;该设计可以为我们的应用程序解决先前的封底器。我们不必担心Spark和Ray之间的权衡，因为我们都有两个。作为火花的外部服务器，射线可以接受Spark中的任何高额电流请求，并将计算结果返回以有效启动。由于Ray内部有一个控制器来安排发送到Ray群集的任务，因此我们不需要实现编目来监视现有任务或消息队列以安排所有等待任务。代码迁移成本也很低，因为我们仍然可以将大多数Pyspark代码保留在火花集群中以执行。仅适用于射线的功能将移至并行执行的射线群集。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/garagraph“ data-wp-block =” {“ hash”：“ 6538B045-F1AE-40C3-8FB2-2CE2BC4987AD”，“ dropcap”：false}“：false}”&gt;在此混合设计上，我们还为我们的工程提供了快速的工程，并为我们的工程提供了快速的工程，并为我们提供了快速的工程，并为我们提供了快速的工程。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data data-wp-block-name =“ core/preading” data-wp-block =“ {”级别“：3，“ hash”：“ F10C6D36-59EE-4E7A-9B12-583E649428C5”} id =“ H-启用和节省时间 - 优化 - 材料速度改进”&gt; &lt;br&gt;部署和启动时间优化：迭代速度改善&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ C0BA2548-5E10-4066-B523-4B903EE6586A”，“ dropCap”：false}“&gt;图5显示了我们如何优化我们的工作部署和启动方法，以改善我们的工程师，并显示了如何优化我们的工作雇用和启动方法。我们发现，如果用户想进行远程测试，那么对于用户来说，这可能是耗时的，因为他们每次都需要构建新的Docker映像，即使他们只是对应用程序代码进行了较小的更改。通常，建造码头图像大约需要15-20分钟。为了加速此过程，我们使用像Amazon S3 &lt;Sup&gt;®&lt;/sup&gt;这样的对象存储作为应用程序代码的中间存储层。每次用户启动作业时，他们只需要提供仅存储库的基本Docker映像即可。更改的应用程序代码将实时部署，因此他们无需每次构建新的Docker映像。结果，我们可以控制我们的工作部署并在2分钟内启动时间，从而大大提高了我们的实验迭代速度。 &lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ align”：“中心”，“哈希”：“ 89D59452-3A43-3A43-404B-B058-4D3B39004D85”，“ src =“ https://lh7-rt.googleusercontent.com/docsz/ad_4nxf1zft9gn2ywczkhti3q71q4ihzhfudlfefui4afalgafalgafjlkafjlkafjlkafjlk5bns11ty1jc_jikhv NELXL9P_9HWXXUKUZ2SM5A6TE26R_L2G9HRKZFV6GE6GE6H0Z-IVKKHZJD9WGHGVNZXVNZXVPKDW0JA6D9UODTL4OODTL4O1GXEVOU8？ alt =“” referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ wp- element-caption”&gt;图5：射线群集部署和启动过程。&lt;/figcaption&gt; &lt;/figcaption&gt; &lt;/fige&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 8E9AE225-E41E-41E-4AB4-BF33-A1FFA261BEBD”，“ dropcap”，“ dropcap”：false}：false}“&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;H3 Data Data-Wp-block-name =“ core/thead” data-wp-block =“ {”级别“：3，“ hash”：“ DF00E836-1035-45ED-8A55-D9E3E3E3E5C28DC”}&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;7281956d-90fd-4862-9ace-e04b96b51ee7&#34;,&#34;dropCap&#34;:false}&#34;&gt;When introducing a Ray cluster as an external cluster, communication between the Spark cluster and Ray cluster can sometimes become an issue.当数据大小很小时，这很好，因此我们可以快速发送数据并忽略传输开销。但是，当数据大小在GB或TB级别上很大时，传输时间就不会被忽略。如果直接将数据从火花集群发送到射线，则几个因素会影响传输速率：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name =“ core/list” data-wp-block =“ {“ hash”：“ 562C3DFE-B24E-4A41-B2C1-58081816B103“&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;互联网带宽&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;数据序列化和挑选化&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; spark驱动程序pandas转换速度&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;b13ade3f-8f60-492a-ac94-ff1ec893facb&#34;,&#34;dropCap&#34;:false}&#34;&gt;Since Ray doesn’t support Spark dataframe, Spark driver needs to collect the Spark dataframe from different executors into Spark driver and convert that into a Pandas dataframe.另外，如果Pandas DataFrame太大。&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;digue data-wp-block-name =“ core/image” data-wp-block =“ {“ align”：“ center”，“ hash”：“ 532AC1AB-0B64-4D16-4D16-8D68-44F59E9539BE”; alt“：”“}” class =“ AlignCenter”&gt; &lt;img decoding =“ async” src =“ https://lh7-rt.googleusercontent.com/docsz/ad_4nxfvioglcayyympz_a1j_a1j_ftbdns95k-_qubalbctfyfyfimuhzljsljsjsjsjsjsjsjsjsjsjsjsjsjsjsjsjsjsjdcopxby0hp P2HKBPCIKEYZHE4PSV7ZDNP_24M-VWNOSHUQCUHV0DKDWYG1STSUIJTJODG9OR4BAHUGKKKKKKKKKKKKKKLKKL7PZEYDLRADKJSVRN6U？ alt =“” referrerpolicy =“ no-treferrer”&gt; &lt;figcaption class =“ wp- element-caption”&gt;图6：火花和射线之间的数据传输。&lt;/figcatpion&gt; &lt;/figcaption&gt; &lt;/figife&gt; &lt;/div&gt;&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 39FE1C02-9E98-4CDF-8344-74555AEED05C”，“ dropcap”，“ dropcap”：false}“：false}”&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;53cadc0f-8112-4c36-a344-f40c29e49d94&#34;,&#34;dropCap&#34;:false}&#34;&gt;To accelerate ‌data transfer speed and avoid the potential out-of-memory issue, we introduced HDFS as an intermediate storage layer for large数据集传输。与HDFS通信时，我们会获得更大的带宽。更重要的是，我们可以直接使用Spark将数据写入HDFS作为Parquet文件，并使用Ray的Data API将数据从HDFS加载到Ray。&lt;/p&gt;。&#xA;&#xA;&#xA;&#xA;&lt;H3 Data Data-Wp-block-name =“核心/标题” data-wp-block =“级别”：3，“ hash”：“ C9FCC6F9-8BD1-4C72-9D71-5E9838C37373737373737373737”} class =“ wp-block-headed-dection-id =”和开发环境一致的笔记本&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;ef582e36-d3af-492b-a3f0-2876b74e1faf&#34;,&#34;dropCap&#34;:false}&#34;&gt;To help developers improve their speed and decrease the workload to convert ‌staging code into production, we designed a notebook that has the same environment setup and standard as the production 环境。我们的开发人员可以在笔记本中测试其代码。在将程序运行在笔记本上后，同一代码也可以在生产中运行。一个经典的例子是我们的数据科学家更喜欢在笔记本中编写与大熊猫相关的代码。但是，以前，我们没有一种很好的方法可以同时加速熊猫的作业。有时，后端工程师需要手动将这些操作转换为Pyspark，以使程序更快。采用射线后，数据科学家可以在笔记本上直接编写其熊猫代码，而后端工程师可以轻松地将这些熊猫代码迁移到生产中，而无需进行太多转换。 &lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ align”：“中心”，“ hash”：“ 23CABF88-20A1-20A1-4DFC-A2AB-968553404FD”，“ src =“ https://lh7-rt.googleusercontent.com/docsz/ad_4nxdnoti1dkctova1olqqkmuvlnixdp5mhmhm15rw8pd3txlpd3txllnn0ec4wmgdygdygdygdygdygwcjh4xy9 GGWQO8YF6XRFMJYPTACX4XIKAT__ATVLGAULAGDVMDVMDWWQCOBC6L9OPCE_AV7KGUTAZGOSLZLXZH4UOCXJS-VQD-_A？ alt =“” referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ wp - 元素捕获“&gt;图7：生产和开发环境一致的笔记本。&lt;/figcaption&gt; &lt;/fige&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {” hash&#39;：“ eb644d2c-10f5-4377-80c7-80c7-ed130cae6707”，“ dropcap”，“ dropcap“：false}”&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-data-wp-block-name =“ core/saparator” data-wp-block =“ {” hash&#39;：“&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name =“ core/head”“ data-wp-block =” {“ hash”：“ 89FC67EE-3624-4D06-4D06-4D06-900E-E525C1DBD9CE”，“ LEVEL”：2} class =“ class =” wp-block-block-heading =“ wp-block-heading”优化器&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coraph” data-wp-block =“ {“ hash”：“ 071b4ced-c104-43d3-a5ED-4BA3DC818C5F”，“ dropcap”，“ dropcap”，“ dropcap”：false}“：false}”&gt;在本节中，我们在本节中进行了预算，我们将在我们的一部分中进行划分，该范围是在ray ray a ray a ray a ray a ray a ray a ray a ray a ray in a ray a ray in a ray a proviption的范围，每个城市杠杆。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/encor” data-wp-block =“ {“ hash”：“ 9CF35DE9-6865-4852-4852-8379-3B3B3240499378”，“ dropcap”：falle}“：false}”&gt;乘数）是解决我们的分配问题的一个很好的拟合，鉴于其能够解决非线性，非凸，可区分问题的能力。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/core” data-wp-block =“ {“ hash”：“ f16e26be-59f7-459f7-4537-b3df-72f-72f-72f-72f895131d81”，“ dropcap”&gt;杠杆。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 836BF0F7-C9FC-4578-B1DC-51213FF06D18”，“ dropcap”，“ dropcap”：dropcap“：false}&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ align”：“ center”，“ hash”：“ EC1F3E64-016D-4B4B45-B45-BF1D-2401CA6EDF7F”，“ src =“ https://lh7-rt.googleusercontent.com/docsz/ad_4nxeoagp55ysoot1y0nerkcw1bfeuambx38rmw10emsqflmunrihhhhhhhhwms8xjjjjjmwuwzn fymfgy4sberba6saxsrjomq3rfzw2-3sd-vb7_8gbdp9cltohe5fhfytdfbjinqccas6l3z8y-fnuxpizvkhxvkhxpy？ alt =“” referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ wp- element-caption”&gt;图8：优化配方。&lt;/figcaption&gt; &lt;/figcaption&gt; &lt;/figic&gt; &lt;/div&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 743CECA4-4508-499E-8DDA-3A7ABDDAAA6F”，“ dropcap”，“ dropcap”：false}“：false}”&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：＆＆quot; a5a52dcc-6ec4-4522-ad1c-a7144cdb3505“，” dropcap“：false}”&gt;导致更新步骤，我们求解以执行图9：&lt;/p&gt;中的ADMM算法&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ align”：“ center”，“ hash”：“ F54B8A15-A0B3-42BA-BBDF-293E7FFEBC7A”，“ src =“ https://lh7-rt.googleusercontent.com/docsz/ad_4nxeimrub8a1gbb_dt-93brrbkj0m4-jg7izrzk926_vpatrahtrahtllahtlplpplzwcnnfoyrpdmh TVSKVUW27YJSDXH9MPEVAOWUPZM_9KJWIXLLCSKVNFFRV_B2FTDW9FMQCCJUXJ-QROPZEBMFQJFXFXRYCOUHJDX6LNW？ alt =“” referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ wp- element-caption”&gt;图9：优化求解器。&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 8513C251-769F-4B80-802B-A07B2C85F758”，“ dropcap”：dropcap“：fals}”&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/core” data-wp-block =“ data-wp-block =” a7388e24-93f0-4399-a3be-931cc7472974“，“ dropcap”：dropcap“：false}”&gt;使用ray ins primal intior diors intior cotts conts conders of ind ofiors indor cotts consements in&gt; dropcap“：dropcap”：&gt;可以对Rho进行调整，以确保此问题具有阳性的半明确Hessian。第二步可以分析解决，第三步是微不足道的。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coragraph” data-wp-block =“ {” hash&#39;：“ C13FCE89-EC2E-4233-9A8E-3022576A2510”，“ dropcap”，“ dropcap”：false}“&gt;这是我们的ADMM优化Algorithm和Ray的工作流程，以实现这一目标。经常性预算分配ADMM优化。它可以分为以下步骤：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 9A977171-1F85-4CDD-944D-25DF5BAE3567”，“ dropcap”，“ dropcap”：false}&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ B82A92EC-2AAE-4561-A2C3-F1D15A5CE0F5”，“ dropcap”，“ dropcap”：false}&#xA;&#xA;&#xA;&#xA;&lt;ol data-wp-block-name =“ core/list” data-wp-block =“ {“ ordered”：true，“ hash”：“ BCC32AE6-D982-4F10-A94A-A94A-2A46A7539056”，“值&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;在并行[ray]中解决每个星期的单个城市问题。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;总结城市优化结果[spark]。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;更新跨城市约束变量[spark]。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;更新Slack变量。 [SPARK]。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;检查收敛标准[spark]。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {”哈希＆;：“ 9B95A230-F850-4C58-9DD2-975014A6E992”，“ dropcap”：false}“：false}”&gt;步骤3：记录最佳分配值，元数据和收敛变量。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol data-wp-block-name =“ core/list” data-wp-block =“ {“ ordered”：true，“ hash”：“ 545199c2-1565-4382-b2f9-a916bfb65b21”&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ align”：“ center”，“ hash”：“ 83E61D49-CF0B-4A38-4A38-8943-DCB5CE0B9802 src =“ https://lh7-rt.googleusercontent.com/docsz/ad_4nxf_sfjvthyk76ezespeqjh-ieeliiomj53gam3g3g3bwkjqyqycwdkkkhyckkhyc7o0rir-lacq PBSC44JNJ6QDWTHAFX0ITULZLMFSZWHHIKAL2VKERWIYLDJDUVNPDPDPEMVQUPOPOABZOBZOBWJUMERCHN03SCUGEGEWB9ONHGV？ alt =“” referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ wp- element-caption”&gt;图10：admm优化工作流程。&lt;/figcatpion&gt; &lt;/figcaption&gt; &lt;/fige&gt; &lt;/div&gt;&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 2349C725-068D-4601-B16B-42532ED3C803”，“ dropcap”，“ dropcap”：false}“&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 66fb3d30-8144-4129-a658-428-42f210f210fea55b”，“ dropcap”：dropcap“：false}”&gt;每个城市周的优化功能都非常轻巧，这是非常轻巧的工作，即可完成1-2-2秒。但是，由于大量的高连流优化功能，优化速度成为我们优化器的瓶颈。在将Ray应用于城市并行优化计算之后，我们为预算分配优化器进行了40次改进。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data data-wp-block-name =“ core/saparator” data-wp-block =“ {” hash&#39;：“&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name =“ core/preading” data-wp-block =“ {“ hash”：“ 9B0076BE-6133-4F40-8342-AB6494940EAA48”，“级别”，“级别”：2} id =“ h-kuberay-back-end-sup-from-uber-uber-michelangelo”&gt; kuberay的后端支持来自Uber Michelangelo &lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;23b64f73-81bb-47ec-8cf6-3c3eab887683&#34;,&#34;dropCap&#34;:false}&#34;&gt;A good Ray application should have a good parallelism strategy at the application level and a solid Ray back end to support all these parallel computations.在本节中，我们描述了&lt;a href =“ https://www.uber.com/blog/from-prem-prem-prem-prem-predictive-to-generative-yai/” target =“ _ black” rel =“ noreferrer noopener”&gt; Michelangelo（Uber的AI平台）&lt;/a&gt; &lt;/a&gt; UBERIBLE &lt;/a&gt;为所有可靠的ray Teams &lt;/suild tems &lt;/seled compers &lt;/abouss &lt;/abouts &lt;/abouss &lt;/beacks &lt;/beach &lt;/&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 0bA763E7-3698-4B86-B33F-83C1D56736C6”，“ dropcap”&gt;在后端进行了lovision。当射线簇在作业提交时启动时，射线群集的资源将根据作业的要求动态提供，例如节点，CPU，GPU和内存规格的数量。一旦配置了射线群集，首先建立了射线头节点，然后发现并连接Ray的所有工人节点。该应用程序连接到射线头节点，该节点可以协调跨工作节点的射线任务的分布式执行。射线头节点的连接详细信息（IP地址和端口）自动发现并提供给应用程序，从而无缝执行而无需手动干预。完成工作后，应用程序将请求发送到计算层并将分配的资源释放回池，以确保整个平台上有效利用。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;图data-data-wp-block-name =“ core/image” data-wp-block =“ {“ align”：“ center”，“ hash”：“ 15d1b3b5-98ff-46db-46db-a08c-820c2253fbc0 src =“ https://lh7-rt.googleusercontent.com/docsz/ad_4nxegzzlisz3as66ggnya3ucvk3prhb5pxwxbngtvk y2a8f_tttttttttttw7kf4kf4 kf4rekfd7ck_vh0 FNIWV9DCH8W8YYQ7R2HYVP_AFVEYXD3D2J58WUGVLURDZIBTYIMZ2FZNGBECW_WLBOCZBYOOQDAIEDTGAGTJYEKTJYEKJ_？ alt =“” referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ wp- element-caption”&gt;图11：射线群集提供工作流程。&lt;/figcaption&gt; &lt;/figcaption&gt; &lt;/fige&gt; &lt;/div&gt;&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ AD5C5720-1BB5-40C0-81E2-E520BF0B058F”，“ dropcap”，“ dropcap”：false}“：false}”&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph“ data-wp-block =” {“ hash”：“ C7D48EB8-82B0-4FAC-AB88-CE54FD83A98”，“ DropCap”：false}“：false}”&gt;我们还调查并通过Ray Core Serece offe and otherece othere ray core Serece。 Ray与生态系统中的各种开源框架和图书馆融为一体，并使尝试来自行业的新技术变得更加容易。我们集成了&lt;a href =“ https://www.uber.com/blog/horovod-ray/” target =“ _ blank” res =“ noreferrer noopener”&gt; horovod with ray &lt;/a&gt;，采用&lt;a href =“ href =” rel =“ noreferrer nooopener”&gt; ray xgboost &lt;/a&gt;，射线数据，异质训练群和射线曲调，这使雷成为米开朗基罗中的公共层用于训练和微调XGB，DL和LLM模型。&lt;/p&gt;。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 4e7dadae-db90-47ec-a264-fb94108888888889aa”，“ dropcap”，“ dropcap”：false} href =“ https://www.uber.com/blog/resource-scheduler-cluster-management-peloton/” target =“ _ black” rel =“ noreferrer noopener”&gt; peloton“&gt; peloton”&gt; peloton &lt;/a&gt;（旧资源调整器） href =“ https://www.uber.com/blog/scaling-ai-ml-infrastructure-at-uber/” target =“ _ blank” rel =“ noreferrer noopener“&gt; Michelangelo工作控制器&lt;/a&gt;服务，并为CPU和GPU培训工作提供资源管理经验。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;56e235a1-b3c2-48c2-b9ef-188b8a482fda&#34;,&#34;dropCap&#34;:false}&#34;&gt;Despite infrastructure constraints across on-premises and cloud providers, the service abstracts compute cluster and hardware complexities from the user, and ensures a动态资源选择，高可扩展性和灵活性以及更有效的资源调度，这使其非常适合Uber的不同用户需求。好处包括：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name =“ core/list” data-wp-block =“ {“ hash”：“ CA6F83CB-7B8B-420E-B412-B412-B58F46261E06“&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt;自动资源分配&lt;/strong&gt;：设计使用CRD来定义资源池，将作业自动分配给基于组织层次结构，集群大小和HW类型要求的适当池。这消除了手动资源分配，减少了争夺和超额标准。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt;动态调度&lt;/strong&gt;：一个联邦调度程序将智能的工作与群集匹配，考虑了资源可用性，亲密关系和工作优先级等因素。这样可以确保最佳资源使用情况并防止调度失败。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt; &lt;strong&gt;群集健康监控&lt;/strong&gt;：连续监视群集健康并维护最新的资源快照，可确保工作仅安排在具有可用资源的健康群集上，&#xA;&#xA;&#xA;&#xA;&lt;li data data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt;简化的用户体验&lt;/strong&gt;：用户不需要管理基础基础架构 - 系统会抽象复杂性，从而使他们可以专注于他们的工作量，而系统处理资源管理。&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt;可伸缩性和可扩展性&lt;/strong&gt;：该设计支持新的硬件，云破裂，并且与新兴技术兼容，以确保它可以扩展和适应未来的需求，同时维持有效的资源管理。&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coragraph” data-wp-block =“ {” hash&#39;：“ D5A3F1BE-A170-4C50-BE4F-56848D8A942C”，“ dropcap”：dropcap“：false}”&gt; 2024年初，我们成功地迁移了所有现有的XGB和深入培训工作。有了工作控制器的好处，我们不断解除更多用例，例如大型语言模型微调和优化应用程序。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name =“ core/saparator” data-wp-block =“ {“ hash”：“ 65033D4C-F363-487B-9629-F1A89E2216CE”，“ opacity“：” alpha-channel“}” class =“ wp-block-separator has-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h1 data-wp-block-name =“ core/heading” data-wp-block =“ {”级别“：1，“哈希”：&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 27937173-9673-496D-BD90-1BD90-1B7E0C8CCCC7F”，“ dropcap”，“ dropcap”：dropcap&#39;：false}“&gt; ray&gt; ray&gt; ray在UBER上的重要工具，并像机器学习一样，都可以在UBER上进行效果。还有更多。 Ray现在在Uber中广泛使用，从Uber Michelangelo团队作为基本的后端开始，并应用于Marketplace Investment Team等不同应用团队，以对Uber进行预算分配优化。通过在Uber应用程序中使用Ray，我们实现了巨大的性能，并为我们的数据分析师和开发人员提供了更友好的用户体验。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name =“ core/head”“ data-wp-block =” {“ hash”：“ 56DCEDB1-91D0-4F97-4F97-AC4C-93CD6520A2D6”，“ LEVEL”：2} class =“ class =” wp-block-heading =“ wp-block-heading” id =“ id =”&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 0BB1342B-AD46-45ED-9D99-721BCE369294”，“ dropcap”：dropcap“：false}”&gt;感谢Uber Market Placesplact Investment Investment Investment Investment Investment Team and the Uber Michelangelo的所有成员。 感谢瑞安·克拉克（Ryan Clark）积极审查博客并提供了宝贵的反馈。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/chagraph“ data-wp-block =” {“ fontsize”：“ small”，“ hash”：“ 32BEEF5A-6370-4A6C-9536-9536-78743743702801C”，“ href =“ https://www.flickr.com/photos/40803964@n08/4712207733” target =“ _ black” rel =“ noreferrer noopener”&gt;快速火车&lt;/a&gt; href =“ https://openvers.org/image/collection？source = flickr＆creator = sander+van+van+der+wel” target =“ _ blank” rel =“ noreferrer noopener”&gt; sander van der wel &lt;/a&gt; href =“ https://creativecommons.org/licenses/by-sa/2.0/” target =“ _ blank” rel =“ noreferrer noopener”&gt; cc by-sa 2.0 &lt;/a&gt;。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;fontSize&#34;:&#34;small&#34;,&#34;hash&#34;:&#34;96d29206-02d2-4650-ae6e-1fb050dc8928&#34;,&#34;dropCap&#34;:false}&#34; class=&#34;has-small-font-size&#34;&gt;Amazon Web Services, AWS, Amazon S3, and the Powered by AWS徽标是Amazon.com，Inc。或其分支机构的商标。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coraph” data-wp-block =“ {“ fontsize”：“ small”，“ hash”：“ 59A5CBA3-BE93-BE93-4729-A5A2-A5A2-2F453047473FE4”，“ dropcap”，“ dropcap”：dropcap“：fals}” class} class =“ class =” class =“ has-s-small-font-sipe apache &lt;supace &lt;supeape” Spark &lt;sup&gt;™&lt;/sup&gt;，HDFS和Star徽标是TH的Apache Software Foundation的注册商标或商标美国和/或其他国家。使用这些标记不暗示Apache软件基金会的认可。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/encor” data-wp-block =“ {“ fontsize”：“ small”，“ hash”：“ F9421F9F-11104-4649-880E-39BA6DBA6DC193A5”，“ dropcap”，“ dropcap”：美国和/或其他国家的Docker，Inc的注册商标。 Docker，Inc不认可此标记。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ fontsize”：“ small”，“ hash”：“ 3BC99D4F-9762-45E3-890F-0890F-085E9145E52E”，“ dropcap”，“ dropcap”：false}：false}：false}：false}” class =“ has small-font-size”&gt; kubernetes &lt;sup&gt;®&lt;/sup&gt;，etcd &lt;sup&gt;®&lt;/sup&gt;和kubernetes &lt;sup&gt;®&lt;/sup&gt;®logo是美国和/或/或其他国家/地区Linux基金会注册的商标。 Linux基金会没有使用这些标记的认可。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {” fontsize“：”“小”，“哈希”：“ 33C27C14-0493-445D-8D88-9B88-9B83EE14AADC“ Python徽标是Python软件基金会的商标或注册商标。&lt;/p&gt;</description>
      <pubDate>Thu, 09 Jan 2025 06:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【The Accounter: Scaling Operational Throughput on Uber’s Stateful Platform】Accounter：在Uber的状态平台上扩展操作吞吐量</title>
      <link>https://www.uber.com/blog/the-accounter/</link>
      <description>【&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:1,&amp;quot;hash&amp;quot;:&amp;quot;5d505d4c-32fc-41ff-afce-776cbebc303c&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;18a13a8e-26ba-4783-b225-7a6549308072&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In a &lt;a href=&#34;https://www.uber.com/en-DK/blog/odin-stateful-platform/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;previous post&lt;/a&gt;, we introduced Uber’s stateful platform, Odin. We discussed how the platform’s scale and the growing need for fleet-wide operations required better coordination among its many remediation loops. Multiple conflicting operations could compromise storage clusters without centralized coordination, leading to availability or durability issues. As shown in Figure 1, when uncoordinated remediation loops operate a quorum-based storage cluster, it causes problems. This post explores how we overcame this problem and scaled Odin’s throughput by introducing global coordination of all operations.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;4342cea2-fc72-47de-9749-7319ca399cee&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXdaIUkYf9iJQIdmP5crzAtKJTaRz5LAR_5O_-XKdzeajomTuvyukefXs5KWFvePaao91eUzkebkaCDIbq1PSmCFGtiV57ybtWfs-f544fcir-75M6byjHMW5NbLku9pEknPmuPTKtlxDn1Em0-g8Q2Z4You?key=b-AdKuusNx_dhDAHvkwz_g&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 1: Example of conflicting operations resulting in cluster availability loss.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;3f8302bd-08de-4e17-9918-e0bf5d0bf41b&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;a href=&#34;https://lucid.app/lucidchart/be5aad2b-cb17-4ece-a07b-2d1d3d9603b1/edit?page=0&amp;amp;v=232&amp;amp;s=465&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6d90e788-6294-434d-85e0-ceb36505cf9c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Operations on Odin are implemented using Cadence workflows. When an actor, whether human or automated, wants to operate one of the managed storage clusters, it does so through workflows. A workflow consists of actions, like changes to the system state, and waiting periods, like waiting for system converges, that collectively orchestrate transitioning the system from one state to another. Workflow executions can range from seconds, such as upgrading container images, to hours, like migrating workloads between hosts (Uber’s fleet uses locally attached disks). We’ll refer to these workflows as operations from this point forward.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;279aaa4c-a3e8-453d-aa5a-ff54261e5430&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We needed a mechanism to gate the initiation of new operations or, to put it another way, answer the question:&lt;em&gt; Given the current circumstances, is it safe to proceed with this operation on this cluster?&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7c64aa80-fe8e-4de8-a4e3-5d6c9be7b3a4&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Our design requirements were as follows:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;52b602ab-3bde-46cb-a0a6-6956c515d54a&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Independent remediation loops&lt;/strong&gt;: These loops should remain unaware of each other. This is crucial for scaling the development of high-level functionality. In other words, remediation loops shouldn’t hard-code rules for determining when it’s safe to perform operations on ‌clusters.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Technology-specific policies&lt;/strong&gt;: Odin manages all stateful technologies at Uber, and each technology has unique safety tolerances for cluster operations. So, different technologies may require different policies.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Platform-wide limits&lt;/strong&gt;: The system should support enforcing global limits across all technologies/operations on the platform.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;4cc2a929-4d98-48c1-ab5f-ccc3dddca544&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The solution we chose is a global software component called The Accounter, which provides operation coordination as-a-service. Its name reflects its core purpose: to serve as a central registry that tracks all ongoing operations, to understand the relationship between operations, and to act as a gatekeeper for initiating new operations. A good mental model is to think of The Accounter as an advanced disruption budget or a fuzzy semaphore.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;56bb2492-fe44-4855-aad8-d123e8ad7416&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;When an operation is initiated, permission to operate on the target storage cluster must first be requested from The Accounter, a process we call taking a claim. The claim covers the entire operation, which might involve multiple changes to the system state.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;652ecab4-2d56-4292-8860-82fb24cd0759&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The Accounter uses a technology-specific policy to determine whether a claim can be granted. The policy takes two inputs: cluster health, a collection of the current health state stored in &lt;a href=&#34;https://www.uber.com/en-DK/blog/grail/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Grail&lt;/a&gt;, and the currently ongoing operations, which are tracked and stored in etcd&lt;sup&gt;®&lt;/sup&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;3e7bf56e-5d58-4e58-993f-cdb20923166b&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;58e0af82-e829-40b3-bcab-680a9345050e&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-cluster-health&#34;&gt;Cluster Health&lt;/h2&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;beb49c97-9d38-40d3-8537-f027c56a0d73&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXfe6nv0NFbBiHe3fLUyfVxDlx0aMIs0VsodtTGOa5ULHXvlNDWniFa7J9q7ZlCcbhVZ6FTWYoIIAFfo2WVYyHzGYuVg6Gkhhd_VpWBhdeYTzlSH6OhHYkmnamHgNo9K5sk5ZMnoTrJzXtmocONLFdK5VvH6?key=b-AdKuusNx_dhDAHvkwz_g&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 2: Overview of the cluster health collection on Odin.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;72ea256b-f8af-4151-8ef3-a0da00ef9b47&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;a href=&#34;https://lucid.app/lucidchart/43371f6c-1761-42e9-ba36-50e6a081cea9/edit?page=0&amp;amp;v=536&amp;amp;s=672&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;1e553712-51cb-4082-b972-d73d09584791&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;A storage cluster on Odin consists of one or more workloads, like a Raft, Apache Cassandra&lt;sup&gt;®&lt;/sup&gt;, or similar database cluster node. Each workload is a collection of containers: a worker container, a primary database container, and potentially several sidecar containers. The worker is responsible for managing the host-level life cycle of the database and sidecar containers. It monitors the workload’s status continuously and communicates with the control plane. The most recent workload state is stored in Grail.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;040cc737-c482-436f-81fb-760c6f1e5e03&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;When determining cluster health, several other health signals must be considered beyond what can be observed within individual workloads. For example, does the cluster have under-replicated data? Is the cluster experiencing stress from excessive data shuffling or an increased client load? Storage teams typically manage/collect cluster-level health information like this, and Odin provides ways to ingest the cluster status into Grail.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;1c6f4371-d466-4586-8992-9220aa431873&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;A technology’s tolerance for unhealthy workloads varies significantly depending on the specific technology, and this is captured in ‌technology-specific health policies—more on this later.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9e05f7a8-03ee-4a90-a2fc-85809279660d&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9591126e-be90-474b-a839-2b5602d8ba3e&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-ongoing-operations-nbsp&#34;&gt;Ongoing Operations&amp;nbsp;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;cd08ec06-1439-475c-92c1-0c4aa6cc3704&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The system models ongoing operations using two key concepts: &lt;em&gt;operations&lt;/em&gt; and &lt;em&gt;groups&lt;/em&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;aa68ba88-99ac-4b51-a0e2-2e74ae167c03&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Each operation is represented by an operation object, which contains critical details such as the targeted storage workload, the type of operation (like drain or downtime), and its potential disruption to the storage cluster. Every operation is associated with one or more groups.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;81200b77-d173-4320-a11f-d6ad2631aa6f&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;A group tracks the number of operations linked to it and stores additional metadata beyond the operations count. For example, it records the most recently started and completed operations. This data allows for enforcing time-based rate limits on the operations permitted within each group.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a9c2cad5-c5b0-48a9-a792-714520f6693c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Although there are many groups, they can be broadly categorized into two types: platform-wide groups (for example, failure domains like regions, zones, and racks) and technology-specific groups (for example, individual storage clusters and workloads). A global group tracks all ongoing operations.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;edb4505f-8a6e-4b62-8f10-99f0adee1f97&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Platform-wide groups enforce global concurrency limits, helping to prevent overloading Odin and the underlying infrastructure. At the same time, technology-specific policies leverage cluster and workload groups to protect cluster availability and durability.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7fc72d01-2afd-46ee-9dd5-a5d6f3993d5c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The number of operations permitted on a cluster varies depending on the technology. Some technologies restrict operations to a single workload at a time, while others allow a percentage of the cluster to be operated on concurrently. More specialized groups can be created dynamically to track operations on specific subsets of workloads within a cluster, such as roles. This flexibility enables more nuanced safety policies tailored to different storage technologies’ requirements.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f1ddc4f1-d0e5-496b-847a-4679aa648bef&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The figure below illustrates how an operation is modeled, with the operation object linked to several group objects. These explicit associations facilitate the cleanup process when an operation completes or fails.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;f024bc6a-8095-4654-8e69-a281e55fbe9e&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXdUxx49TQHC2EwXgir_x7cX3CehhM61yc5TGL0BZ2aXsRkS8_7Odr-G_60BWCjIuRYbkEtZfYogfVhC0aEwNhYJY3elWUGb6oQ7yNBwB4K9bUJIKmRlCjk_s8C9UakIUClZvse1HXWGUawkeD6g5d0w5byj?key=b-AdKuusNx_dhDAHvkwz_g&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 3: Overview of the data model used to represent the relationship between operations and groups.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f162871a-8d83-440f-8098-027ea3605100&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;a href=&#34;https://lucid.app/lucidchart/4e05a85c-d7f0-4a2b-8ca1-c0685f1aef83/edit?page=0&amp;amp;v=1611&amp;amp;s=612&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0bea51db-6a1e-40c5-b7e7-ece8863e57e5&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;da147268-514b-4568-bca0-cd3819ad8742&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-safety-policies&#34;&gt;Safety Policies&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ea7b7ea1-8485-4862-8c7f-07e1e4eaca19&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Now that we can efficiently gauge cluster health and get an overview of all ongoing operations, we can introduce safety policies. A safety policy is a codified disruption budget that allows the expression of technology-specific policies for how operations can be overlapped within the storage clusters.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;adc5367e-1a21-4321-8c5b-1b4de1a3b153&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Safety policies comprise two parts: the &lt;em&gt;health policy&lt;/em&gt; and the &lt;em&gt;limit policy&lt;/em&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a25a8360-5e66-4230-9aa0-8c3999b761a6&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The health policy uses the latest collected cluster health information to determine whether the requested operation can be performed. For example, the technology team might want to prevent operations from being started on a cluster that’s seeing an increase in client load or has unhealthy workloads.&amp;nbsp;&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;b9ca44e9-c9fc-487a-9ee7-3ad07a62473a&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Limit policies, on the other hand, can limit the number of concurrent operations affecting a group, implement grace periods between sequential operations, or provide operations exclusivity so that if one group is being operated, other groups will reject all claims. This is particularly useful when you want to operate a single rack at a time.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;dde3d889-02e1-4c97-b8db-7b8c779f626c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The Accounter provides a collection of functionalities for policy implementers, such as:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;82c24b34-5d62-4e09-8ed5-d598a9fc928e&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Methods for gauging workload and cluster health&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;em&gt;CheckMaxOperations(group, max):&lt;/em&gt; Check that the specified group has at most max operations&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;em&gt;CheckElapsedFromLastClaim(group, duration):&lt;/em&gt; Check that the given time has elapsed since the last claim associated an operation with the specified group&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;em&gt;CheckElapsedFromLastUnclaim(group, duration):&lt;/em&gt; Check that the given time has elapsed since a claim associated with an operation was last released from the specified group&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ab5a85e9-7962-47e3-bf9e-558454d9b7c5&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Health evaluations are a point-in-time check and can’t provide hard guarantees about the safety of operations. Health data collection inherently involves latency in a distributed system, meaning two simultaneous requests for disruptive operations might be approved based on an outdated view of cluster health. The checks performed by limit policies do provide hard guarantees as they are conditionally committed through an etcd transaction. Let’s explore how that works.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;cf11f91a-6480-44bf-97ae-aa661a8f523e&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;80101e32-fc99-4e92-b8ed-6c1d214c29b9&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-architecture&#34;&gt;Architecture&lt;/h2&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1100184,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;77539bbf-037e-4050-9f24-c6c0dca5ee59&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;676&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/blogfigure4-17321696658887-1024x676.png&#34; alt=&#34;&#34; class=&#34;wp-image-1100184&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/blogfigure4-17321696658887.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/blogfigure4-17321696658887.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/blogfigure4-17321696658887.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/blogfigure4-17321696658887.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=2048,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/blogfigure4-17321696658887.png 2048w&#34; sizes=&#34;auto, (max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 4: The Accounter architecture and claim granting process.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;12513284-7271-401c-980b-42f55c5ce634&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;da75e2ea-9113-409b-8176-250a4eec58ea&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;To persist operations and groups, we use etcd as a key-value store. When a workflow wants to make a change to one of the storage clusters, it goes through the following process:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c9492c1e-9928-4200-9d4b-5c8f12747215&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;The workflow that wants to take a claim calls The Accounter, with information about the target storage workload and the purpose of the operation (1).&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;The Accounter retrieves the current cluster health state from Grail (2) and the current operations state from etcd (3).&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;The Accounter evaluates platform-wide concurrency and rate limits before evaluating the target workload (4).&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Next, ‌ technology-specific health and limit policies are evaluated against the state from etcd&amp;nbsp; (5). If either policy fails, the claim is rejected immediately without resulting in a transaction.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Otherwise, if all the criteria are met, a single transaction for the required changes is built and committed to etcd (6).&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;The claim is accepted or rejected depending on the success of the etcd transaction (7).&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;The operation can now proceed (8).&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;After the operation, the workflow is responsible for releasing the claim through The Accounter.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2d205b96-135b-4430-8450-d86cd6c614a9&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Changes in etcd are executed transactionally, ensuring a consistent view of ongoing operations. Specifically, we use optimistic locking to verify assumptions about the number of operations within groups before committing changes.&amp;nbsp; A transaction builder library abstracts this complexity for safety policy developers, giving them the impression of working directly in memory. This approach is similar to &lt;a href=&#34;https://github.com/etcd-io/etcd/blob/main/client/v3/concurrency/stm.go&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;etcd’s STM&lt;/a&gt; (Software Transactional Memory) library but with optimizations tailored to improve throughput.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;4b15994d-02e0-44b4-a3e8-83a3a63f4215&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;If the transaction is rejected due to optimistic concurrency conflicts, it’s retried internally a few times. If the claim is rejected, we rely on the operation to retry as long as the operation remains relevant. If the rejection is due to a violation of the rate limit on a group, the Accounter provides a meaningful backoff time that the operation can use to decide how to proceed.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2e65edf2-8787-47d5-a453-0783b0b5ccfa&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;To avoid all claims having to fetch state from etcd directly (3), all claims are first evaluated against a continuously updated in-memory snapshot of the data. If the claim violates either of the policies using the cached state, it’s immediately rejected without attempting to commit the transaction to etcd. This is essential as the system has to scale to 3,000-4,000 claim attempts per second. Most of this traffic comes from the platform auditing workloads’ ability to move through dry-run claim attempts.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7f555a1a-bccf-4a97-bd78-e09779105318&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The etcd transaction finalizes taking the claim and checks for operational limits transactionally, granting the claim when the transaction is committed.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0e6b08f4-e6c0-44fa-96d8-38173a802ccf&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;5dfe78d2-ae09-4da5-8f72-a0db28154ee8&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-claim-life-cycle&#34;&gt;Claim Life Cycle&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;96d661d8-8126-41a9-9d44-13a5b548817c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Our operations are often hierarchical, so we designed The Accounter to support the passing of claims from parent to child operation. These passed-down claims are reentrant, meaning that when a child operation attempts to claim, it becomes a no-op. This design allows for more complex operations while keeping the operation logic straightforward. Programmers don’t need to understand the entire operation structure to determine whether a claim has already been taken—they simply take the claim as needed, knowing the system will handle it correctly.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;aa4aa757-d051-4607-a05b-eb2845346a3d&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Operations are responsible for releasing claims once their operations are completed. However, there are cases where an operation may be terminated, fail unexpectedly, or contain bugs. While these instances are rare, they do occur at our scale. The system must ensure that claims are eventually released, as stale claims can block operational throughput. The Accounter can always trace back to the operation since operations are linked to their claims in the data model. This is used to identify inactive operations and safely release stale claims.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a0f55035-1a46-48b0-a950-f6ae2e88711e&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d2b8cd75-c991-4fcd-8945-512799392927&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-auditing&#34;&gt;Auditing&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;8a62f129-bd41-4475-a536-ba30040361aa&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;With great power comes great responsibility. Delegating policy development to technology teams carries the risk that overly conservative policies could hinder the platform’s ability to perform fleet-wide operations. Uber colocates workloads of different technologies on the same hosts, resulting in hundreds of workloads on the same hosts. When the platform has to drain a host, all workloads must first be drained (that is, moved to other hosts). Restrictive safety policies increase the risk of only being able to drain the host partially.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;065d0b30-bc9e-4635-b11e-74290cf41f53&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;To address this issue, we’ve implemented an extensive auditing system. This system continuously evaluates the &lt;em&gt;claimability&lt;/em&gt; of workloads, providing an accurate snapshot of which operations are possible across the platform. This information is published to Grail and used by remediation loops as a pre-filter to identify feasible operations.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;cd52e911-bb11-4bd8-9b5c-0ede76028f78&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Additionally, the Odin team leverages this data to gain insights into workloads whose operations have been blocked for extended periods, allowing the Odin team to alert the team responsible for the affected storage technology.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0f753d1e-2356-401c-a2c5-a0779e4fd4ba&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;5a19b9d5-34b6-48db-bf17-8c1081a1ea54&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-alternative-approaches&#34;&gt;Alternative Approaches&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0b79e0b1-f348-4c7e-b1fe-94e4fecfcac0&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We’ve encountered at least two other common approaches for coordinating operations: distributed lock managers and Kubernetes&lt;sup&gt;®&lt;/sup&gt; &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/pods/disruptions/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;disruption budgets&lt;/a&gt;. Here, we explain how they differ from The Accounter’s approach.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;90ac573c-b34b-48de-b790-15634226352c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Distributed lock managers typically involve acquiring a lock on a cluster, ensuring that only one operation can be performed at a time. However, given the lengthy time required to operate on a single workload in Odin—primarily due to locally attached disks—locking an entire cluster for a single workload operation would be inefficient and impractical.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d38b4f0f-ad43-4a79-ac92-455fa20e23aa&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;A more flexible alternative to locks could be to extend the lock to a semaphore, allowing a predefined number of tokens to be granted simultaneously. This is similar to the approach taken by Kubernetes, where the disruption budget sets a fixed number of operations upfront. The Accounter, however, diverges from these approaches by focusing solely on counting operations, leaving the responsibility of enforcing limits to a separate policy. This method offers much greater flexibility in policy design. For example, it allows for specifying that only a certain number of optimization moves are permitted. Still, if a host fails and a request is made for an emergency move, that’s always granted. Keeping these emergency cases represented in the model is an advantage because the policy could then state that no efficiency moves are granted from that time on until the host failure is fully remediated. This flexibility is crucial in maintaining operational efficiency while adapting to real-time conditions.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;cc797c74-5c1f-4b7b-b4ab-4f1ce27e4c72&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c8458d63-f070-413a-b601-07fa8feb090d&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-scale&#34;&gt;Scale&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;63355cfa-615a-47d7-b76c-8f6490d9d68d&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The Accounter has now been fully integrated into all operations, and the number of operations done by the platform translates to a lot of traffic. Let’s take a look at the current numbers:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;346d0f16-c987-4634-aebb-1b520d4906d3&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;strong&gt;Traffic&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;1ceef2db-4db7-4166-95d9-476676e9332e&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&amp;gt;300,000 claim evaluations per hour&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&amp;gt;7 million dry-run claim evaluations per hour&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e6313ebc-797e-4373-bf0f-b07a618cff7c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;strong&gt;Active Operations and Groups&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c7913b1e-26c5-4bd8-9943-a930634b3805&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&amp;gt;2,000 active operations&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&amp;gt;700,000 distinct groups&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;061733d3-4c18-4ecb-893d-487ee40db6e3&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7a7b116b-7d6b-4eac-a84c-d17562b9a593&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-results&#34;&gt;Results&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;980045ba-187b-49f0-8339-6486eb00855e&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Over the years, The Accounter has significantly improved Odin’s operational efficiency, enabling small teams to manage thousands of clusters safely. It’s facilitated centralized efficiency programs and empowered leadership to treat Uber’s physical infrastructure as flexible and impermanent. Moreover, The Accounter has preserved the independence of teams through a clear separation of concerns: remediation loop owners focus solely on determining which operations are necessary without needing to worry about safety considerations.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c91f0eab-494b-4ef9-91e5-f679cff07372&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;One noteworthy example was our effort to adopt encryption-at-rest. A process that we’ve been able to drive fully centralized. All we had to do was ask our automation to move workloads to hosts with encryption-at-rest, and The Accounter ensured that it happened safely. This process involved migrating 2.1 million vCores and 1.6EiB locally attached disks. In the past, operations like this would have required extensive planning/execution, involving all the technology stakeholders and costing years of engineering time. &lt;strong&gt;Now, they are a no-op.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;0c8631c0-0b86-4321-b0fa-1124614856b3&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXf9ke1obdn_A5SCJO98Si-zmTAX7ehygvUwbOzbfFXMFSMIJcZno4qaiijgDH9Us9XbOZJNs-E60pB-t3wcMlaDtauVTMI_p_R1hJ0lwusZZHi2I7kJgHNUsKaeTNYUU5N4L0F_D0QRS8lR96qh91NXJbY?key=b-AdKuusNx_dhDAHvkwz_g&#34; alt=&#34;&#34; title=&#34;Chart&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 5: Timeline of Uber’s transition to encryption-at-rest.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;880c1309-40c3-4e9f-8186-d4fe9768a736&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;add83f5b-3776-4924-8cd6-be8e819efc74&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;8be63190-b606-494f-b957-c335dccda674&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-future-work&#34;&gt;Future Work&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ac04a251-021d-4809-8a98-dba96ab2e81b&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The Accounter paradigm is actively evolving, and we’re working to address some of its current limitations. One significant area for improvement is support for prioritizing operations. Currently, operations rely on continuous polling to obtain a claim, which generates unnecessary traffic and doesn’t allow for the prioritization of different operation types. This becomes particularly problematic when lower-priority efficiency optimizations block high-priority, human-initiated operations. Another area of interest is the ability to define circuit breakers directly within The Accounter. Currently, each loop in Odin implements this functionality to protect against misbehavior caused by bugs. We aim to offer this as a built-in feature of The Accounter, streamlining the process and enhancing overall system resilience.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;65c6ae57-0747-4f76-bc1c-1bb6dfb7906a&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:1,&amp;quot;hash&amp;quot;:&amp;quot;59c7f492-08c9-4664-b14e-f3bba5735c8d&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-summary&#34;&gt;Summary&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ea9c0508-fbdb-4a7e-b7a8-59c59ffbeaba&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In this post, we introduced The Accounter, a global coordination system designed to improve the throughput and safety of operations on Uber’s stateful platform, Odin. Providing operation coordination as-a-service, The Accounter allows for the efficient execution of large-scale operations while maintaining cluster safety and avoiding conflicting actions. It tracks ongoing operations, enforces technology-specific policies, and ensures that new operations are only initiated when safe. The Accounter has significantly enhanced Uber’s operational efficiency, allowing small teams to manage thousands of clusters safely and drive centralized programs like encryption-at-rest migrations.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;239b805b-3c25-4020-916e-cc0597347e03&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Kubernetes&lt;sup&gt;®&lt;/sup&gt;, etcd&lt;sup&gt;®&lt;/sup&gt;, and its logo are registered trademarks of The Linux Foundation&lt;sup&gt;®&lt;/sup&gt; in the United States and other countries. No endorsement by The Linux Foundation is implied by the use of these marks.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;5269e747-7779-465f-b5de-78e1363ba453&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Apache Cassandra&lt;sup&gt;®&lt;/sup&gt; are registered trademarks or trademarks of the Apache Software Foundation in the United States and/or other countries. The use of these marks does not imply endorsement by the Apache Software Foundation.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;94534b87-4345-401b-8341-9409e5e40ab6&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;The cover photo was generated using OpenAI’s ChatGPT Enterprise and edited using Pixlr.&lt;/em&gt;&lt;/p&gt;】&lt;h1 data-data-wp-block-name =“ core/heading” data-wp-block =“ {”级别“：1，“哈希”：“ 5DD505D4C-32FC-41FF-41FF-41FF-41FF-AFCE-776CBEBC303C”}&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coraph” data-wp-block =“ {” hash&#39;：“ 18a13a8e-26ba-4783-b225-7a6549308072”，“ dropcap”，“ dropcap”：false} target =“ _ blank” rel =“ noreferrer noopener”&gt;上一篇文章&lt;/a&gt;，我们介绍了Uber的状态平台Odin。我们讨论了该平台的规模和对范围内部运营的日益增长的需求，需要在其许多补救循环中更好地协调。多次冲突的操作可能会损害存储群集而无需集中协调，从而导致可用性或耐用性问题。如图1所示，当不协调的补救回路运行基于法定的存储群集时，会导致问题。这篇文章探讨了我们如何克服这个问题，并通过引入所有操作的全球协调来缩放奥丁的吞吐量。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ align”：“ center”，“ hash”：“ 4342CEA2-FC72-47DE-9749-9749-7319CA39999CEE“ src =“ https://lh7-rt.googleusercontent.com/docsz/ad_4nxdaiukyf9ijqidmp5crzatkjtarz5lar_5o_5o_-xkdzeajomtuvyukefxss5kwfvepaa O91EUZKEBKACDIBQ1PSMCFGTIV57YBTWFS-F544FCIR-75M6BYJHMW5NBLKU9PEKNPEKNPEKNPMUPTKTLXDN1EM0-G81EM0-G81EM0-G81EM0-G8Q2Z4YOU？ alt =“” referrerpolicy =“ no-the-referrer”&gt; &lt;figcaption class =“ WP-元素caption”&gt;图1：相互冲突的操作示例导致群集可用性损失。&lt;/figcaption&gt; &lt;/figif&gt; &lt;/figif&gt; &lt;/div&gt;&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 3F8302BD-08DE-4E17-9918-E0BF5D0BF41B”，“ dropcap”，“ dropcap”&gt; &lt;a href =“ https://lucid.app/lucidchart/be5aad2b-cb17-4ece-a07b-a07b-2d1d1d3d9603b1/edit?page=0&amp;v=232&amp;s=465”&gt; &lt;/a&gt; &lt;/a&gt; &lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 6D90E788-6294-434D-85E0-CEB36505CF9C”，“ dropcap”：dropcap“：dropcap“：false}”&gt;使用Cadence Workfors实现ODIN的操作。当演员（无论是人类还是自动化）想要操作一个托管存储簇之一时，它会通过工作流程进行。工作流程包括动作，例如更改系统状态，等待时间（例如等待系统收敛）共同协调从一个状态到另一个状态的过渡。工作流执行的范围从秒数（例如升级容器映像）到数小时，例如主机之间的工作负载（Uber的车队使用本地连接的磁盘）。我们将这些工作流程称为从这一点开始的操作。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 279aaaa4c-a3e8-453d-aa5a-ff54261e5430”，“ dropcap”：false}一种机制来启动新操作，或者，以换句话说，回答以下问题：&lt;em&gt;在当前情况下，可以安全地在此集群上进行此操作？&lt;/em&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 7C64AA80-FE8E-4DE-4DE8-A4E3-5D6C9BE7B3A4”，“ dropcap”，“ dropcap”：false}&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;52b602ab-3bde-46cb-a0a6-6956c515d54a&#34;,&#34;ordered&#34;:false,&#34;values&#34;:&#34;&#34;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt;独立的补救回路&lt;/strong&gt;：这些循环应保持不知道。这对于扩展高级功能的发展至关重要。换句话说，补救循环不应硬编码规则来确定何时安全地执行‌clusters的操作。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt;技术特定的政策&lt;/strong&gt;：奥丁管理Uber的所有状态技术，每种技术都具有集群操作的独特安全性。因此，不同的技术可能需要不同的政策。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []“&gt; &lt;strong&gt;平台范围范围&lt;/strong&gt;：该系统应支持平台上所有技术/操作的全局限制。&lt;/li&gt; &lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 4cc2a929-4d98-48c1-48c1-ab5f-ccc3dddca544”，“ dropcap”：dropcap“：false}”&gt;解决方案我们选择的全球软件是称为ACCOUNTION的全球软件，该软件是ACCOUNTH，它将操作坐标为-A-A-A-aa-aa-aa-aa-aa-aa。它的名称反映了其核心目的：作为跟踪所有正在进行的操作，了解操作之间关系的中央注册表，并充当启动新操作的守门人。一个良好的心理模型是将辅助视为高级破坏预算或模糊信号。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;56bb2492-fe44-4855-aad8-d123e8ad7416&#34;,&#34;dropCap&#34;:false}&#34;&gt;When an operation is initiated, permission to operate on the target storage cluster must first be requested from The Accounter, a process we call taking a claim.索赔涵盖了整个操作，这可能涉及系统状态的多次更改。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph“ data-wp-block =” {“ hash”：“ 652ecab4-2D56-4292-4292-8860-82fb24cd0759”，“ dropcap”：dropcap“：false}”&gt; accounter使用技术特定于技术的政策来确定是否可以确定声称是否可以被确定。该政策采用了两个输入：集群健康，&lt;a href =“ https://www.uber.com/en-dk/blog/grail/” target =“ _ _ blank” rel =“ noreferrer noopener”&gt; grail&gt; grail &lt;/a&gt;，以及当前正在进行的操作，以及正在进行的操作，在etcd &lt;sup&gt;®&lt;/sup&gt;。&lt;/p&gt;中ored&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name =“ core/saparator” data-wp-block =“ {” hash&#39;：“ 3E7BF56E-5D58-4E58-4E58-993F-CDB20923166B“&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name =“ core/heading” data-wp-block =“ {” hash&#39;：“ 58e0af82-e829-40b3-bcab-680A93450E”&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ align”：“ center”，“ hash”：“ beb49c97-9d38-40d3-40d3-8537-f027c56a0d73 src =“ https://lh7-rt.googleusercontent.com/docsz/ad_4nxfe6nv0nfbbbihe3fluyfvxdlxdlx0amis0vsodttgoa5ulhxvlndwndwnifa7j9q7zlccbh VZ6FTWYOIIAFFO2WVYYHZGYUVG6GKHHD_VPWBHDEYTZLSH6HHYKMNAMHGNO9K5SK5SK5ZMNOTRRJZXTMOCONLFDK5K5K5K5K5K5K5K5K5K5K5K6？ alt =“” referrerpolicy =“ no-treferrer”&gt; &lt;figcaption class =“ WP-元素捕获”&gt;图2：ODIN上的群集健康收集的概述。&lt;/figcaption&gt; &lt;/figic&gt; &lt;/div&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {” hash&#39;：“ 72EA256B-F8AF-4151-4151-8EF3-A0DA00EF9B47”，“ dropcap”，“ dropcap”：false} href =“ https://lucid.app/lucidchart/43371f6c-1761-42e9-ba36-50e6a081cea9/edit?page=0&amp;v=536&amp;s=672”&gt; &lt;/a&gt; &lt;/a&gt; &lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 1E5553712-51CB-4082-B972-D73D09584791”，“ dropcap”：dropcap“：dropcap”：false} Cassandra &lt;sup&gt;®&lt;/sup&gt;或类似的数据库群集节点。每个工作负载都是一个容器的集合：一个工作容器，一个主数据库容器，以及可能是几个辅助容器。该工人负责管理数据库和Sidecar容器的主机级生命周期。它连续监视工作负载的状态并与控制平面进行通信。最新的工作负载状态存储在Grail中。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {” hash&#39;：“ 040cc737-c482-436f-81fb-81fb-760c6f1e5e03”，“ dropcap”：dropcap“：false}”&gt;在确定群集健康时必须被认为是个人工作中的其他工作时，才能将其他工作视为范围。例如，群集是否复制数据？群集是否会因数据改组过多还是增加客户负载而产生的压力？储存团队通常会管理/收集类似这样的集群级健康信息，Odin提供了将群集状态摄入Grail的方法。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 1C6F4371-D466-466-4586-4586-8992-9220AA431873”，“ dropcap”：dropcap“：fals}”健康政策以后再说。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data data-wp-block-name =“ core/saparator” data-wp-block =“ {” hash“：” 9E05F7A8-03EE-4A90-4A90-A2FC-858092796660D“&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name =“ core/heading” data-wp-block =“ {“ hash”：“ 9591126E-BE90-BE90-474B-A839-2B5602D8BA3E”，“ LEALC&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/ragraph“ data-wp-block =” {“ hash”：“ CD08EC06-1439-475C-92C-92C1-0C1-0C4AA6CC3704”，“ dropcap”，“ dropcap”：false}&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;aa68ba88-99ac-4b51-a0e2-2e74ae167c03&#34;,&#34;dropCap&#34;:false}&#34;&gt;Each operation is represented by an operation object, which contains critical details such as the targeted storage workload, the type of operation (like drain or downtime), and its potential破坏存储群集。每个操作都与一个或多个组相关联。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 81200b77-d173-4320-A11f-a11f-d6Ad2631aa6f”，“ dropcap”：false}“：false}”&gt;一个集体链接到IT和存储的操作数量，超出了Metationsa的范围。例如，它记录了最近开始并完成的操作。该数据允许对每个组中允许的操作实施基于时间的费率限制。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;a9c2cad5-c5b0-48a9-a792-714520f6693c&#34;,&#34;dropCap&#34;:false}&#34;&gt;Although there are many groups, they can be broadly categorized into two types: platform-wide groups (for example, failure domains like regions, zones, and racks)和特定于技术的组（例如，单个存储簇和工作负载）。一个全球小组跟踪所有正在进行的操作。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph” data-wp-block =“ {” hash&#39;：“ EDB4505F-8A6E-4B62-8F10-8F10-99F0ADEE1F97”，“ dropcap”：false}“：false}”&gt;平台 - 平台 - 宽平台组强制限制全局同时限制，以防止限制量，以防止过滤量和无效的ODINS ODINTIND ODIRNING ODIRNING ODIRNING ODIRNING ODIRNING ODINTIND ODINTIND ODINTIND ODINTIND ODINTIND ODINTIND ODINTIND。同时，技术特定的政策利用集群和工作量组来保护群集可用性和耐用性。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph“ data-wp-block =” {“ hash”：“ 7FC72D01-2AFD-46EE-46EE-9DDD5-A5D6F399993D5C”，“ dropcap”，“ dropcap”：false}“&gt;允许在群集上允许的操作数。一些技术一次将操作限制为单个工作量，而另一些技术则允许同时进行一定比例的集群。可以动态创建更多专业的组，以跟踪集群中工作负载的特定子集的操作，例如角色。这种灵活性实现了针对不同存储技术要求量身定制的更细微的安全政策。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ F1DDC4F1-D0E5-496B-847A-4679A648BEF”，“ dropcap”：dropcap“：false}”&gt;下面的图显示了操作如何使用操作对象对象对象对象对象进行对象对象链接的操作模型。这些明确的关联促进了操作完成或失败时的清理过程。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ align”：“ center”，“ hash”：“ F024BC6A-8095-4654-8E69-A281E555555555FBE9E”，“ src =“ https://lh7-rt.googleusercontent.com/docsz/ad_4nxduxx49tqhc2ewxgir_x7cx3cehhm61yc5tgl0bz2axssrks8_7odr-g_60bwcjiur ybketzfyogfvhc0aewnhyjy3elwugb6oq7ynbwb4k9bujikmrlcjk_s8c9uakiuclzvse1hxwguawked6g56g50w5byj？ alt =“” referrerpolicy =“ no-the-caption class =” wp-元素caption =“ wp-element-caption”&gt;图3：用于表示操作和组之间关系的数据模型的概述。&lt;/figcaption&gt; &lt;/figcaption&gt; &lt;/figif&gt; &lt;/dig&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ F162871A-8D83-440F-8098-027EA3605100”，“ dropcap”，“ dropcap”：false}“：false}”&gt; &lt;a href =“ https://lucid.app/lucidchart/4E05A85C-D7F0-4A2B-8CA1-C0685F1AEF83/EDIT？&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name =“ core/saparator” data-wp-block =“ {” hash&#39;：“ 0beA51DB-6A1E-40C5-B7E7E7-ECE8863E57E5”，“ opacity”，“ opacity”，“ opacity”：“ alpha-channel” class =“ class =” wp-block-separator-separator-and and-alpha and-alpha and-alpha&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data data-wp-block-name =“ core/heading” data-wp-block =“ {” hash&#39;：&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;ea7b7ea1-8485-4862-8c7f-07e1e4eaca19&#34;,&#34;dropCap&#34;:false}&#34;&gt;Now that we can efficiently gauge cluster health and get an overview of all ongoing operations, we can introduce safety policies.安全政策是一个编纂的破坏预算，它允许表达技术特定的政策，以使操作如何重叠在存储簇中。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/conagraph“ data-wp-block =” {“ hash”：“ ADC5367E-1A21-4321-4321-8C5B-1B4DE1A3B153”，“ dropcap”，“ dropcap”，“：false}”&gt;安全政策包括两个部分：两部分：&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ A25A8360-5E66-4230-9AA0-9AA0-8C3999999999B761A6”，“ dropcap”：dropcap“：false}”&gt;健康政策使用最新收集的群集健康信息可以确定该请求的操作是否可以确定该要求的操作。例如，技术团队可能希望防止运营成为St在一个集群上挥舞着客户负载的增加或工作量不健康。  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;b9ca44e9-c9fc-487a-9ee7-3ad07a62473a&#34;,&#34;dropCap&#34;:false}&#34;&gt;Limit policies, on the other hand, can limit the number of concurrent operations affecting a group, implement grace periods between sequential operations, or provide operations排他性因此，如果一个组正在运行，其他小组将拒绝所有索赔。当您想一次操作单个机架时，这特别有用。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph“ data-wp-block =” {“ hash”：“ DDE3D889-02E1-4C97-B8DB-7B8DB-7B8C779F626C”，“ dropcap”，“ dropcap”：false}&gt; country&gt; confunch&gt; covernal forking offormities forking of Protightions of Poldictions of Poldictions of Poldictional in Complactional in Collectional inselactions诸如诸如：：：&lt;/p&gt; &lt;/p&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name =“ core/list” data-wp-block =“ {“ hash”：“ 82C24B34-5D62-4E09-8ED5598A9FC928E”，“订购”，“：fords”：false“：false”：false，“值&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;测量工作量和群集健康的方法&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data data-wp-block-name =“ core/list-item” data-wp-block =“ []“&gt; &lt;em&gt; chem&gt; chepmaxoperations（group，max）：&lt;/em&gt;检查指定的组是否最多具有最大操作&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data data-wp-block-name =“ core/list-item” data-wp-block =“ []“&gt; &lt;em&gt; checkelapsedfromlastclaim（group，distation）：&lt;/em&gt;检查给定时间以来给定时间以来是否已经过去了，自上次声明与指定的&lt;/li li&gt; &lt;/li&gt; &lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;em&gt; checkelapsedfromlastunclaim（group，持续时间）：&lt;/em&gt;检查给定时间是否已经过去了，因为与操作有关&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ ab5a85e9-7962-47e3-bf9e-558454545454d9b7c5”，“ dropcap”：dropcap“：dropcap”：false}&gt;健康评估是一项重点检查，并且无法为硬保证提供了安全保证的安全性。健康数据收集本质上涉及分布式系统中的延迟，这意味着可以基于过时的集群健康视图批准两个同时进行破坏性操作的请求。极限策略执行的检查确实提供了艰苦的保证，因为它们是通过ETCD交易有条件地进行的。让我们探索如何工作。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data data-wp-block-name =“ core/saparator” data-wp-block =“ {” hash&#39;：“ CF11F91A-6480-44BF-97AE-AA661A8F523E”，“ opcity”，“ obycity”，“ obycity”，“ opcity”：“ alpha-channel” class =“ class =“ wp-block-separator-separator-separator insparator insparator insparator”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name =“ core/heading” data-wp-block =“ {” hash&#39;：“ 80101E32-FC99-4E92-B8ED-6C1D214C29B9”，“ LEVEL”：2} class =“ class =” wp-block-heading =“ wp-block-heading” id =“ id =” H-Architect&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;图Data-wp-block-name =“ core/image” data-wp-block =“ {” id“：1100184，” sizelug”：“大”，“ linkdestination”：“无”，“ align”：“中心”，“ hash”：“ 77539BBF-037E-4050-4050-9F24-C6C0DCA5EE59”，“ ALT”：“ ALT”：“}” class =“ class =” AlignCenter size-large size-large size-large size&gt; &lt;img load = im load =“” =“高度=“ 676” src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/blogfigure4-17321696658887-1024x676.png&#34; alt=&#34;&#34; class =“ wp-image-1100184” srcset =“ https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80，onError = redirect，format =auto/wp-content/uploads/2024/2024/11/11/blogfigure4-blogfigure4-bblogfigure4-1732166666666666666666666666588888888888888888888888888888888888888888888888888888888888888888888888888888888色88888.ppn&gt; https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror = redirect，format = auto/wp-content/uploads/2024/2024/11/blogfigure4-blogfigure4-blogfigure4-1732169666666666666588888888888888888888888888888887.PN00W， https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/blogfigure4-17321696658887.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/blogfigure4-17321696658887.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=2048,quality=80，onerror = redirect，format，format = auto/wp-content/uploads/2024/2024/2024/11/11/blogfigure4-blogfigure4-blogure4-blogure4-173216966666658888888888888888888888888888888888888888888888888888888848WID： 1024px）100VW，1024px“ referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ WP-元素caption”&gt;图4：辅助架构和要求授予过程。&lt;/figcaption&gt; &lt;/dig&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {” hash&#39;：“ 12513284-7271-401C-980B-980B-42F5555C5CE634”，“ dropcap”，“ dropcap”：false}&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ da75e2ea-9113-9113-409b-8176-250a4eec58ea”，“ dropcap”：false}“：false}”&gt;，我们将操作和组用作键入的键盘商店。当工作流程想要更改一个存储簇时，它会经过以下过程：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name =“ core/list” data-wp-block =“ {” hash&#39;：“ C9492C1E-9928-4200-9928-9D4B-5C8F12747215”，“订购”，“&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;想要提取索赔的工作流程，并提供有关目标存储工作负载的信息和操作的目的（1）。&lt;/li&gt;。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; Accounter从Grail（2）和当前的操作状态从ETCD（3）中检索当前的群集健康状态。&lt;/li&gt;。&#xA;&#xA;&#xA;&#xA;&lt;li data data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;在评估目标工作负载之前，Accounter评估平台范围的并发限制和速率限制（4）。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;接下来，‌技术特定的健康和限制策略将根据etcd的状态评估（5）。如果任何一项政策都失败了，则索赔立即被拒绝交易中的ltting。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;否则，如果满足所有条件，则建立并承诺对ETCD（6）构建所需更改的单个交易。&lt;/li&gt;。&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;根据ETCD交易的成功，索赔被接受或拒绝（7）。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;现在可以继续（8）。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;在操作后，工作流程负责通过辅助释放索赔。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph“ data-wp-block =” {“ hash”：“ 2D205B96-135B-4430-4430-4430-8450-D86CD6C6114A9”，“ dropcap”：dropcap“：false}”&gt; ETCD中的更改是通过交易执行的，确保了一致的接触操作。具体来说，我们使用乐观的锁定在进行更改之前，请验证组内部操作数量的假设。  交易构建器库为安全政策开发人员抽象这一复杂性，从而给他们留下了直接在内存中工作的印象。这种方法类似于&lt;a href =“ https://github.com/etcd-io/etcd/blob/main/main/client/client/v3/concurrency/stm.go” target =“ _ black” rel =“ noreferrer noopener”&gt; noreferrer noopener“&gt; etcm eftd的stm &lt;/a&gt; stm &lt;/a&gt; softabal dromactional memory）库，但可以通过优化&lt;/pc &lt;/perputiz &lt;/pc tailoriz conforcation &lt;/pc tailoriz condord &lt;/per tauccation。&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 4B15994D-02E0-02E0-44B4-A3E8-83A3A63A63F4215”，“ dropcap”：dropcap“：false}”&gt;，由于交易被拒绝，如果交易被拒绝，则由于最佳的并发式实施了一个重复的次数，因此可以重新训练。如果索赔被拒绝，只要操作仍然相关，我们就会依靠行动重试。如果拒绝是由于违反了组的费率限制，则辅助提供了一个有意义的退缩时间，该操作可以用来决定如何进行。&lt;/p&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/core/段落“ data-wp-block =” {“ hash”：“ 2E65EDF2EDF2-8787-47D5-A453-A453-0783B0B5CCFA”，“ dropcap”，“ dropcap”：dropcap“：false}”数据快照。如果索赔违反了使用缓存国家的任何一种政策，则立即拒绝而无需尝试将交易提交给ETCD。这是必不可少的，因为该系统必须每秒进行3,000-4,000次索赔尝试。这些流量的大部分来自平台审计工作负载通过旱压索赔尝试进行的能力。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/core”“ data-wp-block =” {“ hash”：“ 7f5555a1a-bccf-4A97-BD78-E09779105318”，“ dropcap”，“ dropcap”：false}“&gt; expd交易最终确定索赔时的索赔，均为pristation opertional pristation pristation pristation pristation pristation pristation &lt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name =“ core/saparator“ data-wp-block =” {“ hash”：“ 0E6B08F4-E6C0-44FA-96D8-38173A802CCF”，“不透明度”：“ alpha-channel”}“ alpha-channel”} class class =“ wp-block-parock-parock-eparator has-alpha-channel-channel-channel-channel-channel-channel-channel-pacity-&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name =“ core/head”“ data-wp-block =” {“ hash”：“ 5dfe78d2-ae09-4da5-8f72-8f72-a0db28154ee8”，“ level”：2} class =“ class =” wp-block-block-heading =“ wp-block-heading”&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph” data-wp-block =“ {” hash&#39;：“ 96d661d8-8126-41a9-9d44-13a5b54817c”，“ dropcap”：dropcap“：false}”&gt;我们的操作通常是我们设计的，因此我们设计了soppart confance oppart oppart oppart oppart oppart oppart oppy oppy confance，这些通过的索赔是重新进入的，这意味着，当儿童操作试图索赔时，它就变成了无障碍。这种设计允许在保持操作逻辑直接的同时进行更复杂的操作。程序员不需要了解整个操作结构即可确定是否已经提取索赔，他们只是根据需要采取索赔，知道系统将正确处理。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph“ data-wp-block =” {“ hash”：“ aa4aa757-d051-4607-a05b-a05b-eb2845346a3d”，“ dropcap”：dropcap“：false}”&gt;操作负责他们的运营索赔。但是，在某些情况下，操作可能会终止，意外失败或包含错误。尽管这些情况很少见，但它们确实发生在我们的规模上。系统必须确保最终释放索赔，因为陈旧的索赔可以阻止操作吞吐量。由于操作在数据模型中链接到其索赔，因此辅助始终可以追溯到操作。这用于识别非活动操作并安全释放过时的主张。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name =“ core/saparator” data-wp-block =“ {” hash&#39;：&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name =“ core/heading” data-wp-block =“ {“ hash”：“ d2b8cd75-c991-4fcd-8945-51279999292927”，“ calle&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 8A62F129-BD41-441-4475-A536-BA30040361AA”，“ dropcap”：dropcap“：false}”&gt;具有很大的责任。将政策制定委派给技术团队的风险使过度保守的政策可能会阻碍该平台执行机队范围内的运营能力。 Uber Colocates在同一主机上的不同技术的工作负载，导致同一主机上的数百个工作负载。当平台必须排出主机时，所有工作负载必须首先被排干（即移至其他主机）。限制性安全政策增加了仅能够部分排出主机的风险。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {” HASH“：” 065D0B30-BC9E-4635-B11E-74290CF41F53“，” DROPCAP“：false}”&gt;要解决此问题，我们已经实现了广泛的审核系统。该系统不断评估工作负载的&lt;em&gt;可索赔性&lt;/em&gt;，提供了整个平台上可能进行操作的准确快照。该信息发表在Grail中，并由补救循环用作识别可行操作的前过滤器。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/conagraph” data-wp-block =“ {“ hash”：“ CD52E911-BB11-4BD8-9BD8-9BD8-9B5C-0EDE76028F78”，“ dropcap”，“ dropcap”：false}“：false}”负责受影响的存储技术的团队。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;0f753d1e-2356-401c-a2c5-a0779e4fd4ba&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name =“ core/head”“ data-wp-block =” {“ hash”：“ 5A19B9D5-34B6-4B6-48DB-BF17-8C1081A1A1EA54”，“ LEVEL”：2} class =“ class =” wp-block-head =“ wp-block-Heading”&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph“ data-wp-block =” {“ hash”：“ 0B79E0B1-F348-4C7E-B1FE-94E4E4FECFCAC0”，“ dropcap”，“ dropcap”，“ dropcap”：false} kubernetes &lt;sup&gt;®&lt;/sup&gt; &lt;a href =“ https://kubernetes.io/docs/docs/concepts/workloads/workloads/pods/disruptions/” target =“ _ _ black” rel =“ noreferrer nooreferrer noopener”&gt; noopener noopener“&gt; intopener”&gt; into in&gt; into in&gt; into in&gt; into in&gt; into in&gt; intecrivion distrimion &lt;/a&gt; &lt;/a&gt;。在这里，我们解释了它们与Accounter的方法有何不同。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph” data-wp-block =“ {” hash&#39;：“ 90AC573C-B34B-48DE-B790-15634226352C”，“ dropcap”：dropcap“：false}”&gt;分布式锁定器通常会在一个锁定上锁定一个锁定的锁定，而锁定只能在一个锁上锁定，而一个锁定的操作只能锁定一个操作。但是，鉴于在ODIN中（主要是由于本地磁盘）进行单个工作负载所需的冗长时间 - 将整个群集用于单个工作负载操作，将是效率和不切实际的。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/core/段落“ data-wp-block =” {“ hash”：“ d38b4f0f-ad43-4a79-4a79-ac92-455555555555555fa20e23aa”，“ dropcap”，“ dropcap”：false}“：false}”&gt;更加灵活地扩展了锁定的锁定，可以将锁定的数量扩展到一个范围内。 同时地。这类似于Kubernetes采用的方法，在该方法中，中断预算预先设定了固定数量的操作。但是，Accounter通过仅专注于计算操作，从而使限制限制到单独的政策，从而与这些方法不同。此方法在策略设计方面具有更大的灵活性。例如，它允许S要求只允许一定数量的优化动作。尽管如此，如果主机失败并提出了紧急行动的请求，那总是被授予的。将这些紧急情况保留在模型中是一个优势，因为该政策可以说明从那时起，没有效率移动到完全修复主机故障为止。这种灵活性对于在适应实时条件的同时保持运营效率至关重要。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;cc797c74-5c1f-4b7b-b4ab-4f1ce27e4c72&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name =“ core/heading” data-wp-block =“ {” hash&#39;：“ C8458D63-F070-413A-B601-07FA8FEB090D”，“ LEVEL”，“：2}” class =“ class =” wp-block-heading =“ wp-block-heading”&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 633355CFA-615A-47D7-B76C-8F6490D9D68D”，“ dropcap”：false}“&gt;现在已经完全集成了所有操作，并且已完全集成了一个平台，并且该平台已完全集成了一个平台，并且数量已完全集成了一个，并且数量已完全集成。让我们看一下当前的数字：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 346D0F16-C987-4634-AEBBBB-1BBBBBBB520D4906D3”，“ dropcap”，“ dropcap”：falle}&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;1ceef2db-4db7-4166-95d9-476676e9332e&#34;,&#34;ordered&#34;:false,&#34;values&#34;:&#34;&#34;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []” &gt;&gt;每小时300,000个索赔评估&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []” &gt;&gt;每小时700万次干式索赔评估&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ E6313EBC-797E-4373-BF0F-BF0F-B07A618CFF7C“&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;c7913b1e-26c5-4bd8-9943-a930634b3805&#34;,&#34;ordered&#34;:false,&#34;values&#34;:&#34;&#34;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []” &gt;&gt; 2,000个活动操作&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []” &gt;&gt; 700,000个不同的组&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data data-wp-block-name =“ core/saparator” data-wp-block =“ {” hash&#39;：“ 061733d3-4c18-4c18-4ecb-893d-487eee40db6e3”，“ obisitical&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name =“ core/heading” data-wp-block =“ {” hash&#39;：“ 7a7b116b-7d6b-4eAc-4eAc-a84c-a84c-a84c-a84c-d17562b9a593”，“等级”，“级别”：2} class =“ class =” wp-block-block-heading“ wp-block-heading” id =“ id =”&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 980045BA-187B-49F0-49F0-8339-6486EB00855E“，” dropcap“：false}”&gt;多年来，辅助大大提高了奥丁的运营效率，使小型团队能够安全地管理数千个集群。它促进了集中效率计划，并授权领导能力将Uber的身体基础设施视为灵活和无常的。此外，通过明确的关注分离，这种援助保留了团队的独立性：补救循环所有者只专注于确定哪些操作是必要的，而无需担心安全考虑。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph“ data-wp-block =” {“ hash”：“ C91F0EAB-494B-494B-4EF9-91E5-F679CFF07372”，“ dropcap”：false}“：false}”&gt;一个不夸张的例子是我们的努力。我们能够完全集中的过程。我们要做的就是要求我们的自动化将工作负载移至带有加密的主机，而Accounter确保了它安全地发生。该过程涉及迁移210万个VCORS和1.6EIB本地磁盘。过去，像这样的运营将需要大量的计划/执行，涉及所有技术利益相关者以及花费多年的工程时间。 &lt;strong&gt;现在，它们是一个no-op。&lt;/strong&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ align”：“ center”，“ hash”：“ 0c8631c0b86-4321-b0fa-1124614856b3 src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXf9ke1obdn_A5SCJO98Si-zmTAX7ehygvUwbOzbfFXMFSMIJcZno4qaiijgDH9Us 9XBOZJNS-E60PB-T3WCMLADTAUVTMI_P_R1HJ0LWUSZZHI2I7KJGHHNUSKAETNYUU5N4L0F_D0QRS8LRS8LR96QH96QH91NXJBY？ alt =“” title =“图表” referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ WP-元素caption”&gt;图5：Uber过渡到加密-AT-REST的时间表。&lt;/figcaption&gt; &lt;/figcaption&gt; &lt;/figig&gt; &lt;/dig&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 880C1309-40C3-40C3-4E9F-8186-D4FE9768A736”，“ Dropcap”，“ dropcap”：false}“：false}”&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;add83f5b-3776-4924-8cd6-be8e819efc74&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name =“ core/heading” data-wp-block =“ {” hash&#39;：“ 8BE63190-B606-494F-B957-C3357-C335DCCDA674”，“：2}”：2} class =“ class =” wp-block-neading =“ Wp-block-Heading” id =“ id =” id =“&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ AC04A251-021D-4809-8A98-DBA96AB2E81B”，“ dropcap”：false}&gt; accounter Paradigm正在积极进化，我们正在限制一些限制。改进的一个重要领域是支持优先考虑操作。目前，操作依靠连续的民意调查来获得索赔，这会产生不知名SSARY流量，不允许优先考虑不同的操作类型。当较低优先效率的优化阻止高优先级，人为启发的操作时，这变得尤其有问题。感兴趣的另一个领域是能够直接在辅助中定义断路器。当前，ODIN中的每个循环都实现了此功能，以防止错误引起的不当行为。我们的目的是将其作为辅助的内置功能，简化流程并增强整体系统的弹性。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data data-wp-block-name =“ core/saparator” data-wp-block =“ {” hash&#39;：“ 65C6AE57-0747-4F76-BC1C1C1BBBBBBBB6DFB7906A”，“ opacity”，“ opcity”，“ opcity”：“&#xA;&#xA;&#xA;&#xA;&lt;h1 data-wp-block-name =“ core/heading” data-wp-block =“ {”级别“：1，”哈希：“ 59C7F492-08C9-4664-B14E-B14E-F3BBA5735C8C8D”}&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coragraph” data-wp-block =“ {” hash&#39;：“ EA9C0508-FBDB-4A7E-B7A8-59C59C59C59C59C59FBEABA”，“ dropcap”：dropcap“：false}”&gt;在此帖子中，我们引入了cockounter，一个全球协调系统，以改善该状态，以改善通过平台和安全性。提供操作协调为服务，因此可以在保持集群安全性并避免矛盾的行动的同时有效地执行大型操作。它跟踪正在进行的操作，执行特定技术的政策，并确保只有在安全时才启动新操作。该备用大大提高了Uber的运营效率，使小型团队可以安全地管理数千个集群，并驱动集中式程序，例如左右的迁移。&lt;/p&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ fontsize”：“ small”，“ hash”：“ 239B805B-3C25-3C25-4020-916E-CC0597347E03”，“ dropcap”：dropcap“：false}”：false}“：false}” class =“ hasmall-font-size”&gt; &lt;em&gt; kubernetes &lt;sup&gt;®&lt;/sup&gt;，etcd &lt;sup&gt;®&lt;/sup&gt;，其徽标是美国和其他国家/地区的Linux Foundation &lt;sup&gt;®®&lt;/sup&gt;的注册商标。 Linux基金会没有使用这些标记的认可。&lt;/em&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ fontsize”：“ small”，“ hash”：“ 5269E747-7779-465F-B5DE-B5DE-78E136363Ba453”，“ Cassandra &lt;sup&gt;®&lt;/sup&gt;是美国和/或其他国家的Apache软件基金会的注册商标或商标。这些标记的使用并不意味着Apache Software Foundation认可。&lt;/em&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph” data-wp-block =“ {“ fontsize”：“ small”，“ hash”：“ 94534B87-4345-401B-8341-941-9409E5E40AB6”，“是使用Openai的Chatgpt Enterprise生成的，并使用Pixlr进行了编辑。&lt;/em&gt; &lt;/p&gt;</description>
      <pubDate>Thu, 21 Nov 2024 06:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Automating Efficiency of Go programs with Profile-Guided Optimizations】具有配置引导优化的GO程序的自动化效率</title>
      <link>https://www.uber.com/blog/automating-efficiency-of-go-programs-with-pgo/</link>
      <description>【&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:1,&amp;quot;hash&amp;quot;:&amp;quot;5bb330df-3a7b-4e77-897c-f509ca64b7c9&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;47415ccf-4957-416d-81a7-22047eddc16d&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Profile-guided optimization improves the performance of compiled code by using runtime profiling data to inform compiler optimizations. This technique, recently integrated into Go, improves traditional optimizations such as function inlining, basic block and function reordering, register allocation, and more. At Uber, we’ve implemented PGO (profile-guided optimization) in a continuous optimization framework that includes daily profile collection, service-specific enrollment, CI testing, deployment, and performance monitoring. We addressed initial challenges related to increased build times by introducing a profile preprocessing tool, which significantly reduced compilation times. While measuring the impact at a fleet-wide level is difficult, we conducted performance benchmarks and real-world service evaluations at Uber. The results showed efficiency gains and reduced resource utilization for some specific services, validating the effectiveness of PGO-driven optimizations. Support for PGO in Golang was &lt;a href=&#34;https://go.dev/blog/pgo-preview&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;introduced&lt;/a&gt; in v1.20 and later improved in later versions through our fruitful collaboration with Google&lt;sup&gt;®&lt;/sup&gt;. This blog describes our experience building core components of PGO and deploying it at Uber.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;66991edf-712d-4edb-aec0-030c7b0d7dd3&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;13817894-ffd7-4e24-95dc-a68be2929cc0&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-background&#34;&gt;Background&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;5d92686c-179d-4603-9cbc-fa7c1b03c6db&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Profile-guided optimization uses the profile collected during a representative run to generate better code. At a high level, it can be divided into the following phases: profiling, analysis, and recompilation. Multiple languages already support PGO, including C/C++, Rust, Java, and Swift. However, this support was lacking for Golang, which led us to build this functionality in collaboration with Google.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d706bcf7-ff1d-44e0-8570-fac96a198d93&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Many compiler optimizations, such as inlining, register allocation, and instruction scheduling often use statically inferred estimates related to caller-callee frequencies, basic-block frequencies, and branch probabilities to guide optimization. The static estimation of these metrics may lead to suboptimal code generated by the compiler. These optimizations can easily benefit from dynamic information collected by profiling an application.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2d02c007-2c02-4105-bede-325478b55911&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Traditionally, a PGO-based compilation begins with an instrumentation phase to generate an instrumented version of the application. Next, the instrumented program runs with training data to collect the profile (that is, &lt;a href=&#34;https://dl.acm.org/doi/10.1145/183432.183527&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;edge profiles&lt;/a&gt;). These profiles are later fed to the compiler and the application is recompiled to produce an optimized binary. During this process, the compiler updates and propagates profile information, including feeding them to compiler passes to optimize hot/code paths. Modern compilers such as LLVM have incorporated PGO and reported &lt;a href=&#34;https://llvm.org/docs/HowToBuildWithPGO.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;speed-ups&lt;/a&gt; of around 20%. Since the instrumented execution of an application incurs significant overhead, &lt;a href=&#34;https://dl.acm.org/doi/10.1145/1772954.1772963&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;recent work&lt;/a&gt; has shown little or no performance loss by collecting execution profiles via sampling, leveraging tools like &lt;a href=&#34;https://dl.acm.org/doi/10.1145/1772954.1772963&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;hardware performance counter&lt;/a&gt; and &lt;a href=&#34;https://pkg.go.dev/runtime/pprof&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;pprof&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c8bc8a6c-e9a5-4ad2-aee2-2c2bdfa778a3&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Go binaries are often large as they’re statically linked and include all dependent packages and runtimes. For such large binaries, misses in the instruction cache and TLB can cause stalled cycles in the CPU’s front end leading to performance degradation. Profile-guided code-layout optimization is known to alleviate this problem. Recent work including &lt;a href=&#34;https://research.fb.com/publications/bolt-a-practical-binary-optimizer-for-data-centers-and-beyond/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Meta&lt;sup&gt;®&lt;/sup&gt; BOLT&lt;/a&gt; and &lt;a href=&#34;https://github.com/google/llvm-propeller&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Google&lt;sup&gt;®&lt;/sup&gt; Propeller&lt;/a&gt; have shown more than 10% performance improvements by optimizing code locality in data center workloads. Code-layout optimization improves code locality and comprises basic-block layout, function splitting, and function reordering optimizations. To reap maximum performance benefits,&amp;nbsp; these optimizations are typically performed during or post link-time using profiling information.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f1ec95f9-1bbf-4f88-bbde-11a849ea9da9&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;cf320cf8-f248-4232-b8b5-f010f9928765&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-overview-of-pgo-continuous-optimization-framework&#34;&gt;Overview of PGO: Continuous Optimization Framework&lt;/h2&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1106369,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;48952b07-454f-47f2-8b0b-4e8123ae9a76&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;508&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure1-17418222802069-1024x508.png&#34; alt=&#34;&#34; class=&#34;wp-image-1106369&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure1-17418222802069.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure1-17418222802069.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure1-17418222802069.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure1-17418222802069.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=1600,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure1-17418222802069.png 1600w&#34; sizes=&#34;auto, (max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 1: PGO in a continuous optimization framework.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6e5a6356-748a-4e03-8216-45b8f9df62aa&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;27e616a3-5324-4142-b804-f7fb814d8f10&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Let’s review the timeline of key PGO features:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;03ceb022-2882-4292-bd8a-d3a6853864ab&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;a href=&#34;https://go.dev/blog/pgo-preview&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;PGO-driven inlining&lt;/a&gt; was introduced in version 1.20&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;In version 1.21, &lt;a href=&#34;https://go.dev/blog/pgo&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;PGO-driven devirtualization&lt;/a&gt; was added, further optimizing execution efficiency&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;A &lt;a href=&#34;https://go.dev/blog/go1.23&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;profile pre-processing tool&lt;/a&gt; was released in version 1.23 to drastically improve build times&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2994bc22-bfb0-4fef-9f41-700fc43744eb&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The PGO framework at Uber is a continuous optimization process. Profiles are collected and used during the GoPGO compilation process. Optimized executables are then deployed in production, with pre-processing steps included to improve build times.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;8decc2b8-76e7-4f44-87bb-de67266947c6&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Enabling PGO in our build and deployment process involves several steps:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;ordered&amp;quot;:true,&amp;quot;hash&amp;quot;:&amp;quot;7c3f62f1-6eec-4ba2-a1bf-afb204a6ba58&amp;quot;,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;We collect performance profiles daily to ensure we have up-to-date data for guiding optimizations.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;We maintain a configuration system to enroll specific services for Go PGO, ensuring that only selected services undergo these optimizations.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;We perform CI tests for the PGO SDK to validate the changes and ensure they don’t introduce any stability issues.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Once the tests pass, we deploy the PGO-built services into our production environment.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Finally, we monitor the performance dashboard to track the impact of PGO on our services.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;21765215-0cdd-463c-8edc-08f81f739054&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;By following these steps, we systematically integrate PGO into our build and deployment pipeline, enhancing the performance and efficiency of our services.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;9ee7989f-9bdb-45cc-b62b-787f11a2452f&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-inlining&#34;&gt;&lt;br&gt;Inlining&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;beb360ae-d074-464d-81ca-9b63d3492404&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Function inlining is one of the most common optimizations that benefits from PGO. PGO inlining is a compiler technique that uses runtime profiling data to optimize function inlining decisions. The first step is collecting profiling data during program execution to identify frequently executed (hot) functions. Then, the compiler uses this data to selectively inline these hot functions, reducing function call overhead. This approach leads to more efficient code, unlike traditional static inlining heuristics, which don’t account for actual runtime behavior.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;6c48612e-ba57-481d-9644-1f47a16b701f&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-profile-collection&#34;&gt;&lt;br&gt;Profile Collection&lt;/h3&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1106372,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;d7af54fa-a95a-46b8-8d33-7ab19d4163de&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;511&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure2-17418224827152-1024x511.png&#34; alt=&#34;&#34; class=&#34;wp-image-1106372&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure2-17418224827152.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure2-17418224827152.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure2-17418224827152.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure2-17418224827152.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=1600,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure2-17418224827152.png 1600w&#34; sizes=&#34;auto, (max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 2: Profiling infrastructure for PGO.&amp;nbsp;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c1cc43eb-ba76-4709-b954-fcc3afb17826&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;638490d2-3fe4-46cb-9535-75f1cca3a039&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Our profiling infrastructure is designed to work seamlessly within a distributed system in production.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;29fcecd0-b9b1-4cd5-99ce-591bae539dac&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We collect continuous profiling data from multiple instances and merge these profiles to create a representative profile.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;011cd41c-1d1b-4426-99e6-10bb6b476b7a&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-preprocessing&#34;&gt;&lt;br&gt;Preprocessing&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;117af579-164b-4986-ab4e-d2875ba5afd0&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;After deploying PGO in our production environment, we observed a significant increase in build times across multiple services, with some experiencing delays of up to 8 times. This increase posed challenges for developers and service owners, making it crucial to address the issue promptly.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1106373,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;78f21def-0eb2-4ca5-85cd-db0d2cc73eee&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;317&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure3-3-17418225222984-1024x317.png&#34; alt=&#34;&#34; class=&#34;wp-image-1106373&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure3-3-17418225222984.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure3-3-17418225222984.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure3-3-17418225222984.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure3-3-17418225222984.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=1600,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure3-3-17418225222984.png 1600w&#34; sizes=&#34;auto, (max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 3: Timing breakdown for PGO compilation passes.&lt;br&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;26fe23f5-bc8c-48fe-86d1-4f0f03b2f856&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;15ed994e-04e6-404e-ba75-65bb314d3b3f&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;To identify the root cause of the compilation time degradation, we analyzed the compiler’s performance and found that pprof data parsing accounted for a significant portion—up to 95%—of the total compilation time when the PGO flow was enabled. Additionally, the repeated reading and parsing of the pprof file for each package compilation contributed significantly to the cumulative overhead.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;4387fd79-1bc0-4d13-b513-84d26e6a0387&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;To mitigate the slow compilation, we proposed an offline tool to preprocess the profile. The PGO preprocessor tool involves extracting runtime profiling data, generating and caching intermediate call graphs, and using call graph information for further analysis and optimization during the compilation process in Go compiler. The tool is already &lt;a href=&#34;https://go-review.googlesource.com/c/go/+/529738&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;up-streamed and approved&lt;/a&gt; into the community open-source version.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;19233727-1106-4a2f-929e-f19179b956d5&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Here are the basic steps involved in the PGO preprocessor in the Go compiler:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;ordered&amp;quot;:true,&amp;quot;hash&amp;quot;:&amp;quot;d8cf2e00-6d46-4547-876f-f0afea22fdc0&amp;quot;,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Extract runtime profiling data&lt;/strong&gt;: We use pprof profiles as input for the preprocessor tool. The new tool reads and parses profiling data once and extracts function call information of the Go program captured in the profiling data.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Construct call graphs&lt;/strong&gt;: The extracted profiling information is converted to a call graph with node and edge weights (called WeightedCallGraph). The call graph is cached in a certain format, including the information of the function caller, callee, address, and weights. The graph is used as input to guide optimizations in the Go compiler, specifically targeting hotpaths in the code. Optimizations such as inlining and devirtualization use profiling information to optimize hot paths for improved performance.&amp;nbsp;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Feed the output to the compiler&lt;/strong&gt;: The optimized code produced by the PGO-enabled compiler is linked with the rest of the program to create the final executable. During this phase, we enable link-time code and data layout optimization based on profile information to order the functions and data.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1106375,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;9d9c7d64-23fb-4764-87a8-f8f78375c306&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;403&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure4-17418225694732-1024x403.png&#34; alt=&#34;&#34; class=&#34;wp-image-1106375&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure4-17418225694732.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure4-17418225694732.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure4-17418225694732.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure4-17418225694732.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=1600,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure4-17418225694732.png 1600w&#34; sizes=&#34;auto, (max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 4: PGO profile preprocessing architecture.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;69ab7540-0d8e-4e6b-b579-c93fd716c96d&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;82b35d6d-5ed3-41fd-a3a9-565ef53017ab&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;To make the compilation even faster, we execute the preprocessing tool on the most recently collected fleet-wide profiles every day. As a result, the production build can use the latest processed profile right away.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d0b2ba84-4c95-4689-934c-9c4459434188&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Thanks to the preprocessing tool, PGO build times were significantly reduced, with most services experiencing only a minimal increase compared to their original durations.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;1fa736b1-7866-4a0e-bf83-6db8f9c1d49c&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7413453a-64b6-4424-9972-6522648442b1&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-performance-impact&#34;&gt;Performance Impact&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;07d689fb-28ec-4c5f-984e-f80fc3d27be6&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In this section, we show the performance impact of PGO inlining on synthetic benchmarks and on Uber services.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;c69c3579-bc24-4c15-b52b-e80b17212b5c&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-synthetic-benchmarks&#34;&gt;Synthetic benchmarks&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;383b57de-64c7-419a-920e-13d42929baef&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;First, we show the performance impact of PGO on open-source synthetic benchmarks. The data is collected on a server with Intel&lt;sup&gt;®&lt;/sup&gt; Xeon&lt;sup&gt;®&lt;/sup&gt; Gold 6136 CPU, 128GB of memory, and Linux&lt;sup&gt;®&lt;/sup&gt; version 6.8.0.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;35947ade-bf2c-446b-a1d3-403e30783d83&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;a href=&#34;https://github.com/goccy/go-json&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;go-json&lt;/a&gt; is one of the most widely used third-party JSON libraries in Go. It provides comprehensive benchmarks for ‌performance. We run the benchmarks on all standard encoding/JSON libraries with 20 iterations on all benchmarks.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1106377,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;a0b38e83-1d87-46ed-b1a7-b5c4d5d1dd97&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;727&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure5-17418226505116-1024x727.png&#34; alt=&#34;&#34; class=&#34;wp-image-1106377&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure5-17418226505116.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure5-17418226505116.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure5-17418226505116.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure5-17418226505116.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=1600,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure5-17418226505116.png 1600w&#34; sizes=&#34;auto, (max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 5: Performance benchmark of PGO on go-json.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;db2f2820-034f-4a5a-b5ba-89a9bc1f0193&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;5e8993e6-49bd-4b32-aa99-76a7c1cd6ba8&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Overall, the PGO-driven inlining delivers a 12% performance improvement for the entire benchmark. A lot of microbenchmarks show more than 20% performance gain.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;75938d21-d08f-4460-a81f-51ca2a0d9f61&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The reason for the performance improvement can also be validated by inspecting the iTLB (instruction translation lookaside buffer) misses. Comparing the number of misses from the original benchmark and the PGO-compiled binary in Figure 6, we can see that PGO can greatly reduce the number of iTLB misses by 30%.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure data-wp-block-name=&#34;core/table&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7c98e6d7-1bb2-4b10-8eef-85707e67d3e3&amp;quot;,&amp;quot;hasFixedLayout&amp;quot;:true,&amp;quot;head&amp;quot;:[],&amp;quot;body&amp;quot;:[],&amp;quot;foot&amp;quot;:[]}&#34; class=&#34;wp-block-table&#34;&gt;&lt;table class=&#34;has-fixed-layout&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;Baseline&lt;/td&gt;&lt;td&gt;PGO&lt;/td&gt;&lt;td&gt;Change&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Instructions&lt;/td&gt;&lt;td&gt;2.84E+12&lt;/td&gt;&lt;td&gt;2.77E+12&lt;/td&gt;&lt;td&gt;-2.41%&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Cycles&lt;/td&gt;&lt;td&gt;9.34E+11&lt;/td&gt;&lt;td&gt;9.10E+11&lt;/td&gt;&lt;td&gt;-2.51%&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;L1-icache-misses&lt;/td&gt;&lt;td&gt;2.22E+09&lt;/td&gt;&lt;td&gt;1.98E+09&lt;/td&gt;&lt;td&gt;-10.78%&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;iTLB-misses&lt;/td&gt;&lt;td&gt;5.07E+06&lt;/td&gt;&lt;td&gt;3.31E+06&lt;/td&gt;&lt;td&gt;-34.64%&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 6: Performance counter comparison from performance record.&amp;nbsp;&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;bca35c62-72ac-4743-8bff-93cb618bb098&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;07f7b888-ecdf-4f09-947a-250aed9d85dc&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We also investigated the profile of PGO and non-PGO runs. We found that the default inliner can’t inline those hot functions (such as checkValid in Figure 7) since the body size is larger than the default inliner budget. After the inliner budget is increased with PGO build, those 3 functions can be inlined. We also noticed the PGO inliner slightly increases the number of inlining call sites.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1106380,&amp;quot;sizeSlug&amp;quot;:&amp;quot;full&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;191f1e18-538f-4b54-848d-2b15bf952218&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-full&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;764&#34; height=&#34;780&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure7-17418230583990.png&#34; alt=&#34;&#34; class=&#34;wp-image-1106380&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=764,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure7-17418230583990.png 764w, https://blog.uber-cdn.com/cdn-cgi/image/width=294,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure7-17418230583990.png 294w&#34; sizes=&#34;auto, (max-width: 764px) 100vw, 764px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 7: Call graph of checkValid function.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;040aa397-1290-447f-afeb-d1b3181e376a&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e7b2cd40-8b15-4b7e-8ab3-0cc189979fa7&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We also investigated the reason for the performance improvement. In the baseline version, 35,545 call sites were inlined, where 36,544 call sites were inlined in the PGO version.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;5f3c3801-ff66-41c2-9f0a-1c588702af82&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;a href=&#34;https://github.com/uber-go/tally&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Tally&lt;/a&gt; is a popular library for fast, buffered, and hierarchical stats collection. After we apply PGO-driven inlining, it delivers an average 10% performance gain, and some of the microbenchmarks show more than 50% improvement.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1106382,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;464f61bd-2907-46d8-a165-0c01c3f109d3&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;633&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure8-17418231253882-1024x633.png&#34; alt=&#34;&#34; class=&#34;wp-image-1106382&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure8-17418231253882.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure8-17418231253882.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure8-17418231253882.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1478,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure8-17418231253882.png 1478w&#34; sizes=&#34;auto, (max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 8: Performance comparison of PGO on Tally benchmark suite.&amp;nbsp;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;b5dba917-faca-4d15-a6fb-72e7b5b08c5e&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;8aa4f1cf-dfa4-476a-bfcd-37b4a0548e06&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-enrolling-uber-services&#34;&gt;Enrolling Uber Services&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c1fdc0ec-58fb-4b56-a5bd-5aa22f3f0dd8&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We currently enroll several thousand services at Uber with PGO. However, measuring PGO performance presents several challenges. One key difficulty is the lack of A/B performance measurement support in production with different compiled binaries, making it hard to directly compare PGO-optimized and non-optimized versions. Additionally, CPU usage can be significantly influenced by traffic variations (requests per second), which can fluctuate and skew results. The default autoscaling feature further complicates this by dynamically adjusting resources, making it difficult to isolate the impact of PGO. Moreover, ongoing changes to the service’s source code during the measurement period can introduce variability, making it challenging to attribute performance improvements solely to PGO optimizations.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e678d97c-68ff-413b-93c3-e5904ff8c6ef&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;After extensive exploration of different methodologies, we found the best approach to measure impact is by comparing performance metrics for 7 days before and 7 days after enabling PGO.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1106411,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;82b50f92-1663-45e1-b38c-866b8dcd411d&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;490&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure9-17418422302861-1024x490.jpg&#34; alt=&#34;&#34; class=&#34;wp-image-1106411&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure9-17418422302861.jpg 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure9-17418422302861.jpg 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure9-17418422302861.jpg 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure9-17418422302861.jpg 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=2000,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure9-17418422302861.jpg 2000w&#34; sizes=&#34;auto, (max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 9: CPU core allocation count for top 6 services of 5 months.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;bd2450cc-49e0-4d6a-a2a5-3e699b88e9b9&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;dd946800-ebfe-45a7-a0e8-322e4c013cfa&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We selected the top 6 services and measured CPU allocations with PGO enabled and disabled, as shown in Figure 9. The y-axis represents the number of CPU cores. The yellow line shows the number of cores when PGO is disabled, while the blue line represents the number of cores when PGO is enabled. Since 4/18/24, we’ve observed a reduction in the number of cores with PGO enabled. However, due to ‌autoscaling and varying RPS, we need to establish a method to correlate that the reduction in CPU allocation is directly related to PGO.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;29f82a5e-b31a-4256-bd18-b556f090e581&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;To verify the measured gain of PGO is real, we compared the profiles of non-PGO (Figure 10a) and PGO (Figure 10b) runs. It’s clear that the important functions such as checkValid aren’t inlined by default, but will be inlined with the PGO build. Therefore, we can draw the conclusion that measured gain does mostly come from PGO.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;cfe2815e-ae36-4370-8074-b561d8c9a536&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1106413,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;4809beb1-708b-41bb-b967-0a93383f4226&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;432&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure10a-17418423098907-1024x432.png&#34; alt=&#34;&#34; class=&#34;wp-image-1106413&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure10a-17418423098907.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure10a-17418423098907.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure10a-17418423098907.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1146,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure10a-17418423098907.png 1146w&#34; sizes=&#34;auto, (max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 10a: Profile collected during baseline binary execution.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1106414,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;913353b7-1eac-4a2f-90cb-270ffb631c85&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;422&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure10b-17418423434799-1024x422.png&#34; alt=&#34;&#34; class=&#34;wp-image-1106414&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure10b-17418423434799.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure10b-17418423434799.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure10b-17418423434799.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure10b-17418423434799.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=1600,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure10b-17418423434799.png 1600w&#34; sizes=&#34;auto, (max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 10b: Profile collected during PGO binary execution.&amp;nbsp;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e450b9bd-426b-48d9-a731-4413b2f1a506&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;3294f3ad-7442-456b-a6b7-0dc3e97cda57&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:1,&amp;quot;hash&amp;quot;:&amp;quot;606f8466-038f-4d63-ba58-9e136c09c3b7&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-conclusion&#34;&gt;Conclusion&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;5841dc7d-00b5-4942-b525-2e0eb0d1840f&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Profile-guided optimizations can significantly enhance software performance by using runtime data to guide compiler optimizations. At Uber, PGO led to a ~4% performance gain through inlining optimizations and a reduction of 24,000 CPU cores across top services. Measuring PGO’s impact can be complex, but this analysis demonstrates its value in optimizing resource utilization and achieving substantial performance improvements.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;8247d241-9851-41d0-954d-8b277191c1a9&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c3dca5fe-2e46-4477-8d7e-e12250cf5fa0&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-acknowledgments&#34;&gt;Acknowledgments&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6c574bc9-e3bb-4601-a434-7a456b8c28f1&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We’d like to acknowledge former team member Jin Lin for designing, implementing, and upstreaming PGO inline and basic block reordering. Jin also measured PGO performance changes internally. We also extend our gratitude to former team manager Raj Barik for designing, implementing, and upstreaming type specialization.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c982a652-92d1-4939-acc3-0fb999b33bba&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Additionally, we thank our former interns, Ghadeer Alabandi and Swastik Mittal, for their contributions. We’re grateful to our colleagues at Uber, including Rasmus Vestergaard, Sung Wang, Zhongpeng Lin, Haiming Tian, Anthony Blelloch, Saurabh Agrawal, Tapan Thaker, Curtis Patrick, Lasse Vilhelmsen, Paweł Królikowski, Sergey Balabanov, Niels Lindgren, Tony Alaniz, Cristian Velazquez, Kanad Sinha, Siyang Liu, Minglei Wang, Johan Mena, Taiwon Chung, Ryan Hang, and Jacob Oaks.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;dd396639-1fa6-428e-9e29-6e49d94ca95d&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Finally, we’d like to thank Michael Pratt, Cherry Mui, and Austin Clements from the Google Go compiler team for their support and collaboration.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;38644c53-d5e8-465e-8de1-5c74107911df&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Cover Photo Attribution: &lt;/em&gt;&lt;em&gt;Image generated using the ImageGen3 AI model.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;31a5ecd1-6a67-4fda-91c9-4344524bef3c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Google&lt;sup&gt;®&lt;/sup&gt; is a registered trademark of Google Inc.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;f712e6e2-a340-4c7c-ab7c-8c7e6e66f608&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Linux&lt;sup&gt;®&lt;/sup&gt; is the registered trademark of Linus Torvalds in the U.S. and other countries.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;c101c181-ea68-4633-9a28-b9b7c5f8db57&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Meta&lt;sup&gt;®&lt;/sup&gt; is a registered trademark of Meta Inc.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;62f8ae11-9698-47b7-bcf1-bc4979e17194&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Java, MySQL, and NetSuite are registered trademarks of Oracle&lt;sup&gt;®&lt;/sup&gt; and/or its affiliates.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;c215f2bd-0576-459c-82e6-2b61385ae2f1&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Swift&lt;sup&gt;®&lt;/sup&gt; and the Swift logo are trademarks of Apple&lt;sup&gt;®&lt;/sup&gt; Inc.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;8b8a6d22-ef69-4a36-b302-a5c3bf262f54&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Xeon&lt;sup&gt;®&lt;/sup&gt; is a trademark of Intel® Corporation or its subsidiaries.&lt;/em&gt;&lt;/p&gt;】&lt;h1 data-wp-block-name =“ core/heading” data-wp-block =“ {”级别“：1，”哈希：“ 5BBBB330DF-3A7B-4E77-4E77-897C-F509CA64B7C9”}&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;47415ccf-4957-416d-81a7-22047eddc16d&#34;,&#34;dropCap&#34;:false}&#34;&gt;Profile-guided optimization improves the performance of compiled code by using runtime profiling data to inform compiler optimizations.该技术最近集成到GO中，改善了传统的优化，例如功能内部，基本块和功能重新排序，注册分配等等。在Uber，我们在连续优化框架中实现了PGO（配置文件指导优化），其中包括每日个人资料收集，特定服务的注册，CI测试，部署和性能监控。我们通过引入配置文件预处理工具来解决与增加构建时间有关的初始挑战，该工具大大减少了汇编时间。虽然很难衡量在范围内的范围内的影响，但我们在Uber进行了性能基准和现实服务评估。结果表明，某些特定服务的效率提高和资源利用率降低，从而验证了PGO驱动的优化的有效性。 Golang中对PGO的支持为&lt;a href =“ https://go.dev/blog/pgo-preview” target =“ _ black” rel =“ noreferrer noopener”&gt;在v1.20中引入&lt;/a&gt; &lt;/a&gt;在V1.20中，随后通过与Google &lt;sup&gt;®&lt;/sup&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;。该博客描述了我们建立PGO的核心组件并在Uber部署的经验。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;66991edf-712d-4edb-aec0-030c7b0d7dd3&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name =“ core/heading” data-wp-block =“ {” hash&#39;：“ 13817894-ffd7-4e24-4e24-95dc-a68be292929cc0”，“ level”：2} class =“ class =” wp-block-heading“ wp-block-heading” id =“ id =”&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph” data-wp-block =“ {” hash&#39;：“ 5d92686c-179d-4603-4603-9cbc-fa7c1b03c6db”，“ dropcap”：dropcap“：false}”&gt; false}“&gt; false}”&gt; Profile Profile Profife profile Profificed优化在代表性的代码过程中使用了更好的代码代码，以更好地代表代码。在高水平上，它可以分为以下阶段：分析，分析和重新编译。多种语言已经支持PGO，包括C/C ++，Rust，Java和Swift。但是，Golang缺乏这种支持，这使我们与Google合作构建了此功能。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;d706bcf7-ff1d-44e0-8570-fac96a198d93&#34;,&#34;dropCap&#34;:false}&#34;&gt;Many compiler optimizations, such as inlining, register allocation, and instruction scheduling often use statically inferred estimates related to caller-callee频率ES，基本块频率和分支概率，以指导优化。这些指标的静态估计可能导致编译器生成的次优码。这些优化可以通过分析应用程序收集的动态信息很容易受益。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/paragraph“ data-wp-block =” {“ hash”：“ 2d02c007-2c02-4105-bede-325478b55911”，“ dropcap”：false}“&gt;传统上，基于PGO的汇编是在仪器相位开始生成仪器的仪器版本。接下来，仪器程序将使用训练数据运行以收集配置文件（即，&lt;a href =“ https://dl.acm.org/doi/10.1145/183432.183527” target =“ _ blank”这些轮廓后来被馈送到编译器，并重新编译应用程序以产生优化的二进制文件。在此过程中，编译器更新并传播配置文件信息，包括将它们馈送到编译器通过以优化热/代码路径。现代编译器（例如LLVM）已结合了PGO并报告了&lt;a href =“ https://llvm.org/docs/howtobuildwithpgo.html” target =“ _ blank” rel =“ noreferrer noopener”&gt; speeds &lt;/a&gt; &lt;/a&gt; &lt;/a&gt; &lt;/a&gt; &lt;/a&gt; &lt;/a&gt;。由于仪器的执行申请的执行构成了明显的间接费用，因此&lt;a href =“ https://dl.acm.org/doi/10.1145/1772954.17772963” target =“ _ black” rel =“ rel =” rer =“ noreferrer noopener”&gt; noopener noopener“&gt; no no no note note &lt;/a&gt; exportive bery &lt;/a&gt; exportive &lt;/a&gt; &lt;/a&gt; &lt;/a&gt; &lt;/a&gt; &lt;/a&gt; &lt;/a&gt; &lt;/a&gt; &lt;/&gt; href =“ https://dl.acm.org/doi/10.1145/1772954.1772963” target =“ _ blank” rel =“ noreferrer noopener”&gt;硬件性能counter rel =“ noreferrer noopener”&gt; pprof &lt;/a&gt;。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ c8bc8a6c-e9a5-4ad2-aee2-2c2bdfa778a3”，“ dropcap”，“ dropcap”：false}“：false}”&gt;通常在统计上链接，并包含统一的相关包，并包含所有相关的包装。对于如此大的二进制文件，指令缓存和TLB的错过会导致CPU前端停滞的周期，从而导致性能降解。已知配置文件指导的代码 - 层优化可以减轻此问题。最近的工作，包括&lt;a href =“ https://research.fb.com/publications/bolt-a-practical-binary-optimizer-for-data-centers-anders-anders-and-beyond/” target =“ _ black” rel =“ noreferrer noopener noopener”&gt; href =“ https://github.com/google/llvm-propeller” target =“ _ blank” rel =“ noreferrer noopener”&gt; google &lt;sup&gt;®&lt;/sup&gt; propeller &lt;/a&gt;通过在数据中心工作负载中优化代码端口，显示了超过10％的性能改进。代码优化优化改善了代码局部性，并包括基本块布局，函数拆分和功能重新排序优化。为了获得最大的性能优势，这些优化通常是在链接时间后使用分析信息进行的。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name =“ core/seParator“ data-wp-block =” {“ hash”：“ F1EC95F9-1BBF-4F88BBDE-111A849EA9E9DA9”，“不透明度”：“ alpha-channel”}“ class” class =“ WP-block-block-eparator-eparator has-alpha-channel-opacity&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;cf320cf8-f248-4232-b8b5-f010f9928765&#34;,&#34;level&#34;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-overview-of-pgo-continuous-optimization-framework&#34;&gt;Overview of PGO:连续优化框架&lt;/h2&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;图data data-wp-block-name =“ core/image” data-wp-block =“ {“ id”：1106369，“ sizeSlug”：“大”，“ linkdestination”：“ none”，“ align”，“ align”：“ center”，“ hash”：“ 48952B07-454F-47F-47F-47F-47F-47F-47F2-4B0B0B0B0B-4E” class =“ AlignCenter size-large”&gt; &lt;img loading =“ lazy” dododing =“ async” width =“ 1024” height =“ 508” src =“ https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80，quality=80，onErr = redirt = redirt = auto/wp-content/uploads/2025/03/03/5. class=&#34;wp-image-1106369&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure1-17418222802069.png 1024W，https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror = redirect，format = auto/wp-content/uploads/2025/2025/03/03/5 https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80，onerror=redirect，format，format = auto/wp-content/uploads/2025/2025/03/03/5 https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80，onerror=redirect，format，format = auto/wp-content/uploads/2025/2025/03/03/03/figure1-figure1-figure1-17418222228020202020202069.png 15336.png 153366.png 15366w，15336.pn，15336W，w，,, https://blog.uber-cdn.com/cdn-cgi/image/width=1600，quality=80，onerror=redirt = redirect，format = auto/wp-content/uploads/2025/2025/03/03/03/5 100vw，1024px“ referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ WP-元素caption”&gt;图1：连续优化框架中的PGO。&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 6E5A6356-748A-4E-4E03-8216-8216-45B8F9DF62AA”，“ dropcap”：dropcap“：fals”&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 27E616A3-5324-4142-B804-F7FB814D8F10&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name =“ core/list” data-wp-block =“ {” hash&#39;：“ 03CEB0222-2882-4292-BD8A-D3A6853864AB”，“ ordered”：fords&#39;：fords&#39;：false“：false，” values，“ values”}&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;a href =“ https://go.dev/blog/pgo-preview” target =“ _ black” rel =“ noreferrer noopener”&gt; noreferrer noopener“&#xA;&#xA;&#xA;&#xA;&lt;li data data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;在版本1.21中，&lt;a href =“ https://go.dev/blog/pgo/pgo” target =“ _ vramp”添加&lt;/a&gt;，进一步优化执行效率&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; a &lt;a href =“ https://go.dev/blog/blog/go1.23” target =“ _ black” el =“ noreferrer noopener”&gt; noreferrer noopener“&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 2994BC22-BFB0-4FEF-9F41-9F41-700F41-700FC43744EB”，“ dropcap”，“ dropcap”：false}&gt; false}&gt; Uber的PGO框架是一个持续的优化过程。在GOPGO汇编过程中收集并使用轮廓。然后将优化的可执行文件部署在生产中，其中包括改进构建时间的预处理步骤。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph“ data-wp-block =” {“ hash”：“ 8decc2b8-76e7-4f44444444444444444444-87bb-de67266947c6”，“ dropcap”，“ dropcap”：dropcap“：false}”&gt;在我们的构建和部署过程中启用PGO&#xA;&#xA;&#xA;&#xA;&lt;ol data-wp-block-name =“ core/list” data-wp-block =“ {“ ordered”：true，“ hash”：“ 7C3F62F1-6EEC-4BA-4BA2-A1BF-A1BF-AFB-AFB204A6BA58”，“值&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;我们每天收集性能配置文件，以确保我们有最新的数据用于指导优化。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;我们维护一个配置系统来注册GO PGO的特定服务，以确保只有选定的服务进行这些优化。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;我们对PGO SDK执行CI测试以验证更改并确保它们不引入任何稳定性问题。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;测试通过，我们将PGO构建的服务部署到我们的生产环境中。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;最后，我们监视性能仪表板以跟踪PGO对我们服务的影响。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;21765215-0cdd-463c-8edc-08f81f739054&#34;,&#34;dropCap&#34;:false}&#34;&gt;By following these steps, we systematically integrate PGO into our build and deployment pipeline, enhancing the performance and efficiency of our services.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data data-wp-block-name =“ core/head”“ data-wp-block =” {“ level”：3，“ hash”：“ 9EE7989F-9BDB-45cc-b62b-787f11a2452f“}”&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph” data-wp-block =“ {” hash&#39;：“ BEB360AE-D074-464D-81CA-81CA-9B63D3492404”，“ dropcap”：falle}“：false}”&gt;内置的功能是从PGO中受益的最常见优化之一。 PGO内部是一种编译器技术，它使用运行时分析数据来优化函数内部决策。第一步是在程序执行过程中收集分析数据，以识别经常执行的（热）功能。 ThEN，编译器使用此数据选择性地内联这些热功能，减少函数调用开销。与传统的静态内部启发式方法不同，这种方法会导致更有效的代码，而传统静态插入术，这并不能解决实际运行时行为。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data data-wp-block-name =“ core/heading” data-wp-block =“ {”级别“：3，”哈希：“ 6C48612E-BA57-481D-9644-1F47A16B701F”}&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;图data-data-wp-block-name =“ core/image” data-wp-block =“ {“ id”：1106372，“ sizeSlug”：“大”，“ linkdestination”：“ none”，“ align”，“ align”：“ center”，“ hash”：d7Af54fa-a95a-a95a-a95a-a95a-46b8-46b8-8dd3333333333333333333333419d419d419d.and.and.and.and.and.and.and.and.and.and.and.and.and.and.and.and.and.and.&#39;&#39; class =“ AlignCenter size-large”&gt; &lt;img loading =“ lazy” dododing =“ async” width =“ 1024” height =“ 511” src =“ https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80，onerror = redirt = redirct，format = auto/wp-content/uploads/2025/03/03/5 class=&#34;wp-image-1106372&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure2-17418224827152.png 1024W，https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror = redirect，format = auto/wp-content/uploads/2025/03/03/03/03/5 https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80，onerror=redirect，format，format = auto/wp-content/uploads/2025/2025/03/03/5 https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80，onerror=redirect，format，format = auto/wp-content/uploads/2025/2025/03/03/5 https://blog.uber-cdn.com/cdn-cgi/image/width=1600，quality=80，onerror = redirect，format，format = auto/wp-content/uploads/2025/2025/03/03/03/figUre2 1024px）100VW，1024px“ referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ WP-元素caption”&gt;图2：PGO的分析基础架构。 &lt;/figcaption&gt; &lt;/fige&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ C1CC43EB-BA76-4709-B954-FCC3AFB17826”，“ dropcap”：false}&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 638490d2-3fe4-46cb-9535-7535-75f1cca3a039”，“ dropcap”，“ dropcap”：dropcap“：false}”&gt;我们的配置基础架构是在生产中的生产。&lt;/&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 29fcecd0-b9b1-4cd5-99ce-591Bae539dac”，“ dropcap”，“ dropcap”，“ dropcap”：false}“：false}”&gt;我们从多个实例中收集连续分析数据，以创建代表性的配置文件，以创建代表性的配置文件&#xA;&#xA;&#xA;&#xA;&lt;h3 data data-wp-block-name =“ core/heading” data-wp-block =“ {”级别“：3，”哈希：“ 011CD41CD41B-4426-99E6-10BB6B476B476B7A”}&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {” hash&#39;：“ 117AF579-164B-4986-AB4E-D2875BA5AFD0”，“ dropcap”：false}“：false}”&gt;在我们的生产环境中部署PGO之后，我们观察到跨多个服务的构建时间大幅度增加，其中一些经验延迟了最高8次。这一增长对开发商和服务所有者构成了挑战，这对于迅速解决该问题至关重要。 &lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;id&#34;:1106373,&#34;sizeSlug&#34;:&#34;large&#34;,&#34;linkDestination&#34;:&#34;none&#34;,&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;78f21def-0eb2-4ca5-85cd-db0d2cc73eee&#34;,&#34;alt&#34;:&#34;&#34;}&#34; class =“ AlignCenter size-large”&gt; &lt;img loading =“ lazy” dododing =“ async” width =“ 1024” height =“ 317” src =“ https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80，quality = 80，onerror = redirct，format = auto/wp-content/uploads/2025/03/03/03/5 class =“ wp-image-11106373” srcset =“ https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80，onerror = redirect，format = auto/wp-content/uploads/2025/03/03/03/5 https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror=redirect，format，format = auto/wp-content/uploads/2025/03/03/figure3/figure1 https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80，onerror=redirect，format，format = auto/wp-content/uploads/2025/2025/03/03/03/figure1 https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80，onerror=redirect，format，format = auto/wp-content/uploads/2025/2025/03/03/03/figure3 https://blog.uber-cdn.com/cdn-cgi/image/width=1600，quality=80，onerror = redirt = redirect，format = auto/wp-content/uploads/2025/2025/03/03/03/figure3 1024px）100VW，1024px“ referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ wp-element-caption”&gt;图3：PGO汇编的时序分解。&lt;br&gt; &lt;br&gt; &lt;br&gt; &lt;br&gt; &lt;br&gt; &lt;br&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 26FE23F5-BC8C-48FE-86D1-4F01-4F0F03B2F856”，“ dropcap”，“ dropcap”：false}“：false}”&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;15ed994e-04e6-404e-ba75-65bb314d3b3f&#34;,&#34;dropCap&#34;:false}&#34;&gt;To identify the root cause of the compilation time degradation, we analyzed the compiler’s performance and found that pprof data parsing accounted for a启用PGO流量的总汇编时间的显着部分（至95％）。此外，每个软件包汇编的PPROF文件的重复读取和解析对累积开销产生了重大贡献。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 4387FD79-1BC0-4D13-B513-84D26E6A0387”，“ dropcap”：dropcap“：false}”&gt;降低了慢速汇编，我们建议使用compline Annline工具，请访问complecss for。 PGO预处理器工具涉及提取RUNTIME分析数据，生成和缓存中间呼叫图，并使用呼叫图信息在GO编译器中的编译过程中进行进一步的分析和优化。该工具已经&lt;a href =“ https://go-review.googlesource.com/c/go/ +/529738” target =“ _ black” rel =“ noreferrer noopener”&gt;上流和批准&lt;/a&gt; &lt;/a&gt; &lt;/a&gt; &lt;/a&gt; &lt;/a&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 19233727-1106-4A2F-929E-F19179B956D5”，“ dropcap”，“ dropcap”：false}&#xA;&#xA;&#xA;&#xA;&lt;ol data-wp-block-name =“ core/list” data-wp-block =“ {“ ordered”：true，“ hash”：“ D8CF2E00-6D46-46-4547-876F-F0AFEA22FDC0”，“ valus”，“值&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt;提取运行时分析数据&lt;/strong&gt;：我们使用pprof crofiles作为预处理器工具的输入。新工具一次读取和解析分析数据，并提取在分析数据中捕获的GO程序的呼叫函数信息。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt;构造呼叫图&lt;/strong&gt;：提取的分析信息被转换为带有节点和边缘权重的呼叫图（称为rateveredCallGraph）。呼叫图以某种格式缓存，包括功能呼叫者，Callee，地址和权重的信息。该图用作指导GO编译器中的优化的输入，专门针对代码中的热心。诸如内部和偏爱之类的优化使用信息分析信息来优化热路，以提高性能。 &lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt;将输出馈送到编译器&lt;/strong&gt;：由启用PGO的编译器生成的优化代码与程序的其余部分链接，以创建最终可执行文件。在此阶段，我们根据配置文件信息启用链接时间代码和数据布局优化，以订购功能和数据。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ id”：1106375，“ sizeSlug”：“大”，“ linkdestination”：“ none”，“ noce”，“ align”：“ center”，“ hash”，“ hash”：“ 9D9C7D64-23FB-4764-4764-4764-877A.87A8-F85C301” class =“ AlignCenter size-large”&gt; &lt;img loading =“ lazy” dododing =“ async” width =“ 1024” height =“ 403” src =“ https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80，quality=80，onerror = redirct，format = auto/wp-content/uploads/2025/03/03/03/5 class=&#34;wp-image-1106375&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure4-17418225694732.png 1024W，https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80，onerror = redirect，format = auto/wp-content/uploads/2025/03/figure4-17418225694732.png 300W， https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80，onerror = redirect，format，format = auto/wp-content/uploads/2025/2025/03/03/03/figure4-figure4-figure4-figure4-figure4-figure4-1741825694732.pn2.pn2.pn2.pn2.png 76868.png 768ww， https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80，onerror=redirect，format，format = auto/wp-content/uploads/2025/2025/03/03/03/figure4-figure4-figure4-figure4-figure4-17418225694732.png 15362.png 15362.p15366.p15366w，15366W，15366W. https://blog.uber-cdn.com/cdn-cgi/image/width=1600，quality=80，onerror = redirt = redirect，format = auto/wp-content/wp-content/uploads/2025/2025/03/03/03/figure4 1024px）100VW，1024px“ referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ wp-- element-caption”&gt;图4：PGO配置文件profile Progrecessing架构。&lt;/figcaption&gt; &lt;/figcaption&gt; &lt;/dig&gt; &lt;/dig&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 69AB7540-0D8E-4E-4E6B-B579-C93FD716C96D”，“ dropcap”，“ dropcap”：false}“：false}”&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/chagraph” data-wp-block =“ {” hash&#39;：“ 82B35D6D-5ED3-41FD-A3A9-565EF53017AB”，“ dropcap”：dropcap“：false}”&gt;使编译甚至更快，我们可以更快地执行每个启动的工具，这些工具是最新的，该工具是最新的。结果，生产构建可以立即使用最新的处理配置文件。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coragraph” data-wp-block =“ {” hash&#39;：“ D0B2BA84-4C95-4689-934C-934C-9C44459441888”，“ dropcap”&gt;，这是因为他们的构建的最大程度，大多数人的经验是相比之下。持续时间。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data data-wp-block-name =“ core/saparator” data-wp-block =“ {“ hash”：“ 1fa736b1-7866-4a0e-bf83-6db83-6db8f9c1d49c“&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name =“ core/head” data-wp-block =“ {” hash&#39;：“ 7413453A-64B6-64B6-4424-9972-6522648442B1”，“级别”级&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;07d689fb-28ec-4c5f-984e-f80fc3d27be6&#34;,&#34;dropCap&#34;:false}&#34;&gt;In this section, we show the performance impact of PGO inlining on synthetic benchmarks and on Uber services.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;H3 Data Data-Wp-block-name =“ core/head”“ data-wp-block =” {“级别”：3，“哈希”：“ C69C3579-BC24-4C15-B52B-E80B-E80B17212B5C”}&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph“ data-wp-block =” {“ hash”：“ 383B57DE-64C7-419A-920E-13D4292929BAEF”，“ dropcap”，“ dropcap”：false}“：false}”&gt;首先，我们显示PGO对开放式合成bench bench marksmmphsmmphsmphermsmarks oper oper take the&gt;。数据是在使用Intel &lt;Sup&gt;®&lt;/sup&gt; Xeon &lt;sup&gt;®&lt;/sup&gt; Gold 6136 CPU，128GB的内存和Linux &lt;sup&gt;®&lt;/sup®&lt;/sup&gt; 6.8.0. &lt;/p&gt;的服务器上收集数据。&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 35947ADE-BF2C-446B-A1D3-403E30783D83”，dropcap“：false}”&gt; &lt;a href =“ https://github.com/goccy/go-json” target =“ _ blank” rel =“ noreferrer noopener”&gt; go-json &lt;/a&gt;是GO中使用的第三方第三方JSON库之一。它为效果提供了全面的基准。我们在所有标准编码/JSON库上运行基准测试，并在所有基准上进行20个迭代。 &lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ id”：1106377，“ sizeSlug”：“大”，“ linkdestination”：“ none”，“ not”，“ align”：“ center”，“ hash”，“ hash”：“ a0b38e83e83e83-1d87-46 ed-b1a7-b1a7-b5c5c4dc4dc4dd555d5d55d5d5d5d5dd5d5d5d5d5d5d5d5d5d5d5d5dd5d5d5d5d5” class =“ AlignCenter size-large”&gt; &lt;img loading =“ lazy” dododing =“ async” width =“ 1024” height =“ 727” src =“ https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80，quality = 80，onerror = redirct，format = auto/wp-content/uploads/2025/03/03/03/5-1744182265165165127272727272727.PN class=&#34;wp-image-1106377&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure5-17418226505116.png 1024W，https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror = redirect，format，format = auto/wp-content/uploads/2025/2025/03/03/03/5-17418226515116.pn https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80，onerror=redirect，format，format = auto/wp-content/uploads/2025/2025/03/03/03/figure5-1741826505116.png 768w， https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80，onerror = redirect，format，format = auto/wp-content/uploads/2025/2025/03/03/03/5-17418226505116.png 15336.png 15336.png 15366.pn.pn，15336.pn https://blog.uber-cdn.com/cdn-cgi/image/width=1600，quality=80，onerror = redirect，format = auto/wp-content/uploads/2025/2025/03/03/03/03/5-1741826505116.pnizes sizes：sizes： 100VW，1024px“ referrerpolicy =“ no-refferrer”&gt; &lt;figcaption class =“ WP-元素caption”&gt;图5：go-json上的PGO的性能基准。&lt;/figcaption&gt; &lt;/figcaption&gt; &lt;/figie&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ DB2F2820-034F-4A5A-B5BA-89A9BC1F0193”，“ dropcap”，“ dropcap”：false}“：false}”&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;5e8993e6-49bd-4b32-aa99-76a7c1cd6ba8&#34;,&#34;dropCap&#34;:false}&#34;&gt;Overall, the PGO-driven inlining delivers a 12% performance improvement for the entire benchmark.许多微基准显示出超过20％的性能增长。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coragraph“ data-wp-block =” {“ hash”：“ 75938D21-D08F-4460-A81F-51CA2A0D9F61”，“ dropcap”：dropcap“：falsive}”&gt;通过效果改进的原因也可以通过检查buffer（指令buffer）（指令）。比较原始基准和图6中PGO编译的二进制文件的错过数量，我们可以看到PGO可以将ITLB错过的数量大大减少30％。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;图data-wp-block-name =“ core/table” data-wp-block =“ {“ hash”：“ 7C98E6D7-1BB2-4B2-4B10-8EEF-8EEF-85707E67D3E3”，“ HASFIXEDLAY”OUT“：true，“ head”：[]，“身体”：[]，“脚”：[]}“ class =” wp-block-table“&gt; &lt;table class =“ has-fixed-layout”&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt;基线&lt;/td&gt; &lt;td&gt; pgo &lt;/td&gt; &lt;/td&gt; &lt;td&gt;更改&lt;/td&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/tr&gt; &lt;tr&gt; &lt;tr&gt; &lt;ttd&gt; instruc tions &lt;/td&gt; &lt;td&gt; 2.84e+12 &lt;/td&gt; &lt;td&gt; 2.77e+12 &lt;/td&gt; &lt;td&gt; &lt;td&gt; -2.41％&lt;/td&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;tr&gt; &lt;td&gt; cycles &lt;/td&gt; &lt;/td&gt; &lt;td&gt; &lt;td&gt; 9.34e+11.34e+11 &lt;/td&gt; &lt;td&gt; &lt;td&gt; 9.10e +11 &lt;/td&gt; &lt;td&gt; -2.51％&lt;/td&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; l1-icache-misses &lt;/td&gt; &lt;td&gt; &lt;td&gt; 2.22e+09 &lt;/td&gt; &lt;td&gt; &lt;td&gt; 1.98e+09 &lt;/td&gt; 09 &lt;/td&gt; &lt;/td&gt; &lt;td&gt; &lt;td&gt; -10.78％&lt;/td&gt; -10.78％&lt;/td&gt; &lt;/ tr&gt; &lt;tr&gt; &lt;td&gt; itlb-misses &lt;/td&gt; &lt;td&gt; 5.07e+06 &lt;/td&gt; &lt;td&gt; 3.31E+06 &lt;/td&gt; &lt;td&gt; &lt;td&gt; -34.64％&lt;/td&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/tr&gt; &lt;/tr&gt; &lt;/tr&gt; &lt;/ttoby&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/table&gt; &lt;figcaption class =“ WP元素捕获”&gt;图6：性能记录的性能对抗比较。 &lt;/figcaption&gt; &lt;/figif&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {” hash&#39;：“ BCA35C62-72AC-4743-8BFF-93CB618BB098”，“ Dropcap”：dropcap“：false}”&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 07F7B888-ECDF-4F09-947A-250A-250AED9D85DC”，“ dropcap”，“ dropcap”：false}“：false}”&gt;我们还研究了PGO和非PGO运行的配置文件。我们发现默认的Inliner无法嵌入这些热功能（例如图7中的CheckValid），因为体型大于默认的Inliner预算。随着PGO的构建增加了Inliner预算后，可以将这三个函数归属。我们还注意到PGO Inliner略微增加了呼叫位点的数量。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ id”：1106380，“ sizeSlug”：“ full”，“ linkDestination”：“ none”，“ align”，“ align”：“ center”，“ hash”，“ hash”：“ 191F1E18-538F-4B54-4B54-848D-BB5B1B15B1” class =“ aligncenter size-full”&gt; &lt;img loading =“ lazy” dododing =“ async” width =“ 764” height =“ 780” src =“ https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80，quality=80，onerror = redirect，format = auto/wp-content/uploads/2025/03/03/03/5 class=&#34;wp-image-1106380&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=764,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure7-17418230583990.png 764W，https://blog.uber-cdn.com/cdn-cgi/image/width=294,quality=80，onerror = redirt = redirt = auto/wp-content/uploads/2025/03/03/03/5 （最大宽度：764px）100VW，764px“ referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ wp-element-caption”&gt;图7：调用checkValid函数的图形。&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 040AA397-1290-447F-afeb-afeb-d1b3181e376a”，“ dropcap”，“ dropcap”：false}“：false}”&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ E7B2CD40-8B15-4B7E-8B7E-8AB3-0CC1899979FA7”，“ dropcap”：dropcap“：false}”&gt;我们还调查了绩效提高的原因。在基线版本中，35,545个呼叫站点被内联，其中36,544个呼叫站点被嵌入式PGO版本中。&lt;/p&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pargraph“ data-wp-block =” {“ hash”：“ 5f3c3801-ff66-ff66-f66-9f0a-1c588702af82”，“ dropcap”：falscap“：false}”&gt; &lt;A href =“是一个流行的图书馆，用于快速，缓冲和分层的统计收集。&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {” id“：1106382，“ sizeSlug”：“大”，“ linkdestination”：“ none”，“ aLign”：“ center”，“ hash”，“ hash”：“ 464f-2907-4607-46d8-46d8-46d8-a165-a165-0c0c3ff10c3ff” class =“ AlignCenter size-large”&gt; &lt;img loading =“ lazy” dododing =“ async” width =“ 1024” height =“ 633” src =“ https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80，onerror = redirt = redirct，format = auto/wp-content/uploads/2025/03/03/03/5 class =“ wp-image-11106382” srcset =“ https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80，onerror = 80 ,, 1024W，https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror = redirect，format = auto/wp-content/uploads/2025/2025/03/03/03/5 https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80，onerror=redirect，format，format = auto/wp-content/uploads/2025/2025/03/03/03/figure8-1741823125312538888882.png 76882.png 7668.pn， https://blog.uber-cdn.com/cdn-cgi/image/width=1478,quality=80，onerror=redirt = redirect，format = auto/wp-content/uploads/2025/2025/03/03/03/figure8-17417418231231253888882.png 14782.pnips： 1024px）100VW，1024px“ referrerpolicy =“ no-toferrer”&gt; &lt;figcaption class =“ WP-元素caption”&gt;图8：TALLY BENCH MACK MACH MACK MACH SUITE上PGO的性能比较。 &lt;/figcaption&gt; &lt;/fige&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ B5DBA917-FACA-4D15-A6FB-72E7B5B08C5E”，“ dropcap”，“ dropcap”：false}“&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;H3 Data-Wp-block-name =“ core/phay”“ data-wp-block =” {“ level”：3，“哈希”：“ 8AAA4F1CF-DFA4-476A-BFCD-37B4A0548E06”}&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {” hash&#39;：“ C1FDC0EC-58FB-4B56-A5BD-5A2222F3F0D8”，“ dropcap”：dropcap“：false}”&gt;我们目前在Uber中注册了数千个服务。但是，测量PGO性能带来了一些挑战。一个关键的困难是缺乏不同编译的二进制文件的生产中的A/B性能测量支持，因此很难直接比较PGO优化和非优化版本。此外，CPU的使用可能会受到交通差异的显着影响（每秒的请求），这可能会波动和偏向结果。默认的自动化功能通过动态调整资源，使这一功能更加复杂，因此难以隔离PGO的影响。此外，在测量期间对服务源代码进行的持续更改可能会引入可变性，这使得仅将绩效改进归因于PGO优化而具有挑战性。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;e678d97c-68ff-413b-93c3-e5904ff8c6ef&#34;,&#34;dropCap&#34;:false}&#34;&gt;After extensive exploration of different methodologies, we found the best approach to measure impact is by comparing performance metrics for 7 days before and 7 days after enabling pgo。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;id&#34;:1106411,&#34;sizeSlug&#34;:&#34;large&#34;,&#34;linkDestination&#34;:&#34;none&#34;,&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;82b50f92-1663-45e1-b38c-866b8dcd411d&#34;,&#34;alt&#34;:&#34;&#34;}&#34; class =“ AlignCenter size-large”&gt; &lt;img loading =“ lazy” dododing =“ async” width =“ 1024” height =“ 490” src =“ https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80，quality = 80，onerror = redirct，format = auto/wp-content/uploads/2025/03/03/03/figure9/figure9/figure9-figure9-figure9-174418422230223023361-24999999999.J. class=&#34;wp-image-1106411&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure9-17418422302861.jpg 1024W，https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror = redirect，format = auto/wp-content/uploads/2025/03/03/03/5 https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80，onerror=redirect，format，format = auto/wp-content/uploads/2025/2025/03/03/5 https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80，onerror=redirect，format，format = auto/wp-content/uploads/2025/2025/03/03/03/Figure9 https://blog.uber-cdn.com/cdn-cgi/image/width=2000，quality=80，onerror=redirect，format = auto/wp-content/wp-content/2025/03/03/03/figure9 100VW，1024px“ referrerpolicy =“ no-refferrer”&gt; &lt;figcaption class =“ WP-元素caption”&gt;图9：5个月前6个服务的CPU核心分配计数。&lt;/figcaption&gt; &lt;/fig&gt; &lt;/dig&gt; &lt;/div&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {” hash&#39;：“ BD2450CC-49E0-4D6A-A2A-A2A5-3E699999B88E9B9，” dropcap“：dropcap”：false}“：false}”&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ dd946800-ebfe-45A7-A0E8-322E8-322E4C013CFA”，“ dropcap”，“ dropcap”：dropcap“：false}”&gt;我们选择了前6个服务和测量的CPU的pgo，并在启用的数字中均为YECTISS，并在YES上进行了录制。 CPU核心。黄线显示​​了禁用PGO时的内核数，而蓝线表示启用PGO时的内核数。自24/4/18以来，我们观察到启用PGO的内核数量减少了。但是，由于Autoscalsing和RPS的变化，我们需要建立一种方法，以使CPU分配的减少与P直接相关去。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/encor” data-wp-block =“ {” hash&#39;：“ 29f82e-b31a-4256-bd18-bd18-bd18-b556f090e581”，“ dropcap”：dropcap“：false}”&gt;验证pgo的pgo增益是真实的，我们比较了pfoiles non-pgo（pgo）（图10A）（图10A）。很明显，默认情况下，诸如CheckValid之类的重要功能并未将其隐藏，但会与PGO构建有关。因此，我们可以得出一个结论，即测得的增益确实来自PGO。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ CFE2815E-AE36-4370-8074-B561D8C9A536”，“ dropcap”：dropcap“：false}”&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;图data data-wp-block-name =“ core/image” data-wp-block =“ {” id“：1106413，“ sizeSlug”：“大”，“ linkdestination”：“ none”，“ align”：“ align”：“ centr”，“ hash”：“ hash”：“ 4809BEB1-708B-41B-41BB-BB-B967-667-0A967-0A93333354”&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;. class =“ AlignCenter size-large”&gt; &lt;img loading =“ lazy” dododing =“ async” width =“ 1024” height =“ 432” src =“ https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80，quality=80，onerrt = redirt = redirct，format = auto/wp-content/uploads/2025/03/5s class=&#34;wp-image-1106413&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/figure10a-17418423098907.png 1024W，https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror = redirect，format = auto/wp-content/uploads/2025/03/03/5 https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80，onerror=redirect，format，format = auto/wp-content/uploads/2025/2025/03/03/figure10a-figure10a-17418423098989898989898907.png 768686868.png 76868.pn， https://blog.uber-cdn.com/cdn-cgi/image/width=1146,quality=80，onerror = redirect，format，format = auto/wp-content/uploads/2025/2025/03/03/figure10a-figure10a-1741841841842309898989898907.png 1144.pnid： 1024px）100VW，1024px“ referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ wp-element-caption”&gt;图10a：基线二进制执行期间收集的配置文件。&lt;/figcaption&gt; &lt;/figcaption&gt; &lt;/fig&gt; &lt;/dig&gt; &lt;/div&gt;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ id”：1106414，“ sizeSlug”：“大”，“ linkDestination”：“ none”，“ align”，“ align”：“ center”，“ hash”，“ hash”：“ 913353b7-1ACec-4a2f-4a2f-90cb-270cb-270ffb-270ffb6331” class =“ AlignCenter size-large”&gt; &lt;img loading =“ lazy” dododing =“ async” width =“ 1024” height =“ 422” src =“ https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80，quality = 80，onerrt = redirt = redirct，format = auto/wp-content/uploads/2025/03/03/5 class =“ wp-image-11106414” srcset =“ https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80，oonerrt = 80，onerrt = redirt = redirct，format = auto/wp-content/wp-content/uploads/uploads/2025/203/25/03/pigigir10b-1n444444444444444444444444444.pigigir.pigigir.pigigir.pigigir 1024W，https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror = redirect，format = auto/wp-content/uploads/2025/03/03/figure10B-17418423434799.PNG 300W， https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80，onerror=redirect，format，format = auto/wp-content/uploads/2025/2025/03/03/figure10b-174184184184234799.png 7699.png 7668.pn， https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80，onerror=redirect，format，format = auto/wp-content/uploads/2025/2025/03/03/figure10b-174184184184184234799.png 15366.pn https://blog.uber-cdn.com/cdn-cgi/image/width=1600，quality=80，onerror=redirt = redirect，format，format = auto/wp-content/uploads/2025/2025/03/03/03/03/figure10b-174184184184184184184234799.pniesd sips： 1024px）100VW，1024px“ referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ wp-element-caption”&gt;图10b：PGO二进制执行期间收集的配置文件。&lt;/figcaption&gt; &lt;/figcaption&gt; &lt;/fig&gt; &lt;/dig&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ E450B9BD-426B-48D9-A731-4413B2F1A506”，“ dropcap”，“ dropcap”：false}“：false}”&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name =“ core/saparator” data-wp-block =“ {” hash&#39;：“ 3294f3ad-7442-456b-a6b7-0dc3e97cda57”，“ opcity”，“ obycity”，“ obycity”：“ obsitical”：“&#xA;&#xA;&#xA;&#xA;&lt;h1 data-data-wp-block-name =“ core/heading” data-wp-block =“ {”级别“：1，“哈希”：“ 606f8466-038f-4d63-ba58-9e136c09c3b7”}&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;5841dc7d-00b5-4942-b525-2e0eb0d1840f&#34;,&#34;dropCap&#34;:false}&#34;&gt;Profile-guided optimizations can significantly enhance software performance by using runtime data to guide compiler optimizations.在Uber，PGO通过在顶级服务中的优化和减少24,000个CPU核心通过内在的优化而导致了约4％的性能增长。测量PGO的影响可能很复杂，但是该分析表明了其在优化资源利用和实现大量绩效改进方面的价值。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name =“ core/saparator” data-wp-block =“ {” hash&#39;：“ 8247D241-9851-41D0-954D-8B277191C1A9”，“ opitical&#xA;&#xA;&#xA;&#xA;&lt;h2 data data-wp-block-name =“ core/head”“ data-wp-block =” {“ hash”：“ C3DCA5FE-2E46-446-4477-8D7E-E12225550CF5FA0”，“ LEVEL”：2} class =“ class =” wp-block-heading =“ wp-block-heading” id =“ id =”&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;6c574bc9-e3bb-4601-a434-7a456b8c28f1&#34;,&#34;dropCap&#34;:false}&#34;&gt;We’d like to acknowledge former team member Jin Lin for designing, implementing, and upstreaming PGO inline and basic block reordering.金还在内部测量了PGO性能变化。我们还感谢前团队经理拉吉·巴里克（Raj Barik）设计，实施和上游类型的专业化。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph” data-wp-block =“ {” hash&#39;：“ C982A652-92D1-4939-ACC3-0FB999999999B33BBA”，“ dropcap”：dropcap“：false}和swastik米塔尔（Swastik Mittal）的贡献。 We’re grateful to our colleagues at Uber, including Rasmus Vestergaard, Sung Wang, Zhongpeng Lin, Haiming Tian, Anthony Blelloch, Saurabh Agrawal, Tapan Thaker, Curtis Patrick, Lasse Vilhelmsen, Paweł Królikowski, Sergey Balabanov, Niels Lindgren, Tony Alaniz, Cristian Velazquez，Kanad Sinha，Siyang Liu，Minglei Wang，Johan Mena，Taiwon Chung，Ryan Hang和Jacob Oaks。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;dd396639-1fa6-428e-9e29-6e49d94ca95d&#34;,&#34;dropCap&#34;:false}&#34;&gt;Finally, we’d like to thank Michael Pratt, Cherry Mui, and Austin Clements from the Google Go compiler team for their support and协作。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {” fontsize“：” small“”，“ hash”：“ 38644C53-D5E8-465E-8DE1-5C741079911DF”，“ dropcap”，“ dropcap”：使用ImageGen3 AI模型生成。&lt;/em&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {” fontsize“：”小“”，“ hash”：“ 31a5ecd1-6a67-4fda-4fda-91c9-4344524bef3c”，“ dropcap”，“ dropcap”： Google Inc. &lt;/em&gt; &lt;/p&gt;的注册商标&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ fontsize”：“ small”，“ hash”：“ F712E6E2-A340-4C7C-AB7C-AB7C-8C7E6E6E6E6E66E66F608”，“ dropcap”，“ dropcap”：false}：false}：false}：false}：false}“：” class =“ hasmall-font-size”&gt; &lt;em&gt; linux &lt;sup&gt;®&lt;/sup&gt;是美国和其他国家/地区的Linus Torvalds的注册商标。&lt;/em&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {” fontSize“：”小“”，“哈希”：“ C101C181-EA68-463-463-9A28-B9B7C5F8DB57”，“ Meta Inc. &lt;/em&gt; &lt;/p&gt;的注册商标&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;fontSize&#34;:&#34;small&#34;,&#34;hash&#34;:&#34;62f8ae11-9698-47b7-bcf1-bc4979e17194&#34;,&#34;dropCap&#34;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Java, MySQL, and NetSuite are Oracle &lt;sup&gt;®&lt;/sup&gt;和/或其分支机构的注册商标。&lt;/em&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {” fontsize“：” small“”，“ hash”：“ C215F2BD-0576-459C-82E6-2B611385AE2F1”，“ Swift徽标是Apple &lt;sup&gt;®&lt;/sup&gt; Inc. &lt;/em&gt; &lt;/p&gt;的商标&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {” fontsize“：”小“”，“哈希”：“ 8B8A6D22-EF69-4A36-B302-A5C3BF26262F262F54”，“ dropcap”，“ dropcap”：英特尔®公司或其子公司的商标。&lt;/em&gt; &lt;/p&gt;</description>
      <pubDate>Thu, 13 Mar 2025 05:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【MySQL At Uber】Mysql在Uber</title>
      <link>https://www.uber.com/blog/mysql-at-uber/</link>
      <description>【&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;430fbf2f-e343-4bf7-aff5-d46880b6897d&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;At Uber, our MySQL&lt;sup&gt;®&lt;/sup&gt; fleet is the backbone of our data infrastructure, supporting a vast array of operations critical to our platform. Uber operates an extensive MySQL fleet, consisting of over 2,300 independent clusters. Building a control plane to manage this fleet at such a massive scale, while ensuring zero downtime and no data loss, is among the most challenging problems in the industry.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;06f00d9c-7f72-4de8-8105-008c607562ba&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In the last couple of years, we embarked on improving ‌MySQL fleet availability from 99.9% to 99.99% through various optimizations and a re-architecture of the control plane. This is the first post in a multi-part blog series exploring MySQL deployment and operations at Uber. In this blog, we’ll talk about Uber’s MySQL fleet architecture, control plane operations, and some of the improvements brought in the last couple of years at the MySQL control plane layer.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;b8113008-1377-40fb-8be4-61153cef9690&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;56b5d46d-300c-4038-96d6-b4a922e237a0&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-architecture&#34;&gt;Architecture&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;350d1a53-6c14-4a96-a75c-68fe49076b28&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The MySQL fleet at Uber consists of multiple clusters, each with numerous nodes. There are two major flows: the data flow, where clients/services interact with the MySQL cluster, and the control flow, which manages the life cycle of clusters.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;3cf11a4a-e109-472a-bbe5-96a795a48c10&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;For the data flow, stateless services hosted in Kubernetes&lt;sup&gt;®&lt;/sup&gt; connect to its MySQL cluster via a standard client. Each server has a reverse proxy, which stores routing mapping for MySQL nodes based on roles (primary/replica/batch). This enables the client to discover and connect to the appropriate cluster using the JDBC&lt;sup&gt;™&lt;/sup&gt; protocol based on the query to execute.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;819224c3-4d5f-4256-a569-1e74b5bf6da3&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The control flow manages the provisioning, maintenance, and decommissioning of clusters and nodes while ensuring security posture and integration with the Uber ecosystem.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;235c6ba5-6cdd-4255-8dad-c127457ae96f&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The MySQL fleet at Uber consists of these major components, shown in Figure 1:&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;92b8566e-f39f-4763-b952-ec9f0d5f009f&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Control plane&amp;nbsp;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Data plane&amp;nbsp;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Discovery plane&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Observability&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Change data capture and data warehouse ingestion&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Backup/restore&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1103915,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;3572d92a-4e3d-457e-8d16-f64fbee85edf&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;605&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-1-anatomy-the-mysql-control-plane-17382798995089-1024x605.png&#34; alt=&#34;&#34; class=&#34;wp-image-1103915&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-1-anatomy-the-mysql-control-plane-17382798995089.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-1-anatomy-the-mysql-control-plane-17382798995089.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-1-anatomy-the-mysql-control-plane-17382798995089.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-1-anatomy-the-mysql-control-plane-17382798995089.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=2048,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-1-anatomy-the-mysql-control-plane-17382798995089.png 2048w&#34; sizes=&#34;auto, (max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 1: Anatomy of the MySQL control plane.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;923950bc-81a6-4c23-9f0e-e68886a82a97&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;d3030e4f-f126-4bc0-a238-3db8c8b4b250&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-control-plane&#34;&gt;&lt;br&gt;Control Plane&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2309838c-6eb7-440b-962e-373a46e416a7&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The MySQL Control plane is a state-based system comprising multiple components/services and stores. At its core is the technology manager, who’s responsible for the orchestration of other control plane components. One of its key responsibilities is publishing the goal state or the desired state of the cluster to &lt;a href=&#34;https://www.uber.com/en-IN/blog/odin-stateful-platform/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Odin&lt;/a&gt;, Uber’s in-house technology-agnostic management platform for stateful technologies, which also manages the placement of nodes. The manager publishes the goal-state to Odin. The goal state includes key configurations such as resource profiles, node counts, roles (Primary/Follower), the side containers that should be running on the data nodes, server settings (like bin log format, and SQL mode), and more. The control plane ensures that the actual MySQL cluster or MySQL node always converges to the defined desired state at any stage.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;340a0985-5d25-4f6e-af0b-5e707cc0a2b7&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The other key role of the technology manager is to allow for changing the state of the system via workflows. A workflow is a fault-tolerant long-running process powered by Cadence. Some examples of a workflow would be adding a new node on an existing cluster, performing a primary fail-over on a cluster, applying some MySQL variables on the node, changing the replication master of a MySQL replica, etc. Some other key functions of the technology manager are listed below:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;90b25611-20c5-44fa-95ac-fffbaaf7f386&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Cluster management&lt;/strong&gt;: Handles operations like creating, updating, and deleting clusters.&amp;nbsp;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Primary failover&lt;/strong&gt;: Changes the primary node of the cluster.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Node life cycle management&lt;/strong&gt;: Manages the life cycle of nodes through operations such as adding, replacing, and deleting MySQL server nodes.&amp;nbsp;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Balanced placement&lt;/strong&gt;: Provides signals to Odin’s placement engine to ensure balanced placement of server nodes across all geographical locations where Uber infra is deployed. This ensures resiliency against hardware failures or even data center outages.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;DB operations&lt;/strong&gt;: Manages db-specific operations such as system variable setup, replication setup, and scaling operations.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;47de662f-ba22-471b-931c-fa9c2c09b365&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Traditionally, the MySQL control plane was tightly coupled with the underlying infrastructure processes. As the MySQL fleet grew, this caused issues with infrastructure placement operations, which got blocked by MySQL failures. The MySQL team spent significant time debugging these issues. This coupling impacted the operational reliability of 60+ workflows, including primary failover, node replacement, and more. Additionally, MySQL relied on a Git-based config storage system to manage cluster state, a solution not optimized for such a use case. All this posed reliability and scalability issues, which required a re-architecture of the entire control plane.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;82afb924-2402-4f7d-a40e-30a606da4842&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-controller&#34;&gt;&lt;br&gt;Controller&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;b8d98af1-3b8b-4494-a33d-fba117e06def&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;As part of the control plane redesign, we introduced a component called the controller to the MySQL control plane. The controller acts as an external observer for all MySQL clusters, collecting signals from the database and other control plane components. The controller consists of a rule evaluator who monitors them and takes action if any defined rules are violated in any cluster. One of the key roles of the controller is to monitor the health of primary nodes in MySQL instances and automatically trigger a primary fail-over if the current primary node experiences issues. In addition, the controller also ensures establishing a balance in clusters that are part of a consensus group in a group replication setup.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;8adbe2aa-068b-4e94-9d10-6a17e5690af0&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d3129ff3-4f9c-47e4-b949-a7b545f8779c&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-orchestration-of-critical-flows&#34;&gt;Orchestration of Critical Flows&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;92a7526d-3979-44f9-aed9-6ad3ae2b65c0&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The primary mechanism for interacting with the control plane is through workflows. Workflows are asynchronous, event-driven processes, defined as a series of steps that orchestrate complex long-running tasks. The MySQL control plane uses Cadence&lt;sup&gt;™&lt;/sup&gt; to power these workflows, which provides durability, fault tolerance, and scalability. Figure 2 shows a typical workflow in the MySQL control plane.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1103916,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;4be2dcc0-481a-4129-ac00-2eb3a17fb096&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;481&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-2-graceful-primary-failover-workflow-17382799158925-1024x481.png&#34; alt=&#34;&#34; class=&#34;wp-image-1103916&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-2-graceful-primary-failover-workflow-17382799158925.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-2-graceful-primary-failover-workflow-17382799158925.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-2-graceful-primary-failover-workflow-17382799158925.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-2-graceful-primary-failover-workflow-17382799158925.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=2048,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-2-graceful-primary-failover-workflow-17382799158925.png 2048w&#34; sizes=&#34;auto, (max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 2: Graceful primary failover workflow.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;99faee58-c816-46d8-8a6c-13e963ac2b46&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6c927825-c06e-465b-bbcf-826e21eb8194&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;This redesign has revamped all the control plane operations. This next section reviews the orchestration of a few critical flows.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;6604e875-1669-404f-a5ee-e3dbff1178e0&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-primary-failover&#34;&gt;&lt;br&gt;Primary Failover&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;25bea502-d168-45c5-a382-74aed5f2afbf&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;At Uber, we have a single primary-multiple replica setup. The writes are handled by the primary node, which is replicated to replicas using standard MySQL binlog replication.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1103918,&amp;quot;sizeSlug&amp;quot;:&amp;quot;full&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;d4059741-19fc-4107-a07b-e42677a80983&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-full&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;791&#34; height=&#34;566&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-3-single-primary-multiple-replica-setup-17382799292545.jpeg&#34; alt=&#34;&#34; class=&#34;wp-image-1103918&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=791,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-3-single-primary-multiple-replica-setup-17382799292545.jpeg 791w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-3-single-primary-multiple-replica-setup-17382799292545.jpeg 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-3-single-primary-multiple-replica-setup-17382799292545.jpeg 768w&#34; sizes=&#34;auto, (max-width: 791px) 100vw, 791px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 3: Single primary, multiple replica setup.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0394892b-4966-49e4-a2ba-868a44945133&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;88fdf23f-83f9-4e42-b751-8aaa8d493df5&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The primary failover is an automated process that changes the primary node of a cluster from one host to another. Since there is a single primary node, keeping it healthy and operational is critical to guarantee high write availability and minimize downtimes. These primary failover workflows are used as a mitigation action by components, which continuously monitor the health of the primary node and perform fail-over in cases of any degradation.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;059eadd2-1173-4067-8203-0786e75253ad&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Based on the health of the existing primary node, we perform two types of failovers: graceful and emergency.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;5c675a6e-32cd-4a68-9a4e-a0bb175862b8&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Graceful promotions are required during general maintenance activities of the current primary node, for example, when the host of the existing primary node needs to be repaired. They involve selecting a new primary candidate and then gracefully transferring the write load from the old primary to the new one. Graceful failovers assume that the existing primary node is available and healthy. This applies to async and semi-sync replication setups. There’s another deployment step involving group replication, which is out of scope for this blog.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c22e1d76-3fd6-4a81-b0e0-49332f2fadb4&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Graceful failover performs these steps:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;87335fb2-0529-42fd-884e-d813e8c0e10c&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Puts the current primary node into read-only mode.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Shuts down traffic on the current primary node.&amp;nbsp;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Select a new primary node (primary elect). By default, the workflow picks the primary elect from the same data center. The replication lag of the replica nodes is also considered, and the node with the most advanced binlog position is given precedence.&amp;nbsp;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Retrieves the binlog positions in the previous primary and waits for those transactions to apply on the primary elect.&amp;nbsp;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Enabling writes for the new primary.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;036b4754-f01e-43ce-8f48-edcab12ae8b3&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In cases where the existing primary node isn’t available (because of a data center zone failure, or network isolation) MySQL performs an emergency fail-over. It performs the same steps as graceful promotions, with the only exception being that it won’t rely on the current primary to replicate all the data to the new primary node because the current primary is assumed to be unreachable.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;181643cd-6138-475d-ac8b-0bb10146a834&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We guarantee 99.99% availability to our downstream services, and primary failover is a critical process that helps us meet this SLA.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;96182af4-4445-4601-907e-e0ca70b91d7f&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-node-replacement&#34;&gt;&lt;br&gt;Node Replacement&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;8a49589d-434c-4b6d-bce5-ba0baaf13cf2&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Replacing a node in the control plane involves moving a MySQL node (and all its data) from one host to another without affecting the users of that MySQL database.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e5717cc5-f83d-4936-b9e9-7af7365c5289&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Uber’s hardware infrastructure is spread over multiple cloud providers and on-prem data centers and comprises hundreds of thousands of machines and other hardware and network components. Node replacement is crucial in the MySQL control plane to protect the fleet from disruptions on this vast infrastructure and keep the fleet agile. The node replacement workflow is a maintenance activity that shuts down a node on the affected host and creates an identical node on a different host with similar resources and geographical location in a way that’s completely transparent to the users of the database, who aren’t even aware of this movement.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2e9167da-6a7c-4814-93f5-6c15cd90f5c5&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Node replacement, although‌ seemingly a simple operation of data movement, comes with its nuances:&amp;nbsp;&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;24a66a24-8dc0-49e3-b5a5-e3968485d96a&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Hardware profile&lt;/strong&gt;: The new node must have the same hardware profile as the replaced one. This means it must have the same number of CPU cores, disk and memory space, ports, etc.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Co-location&lt;/strong&gt;: The new node must be placed on a host with the same fault tolerance level as the one it replaces to ensure identical network latencies. Customers only care that query latencies remain consistent, regardless of the node’s location.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Dependencies&lt;/strong&gt;: If the current node is the replication parent for other nodes in the topology, its child nodes must either point to the new replacement node or connect to another node in the cluster.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Primary promotion&lt;/strong&gt;: If the node being replaced is the Primary node of the cluster, before it is decommissioned or removed from traffic, a graceful Primary promotion must be triggered to transfer the write responsibilities to a different Primary node.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;1e17b032-5ed1-454a-b158-5341108e36c6&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Node replacement internally consists of two independent operations, node addition, and node deletion.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0c7121d0-5d4c-4b2e-acf5-37aaf2083c1c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Node addition is the bootstrapping process, which consists of placement and data provisioning. Placement consists of finding the location of the node. This involves identifying a host that consists of the required resources for the new node. Data synchronization consists of installing a MySQL process on the identified node and then starting a data transfer from one of the existing nodes (preferably the primary) to the new node to the new node. The node addition process is designed to support adding multiple nodes in parallel, which is especially useful during disaster recovery scenarios.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2a67ead3-06a2-47b1-bd13-f4be3fd6baa0&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Node deletion is a process of gracefully removing the host after all the node’s dependencies are taken care of (listed above).&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;977032f6-a6e0-4875-8538-da7fcea0195b&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-schema-changes&#34;&gt;&lt;br&gt;Schema Changes&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;92a76f85-e789-4316-86db-c78c67ddbb6e&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The MySQL control plane automates schema changes through a self-serve workflow. This process uses MySQL’s instant alter or Percona&lt;sup&gt;™&lt;/sup&gt; ptosc (pt-online-schema-change) to perform a safe and non-blocking schema update on the primary node. The workflow intelligently selects the schema application strategy based on the schema change type and data size. For example, it uses instant-alter for quick and safe column additions and non-blocking online methods like ptosc for datatype changes.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;fc7d13c7-1845-44b0-8c63-b4a3bf88f5d7&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The schema change workflow also allows a dry-run capability. The dry-run enables customers to apply a schema change on an isolated replica before applying it to the primary node (and the rest of the cluster). This gives additional assurance that the schema change is backward-compatible, non-destructive, and safe.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;5a7ee58c-7216-4db4-b269-23b264345cfb&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The schema change workflow is also integrated with Uber’s CI-CD pipelines to make the process of schema changes completely automated and subject to a review process. Developers make the schema changes in a schema file which is also checked in with the rest of the source code. Once the update is approved and merged with the main branch, the CI system detects it and triggers the schema change workflow. This gives the developers full control of their schema and also ensures that ‌deployed code always aligns with the database schema.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9f45e365-0912-4a5b-9350-a0863138c7c7&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e6161a3d-b074-4b94-921f-860bdc441078&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-data-plane&#34;&gt;Data Plane&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;4796e045-7290-4929-8a59-5d8fb47128ed&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;A running MySQL node is composed of several containers running on a single host. The database container runs a MySQL process and several other helper components performing well-defined jobs. These components are isolated Docker® containers running inside a single host that can talk to each other via Docker networking. The anatomy of a MySQL node is shown in Figure 4.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1103919,&amp;quot;sizeSlug&amp;quot;:&amp;quot;full&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;f84bfced-4908-4f92-8208-cfc71e1f3052&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-full&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;979&#34; height=&#34;529&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-4-anatomy-of-a-mysql-node-17382799674419.png&#34; alt=&#34;&#34; class=&#34;wp-image-1103919&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=979,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-4-anatomy-of-a-mysql-node-17382799674419.png 979w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-4-anatomy-of-a-mysql-node-17382799674419.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-4-anatomy-of-a-mysql-node-17382799674419.png 768w&#34; sizes=&#34;auto, (max-width: 979px) 100vw, 979px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 4: Anatomy of a MySQL node.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;22430c5e-1aba-4e87-bb48-e9e2db6d1265&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;93d74453-abf5-4f3f-aa79-552e01e417b0&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;A MySQL node consists of:&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f9573a85-a8e8-41a8-b1d4-1cb6d6c1e34d&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Database container&lt;/strong&gt;: Runs the Oracle InnoDB&lt;sup&gt;®&lt;/sup&gt; engine within the mysqld process. We can configure this to use other MySQL engines like Meta RocksDB&lt;sup&gt;™&lt;/sup&gt;.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Worker container&lt;/strong&gt;: This is a sidecar container, responsible for converging the actual state of the node to its goal state. This integrates the MySQL node with the Odin placement engine.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Metrics container&lt;/strong&gt;: Polls various database signals (like QPS, query types, lock times, and connection metrics) that the MySQL process emits and publishes them for monitoring.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Health prober&lt;/strong&gt;: This periodically tracks the health of the MySQL process and emits signals on primary health. The controller consumes these signals and takes action to mitigate primary node failures, giving strict write downtime SLAs to ‌MySQL users across Uber.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Backup&lt;/strong&gt;: An ephemeral container that periodically spans to take a database backup and upload it to an object store.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;3457a77e-a04d-4a71-965a-d48b32a46a94&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;15c4c81b-6c24-4711-9a6d-d9402000683d&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-discovery-plane&#34;&gt;Discovery Plane&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9b8bc182-8464-4464-930f-95b09a960145&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The routing or discovery plane simplifies client interaction with the MySQL cluster by providing an abstraction over the ever-changing Uber hardware infrastructure. This provides a single virtual IP for services to connect to their MySQL clusters, hiding all the changes at the hardware level.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1103920,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;4793f387-e0c1-4570-98dc-898581d171bc&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;683&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-5-architecture-of-the-discovery-plane-17382799795155-1024x683.png&#34; alt=&#34;&#34; class=&#34;wp-image-1103920&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-5-architecture-of-the-discovery-plane-17382799795155.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-5-architecture-of-the-discovery-plane-17382799795155.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-5-architecture-of-the-discovery-plane-17382799795155.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-5-architecture-of-the-discovery-plane-17382799795155.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=1689,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-5-architecture-of-the-discovery-plane-17382799795155.png 1689w&#34; sizes=&#34;auto, (max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 5: Architecture of the discovery plane.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2267908f-ed72-40f9-87c2-6cf145749bc6&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6d6f897e-2999-4f34-86d5-97c7c00306e9&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The routing and discoverability plane consists of three major components.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0f7a92a9-3566-4a6d-99f4-78ba3c0ed39d&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Reverse proxy&lt;/strong&gt;: Acts as a load balancer and forwards the client’s request to and from the database hosts.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Pooling service&lt;/strong&gt;: Responsible for updating proxy configurations during any cluster/node management operations such as primary failover or node replacements.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Standard client&lt;/strong&gt;: Provides simple and easy-to-use functions for creating connections to primary and replica nodes based on the type of request (read/write), along with connection polling, time-out handling, client-related metrics, etc.&amp;nbsp;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ca9bd7a9-95f8-48ea-b897-da6d8dfc5c64&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;As part of the control plane re-architecture, the routing plane was updated to use a strongly consistent etcd&lt;sup&gt;™&lt;/sup&gt; data store as its topology store. Changes to the topology, such as adding a new node or handling primary failovers, are recorded in the topology store by the manager. These updates are then propagated to the pooling service via etcd&lt;sup&gt;™&lt;/sup&gt; watches, which then adjusts the reverse proxy configuration to direct traffic to the new nodes or drain traffic from leaving nodes (during node replacement). ‌All of this remains fully abstracted from clients, which connect to the reverse proxy using a static VIP. The proxy configuration is generated to route the write queries to the primary node and load-balance the read queries on all replicas, prioritizing replicas in the same geographical region.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;97063c0d-b975-49d7-80e9-ace6922ec2fc&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The discovery plane supports disabling traffic on specific nodes. This is very useful for debugging any hardware or software failures in MySQL nodes without impacting customer traffic. Automating this feature using the controller to disable traffic on nodes experiencing issues like replication lag is also possible.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;19b55e4d-6a53-4b14-843f-4c78f466d0c4&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d063f58b-d0c1-4707-be85-70f9c40c7d11&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-observability&#34;&gt;Observability&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c4fd3bbb-ca77-4cf4-842e-d4d9f1ad11db&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Apart from collecting system metrics from containers and clusters, probers are used to simulate the data flow and collect metrics on the health of various components of each cluster. These metrics and logs are collected by Uber’s metrics and logging system. Alerts are configured to detect failures such as write unavailability, replication lag, high CPU usage, and abnormal connections into the primary node. This observability ecosystem ensures the MySQL-db-as-a-service team is on top of the MySQL fleet’s health. Teams owning upstream services connected to the databases can also subscribe to these alerts.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;33e2342b-dbea-41c1-93f3-5b196051014a&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c4bc668b-b556-4d2d-92a3-03b971b4dcf6&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-change-data-capture-nbsp&#34;&gt;Change Data Capture&amp;nbsp;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f254abc4-6f65-4ebd-9c06-0d6a92b33a44&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;For change data capture (CDC), MySQL fleet uses Storagetapper, which captures changes (inserts, updates, deletes) from binlog, streams this to Apache Kafka&lt;sup&gt;®&lt;/sup&gt; and this further gets ingested into an Apache Hive&lt;sup&gt;™&lt;/sup&gt; data store. This system can handle upstream schema changes, transformations, and format conversions.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ec8ef4df-9c0a-4e7f-a2cb-b5dc72970ffe&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e9c1c492-e1f1-4146-aedb-9784c14c1397&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-backup-and-restore&#34;&gt;Backup and Restore&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;afd38a7c-f2f8-48c6-8f23-56503e61f880&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Backup and restore are fully automated processes for MySQL at Uber. Backup uses &lt;a href=&#34;https://www.percona.com/mysql/software/percona-xtrabackup&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Percona XtraBackup&lt;/a&gt;&lt;sup&gt;™&lt;/sup&gt; capabilities. MySQL backup and restore maintains a 4-hour RPO and RTO of a few minutes to hours, depending on the data size.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;40630430-ad8f-4dee-bf13-146bc96d16ee&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:1,&amp;quot;hash&amp;quot;:&amp;quot;838e364a-a0ed-42c7-9356-9f70d89ac659&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-conclusion&#34;&gt;Conclusion&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f22a3172-d08b-452a-8948-f0ebef6e8b69&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;MySQL sits at the core of many critical services across Uber. The control plane provides a reliable, scalable, and highly performant MySQL as a platform for these services, abstracting all the operational overhead of maintaining such a fleet at Uber’s scale.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c5561508-aa77-40b7-bd03-a7b38d5c296d&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;This introductory blog explored the MySQL control plane’s major components, discussing each component’s architecture and role. We also explored some important operations and automation in the control plane. These keep the fleet healthy and agile without requiring manual intervention, allowing us to serve many customers and use cases. In the next blogs in this series, we’ll delve deeper into how we operate MySQL to guarantee high availability and high throughput.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;4a913779-37c9-4741-9d9a-796789d2c0d8&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;cc9a5c61-fadc-49b9-958c-b1f4600af79f&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-acknowledgments-nbsp&#34;&gt;Acknowledgments&amp;nbsp;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;32f36a37-3267-4884-acb9-671fbc237a86&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The authors would like to thank all the contributors to the MySQL platform and all the Uber platform and customer teams for their feedback and collaboration.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;c8d2998e-8e48-44e9-962c-0cfbd9689fa2&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Cover Photo Attribution: The cover photo was generated using OpenAI ChatGPT Enterprise.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;03129386-2be8-465b-bddb-55f686beb5b3&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Apache&lt;sup&gt;®&lt;/sup&gt;, Apache Hive&lt;sup&gt;™&lt;/sup&gt;, Apache Kafka&lt;sup&gt;®&lt;/sup&gt;, and Hive are either registered trademarks or trademarks of the Apache Software Foundation in the United States and/or other countries. No endorsement by The Apache Software Foundation is implied by the use of these marks.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;eb0faefb-baa4-475a-a3f8-919681345e2d&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Docker&lt;sup&gt;®&lt;/sup&gt; and the Docker logo are trademarks or registered trademarks of Docker, Inc. in the United States and/or other countries. Docker, Inc. and other parties may also have trademark rights in other terms used herein.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;42ff11ad-a9b7-4d80-8f05-f3536e208a2a&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;InnoDB&lt;sup&gt;®&lt;/sup&gt; and MySQL&lt;sup&gt;®&lt;/sup&gt; are registered trademarks of Oracle and/or its affiliates. No endorsement by Oracle is implied by the use of these marks.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;917089dc-7fca-447e-8f5c-391bc2cdbc80&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;JDBC&lt;sup&gt;™&lt;/sup&gt; is a trademark of ORACLE AMERICA, INC.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;a4747065-4082-4840-ad11-76f0b6f94e1b&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Kubernetes&lt;sup&gt;®&lt;/sup&gt;, etcd&lt;sup&gt;®,&lt;/sup&gt; and Kubernetes&lt;sup&gt;®&lt;/sup&gt; logo are registered trademarks of the Linux Foundation in the United States and/or other countries. No endorsement by The Linux Foundation is implied by the use of these marks.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;58b3d760-a44a-44d4-9d01-cd50ae9de40c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Pecona&lt;sup&gt;™&lt;/sup&gt; and Percona XtraBackup&lt;sup&gt;™&lt;/sup&gt; are trademarks of Percona, LLC.&amp;nbsp;&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;430fbf2f-e343-4bf7-aff5-d46880b6897d&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;RocksDB&lt;sup&gt;®&lt;/sup&gt; is a registered trademark of Meta Platforms, Inc.&lt;/em&gt;&lt;/p&gt;】&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;430fbf2f-e343-4bf7-aff5-d46880b6897d&#34;,&#34;dropCap&#34;:false}&#34;&gt;At Uber, our MySQL&lt;sup&gt;®&lt;/sup&gt; fleet is the backbone of our data infrastructure, supporting a vast一系列对我们平台至关重要的操作。 Uber经营着广泛的MySQL机队，包括2300多个独立集群。建造控制飞机以如此庞大的规模管理该车队，同时确保零停机时间且没有数据丢失，这是该行业中最具挑战性的问题之一。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 06f00d9c-7f72-72-4de8-8105-008c607562ba”，“ dropcap”，“ dropcap”：dropcap“：false}”&gt;在过去的几年中，我们的optrizizy forniziz forniizy forniizrabal in 999;控制平面的重建。这是多部分博客系列中的第一篇文章，该系列探讨了Uber的MySQL部署和操作。在此博客中，我们将讨论Uber的MySQL舰队体系结构，控制飞机操作以及过去几年在MySQL控制平面层带来的一些改进。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name =“ core/saparator” data-wp-block =“ {” hash&#39;：&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name =“ core/heading” data-wp-block =“ {“ hash”：“ 56B5D46D-300C-300C-4038-96D6-B4A922E237A0”，“ LEVEL”：2} class =“ class =” wp-block-heading“ wp-block-heading”&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 350D1A53-6C14-4A96-4A96-A75C-68FE49076B28”，“ dropcap”：dropcap“：false}”&gt; fals}&gt; false}“&gt; uber cassists uber cassists uber cassists cossists ersopers cassists cossists cassists cassists cossists cossists cassists cassists casserts cassposist a。有两个主要流量：数据流，客户/服务与MySQL群集相互作用，控制流，该控制流程管理群集的生命周期。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;3cf11a4a-e109-472a-bbe5-96a795a48c10&#34;,&#34;dropCap&#34;:false}&#34;&gt;For the data flow, stateless services hosted in Kubernetes&lt;sup&gt;®&lt;/sup&gt; connect to its MySQL cluster via a standard client.每个服务器都有一个反向代理，该代理将基于角色（主/副本/批次）的MySQL节点存储路由映射。这使客户端可以使用基于执行的查询的JDBC &lt;sup&gt;™&lt;/sup&gt;协议来发现并连接到适当的群集。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coragraph“ data-wp-block =” {“ hash”：“ 819224C3-4D5F-4256-4256-A569-A569-1E74B5BF6DA3”，“ dropcap”：dropcap“：fals}” Uber生态系统。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 235C6BA5-6CDD-4255-8DAD-C127457AE96F“，“ dropcap”：false}”&gt; Uber的MySQL舰队由这些主要组成部分组成，如图1：&lt;/p&gt;如图1：&lt;/p&gt;所示&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name =“ core/list” data-wp-block =“ {“ hash”：“ 92b8566e-f39f-4763-b952-ec952-ec9f0d5f009f“&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;控制平面&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;数据平面&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;发现平面&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;可观察性&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;更改数据捕获和数据仓库摄入&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; backup/restore &lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data data-wp-block-name =“ core/image” data-wp-block =“ {“ id”：1103915，“ sizeSlug”：“大”，“ linkdestination”：“ none”，“ noce”，“ align”：“ center”，“ hash”，“ hash”：“ 3572d92a-4e3d-4e3d-457e-ex eant and” class =“ AlignCenter size-large”&gt; &lt;img loading =“ lazy” dododing =“ async” width =“ 1024” height =“ 605” src =“ https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80，onerror = redirect，format = auto/ wp-content/uploads/2025/01/figue-1-anatomy-the-mysql-control-plane-17382798995089-1024x605.png“ alt =“” class =“ wp-image-11103915” srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-1-anatomy-the-mysql-control-plane-17382798995089.png 1024W，https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80，onerror=rectect，format = auto/wp-content/uploads/2025/2025/01/01/figure-1-anatomy-1-anatomy-1-anatomy-1-anatomy-comy-plane-plane-plane-plane-pplane-plane-pllane-17388.73897979799797979797979.738 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-1-anatomy-the-mysql-control-plane-17382798995089.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-1-anatomy-the-mysql-control-plane-17382798995089.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=2048,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-1-anatomy-the-mysql-control-plane-17382798995089.png 2048W“ sizes =” auto，（最大宽度：1024px）100VW，1024px“ referrerpolicy =“ no-Referrer”&gt; &lt;figcaption class =“ wp- element-aption”&gt;图1：MySQL控制平面的解剖学。&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 923950BC-81A6-4C23-9F0E-E68886A82A97”，“ dropcap”：dropcap“：dropcap”&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data data-wp-block-name =“ core/heading” data-wp-block =“ {”级别“：3，“ hash”：“ D3030E4F-F126-4BC0-A238-3DB8C8B4B250”}控制平面&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 2309838C-6EB7-440B7-440B-962E-373A46E416A7”，“ dropcap”：dropcap“：false}”&gt; fals}“：false}”&gt; the&gt; the MySQL Control平面是一种基于状态的系统组成的多个组成综合服务。技术经理的核心是负责其他控制平面组件的编排。其关键责任之一是将群集的目标状态或所需状态发布到&lt;a href =“ https://www.uber.com/en-in/blog/odin-stateful-platform/” target =“ _ _ black” rel =“ rel =” rel =“ noreferrer noopener noopener noopener”节点。经理将目标国家发布给奥丁。目标状态包括关键配置，例如资源配置文件，节点计数，角色（主/自行车），应该在数据节点上运行的侧面容器，服务器设置（例如bin log格式和SQL模式）等。控制平面确保实际的MySQL群集或MySQL节点始终在任何阶段收敛到定义的所需状态。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;340a0985-5d25-4f6e-af0b-5e707cc0a2b7&#34;,&#34;dropCap&#34;:false}&#34;&gt;The other key role of the technology manager is to allow for changing the state of the system via workflows.工作流程是一个容易发生的长期运行过程，该过程由节奏提供动力。工作流的一些示例可能是在现有群集上添加一个新节点，在群集上执行主要故障，在节点上应用了一些MySQL变量，更改MySQL replica的复制主等。&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name =“ core/list” data-wp-block =“ {“ hash”：“ 90b25611-20c5-44fa-95ac-95ac-ffbaaf7f386”，“ orded”：fords“：false”：false，“ values，” valut，“ valut&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt; cluster Management &lt;/strong&gt;：处理诸如创建，更新和删除簇之类的操作。 &lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt;主要故障转移&lt;/strong&gt;：更改群集的主节点。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt;节点生命周期管理&lt;/strong&gt;：通过添加，替换和删除MySQL Server nodes等操作来管理节点的生命周期。 &lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []“&gt; &lt;strong&gt;平衡位置&lt;/strong&gt;：为Odin放置引擎提供信号，以确保在所有地理位置上的服务器节点平衡位置，以部署Uber Infra的所有地理位置。这样可以确保对硬件故障甚至数据中心的停机的弹性。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt; &lt;strong&gt; db操作&lt;/strong&gt;：管理诸如系统的DB特异性操作TEM变量设置，复制设置和缩放操作。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph” data-wp-block =“ {” hash&#39;：“ 47de662f-ba22-ba22-471b-931c-fa9c2c2c09b365”，“ dropcap”：dropcap“：false}”&gt;传统上，mysql Control平面紧密地处理了couplure contruct fiffs funder coupl infly confloct。随着MySQL车队的发展，这引起了基础设施工作的问题，这被MySQL失败所阻止。 MySQL团队花了很多时间来调试这些问题。这种耦合影响了60多个工作流的操作可靠性，包括主要故障转移，node置换等等。此外，MySQL还依靠基于GIT的配置存储系统来管理群集状态，该解决方案未针对这种用例进行优化。所有这些提出的可靠性和可伸缩性问题，需要重新构造整个控制平面。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;H3 Data Data-Wp-block-name =“ core/heading“ data-wp-block =” {“ latve”：3，“哈希”：&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ B8D98AF1-3B8B-4494-A33D-FBA117E06DEF”，“ dropCap”，“ dropcap”：false}“：false}”&gt;作为控制平面的一部分，我们引入了一个组件，我们引入了一个称为Controller the Controller ny syss的组件。控制器充当所有MySQL簇的外部观察者，从数据库和其他控制平面组件中收集信号。控制器由一个规则评估者组成，该规则评估员在任何集群中违反了任何定义的规则，并采取了行动。控制器的关键作用之一是监视MySQL实例中主要节点的健康状况，并在当前的主要节点出现问题时自动触发主要失败。此外，控制器还确保在组复制设置中成为共识组的一部分的群集中建立平衡。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;8adbe2aa-068b-4e94-9d10-6a17e5690af0&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;d3129ff3-4f9c-47e4-b949-a7b545f8779c&#34;,&#34;level&#34;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-orchestration-of-critical-flows&#34;&gt;Orchestration of Critical Flows&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 92A7526D-3979-44F9-AED9-6AD3AE2B65C0”，“ DropCap”：dropcap“：false}”&gt;与控制平面相互作用的主要机制是通过工作流程。工作流程是异步的，事件驱动的过程，定义为一系列步骤，这些步骤编排了复杂的长期任务。 MySQL控制平面使用Cadence &lt;Sup&gt;™&lt;/sup&gt;为这些工作流提供动力，从而提供耐用性，容错性和可扩展性。图2显示了MySQ中的典型工作流程l控制平面。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ id”：1103916，“ sizeSlug”：“大”，“ linkdestination”：“ none”，“ align”，“ align”：“ center”，“ hash”：“ 4BE2DCC0-4BBE-4BE-4129-4129-AC00-AC00-AC00-AC00-AC00-AC00-AC00-AC00-AC00-ALT} class =“ AlignCenter size-large”&gt; &lt;img loading =“ lazy” dododing =“ async” width =“ 1024” height =“ 481” src =“ https://blog.uber-cdn.com/cdn-cgi/image/width=2160，Quality=80，onError = redirect，format = auto/w p-content/uploads/2025/01/figure-2-graceful-primary-failover-workflow-17382799158925-1024x481.png“ alt =“” class =“ wp-image-11103916” srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-2-graceful-primary-failover-workflow-17382799158925.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-2-graceful-primary-failover-workflow-17382799158925.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-2-graceful-primary-failover-workflow-17382799158925.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-2-graceful-primary-failover-workflow-17382799158925.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=2048,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-2-graceful-primary-failover-workflow-17382799158925.png 2048w&#34;尺寸=“自动，（最大宽度：1024px）100VW，1024px” referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ wp-element-caption”&gt;图2：优雅的主要失败工作流程。&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 99faee58-c816-46d8-8a6c-13e963ac2b46”，“ dropcap”，“ dropcap”：false}“：false}”&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 6c927825-c06e-465b-bbcf-826e21eb8194”，“ dropcap”：dropcap“：false}”&gt;此重新启动已重新使用了所有控制平面的操作。下一节会回顾一些关键流的编排。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data data-wp-block-name =“ core/head” data-wp-block =“ {”级别“：3，“哈希”：“ 6604e875-1669-404f-a5ee-e3dbff1178e0”}“}” class =“ wp-block-heading”&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {” hash&#39;：“ 25BEA502-D168-45C5-A382-74AEED5F2AFBF”，“ dropcap”，“ dropcap“：false}”&gt;在Uber，我们在Uber上，我们有一个单一的初级副本设置。写作由主节点处理，该节点使用标准MySQL Binlog复制复制为复制品。 &lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;figue data-wp-block-name =“ core/image” data-wp-block =“ {“ id”：1103918，“ sizeLug”：“ full”，“ linkdestination”：“ none”，＆quot; align“：”中心，“ hash”：“ D4059741-19FC-4107-A07B-E42677A80983”，“ ALT”：“}” class =“ AlignCenter size-full”&gt; &lt;img loading = &lt;img loading =“ ly lazy” ly lazy&#39;dododing =“ src =“ https://blog.uber-cdn.com/cdn-cgi/image/width=2160，Quality=80，onError = redirect，format = auto /wp-content/uploads/2025/01/figure-3-single-primary-multiple-replica-setup-17382799292545.jpeg“ alt =“” class =“ wp-image-11103918” srcset =“ https://blog.uber-cdn.com/cdn-cgi/image/width=791,quality=80，onerror = redirect，format = au到/wp-content/uploads/2025/01/figure-3单式 - 元素 - 元素 -  replica-setup-17382799292545.jpeg 791w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-3-single-primary-multiple-replica-setup-17382799292545.jpeg 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-3-single-primary-multiple-replica-setup-17382799292545.jpeg 768W“ sizes =” auto，（最大宽度：791px）100VW，791px“ referrerpolicy =“ no-referferrer”&gt; &lt;figcaption class =“ wp- element-caption”&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 0394892b-4966-4966-49e4-a2ba-868a444945133”，“ dropcap”：dropcap“：dropcap”&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;88fdf23f-83f9-4e42-b751-8aaa8d493df5&#34;,&#34;dropCap&#34;:false}&#34;&gt;The primary failover is an automated process that changes the primary node of a cluster from one host to another.由于有一个主节点，因此保持健康和操作对于确保高写入可用性并最大程度地减少下降至关重要。这些主要的故障转移工作流程被组件用作缓解措施，该组件不断监视主节点的健康并在任何降解情况下执行故障。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph“ data-wp-block =” {“ hash”：“ 059EADD2-1173-4067-4067-8203-0786E75253AD”，“ dropcap”：dropcap“：false}”&gt;基于现有主要node的健康状况，我们执行两种类型的失败和紧急情况。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;5c675a6e-32cd-4a68-9a4e-a0bb175862b8&#34;,&#34;dropCap&#34;:false}&#34;&gt;Graceful promotions are required during general maintenance activities of the current primary node, for example, when the host of the existing primary node needs to be repaired.它们涉及选择一个新的主要候选人，然后优雅地将写入负载从旧的主要候选人转移到新的主要候选人。优雅的故障转移假定现有的主要节点可用且健康。这适用于异步和半同步复制设置。还有另一个涉及组复制的部署步骤，该博客的范围不超过范围。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落”data-wp-block =“ {“ hash”：“ C22E1D76-3FD6-4A81-B0E0-4932F2F2F2FADB4”，“ dropcap”：false}&gt;优雅的故障转移执行以下步骤：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name =“ core/list” data-wp-block =“ {“ hash”：“ 87335fb2-0529-42fd-884e-d813e813e8c0e10c“&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;将当前的主节点放入只读模式。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;关闭当前主节点上的流量。 &lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;选择一个新的主节点（主要选举）。默认情况下，工作流从同一数据中心选择主要选民。还考虑了复制节点的复制滞后，并且具有最先进的binlog位置的节点优先。 &lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;检索上一个初级中的binlog位置，并等待这些交易适用于主要选民。 &lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;启用新主的写作。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;036b4754-f01e-43ce-8f48-edcab12ae8b3&#34;,&#34;dropCap&#34;:false}&#34;&gt;In cases where the existing primary node isn’t available (because of a data center zone failure, or network isolation) MySQL performs an emergency fail-over.它执行与优雅促销相同的步骤，唯一的例外是，它不会依靠当前的主要数据将所有数据复制到新的主要节点，因为当前主要节点被认为是无法实现的。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coraph”“ data-wp-block =” {“ hash”：“ 181643cd-6138-475d-ac8b-ac8b-ac8b-ac8b-ac8b-ac8b-0bbbb10146a834”，“ dropcap”，“ dropcap”：dropcap“：false}”&gt;我们保证对我们的下流和下降sla sla sla sla sla sla sla sla sla sla sla sla sla sla sla sla &lt;&#xA;&#xA;&#xA;&#xA;&lt;H3 Data-wp-block-name =“ core/heading” data-wp-block =“ {”级别“：3，“哈希”：“ 96182AF4-4445-4601-907E-E0CA70B91D7F”}&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;8a49589d-434c-4b6d-bce5-ba0baaf13cf2&#34;,&#34;dropCap&#34;:false}&#34;&gt;Replacing a node in the control plane involves moving a MySQL node (and all its data) from one host to another without affecting the users of that MySQL数据库。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ e5717cc5-f83d-4936-b9e9-7365c5289”，“ dropcap”，“ dropcap”，“：false}”&gt; false}“&gt; uber的硬件基础结构是跨越多个云供应商，以及其他云供应商，以及其他云供应商，以及其他云供应商，以及其他云供应商，以及其他等级供应商，以及其他范围。和网络组件。在MySQL控制平面上，节点更换至关重要从这个巨大的基础设施上的破坏中避免舰队，并保持舰队敏捷。节点置换工作流程是一项维护活动，可以关闭受影响主机上的节点，并在具有相似资源和地理位置的不同主机上创建一个相同的节点，其方式完全透明了数据库的用户，他们甚至都不知道此运动。&lt;/p&gt;&gt; &lt;/p&gt;。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coragraph” data-wp-block =“ {“ hash”：“ 2E9167DA-6A7C-4814-93F5-6C15C15CD90F5C5”，“ dropcap”：dropcap“：fals}”&gt; node repance &lt;/n n nu，&lt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name =“ core/list” data-wp-block =“ {“ hash”：“ 24a66a24-8dc0-49e3-b5A5A5-e3968485d96a”，&#39;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt;硬件配置文件&lt;/strong&gt;：新节点必须具有与更换的硬件配置文件相同的硬件配置文件。这意味着它必须具有相同数量的CPU内核，磁盘和内存空间，端口等。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt;共处&lt;/strong&gt;：必须将新节点放置在具有与IT替代的一个容错级别的主机上，以确保相同的网络潜伏期。客户只关心查询潜伏期保持一致，无论节点的位置如何。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-data-wp-block-name =“ core/list-item” data-wp-block =“ []“&gt; &lt;strong&gt;依赖项&lt;/strong&gt;：如果当前节点是拓扑中其他节点的复制父，则其子节点必须指向新的替换节点或连接到集群中的另一个节点。&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt;主要促销&lt;/strong&gt; &lt;/strong&gt;：如果被替换的节点是群集的主要节点，则在退役或从流量中删除或从流量中删除，则必须触发优美的主要促销活动，以将写入的主要促销触发到不同的主节点。&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 1E17B032-5ED1-454A-B158-5341108E36C6”，“ dropcap”：dropcap“：false}”&gt; false}“&gt; false}”&gt;内部内部由两个独立的操作组成，由两个独立的操作组成。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph“ data-wp-block =” {“ hash”：“ 0c7121D0-5D4C-4B2E-4B2E-ACF5-37AAF2083C1C”，“ dropcap”：dropcap“：false}”&gt;添加节点是boottrapping Process，boottrapping Process，sher thers of Spectist and contermist and Data Depations offisions。放置包括查找节点的位置。这涉及确定由新节点所需资源组成的主机。数据同步包括在已确定的节点上安装mySQL进程，然后启动从现有节点之一（最好是主节点）到新节点到新节点的数据传输。节点添加过程旨在支持广告并联多个节点，这在灾难恢复方案中特别有用。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/core/段落” data-wp-block =“ {“ hash”：“ 2a67ead3-06a2-47b1-bd13-f4be3f4be3fd6baa0”，“ dropcap”：false}“：false}”&gt; node deletion是在所有node epparcies care care care care care care care care node care care care care care的一个过程。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data data-wp-block-name =“ core/heading” data-wp-block =“ {”级别“：3，”哈希：“ 977032f6-a6e0-4875-4875-8538-da7fcea0195b”}&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph“ data-wp-block =” {“ hash”：“ 92a76f85-e789-4316-4316-86db-c78c678c67ddbb6e”，“ dropcap”，“ dropcap”：dropcap“：false}”&gt; mysql Control平面自动成员通过自动s schema通过自助服务的工作流改变。此过程使用MySQL的Instant Alter或Percona &lt;sup&gt;™&lt;/sup&gt; ptosc（PT-Online-Schema-Change）对主节点进行安全且非阻滞架构更新。工作流智能地基于模式更改类型和数据大小来智能选择架构应用程序策略。例如，它使用Instant-Alter进行快速安全的列添加和非阻滞在线方法（例如PTOSC for DataType更改）。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {” hash&#39;：“ FC7D13C7-1845-44B0-8C63-B4A3BF88F57”，“ dropcap”：dropcap“：false}”&gt;架构更改工作流程还允许干燥的功能。该干式运行使客户在将其应用于主节点（以及群集的其余部分）之前，可以在隔离的副本上应用模式更改。这提供了额外的保证，即模式变化是向后兼容，无损和安全的。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;5a7ee58c-7216-4db4-b269-23b264345cfb&#34;,&#34;dropCap&#34;:false}&#34;&gt;The schema change workflow is also integrated with Uber’s CI-CD pipelines to make the process of schema changes completely automated and subject to a review process.开发人员在模式文件中更改架构，该模式还可以使用其余的源代码进行检查。一旦批准了更新并与主分支合并，CI系统将检测到它并触发模式更改工作流程。这使开发人员完全控制了他们的架构，还确保了deploy的代码始终与数据库架构保持一致。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data data-wp-block-name =“ core/saparator” data-wp-block =“ {” hash&#39;：“ 9F45E365-0912-4A5B-9350-A0863138C7C7C7”，“ obycity”，“ obycity”，“ obyacity”：“ obsitical”：“&#xA;&#xA;&#xA;&#xA;&lt;h2 data data-wp-block-name =“ core/heading” data-wp-block =“ {“ hash”：“&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 4796E045-7290-4929-4929-8A59-59-5D8FB47128ED”，“ dropcap“：false}”&gt;运行的mySQL节点由在单个主机上运行的几个容器组成。数据库容器运行一个MySQL进程和其他几个执行定义明确作业的辅助组件。这些组件是隔离的Docker®容器，在单个主机内运行，可以通过Docker网络相互交流。 mySQL节点的解剖结构如图4所示。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ id”：1103919，“ sizeSlug”：“ full”，“ linkdestination”：“ none”，“ aLign”：“中心”，“ hash”，“ hash”：“ class =“ AlignCenter size-full”&gt; &lt;img loading =“ lazy” dododing =“ async” width =“ 979” height =“ 529” src =“ https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80，quality = 80，onerror = redirect，format =auto/wp-content/uploads/2025/01/figure-4-anatomy-4-anatomy-pepnomy-pepnomy-premy-premy-premysql-node449997999999999979997999799999979979999979979979997997997997997997999793828282828282828282738。 alt =“” class =“ wp-image-11103919” srcset =“ https://blog.uber-cdn.com/cdn-cgi/image/width=979，Quality=80，onErr = redirect，format = auto/wp-content/uploads/2025/01/2025/01/figure-4-anatomy-em-4-anatomy-epmose-premymy-pepnomy-premymysql-node44.44173828282828282828282828282828282828282 979w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-4-anatomy-of-a-mysql-node-17382799674419.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-4-anatomy-of-a-mysql-node-17382799674419.png 768w&#34;尺寸=“自动，（最大宽度：979px）100VW，979px” referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ wp-element-caption”&gt;图4：mysql节点的解剖。&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 22430c5e-1aba-4e87-bb48-e9e2db6d1265”，“ dropcap”，“ dropcap”：false}&#39;&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {” hash&#39;：“ 93d74453-abf5-4f5-4f3f-aa79-552e01e417b0”，“ dropcap”&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name =“ core/list” data-wp-block =“ {” hash&#39;：“ F9573A85-A8E8-41A8-41A8-B1D4-1CB6D6C1E34D”，“ ordered”，“ ordered”：forded&#39;：fords&#39;：fals&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt;数据库容器&lt;/strong&gt;：在MySQLD进程中运行Oracle Innodb &lt;sup&gt;®&lt;/sup&gt; Engine。我们可以将其配置为使用其他MySQL引擎，例如Meta RockSDB &lt;sup&gt;™&lt;/sup&gt;。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt; worker容器&lt;/strong&gt;：这是一个辅助容器，负责将节点的实际状态收敛到其目标状态。这将MySQL节点与Odin放置引擎集成在一起。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt;指标容器&lt;/strong&gt;：轮询各种数据库信号（例如QPS，查询类型，锁定时间和连接指标）QL流程排放并发布以进行监视。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt;健康prober &lt;/strong&gt;：这会定期跟踪MySQL过程的健康，并在初级健康方面发出信号。控制器消耗这些信号，并采取行动来减轻主节点失败，从而为Uber的MysQL用户提供严格的写入停机时间。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt;备份&lt;/strong&gt;：一个定期跨越数据库备份并将其上传到对象存储的短暂容器。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data data-wp-block-name =“ core/saparator” data-wp-block =“ {“ hash”：“ 3457A77E-A04D-4A71-965A-D48B32A46A94”，“ opacity”，“ obycity”，“ obyacity”，“ obycity”：“ alpha-channel” class class class class =“ wp-block-separane in-separane in-separa inspara”&gt;“&#xA;&#xA;&#xA;&#xA;&lt;h2 data data-wp-block-name =“ core/heading” data-wp-block =“ {” hash&#39;：“ 15c4c81b-6c24-4711-9a6d-d9402000683d”，“ level”：2} class =“ class =” wp-block-heading =“ wp-block-heading”&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;9b8bc182-8464-4464-930f-95b09a960145&#34;,&#34;dropCap&#34;:false}&#34;&gt;The routing or discovery plane simplifies client interaction with the MySQL cluster by providing an abstraction over the ever-changing Uber硬件基础架构。这为服务提供了一个虚拟IP，可以连接到其MySQL群集，并将所有更改隐藏在硬件级别。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {” id“：1103920，“ sizeSlug”：“大”，“ linkdestination”：“ none”，“ align”，“中心”，“ hash”：“ 4793F387-E4793F387-EBE” 4793F387-EBIN class =“ AlignCenter size-large”&gt; &lt;img loading =“ lazy” dododing =“ async” width =“ 1024” height =“ 683” src =“ https://blog.uber-cdn.com/cdn-cgi/image/width=2160, Quality=80，onerror = redirect，format = auto/wp -content/uploads/2025/01/figure-5-Architecture-tiscovery-Plane-173827999799799795555-1024x683.png“ alt =“” class =“ wp-image-11103920” srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-5-architecture-of-the-discovery-plane-17382799795155.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-5-architecture-of-the-discovery-plane-17382799795155.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80，onerror=rectect，format，format = auto/wp-content/uploads/2025/2025/2025/01/01/5-5-5-Architector-earchitector-oarchitector ector-oarchitectect https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/01/figure-5-architecture-of-the-discovery-plane-17382799795155.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=1689，Quality=80，onerror = redirect，format = auto/wp-content/uploads/2025/01/figu-5-raftecture of-discovery-plane-173827999795155.55.png 1689W“ sizes =” sizes =“自动，（最大宽度：1024px）100vw，1024px“ 1024px“ reverrerpolicerpolicy =” not-refifcapt class =“ WP-元素捕获”&gt;图5：发现平面的体系结构。&lt;/figcaption&gt; &lt;/fige&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 2267908f-ED72-40F9-87C2-6CF145749BC6”，“ dropcap”，“ dropcap”：dropcap“：false}”&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph” data-wp-block =“ {“ hash”：“ 6D6F897E-2999-4F34-4F34-86D5-97C7C00306E9”，“ dropcap”，“ dropcap”，“ dropcap”：false}&gt; falsing}“&gt;路由和可发现的平面。&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name =“ core/list” data-wp-block =“ {“ hash”：“ 0f7A92A9-3566-4A6D-99F4-78BA3C0ED39D”，“订购”，“：false”：false，“ values，” values，“}” class =“ wp-block-list-list”&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt;反向代理&lt;/strong&gt;：充当负载平衡器，并将客户的请求转发到数据库主机。&lt;/li&gt; &lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt;池服务服务&lt;/strong&gt;：负责在任何群集/节点管理操作（例如主要故障转移或节点替换）期间更新代理配置。&lt;/li&gt; &lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt;标准客户端&lt;/strong&gt;：提供简单易于使用的功能，以基于请求类型（读取/写入）以及连接，连接，超时的操作，超时的处理，符合的计量等级，以建立与主和复制节点的连接&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ CA9BD7A9-95F8-48EA-B897-DA6D8DA6D8DFFC5C64”，“ dropcap”，“ dropcap”：dropcap“：false}”&gt;作为控制平面的一部分，使用了一个强制&lt;ut-after &lt;ut-aff pure for pus &lt;utect &lt;utect &lt;utect &lt;作为其拓扑商店。经理在拓扑商店中记录了拓扑的更改，例如添加新节点或处理主要故障转移。然后将这些更新通过ETCD &lt;sup&gt;™&lt;/sup&gt;手表传播到汇总服务，然后调整反向代理配置，以将流量转移到新节点或流量流量从节点（在节点更换期间）中排出流量。所有这些仍然从客户端完全抽象出来，这些客户使用静态VIP连接到反向代理。生成代理配置以将写查询路由到主节点和负载平衡，并在所有副本上读取查询，并在同一地理区域中优先考虑副本。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 97063C0D-B975-49D7-80E9-80E9-ACE6922EC2EC2FC”，“ dropcap”，“ dropcap”：false}&gt;发现平面在特定的NODES上支持障碍流量。这对于在不影响客户流量的情况下调试MySQL节点中的任何硬件或软件故障非常有用。使用此功能自动化此功能也可能可能在遇到诸如复制滞后等问题的节点上禁用流量的控制器。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data data-wp-block-name =“ core/saparator” data-wp-block =“ {“ hash”：“ 19b55e4d-6a53-6a53-4b14-843f-4c78f46666d0c4”，“ opitical&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name =“ core/heading“ data-wp-block =” {“ hash”：“ d063f58b-d0c1-4707-be85-70f9c40c7d11 d11”，“ level”：2} class =“ class =” wp-block-heading =“ wp-block-heading” id =“&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;c4fd3bbb-ca77-4cf4-842e-d4d9f1ad11db&#34;,&#34;dropCap&#34;:false}&#34;&gt;Apart from collecting system metrics from containers and clusters, probers are used to simulate the data flow and collect metrics on the health of various components of each 簇。这些指标和日志由Uber的指标和记录系统收集。警报被配置为检测失败，例如写入不可用，复制滞后，高CPU使用和异常连接到主节点。这种可观察性生态系统可确保MySQL-DB-AS-A-Service团队处于MySQL舰队的健康状态。拥有连接到数据库的上游服务的团队也可以订阅这些警报。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data data-wp-block-name =“ core/saparator” data-wp-block =“ {” hash&#39;：“ 33E2342B-DBEA-41C1-93F3-5B196051014A”，“ opacity”，“ opcity”，“ opcity”：“ alpha-channel” class =“ class =” wp-block-separator-separator-separator-and and-alpha and-alpha and-alpha&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data data-wp-block-name =“ core/heading“ data-wp-block =” {“ hash”：“ C4BC668B-B556-4D2D-92D-92A3-03B971B4DCF6”，“级别”，“级别”：2} class =“ class =” wp-block-head =“ wp-block-head =”&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coraph”“ data-wp-block =” {“ hash”：“ f254abc4-6f65-4ebd-9c06-06-0d6a92b33a44”，“ dropcap”：dropcap“：false}”从binlog删除）将其流到apache kafka &lt;sup&gt;®&lt;/sup&gt;，然后将其进一步摄入到Apache Hive Hive &lt;Sup&gt;™&lt;/sup&gt;数据存储中。该系统可以处理上游模式的更改，转换和格式转换。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data data-wp-block-name =“ core/saparator” data-wp-block =“ {” hash&#39;：“&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name =“ core/heading” data-wp-block =“ {” hash&#39;：“ E9C1C492-E1F1-4146-AEDB-9784C14C1397”，“ calle&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph“ data-wp-block =” {“ hash”：“ afd38a7c-f2f8-48c6-8c6-8f23-56503e61f880”，“ dropcap”：dropcap“：false}”&gt;备份和恢复是完全自动化的。备份使用&lt;a href =“ https://www.percona.com/mysql/software/percona-xtrabackup“ target =” _ blank“ rel =“ noreferrer noopener”&gt; percona xtrabackup &lt;/a&gt; &lt;sup&gt;™&lt;/sup&gt;™&lt;/sup&gt;功能。mysql备份和还原可保持4小时的RPO和RPO，并根据数据大小。&lt;/p&gt;。&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name =“ core/saparator” data-wp-block =“ {“ hash”：“ 40630430-AD8F-4DEE-BF13-146BC96D16EE”，“ obacity”，“ obacity”：“ alpha-channel”}&#xA;&#xA;&#xA;&#xA;&lt;h1 data-wp-block-name =“ core/heading“ data-wp-block =” {“ latve”：1，“ hash”：“ 838e364a-a0ed-42c7-9356-9356-9f70d89ac659”}&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ F22A3172-D08B-452A-452A-8948-F0EBEF6E8B69”，“ dropcap”：false}“：false}”&gt; mysql属于许多关键服务的核心。控制平面为这些服务提供了可靠，可扩展且性能高的MySQL，从而使所有在Uber的规模保持这种机队的操作开销。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coragraph” data-wp-block =“ {“ hash”：“ C5561508-AA77-AA77-40B7-BD03-A7B38D5C296D”，“ dropcap”，“ dropcap”：false}“&gt;此介绍性博客探索了MySQL Control平面，讨论了每个人的构造，并讨论了每个构造的构造，并构造了构造的构造和构造。我们还探索了控制平面中的一些重要操作和自动化。这些使车队保持健康和敏捷，而无需手动干预，使我们能够为许多客户和用例服务。在本系列的下一个博客中，我们将更深入地研究如何操作MySQL，以确保高可用性和高通量。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;4a913779-37c9-4741-9d9a-796789d2c0d8&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data data-wp-block-name =“ core/head”“ data-wp-block =” {“ hash”：“ CC9A5C61-FADC-49B9-958C-B1F4600AF79F”，“ LEVEL”：2}&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;32f36a37-3267-4884-acb9-671fbc237a86&#34;,&#34;dropCap&#34;:false}&#34;&gt;The authors would like to thank all the contributors to the MySQL platform and all the Uber platform and customer teams for their feedback and协作。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/encor” data-wp-block =“ {“ fontsize”：“ small”，“ hash”：“ C8D2998E-8E48-48-48-44E9-962C-0CFBD9689FA2”使用Openai Chatgpt Enterprise生成。&lt;/em&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph” data-wp-block =“ {“ fontsize”：“ small”，“ hash”：“ 03129386-2BE8-465B-BDDB-BDDB-55F686BEB5B5B3”，“ize“&gt; &lt;em&gt; apache &lt;sup&gt;®&lt;/sup&gt;，Apache Hive &lt;Sup&gt;™&lt;/sup&gt;，Apache Kafka &lt;Sup&gt;®&lt;/sup&gt;和Hive和Hive是注册的商标或Apache软件基金会的Apache软件基金会或其他国家/或其他国家/地区的Apache Softient。&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ fontsize”：“ small”，“ hash”：“ eb0faefb-baa4-475a-a3f8-919681341345e2d”，“ Docker徽标是美国和/或其他国家的Docker，Inc。的商标或注册商标。 Docker，Inc。和其他当事方也可能具有此处使用的其他术语商标权。&lt;/em&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/encor” data-wp-block =“ {“ fontsize”：“ small”，“ hash”：“ 42FF11AD-A9B7-4D80-4D80-8F05-F3536E208A2A”，“ MySQL &lt;sup&gt;®&lt;/sup&gt;是Oracle和/或其分支机构的注册商标。使用这些标记不暗示甲骨文的认可。&lt;/em&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ fontsize”：“ small”，“ hash”：“ 917089DC-7FCA-447E-447E-8F5C-391BC2C2C2CDBC80”，“ class =“ hasmall-font-size”&gt; &lt;em&gt; jdbc &lt;sup&gt;™&lt;/sup&gt;是Oracle America，Inc。&lt;/em&gt; &lt;/p&gt;的商标&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ fontsize”：“ small”，“ hash”：“ A4747065-4082-4840-AD11-11-76F0B6F0B6F0B6F94E1B，” class =“ has small-font-size”&gt; &lt;em&gt; kubernetes &lt;sup&gt;®&lt;/sup&gt;，etcd &lt;sup&gt;®，&lt;/sup&gt;和kubernetes &lt;sup&gt;®&lt;/sup&gt;®&lt;/sup&gt; logo是美国和/或其他国家/地区Linux基金会的注册商标。 Linux基金会没有使用这些标记的认可。&lt;/em&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;fontSize&#34;:&#34;small&#34;,&#34;hash&#34;:&#34;58b3d760-a44a-44d4-9d01-cd50ae9de40c&#34;,&#34;dropCap&#34;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Pecona&lt;sup&gt;™&lt;/sup&gt; Percona Xtrabackup &lt;sup&gt;™&lt;/sup&gt;是Percona，LLC的商标。 &lt;/em&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {” fontsize“：”小“，”，“哈希”：“ 430fbf2f-e343-4bf7-aff5-aff5-aff5-aff5-aff5 d46880b680b6897d”，“是Meta Platform，Inc。&lt;/em&gt; &lt;/p&gt;的注册商标</description>
      <pubDate>Thu, 30 Jan 2025 06:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Presto® Express: Speeding up Query Processing with Minimal Resources】PRESTO®Express：使用最少资源加速查询处理</title>
      <link>https://www.uber.com/blog/presto-express/</link>
      <description>【&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:1,&amp;quot;hash&amp;quot;:&amp;quot;7404d726-deb9-4f91-bde8-c282b1b4c7e2&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9663f6c7-9977-4746-afb2-88dc6a604b87&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Presto&lt;sup&gt;®&lt;/sup&gt; is an open-source, distributed SQL query engine designed for running interactive analytic queries on data sources of any size, from gigabytes to petabytes.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;362e44f0-2468-4329-9435-ffed45e334cc&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;At Uber, Presto is a critical engine for data analytics across various departments. The Operations team relies on it for dashboarding, while Uber Eats and marketing teams use its query results for pricing decisions. Presto is also essential to Uber’s compliance, growth marketing, and ad-hoc data analytics, making it a cornerstone of the company’s data-driven operations.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1099424,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;6efcea4d-040e-40a3-95db-b0e9712dc5f3&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;611&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure1-17309536886116-1024x611.png&#34; alt=&#34;&#34; class=&#34;wp-image-1099424&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure1-17309536886116.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure1-17309536886116.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure1-17309536886116.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1438,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure1-17309536886116.png 1438w&#34; sizes=&#34;auto, (max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 1: Uber Presto operational overview.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a703b98a-6d2b-4ccc-82eb-d5a6df09da59&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ede00cc6-18ce-4412-920c-aee41913e0d2&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Uber operates around 20 Presto clusters across over 10,000 nodes in 2 regions, supporting approximately 12,000 weekly active users. These users run about 500,000 queries daily, reading around 100 PB from HDFS. Presto is used to query multiple data sources, including Apache Hive™, Apache Pinot™, MySQL&lt;em&gt;&lt;sup&gt;®&lt;/sup&gt;&lt;/em&gt;, and Apache Kafka&lt;sup&gt;®&lt;/sup&gt;, through its extensible data source connectors.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;44406267-0f63-4baa-a9d5-b7758c76a709&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;This blog describes how Uber designed Presto express to reduce end-to-end SLA for fast-running Presto queries.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0ac6b117-f506-43b8-83d8-0fa524bed549&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;88ceb908-18a4-4dd9-a2df-1a7d84af4705&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-problem-statement&#34;&gt;Problem Statement&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0c3532d4-4c5a-4002-b66c-a45bab4126e3&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Earlier last year, we observed Presto experiencing query slowness for multiple months. To work around this, we had to add more capacity. The problem of query slowness was caused by throttling. To keep ‌Presto clusters from getting overloaded, we have concurrency limits that limit the number of queries that can run concurrently on the cluster. This creates a fixed pipe, and all the queries have to contend for a spot in that pipe.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1099426,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;e8252f50-2846-496b-b962-e3d5f03d62df&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;546&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure2-17309537151369-1024x546.png&#34; alt=&#34;&#34; class=&#34;wp-image-1099426&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure2-17309537151369.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure2-17309537151369.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure2-17309537151369.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1320,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure2-17309537151369.png 1320w&#34; sizes=&#34;auto, (max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 2: High-level Presto architecture.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;be59cfe0-8ccb-4b31-9c02-b3b710d3a12c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7cacc5e8-7653-4247-ae97-0bfd9be6c6a4&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;For a query to get accepted for execution, it has to pass the user, consumer, cluster, and cluster group level concurrency checks. Incoming queries are queued up in Exeggutor post-validation and released to Prism for routing if they satisfy the checks. For a particular user or consumer, queries are processed in a first-come, first-served manner.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9b411a1f-1327-490e-b433-a40a3e3d9752&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Figure 3 shows how many times user and consumer-level limits throttled scheduled queries over a 7-day period.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1099428,&amp;quot;sizeSlug&amp;quot;:&amp;quot;full&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;170ee10e-7bf1-46d5-868a-755ac029bc69&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-full&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;976&#34; height=&#34;470&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure3-3-17309538282644.png&#34; alt=&#34;&#34; class=&#34;wp-image-1099428&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=976,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure3-3-17309538282644.png 976w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure3-3-17309538282644.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure3-3-17309538282644.png 768w&#34; sizes=&#34;auto, (max-width: 976px) 100vw, 976px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 3: Queries throttled due to consumer and user limitations.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a2287193-136a-4872-b6a3-aef60a38e140&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;1b8962db-8797-459f-827f-7fa745d08832&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The cluster concurrency level limit also throttles queries. For example, throttling for batch low-tier queries based on cluster limits.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1099430,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;5ed08639-7998-4271-9efd-f1d0998f8228&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;429&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure4-17309539067428-1024x429.png&#34; alt=&#34;&#34; class=&#34;wp-image-1099430&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure4-17309539067428.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure4-17309539067428.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure4-17309539067428.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure4-17309539067428.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=1600,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure4-17309539067428.png 1600w&#34; sizes=&#34;auto, (max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 4: Queries throttled due to cluster availability.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;1c30a50d-d93b-4da3-a39a-933d6104b49a&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0d04af4b-d31c-4a7e-9dfb-9737ba45af6a&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Figures 3 and 4 show the significant throttling that Presto queries have to go through.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;76edbd98-ad88-4aba-81c5-8ca9de8b569b&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;However, looking at the Presto query latencies, we saw that P50 execution times of the queries were well under a minute. Here, the execution time only refers to the running time of the query in Presto and doesn’t include any queuing time for the query in Exeggutor.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1099432,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;c693237f-80b2-4767-86fc-22113301276c&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;279&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure5-17309539465304-1024x279.png&#34; alt=&#34;&#34; class=&#34;wp-image-1099432&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure5-17309539465304.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure5-17309539465304.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure5-17309539465304.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1056,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure5-17309539465304.png 1056w&#34; sizes=&#34;auto, (max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 5: Interactive query latency.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d3990c25-aaff-4918-a120-a4f94f126fc7&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1099433,&amp;quot;sizeSlug&amp;quot;:&amp;quot;full&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;31c90169-3460-415a-a93d-9bf7166b37b2&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-full&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1025&#34; height=&#34;280&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure6-17309539701128.png&#34; alt=&#34;&#34; class=&#34;wp-image-1099433&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1025,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure6-17309539701128.png 1025w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure6-17309539701128.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure6-17309539701128.png 768w&#34; sizes=&#34;auto, (max-width: 1025px) 100vw, 1025px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 6: Batch query latency.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;8cc9dae3-ea12-44ab-ad24-bcefeac6f1ff&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;3f029991-97ec-4602-970d-0c3ebd997b6c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;That meant that out of the roughly 500,000 queries that Presto executed every day, more than half of the queries could easily finish in under a minute. To reduce the queue time of these fast-running queries, we designed a new approach.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;8fa2ee6e-cb3f-456d-bb24-f11aa8bde6d3&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d28a19b8-6197-47a3-84d7-4bbf55d04a19&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-identifying-express-queries&#34;&gt;Identifying Express Queries&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6731793b-83ba-450f-af97-d24c25eafa14&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We define an &lt;em&gt;express query&lt;/em&gt; as any Presto query that can finish within 2 minutes. To identify express queries, we developed a method using historical data to predict whether an upcoming query is an express query. To do this, we tested the P90 and P95 query execution times using the exact fingerprint and abstract fingerprint of the query with lookback windows of 2 days, 5 days, and 7 days. An exact fingerprint is a query hash after removing comments and whitespaces. An abstract fingerprint also removes literal values from the query. An abstract fingerprint can identify similar queries coming from the same pipeline or data services even though the query isn’t the same.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9dd17e03-1bc3-4008-869c-04fd37436f29&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We used this candidate definition to predict if a query was express: &lt;em&gt;if the X runtime of the query in the last Y days based on Z fingerprint was less than 2 minutes. &lt;/em&gt;We explored variations where &lt;em&gt;X&lt;/em&gt; was P90 or P95, &lt;em&gt;Y&lt;/em&gt; was 2, 5, or 7, and &lt;em&gt;Z&lt;/em&gt; was exact or abstract.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a37178a0-62f8-4db3-9008-4ebd0c209cde&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;This gave us 12 candidate definitions. To compare the various candidates, we defined Accuracy as &lt;em&gt;True Positive/(True Positive +False Positive)&lt;/em&gt; and Coverage as &lt;em&gt;(True Positive+False Positive)/ALL&lt;/em&gt;.&lt;br&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1099435,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;bc8f4f3d-6374-49b0-9bef-60a13b107856&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;155&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure7-17309540503346-1024x155.png&#34; alt=&#34;&#34; class=&#34;wp-image-1099435&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure7-17309540503346.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure7-17309540503346.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure7-17309540503346.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure7-17309540503346.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=2048,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure7-17309540503346.png 2048w, https://blog.uber-cdn.com/cdn-cgi/image/width=2064,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure7-17309540503346.png 2064w&#34; sizes=&#34;auto, (max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 7: Confusion matrix of predictions for express queries.&amp;nbsp;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9583e821-8ed3-4cfe-9d7e-eabf618930f6&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;13bb5569-844b-4167-b5d4-ed725a20a500&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;To test the accuracy of the prediction, we wrote a SQL query to analyze the historical data and come up with the prediction. In the analysis, we found that the P90 value of the abstract fingerprint with a 5-day lookback window provided the best accuracy and coverage, with values of 95.7% and 48.99%, respectively. So, we decided to use this query as our primary indicator for express queries moving forward. By implementing this optimized approach, we could better predict and identify express queries. We’ll continue to monitor and refine our model to ensure its ongoing accuracy and effectiveness.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1099436,&amp;quot;width&amp;quot;:&amp;quot;606px&amp;quot;,&amp;quot;height&amp;quot;:&amp;quot;auto&amp;quot;,&amp;quot;sizeSlug&amp;quot;:&amp;quot;full&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;991b38aa-3e33-41e6-bf6c-c93b2cdbaaee&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-full is-resized&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;2024&#34; height=&#34;758&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure8-17309540801369.png&#34; alt=&#34;&#34; class=&#34;wp-image-1099436&#34; style=&#34;width:606px;height:auto&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure8-17309540801369.png 2024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure8-17309540801369.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure8-17309540801369.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure8-17309540801369.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure8-17309540801369.png 1536w&#34; sizes=&#34;auto, (max-width: 2024px) 100vw, 2024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 8: Experiment result.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;da10709d-d9bc-40f5-9720-f3f33244bf93&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7bfda52e-77d3-44ef-ae44-155d50eb852c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We added a sink to ingest data from our query events topic to a Pinot table that can be queried in real time. Now when a query comes to Presto, we can determine whether that query is express using the Pinot query shown in Figure 9.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1099438,&amp;quot;width&amp;quot;:&amp;quot;489px&amp;quot;,&amp;quot;height&amp;quot;:&amp;quot;auto&amp;quot;,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;722bd5e0-5123-49e7-9c22-0bd1e0e6db3e&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large is-resized&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;403&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure9-17309541541205-1024x403.png&#34; alt=&#34;&#34; class=&#34;wp-image-1099438&#34; style=&#34;width:489px;height:auto&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure9-17309541541205.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure9-17309541541205.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure9-17309541541205.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1424,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure9-17309541541205.png 1424w&#34; sizes=&#34;auto, (max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 9: Pinot query determines if a query is express.&amp;nbsp;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;027e4244-1bcb-4347-9a6b-90f526cd71f0&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;b49d8a0d-5a68-43c2-8d98-7c3bf8263547&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We use the &lt;em&gt;_count&lt;/em&gt; to make sure that we make the prediction based on at least 5 previous runs of the query. If the percentile that we get above is less than 2 minutes and the count is greater than 5, then the query is deemed an express query. Since the Pinot table has the exact fingerprint and data for the last 90 days, we can easily change the method to use the exact fingerprint, a different percentile and/or larger or smaller lookback window.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ff22cbdf-fbd3-4407-a770-2221a791d665&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;One drawback of using historical data for prediction is that we won’t be able to predict accurately for new queries coming to the system. However, this isn’t a problem for batch workloads, where most of the queries are scheduled and repeat themselves over a set frequency.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;16705ebc-8773-4f1e-9057-9ec541d55e3f&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The query prediction latency is very minimal, with most of the predictions being made in under 100 milliseconds.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1099440,&amp;quot;sizeSlug&amp;quot;:&amp;quot;full&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;08270d34-f370-49e2-a1ec-34a26779aef7&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-full&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;748&#34; height=&#34;299&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure10-17309544008135.png&#34; alt=&#34;&#34; class=&#34;wp-image-1099440&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=748,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure10-17309544008135.png 748w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure10-17309544008135.png 300w&#34; sizes=&#34;auto, (max-width: 748px) 100vw, 748px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 10: Express query latency.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;98739c05-5aba-4185-8b37-3f43348e25ed&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ae811d7a-e2ff-473f-88e4-33513d099ce6&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6868cbd6-1500-4e6d-9fe6-518599583eb7&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-initial-express-design&#34;&gt;Initial Express Design&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ea173013-a44c-4463-a838-e8405887ce68&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In our initial design of the express feature, we designated one of our existing batch clusters to be an express cluster and added the aforementioned logic in Prism to determine if a query was express and should be sent to the express clusters.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1102105,&amp;quot;width&amp;quot;:&amp;quot;559px&amp;quot;,&amp;quot;height&amp;quot;:&amp;quot;auto&amp;quot;,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;1ed7e1fc-8d4e-448d-a701-24d765ec8a8d&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large is-resized&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;664&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure11.ng-17345532339493-1024x664.png&#34; alt=&#34;&#34; class=&#34;wp-image-1102105&#34; style=&#34;width:559px;height:auto&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure11.ng-17345532339493.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure11.ng-17345532339493.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure11.ng-17345532339493.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1532,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure11.ng-17345532339493.png 1532w&#34; sizes=&#34;auto, (max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 11: High-level architecture of initial Presto express design.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c4e8797a-6709-4664-85ad-8f4d1408cc8d&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;00d92174-eae7-448d-ad31-046104e42c54&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;However, this approach faced several issues:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;ordered&amp;quot;:true,&amp;quot;hash&amp;quot;:&amp;quot;c2404b55-5c61-4955-a504-07a2acaffa7e&amp;quot;,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Underutilization&lt;/strong&gt;: The express cluster operated significantly below its full capacity, with CPU usage hovering at approximately 20%, while other low-tier clusters operated at nearly 90%. This disparity was evident in metrics, showcasing a noticeable decrease in CPU usage for batch3_b20b, which was designated as the express cluster. This situation highlighted a substantial underutilization of the express cluster’s resources.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;5f3b978c-28c8-4fef-8a25-e9640346208e&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1099444,&amp;quot;sizeSlug&amp;quot;:&amp;quot;full&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;4caf5909-a40b-436f-ba42-ccf867e9cec7&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-full&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;908&#34; height=&#34;334&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure12-17309544759023.png&#34; alt=&#34;&#34; class=&#34;wp-image-1099444&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=908,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure12-17309544759023.png 908w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure12-17309544759023.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure12-17309544759023.png 768w&#34; sizes=&#34;auto, (max-width: 908px) 100vw, 908px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 12: Daily CPU usage of each cluster.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;5f3b978c-28c8-4fef-8a25-e9640346208e&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;ordered&amp;quot;:true,&amp;quot;start&amp;quot;:2,&amp;quot;hash&amp;quot;:&amp;quot;1ad2bea0-e454-4a93-badc-253a475a39d0&amp;quot;,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; start=&#34;2&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Our approach, limited to including the express tag only in the execution process, had inadvertently overlooked query throttling in QR queues. This oversight resulted in our system remaining within consumer and user limits. Paradoxically, the express cluster, despite being designed for quick queries, often remained idle due to meeting these limits. Consequently, other clusters were burdened with an increased query load, exacerbating the situation.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1099445,&amp;quot;sizeSlug&amp;quot;:&amp;quot;full&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;8b6e5608-eeb2-4185-97e6-de6fac2dc001&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-full&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;926&#34; height=&#34;295&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure13-17309544934077.png&#34; alt=&#34;&#34; class=&#34;wp-image-1099445&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=926,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure13-17309544934077.png 926w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure13-17309544934077.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure13-17309544934077.png 768w&#34; sizes=&#34;auto, (max-width: 926px) 100vw, 926px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 13: Daily query count of each cluster.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d6eaca6e-10fc-46e4-a657-8f8ad62ca41e&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;094fa422-0ad4-43e6-aa28-a61c264727c6&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Our initial attempt revealed crucial insights. Even though more than 50% of the low-tier batch queries were express queries, they consumed much less CPU. The resources allocated to express and non-express queries should match the CPU requirements of those queries. Beyond that, the slowdown experienced by the express queries couldn’t be solved just by the runtime isolation of the express queries from the non-express queries. ‌Express queries needed their own queues in the upstream systems (Exeggutor), so that an express query for a user or consumer didn’t get blocked by a non-express query for the same user or consumer sent earlier.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2dfff7fc-76b6-4fc9-84a4-bb91995ea220&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0931343f-c3a3-4d4e-859e-74759d81157f&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-final-design&#34;&gt;Final Design&lt;/h2&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1102107,&amp;quot;width&amp;quot;:&amp;quot;534px&amp;quot;,&amp;quot;height&amp;quot;:&amp;quot;auto&amp;quot;,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;678dbdd1-e0b8-4617-aa3d-b8c7558b61be&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large is-resized&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;559&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure14-17345532572712-1024x559.png&#34; alt=&#34;&#34; class=&#34;wp-image-1102107&#34; style=&#34;width:534px;height:auto&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure14-17345532572712.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure14-17345532572712.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure14-17345532572712.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure14-17345532572712.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=1672,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure14-17345532572712.png 1672w&#34; sizes=&#34;auto, (max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 14: High-level architecture of Presto express final design.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6112f0e8-9203-4039-a266-cc02fd3919a8&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;480aa367-a35c-4168-8dc1-06523ef0f5ba&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In the final system that’s currently in production, we created a separate queue for express queries in Exeggutor that’s matched by a set of small express clusters. The express determination is done at the time of query validation itself, and the query is added to the express queue if applicable. The express queue has much higher user or consumer-level concurrencies, letting them run much more express queries than non-express queries.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a4c20d41-aef7-48aa-b7b9-1f0a7771c90f&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ad1c1bf3-c163-4fa9-9c9a-6adf9a552926&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-impact&#34;&gt;Impact&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;30a77cd0-49ed-42b8-ae12-abf86f258a42&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Currently the express feature is only enabled for batch low-tier queries. The low-tier express clusters use around 10% of the total batch low-tier Presto resources, yet they run about 75% of the batch low-tier queries.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1099448,&amp;quot;sizeSlug&amp;quot;:&amp;quot;full&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;9c5c17e2-c33f-4d4d-be07-656b6f57ca9b&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-full&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;738&#34; height=&#34;254&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure15-17309545442114.png&#34; alt=&#34;&#34; class=&#34;wp-image-1099448&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=738,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure15-17309545442114.png 738w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure15-17309545442114.png 300w&#34; sizes=&#34;auto, (max-width: 738px) 100vw, 738px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 15: Comparing query count of express and non-express queries in the on-prem batch low tier.&amp;nbsp;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;751ca32e-6e42-417b-8213-66ec4f41d30a&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c312ebfe-1da5-441e-ad78-677273fabf40&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;They also provide a much better SLA to ‌users. The p90 queuing time for express queries is about 10 seconds, whereas it can be in hours for non-express queries. 01:37:06 in Figure 16 refers to 1 hour, 37 minutes, and 6 seconds.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1099450,&amp;quot;sizeSlug&amp;quot;:&amp;quot;full&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;e359b75c-cc8e-4c11-ac25-477a675db113&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-full&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;746&#34; height=&#34;258&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure16-17309545843619.png&#34; alt=&#34;&#34; class=&#34;wp-image-1099450&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=746,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure16-17309545843619.png 746w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure16-17309545843619.png 300w&#34; sizes=&#34;auto, (max-width: 746px) 100vw, 746px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 16: Comparing P90 queuing time for the express and non-express queries.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6f4b46cd-c162-4744-97d7-3f17cb9c41c7&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7e4f3a4c-eb4c-4057-98bb-2f7756f07c96&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The p90 running time of the express queries is also obviously less, and the express queries provide a much better end-to-end SLA for users.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1099419,&amp;quot;sizeSlug&amp;quot;:&amp;quot;full&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;f75ca99a-2d3b-4a3e-bb11-539edde28e97&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-full&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;737&#34; height=&#34;249&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure17-17309527374882.png&#34; alt=&#34;&#34; class=&#34;wp-image-1099419&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=737,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure17-17309527374882.png 737w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure17-17309527374882.png 300w&#34; sizes=&#34;auto, (max-width: 737px) 100vw, 737px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 17: Comparing the P90 runtime for ‌express and non-express queries.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ace869bc-c889-43d0-aaef-bddbeef0f7c6&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0626068b-e055-45c1-9294-c1bcda29a592&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;907e8a8b-e7e4-4bc8-8272-33c015204a31&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-next-steps-nbsp&#34;&gt;Next Steps&amp;nbsp;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;33c06a69-2ff8-480e-a2b9-defc925f6af5&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;For next steps, we want to look at separating the express cluster group. In our current implementation, express clusters are a sub-group of the major cluster groups like batch low tier, batch high tier, and interactive. The idea was that each cluster group would have its own set of express clusters. However, based on our experience in production,‌ express can be a separate cluster group instead of being a subgroup. So, an express query should be sent to this cluster group regardless of whether the query is a batch high tier, low tier or interactive query. The reasons for this are:&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;521b9e82-a6a7-4c3b-8a14-4887ecde79be&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;The current express clusters seem to have low utilization and can‌ run much more queries.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Simplified routing logic. We can just determine that a query is express at query submission time and route it to this cluster group.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;The SLA given by the express system is low enough that we don’t need to differentiate between batch and interactive queries.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f339da68-8805-4e0e-8386-0798070f209f&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;So far, we have only differentiated between express and non-express queries, but we can have more classifications like small/medium/large and each classification going to a separate cluster group.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;485bc75d-25b2-42b8-9ec0-38fbfebd549b&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Another area we’re exploring is query cost prediction. Historical data has been our primary tool for predicting whether a query qualifies as an express query. Having historical data can be a challenge for interactive workloads. To address this, we can harness machine learning models to determine whether incoming queries should be classified as express or not. By integrating advanced algorithms, we can accurately assess the nature of new queries, ensuring more precise and timely classifications, even for previously unseen queries in our system.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6c4a2ec0-107e-4acc-90ed-4fa63ca40f51&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:1,&amp;quot;hash&amp;quot;:&amp;quot;b9ccff27-56a3-49fd-93c8-34ff75280f3e&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-conclusion&#34;&gt;Conclusion&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;fdfd207e-f816-48ba-8746-e0a2bbd337ec&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;This blog explored the design and implementation of Uber’s Presto express, aimed at reducing the end-to-end SLA for short-running queries. We discussed how express queries are defined, how they integrate into the overall ecosystem, and the challenges we encountered. Additionally, we highlighted the performance gains achieved through our deployment, with Presto express delivering an order-of-magnitude improvement in end-to-end SLA for over 75% of scheduled queries.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;e5f6e121-eae9-4740-a6d8-67a6d5b36f5f&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Apache&lt;sup&gt;®&lt;/sup&gt;, Apache Kafka&lt;sup&gt;®&lt;/sup&gt;, Apache Hive&lt;sup&gt;™&lt;/sup&gt;, and Apache Pinot&lt;sup&gt;™ &lt;/sup&gt;are either registered trademarks or trademarks of the Apache Software Foundation in the United States and/or other countries. No endorsement by The Apache Software Foundation is implied by the use of these marks.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;c01f2c0c-f857-45b1-b6c0-3c744ea63341&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Oracle, Java, MySQL, and NetSuite are registered trademarks of Oracle and/or its affiliates.&amp;nbsp;&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;9149a51f-6ad7-4a68-8c7b-f4fb23d4b282&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Presto® is a registered trademark of LF Projects, LLC.&lt;/em&gt;&lt;br&gt;&lt;br&gt;“&lt;a href=&#34;https://www.flickr.com/photos/95482862@N00/3889341309&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;1st Avenue traffic&lt;/a&gt;” by &lt;a href=&#34;https://www.flickr.com/photos/95482862@N00&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Oran Viriyincy&lt;/a&gt; is licensed under &lt;a href=&#34;https://creativecommons.org/licenses/by/2.0/?ref=openverse&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;CC BY 2.0&lt;/a&gt;.&lt;/p&gt;】&lt;H1 data-wp-block-name =“ core/heading” data-wp-block =“ {”级别“：1，”哈希：“ 7404d726-deb9-4f91-bde8-c282b1b1b4c7e2”}&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coraph” data-wp-block =“ {” hash&#39;：“ 9663f6c7-9977-4746-4746-afb2-88dc6a604b87”，“ dropcap”&gt; presto &lt;presto &lt;presto &lt;sep&gt;®&lt;/sequce，quce®&lt;/sequce，quce&gt;从千兆字节到之前的数据源查询任何大小的数据源。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coraph” data-wp-block =“ {” hash&#39;：“ 362E44F0-2468-4329-4329-9435-FFED45E334cc”，“ dropcap”，“ dropcap”：false}“：false}”&gt;在Uber，Presto，Presto是各个部门的重要引擎。运营团队依靠它来进行仪表板，而Uber饮食和营销团队则使用其查询结果进行定价决策。 Presto对于Uber的合规性，增长营销和临时数据分析也是必不可少的，使其成为公司数据驱动的运营的基石。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {” id“：1099424，“ sizeSlug”：“ sizeSlug”：“大”，“ linkdestination”：“ none”，“ align”，“ align”：“ center”，“ hash”：“ 6efcea4d-040e-40e-40A3-40A3-40A3-40A3-95DB-B0E”} class =“ AlignCenter size-large”&gt; &lt;img loading =“ lazy” dododing =“ async” width =“ 1024” height =“ 611” src =“ https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80，quality = 80，onerror = redirct，format = auto/wp-content/uploads/2024/2024/11/11/figure1/figure1/figure1-figure1-figure1-1-1730995368888888888888888888886111.PEN class=&#34;wp-image-1099424&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure1-17309536886116.png 1024W，https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror = redirect，format，format = auto/wp-content/uploads/2024/2024/11/11/11/figure1-1730953688886116.pns.pns.pn00 https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80，onerror=redirect，format，format = auto/wp-content/uploads/2024/2024/11/figure1-figure1-173095368861166.png 768w， https://blog.uber-cdn.com/cdn-cgi/image/width=1438,quality=80，onerror=rectirect，format，format = auto/wp-content/uploads/2024/2024/2024/11/11/figure1 1024px）100VW，1024px“ referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ WP-元素caption”&gt;图1：Uber Presto操作概述。&lt;/figcaption&gt; &lt;/figcaption&gt; &lt;/figif&gt; &lt;/dig&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ A703B98A-6D2B-4CCC-82EB-D5A6DF09DA59”，“ dropcap”，“ dropcap”：dropcap“：false}”&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coragraph“ data-wp-block =” {“ hash”：“ EDE00CC6-18CE-4412-920C-AEE41913E0D2”，“ dropcap”：false}“：false}”&gt; Uber操作大约20个presto clusters，跨越了10,000个Nodes，在2个区域中跨越了10,000个nodes，支持了大约12,000个周期，支持12,000个周期，支持12,000个星期几，距离为12,000个周期。这些用户每天运行约500,000个查询，从HDFS读取大约100 pb。 Presto用于查询多个数据源，包括Apache Hive™，Apache Pinot™，MySQL &lt;em&gt; &lt;sup&gt;®&lt;/sup&gt; &lt;/em&gt; &lt;/em&gt;，以及Apache Kafka &lt;Sup&gt;®&lt;/sup&gt;，通过其可扩展的数据源连接器。&lt;/p&gt; &lt;/sup&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coraph”“ data-wp-block =” {“ hash”：“ 4444406267-0F63-4BAA-4BAA-A9D5-B77758C76A709”，“ dropcap”&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;0ac6b117-f506-43b8-83d8-0fa524bed549&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name =“ core/heading” data-wp-block =“ {” hash&#39;：“ 88CEB908-18A4-4DD9-A2DF-1A7D84AF4705”，“ latver”：2} class =“ class =” wp-block-heading“ wp-block-heading”&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph“ data-wp-block =” {“ hash”：“ 0c3532d4-4c5a-4002-b66c-a45bab4126e3”，“ dropcap”：dropcap“：false}”&gt;去年，我们去年早些时候就经历了多个月份的presto seface cooke sebore cool lote slowners。为了解决这个问题，我们必须增加更大的能力。查询缓慢的问题是由节流引起的。为了防止‌Presto集群超载，我们具有限制可以同时在群集上运行的查询数量的并发限制。这会产生固定的管道，所有查询都必须在该管道中争夺一个位置。 &lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data data-wp-block-name =“ core/image” data-wp-block =“ {“ id”：1099426，“ sizeSlug”：“大”，“ linkdestination”：“ none”，“ aLign”：“ center”，“ hash”，“ hash”：“ class =“ AlignCenter size-large”&gt; &lt;img loading =“ lazy” dododing =“ async” width =“ 1024” height =“ 546” src =“ https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80，quality=80，onerror = redirt = redirct，format = auto/wp-content/uploads/2024/2024/11/11/figure2-173099537151515151546.P class =“ wp-image-1099426” srcset =“ https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80，quality=80，onerrt = redirt = redirct，form atect，form atect，format = auto atect， 1024W，https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror = redirect，format = auto/wp-content/uploads/2024/2024/11/11/figure2-17309537151515151369.png 300w00w00 https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80，onerror=redirect，format，format = auto/wp-content/uploads/2024/2024/11/11/figure2-17309537151369.png 768w，768w，figure2-17309537151369.png 768w， https://blog.uber-cdn.com/cdn-cgi/image/width=1320,quality=80，onerror=redirt = redirect，format = auto/wp-content/uploads/2024/2024/2024/11/11/figure2-1730953715151369.png 1 sizes 100vw，1024px“ referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ WP-元素caption”&gt;图2：高级Presto架构。&lt;/figcaption&gt; &lt;/fig&gt; &lt;/dig&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：＆qUOT; BE59CFE0-8CCB-4B31-9C02-B3B710D3A12C“，” dropcap“：false}”&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;7cacc5e8-7653-4247-ae97-0bfd9be6c6a4&#34;,&#34;dropCap&#34;:false}&#34;&gt;For a query to get accepted for execution, it has to pass the user, consumer, cluster, and cluster group level concurrency checks.传入的查询在验证后的Exeggutor中排队排队，并在prism释放出来，以进行路由，以便他们满足支票。对于特定的用户或消费者，查询以先到先得的方式处理。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coragraph“ data-wp-block =” {“ hash”：“ 9B411A1F-1327-490E-B433-A40A3E3E3D9752”，“ dropcap”，“ dropcap”：false}”&gt;图3显示了几次用户和消费者limite limit limits pot limits pot y/limits pot a in 7 7 7 7&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ id”：1099428，“ sizeSlug”：“ full”，“ linkDestination”：“ none”，“ align”，“ align”：“ center”，“ hash”，“ 170ee-7bf1-7bf1-46d5-46d5-46d5-46d5-868a-7555555555555AC” class =“ AlignCenter size-full”&gt; &lt;img loading =“ lazy” dododing =“ async” width =“ 976” height =“ 470” src =“ https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80，quality=80，onerror = redirect，format = auto/wp-content/uploads/2024/2024/11/11/figure3-3-3-3-3-173095382828282828282828282828282828282644.png” class=&#34;wp-image-1099428&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=976,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure3-3-17309538282644.png 976W，https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror = redirect，format = auto/wp-content/uploads/2024/2024/11/11/figure3-3-3-17309538282828282828282644.pn00 https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80，onerror=rectecrect，format，format = auto/wp-content/uploads/2024/2024/2024/11/figure3 976px) 100vw, 976px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 3: Queries throttled due to consumer and user limitations.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ A22287193-136A-4872-B6A3-AEF60A38E140”，“ dropcap”：dropcap“：false}”&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph“ data-wp-block =” {“ hash”：“ 1B8962DB-8797-459F-827F-827F-7FA745D08832”，“ dropcap”：dropcap“：false}”&gt;群集并发级别限制量也集中。例如，基于群集限制的批次低层查询的节点。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ id”：1099430，“ sizeSlug”：“大”，“ linkDestination”：“ none”，“ align”：“中心”，“ hash”：“ 5ed08639-7998-4271-4271-4271-9EFD-F1D0999999998” class =“ AlignCenter size-large”&gt; &lt;img loading =“ lazy” dododing =“ async” width =“ 1024” height =“ 429” src =“ https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80，onerror = redirect，format，format = auto/wp-content/uploads/2024/2024/2024/11/figure4-figure4-figure4-figure4-figure4-figure4-figure4-figure4-17309539539539067428-1028-102429.pngng.pngngng.pngngng. class=&#34;wp-image-1099430&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure4-17309539067428.png 1024W，https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror = redirect，format，format = auto/wp-content/uploads/2024/2024/11/11/figure4-17309539067428.pn https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80，onerror=redirect，format，format = auto/wp-content/uploads/2024/2024/11/11/figure4-figure4-figure4-17309539067428.png 768.png 768w. https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80，onerror=redirect，format，format = auto/wp-content/uploads/2024/2024/11/11/11/figure4-figure4-figure4-figure4-17309539067428.png 15336.png 153366w， https://blog.uber-cdn.com/cdn-cgi/image/width=1600，quality=80，onerror = redirt = redirct，format = auto/wp-content/uploads/2024/2024/2024/11/11/figure4-figure4-figure4-17309539539067428.pn.pnizes sizes sizes sizes：sizes sizes：sizes sizes：sizes sizes：sizes sizes：sizes sizes：sizes：sizes： 100VW，1024px“ referrerpolicy =“ no-refferrer”&gt; &lt;figcaption class =“ WP-元素caption”&gt;图4：由于群集的可用性而刺激了查询。&lt;/figcaption&gt; &lt;/figucation&gt; &lt;/figif&gt; &lt;/div&gt; &lt;/div&gt;&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 1C30A50D-D93B-4DA3-A39A-933D6104B49A”，“ dropcap”，“ dropcap”：false}“：false}”&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 0d04af4b-d31C-4A7E-9DFB-9737BA-9737BA45AF6A”，“ dropcap”，“ dropcap”：false}“：false}”&gt;图3和图4和4显示了显着的泡沫，&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;76edbd98-ad88-4aba-81c5-8ca9de8b569b&#34;,&#34;dropCap&#34;:false}&#34;&gt;However, looking at the Presto query latencies, we saw that P50 execution times of the queries were well under a minute.在这里，执行时间仅是指presto中查询的运行时间，并且不包括Exeggutor中查询的任何排队时间。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ id”：1099432，“ sizeSlug”：“大”，“ linkdestination”：“ none”，“ align”，“ align”：“ center”，“ hash”：c693237f-80b-80b2-80b2-4767-4767-4767-867-867-86fc-222222221121111. class =“ AlignCenter size-large”&gt; &lt;img loading =“ lazy” dododing =“ async” width =“ 1024” height =“ 279” src =“ https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80，quality = 80，onerror = redirct，format = auto/wp-content/uploads/2024/2024/11/11/figure5-17309539465304-102499.pn class=&#34;wp-image-1099432&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure5-17309539465304.png 1024W，https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror = redirect，format，format = auto/wp-content/uploads/2024/2024/11/11/11/figure5-17309539465304.png 300304.png 3003.pn00w00 https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80，onerror=redirect，format = auto/wp-content/uploads/2024/11/fige5-17309539465304.png 768w， https://blog.uber-cdn.com/cdn-cgi/image/width=1056,quality=80，onerror = redirect，format = auto/wp-content/wp-content/uploads/2024/2024/2024/11/11/11/figure5-1730953946530465304.png 10556W. 100VW，1024px“ referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ wp- element-caption”&gt;图5：交互式查询延迟。&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ D3990C25-AAFF-4918-A120-A120-A120-A4F94F94F126FC7”，“ Dropcap”，“ Dropcap”：dropcap“：false}”&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;id&#34;:1099433,&#34;sizeSlug&#34;:&#34;full&#34;,&#34;linkDestination&#34;:&#34;none&#34;,&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;31c90169-3460-415a-a93d-9bf7166b37b2&#34;,&#34;alt&#34;:&#34;&#34;}&#34; class =“ AlignCenter size-full”&gt; &lt;img loading =“ lazy” dododing =“ async” width =“ 1025” height =“ 280” src =“ https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80，quality = 80，onerror = redirect，format = auto/wp-content/uploads/2024/2024/11/11/figure6/figure6/figure6-figure6-17309539701128.png” class =“ wp-image-1099433” srcset =“ https://blog.uber-cdn.com/cdn-cgi/image/width=1025,quality=80，onerror= redirt = redirt = redirct，format = autot = auto at into = 1025W，https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror = redirect，format，format = auto/wp-content/uploads/2024/2024/11/11/figure6-figure6-17309539701128.pn.pn.pn.pn.pn.pn.pn.pn.pn.pn.pn.pn.pn.pn.pn.pn.pn00w.ppn.ppns https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80，onerror=redirt = redirect，format = auto/wp-content/uploads/2024/2024/2024/11/11/figure6-figure6-figure6-17309539701128.png 768.png 768w.sizes： 100VW，1025px“ referrerpolicy =“ no-refferrer”&gt; &lt;figcaption class =“ WP-元素caption”&gt;图6：批次查询潜伏期。&lt;/figcaption&gt; &lt;/figife&gt; &lt;/fige&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {” hash&#39;：“ 8cc9dae3-ea12-44ab-ad24bad24-beccefefeac6f1ff”，“ dropcap”，“ dropcap”：false}}“&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coragraph” data-wp-block =“ {” hash&#39;：“ 3f029991-97ec-4602-4602-970d-0c3ebd997b6c”，“ dropcap”&gt;，每天都在quie quie quie of quiere quiere quiere yoursoie quie yours of to y presto}&gt; quiere的一整天都在 分钟。为了减少这些快速运行的查询的队列时间，我们设计了一种新方法。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name =“ core/saparator” data-wp-block =“ {” hash&#39;：“ 8fa2ee6e-cb3f-456d-bb24-f11aa.8bde6d3”，“ opacity”，“ opacity”：“：” alpha-channel“&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name =“ core/head” data-wp-block =“ {“ hash”：“ d28a19b8-6197-47a3-84d7-4bbf5555555555d04a19”，“ level”：2}&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/pragraph” data-wp-block =“ {” hash&#39;：“ 6731793b-83ba-450f-450f-450f-af97-d24c25eafaeafa14”，“ dropcap”，“ dropcap”：false}帽子可以在2分钟内完成。为了识别明确的查询，我们开发了一种使用历史数据来预测即将到来的查询是否是明确查询的方法。为此，我们使用了2天，5天和7天的查工窗口的查询窗口的确切指纹和抽象的指纹测试了P90和P95查询执行时间。在删除评论和空格之后，确切的指纹是一个查询哈希。抽象的指纹还可以从查询中删除字面价值。抽象的指纹可以识别来自同一管道或数据服务的类似查询，即使查询不相同。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;9dd17e03-1bc3-4008-869c-04fd37436f29&#34;,&#34;dropCap&#34;:false}&#34;&gt;We used this candidate definition to predict if a query was express: &lt;em&gt;if the X runtime of the query in the last Y days based on Z fingerprint不到2分钟。 &lt;/em&gt;，我们探索了&lt;em&gt; x &lt;/em&gt;的变化为p90或p95，&lt;em&gt; y &lt;/em&gt;是2、5或7，&lt;em&gt; z &lt;/em&gt;是精确或抽象的。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ A37178A0-62F8-4DB3-9008-9008-4EBD0C209CDE”，“ dropcap”：dropcap“：false}”&gt;这给了我们12个候选定义。为了比较各种候选人，我们将准确性定义为&lt;em&gt; true正/（true -forts +fromics as -em&gt;）&lt;/em&gt;和覆盖范围为&lt;em&gt;（true staper +fromical +aSTARE）/all &lt;/em&gt;。&lt;br&gt; &lt;br&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {” id“：1099435，“ sizeSlug”：“ sizeSlug”：“大”，“ linkdestination”：“ none”，“ align”，“ align”：“ center”，“ hash”，“ hash”：bc8f4f3d-6374-494-494-49b0-49b0-9b0-9b0-9bef-6bef-6bef-60.13b10.13b10 and. class =“ AlignCenter size-large”&gt; &lt;img loading =“ lazy” dododing =“ async” width =“ 1024” height =“ 155” src =“ https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80，quality=80，onerror = redirct，format = auto/wp-content/uploads/2024/2024/11/11/figure7-17-1730954050505055555.pn class =“ wp-image-1099435” srcset =“ https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80，quality=80，onerrt = redirt = redirct，form at form atect，form atect，format = autot = auto atect， 1024W，https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror = redirect，format，format = auto/wp-content/uploads/2024/2024/11/11/figure7-17309540505050505050503346.pn00 https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80，onerror=redirt = redirct，format，format = auto/wp-content/uploads/2024/2024/11/11/figure7-1730954050505054050540503346.png 768w，768w，768w， https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80，onerror = redirect，format，format = auto/wp-content/uploads/2024/2024/11/11/11/figure7-173095405050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050546.PNG 15336.PNG 15366W，WIM https://blog.uber-cdn.com/cdn-cgi/image/width=2048,quality=80，onerror=redirect，format，format = auto/wp-content/uploads/2024/2024/11/11/figure7-17309540505405054050546.png 2048w，2048w，figure7- https://blog.uber-cdn.com/cdn-cgi/image/width=2064,quality=80，onerror=redirect，format，format = auto/wp-content/uploads/2024/2024/11/11/figure7-17309540505405054050540503346.png 20664W.Sizes =“自动，最大宽度：1024px）100VW，1024px” reverrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ WP-元素接合”&gt;图7：预测的概括矩阵的概括矩阵的预测矩阵的快速疑问。 &lt;/figcaption&gt; &lt;/fige&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 9583E821-8ED3-4CFE-9D7E-9D7E-EABF618930F6”，“ dropcap”，“ dropcap”：false}“：false}”&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 13BB5569-844B-4167-B-4167-B5D4-ED725A20A500”，“ dropcap”：dropcap“：false}”&gt;来测试预测的准确性，我们对SQL Query进行了访问，并分析了历史记录的预测数据，并进行了预测。在分析中，我们发现抽象指纹的P90值使用为5天的回顾窗口提供了最佳的准确性和覆盖范围，其值分别为95.7％和48.99％。因此，我们决定将此查询用作明确查询前进的主要指标。通过实施这种优化的方法，我们可以更好地预测和确定明确的查询。我们将继续监视和完善我们的模型，以确保其持续的准确性和有效性。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;图数据 -  wp-block-name =“ core/image” data-wp-block =“ {“ id”：1099436，“ width”：“ 606px”，“高度”：“自动”，“ sizeLug”：“ full”，linkdest ination&#39;：“ none”，“ align”：“ center”，“ hash”：“ 991B38AA-3E33-41E6-BF6C-C93B2CDBAAEE”，“ ALT”：“}”} class =“ AlignCenter size-full ins-indized”&gt; &lt;img loading =“ lazy” dexoding =“ async” width =“ 2024” height =“ 758” src =“ https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80，quality=80，onerror = redirct，format = auto/wp-content/uploads/2024/2024/11/11/figure8-173095408080808080801369.pn alt =” class =“ wp-image-1099436”样式=“宽度：606px;高度：自动” srcset =“ https://blog.uber-cdn.com/cdn-cgi/image/width=2024,quality=80，quality = 80，onerror = redirect，format = auto/wp-content/uploads/2024/2024/11/11/figure8-173095408080801369.png 2024.pne https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror=redirt = redirect，format = auto/wp-content/uploads/2024/11/figure8-17309540801369.png 300w， https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80，onerror=redirect，format，format = auto/wp-content/uploads/2024/2024/11/11/figure8-1730954080801369.png 1024w， https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80，onerror=redirect，format，format = auto/wp-content/uploads/2024/2024/11/11/figure8-1730954080801369.png 768w，768w，768w， https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80，onerror=rectirect，format，format = auto/wp-content/uploads/2024/2024/11/11/11/figure8-1730954080801369.pniess sizes 2024px）100VW，2024px“ referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ WP-元素caption”&gt;图8：实验结果。&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ da10709d-d9bc-40f5-9720-f3f333244bf93”，“ dropcap”，“ dropcap”：false}“：false}”&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {”有h“：” 7BFDA52E-77D3-44EF-AE44-155D50EB852C“，” dropcap“：false}”&gt;我们在可以实时查询的Pinot表中添加了一个水槽。现在，当查询Presto时，我们可以使用图9所示的Pinot查询来确定该查询是否表达&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;图数据 -  wp-block-name =“ core/image” data-wp-block =“ {“ id”：1099438，“ width”：“ 489px”，“高度”：“自动”，“ sizeLug”：“大型”，“ linkdest ination“：“ none”，“ align”：“ center”，“ hash”：“ 722BD5E0-5123-49E7-9C22-0BD1E0E0E6DB3E”，“ ALT”：“}”}“}” class =“ AlignCenter size-large ins-indized”&gt; &lt;img loading =“ lazy” dexoding =“ async” width =“ 1024” height =“ 403” src =“ https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80，quality = 80，onerror = redirct，format = auto/wp-content/uploads/2024/2024/11/11/figure9/figure9-figure9-figure9-1730954154154154120240.PN class =“ wp-image-1099438”样式=“宽度：489px;高度：自动” srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure9-17309541541205.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror=redirt = redirct，format = auto/wp-content/uploads/2024/2024/11/figure9-figure9-figure9-17309541541205.png 300w， https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80，onerror=redirt = redirect，format，format = auto/wp-content/uploads/2024/2024/11/figure9-figure9-figure9-figure9-17309541541205.png 768w，768w， https://blog.uber-cdn.com/cdn-cgi/image/width=1424,quality=80，onerror = redirect，format = auto/wp-content/uploads/2024/2024/2024/11/11/11/11/figure9 100vw，1024px“ referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ WP-元素caption”&gt;图9：Pinot查询确定查询是否表达。 &lt;/figcaption&gt; &lt;/fige&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 027E4244-1BCB-4347-9A6B-90F526CD71F0”，“ dropcap”，“ dropcap”：dropcap“：fals}”&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;b49d8a0d-5a68-43c2-8d98-7c3bf8263547&#34;,&#34;dropCap&#34;:false}&#34;&gt;We use the &lt;em&gt;_count&lt;/em&gt; to make sure that we make the prediction based on at least 5 previous runs of the query.如果我们超过的百分位数少于2分钟，并且计数大于5，则该查询被认为是明确的查询。由于Pinot表具有过去90天的确切指纹和数据，因此我们可以轻松地更改使用精确指纹的方法，即不同的百分位和/或更大或更小的回顾窗口。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/core/段落” data-wp-block =“ {” hash&#39;：“ FF22CBDF-FBD3-4407-A770-A770-22221A791D665”，“ dropcap”：dropcap“：false}”&gt;使用历史数据的一个缺点，我们将无法预测系统，可以预测适度的系统。但是，对于批处理工作负载来说，这不是问题，其中大多数调查是安排的，并在设定的频率上重复自己。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/core” data-wp-block =“ {” hash&#39;：“ 16705EBC-8773-4F1E-4F1E-9057-9057-9EC541D55E3F”，“ dropcap”，“ dropcap”：dropcap“：false}”&gt; Query Predictical Levency with Indectiction Perdication Leventions with Predionce the Prediesect with perimimal at predions at predions at predions predions perimimal at predions persodd。&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ id”：1099440，“ sizeSlug”：“ full”，“ linkdestination”：“ none”，“ aLign”：“中心”，“ hash”，“ hash”：“ 08270D34-F370-490-49E2-49E2-49E2-A1EC-A1EC-34AEF”} class =“ AlignCenter size-full”&gt; &lt;img loading =“ lazy” dododing =“ async” width =“ 748” height =“ 299” src =“ https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80，quality = 80，onerror = redirect，format = auto/wp-content/uploads/2024/2024/11/11/figure11/figure10-1730954444444444444444444135.png” class=&#34;wp-image-1099440&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=748,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure10-17309544008135.png 748W，https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80，onerror = redirt = redirct，format = auto/wp-content/uploads/2024/2024/11/11/11/figure10-173095444008135.pniesd：s.pniesd：S. 748px）100VW，748px“ referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ wp- element-caption”&gt;图10：表达查询延迟。&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 98739C05-5ABA-4185-8B37-8B37-3F43348E25ED”，“ dropcap”，“ dropcap”：false}&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data data-wp-block-name =“ core/saparator” data-wp-block =“ {” hash&#39;：“ AE811D7A-E2FF-473F-88E4-33513D09999CE6”，“ opacity”，“ opacity”，“ opcity”：“&#xA;&#xA;&#xA;&#xA;&lt;h2 data data-wp-block-name =“ core/head” data-wp-block =“ {” hash&#39;：“ 6868CBD6-1500-4E6D-9FE6-9FE6-5185999583EB7”，“ level”：2} class class =“ class =” wp-block-head =“ wp-block-head-head =”&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {” hash&#39;：“ EA173013-A44C-4463-A838-E838-E840587CE68”，“ dropcap”，“ dropcap”：dropcap“：false}”&gt;在我们的最初的明确特征中，我们在现有的be flogition formition formit of我们现有的faft fof fofem and formit formit formit fof the fofirient and faul for for a fause an确定查询是否已表示并应发送到明确的群集。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;图数据 -  wp-block-name =“ core/image” data-wp-block =“ {“ id”：1102105，“ width”：“ 559px”，“高度”：“自动”，“ sizeLug”：“大型”，linkdest ination“：“ none”，“ align”：“ center”，“ hash”：“ 1ED7E1FC-8D4E-448D-A701-24D765EC8A8DA8D”，“ ALT”：“}”}“}” class =“ AlignCenter size-large”&gt; &lt;img loading =“ lazy” dododing =“ async” width =“ 1024” height =“ 664” src =“ https://blog.uber.uber-cdn.com/cdn-cdn-cdn-cgi/image/image/image/width/width=2160，质量= 80，OnError =重定向，格式= auto/wp-content/uploads/2024/11/fige11.ng-173455532339493-1024x6644x664.png&#39; srcset =“ https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80，quality=80，onerror = redirct，format = auto/wp-content/uploads/2024/2024/11/figure11/figure11/figure11/figure11/figure11/figure11.ng-173455555555555532339493.pn https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror=redirect，format = auto/wp-content/uploads/2024/2024/11/figure11/figure11.ng-17345553233949493.png 300 w00 https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80，onerror=redirect，format，format = auto/wp-content/uploads/2024/2024/11/figure11/figure11.ng-1735555323333333333333.png 768686868.pne https://blog.uber-cdn.com/cdn-cgi/image/width=1532, Quality=80，onerror = redirect，format = auto/wp-content/uploads/2024/2024/2024/2024/11/figure11/figure11.ng-17345553233333333.pnips 1024px）100VW，1024px“ referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ wp-element-caption”&gt;图11：初始Presto Express Design的高级体系结构。&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ C4E8797A-6709-4664-85AD-85AD-8F4D1408CC8D”，“ DROPCAP”，“ DROPCAP”：FALSE}“：false}”&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 00D92174-EAE7-448D-AD31-046104E42C54”，“ dropcap”：dropcap“：false}”&gt;但是，这种方法面临着几个问题：&lt;/p&gt;&gt; &lt;/p&gt;&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol data-wp-block-name =“ core/list” data-wp-block =“ {“ ordered”：true，“ hash”：“ C2404B55-5C61-4955-A504-A504-07A2ACAFFA7E”，“值&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; &lt;strong&gt; &lt;strong&gt; &lt;/strong&gt; &lt;/strong&gt;：Express群集的运行远低于其全容量，CPU使用悬停在20％的情况下，而其他低端簇的运行量接近90％。这种差异在指标中显而易见，表明batch3_b20b的CPU使用情况明显下降，该差异被指定为Express群集。这种情况强调了Express Cluster资源的实质性遗憾。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 5F3B978C-28C8-4FEF-8A25-E9640346208E”，“ dropcap”，“ dropcap”：false}“：false}”&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ id”：1099444，“ sizeslug”：“ full”，“ linkdestination”：“ none”，“ align”，“ align”：“ center”，“ hash”，“ hash”：“ 4CAF5909-A40B-A40B-436F-BABA42-BA42-BA42-CECECECECEC” class =“ AlignCenter size-full”&gt; &lt;img loading =“ lazy” dododing =“ async” width =“ 908” height =“ 334” src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure12-17309544759023.png&#34; alt=&#34;&#34; class =“ wp-image-1099444” srcset =“ https://blog.uber-cdn.com/cdn-cgi/image/width=908，Quality=80，OnError =重定向，格式= auto/wp-content/uploads/2024/11/fige12-17309544759023.png 908W， https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror = redirect，format = auto/wp-content/uploads/2024/2024/11/figure12-173095447590233.png 300w， https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80，onerror = Recredect，format，format = auto/wp-content/wp-content/2024/2024/2024/11/figure12-12-1730954759590233.png 768w.pnizes：sizes： 908px）100VW，908px“ referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ wp- element-caption”&gt;图12：每个群集的每日CPU使用。&lt;/figcaption&gt; &lt;/figcaption&gt; &lt;/figif&gt; &lt;/dig&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 5F3B978C-28C8-4FEF-8A25-E9640346208E”，“ dropcap”，“ dropcap”：false}“：false}”&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol data-wp-block-name =“ core/list” data-wp-block =“ ordered”：true，“ start”：2，“哈希”：“ 1AD2BEA0-E454-4A93-BADC-253A475A39D0”&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;我们的方法仅限于仅在执行过程中包含Express标签，而无意中忽略了QR队列中的Query Query Totrotting。这种监督导致我们的系统仍在消费者和用户限制内。矛盾的是，尽管是为了快速查询而设计的，但由于达到这些限制而经常闲置。因此，其他集群因查询负荷增加而加剧了这种情况。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {” id“：1099445，“ sizeSlug”：“ full”，“ linkdestination”：“ none”，“ aLign”：“中心”，“ hash”，“ hash”：“ 8b6e5608-eeb2-eeb2-eeb2-4185-4185-4185-97e6-dee6-dee6-decy6-dec001” class =“ AlignCenter size-full”&gt; &lt;img loading =“ lazy” dododing =“ async” width =“ 926” height =“ 295” src =“ https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80，quality=80，onerror = redirect，format = auto/wp-content/uploads/2024/2024/11/11/figure13-figure13-13-173095444934493449344.44494.png” class =“ wp-image-1099445” srcset =“ https://blog.uber-cdn.com/cdn-cgi/image/width=926,quality=80，onerror= redirt = redirt = redirect，format = autoect，format = auto atect， 926W，https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror = redirect，format = auto/wp-content/uploads/2024/2024/11/11/figure13-13-1730954493493493407.pn00.pn00.pns https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80，onerror = redirt = redirct，format = auto/wp-content/uploads/2024/2024/2024/11/figure13-13-1730954954954934077.png 7668.pniass： 926px）100VW，926px“ referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ wp-element-caption”&gt;图13：每个集群的每日查询计数。&lt;/figcatpion&gt; &lt;/figig&gt; &lt;/dig&gt; &lt;/div&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ d6eAca6e-10fc-46e4-a657-8f8ad62ca41e”，“ dropcap”，“ dropcap”：false}“：false}”&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 094FA422-0AD4-43E6-AA28-A61C264727C6“，” dropcap“：false}”&gt;我们的初步尝试揭示了至关重要的见解。即使超过50％的低层批次查询是明确的查询，但它们消耗的CPU却少得多。分配给表达和非表达查询的资源应符合这些查询的CPU要求。除此之外，仅仅通过从非表达查询中的快递查询的运行时隔离来解决，就无法解决Express查询所经历的放缓。 ‌表达查询需要在上游系统（EXEGGUTOR）中自己的队列，因此，对于用户或消费者的明确查询不会被较早发送的同一用户或消费者的非express询问所阻止。&lt;/p&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;2dfff7fc-76b6-4fc9-84a4-bb91995ea220&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;H2 Data-wp-block-name =“ core/heading” data-wp-block =“ {“ hash”：“ 0931343F-C3A3-4D4E-859E-859E-74759D81157F”，“ LEVEL”，“：2}” class =“ class =” wp-block-head-head-head-heading =“&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;图数据 -  wp-block-name =“ core/image” data-wp-block =“ {“ id”：1102107，“ width”：“ 534px”，“高度”：“自动”，“ sizeLug”：“大型”，linkdest ination“：“ none”，“ align”：“ center”，“ hash”：“ 678DBD1-E0B8-4617-AA3D-B8C7558B61BE”，“ ALT”：“}”}“}” class =“ AlignCenter size-large”&gt; &lt;img loading =“ lazy” dexoding =“ async” width =“ 1024” height =“ 559” src =“ https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80，onerror = redirt = redirct，format = auto/wp-content/uploads/2024/2024/11/11/figure14/figure14-figure14-14-1734-1734-5555555725724x24x.p class =“ wp-image-11102107”样式=“宽度：534px;高度：自动” srcset =“ https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80，onerror = redirct，format = auto/wp-content/uploads/2024/2024/11/figure14/figure14-figure14-14-173455555555257257272724.PN，，s 1024w， https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror = redirect，format = auto/wp-content/uploads/2024/2024/11/figure14-figure14-figure14-14-1734555572727112.png 30000w， https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80，onerror=redirect，format，format = auto/wp-content/uploads/2024/2024/11/figure14 https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80，onerror=redirect，format，format = auto/wp-content/uploads/2024/2024/11/11/figure14 https://blog.uber-cdn.com/cdn-cgi/image/width=1672，quality=80，onerror = redirect，format，format = auto/wp-content/uploads/2024/2024/2024/2024/11/figure14-figure14-figure14-figure14-figure14-figure14 1024px）100VW，1024px“ referrerpolicy =“ no-treferrer”&gt; &lt;figcaption class =“ wp-element-caption”&gt;图14：Presto Express Final Design的高级体系结构。&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 6112F0E8-9203-4039-A266-CC02FD3919A8”，“ dropcap”，“ dropcap”：false}&gt; &lt;/p&gt;&lt;p data-wp-block-name =“ core/core” data-wp-block =“ data-wp-block =” 480AA367-A35C-4168-8DC1-06523EF0F5BA“，” dropcap“：dropcap“：dropcap“：false}”在生产中，我们在生产中的表现出色的Queie for Exece foree queie foree queie fore queee fore querie fore queee fore quee ies coreies in集群。明确确定是在查询验证本身时完成的，如果适用，查询将添加到明确队列中。 Express队列具有更高的用户或消费者级的并发率，使其与非表达查询相比，它们运行得更多。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;a4c20d41-aef7-48aa-b7b9-1f0a7771c90f&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name =“ core/heading” data-wp-block =“ {” hash&#39;：“ ad1c1bf3-c163-4fa9-9c9a-9c9a-6Adf9a5552926”，“ level”，“：2}” class =“ class =” wp-block-heading =“ wp-block-heading” id =“ id =”&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ 30a77cd0-49ed-42b8-ae12-ABF86F86F86F258A42”，“ dropcap”，“ dropcap”：false}“：false}”&gt;当前仅启用for the Express的功能，仅用于批量低tier tier coolies。低层快递群集使用了总批量低层Presto资源的10％，但它们运行了大约75％的低层查询。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {” id“：1099448，“ sizeSlug”：“ full”，“ linkdestination”：“ none”，“ none”，“ align”：“ center”，“ hash”，“ hash”：“ 9c5c17e2-c33f-4d4d4d-4d4d-4d-d4d-be07-be07-be07-be07-6556b557” class =“ AlignCenter size-full”&gt; &lt;img loading =“ lazy” dododing =“ async” width =“ 738” height =“ 254” src =“ https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80，quality = 80，onerror = redirct，format = auto/wp-content/uploads/2024/2024/11/11/figure15-15-1730955454545442114.png” class =“ wp-image-1099448” srcset =“ https://blog.uber-cdn.com/cdn-cgi/image/image/width=738,quality=80，onerrt = 80 ,， 738W，https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80，onerror = redirt = redirct，format = auto/wp-content/uploads/2024/2024/2024/11/11/figure15-15-1730954544444442114.pniass sip = 3300 s. 738px）100VW，738px“ referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ WP-元素caption”&gt;图15：比较本地批次低层中的快递和非表达查询的查询计数。 &lt;/figcaption&gt; &lt;/fige&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {” hash&#39;：“ 751CA32E-6E42-417B-8213-666EC4F41D30A”，“ dropcap”，“ dropcap”：false}“&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ C312EBFE-1DA5-441E-AD78-6777273FABF40”，“ dropcap”：false}“&gt;他们也为SLA提供了更好的SLA，也为user提供了更好的SLA。 P90的快速查询时间大约是10秒用于非表达查询。图16中的01:37:06指1小时37分钟和6秒。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ id”：1099450，“ sizeSlug”：“ full”，“ linkDestination”：“ none”，“ align”：“中心”，“ hash”：“ hash”：“ class =“ AlignCenter size-full”&gt; &lt;img loading =“ lazy” dododing =“ async” width =“ 746” height =“ 258” src =“ https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80，quality=80，onerror = redirect，format = auto/wp-content/uploads/2024/2024/11/11/figure16/figure16/figure16-figure16-figure16-16-17309554584584584584444444444443619.png” class=&#34;wp-image-1099450&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=746,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure16-17309545843619.png 746W，https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror = redirect，format = auto/wp-content/uploads/2024/2024/2024/11/11/figure16-figure16-16-17309955458433619.pnips = 300 = 300：s = 746px）100VW，746px“ referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ wp- element-caption”&gt;图16：比较express和non-express查询的p90排队时间。&lt;/figcaption&gt; &lt;/figcaption&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {” hash&#39;：“ 6f4b46cd-c162-4744-97d7-3f17cb9c41c7”，“ dropcap”，“ dropcap”&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coraph”“ data-wp-block =” {“ hash”：“ 7e4f3a4c-eb4c-eb4c-eb4c-4057-98bb-2f77756f07c96”，“ dropcap”：dropcap“：false}”用户。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class =“ wp-block-image”&gt;&#xA;&lt;&lt;图data-wp-block-name =“ core/image” data-wp-block =“ {“ id”：1099419，“ sizeSlug”：“ full”，“ linkdestination”：“ none”，“ align”，“中心”，“ hash”，“ hash”：f755ca99a-2d3b-4a3eb-bbbb11-bbbb11-bb11-539 eatte class =“ AlignCenter size-full”&gt; &lt;img loading =“ lazy” dododing =“ async” width =“ 737” height =“ 249” src =“ https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80，quality=80，onerror = redirect，format = auto/wp-content/uploads/2024/2024/11/11/figure17-17-17-173095273737378888888888888888888888888888888888888888888882.PNGNG” class =“ wp-image-1099419” srcset =“ https://blog.uber-cdn.com/cdn-cgi/image/width=737,quality=80，quality=80，onerrt = redirt = redirt = redirct，format = auto atect， 737W，https：//blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80，onerror = redirt = redirct，format = auto/wp-content/uploads/2024/2024/11/11/figure17-17-17-17-1730952748888882.pnips = 300：s = 300： 737px）100VW，737px“ referrerpolicy =“ no-referrer”&gt; &lt;figcaption class =“ wp- element-caption”&gt;图17：比较‌ express和非express Queries的p90运行时。&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落“ data-wp-block =” {“ hash”：“ ACE869BC-C889-43D0-AAEEF-BDDBEDBEEF0F7C6”，“ dropcap”，“ dropcap”：false}&#39;&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name =“ core/saparator“ data-wp-block =” {“ hash”：“ 0626068b-e055-45c1-9294-c1bcda29a592”，“ obcity”：“ alpha-channel”}“ alpha-channel”} class class =“ wp-block-separator =“&#xA;&#xA;&#xA;&#xA;&lt;h2 data data-wp-block-name =“ core/heading” data-wp-block =“ {” hash&#39;：“ 907e8a8b-e7e4-4bc8-8272-33c015204a31”，“ calle&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 33C06A69-2FF8-480E-A2B9-DEFC925F6AF5”，“ dropcap”，“ dropcap”：false}“：false}”&gt;对于下一步，我们想查看分离明确的集群组。在我们当前的实施中，快递簇是主要集群组的子组，例如批处理低层，批处理高层和交互式。这个想法是每个集群组都有自己的快速群集。但是，根据我们在生产方面的经验，‌Express可以是一个单独的集群组，而不是作为亚组。因此，无论查询是批量高层，低层还是交互式查询，都应将快速查询发送到此集群组。原因是：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;521b9e82-a6a7-4c3b-8a14-4887ecde79be&#34;,&#34;ordered&#34;:false,&#34;values&#34;:&#34;&#34;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;当前的快递簇似乎具有较低的利用率，并且可以运行更多的查询。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt;简化的路由逻辑。我们可以确定查询在查询提交时间上表达并将其路由到此集群组。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name =“ core/list-item” data-wp-block =“ []”&gt; Express系统给出的SLA足够低，以至于我们不需要区分批处理和交互式查询。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ F339DA68-8805-4E0E-8386-07986-0798070F209F”，“ dropcap”&gt;到目前到一个单独的群集组。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ hash”：“ 485BC75D-25B2-25B2-42B8-9EC0-38FBFEBD549B”，“ dropcap”，“ dropcap”：false}“：false}”&gt;我们正在探索的另一个领域是我们正在探索的另一个领域。历史数据一直是我们预测查询是否符合明确查询的主要工具。拥有历史数据可能是交互式工作负载的挑战。为了解决这个问题，我们可以利用机器学习模型来确定是否应将传入查询归类为明确的查询。通过集成高级算法，我们可以准确评估新查询的性质，确保更精确和及时的分类，即使是我们系统中以前看不见的查询。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name =“ core/saparator” data-wp-block =“ {” {“ hash”：“ 6c4a2ec0-107e-4acc-90ED-4FA63CA40F51”，“不透明度”：“ alpha-channel” class =“ class =” wp-block-separator-separator-separator-alpha-alpha-alpha-channel-channel-channel-channel-channel-channel-opacity&#39;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h1 data-wp-block-name =“ core/heading” data-wp-block =“ {”级别“：1，”哈希：“ B9CCFF27-56A3-49FD-93C8-34FF75280F3E”}&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;fdfd207e-f816-48ba-8746-e0a2bbd337ec&#34;,&#34;dropCap&#34;:false}&#34;&gt;This blog explored the design and implementation of Uber’s Presto express, aimed at reducing the end-to-end SLA for short-running queries.我们讨论了如何定义明确的查询，它们如何集成到整体生​​态系统中以及我们遇到的挑战。此外，我们强调了通过我们的部署实现的性能增长，Presto Express在端到端SLA方面提供了超过75％的计划查询的质量提高。&lt;/p&gt;。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/段落” data-wp-block =“ {“ fontsize”：“ small”，“ hash”：“ E5F6E121-EAE9-4740-A6D8-67A6D8-67A6D55B36F5F”，“ class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Apache&lt;sup&gt;®&lt;/sup&gt;, Apache Kafka&lt;sup&gt;®&lt;/sup&gt;, Apache Hive&lt;sup&gt;™&lt;/sup&gt;, and Apache Pinot&lt;sup&gt;™ &lt;/sup&gt;are either registered trademarks or trademarks of the Apache Software Foundation in the United States and/or other countries.使用这些标记，Apache软件基金会没有任何认可。&lt;/em&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/encor” data-wp-block =“ {” fontsize“：” small“”，“ hash”：“ C01F2C0C-F857-45B1-B1-B6C0-3C744EA63334EA63341”，“ dropcap”，“ dropcap”：fals}“ NetSuite是Oracle和/或其分支机构的注册商标。 &lt;/em&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name =“ core/coragraph” data-wp-block =“ {” fontsize“：“ Small”，“ Hash”：“ 9149A51F-6AD7-4A68-4A68-8C7B-F4F4FB23D4B282”，“ LF Projects，LLC。&lt;/em&gt; &lt;br&gt; &lt;br&gt;“ &lt;a href =” https://www.flickr.com/photos/95482862@n00/3889341309“ target =” _ black =“ _ vrams” href =“ https://www.flickr.com/photos/95482862@n00” target =“ _ blank” rel =“ noreferrer noopener”&gt; oran viriyincy &lt;/a&gt;在&lt;a href =“ target =“ _ blank” rel =“ noreferrer noopener”&gt; cc by 2.0 &lt;/a&gt;。&lt;/p&gt;</description>
      <pubDate>Thu, 07 Nov 2024 06:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>