<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Uber Engineering Blog</title>
    <link>http://rsshub.rssforever.com/uber/blog</link>
    <description>The technology behind Uber Engineering - Powered by RSSHub</description>
    <managingEditor>contact@rsshub.app (RSSHub)</managingEditor>
    <item>
      <title>【Unified Checkout: Streamlining Uber’s Payment Ecosystem】统一结账：简化 Uber 的支付生态系统</title>
      <link>https://www.uber.com/blog/unified-checkout/</link>
      <description>【&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:1,&amp;quot;hash&amp;quot;:&amp;quot;7136f2d5-0242-41b5-9146-965a2657f0ac&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0a33db00-7c46-4bc3-9f03-1fd88a301f06&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Uber started as a ridesharing company with a simple yet ambitious mission: make transportation as reliable as running water, everywhere, for everyone.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;8339e8e9-b7ab-46eb-89e7-53ff0f8811ce&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;When the company focused on ridesharing, most back-end systems were built around a trip, a rider, and a driver. Since it was the only LOB (line of business) at the time, any payment-specific operations were implemented directly into the ridesharing system. For example, supporting Apple Pay&lt;sup&gt;®&lt;/sup&gt; was implemented on the Rides back end.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;766df407-ddf0-44f4-a9ae-30bcf4479602&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;When Uber grew as a company, so did the number and complexity of LOBs. Uber started offering food and grocery delivery, bike and scooter rentals, public transportation tickets, and car rentals. Each LOB built their own system on the back end where their business logic lived. Still, they all needed payments and risk support, and that required specific operations like 2FA and fingerprinting. Implementing payment business logic became expensive because any change had to be made many times across services. This harmed ‌velocity and feature parity, and increased the complexity, cost, and risk of maintaining services.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;1786d6d3-6cfe-4841-97b1-0fd115c1aca0&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Payment methods weren’t uniformly supported across user flows and LOBs. For example, Apple Pay wasn’t supported in every user flow or LOB at Uber. You could use it to pay for an on-demand ride, but you couldn’t use it to pay for a scheduled ride until very recently. Other payment methods like Google Pay&lt;sup&gt;™&lt;/sup&gt;&lt;strong&gt; &lt;/strong&gt;and direct bank transfers were in the same situation. That was because a different service handled scheduling rides, and it followed a different model of securing funds before fulfillment. Upfront charge payment methods and ones that required any form of 2FA to initialize or finalize a payment weren’t supported by some LOBs or flows, like scheduling a trip, switching the payment profile for an ongoing trip, or even changing the payment method&amp;nbsp; after the completion. This was especially important for popular payment methods in markets like PIX in Brazil and UPI in India.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;646721ae-f279-4e2e-8ac9-dcca5dab8fe6&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;After years of having to implement payment methods individually and once per LOB, we were determined to find a better solution for the next compliance requirement where we’d need to repeat the same change multiple times across back-end services. The trigger point to fund a team and solve this problem was Strong Customer Authentication, which was a mandate initially rolled out in the European Union. It dictated that any transaction with a European credit card that was higher than a certain threshold would be subject to a multi-factor authentication process using 3-D Secure to confirm the shopper’s identity. The protocol involved fingerprinting the shopper’s device and had a chance to throw a challenge for the shopper to complete, like a biometric challenge or a one-time password.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;14ae3cf7-eca7-404d-8423-ca4d5800a8fd&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We had around 70 endpoints that might result in a financial transaction, all of which integrated directly with our risk and payment systems. This blog describes how we implemented these authentication methods and supported payment methods while dealing with this complexity.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e1ea7abc-6eba-4dd4-ae66-e342abac4991&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;357f8633-ce9e-4122-a464-bb54a638464f&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-unified-checkout&#34;&gt;Unified Checkout&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;33692168-6439-4e35-af22-9c64be2a76ed&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We built a checkout layer to allow LOBs access to the Uber payment ecosystem via one connection. This introduced a new layer in our systems to hold checkout business logic and act as an orchestrator. Any payment method support or need for a cross-LOB change can now be implemented once by a single team.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;04e0a1b0-8b55-425e-b90c-6b38489b4d59&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXf5Aw22eJyQTPnah17ZVYK3MEc3Avsu_-s4Ozq93O8uSVjomfyWP26LKhcL7BtiCRHyWUnxystQI_Mix2thIZtcFkjAuQo36nWAfPL--kCL8ftyjcoYYsen5zZKk7SSyxI3XTXic0S1wiUzFdH93gCCJQA?key=8HfQhqD5HD_dFi-j9eqKYw&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 1: Uber LoBs without and with Unified Checkout.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c3b541aa-e41b-4f5d-9216-8d601d034b29&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;96828353-5359-4329-a5d9-7072f81b81f7&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;All of the business logic to support payment methods and their specific operations moved to this new layer. If Unified Checkout supports a given payment method, all it takes to enable it on an LOB or flow is a few configuration changes.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;890710d7-77ae-481f-a5ae-a5b1a266f060&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;New payment methods are only supported fully in Unified Checkout, which serves as a moving force for adoption across the company and delivers value to ‌existing consumers. The strategy of the Unified Checkout platform was to treat each Uber LOB as an external company that we knew very little about, similar to existing checkout offerings in the market. By decoupling the system from the LOB’s product layer, we keep the platform agnostic of their inner workings and only aware of payment method specifics. This allows the platform to evolve faster and pushes the team to model all operations in a generic way while ensuring that people can pay with their preferred payment methods in any flow across all Uber LOBs.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c83ea450-b5f7-40c5-93e8-26d5cb86066b&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9af08c74-b847-4963-a432-b2f0e0223985&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-architecture&#34;&gt;Architecture&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;80479027-22d3-4f65-9d17-12a285734311&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Unified Checkout is available in a modular and hosted version with client components that are coupled with the checkout back-end service.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0edb52ae-0d84-4763-8aef-5b170af69b6f&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;It provides generic payment method support for global and local instruments, a risk system integration on the client side and on the back-end side for risk evaluation, and the execution of arbitrary flows through a generic actioning framework called Checkout Actions.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9d100c95-9ad9-4ecf-9eec-ea98f0c4ab89&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;A small set of microservices handle the checkout request and execute a set of operations:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;ordered&amp;quot;:true,&amp;quot;hash&amp;quot;:&amp;quot;75305263-b62f-4254-ae10-165c78580011&amp;quot;,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Prepares the payment profile &lt;/strong&gt;by exchanging transactional data captured on the client side with other payment systems. This can be passing a short-lived token all the way to the third-party processor, extracting authentication identifiers from the request, or initializing the request to generate a 2FA URL.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Invokes the risk system&lt;/strong&gt; &lt;strong&gt;to score the request and later secure the funds&lt;/strong&gt; on the person’s chosen payment profile either by placing an authorization hold on the funds so they can be captured when the order is completed or by charging the person upfront before the order is fulfilled, depending on the strategy decided by the risk system.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Generates Checkout Actions&lt;/strong&gt; to either guide the person through any necessary steps, or to display a failure message along with buttons that trigger corrective actions, like reauthenticating an account, editing the payment method details, or selecting another payment profile.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;If the risk system instructs Unified Checkout to initiate an upfront charge, it &lt;strong&gt;waits for the payment confirmation signal &lt;/strong&gt;emitted from the payments platform once we get a response from the third-party processor. This is a necessary complexity, as most processors are asynchronous. Once Unified Checkout consumes this event, it either confirms the order’s preparation or cancels it by emitting another event or calling an LOB service directly.&amp;nbsp;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;bec50a0e-7af0-4fec-a11c-57475b79a046&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXdyMsKQO_GI_QVbqkJan89j8BgOhLI1B_4xB9nTw7L7XE8uC3kuo_a4uY5FjYXM56RuRiLJXxkkTP-j-kO_f69zjkiiPg08FcGi_od_O5XfvQy5ZMDnvSzi93NXG5Nz8wpWGy8wkTqkRnPZRMALrDBiEjy2?key=8HfQhqD5HD_dFi-j9eqKYw&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 2: Unified Checkout architecture diagram.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;92338aff-0105-4208-8f97-fd758fb776ca&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;4502b8a4-8af5-4acb-8564-38fef5f705da&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-modular&#34;&gt;&lt;br&gt;Modular&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;b62e1373-8002-40a5-bd80-f952230322ac&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In the modular version, ‌clients can integrate the pre-built components on their own screens and checkout funnel and invoke them throughout the person’s journey of checking out.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;98330e4d-ef0e-4220-a8e6-64824302f069&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In this integration model, the LOB back end calls the checkout back end directly. Any Checkout Actions that need to be surfaced externally are then propagated through the response in an opaque manner and passed to the client checkout component. The payload is opaque to the LOB so that only the checkout back end and checkout client can process it. This was a deliberate design choice to prevent payment complexity from leaking to the LOB services and having those teams building features on top of the payload.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;87056699-cf4f-4874-bc3c-f1c22aeb6928&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXdBRUV1nRzBK01_R-PzIL5q-wCTK_y3IXLmGe0LSTjTX5Dk5Ovh7TiYmcN_ubkgQvbuJQGhiSQstEP5xvcrzxz8D831CBPBt-JrRpmhwGZA6LxRW7iBKrBS444ZS6HmG4Yw7NIVLzIEXw1gPqvU2bSS-TM?key=8HfQhqD5HD_dFi-j9eqKYw&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 3: Screen owned by Rides LOB.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0abe1c39-2029-42ec-97ef-dd146497c858&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;7bc83ca9-3780-480b-a604-b26d1a767c4b&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-hosted&#34;&gt;&lt;br&gt;Hosted&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a5008b0a-5f72-455d-8cc5-a12eaa95fb08&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We offer the hosted solution to new verticals or smaller LOBs so that they can use a complete payments and checkout solution out-of-the-box. This accelerates their time-to -market and experimentation while maintaining the same or very similar level of payment method support.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7c61055a-4899-4601-8110-baae00611680&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;With the hosted implementation, once the person is ready to check out, the checkout solution takes control over the application and displays a summary view of the order. On the same screen, the person can select their payment profile and place the order. Once the order is successfully prepared, a signal is sent to the client and to the back end, which will then dismiss the hosted checkout screens on the client side and give control back to the LOB.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6d89bc12-f4b8-4746-91bf-17865deb2e55&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In this model, all the communication once the hosted solution has been invoked happens between the checkout client and checkout back end. This means that the LOB back end doesn’t call the checkout back end.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;570021e8-f329-4001-b7e2-f42708ce21e1&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXeT3PjMLpMKQ1lANNNdpsukdoTnjQb6AdfOokRq-CJ8qYyFleWTanAE8vny-QFvtA4EHN350dfZfB-b7rzeen3vmnI_mNYPKFej-HA7MxaQAjFMhXaVV6dMap8LQ8jTiwoqoBXAg0lUeDcf06QOZzx2bl4?key=8HfQhqD5HD_dFi-j9eqKYw&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 4: Hosted checkout summary view.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a5c5ecbb-1318-4fef-bc41-ed4288ad6042&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2e8a462a-6a8a-4466-853d-47a392af2795&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ab7ab23e-ea83-4241-889e-03474e8f825b&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-checkout-actions&#34;&gt;Checkout Actions&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7375adc2-c256-48fb-9c8f-9b1b22bb2f95&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Checkout Actions is a stateless framework to execute arbitrary flows that are required for someone to convert successfully. These actions can be 2FA operations, clearing your arrears, executing an identity challenge, authorizing a payment operation, device fingerprinting, and more. The actions have to be generic enough that they can be applied across all LOBs. If there’s an action specific to a single business, like confirming your delivery address, then it shouldn’t be implemented as a Checkout Action. Checkout Actions may not require any interaction, and can be a data collection process or the initialization of a back-end process‌.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;16d696de-057d-4541-8218-174e9ec8d261&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The client side runs the Checkout Actions and generates the results payload. This payload is sent to the checkout back end on the subsequent checkout request and any state required is carried along with it. This request can either succeed or generate more Checkout Actions for the person to complete.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;c3841530-7454-4ad5-9db4-d640620a5df1&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXeT0ezeO78ft5Sq5bzdxJx-WZhO1_4o9s-ke-hKM6PaWnEs0B66Y3zzFoDUY3kNrOElJQ4P4iBYmJNpWh6rAPYFj3gC8gZcUIdyRtmS55ViSo0zZs_2EDvXHryHMW896ANvS17xJMFd7EczH2yrzzs8yLpW?key=8HfQhqD5HD_dFi-j9eqKYw&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 5: Checkout Actions sequence diagram.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d6118ee7-8694-4bed-a9d4-03f0058b2dab&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;ab10679a-d467-4934-a5b8-9d0773cb11c4&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-pre-checkout-actions&#34;&gt;&lt;br&gt;Pre-checkout Actions&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7b8c7c18-1e3f-4c30-abcf-f31e4f8bb0b3&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Pre-checkout actions are actions that must be executed on the client side before the first interaction with the back end for the checkout request. These are usually deterministic operations and can be generated by our back end in real time since their execution is already known to be a mandatory step. Someone checking out with Apple Pay will always need to pick a payment method in their Apple Wallet&lt;sup&gt;®&lt;/sup&gt;, for example.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;135b7a20-056d-4b8f-97de-5c9a899d4502&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXd9OOze2NKOcEK3sgHzRQBImA97YquUsygX6K7UK_ZFPcm1lvYOiNlYp3kPRPdgtKm4eSv5b2L-fgl-g9ff41bEKobXXTJ3zTvdh-fZLm-JgQEIu06kS8pEbSjdK6Tzm7LFLGzQfrpHDSbYaEzfQIIIrtpI?key=8HfQhqD5HD_dFi-j9eqKYw&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 6: Pre-checkout actions.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;bcf279bc-a07c-40e6-a00b-922cb243a553&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;8e4d5b83-837f-4f28-949f-34e74dd5d299&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-post-checkout-actions&#34;&gt;&lt;br&gt;Post-checkout Actions&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f7b54403-044e-47b7-a184-b8015a304d9b&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Post-checkout actions are generated after the first interaction with the checkout back end. These can be operations required to authorize or complete a payment transaction or they can be rejection actions, in case of insufficient balance, an error while placing an auth-hold, or even a rejection by Uber risk systems or someone’s bank. Every checkout action generated by the system offers a corrective action, even if it’s as simple as allowing someone to select another payment profile and try again. There are also more complex recovery flows like confirming your identity, connecting a social media account to your Uber account, or going through an identity challenge.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;1d076ebe-e466-4b1a-b4ab-3ed3e5774399&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXfj8PYdPAUpYiAexDrve9JBOyT3eoM9pwsk9nmGlvYuu29YMDkDkvm0Sw40NcydRs1mkla_ZyG3_lSDrIJ4b8r1D7Vvb_EHPURc0FCn_eDu4Tj5wgJlfxcV4d4VNbNRe8F8PmdIUmxz0LWezZ36J0YaPKN_?key=8HfQhqD5HD_dFi-j9eqKYw&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 7: Post-checkout actions.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;93a2729f-2f1d-4080-9720-87d4cbe0fe23&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;dbd7b493-6bb3-4df4-bb97-9576d62afc7d&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;33b1960e-6e5e-4d19-b82f-fea19d6e53ac&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-impact&#34;&gt;Impact&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a229624d-db07-4b05-9ab9-3eabd3744c9f&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Every launch of Unified Checkout goes through an experiment to measure its impact on metrics like checkout request conversion, session conversion, session recovery, and number of orders completed. After launching the most frequently used payment methods globally on Uber Eats, we performed a holdout experiment where a percentage of the participants didn’t get their requests routed to the Unified Checkout system and stayed in the legacy experience where their system connected directly to risk and payments. As a result, we observed that the Unified Checkout experience had a &lt;em&gt;3% higher checkout conversion rate&lt;/em&gt; and a &lt;em&gt;4.5% higher session recovery rate&lt;/em&gt; when compared to the legacy experience. This means that people saw fewer errors when checking out. Those that saw errors could recover from them and convert more often.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c3904e65-0520-4356-8870-5a8cfd117d48&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Even though this holdout experiment was only executed on one LOB, we extrapolated the impact to the entire order placement traffic and calculated an estimated impact of incremental gross bookings in the order of hundreds of millions of dollars annually.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2d51d43d-a896-4bdc-90a4-d5c80cd6e35e&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Other than the lift in the metrics, every flow now supports at least the top 5 most-used payment methods globally. The biggest LOBs also support popular local payment methods, unlocking more availability. The lack of support for a specific payment method is now a strategic decision rather than a technical limitation, cost barrier, or complexity of implementation.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;8010fab0-ac04-4a00-b2cd-ff5394bcceaa&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:1,&amp;quot;hash&amp;quot;:&amp;quot;eed3585c-cf4b-4d37-8a43-22bc7adaf3fa&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-conclusion&#34;&gt;Conclusion&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;b05f85a9-306b-45a7-9d98-2b1ed8abe0be&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Following the strategy of treating Uber LOBs as external customers, the Checkout Platform team experiments with new experiences and features to identify opportunities to increase conversion metrics and decrease drop off. This includes new types of Checkout Actions, new error messaging models, more granularity with error messages, optimizing existing operations, new modalities for Memberships, scheduled orders, clientless flows, split tender, and more.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d430a191-5999-4f36-b913-8e161355d532&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;It’s natural for software solutions to have an inflection point in which common or duplicated operations must be transformed into platforms or redesigned in a more generic way so that it can be applied a number of times with minimum maintenance cost. You could call this the moment in which you are paying tech debt incurred due to the hyper-growth of the company.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;1344ee70-b4cc-411b-a8ab-cc587130889f&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;At Uber scale, having a system that handles the entire order placement traffic from all mobile and web applications means that we can impact and improve the user experience from all of our users placing orders at once with a single change or deployment. Optimizing a checkout flow can have a significant impact on key business indicators, such as gross bookings.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7ac719f3-ec72-4532-8a46-2b21e360c51f&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;It’s our job as Software Engineers to identify opportunities as such and to design solutions that address those opportunities in a way that’s beneficial to both users and the business, even if that means starting from a bottoms-up project and pushing for it until it eventually becomes a product.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;f517b7b6-9daa-4061-a46f-0b9eddfde2a8&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;Google Pay&lt;sup&gt;™&lt;/sup&gt; is a trademark of Google LLC.&lt;/p&gt;】&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:1,&#34;hash&#34;:&#34;7136f2d5-0242-41b5-9146-965a2657f0ac&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-introduction&#34;&gt;简介&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;0a33db00-7c46-4bc3-9f03-1fd88a301f06&#34;,&#34;dropCap&#34;:false}&#34;&gt;Uber 起步于一家乘车共享公司，其使命简单而雄心勃勃：让交通像流水一样可靠，无处不在，为每个人服务。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;8339e8e9-b7ab-46eb-89e7-53ff0f8811ce&#34;,&#34;dropCap&#34;:false}&#34;&gt;当公司专注于拼车，大多数后端系统都是围绕一次旅行、乘客和司机构建的。由于它是当时唯一的 LOB（业务线），因此任何特定于支付的操作都直接在拼车系统中实施。例如，在 Rides 后端实现了对 Apple Pay&lt;sup&gt;®&lt;/sup&gt; 的支持。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;766df407-ddf0-44f4-a9ae-30bcf4479602&#34;,&#34;dropCap&#34;:false}&#34;&gt;当 Uber 成长时作为一家公司，LOB 的数量和复杂性也随之增加。优步开始提供食品和杂货配送、自行车和摩托车租赁、公共交通票务和汽车租赁服务。每个 LOB 在其业务逻辑所在的后端构建了自己的系统。尽管如此，他们都需要付款和风险支持，这需要 2FA 和指纹识别等特定操作。实施支付业务逻辑变得昂贵，因为任何更改都必须跨服务进行多次。这损害了速度和功能对等性，并增加了维护服务的复杂性、成本和风险。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;1786d6d3-6cfe-4841-97b1-0fd115c1aca0&#34;,&#34;dropCap&#34;:false}&#34;&gt;付款方式不跨用户流和 LOB 统一支持。例如，Uber 的所有用户流程或 LOB 均不支持 Apple Pay。您可以用它来支付按需乘车费用，但直到最近您才能用它来支付预定乘车费用。 Google Pay&lt;sup&gt;™&lt;/sup&gt;&lt;strong&gt; &lt;/strong&gt;和直接银行转帐等其他付款方式也面临同样的情况。这是因为不同的服务负责安排乘车，并且它遵循不同的在履行之前确保资金的模式。某些 LOB 或流程不支持预付费用付款方式以及需要任何形式的 2FA 来初始化或完成付款的付款方式，例如安排行程、切换正在进行的行程的付款资料，甚至在行程结束后更改付款方式。完成。这对于巴西 PIX 和印度 UPI 等市场流行的支付方式尤其重要。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;646721ae-f279-4e2e-8ac9-dcca5dab8fe6&#34;,&#34;dropCap&#34;:false}&#34;&gt;多年来，我们必须单独实现每个 LOB 一次的付款方式，我们决心为下一个合规性要求找到更好的解决方案，因为我们需要在后端多次重复相同的更改服务。资助团队并解决这个问题的触发点是强客户认证，这是欧盟最初推出的一项强制要求。它规定，任何高于特定阈值的欧洲信用卡交易都将受到使用 3-D Secure 的多因素身份验证流程的影响，以确认购物者的身份。该协议涉及对购物者的设备进行指纹识别，并有机会向购物者提出一个需要完成的挑战，例如生物识别挑战或一次性密码。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;14ae3cf7-eca7-404d-8423-ca4d5800a8fd&#34;,&#34;dropCap&#34;:false}&#34;&gt;我们有70 个可能导致金融交易的端点，所有这些端点都直接与我们的风险和支付系统集成。本博客介绍了我们如何在处理这种复杂性的同时实现这些身份验证方法和支持的支付方法。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;e1ea7abc-6eba-4dd4-ae66-e342abac4991&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;357f8633-ce9e-4122-a464-bb54a638464f&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-unified-checkout&#34;&gt;统一结帐&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;33692168-6439-4e35-af22-9c64be2a76ed&#34;,&#34;dropCap&#34;:false}&#34;&gt;我们构建了一个结账层允许 LOB 通过一个连接访问 Uber 支付生态系统。这在我们的系统中引入了一个新层来保存结帐业务逻辑并充当协调器。现在，任何支付方式支持或跨 LOB 更改的需求都可以由一个团队一次性实施。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;04e0a1b0-8b55-425e-b90c-6b38489b4d59&#34;,&#34;alt&#34; :&#34;&#34;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img 解码=&#34;async&#34; src =“https://lh7-rt.googleusercontent.com/docsz/AD_4nXf5Aw22eJyQTPnah17ZVYK3MEc3Avsu_-s4Ozq93O8uSVjomfyWP26LKhcL7BtiC RHyWUnxystQI_Mix2thIZtcFkjAuQo36nWAfPL--kCL8ftyjcoYYsen5zZKk7SSyxI3XTXic0S1wiUzFdH93gCCJQA?key=8HfQhqD5HD_dFi-j9eqKYw&#34; alt=&#34;&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 1：不带和带统一结帐的 Uber LoB。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;c3b541aa-e41b-4f5d-9216-8d601d034b29&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p 数据-wp-块-名称=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;96828353-5359-4329-a5d9-7072f81b81f7&#34;,&#34;dropCap&#34;:false}&#34;&gt;支持支付方式及其具体操作的所有业务逻辑移动到这个新层。如果 Unified Checkout 支持给定的付款方式，则只需进行一些配置更改即可在 LOB 或流程上启用它。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;890710d7-77ae-481f-a5ae-a5b1a266f060&#34;,&#34;dropCap&#34;:false}&#34;&gt;新付款方式仅在 Unified Checkout 中得到全面支持，它是整个公司采用的推动力，并为现有消费者提供价值。统一结帐平台的策略是将每个 Uber LOB 视为我们知之甚少的外部公司，类似于市场上现有的结帐产品。通过将系统与 LOB 的产品层解耦，我们使平台不了解其内部运作，只了解支付方式的具体情况。这使得平台能够更快地发展，并推动团队以通用方式对所有操作进行建模，同时确保人们可以在所有 Uber LOB 的任何流程中使用他们喜欢的支付方式进行支付。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;c83ea450-b5f7-40c5-93e8-26d5cb86066b&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;9af08c74-b847-4963-a432-b2f0e0223985&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-architecture&#34;&gt;架构&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;80479027-22d3-4f65-9d17-12a285734311&#34;,&#34;dropCap&#34;:false}&#34;&gt;统一结账提供模块化和托管版本，其中包含与结帐后端服务耦合的客户端组件。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;0edb52ae-0d84-4763-8aef-5b170af69b6f&#34;,&#34;dropCap&#34;:false}&#34;&gt;它提供通用对全球和本地工具的支付方式支持、客户端和后端的风险系统集成以进行风险评估，以及通过称为结帐操作。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;9d100c95-9ad9-4ecf-9eec-ea98f0c4ab89&#34;,&#34;dropCap&#34;:false}&#34;&gt;一小部分的微服务处理结帐请求并执行一组操作：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&#34;ordered&#34;:true,&#34;hash&#34;:&#34;75305263-b62f-4254-ae10-165c78580011&#34;,&#34;values&#34;:&#34; “}”类=“wp-block-list”&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;通过交换捕获的交易数据来准备付款资料&lt;/strong&gt;客户端与其他支付系统。这可以将短期令牌一直传递给第三方处理器，从请求中提取身份验证标识符，或者初始化请求以生成 2FA URL。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;调用风险系统&lt;/strong&gt; &lt;strong&gt;对请求进行评分并随后确保安全根据风险决定的策略，可以通过对资金进行授权保留，以便在订单完成时获取资金，或者在订单履行之前向该人员收取预付款，从而在该人选择的付款资料中获取资金&lt;/strong&gt;系统。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;生成结帐操作&lt;/strong&gt;以指导用户完成任何必要的步骤，或者显示失败消息以及触发纠正操作的按钮，例如重新验证帐户、编辑付款方式详细信息或选择其他付款资料。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;如果风险系统指示 Unified Checkout 启动预付费用，它&lt;strong&gt;会等待付款确认一旦我们收到第三方处理器的响应，支付平台就会发出信号。这是必要的复杂性，因为大多数处理器都是异步的。一旦 Unified Checkout 使用此事件，它就会确认订单的准备情况，或者通过发出另一个事件或直接调用 LOB 服务来取消订单。 &lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;bec50a0e-7af0-4fec-a11c-57475b79a046&#34;,&#34;alt&#34; :&#34;&#34;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img 解码=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXdyMsKQO_GI_QVbqkJan89j8BgOhLI1B_4xB9nTw7L7XE8uC3kuo_a4uY5FjYXM56 RuRiLJXxkkTP-j-kO_f69zjkiiPg08FcGi_od_O5XfvQy5ZMDnvSzi93NXG5Nz8wpWGy8wkTqkRnPZRMALrDBiEjy2?key=8HfQhqD5HD_dFi-j9eqKYw&#34; alt=&#34;&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 2：统一结账架构图。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;92338aff-0105-4208-8f97-fd758fb776ca&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;4502b8a4-8af5-4acb-8564-38fef5f705da&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-modular&#34;&gt;&lt;br&gt;模块化&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;b62e1373-8002-40a5-bd80-f952230322ac&#34;,&#34;dropCap&#34;:false}&#34;&gt;在模块化中版本中，客户可以将预构建的组件集成到自己的屏幕和结账渠道上，并在结账过程中调用它们。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;核心/段落&#34; data-wp-block=&#34;{&#34;哈希&#34;:&#34;98330e4d-ef0e-4220-a8e6-64824302f069&#34;,&#34;dropCap&#34;:false}&#34;&gt;在此集成模型中，LOB 后端直接调用结帐后端。任何需要向外部呈现的结帐操作都会通过以不透明的方式响应并传递给客户端结帐组件 有效负载对于 LOB 是不透明的，因此只有结帐后端。结帐客户端可以对其进行处理，这是一个经过深思熟虑的设计选择，旨在防止支付复杂性泄露给 LOB 服务并让这些团队在有效负载之上构建功能。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;87056699-cf4f-4874-bc3c-f1c22aeb6928&#34;,&#34;alt&#34; :&#34;&#34;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img 解码=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXdBRUV1nRzBK01_R-PzIL5q-wCTK_y3IXLmGe0LSTjTX5Dk5Ovh7TiYmcN_ubkgQ vbuJQGhiSQstEP5xvcrzxz8D831CBPBt-JrRpmhwGZA6LxRW7iBKrBS444ZS6HmG4Yw7NIVLzIEXw1gPqvU2bSS-TM?key=8HfQhqD5HD_dFi-j9eqKYw&#34; alt=&#34;&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 3：Rides LOB 拥有的屏幕。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;0abe1c39-2029-42ec-97ef-dd146497c858&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;7bc83ca9-3780-480b-a604-b26d1a767c4b&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-hosted&#34;&gt;&lt;br&gt;托管&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;a5008b0a-5f72-455d-8cc5-a12eaa95fb08&#34;,&#34;dropCap&#34;:false}&#34;&gt;我们提供为新的垂直行业或较小的 LOB 提供托管解决方案，以便他们可以使用完整的开箱即用的支付和结账解决方案。这加快了他们的上市时间和实验速度，同时保持相同或非常相似的支付方式支持水平。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;7c61055a-4899-4601-8110-baae00611680&#34;,&#34;dropCap&#34;:false}&#34;&gt;与托管一旦用户准备好结账，结账解决方案就会控制应用程序并显示订单的摘要视图。在同一屏幕上，该人可以选择他们的付款资料并下订单。成功准备订单后，系统会向客户端和后端发送信号，然后后端将关闭客户端托管的结账屏幕，并将控制权交还给 LOB。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;6d89bc12-f4b8-4746-91bf-17865deb2e55&#34;,&#34;dropCap&#34;:false}&#34;&gt;在此模型中，一旦调用托管解决方案，所有通信都发生在结账客户端和结账后端之间。这意味着 LOB 后端不会调用结帐后端。 &lt;/p&gt;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;570021e8-f329-4001-b7e2-f42708ce21e1&#34;,&#34;alt&#34; :&#34;&#34;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img 解码=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXeT3PjMLpMKQ1lANNNdpsukdoTnjQb6AdfOokRq-CJ8qYyFleWTanAE8vny-QFvt A4EHN350dfZfB-b7rzeen3vmnI_mNYPKFej-HA7MxaQAjFMhXaVV6dMap8LQ8jTiwoqoBXAg0lUeDcf06QOZzx2bl4?key=8HfQhqD5HD_dFi-j9eqKYw&#34; alt=&#34;&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 4：托管结账摘要视图。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;a5c5ecbb-1318-4fef-bc41-ed4288ad6042&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;2e8a462a-6a8a-4466-853d-47a392af2795&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;ab7ab23e-ea83-4241-889e-03474e8f825b&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-checkout-actions&#34;&gt;结账操作&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;7375adc2-c256-48fb-9c8f-9b1b22bb2f95&#34;,&#34;dropCap&#34;:false}&#34;&gt;结账操作是一个无状态框架，用于执行成功转换所需的任意流。这些操作可以是 2FA 操作、清除欠款、执行身份质询、授权支付操作、设备指纹识别等。这些操作必须足够通用，以便可以应用于所有 LOB。如果有特定于单个企业的操作（例如确认您的送货地址），则不应将其实施为结账操作。结帐操作可能不需要任何交互，可以是数据收集过程或后端过程的初始化。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;16d696de-057d-4541-8218-174e9ec8d261&#34;,&#34;dropCap&#34;:false}&#34;&gt;客户端运行结帐操作并生成结果有效负载。该有效负载将在后续结帐请求中发送到结帐后端，并随之携带所需的任何状态。此请求可能会成功，也可能会生成更多结帐操作供该人完成。 &lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;c3841530-7454-4ad5-9db4-d640620a5df1&#34;,&#34;alt&#34; :&#34;&#34;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img 解码=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXeT0ezeO78ft5Sq5bzdxJx-WZhO1_4o9s-ke-hKM6PaWnEs0B66Y3zzFoD UY3kNrOElJQ4P4iBYmJNpWh6rAPYFj3gC8gZcUIdyRtmS55ViSo0zZs_2EDvXHryHMW896ANvS17xJMFd7EczH2yrzzs8yLpW?key=8HfQhqD5HD_dFi-j9eqKYw&#34; alt=&#34;&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 5：签出操作序列图。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;d6118ee7-8694-4bed-a9d4-03f0058b2dab&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;ab10679a-d467-4934-a5b8-9d0773cb11c4&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-pre-checkout-actions&#34;&gt;&lt;br&gt;结账前操作&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;7b8c7c18-1e3f-4c30-abcf-f31e4f8bb0b3&#34;,&#34;dropCap&#34;:false}&#34;&gt;预结账actions 是在第一次与后端交互以进行结帐请求之前必须在客户端执行的操作。这些通常是确定性操作，可以由我们的后端实时生成，因为已知它们的执行是强制性步骤。例如，使用 Apple Pay 结帐的用户始终需要在 Apple Wallet&lt;sup&gt;®&lt;/sup&gt; 中选择付款方式。 &lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;135b7a20-056d-4b8f-97de-5c9a899d4502&#34;,&#34;alt&#34; :&#34;&#34;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img 解码=&#34;async&#34; src =“https://lh7-rt.googleusercontent.com/docsz/AD_4nXd9OOze2NKOcEK3sgHzRQBImA97YquUsygX6K7UK_ZFPcm1lvYOiNlYp3kPRPdgtK m4eSv5b2L-fgl-g9ff41bEKobXXTJ3zTvdh-fZLm-JgQEIu06kS8pEbSjdK6Tzm7LFLGzQfrpHDSbYaEzfQIIIrtpI?key=8HfQhqD5HD_dFi-j9eqKYw&#34; alt=&#34;&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 6：结帐前操作。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;bcf279bc-a07c-40e6-a00b-922cb243a553&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;8e4d5b83-837f-4f28-949f-34e74dd5d299&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-post-checkout-actions&#34;&gt;&lt;br&gt;结账后操作&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;f7b54403-044e-47b7-a184-b8015a304d9b&#34;,&#34;dropCap&#34;:false}&#34;&gt;结帐后操作是在与结账后端第一次交互后生成的。这些操作可以是授权或完成支付交易所需的操作，也可以是拒绝操作，以防余额不足、授权保留时出错，甚至被 Uber 风险系统或某人的银行拒绝。系统生成的每个结帐操作都会提供纠正操作，即使它就像允许某人选择另一个付款资料并重试一样简单。还有更复杂的恢复流程，例如确认您的身份、将社交媒体帐户连接到您的优步帐户或进行身份验证。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div cl屁股=“wp块图像”&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;1d076ebe-e466-4b1a-b4ab-3ed3e5774399&#34;,&#34;alt&#34; :&#34;&#34;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img 解码=&#34;async&#34; src =“https://lh7-rt.googleusercontent.com/docsz/AD_4nXfj8PYdPAUpYiAexDrve9JBOyT3eoM9pwsk9nmGlvYuu29YMDkDkvm0Sw40NcydRs 1mkla_ZyG3_lSDrIJ4b8r1D7Vvb_EHPURc0FCn_eDu4Tj5wgJlfxcV4d4VNbNRe8F8PmdIUmxz0LWezZ36J0YaPKN_?key=8HfQhqD5HD_dFi-j9eqKYw&#34; alt=&#34;&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 7：结帐后操作。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;93a2729f-2f1d-4080-9720-87d4cbe0fe23&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;dbd7b493-6bb3-4df4-bb97-9576d62afc7d&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;33b1960e-6e5e-4d19-b82f-fea19d6e53ac&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-impact&#34;&gt;影响&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;a229624d-db07-4b05-9ab9-3eabd3744c9f&#34;,&#34;dropCap&#34;:false}&#34;&gt;每次启动Unified Checkout 通过实验来衡量其对结帐请求转换、会话转换、会话恢复和已完成订单数量等指标的影响。在 Uber Eats 优食上推出全球最常用的支付方式后，我们进行了一项坚持实验，其中一定比例的参与者没有将他们的请求路由到统一结账系统，而是停留在传统体验中，他们的系统直接与风险和风险相关。付款。因此，我们观察到，与传统体验相比，统一结帐体验的结帐转化率提高了 3%，会话恢复率提高了 4.5%。这意味着人们在结账时看到的错误更少。那些看到错误的人可以从错误中恢复并更频繁地进行转换。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;c3904e65-0520-4356-8870-5a8cfd117d48&#34;,&#34;dropCap&#34;:false}&#34;&gt;即使这样坚持实验仅在一个 LOB 上执行，我们推断了对整个下单流量的影响，并计算了数百个增量总预订的估计影响每年数百万美元。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;2d51d43d-a896-4bdc-90a4-d5c80cd6e35e&#34;,&#34;dropCap&#34;:false}&#34;&gt;除了随着指标的提升，每个流程现在至少支持全球最常用的 5 种支付方式。最大的 LOB 还支持流行的本地支付方式，从而释放更多可用性。缺乏支持特定支付方式的 rt 现在是一项战略决策，而不是技术限制、成本障碍或实施复杂性。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;8010fab0-ac04-4a00-b2cd-ff5394bcceaa&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:1,&#34;hash&#34;:&#34;eed3585c-cf4b-4d37-8a43-22bc7adaf3fa&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-conclusion&#34;&gt;结论&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;b05f85a9-306b-45a7-9d98-2b1ed8abe0be&#34;,&#34;dropCap&#34;:false}&#34;&gt;遵循策略为了将 Uber LOB 视为外部客户，Checkout Platform 团队尝试了新的体验和功能，以确定提高转化指标和减少流失的机会。这包括新类型的结帐操作、新的错误消息传递模型、更精细的错误消息、优化现有操作、新的会员模式、预定订单、无客户端流程、拆分投标等等。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;d430a191-5999-4f36-b913-8e161355d532&#34;,&#34;dropCap&#34;:false}&#34;&gt;这很自然软件解决方案有一个拐点，其中常见或重复的操作必须转换为平台或以更通用的方式重新设计，以便可以应用以最低的维护成本进行多次。您可以将此称为您正在偿还因公司高速增长而产生的技术债务的时刻。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;1344ee70-b4cc-411b-a8ab-cc587130889f&#34;,&#34;dropCap&#34;:false}&#34;&gt;以 Uber 规模，拥有一个处理来自所有移动和 Web 应用程序的整个订单下达流量的系统意味着我们可以通过一次更改立即影响和改善所有下订单的用户的用户体验或部署。优化结帐流程可以对预订总额等关键业务指标产生重大影响。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;7ac719f3-ec72-4532-8a46-2b21e360c51f&#34;,&#34;dropCap&#34;:false}&#34;&gt;这是我们的工作作为软件工程师，要识别此类机会并设计解决方案，以对用户和业务都有利的方式抓住这些机会，即使这意味着从自下而上的项目并推动它，直到它最终成为一个产品。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;fontSize&#34;:&#34;小&#34;,&#34;hash&#34;:&#34;f517b7b6-9daa-4061-a46f-0b9eddfde2a8&#34;,&#34;dropCap&#34; :false}&#34; class=&#34;has-small-font-size&#34;&gt;Google Pay&lt;sup&gt;™&lt;/sup&gt; 是 Google LLC 的商标。&lt;/p&gt;</description>
      <pubDate>Thu, 14 Nov 2024 06:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Serving Millions of Apache Pinot™ Queries with Neutrino】使用 Neutrino 服务数百万个 Apache Pinot™ 查询</title>
      <link>https://www.uber.com/blog/serving-millions-of-apache-pinot-queries-with-neutrino/</link>
      <description>【&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:1,&amp;quot;hash&amp;quot;:&amp;quot;e881b093-d759-4d94-adcc-4bb52b2f698e&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a8cf8484-ba77-49bb-a4bd-e9a522de7491&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Apache Pinot&lt;sup&gt;™&lt;/sup&gt; is a real-time OLAP database capable of ingesting data from real-time streams and offline data sources. Uber has used Pinot for over 6 years, and in that time we’ve seen a rapid increase in its adoption. Today, Pinot handles a wide spectrum of use cases at Uber, from real-time use cases with over 1 million writes per second, 100 QPS, and less than 500 ms latency, to use cases that require &lt;a href=&#34;https://www.uber.com/blog/pinot-for-low-latency/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;low-latency analytics on offline data&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;574c79c2-fa29-4ada-a5d7-f36fc39696ab&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In this blog, we share how our platform users leverage Neutrino, an internal fork of Presto&lt;sup&gt;®&lt;/sup&gt;, to query their data in Pinot.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7df2c3b4-1232-43ae-916d-ed98e48976b5&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Throughout this blog, queries refer to read queries,&amp;nbsp; because in Pinot we usually refer to writes as ingestion.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;984756fb-93c5-4b61-ac93-9132a1b303e9&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a935428f-4b50-4447-ae82-5533a893bfd7&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-background&#34;&gt;Background&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;321b6370-0ced-4e5f-940d-62456902980b&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Pinot can be queried using SQL, but it has two query engines: the V1 Engine and the more recent Multistage Engine. As of this writing, Pinot’s V1 Engine is the default engine, and the Multistage Engine has to be explicitly configured for use.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;788922ee-a2ba-4433-96be-582e75fe248d&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Pinot’s V1 Engine can handle higher QPS at a much lower latency when compared with the Pinot Multistage Engine. The tradeoff is that ‌SQL features are quite limited with the V1 engine. Presto is a stateless query engine capable of reading from many different data sources via its connector architecture.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2342b5b8-f632-4031-9577-99e165003fc7&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;4c37084d-a105-4bdf-931c-3effd7ae1590&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-pinot-s-v1-query-engine&#34;&gt;Pinot’s V1 Query Engine&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9b0731fc-6cde-4cbf-86da-1969216c8d24&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Pinot’s V1 Engine is optimized for high QPS and low latency. The engine has a scatter-gather execution and it only supports queries with a single SELECT, WHERE, GROUP BY, and ORDER BY clause. In other words, it doesn’t support sub-queries, joins, or window functions. The engine has a custom planner that handles specific query shapes with custom operators. For example, a SELECT query without ORDER BY uses a &lt;em&gt;SelectionOnlyOperator&lt;/em&gt;, whereas one with an ORDER BY uses a &lt;em&gt;SelectionOrderByOperator&lt;/em&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7a41b408-6b11-485b-8bce-3ea4ae16d3d9&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Figure 1 shows a high-level design of Pinot query execution in the V1 query engine. Pinot brokers receive HTTP requests from clients, which are scattered to the servers that‌ ingest and store the data. The results are sent back to the broker, which performs a reduce before sending it back to the client.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1101585,&amp;quot;sizeSlug&amp;quot;:&amp;quot;full&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;72d8d018-2a08-4b21-8def-617c25155daf&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-full&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;647&#34; height=&#34;468&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/12/figure-1-17338905589143.png&#34; alt=&#34;&#34; class=&#34;wp-image-1101585&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=647,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/12/figure-1-17338905589143.png 647w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/12/figure-1-17338905589143.png 300w&#34; sizes=&#34;(max-width: 647px) 100vw, 647px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;&amp;nbsp;Figure 1: Pinot’s V1 Engine has a scatter-gather design.&amp;nbsp;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;67556974-bbb9-447d-b01b-207a2223851e&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;a51bf39d-6f9b-420f-8a22-f39cbf5a1f80&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-pinot-s-multistage-query-engine&#34;&gt;&lt;br&gt;Pinot’s Multistage Query Engine&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2229e477-8d52-4a5d-969b-68711d46a5a0&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Pinot’s Multistage Engine was made generally available in 2023 with Pinot 1.0, and it supports distributed joins, window functions, and sub-queries. It uses Apache Calcite™ to create a logical plan, which is then used to derive the physical plan. The plan may consist of multiple stages, and data transfer between each stage may incur a shuffle. The entirety of the plan, except for the penultimate stage or two, is run on the servers.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9a698396-827c-4aa2-9da9-887db83ac088&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Figure 2, taken from the Apache Pinot documentation, shows the execution model.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;993da0da-7494-494f-a5a9-e083d47a94d6&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXed8FO_EOgN3KY8oDIn8F1AIGd3K5c1i4uUXAPjIeYf879uQXrkb8tdbJO_qDtm0r0kvZCtC7uWtECR9Gl1Y7UBOpBC0GSsJqzOyHgg_wWZ1EQ09jgIQTpIrm0_xce86UYBLNC4deGLbX4hV_3e6VaB_RgI?key=IEbiY4aSF3msvi6T_qc0CA&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 2: Pinot’s multistage query execution model. Source: &lt;a href=&#34;https://docs.pinot.apache.org/reference/multi-stage-engine&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Apache Pinot Docs&lt;/a&gt;.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0511e894-8237-4907-b531-0faa6fdb60f2&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;8cade7c6-b4c5-46b8-9ca0-c5bdb963456f&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;When a Multistage Engine query is submitted to the brokers, the broker uses Calcite to create and optimize a logical plan, which is converted to a physical plan that’s dispatched to the servers for execution. The servers execute their assigned stages, shuffling data between them if required. The last stage in each server sends the data back to the broker, where a final reduce runs.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;a5b68727-4a74-4293-a17a-f662ca2d2c7e&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-presto&#34;&gt;&lt;br&gt;Presto&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ba193dc9-4b18-4948-85c6-870588bd785e&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Presto is a stateless query engine designed for interactive analytics use cases. It has its own SQL dialect called PrestoSQL. Presto’s connector architecture allows it to query any data source: be it a distributed storage system like object-stores/HDFS, where the table layout may be defined via something like the Apache Hive Metastore, or SQL databases like MySQL and Apache Pinot. Presto supports joins, sub-queries, and arbitrarily complex queries.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d2b60bb2-7cc3-4e4f-b450-0212dcd2bf19&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;A Presto deployment consists of a coordinator, which accepts the queries and returns the results, and many stateless workers which execute the query by running all the operators.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0022c2b1-f49b-45c9-b4fd-c3e35c6ee6fe&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Typically, a Presto cluster runs queries at less than 50 QPS, with latencies on the order of a few seconds to up to several minutes. Figure 3 shows Presto’s execution at a high level. Presto’s coordinator receives queries from clients via an HTTP request, compiles and plans the query, and dispatches the plan to the workers. The workers execute the query, exchanging data between them as required.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;6e45b682-36d6-432d-93b1-f64356261f2c&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXckm6y3eiKdVHgINX3RRMujp22vqoJAOKPXOk00gLC_uCiDk-RenlxNLoyi0ccjUn4cO8knPBiK1POwOhxtJVBNwppeTRr170vwJyEGnFj6p4Vs0XshvQlScO04-LO-TyuU5tCDaUU0NqXPhCbgRKJO7QQ?key=IEbiY4aSF3msvi6T_qc0CA&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 3: High-level execution of Presto.&lt;br&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9b0543e0-61df-4ce1-b865-00681d6e2db3&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;aa074041-9e5c-4457-8d7a-7ae23ca14ce5&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Presto allows connectors to alter the query plan and read and write to any data source. Connectors can implement the &lt;em&gt;ConnectorPageSourceProvider&lt;/em&gt;, which Presto calls in the table scan operator to read data. They can also implement the &lt;em&gt;ConnectorPageSinkProvider&lt;/em&gt; if they want to write the query output using a custom mechanism.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;dd88a3d4-f7b8-4b1e-bed2-f144b9f6f4ba&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;99eda46b-589c-477c-b1ce-838cfff281fc&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-leveraging-neutrino&#34;&gt;Leveraging Neutrino&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;62b947aa-e7f5-4d52-9387-48601b421a50&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Neutrino is an Uber-internal fork of Presto that’s capable of running queries at over 10,000 QPS with sub-second latencies. Neutrino currently proxies Pinot queries for roughly 95% of our use cases. But as the following sections show, it isn’t just a proxy, but also a query execution engine running logically on top of the Pinot V1 Engine.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;3e647a07-4c14-4e0c-aa8b-a99bc6dc5bd0&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-design&#34;&gt;Design&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;17016b3b-8c55-47bc-b42b-bd828c7c7411&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;With Neutrino, we’ve optimized Presto for high QPS and low latency. Neutrino runs the coordinator and the worker in a single JVM, and the HTTP calls between the worker and the coordinator are bypassed in favor of method calls. We achieved this by making internal changes that required tweaking Presto’s execution engine in several places.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;87f6ffb9-533c-43ac-aa66-344ed46c318a&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We also have an internal fork of the Presto-Pinot Connector Optimizer to support query pushdown. Presto SQL submitted by a user goes through the logical planner and a bunch of optimizers, which are common for all connectors. After all the common optimizers run, Presto runs the specific connector optimizer relevant to the query. In our case, our internal fork of the Presto-Pinot Connector Optimizer runs. At a high level, the optimizer tries to find the maximal sub-plan that can be pushed down to Pinot, and converts it into a table scan node with a generated Pinot query.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;3a8f8864-e7de-45fa-828f-807aa1b25c1a&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-multistage-execution-via-neutrino-and-the-pinot-v1-engine&#34;&gt;&lt;br&gt;Multistage Execution via Neutrino and the Pinot V1 Engine&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;292de9ee-e668-42b5-98ff-9d3199fa1cfb&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;To better understand the design described above, consider the Neutrino query in Figure 4, which tries to mimic an Uber-themed use case.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1101652,&amp;quot;width&amp;quot;:&amp;quot;354px&amp;quot;,&amp;quot;height&amp;quot;:&amp;quot;auto&amp;quot;,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;76fbe998-a93e-422e-bf96-f8748ecfea76&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large is-resized&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;1017&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/12/figure-4-17339483771858-1024x1017.png&#34; alt=&#34;&#34; class=&#34;wp-image-1101652&#34; style=&#34;width:354px;height:auto&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/12/figure-4-17339483771858.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/12/figure-4-17339483771858.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=150,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/12/figure-4-17339483771858.png 150w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/12/figure-4-17339483771858.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/12/figure-4-17339483771858.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=1572,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/12/figure-4-17339483771858.png 1572w&#34; sizes=&#34;(max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 4: Neutrino query leveraging window functions to deduplicate rows on (&lt;em&gt;trip_id, line_item&lt;/em&gt;) before performing an aggregation.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;fa4fd676-476c-4e76-9a97-91a23f90974c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f4a7b909-f276-42bc-9b55-8388c3ec22ed&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Here we’re trying to compute the total trip amount at the line-item level over a period of time. However, the original real-time stream may have multiple entries for the same line item and trip, as amounts can change later due to various reasons (like a rider adjusting the tip amount). We can’t use Pinot upserts because it would lead to too many primary keys.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;423083d9-89ce-46b7-b6f1-bb4c73fbcedc&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The query leverages window functions to keep the latest amount for each line item and is essentially deduping rows at query time, with the deduplication key being &lt;em&gt;trip_id, line_item&lt;/em&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6750474b-0284-4036-87b3-8a1519b0ed8a&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Figure 5 shows the query plan in Neutrino for this query. The table scan is executed by sending the SQL query to the Pinot broker.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1101647,&amp;quot;width&amp;quot;:&amp;quot;413px&amp;quot;,&amp;quot;height&amp;quot;:&amp;quot;auto&amp;quot;,&amp;quot;sizeSlug&amp;quot;:&amp;quot;full&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;4786f4eb-86d3-474e-b21b-42de415ff248&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-full is-resized&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;956&#34; height=&#34;856&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/12/figure-5-17339476173180.png&#34; alt=&#34;&#34; class=&#34;wp-image-1101647&#34; style=&#34;width:413px;height:auto&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=956,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/12/figure-5-17339476173180.png 956w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/12/figure-5-17339476173180.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/12/figure-5-17339476173180.png 768w&#34; sizes=&#34;(max-width: 956px) 100vw, 956px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 5: Query plan for the query in Figure 4.&amp;nbsp;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;1628c092-cf24-40c4-a40f-65ff3089712e&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f2e890ab-948a-47ad-aa04-c8ce51f30dc7&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Neutrino pushes down a SQL query to Pinot that Pinot’s V1 Engine can run, and executes the rest of the plan within itself using its own execution engine. This design achieves something remarkable:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f02c3b7b-c217-4a02-9eb6-43a71e03b040&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;We can support complex query shapes that couldn’t be supported with Pinot’s V1 Engine like window functions and sub-queries&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;We can run such queries at hundreds of QPS with very minimal hardware, without requiring any user hints for query optimization&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e65c12f4-e1ce-41a0-9072-2b7eb1f655d7&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;One may wonder why we don’t use the Pinot MSE for this, as the MSE can support arbitrarily complex queries. There are a few reasons for this:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ec1ceb3a-8ee8-4527-a05b-892b0006c121&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;MSE by default resorts to shuffles, which don’t scale well. Neutrino, on the other hand, executes the entire plan using a single thread.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Our internal testing suggests MSE can’t scale to 100 QPS. However, queries like the above may need to be run at over 500 QPS.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;MSE only became generally available recently, and queries such as the one above have been running reliably in Neutrino for years.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;233a9666-32e6-4d18-ac30-d01237c1382c&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-rate-limiting-at-the-routing-layer&#34;&gt;&lt;br&gt;Rate Limiting at the Routing Layer&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2ccfc265-75ac-48ae-9722-667d77beca96&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Our internal load balancing system, dubbed Muttley, provides a way to configure the QPS for each caller. If a caller exceeds their set QPS, then Muttley starts dropping requests before they reach the target service.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;03e6ad0c-e205-4dd6-b178-52b851418b57&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We use this extensively in Neutrino to shield it from QPS spikes from our over 100 unique callers.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;f7808e6a-e914-4ad7-8164-5864c927b269&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-query-fingerprinting-and-validation-framework&#34;&gt;&lt;br&gt;Query Fingerprinting and Validation Framework&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;807d7c14-5c1c-4c27-abdb-2c57e0e96e54&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We’ve added a simple mechanism to compute query fingerprints in Neutrino. Given Pinot is primarily used for powering end-user-facing applications, most of our traffic is from back-end services, which have a predetermined query fingerprint. So, the number of unique query fingerprints is multiple orders of magnitude lower than the total QPS, and is also a very effective dimension for identifying expensive queries.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;fba15a22-4a7f-41ec-837f-6eb3e626a65e&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Furthermore, we use Flipr, Uber’s dynamic config store, to configure a deny list of fingerprints. This is quite useful to mitigate rare scenarios where one query may impact other callers.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;25931d23-94df-4da7-b159-366d9a79448f&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-dynamic-split-execution-timeouts&#34;&gt;&lt;br&gt;Dynamic Split Execution Timeouts&lt;/h3&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;width&amp;quot;:&amp;quot;568px&amp;quot;,&amp;quot;height&amp;quot;:&amp;quot;auto&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;176c1b20-4083-4a56-b3af-98972eeff07a&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter is-resized&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXcsWLieVMwU3pXSWyB1s5CbxVPXjEalGrcNsOXQbKoeTLRaIWE2BZk7e0ZJVODO1FARn8oed10f25gGx430A3yvd0kC-RKId_gEQg6Ehr6omR3Ognc7HV8NlrDlhXFaNgax2jo7F3pb1dex7JruH6a7ZnCS?key=IEbiY4aSF3msvi6T_qc0CA&#34; alt=&#34;&#34; style=&#34;width:568px;height:auto&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 6: Dynamic split execution timeout logic.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;67ceb3ca-6f6a-409b-8fe5-59a1d3450e8a&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;87119003-f841-46e0-985f-c91ca407bbe5&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Three years back, we had a couple of incidents due to one user overwhelming our Neutrino deployment, causing impact to other high-tier callers. The issue essentially was: if a given caller running at a sufficiently high QPS experiences high latencies, it leads to a pile-up of requests and threads in Neutrino. At the time, we wanted to keep the number of internal changes in our fork as low as possible, because we wanted to keep in sync with Presto’s main branch and move our fork ahead every few months.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9c00415d-fb25-47b1-bf1d-507dbb78edc9&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We wanted to solve this problem quickly and with minimal surgical intervention to Presto’s core code. To achieve this, we built a simple mechanism that dynamically adjusted Pinot’s query timeout in case of high load. Even to our surprise, this simple mechanism, combined with our routing-layer-based rate limits, has served us well over the past 3 years with no repeat of such incidents.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;04ba68ae-7f12-4d2e-8672-2c8c24dd7e5c&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-historical-context&#34;&gt;&lt;br&gt;Historical Context&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;dbfa61c3-9c6e-4297-860c-7b04034b546a&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;One may wonder why we didn’t directly expose PinotSQL to users and build a simple passthrough proxy. The reasons for going with the Neutrino approach are that at the time, Uber had two OLAP databases: AresDB and Pinot. Using Presto, we could hide the complexity of dealing with different query languages across these two stores. Beyond that, using Presto, we could enable multistage queries, which weren’t available in Pinot at the time (2019).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;7d958c3d-b6bc-4de2-b7cd-94f87707e079&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-challenges&#34;&gt;&lt;br&gt;Challenges&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;50454c5d-05b0-4c26-b1c4-186068573e00&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We have faced a few challenges working with Neutrino over the years.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c94e05e8-3684-4d1b-ba85-d9cb55d1eb90&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;First, Neutrino is a complex system for users. Neutrino, as part of its design, has to do SQL-to-SQL translation. Moreover, it can only partially push down the query plan to Pinot. Naturally, the response returned by Pinot has to be trimmed at a certain limit, and since we send a SQL query to Pinot, the limit has to be enforced using the LIMIT clause.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;fec4fbac-d74c-4677-a6d6-9ffe5b060933&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The pushed-down plan may not always have a limit, and Neutrino may need to put a default limit of its own in such cases (or fail the query). Putting a default limit of our own changes the semantics of the query and can lead to incorrect results, while failing the query will lead to a poor experience for users. This is also demonstrated in the example in Figure 5, where we add a default limit of 10,000.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c758f982-accc-4a9f-bcb0-e3b2583d1e38&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Additionally, a visual inspection of the query isn’t enough to determine how the pushed-down query looks, and changing a single UDF could lead to a complete change in the pushed-down query.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d0874aef-8420-4fb8-b524-d036343d3413&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The second challenge was a lack of join support. Neutrino doesn’t support joins, and can only support queries whose unoptimized plan-tree has no node with a greater than one child node.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7a58e363-10c1-443c-ac17-57055ac8b9d5&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The Multistage Engine in Pinot enables distributed join queries, but since Neutrino can only translate to Pinot V1 Engine queries, we’re unable to take advantage of the Multistage Engine with Neutrino. This also put us in a position where our current tech stack didn’t align with the next-generation query engine in Pinot.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c3254ed6-b57d-4b58-9b83-773a3f0457c9&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The third challenge was breaking tenant isolation. Neutrino proxies traffic from over 100 callers, many of which may be hitting their dedicated Pinot tenants. So, Neutrino ends up becoming a shared resource and breaks tenant-level isolation at the query level.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e8d63612-32b7-4491-b19e-07e39ea6c68d&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The last challenge was development overhead. We’ve spent significant effort over the last 2-3 years fixing a ton of query translation issues and improving support for query pushdown. However, Pinot continues to improve rapidly still, and catching up to the new SQL features in Pinot (even new Pinot UDFs) requires a corresponding change in Neutrino. This often becomes a bottleneck for users trying to leverage these new features.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;007f6534-c06a-4a7e-abbe-00e0eb8471a8&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-scale-and-impact&#34;&gt;&lt;br&gt;Scale and Impact&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;578fb714-b8fd-4bd1-a9db-c80f11e521a0&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Neutrino is a business-critical, tier-0 service at Uber, and serves more than half a billion Apache Pinot queries daily. Our estimates suggest that more than a third of those queries leverage Neutrino’s execution engine, i.e. they only partially push down the query and execute the rest of the plan within Neutrino.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;4981dd44-f59e-42c4-8a07-f0beca467845&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;With over 100 unique service callers querying over 1,000 tables, Neutrino and Apache Pinot easily serve 100 use cases across all our lines of business.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9928b44e-113a-4dc7-91ce-55477c4b699b&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0929bab1-5781-4d32-b5d9-1d16789b03f5&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-next-steps&#34;&gt;Next Steps&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2f8653dc-1fd4-4db2-8ce5-1558cf75035e&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Currently, we only serve a handful of use cases via the Pinot Multistage Engine at Uber. In a subsequent blog, we’ll share how we plan to adopt Pinot SQL at Uber more broadly, and how we plan to address the challenges with our Neutrino-based approach.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c3283466-39e2-455a-9628-5fac51fb3096&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:1,&amp;quot;hash&amp;quot;:&amp;quot;e38ad6d1-506c-4313-a62e-f8cbc023450c&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-conclusion&#34;&gt;Conclusion&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7bb07e93-6bab-4dfa-bee2-69ea1879722f&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Our experience at Uber of serving hundreds of low-latency analytics use cases has made it clear that OLAP systems should be able to support query features such as window functions and sub-queries. Apache Pinot didn’t have this support until 2023, and Neutrino has proven to be immensely useful in bridging that gap. Moreover, Neutrino’s approach of running the entire plan within a single process has proven to be scalable enough to handle 10,000 QPS reliably.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;79b746e5-e7fa-4e40-a20f-3dbf29a2ee50&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;Apache&lt;sup&gt;®&lt;/sup&gt;, Apache Pinot&lt;sup&gt;™&lt;/sup&gt;, Apache Hive&lt;sup&gt;™&lt;/sup&gt;, Apache Calcite&lt;sup&gt;™&lt;/sup&gt;, Pinot, and Hive are either registered trademarks or trademarks of the Apache Software Foundation in the United States and/or other countries. No endorsement by The Apache Software Foundation is implied by the use of these marks.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;00bf4a57-ab56-410e-9e0f-ac42bd409e36&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;Oracle, Java, MySQL are registered trademarks of Oracle and/or its affiliates. Other names may be trademarks of their respective owners.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;e7fd827a-9427-4a8c-8f62-afcbb7a39077&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Presto&lt;sup&gt;®&lt;/sup&gt; is a registered trademark of LF Projects, LLC.&lt;/em&gt;&lt;br&gt;Cover Photo Attribution: “&lt;a href=&#34;https://openverse.org/image/c8fc21ac-901a-4fe5-a3ea-96669610fecb&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Let Sparks Fly&lt;/a&gt;” by &lt;a href=&#34;https://openverse.org/image/collection?source=flickr&amp;amp;creator=mightyboybrian&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;mightyboybrian&lt;/a&gt; is licensed under &lt;a href=&#34;https://creativecommons.org/licenses/by-nc/2.0/?ref=openverse&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;CC BY-NC 2.0&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;e7fd827a-9427-4a8c-8f62-afcbb7a39077&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;Copyright Apache Pinot. Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements under the Apache License, Version 2.0.&lt;/p&gt;】&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:1,&#34;hash&#34;:&#34;e881b093-d759-4d94-adcc-4bb52b2f698e&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-introduction&#34;&gt;简介&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;a8cf8484-ba77-49bb-a4bd-e9a522de7491&#34;,&#34;dropCap&#34;:false}&#34;&gt;Apache Pinot&lt; support&gt;™&lt;/sup&gt; 是一个实时 OLAP 数据库，能够从实时流和离线数据源获取数据。 Uber 使用 Pinot 已经超过 6 年了，在此期间我们看到它的采用率迅速增加。如今，Pinot 处理 Uber 的各种用例，从每秒超过 100 万次写入、100 QPS 和小于 500 毫秒延迟的实时用例，到需要 &lt;a href=&#34;https:/ /www.uber.com/blog/pinot-for-low-latency/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;离线数据的低延迟分析&lt;/a&gt;。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;574c79c2-fa29-4ada-a5d7-f36fc39696ab&#34;,&#34;dropCap&#34;:false}&#34;&gt;在此博客中，我们分享了我们的平台用户如何利用 Neutrino（Presto&lt;sup&gt;®&lt;/sup&gt; 的内部分支）来查询 Pinot 中的数据。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;7df2c3b4-1232-43ae-916d-ed98e48976b5&#34;,&#34;dropCap&#34;:false}&#34;&gt;整个博客，查询指的是读取查询，因为在 Pinot 中我们通常将写入称为摄取。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;984756fb-93c5-4b61-ac93-9132a1b303e9&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;a935428f-4b50-4447-ae82-5533a893bfd7&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-background&#34;&gt;​​背景&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;321b6370-0ced-4e5f-940d-62456902980b&#34;,&#34;dropCap&#34;:false}&#34;&gt;黑皮诺可以是使用 SQL 进行查询，但它有两个查询引擎：V1 引擎和更新的多级引擎。截至撰写本文时，Pinot 的 V1 引擎是默认引擎，必须显式配置多级引擎才能使用。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;788922ee-a2ba-4433-96be-582e75fe248d&#34;,&#34;dropCap&#34;:false}&#34;&gt;Pinot 的 V1 引擎与 Pinot 多级引擎相比，可以以低得多的延迟处理更高的 QPS。代价是 V1 引擎的 SQL 功能非常有限。 Presto 是一个无状态查询引擎，能够通过其连接器架构从许多不同的数据源读取数据。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;2342b5b8-f632-4031-9577-99e165003fc7&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator”有-alpha-chan奈尔不透明度&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;4c37084d-a105-4bdf-931c-3effd7ae1590&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-pinot-s-v1-query-engine&#34;&gt;Pinot 的 V1 查询引擎&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;9b0731fc-6cde-4cbf-86da-1969216c8d24&#34;,&#34;dropCap&#34;:false}&#34;&gt;Pinot 的 V1 引擎针对高 QPS 和低延迟进行了优化。该引擎具有分散-聚集执行方式，并且仅支持具有单个 SELECT、WHERE、GROUP BY 和 ORDER BY 子句的查询。换句话说，它不支持子查询、连接或窗口函数。该引擎有一个自定义规划器，可以使用自定义运算符处理特定的查询形状。例如，不带 ORDER BY 的 SELECT 查询使用 &lt;em&gt;SelectionOnlyOperator&lt;/em&gt;，而带 ORDER BY 的 SELECT 查询则使用 &lt;em&gt;SelectionOrderByOperator&lt;/em&gt;。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;7a41b408-6b11-485b-8bce-3ea4ae16d3d9&#34;,&#34;dropCap&#34;:false}&#34;&gt;图 1 显示V1 查询引擎中 Pinot 查询执行的高级设计。 Pinot 代理接收来自客户端的 HTTP 请求，这些请求分散到摄取和存储数据的服务器。结果被发送回代理，代理在将其发送回客户端之前执行归约。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;id&#34;:1101585,&#34;sizeSlug&#34;:&#34;full&#34;,&#34;linkDestination&#34;:&#34;none&#34;,&#34;align&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;72d8d018-2a08-4b21-8def-617c25155daf&#34;,&#34;alt&#34;:&#34;&#34;}&#34; class =“aligncenter size-full”&gt;&lt;img加载=“lazy”解码=“异步”宽度=“647”高度=“468”src=“https://blog.uber-cdn.com/cdn-cgi/图像/宽度=2160，质量=80，onerror=重定向，格式=自动/wp-content/uploads/2024/12/figure-1-17338905589143.png&#34; alt=&#34;&#34; class=&#34;wp-image-1101585&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=647,quality=80,onerror=redirect,format=auto/ wp-content/uploads/2024/12/figure-1-17338905589143.png 647w， https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/12/figure-1-17338905589143。 png 300w”尺寸=“（最大宽度：647px）100vw，647px” referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt; 图 1：Pinot 的 V1 引擎采用分散-聚集设计。 &lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;67556974-bbb9-447d-b01b-207a2223851e&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;a51bf39d-6f9b-420f-8a22-f39cbf5a1f80&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-pinot-s-multistage-query-engine&#34;&gt;&lt;br&gt;Pinot 的多级查询引擎&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;2229e477-8d52-4a5d-969b-68711d46a5a0&#34;,&#34;dropCap&#34;:false}&#34;&gt;Pinot 的多级引擎于 2023 年随 Pinot 1.0 全面推出，它支持分布式联接、窗口函数和子查询。它使用 Apache Calcite™ 创建逻辑计划，然后使用该逻辑计划导出物理计划。该计划可能由多个阶段组成，每个阶段之间的数据传输可能会产生洗牌。除了倒数第二个或第二个阶段之外，整个计划都在服务器上运行。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;9a698396-827c-4aa2-9da9-887db83ac088&#34;,&#34;dropCap&#34;:false}&#34;&gt;图 2,取自 Apache Pinot 文档，显示了执行模型。 &lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;993da0da-7494-494f-a5a9-e083d47a94d6&#34;,&#34;alt&#34; :&#34;&#34;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img 解码=&#34;async&#34; src =“https://lh7-rt.googleusercontent.com/docsz/AD_4nXed8FO_EOgN3KY8oDIn8F1AIGd3K5c1i4uUXAPjIeYf879uQXrkb8tdbJO_qDtm0r 0kvZCtC7uWtECR9Gl1Y7UBOpBC0GSsJqzOyHgg_wWZ1EQ09jgIQTpIrm0_xce86UYBLNC4deGLbX4hV_3e6VaB_RgI?key=IEbiY4aSF3msvi6T_qc0CA” alt=&#34;&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 2：Pinot 的多阶段查询执行模型。资料来源：&lt;a href=&#34;https://docs.pinot.apache.org/reference/multi-stage-engine&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Apache Pinot 文档&lt;/a&gt;。&lt;/figcaption &gt;&lt;/图&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;0511e894-8237-4907-b531-0faa6fdb60f2&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;8cade7c6-b4c5-46b8-9ca0-c5bdb963456f&#34;,&#34;dropCap&#34;:false}&#34;&gt;当多级时引擎查询被提交给代理，代理使用 Calcite 创建和优化逻辑计划，该逻辑计划被转换为物理计划，并分派到服务器执行。服务器执行分配给它们的阶段，并根据需要在它们之间重新整理数据。每个服务器的最后一个阶段将数据发送回代理，并在代理中运行最终的reduce。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;a5b68727-4a74-4293-a17a-f662ca2d2c7e&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-presto&#34;&gt;&lt;br&gt;Presto&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;ba193dc9-4b18-4948-85c6-870588bd785e&#34;,&#34;dropCap&#34;:false}&#34;&gt;Presto 是一个专为交互式分析用例而设计的无状态查询引擎。它有自己的 SQL 方言，称为 PrestoSQL。 Presto 的连接器架构允许它查询任何数据源：无论是像对象存储/HDFS 这样的分布式存储系统，其中表布局可以通过 Apache Hive Metastore 之类的东西定义，或者是 MySQL 和 Apache Pinot 之类的 SQL 数据库。急速支持连接、子查询和任意复杂的查询。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;d2b60bb2-7cc3-4e4f-b450-0212dcd2bf19&#34;,&#34;dropCap&#34;:false}&#34;&gt;Presto 部署由一个协调器（接受查询并返回结果）和许多无状态工作人员（通过运行所有运算符来执行查询）组成。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;0022c2b1-f49b-45c9-b4fd-c3e35c6ee6fe&#34;,&#34;dropCap&#34;:false}&#34;&gt;通常， Presto 集群以低于 50 QPS 的速度运行查询，延迟约为几秒到几分钟。图 3 显示了 Presto 的高级执行情况。 Presto 的协调器通过 HTTP 请求接收来自客户端的查询，编译和计划查询，并将计划分发给工作人员。工作人员执行查询，根据需要在它们之间交换数据。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;6e45b682-36d6-432d-93b1-f64356261f2c&#34;,&#34;alt&#34; :&#34;&#34;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img 解码=&#34;async&#34; src =“https://lh7-rt.googleusercontent.com/docsz/AD_4nXckm6y3eiKdVHgINX3RRMujp22vqoJAOKPXOk00gLC_uCiDk-RenlxNLoyi0ccjU n4cO8knPBiK1POwOhxtJVBNwppeTRr170vwJyEGnFj6p4Vs0XshvQlScO04-LO-TyuU5tCDaUU0NqXPhCbgRKJO7QQ?key=IEbiY4aSF3msvi6T_qc0CA&#34; alt=&#34;&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 3：Presto 的高级执行。&lt;br&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;9b0543e0-61df-4ce1-b865-00681d6e2db3&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;aa074041-9e5c-4457-8d7a-7ae23ca14ce5&#34;,&#34;dropCap&#34;:false}&#34;&gt;Presto 允许连接器更改查询计划并对任何数据源进行读写。连接器可以实现&lt;em&gt;ConnectorPageSourceProvider&lt;/em&gt;，Presto 在表扫描运算符中调用它来读取数据。如果他们想使用自定义机制编写查询输出，他们还可以实现&lt;em&gt;ConnectorPageSinkProvider&lt;/em&gt;。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;dd88a3d4-f7b8-4b1e-bed2-f144b9f6f4ba&#34;,&#34;opacity&#34;:&#34;alpha 通道&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;99eda46b-589c-477c-b1ce-838cfff281fc&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-leveraging-neutrino&#34;&gt;利用中微子&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;62b947aa-e7f5-4d52-9387-48601b421a50&#34;,&#34;dropCap&#34;:false}&#34;&gt;中微子是一个Presto 的 Uber 内部分支，能够以亚秒级超过 10,000 QPS 的速度运行查询延迟。目前中微子代理 Pinot 查询大约 95% 的用例。但正如以下部分所示，它不仅仅是一个代理，而且还是逻辑上运行在 Pinot V1 引擎之上的查询执行引擎。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;3e647a07-4c14-4e0c-aa8b-a99bc6dc5bd0&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-design&#34;&gt;设计&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;17016b3b-8c55-47bc-b42b-bd828c7c7411&#34;,&#34;dropCap&#34;:false}&#34;&gt;使用中微子，我们对 Presto 进行了优化，以实现高 QPS 和低延迟。 Neutrino 在单个 JVM 中运行协调器和工作器，并且工作器和协调器之间的 HTTP 调用被绕过，转而采用方法调用。我们通过进行内部更改来实现这一目标，这些更改需要在多个位置调整 Presto 的执行引擎。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;87f6ffb9-533c-43ac-aa66-344ed46c318a&#34;,&#34;dropCap&#34;:false}&#34;&gt;我们还有Presto-Pinot 连接器优化器的内部分支，用于支持查询下推。用户提交的 Presto SQL 经过逻辑规划器和一堆优化器，这些对于所有连接器都是通用的。所有常见优化器运行后，Presto 运行与查询相关的特定连接器优化器。在我们的例子中，我们的 Presto-Pinot 连接器优化器的内部分支运行。在较高级别上，优化器尝试找到可以下推到 Pinot 的最大子计划，并将其转换为带有生成的 Pinot 查询的表扫描节点。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;3a8f8864-e7de-45fa-828f-807aa1b25c1a&#34;}&#34; class=&#34;wp -块标题” id=&#34;h-multistage-execution-via-neutrino-and-the-pinot-v1-engine&#34;&gt;&lt;br&gt;通过 Neutrino 和 Pinot V1 引擎进行多级执行&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;292de9ee-e668-42b5-98ff-9d3199fa1cfb&#34;,&#34;dropCap&#34;:false}&#34;&gt;为了更好地理解根据上述设计，请考虑图 4 中的 Neutrino 查询，它试图模仿 Uber 主题的用例。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;核心/图像&#34; data-wp-block=&#34;{&#34;id&#34;:1101652,&#34;宽度&#34;:&#34;354px&#34;,&#34;高度&#34;:&#34;自动&#34;,&#34;sizeSlug&#34;:&#34;大&#34;,&#34;linkDest信息&#34;:&#34;无&#34;,&#34;对齐&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;76fbe998-a93e-422e-bf96-f8748ecfea76&#34;,&#34;alt&#34;:&#34;&#34;}&#34;类=“aligncenter size-large is-resized”&gt;&lt;img加载=“惰性”解码=“异步”宽度=“1024”高度=“1017” src =“https://blog.uber-cdn.com/cdn-cgi/image/width=2160，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/12/figure-4 -17339483771858-1024x1017.png&#34; alt=&#34;&#34; class=&#34;wp-image-1101652&#34;样式 =“宽度：354px;高度：自动” srcset =“https://blog.uber-cdn.com/cdn-cgi/i法师/宽度=1024，质量=80，onerror=重定向，格式=自动/wp-content/uploads/2024/12/figure-4-17339483771858.png 1024w， https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/12/figure-4-17339483771858。 300w.png, https://blog.uber-cdn.com/cdn-cgi/image/width=150，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/12/figure-4-17339483771858。 150w.png, https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/12/figure-4-17339483771858。 PNG768w， https://blog.uber-cdn.com/cdn-cgi/image/width=1536，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/12/figure-4-17339483771858。 PNG1536w， https://blog.uber-cdn.com/cdn-cgi/image/width=1572，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/12/figure-4-17339483771858。 png 1572w”尺​​寸=“（最大宽度：1024px）100vw，1024px” referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 4：Neutrino 查询在执行聚合之前利用窗口函数对 (&lt;em&gt;trip_id, line_item&lt;/em&gt;) 上的行进行重复数据删除。&lt; /figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;fa4fd676-476c-4e76-9a97-91a23f90974c&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;f4a7b909-f276-42bc-9b55-8388c3ec22ed&#34;,&#34;dropCap&#34;:false}&#34;&gt;我们在这里&#39;正在尝试计算一段时间内行项目级别的总行程金额。然而，原始实时流可能对同一订单项和行程有多个条目，因为金额可能会因各种原因（例如乘客调整小费金额）而发生变化。我们不能使用 Pinot 更新插入，因为它会导致太多主键。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;423083d9-89ce-46b7-b6f1-bb4c73fbcedc&#34;,&#34;dropCap&#34;:false}&#34;&gt;查询利用窗口函数保留每个行项目的最新金额，本质上是在查询时对行进行重复数据删除，重复数据删除键为 &lt;em&gt;trip_id， line_item&lt;/em&gt;。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;6750474b-0284-4036-87b3-8a1519b0ed8a&#34;,&#34;dropCap&#34;:false}&#34;&gt;图 5 显示Neutrino 中针对此查询的查询计划。通过向 Pinot 代理发送 SQL 查询来执行表扫描。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;核心/图像&#34; data-wp-block=&#34;{&#34;id&#34;:1101647,&#34;宽度&#34;:&#34;413px&#34;,&#34;高度&#34;:&#34;自动&#34;,&#34;sizeSlug&#34;:&#34;完整&#34;,&#34;linkDest信息&#34;:&#34;无&#34;,&#34;对齐&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;4786f4eb-86d3-474e-b21b-42de415ff248&#34;,&#34;alt&#34;:&#34;&#34;}&#34; class =“aligncenter size-full is-resized”&gt; &lt;img加载=“lazy”解码=“异步”宽度=“956”高度=“856”src=“https://blog.uber-cdn.com”/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/12/figure-5-17339476173180.png&#34; alt=&#34;&#34; class=&#34;wp- image-1101647&#34; style=&#34;width:413px;height:auto&#34; srcset =“https://blog.uber-cdn.com/cdn-cgi/image/width=956，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/12/figure-5 -17339476173180.png 956w, https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/12/figure-5-17339476173180。 300w.png, https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/12/figure-5-17339476173180。 png 768w”尺寸=“（最大宽度：956px）100vw，956px” referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 5：图 4 中查询的查询计划。 &lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;1628c092-cf24-40c4-a40f-65ff3089712e&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;f2e890ab-948a-47ad-aa04-c8ce51f30dc7&#34;,&#34;dropCap&#34;:false}&#34;&gt;中微子下推Pinot 的 V1 引擎可以运行对 Pinot 的 SQL 查询，并使用其自己的执行引擎在其内部执行计划的其余部分。这个设计取得了非凡的成就：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;f02c3b7b-c217-4a02-9eb6-43a71e03b040&#34;,&#34;ordered&#34;:false,&#34;values&#34;:&#34; “}”类=“wp-block-list”&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;我们可以支持 Pinot V1 引擎无法支持的复杂查询形状，例如窗口函数和子函数查询&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;我们可以使用非常少的硬件以数百 QPS 运行此类查询，而不需要任何用户提示来优化查询&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;e65c12f4-e1ce-41a0-9072-2b7eb1f655d7&#34;,&#34;dropCap&#34;:false}&#34;&gt;有人可能想知道为什么我们不使用 Pinot MSE，因为 MSE 可以支持任意复杂的查询。造成这种情况的原因有以下几个：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;ec1ceb3a-8ee8-4527-a05b-892b0006c121&#34;,&#34;ordered&#34;:false,&#34;values&#34;:&#34; “}”类=“wp-block-list”&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;MSE 默认情况下采用随机播放，但扩展性不佳。另一方面，Neutrino 使用单个线程执行整个计划。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;我们的内部测试表明 MSE 无法扩展到 100 QPS。然而，像上面这样的查询可能需要以超过 500 QPS 的速度运行。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;MSE 最近才变得普遍可用，并且已经运行了诸如上述查询之类的查询在中微子中可靠运行多年。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;233a9666-32e6-4d18-ac30-d01237c1382c&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-rate-limiting-at-the-routing-layer&#34;&gt;&lt;br&gt;路由速率限制图层&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;2ccfc265-75ac-48ae-9722-667d77beca96&#34;,&#34;dropCap&#34;:false}&#34;&gt;我们的内部负载平衡系统，称为 Muttley，提供了一种为每个调用者配置 QPS 的方法。如果调用者超出了其设置的 QPS，则 Muttley 会在请求到达目标服务之前开始丢弃请求。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;03e6ad0c-e205-4dd6-b178-52b851418b57&#34;,&#34;dropCap&#34;:false}&#34;&gt;我们使用这个广泛使用 Neutrino，以保护其免受来自 100 多个独特调用者的 QPS 峰值的影响。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;f7808e6a-e914-4ad7-8164-5864c927b269&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-query-fingerprinting-and-validation-framework&#34;&gt;&lt;br&gt;查询指纹和验证框架&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;807d7c14-5c1c-4c27-abdb-2c57e0e96e54&#34;,&#34;dropCap&#34;:false}&#34;&gt;我们已经添加了一个简单的机制来计算 Neutrino 中的查询指纹。鉴于 Pinot 主要用于为面向最终用户的应用程序提供支持，我们的大部分流量来自后端服务，这些服务具有预定的查询指纹。因此，唯一查询指纹的数量比总 QPS 低多个数量级，也是识别昂贵查询的非常有效的维度。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;fba15a22-4a7f-41ec-837f-6eb3e626a65e&#34;,&#34;dropCap&#34;:false}&#34;&gt;此外，我们使用 Uber 的动态配置存储 Flipr 来配置指纹拒绝列表。这对于缓解一个查询可能影响其他调用者的罕见情况非常有用。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;25931d23-94df-4da7-b159-366d9a79448f&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-dynamic-split-execution-timeouts&#34;&gt;&lt;br&gt;动态分割执行超时&lt;/h3&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;width&#34;:&#34;568px&#34;,&#34;height&#34;:&#34;auto&#34;,&#34;align&#34;:&#34;center&#34;,&#34;hash&#34; :&#34;176c1b20-4083-4a56-b3af-98972eeff07a&#34;,&#34;alt&#34;:&#34;&#34;}&#34; class=&#34;aligncenter is-resized&#34;&gt;&lt;img解码=“异步” src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXcsWLieVMwU3pXSWyB1s5CbxVPXjEalGrcNsOXQbKoeTLRaIWE2BZk7e0ZJVODO1F ARn8oed10f25gGx430A3yvd0kC-RKId_gEQg6Ehr6omR3Ognc7HV8NlrDlhXFaNgax2jo7F3pb1dex7JruH6a7ZnCS?key=IEbiY4aSF3msvi6T_qc0CA&#34; alt=&#34;&#34; style=&#34;width:568px;height:auto&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 6：动态拆分执行超时逻辑。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;67ceb3ca-6f6a-409b-8fe5-59a1d3450e8a&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;87119003-f841-46e0-985f-c91ca407bbe5&#34;,&#34;dropCap&#34;:false}&#34;&gt;三年前，由于一名用户压垮了我们的 Neutrino 部署，我们发生了几起事件，对其他高级调用者造成了影响。问题本质上是：如果以足够高的 QPS 运行的给定调用者遇到高延迟，则会导致 Neutrino 中请求和线程堆积。当时，我们希望将分叉中的内部更改数量保持在尽可能低的水平，因为我们希望与 Presto 的主分支保持同步，并每隔几个月将分叉向前推进一次。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;9c00415d-fb25-47b1-bf1d-507dbb78edc9&#34;,&#34;dropCap&#34;:false}&#34;&gt;我们想要快速解决这个问题，并且对 Presto 核心代码进行最少的外科手术干预。为了实现这一目标，我们构建了一个简单的机制，可以在高负载的情况下动态调整 Pinot 的查询超时。甚至令我们惊讶的是，这种简单的机制与基于路由层的速率限制相结合，在过去 3 年里为我们提供了良好的服务，没有再发生此类事件。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;04ba68ae-7f12-4d2e-8672-2c8c24dd7e5c&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-historical-context&#34;&gt;&lt;br&gt;历史背景&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;dbfa61c3-9c6e-4297-860c-7b04034b546a&#34;,&#34;dropCap&#34;:false}&#34;&gt;有人可能想知道为什么我们不直接向用户公开 PinotSQL 并构建一个简单的直通代理。采用 Neutrino 方法的原因是，当时 Uber 有两个 OLAP 数据库：AresDB 和 Pinot。使用 Presto，我们可以隐藏跨这两个商店处理不同查询语言的复杂性。除此之外，使用 Presto，我们可以启用多级查询，这在当时（2019 年）的 Pinot 中尚不可用。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;7d958c3d-b6bc-4de2-b7cd-94f87707e079&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-challenges&#34;&gt;&lt;br&gt;挑战&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;50454c5d-05b0-4c26-b1c4-186068573e00&#34;,&#34;dropCap&#34;:false}&#34;&gt;我们遇到过多年来与 Neutrino 合作遇到的一些挑战。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;c94e05e8-3684-4d1b-ba85-d9cb55d1eb90&#34;,&#34;dropCap&#34;:false}&#34;&gt;首先是中微子对于用户来说是一个复杂的系统。中微子，作为一部分就其设计而言，必须进行 SQL 到 SQL 的转换。而且，它只能将查询计划部分下推到Pinot。当然，Pinot 返回的响应必须在一定限制下进行修剪，并且由于我们向 Pinot 发送 SQL 查询，因此必须使用 LIMIT 子句强制执行该限制。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;fec4fbac-d74c-4677-a6d6-9ffe5b060933&#34;,&#34;dropCap&#34;:false}&#34;&gt;推送的- down plan 可能并不总是有限制，在这种情况下 Neutrino 可能需要设置自己的默认限制（或者查询失败）。设置我们自己的默认限制会更改查询的语义，并可能导致不正确的结果，而查询失败将导致用户体验不佳。图 5 中的示例也演示了这一点，其中我们添加了 10,000 的默认限制。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;c758f982-accc-4a9f-bcb0-e3b2583d1e38&#34;,&#34;dropCap&#34;:false}&#34;&gt;此外，对查询的目视检查不足以确定下推查询的外观，并且更改单个 UDF 可能会导致下推查询的完全更改查询。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;d0874aef-8420-4fb8-b524-d036343d3413&#34;,&#34;dropCap&#34;:false}&#34;&gt;第二个挑战缺乏加入支持。 Neutrino 不支持连接，并且只能支持未优化的计划树没有具有大于 1 个子节点的节点的查询。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;7a58e363-10c1-443c-ac17-57055ac8b9d5&#34;,&#34;dropCap&#34;:false}&#34;&gt;多级引擎Pinot 中启用了分布式连接查询，但由于 Neutrino 只能转换为 Pinot V1 引擎查询，因此我们无法利用多级引擎中微子。这也使我们当前的技术堆栈与 Pinot 中的下一代查询引擎不相符。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;c3254ed6-b57d-4b58-9b83-773a3f0457c9&#34;,&#34;dropCap&#34;:false}&#34;&gt;第三个挑战正在打破租户隔离。 Neutrino 代理来自 100 多个呼叫者的流量，其中许多可能会影响其专用的 Pinot 租户。因此，Neutrino 最终成为一种共享资源，并在查询级别打破了租户级别的隔离。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;e8d63612-32b7-4491-b19e-07e39ea6c68d&#34;,&#34;dropCap&#34;:false}&#34;&gt;最后一个挑战是开发开销。在过去的 2-3 年里，我们花费了大量的精力来修复大量的查询翻译问题并改进对查询下推的支持。然而，Pinot 仍在继续快速改进，并且要赶上 Pinot 中的新 SQL 功能（甚至是新的 Pinot UDF）需要 Neutrino 中进行相应的更改。这常常成为用户尝试的瓶颈利用这些新功能。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;007f6534-c06a-4a7e-a​​bbe-00e0eb8471a8&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-scale-and-impact&#34;&gt;&lt;br&gt;规模和影响&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;578fb714-b8fd-4bd1-a9db-c80f11e521a0&#34;,&#34;dropCap&#34;:false}&#34;&gt;中微子是Uber 的业务关键型 0 级服务，每天为超过 5 亿个 Apache Pinot 查询提供服务。我们的估计表明，超过三分之一的查询利用 Neutrino 的执行引擎，即它们仅部分下推查询并在 Neutrino 中执行计划的其余部分。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;4981dd44-f59e-42c4-8a07-f0beca467845&#34;,&#34;dropCap&#34;:false}&#34;&gt;超过 100独特的服务调用者查询 1,000 多个表，Neutrino 和 Apache Pinot 可以轻松地为我们所有产品线的 100 个用例提供服务业务。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;9928b44e-113a-4dc7-91ce-55477c4b699b&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;0929bab1-5781-4d32-b5d9-1d16789b03f5&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-next-steps&#34;&gt;后续步骤&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;2f8653dc-1fd4-4db2-8ce5-1558cf75035e&#34;,&#34;dropCap&#34;:false}&#34;&gt;目前，我们仅通过 Uber 的 Pinot 多级引擎提供少数用例。在后续博客中，我们将分享我们计划如何在 Uber 更广泛地采用 Pinot SQL，以及我们计划如何使用基于 Neutrino 的方法应对挑战。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;c3283466-39e2-455a-9628-5fac51fb3096&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:1,&#34;hash&#34;:&#34;e38ad6d1-506c-4313-a62e-f8cbc023450c&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-conclusion&#34;&gt;结论&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;7bb07e93-6bab-4dfa-bee2-69ea1879722f&#34;,&#34;dropCap&#34;:false}&#34;&gt;我们的经验为数百个低延迟分析用例提供服务的 Uber 已经明确表示，OLAP 系统应该能够支持窗口函数和子查询等查询功能。 Apache Pinot 直到 2023 年才获得这种支持，而 Neutrino 已被证明在弥补这一差距方面非常有用。此外，Neutrino 在单个进程中运行整个计划的方法已被证明具有足够的可扩展性，可以可靠地处理 10,000 QPS。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;核心/段落&#34; data-wp-block=&#34;{&#34;字体大小&#34;:&#34;小&#34;,&#34;哈希&#34;:&#34;79b746e5-e7fa-4e40-a20f-3dbf29a2ee50&#34;,&#34;dropCap&#34;:false}&#34; class=&#34;has-small-font-size&#34;&gt;Apache&lt;sup&gt;®&lt;/sup &gt;、Apache Pinot&lt;sup&gt;™&lt;/sup&gt;、Apache Hive&lt;sup&gt;™&lt;/sup&gt;、Apache Calcite&lt;sup&gt;™&lt;/sup&gt;、Pinot 和 Hive 是 Apache Software Foundation 在美国和/或其他国家/地区的注册商标或商标。使用这些标记并不暗示 Apache 软件基金会的认可。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;fontSize&#34;:&#34;小&#34;,&#34;hash&#34;:&#34;00bf4a57-ab56-410e-9e0f-ac42bd409e36&#34;,&#34;dropCap&#34; :false}&#34; class=&#34;has-small-font-size&#34;&gt;Oracle、Java、MySQL 是 Oracle 和/或其附属公司的注册商标。其他名称可能是其各自所有者的商标。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;fontSize&#34;:&#34;小&#34;,&#34;hash&#34;:&#34;e7fd827a-9427-4a8c-8f62-afcbb7a39077&#34;,&#34;dropCap&#34; :false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Presto&lt;sup&gt;®&lt;/sup&gt; 是以下公司的注册商标LF Projects, LLC.&lt;/em&gt;&lt;br&gt;封面照片归属：“&lt;a href=&#34;https://openverse.org/image/c8fc21ac-901a-4fe5-a3ea-96669610fecb&#34; target=&#34;_blank&#34; rel=&#34; noreferrer noopener&#34;&gt;让火花飞舞&lt;/a&gt;” by &lt;a href=&#34;https://openverse.org/image/collection?source=flickr&amp;creator=mightyboybrian&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;mightyboybrian&lt;/a&gt; 已获得 &lt;a href=&#34;https:// 授权Creativecommons.org/licenses/by-nc/2.0/?ref=openverse&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;CC BY-NC 2.0&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;fontSize&#34;:&#34;小&#34;,&#34;hash&#34;:&#34;e7fd827a-9427-4a8c-8f62-afcbb7a39077&#34;,&#34;dropCap&#34; :false}&#34; class=&#34;has-small-font-size&#34;&gt;版权所有 Apache Pinot。根据 Apache 许可证版本 2.0 下的一项或多项贡献者许可协议，已获得 Apache Software Foundation (ASF) 的许可。&lt;/p&gt;</description>
      <pubDate>Wed, 11 Dec 2024 06:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Introducing the Prompt Engineering Toolkit】介绍快速工程工具包</title>
      <link>https://www.uber.com/blog/introducing-the-prompt-engineering-toolkit/</link>
      <description>【&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:1,&amp;quot;hash&amp;quot;:&amp;quot;017052cc-70c9-4332-bf04-69fa7f4a8be8&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;b7bc8d85-9cd1-4d57-9148-41ce69ac3084&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;A well-crafted prompt is essential for obtaining accurate and relevant outputs from LLMs (Large Language Models). Prompt design enables users new to machine learning to control model output with minimal overhead.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;705831fa-9844-4560-85b6-fd321c40fb8c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;To facilitate rapid iteration and experimentation of LLMs at Uber, there was a need for centralization to seamlessly construct prompt templates, manage them, and execute them against various underlying LLMs to take advantage of LLM support tasks.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c5c2a0c0-9608-4c58-bb46-9085e37f53e2&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;To meet these needs, we built a prompt engineering toolkit that offers standard strategies that encourage prompt engineers to develop well-crafted prompt templates. It also provides functionality to enrich these templates with context obtained from RAG (Retrieval-Augmented Generation) and runtime feature datasets.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;97444062-6f99-4121-9750-6216787eb03c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The centralized prompt engineering toolkit enables the creation of effective prompts with system instructions, dynamic contextualization, massive batch offline generation (LLM inference), and evaluation of prompt responses. Furthermore, there’s a need for version control, collaboration, and robust safety measures (hallucination checks, standardized evaluation framework, and a safety policy) to ensure responsible AI usage.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f7750aa8-383b-47f3-9c15-138d5ec4fde2&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;This blog post gives an overview of the prompt template lifecycle, the architecture used to build the prompt toolkit, and the production usage of the toolkit at Uber.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;96debefe-ace7-409b-8951-2492f11910ae&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f7af8fe7-ca53-4a6f-85fa-96476bc5c987&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-goals&#34;&gt;Goals&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;3f5cadc6-3359-40c4-b372-c4c25dbefc20&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;When we built the prompt toolkit, our goals were that users at Uber could:&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;928707a3-c450-4996-b7e1-418b86170c4e&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Explore all the available LLM models&amp;nbsp;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Search and discover all the prompt templates&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Create and update prompt templates and tune parameters with access control&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Iterate on prompt template through code review and revision control&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Generate batch offline generation by applying RAG and testing datasets with different LLM models for LLM inference&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Evaluate prompt templates via offline evaluation through testing dataset and online evaluation&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Monitor prompt template performance with LLMs in production to detect regressions and continuously monitor LLM quality through systematic tracking&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;45261a03-0eae-4b6d-b559-0bd75f8c18a2&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;cf804320-9a8b-4be5-8bfa-53efe56c7c87&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-prompt-engineering-lifecycle&#34;&gt;Prompt Engineering Lifecycle&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9fa592ff-e9ed-4f0d-8316-2f46b6521d81&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The prompt engineering lifecycle consists of two stages: the development stage and the productionization stage. Users interact with the prompt toolkit during each of these stages.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;e2588716-190f-4a86-b76a-ee35e746aaf9&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-development-stage&#34;&gt;Development Stage&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f6708f16-5ec8-4e02-a6f2-c2c5ac178c3e&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The development stage has three phases: LLM exploration, prompt template iteration, and evaluation.&lt;br&gt;&lt;br&gt;In the LLM exploration phase, users interact with a model catalog and Uber’s GenAI Playground. A model catalog is a model repository that contains all the available LLM models and its corresponding description, metrics, and usage guide. The GenAI Playground helps users explore the capabilities of different LLMs available at Uber and test their use case applicability. Users explore available LLM models from a model catalog and test LLM responses with prompts in the GenAI playground.&lt;br&gt;&lt;br&gt;In the prompt template iteration phase, users pinpoint their specific business needs, gather sample data, create/analyze/test prompts with LLM models and datasets, assess the responses, and make revisions as needed. Auto-prompting suggests prompt creation so users don’t need to create the prompt template from scratch. With a prompt template catalog, users can explore and reuse the existing prompt templates. In this phase, users perform continual experimentation and iteration.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;67d4e70c-2dd5-42c4-9c37-62d46bb771d7&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In the evaluation phase, users evaluate the effectiveness of the prompt template by testing it with a more extensive dataset to measure its performance. It could leverage LLM as a judge or leverage a customized code-based LLM evaluator to evaluate the performance of the prompt template.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;20ee8da5-f987-4c8f-b0b6-aae132cbdd13&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-productionization-stage&#34;&gt;&lt;br&gt;Productionization Stage&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;8e60077b-f2d1-4ff3-b097-c436879b56c9&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In the productionization stage, users only productionize the prompt template that passed the evaluation threshold on an evaluation dataset.&lt;br&gt;&lt;br&gt;Users track and monitor usage in a production environment, collecting data on system usage. This data can inform further enhancements to the process.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;96cb832a-2766-4bc0-bfeb-6dbf8c133c66&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;78d40108-f817-4352-99da-371078275090&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-architecture&#34;&gt;Architecture&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d2737e54-b66d-486d-9e3f-0a89a2cc823a&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;With the prompt engineering toolkit, various components interact to facilitate LLM model deployment, prompt evaluation, and batch inference responses.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a5d33a03-0d98-40cf-b989-21886b5fe273&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The toolkit is composed of a Prompt Template UI/SDK that manages prompt templates and their revisions. The Prompt Template UI/SDK integrates with APIs like &lt;em&gt;GetAPI&lt;/em&gt; and &lt;em&gt;Execute API&lt;/em&gt;. These APIs interface with the LLM models deployed from the LLM Model Catalog. Models and prompts are stored in ETCD and UCS (object configuration storage), which are then used in an Offline Generation Pipeline and a Prompt Template Evaluation Pipeline.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;4a29a44e-cf91-4cb2-a032-adf6e223a059&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXdEq8Ow776xewryQ9ZnJ4Ii0MeuIjlDHx-7A-uFCFkM_j0ANWKYpPtn9AglumBRcWd3ypLTgnkERfI2pyXESzdX2o8ZNRinQoAbALFew8wFDJDFEQ_e6P_Qm-HluxXwetm__w-I23uEvenKM53PWZ_3vgnX?key=zCghPvr7E6rGgGY5x5OXaQ&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 1: Overview of the prompt engineering toolkit.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6895502e-4910-422c-afef-79ccab8a6420&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;a href=&#34;https://lucid.app/lucidchart/cbde0172-054f-4f6a-94cc-133e6b3208d4/edit?page=0&amp;amp;v=1087&amp;amp;s=612&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;91c4de30-e36b-4097-816a-8158637d10e2&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d2b25754-4a62-4ebc-912f-77f4849e8d7e&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-ui-design-nbsp&#34;&gt;UI/Design&amp;nbsp;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;59b93f45-511e-407c-8aab-6551c6e971be&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Users first interact with the prompt toolkit in Gen AI Playground. Gen AI Playground is designed to interface seamlessly with the Model Catalog, a comprehensive repository of large language models available at Uber. This platform allows users to explore detailed specifications, expected use cases, cost estimations, and performance metrics for each model. Within the Gen AI Playground, users can select any model from the catalog, craft custom prompts, and adjust parameters, such as temperature, to evaluate the model’s responses during the ideation stage.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;c448354b-dd5a-4c51-a2ea-ea2dbcd39d4f&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXe7EvU-FNtBJuwXVWyMAruW8BJQ9v0q-cFRqxpoQ22ctq7Y8hnILHp5j_tBMjG9WKx0M2F6QXD0bUWDb-30XdlW_GNPoYBy_F7LBirv5q2IaJTRuM9IV2WF4hyaLHyCjREDTHnktDXK2GD_ABLdVQ9ZBhIW?key=zCghPvr7E6rGgGY5x5OXaQ&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 2: The model catalog UI.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9f156d2a-e307-4018-816b-86f8566f9868&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;592d6aab-fbbd-4e2d-94f6-86e138f792f9&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXdtu3U7VhGD9p4zaJcUAHvWTkBfbGFQOubBOuRw2r9C7pXBHbECRibmJ9MlkbkAIndAU1tIVZSOUEdu1F_JirRlwgWkw3iT2Av8dG4nctl67hMOd5jandMMvzyF_rQf7FdXAvrbhJL8woWVXCscZo3E06Yg?key=zCghPvr7E6rGgGY5x5OXaQ&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 3: The prompt template edit page.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;8db44de9-ddd7-4fad-bfcb-17bfc44ed350&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;5f2bf7b0-f410-4ab4-bd57-a8479a0c3341&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;61df70e2-6fe2-48ee-85e6-ca6e36e19efc&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-prompt-template-creation&#34;&gt;Prompt Template Creation&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9529b325-db14-4b77-8f62-8010c78f67ba&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The prompt toolkit prompt builder automatically creates prompts for users and helps them discover advanced prompting techniques tailored to their specific AI use case. The auto-prompt builder, built on top of the Langfx framework (an Uber internal Langfx service built on top of LangChain&lt;sup&gt;™&lt;/sup&gt;), follows these steps:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f5b948f8-e353-4e66-a241-301d5723ffd7&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;strong&gt;1. Prompt engineering best practices:&lt;/strong&gt; Incorporates the best practices for context RAG retrievers.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9ac781ce-84e0-4983-86c4-bd2982b837f7&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;strong&gt;2. Prompt builder instructions and examples: &lt;/strong&gt;Provides a template listing detailed instructions and few-shot examples to help LLMs ‌craft user prompts.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;395f1476-49fa-4f39-96a5-4923cb5529b8&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;strong&gt;3. Leverage LLM models:&lt;/strong&gt; Utilizes LLM models to auto-generate suggested prompts, acting as a creator to assist users in prompt generation.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;ce761521-f084-4da5-adc7-89a8ec52f17b&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-advanced-prompt-guidance&#34;&gt;&lt;br&gt;Advanced Prompt Guidance&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d2fc4119-5d30-477d-96f1-bdcd0724dd1c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The prompt builder leverages these principles to create prompts.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure data-wp-block-name=&#34;core/table&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ff3309d7-3851-46b8-acb1-521d955d370a&amp;quot;,&amp;quot;hasFixedLayout&amp;quot;:true,&amp;quot;head&amp;quot;:[],&amp;quot;body&amp;quot;:[],&amp;quot;foot&amp;quot;:[]}&#34; class=&#34;wp-block-table&#34;&gt;&lt;table class=&#34;has-fixed-layout&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Technique&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;Prompt Principle for Instructions&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;CoT (Chain of thought), introduced by &lt;a href=&#34;https://arxiv.org/abs/2201.11903&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Wei et al. (2022)&lt;/a&gt;&lt;/td&gt;&lt;td&gt;CoT (Chain-of-thought) prompting enables complex reasoning capabilities through intermediate reasoning steps. You can combine it with few-shot prompting to get better results on more complex tasks that require reasoning before responding.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Auto-CoT (Automatic Chain of Thought), introduced in &amp;nbsp;&lt;a href=&#34;https://arxiv.org/abs/2210.03493&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Zhang et al. (2022)&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Use leading words like ‌“think step by step.” Specify the steps required to complete a task. This is an approach to eliminate manual efforts by leveraging LLMs with the “Let’s think step by step” prompt to generate reasoning chains for demonstrations one by one.&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Prompt chaining&lt;/td&gt;&lt;td&gt;Prompt chaining can be used in different scenarios involving several operations or transformations.&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ToT (Tree of thought)&lt;/td&gt;&lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/2305.10601&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Yao et el. (2023)&lt;/a&gt; and &lt;a href=&#34;https://arxiv.org/abs/2305.08291&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Long (2023)&lt;/a&gt; proposed Tree of Thoughts (ToT). This framework generalizes ‌chain-of-thought prompting and encourages the exploration of thoughts that serve as intermediate steps for general problem-solving with language models.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Automatic prompt engineer&lt;/td&gt;&lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/2211.01910&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Zhou et al. (2022)&lt;/a&gt; proposed APE (automatic prompt engineering), a framework for automatic instruction generation and selection. The instruction generation problem is framed as natural language synthesis addressed as a black-box optimization problem using LLMs to generate and search over candidate solutions.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Multimodal CoT prompting&lt;/td&gt;&lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/2302.00923&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Zhang et al. (2023)&lt;/a&gt; proposed a multimodal chain-of-thought-prompting approach. Traditional CoT focuses on the language modality. In contrast, Multimodal CoT incorporates text and vision into a two-stage framework. The first step involves rationale generation based on multimodal information. This is followed by the second-phase, answer inference, which leverages the informative generated rationales.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;7d4c3a44-a2d5-4dca-93a6-527fa0f80e77&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-revision-control&#34;&gt;&lt;br&gt;Revision Control&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7611356a-d6fc-4894-99f8-16a8a2cdc3a0&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Prompt template iteration follows code-based iteration best practices. Users could modify the instruction and model parameters for testing responses, testing it out with a test dataset. A code review is needed for every iteration of the prompt template. Once approved and landed, a new prompt template revision gets created.&lt;br&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6b59a79e-89db-4649-bf2f-593c2b605e98&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Furthermore, for the production serving flow, users may prefer not to have their prompt template in the production altered with each update. A user could inadvertently introduce errors in their revisions; therefore, deploying the prompt template should follow a structured process.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;978ac977-7920-40b8-8ea1-5670bc8c7943&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We support a system where the prompt template can be deployed under an arbitrary deployment name, allowing users to “tag” their preferred prompt template for the production model. This prevents ‌an accidental change of prompt template in their production service. This deployed prompt template is disseminated through ObjectConfig, which is an internal configuration deployment system at Uber. With this safe deployment with explicit deployment revision tagging and universal configuration synchronization (with the ObjectConfig system), the user application in the production service fetches the prompt template upon its deployment.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;72690eee-bf6e-4d91-8167-bcad93e434f9&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXcPH2IGjaHaYkc7Qbn_Gcdg7h73GsmrPzcFBVieuq9lGqo5ob5l5GVWqxuDlqZC6r6MsGrm3RNrF8tmrn-94OR5kkmtlWYIVCIblLFkCfVe6nJaob6XsQQQ2D143KSiktcl8AEbw12OzvKjEImev2sPVocq?key=zCghPvr7E6rGgGY5x5OXaQ&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 4: Prompt template revision control.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e3f48ea1-be88-4be1-ac1e-c2d71fdde322&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;a href=&#34;https://lucid.app/lucidchart/862dd0ba-26c2-4131-b00b-c6f0607dbfbf/edit?page=7&amp;amp;v=15814&amp;amp;s=448&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f2f6f4e6-9c3e-44e8-9f9b-09a52b1eb958&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;424bd0fe-808a-4347-8ea5-b0968f6b3c92&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-prompt-template-evaluation-nbsp&#34;&gt;Prompt Template Evaluation&amp;nbsp;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;101a1fff-401c-40b5-bcde-0825ce0bf52a&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Several components are involved in the process to evaluate the performance of one or more prompt templates along with their LLM models, model parameters, and context.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;03ea20ce-7042-4bcb-b0a8-9d7a1a6248c3&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;For evaluation mechanisms, two methods can be employed:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e81cb057-6e8e-4a93-a53d-1eef0b74fdf4&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Using an LLM as the evaluator (LLM as Judge).&lt;/strong&gt; This type of evaluation is particularly useful for tasks where subjective quality or linguistic nuances are important, such as generating text that should be engaging, persuasive, or stylistically specific.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Using custom, user-defined code to assess performance.&lt;/strong&gt; Specific metrics and criteria are coded and used to automatically evaluate the performance of an LLM. This method is beneficial because it can be highly tailored to the specific aspects of performance one wishes to measure.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7ae607be-77fd-4226-a2d3-24f12dd9066f&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The toolkit also offers prompt templates. The evaluation prompt template is a straightforward, user-friendly prompt template detailing the instructions for evaluation. It includes brief examples, metrics, and the format for responses. The production prompt template offers the same, but for production use. This template gets hydrated during production runtime and is the one for performance evaluation.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;39fd0734-4583-4b45-ba0f-1d65253ce663&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;When evaluating prompt templates, input dataset options include a golden dataset with labeled data specifically for evaluation and a dataset derived from production traffic, also used for evaluation purposes. Each template gets evaluated considering its specific instructions, context, involved models, and model parameters.&lt;br&gt;&lt;br&gt;To provide a high-level comparison of different prompt templates’ effectiveness, aggregated metrics get generated by applying the prompt templates across a large dataset.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;205ac0fc-636b-4600-a700-d96573505a28&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXfidNj0hbdndvXHIB124H4Y9WEzqtllzC1R3d-DfNadLV0Ae49YU23NU0KY_RmX0G3LUC2Pb9J-pX9HBW8TC48ucniAYaidv-KlOidE0wlHUOz4KydXdbZf1rja1I_uKKWKsAKE4t0j-RUC5DZqSc0YPCG2?key=zCghPvr7E6rGgGY5x5OXaQ&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 5: Prompt evaluation flow.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;cbc4b816-3e33-43f4-81e6-2c3a4dbcb420&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;87111bff-7d08-4d7d-b3f0-6056433091f0&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;756646f6-ae74-4d87-bdcf-30218bc99080&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-use-cases-at-uber&#34;&gt;Use Cases at Uber&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;498a6343-858c-4f6d-80a1-bcd945a2a36a&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Let’s see how the prompt toolkit works for some production use cases Uber.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;d4aaaf66-bfcb-4f91-9606-93c1053e0412&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-offline-llm-service-nbsp&#34;&gt;Offline LLM Service&amp;nbsp;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;bd5d7874-0980-4dc1-a09f-7355e4d94fb1&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The LLM Batch Offline Generation pipeline facilitates batch inference for large-scale LLM response generation. For example, this pipeline can be integral to the rider name validation use case, which verifies the legitimacy of consumer usernames. It assesses all existing usernames in Uber’s consumer database as well as those of newly registered users, employing an asynchronous method to process and generate responses for usernames in batches.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;cbad961e-b4d4-4dde-ac3c-3862834326a2&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In &lt;a href=&#34;https://www.uber.com/blog/from-predictive-to-generative-ai/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;MA Studio&lt;/a&gt;, setting up this Offline Generation pipeline is straightforward: users select the relevant dataset and input it as data. The prompt template is dynamically hydrated with this dataset. For instance, if the user’s prompt template includes the sentence “Is this {{user_name}} a valid human name?” the pipeline extracts the user_name column from each data row, using it to generate a custom prompt for each entry.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;1f81b66b-1039-49b6-aaf2-1acc040edc2d&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXc-6Yd_prNMs2rmCxa5MgLa2gc42RsIJ_u4GewFsoEj6PoxSGmItv-8o04yFAl_MRQPiBsr376eZ6XKNeNPX3-QMqY86pTJIMcCjB6mNsgn1YWVudBhwYAluyQ9QJZqmU7Hx7c0XslTe1H_a0BnVMYO6xI?key=zCghPvr7E6rGgGY5x5OXaQ&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 6: Prompt offline generation.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;dc3cb8ce-6df5-4f45-b707-d10d22b005bc&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;88887d03-d00a-4c34-a278-e1f38e503b34&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-online-llm-service&#34;&gt;&lt;br&gt;Online LLM Service&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;29d8506e-c759-4634-ae99-4a9d8a14b60c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The prompt template contains dynamic placeholders that need to get replaced with specific runtime values provided by the caller. The caller is responsible for hydrating and passing the values that must get substituted on the placeholders. The model’s hyperspace service currently supports substitution using Jinja-based template syntax. At the moment, we only handle the substitution of string types.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0bfd2754-99e3-438c-9dc0-ed258536cb36&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;This service also supports fan-out capabilities across prompts, templates, and models. The fan-out capabilities can be divided into:&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;bccb522e-36ec-459d-b4e3-501761a0eb8b&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Templates: &lt;/strong&gt;The API templates include formatting the payload into a vendor-specific API structure from the generic data model we exposed from the service. Multiple templates, such as chat completion and text completion templates, are supported.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Prompts and Models: &lt;/strong&gt;The prompts are pinned to a specific model and template. The service fetches the prompt and call the genAI APIs with the required model and template parameters for execution.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7c14d858-b787-4ee2-b707-0f96a43af69a&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Let’s explore the above functionalities through a summarization use case. A contact is a support ticket used to contact a customer support agent. There are scenarios where multiple agents can handle a contact. In this case, the new agent receiving the handoff must either go through the ticket to understand the context or ask the customer to reiterate the problem. Usually, it’s the former. To solve this, we provide a summary to the agents when there’s a handoff from one agent to another.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;be530b64-38dc-4be9-8ab4-f0d5355ba5b1&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXcRypOfJB3oF0Mz9dz7e1y2WQkZdXKhAMYmIaEvUJWh2wCCX8EMwIUoFP8jMyihLUsu-PIC980aeARb53xdcTvKH74bAba5T22uE4tHMAi4M3hKUshjk_KLrzSSG62r0eVkiThFW0Igpd-k1wMH0rsmKDGT?key=zCghPvr7E6rGgGY5x5OXaQ&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 7: Prompt execution and summarization flow.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f6e92da4-70ec-4b20-8b0f-8f0a52150b8e&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;90c930a0-a992-4901-8007-5433411ebb50&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;4d78b852-e5c7-4885-8e69-80c6dc008fbf&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-monitoring-nbsp&#34;&gt;Monitoring&amp;nbsp;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2cb39b1b-6ba3-4dfb-9c19-8d3ab432a36e&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Monitoring measures the performance of the production prompt template used in production. The purpose is to track the regression and performance of the currently prompt template in production. A daily performance monitoring pipeline runs towards production traffic to evaluate the performance. Metrics include latency, accuracy, correctness, and more to monitor each prompt template production iteration.&lt;br&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;4c3b9783-1e40-4ba5-8cd8-ccd41a9185ce&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;An MES dashboard gets refreshed daily with performance monitoring metrics. Refer to the &lt;a href=&#34;https://www.uber.com/blog/enhancing-the-quality-of-machine-learning-systems-at-scale/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;MES blog post&lt;/a&gt; for more information about the MES dashboard&lt;a href=&#34;https://www.uber.com/blog/enhancing-the-quality-of-machine-learning-systems-at-scale/&#34;&gt;.&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;96067813-bed7-4ac5-bd12-06ef0e6ab27f&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:1,&amp;quot;hash&amp;quot;:&amp;quot;a8a354c4-350e-440f-b08a-278402412a71&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-conclusion&#34;&gt;Conclusion&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2fe53062-4ac0-49a1-9be1-8bd8c99f2ba9&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The prompt engineering toolkit outlined in this blog represents a comprehensive framework designed to enhance the interaction with and utilization of LLMs across various stages of development and production at Uber. From the initial exploration of LLM capabilities in the Gen AI Playground to the detailed iteration and creation of prompt templates, the toolkit facilitates a dynamic environment for both novice and expert users to harness the power of LLMs effectively.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a2be8b6c-ff04-4ae3-aed4-56620fa71e06&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The architecture of the toolkit allows for a systematic approach to prompt design, incorporating advanced guidance techniques and robust evaluation methods to ensure the production of high-quality, effective prompts. The structured lifecycle of prompt templates—from development through to production usage and monitoring—ensures that each template is rigorously tested and optimized for performance.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e0788b5d-a8c7-47ed-9fe2-cf3cc29dc50a&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;As a next step, we hope to evolve the prompt toolkit to integrate with online evaluation and with RAG for evaluation and offline generation.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;a5cfb2c3-e1f4-48d8-9c70-33469d3a4805&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;LangChain&lt;sup&gt;™&lt;/sup&gt; is a trademark of LangChain Inc., registered with the United States Patent and Trademark Office.&amp;nbsp; All other product and company names mentioned herein may be trademarks of their respective owners. The use of these marks does not imply any affiliation with or endorsement by their respective owners.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;71f5a7bd-1692-4de5-af7a-cb4fb0efa5ec&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;Cover Photo attribution: “Artificial Intelligence &amp;amp; AI &amp;amp; Machine Learning” by mikemacmarketing. This image was marked with a CC BY 2.0 license:No modifications.&lt;/p&gt;】&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:1,&#34;hash&#34;:&#34;017052cc-70c9-​​4332-bf04-69fa7f4a8be8&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-introduction&#34;&gt;简介&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;b7bc8d85-9cd1-4d57-9148-41ce69ac3084&#34;,&#34;dropCap&#34;:false}&#34;&gt;一个好-精心设计的提示对于从 LLM（大型语言模型）获得准确且相关的输出至关重要。即时设计使刚接触机器学习的用户能够以最小的开销控制模型输出。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;705831fa-9844-4560-85b6-fd321c40fb8c&#34;,&#34;dropCap&#34;:false}&#34;&gt;方便快速在 Uber 的 LLM 迭代和实验中，需要集中化来无缝构建提示模板、管理它们并针对各种底层 LLM 执行它们法学硕士支持任务的优势。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;c5c2a0c0-9608-4c58-bb46-9085e37f53e2&#34;,&#34;dropCap&#34;:false}&#34;&gt;要满足这些根据需求，我们构建了一个提示工程工具包，提供标准策略，鼓励提示工程师开发精心设计的提示模板。它还提供了利用从 RAG（检索增强生成）和运行时特征数据集获得的上下文来丰富这些模板的功能。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;97444062-6f99-4121-9750-6216787eb03c&#34;,&#34;dropCap&#34;:false}&#34;&gt;集中提示工程工具包可以通过系统指令、动态情境化、大规模批量离线生成（LLM 推理）以及即时响应评估来创建有效的提示。此外，还需要版本控制、协作和强大的安全措施（幻觉检查、标准化评估框架和安全政策），以确保负责任的人工智能使用。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;f7750aa8-383b-47f3-9c15-138d5ec4fde2&#34;,&#34;dropCap&#34;:false}&#34;&gt;这篇博文概述了提示模板生命周期、用于构建提示工具包的架构以及该工具包在 Uber 的生产使用情况。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;96debefe-ace7-409b-8951-2492f11910ae&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;f7af8fe7-ca53-4a6f-85fa-96476bc5c987&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-goals&#34;&gt;目标&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;3f5cadc6-3359-40c4-b372-c4c25dbefc20&#34;,&#34;dropCap&#34;:false}&#34;&gt;当我们构建时提示工具包，我们的目标是用户在 Uber 可以：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;928707a3-c450-4996-b7e1-418b86170c4e&#34;,&#34;ordered&#34;:false,&#34;values&#34;:&#34; “}”类=“wp-block-list”&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;探索所有可用的 LLM 模型&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;搜索并发现所有提示模板&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;创建和更新提示模板并通过访问控制调整参数&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;通过代码审查和修订控制迭代提示模板&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;通过应用 RAG 并使用不同的 LLM 模型测试数据集进行批量离线生成，以进行 LLM 推理&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;通过测试数据集和在线评估，通过离线评估来评估提示模板&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;在生产中使用 LLM 监控提示模板性能，以检测回归并通过系统跟踪持续监控 LLM 质量&lt;/li &gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;45261a03-0eae-4b6d-b559-0bd75f8c18a2&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;cf804320-9a8b-4be5-8bfa-53efe56c7c87&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-prompt-engineering-lifecycle&#34;&gt;提示工程生命周期&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;9fa592ff-e9ed-4f0d-8316-2f46b6521d81&#34;,&#34;dropCap&#34;:false}&#34;&gt;提示工程生命周期由两个阶段组成：开发阶段和生产阶段。用户在每个阶段都与提示工具包进行交互。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;e2588716-190f-4a86-b76a-ee35e746aaf9&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-development-stage&#34;&gt;开发阶段&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;f6708f16-5ec8-4e02-a6f2-c2c5ac178c3e&#34;,&#34;dropCap&#34;:false}&#34;&gt;开发阶段分为三个阶段：LLM 探索、提示模板迭代和评估。&lt;br&gt;&lt;br&gt;在 LLM 探索阶段，用户与模型目录和 Uber 的交互GenAI 游乐场。模型目录是一个模型存储库，其中包含所有可用的 LLM 模型及其相应的描述、指标和使用指南。 GenAI Playground 帮助用户探索 Uber 提供的不同法学硕士的功能并测试其用例的适用性。用户从模型目录中探索可用的 LLM 模型og 并在 GenAI 游乐场中使用提示测试 LLM 响应。&lt;br&gt;&lt;br&gt;在提示模板迭代阶段，用户查明其特定业务需求，收集样本数据，使用 LLM 模型和数据集创建/分析/测试提示，评估回应，并根据需要进行修改。自动提示建议创建提示，因此用户无需从头开始创建提示模板。通过提示模板目录，用户可以探索和重用现有的提示模板。在此阶段，用户进行不断的实验和迭代。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;67d4e70c-2dd5-42c4-9c37-62d46bb771d7&#34;,&#34;dropCap&#34;:false}&#34;&gt;在评估中阶段，用户通过使用更广泛的数据集进行测试来衡量提示模板的性能，从而评估提示模板的有效性。它可以利用LLM作为判断者，或者利用定制的基于代码的LLM评估器来评估提示模板的性能。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;20ee8da5-f987-4c8f-b0b6-aae132cbdd13&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-productization-stage&#34;&gt;&lt;br&gt;生产阶段&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;8e60077b-f2d1-4ff3-b097-c436879b56c9&#34;,&#34;dropCap&#34;:false}&#34;&gt;在生产中阶段，用户仅生产在评估数据集上通过评估阈值的提示模板。&lt;br&gt;&lt;br&gt;用户跟踪和监控生产环境中的使用情况，收集数据关于系统使用情况。这些数据可以为流程的进一步改进提供信息。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;96cb832a-2766-4bc0-bfeb-6dbf8c133c66&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;78d40108-f817-4352-99da-371078275090&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-architecture&#34;&gt;架构&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;d2737e54-b66d-486d-9e3f-0a89a2cc823a&#34;,&#34;dropCap&#34;:false}&#34;&gt;随着提示工程工具包中，各种组件交互以促进LLM模型部署、即时评估和批量推理响应。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;a5d33a03-0d98-40cf-b989-21886b5fe273&#34;,&#34;dropCap&#34;:false}&#34;&gt;该工具包是由管理提示模板及其修订的提示模板 UI/SDK 组成。提示模板 UI/SDK 与 &lt;em&gt;GetAPI&lt;/em&gt; 和 &lt;em&gt;执行 API&lt;/em&gt; 等 API 集成。这些 API 与从 LLM 模型目录部署的 LLM 模型交互。模型和提示存储在 ETCD 和 UCS（对象配置存储）中，然后在离线生成管道中使用提示模板评估管道。 &lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;4a29a44e-cf91-4cb2-a032-adf6e223a059&#34;,&#34;alt&#34; :&#34;&#34;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img 解码=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXdEq8Ow776xewryQ9ZnJ4Ii0MeuIjlDHx-7A-uFCFkM_j0ANWKYpPtn9AglumBRcW d3ypLTgnkERfI2pyXESzdX2o8ZNRinQoAbALFew8wFDJDFEQ_e6P_Qm-HluxXwetm__w-I23uEvenKM53PWZ_3vgnX?key=zCghPvr7E6rGgGY5x5OXaQ&#34; alt=&#34;&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 1：提示工程工具包概述。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;6895502e-4910-422c-afef-79ccab8a6420&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;a href=&#34;https://lucid.app/lucidchart/cbde0172-054f-4f6a-94cc-133e6b3208d4/edit?page=0&amp;v=1087&amp;s=612&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;91c4de30-e36b-4097-816a-8158637d10e2&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;d2b25754-4a62-4ebc-912f-77f4849e8d7e&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-ui-design-nbsp&#34;&gt;用户界面/设计&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;59b93f45-511e-407c-8aab-6551c6e971be&#34;,&#34;dropCap&#34;:false}&#34;&gt;用户首先进行交互使用 Gen AI Playground 中的提示工具包。 Gen AI Playground 旨在与模型目录无缝连接，模型目录是 Uber 提供的大型语言模型的综合存储库。该平台允许用户探索每个模型的详细规格、预期用例、成本估算和性能指标。在 Gen AI Playground 中，用户可以从目录中选择任何模型，制作自定义提示并调整温度等参数，以评估模型在构思阶段的响应。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;c448354b-dd5a-4c51-a2ea-ea2dbcd39d4f&#34;,&#34;alt&#34; :&#34;&#34;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img 解码=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXe7EvU-FNtBJuwXVWyMAruW8BJQ9v0q-cFRqxpoQ22ctq7Y8hnILHp5j_tBMjG9WK x0M2F6QXD0bUWDb-30XdlW_GNPoYBy_F7LBirv5q2IaJTRUM9IV2WF4hyaLHyCjREDTHnktDXK2GD_ABLdVQ9ZBhIW?key=zCghPvr7E6rGgGY5x5OXaQ&#34; alt=&#34;&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 2：模型目录 UI。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;9f156d2a-e307-4018-816b-86f8566f9868&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;592d6aab-fbbd-4e2d-94f6-86e138f792f9&#34;,&#34;alt&#34;:&#34;&#34;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img 解码=&#34;async ” src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXdtu3U7VhGD9p4zaJcUAHvWTkBfbGFQOubBOuRw2r9C7pXBHbECRibmJ9MlkbkAIn dAU1tIVZSOUEdu1F_JirRlwgWkw3iT2Av8dG4nctl67hMOd5jandMMvzyF_rQf7FdXAvrbhJL8woWVXCscZo3E06Yg?key=zCghPvr7E6rGgGY5x5OXaQ&#34; alt=&#34;&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图3：提示模板编辑页面。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;8db44de9-ddd7-4fad-bfcb-17bfc44ed350&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;5f2bf7b0-f410-4ab4-bd57-a8479a0c3341&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;61df70e2-6fe2-48ee-85e6-ca6e36e19efc&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-prompt-template-creation&#34;&gt;提示模板创建&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;9529b325-db14-4b77-8f62-8010c78f67ba&#34;,&#34;dropCap&#34;:false}&#34;&gt;提示工具包提示生成器会自动为用户创建提示，并帮助他们发现适合其特定人工智能用例的高级提示技术。自动提示构建器构建在 Langfx 框架（构建在 LangChain&lt;sup&gt;™&lt;/sup&gt; 之上的 Uber 内部 Langfx 服务）之上，遵循以下步骤：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;f5b948f8-e353-4e66-a241-301d5723ffd7&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;strong&gt; 1.提示工程最佳实践：&lt;/strong&gt;纳入上下文 RAG 检索器的最佳实践。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;9ac781ce-84e0-4983-86c4-bd2982b837f7&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;strong&gt; 2.提示构建器说明和示例：&lt;/strong&gt;提供列出详细说明和少量示例的模板，以帮助法学硕士‌制作用户提示。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;395f1476-49fa-4f39-96a5-4923cb5529b8&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;strong&gt; 3.利用LLM模型：&lt;/strong&gt;利用LLM模型自动生成建议提示，作为创建者协助用户生成提示。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;ce761521-f084-4da5-adc7-89a8ec52f17b&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-advanced-prompt-guidance&#34;&gt;&lt;br&gt;高级提示指导&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;d2fc4119-5d30-477d-96f1-bdcd0724dd1c&#34;,&#34;dropCap&#34;:false}&#34;&gt;提示生成器利用这些原则创建提示的规则。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;figure data-wp-block-name=&#34;core/table&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;ff3309d7-3851-46b8-acb1-521d955d370a&#34;,&#34;hasFixedLayout&#34;:true,&#34;head&#34;:[ ],&#34;body&#34;:[],&#34;foot&#34;:[]}&#34; class=&#34;wp-block-table&#34;&gt;&lt;table class=&#34;has-fixed-layout&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;技术&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;提示原则指导&lt;/strong&gt;&lt;/td&gt;&lt; /tr&gt;&lt;tr&gt;&lt;td&gt;CoT（思想链），由 &lt;a href=&#34;https://arxiv.org/abs/2201.11903&#34; target=&#34;_blank&#34; 引入rel=&#34;noreferrer noopener&#34;&gt;魏等人。 (2022)&lt;/a&gt;&lt;/td&gt;&lt;td&gt;CoT（思维链）提示通过中间推理步骤实现复杂的推理能力。您可以将其与几次提示相结合，以便在响应之前需要推理的更复杂任务中获得更好的结果。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Auto-CoT（自动思维链），在 &lt; a href=&#34;https://arxiv.org/abs/2210.03493&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;张等人。 (2022)&lt;/a&gt;&lt;/td&gt;&lt;td&gt;使用“一步一步思考”等引导词。指定完成任务所需的步骤。这是一种消除手动工作的方法，利用法学硕士的“让我们一步一步思考”提示来生成用于演示的推理链。 &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;提示链&lt;/td&gt;&lt;td&gt;提示链可用于涉及多个操作或转换的不同场景。 &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ToT（思想树）&lt;/td&gt;&lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/2305.10601&#34; target=&#34;_blank&#34; rel =&#34;noreferrer noopener&#34;&gt;姚等人。 （2023）&lt;/a&gt;和&lt;a href=&#34;https://arxiv.org/abs/2305.08291&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;长（2023）&lt;/a&gt;提出的思想树（至T）。该框架概括了思想链提示，并鼓励对思想的探索，这些思想可作为使用语言模型解决一般问题的中间步骤。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;自动提示工程师&lt;/td&gt; &lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/2211.01910&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;周等人。 (2022)&lt;/a&gt;提出了APE（自动提示工程），一个自动指令生成和选择的框架。指令生成问题被框架为自然语言综合，并使用 LLM 生成和搜索候选解决方案来解决黑盒优化问题。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;多模式 CoT 提示&lt;/td&gt;&lt; td&gt;&lt;a href=&#34;https://arxiv.org/abs/2302.00923&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;张等人。 (2023)&lt;/a&gt;提出了一种多模式的思想链提示方法。传统的 CoT 侧重于语言模态。相比之下，多模式 CoT 将文本和视觉合并到一个两阶段框架中。第一步涉及基于多模态信息的基本原理生成。接下来是第二阶段，答案推理，它利用信息生成的基本原理。&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;核心/标题&#34; data-wp-block=&#34;{&amp;quot;level&#34;:3,&#34;hash&#34;:&#34;7d4c3a44-a2d5-4dca-93a6-527fa0f80e77&#34;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-revision-control&#34;&gt;&lt;br&gt;修订控制&lt;/ H3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;7611356a-d6fc-4894-99f8-16a8a2cdc3a0&#34;,&#34;dropCap&#34;:false}&#34;&gt;提示模板迭代遵循基于代码的迭代最佳实践。用户可以修改指令和模型参数来测试响应，并使用测试数据集进行测试。提示模板的每次迭代都需要进行代码审查。一旦获得批准并落地，就会创建新的提示模板修订版。&lt;br&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;6b59a79e-89db-4649-bf2f-593c2b605e98&#34;,&#34;dropCap&#34;:false}&#34;&gt;此外，对于在产品服务流程中，用户可能不希望产品中的提示模板随着每次更新而改变。用户可能会无意中在其修订中引入错误；因此，部署提示模板应遵循结构化流程。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;978ac977-7920-40b8-8ea1-5670bc8c7943&#34;,&#34;dropCap&#34;:false}&#34;&gt;我们支持系统中，提示模板可以部署在任意部署名称下，允许用户为生产模型“标记”他们喜欢的提示模板。这可以防止在生产服务中意外更改提示模板。此部署的提示模板通过 ObjectConfig 传播，ObjectConfig 是 Uber 的内部配置部署系统。通过这种具有显式部署修订标记和通用配置同步（使用 ObjectConfig 系统）的安全部署，生产服务中的用户应用程序可以在部署时获取提示模板。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;72690eee-bf6e-4d91-8167-bcad93e434f9&#34;,&#34;alt&#34; :&#34;&#34;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img 解码=&#34;async&#34; src =“https://lh7-rt.googleusercontent.com/docsz/AD_4nXcPH2IGjaHaYkc7Qbn_Gcdg7h73GsmrPzcFBVieuq9lGqo5ob5l5GVWqxuDlqZC6r 6MsGrm3RNrF8tmrn-94OR5kkmtlWYIVCIblLFkCfVe6nJaob6XsQQQ2D143KSiktcl8AEbw12OzvKjEImev2sPVocq?key=zCghPvr7E6rGgGY5x5OXaQ&#34; alt=&#34;&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图4：提示模板修订控制。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;e3f48ea1-be88-4be1-ac1e-c2d71fdde322&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;a href=&#34;https://lucid.app/lucidchart/862dd0ba-26c2-4131-b00b-c6f0607dbfbf/edit?page=7&amp;v=15814&amp;s=448&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;f2f6f4e6-9c3e-44e8-9f9b-09a52b1eb958&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-块-分离”r 有-alpha-通道-不透明度&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;424bd0fe-808a-4347-8ea5-b0968f6b3c92&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-prompt-template-evaluation-nbsp&#34;&gt;提示模板评估&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;101a1fff-401c-40b5-bcde-0825ce0bf52a&#34;,&#34;dropCap&#34;:false}&#34;&gt;几个组件是参与评估一个或多个提示模板及其 LLM 模型、模型参数和上下文的性能的过程。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;03ea20ce-7042-4bcb-b0a8-9d7a1a6248c3&#34;,&#34;dropCap&#34;:false}&#34;&gt;用于评估机制，可以采用两种方法：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;e81cb057-6e8e-4a93-a53d-1eef0b74fdf4&#34;,&#34;ordered&#34;:false,&#34;values&#34;:&#34; “}”类=“wp-block-list”&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;使用 LLM 作为评估者（LLM 作为法官）。&lt;/strong&gt;这种类型评估对于主观质量或语言细微差别很重要的任务特别有用，例如生成应该具有吸引力、有说服力或风格特定的文本。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;使用自定义、用户定义的代码来评估性能。&lt;/strong&gt;具体指标和标准被编码并用于自动评估法学硕士的表现。这种方法很有用，因为它可以根据人们希望衡量的性能的特定方面进行高度定制。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;7ae607be-77fd-4226-a2d3-24f12dd9066f&#34;,&#34;dropCap&#34;:false}&#34;&gt;该工具包还提供提示模板。评估提示模板是一个简单、用户友好的提示模板，详细说明了评估说明。它包括简短的示例、指标和响应格式。生产提示模板提供相同的内容，但供生产使用。该模板在生产运行时会被水合，并且是用于性能评估的模板。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;39fd0734-4583-4b45-ba0f-1d65253ce663&#34;,&#34;dropCap&#34;:false}&#34;&gt;评估提示时在模板中，输入数据集选项包括带有专门用于评估的标记数据的黄金数据集，以及从生产流量派生的数据集（也用于评估目的）。每个模板都会根据其特定指令、上下文、涉及的模型和模型参数进行评估。&lt;br&gt;&lt;br&gt;为了提供不同提示模板有效性的高级比较，通过在大型应用程序中应用提示模板来生成聚合指标数据集。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;图数据-wp-块-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;205ac0fc-636b-4600-a700-d96573505a28&#34;,&#34;alt&#34;:&#34;&#34;}&#34; class=&#34; aligncenter&#34;&gt;&lt;img 解码=“异步” src =“https://lh7-rt.googleusercontent.com/docsz/AD_4nXfidNj0hbdndvXHIB124H4Y9WEzqtllzC1R3d-DfNadLV0Ae49YU23NU0KY_RmX0G 3LUC2Pb9J-pX9HBW8TC48ucniAYaidv-KlOidE0wlHUOz4KydXdbZf1rja1I_uKKWKsAKE4t0j-RUC5DZqSc0YPCG2?key=zCghPvr7E6rGgGY5x5OXaQ&#34; alt=&#34;&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 5：提示评估流程。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;cbc4b816-3e33-43f4-81e6-2c3a4dbcb420&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;87111bff-7d08-4d7d-b3f0-6056433091f0&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;756646f6-ae74-4d87-bdcf-30218bc99080&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-use-cases-at-uber&#34;&gt;Uber 用例&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;498a6343-858c-4f6d-80a1-bcd945a2a36a&#34;,&#34;dropCap&#34;:false}&#34;&gt;让我们看看如何提示工具包适用于 Uber 的某些生产用例。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;d4aaaf66-bfcb-4f91-9606-93c1053e0412&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-offline-llm-service-nbsp&#34;&gt;离线 LLM 服务&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;bd5d7874-0980-4dc1-a09f-7355e4d94fb1&#34;,&#34;dropCap&#34;:false}&#34;&gt;LLM 批次离线生成管道有助于大规模 LLM 响应生成的批量推理。例如，该管道可以成为乘客姓名验证用例的一部分，用于验证消费者用户名的合法性。它评估 Uber 消费者数据库中的所有现有用户名以及新注册用户的用户名，采用异步方法批量处理和生成用户名响应。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;cbad961e-b4d4-4dde-ac3c-3862834326a2&#34;,&#34;dropCap&#34;:false}&#34;&gt;在 &lt;a href=&#34;https://www.uber.com/blog/from-predictive-to-generative-ai/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;MA Studio&lt;/a&gt;，设置这个离线生成管道非常简单：用户选择相关数据集并将其作为数据输入。提示模板与该数据集动态结合。例如，如果用户的提示模板包含句子“这个 {{user_name}} 是一个有效的人名吗？”管道从每个数据行中提取 user_name 列，使用它为每个条目生成自定义提示。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;图data-wp-block-name=&#34;核心/图像&#34; data-wp-block=&#34;{&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;1f81b66b-1039-49b6-aaf2-1acc040edc2d&#34;,&#34;alt&#34;:&#34; “}”类=“aligncenter”&gt;&lt;img解码=“异步” src =“https://lh7-rt.googleusercontent.com/docsz/AD_4nXc-6Yd_prNMs2rmCxa5MgLa2gc42RsIJ_u4GewFsoEj6PoxSGmItv-8o04yFAl_M RQPiBsr376eZ6XKNeNPX3-QMqY86pTJIMcCjB6mNsgn1YWVudBhwYAluyQ9QJZqmU7Hx7c0XslTe1H_a0BnVMYO6xI?key=zCghPvr7E6rGgGY5x5OXaQ&#34; alt=&#34;&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图6：提示离线生成。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;dc3cb8ce-6df5-4f45-b707-d10d22b005bc&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;88887d03-d00a-4c34-a278-e1f38e503b34&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-online-llm-service&#34;&gt;&lt;br&gt;在线法学硕士服务&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;29d8506e-c759-4634-ae99-4a9d8a14​​b60c&#34;,&#34;dropCap&#34;:false}&#34;&gt;提示模板包含需要替换为调用者提供的特定运行时值的动态占位符。调用者负责填充和传递必须在占位符上替换的值。该模型的超空间服务当前支持使用基于 Jinja 的模板语法进行替换。目前，我们只处理字符串类型的替换。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;0bfd2754-99e3-438c-9dc0-ed258536cb36&#34;,&#34;dropCap&#34;:false}&#34;&gt;此服务还支持跨提示、模板和模型的扇出功能。扇出功能可分为：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;bccb522e-36ec-459d-b4e3-501761a0eb8b&#34;,&#34;ordered&#34;:false,&#34;values&#34;:&#34; “}”类=“wp-block-list”&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;模板：&lt;/strong&gt;API 模板包括将有效负载格式化为供应商特定的 API我们从服务中公开的通用数据模型的结构。支持多种模板，例如聊天补全模板和文本补全模板。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;提示和模型&lt;/strong&gt;提示固定到特定模型和模板。该服务获取提示并使用执行所需的模型和模板参数调用 genAI API。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;7c14d858-b787-4ee2-b707-0f96a43af69a&#34;,&#34;dropCap&#34;:false}&#34;&gt;让我们探索一下通过总结用例来了解上述功能。联系人是用于联系客户支持代理的支持票证。在某些情况下，多个代理可以处理一个接触。在这种情况下，接收移交的新代理必须仔细查看票证以了解上下文，或者要求客户重申问题。通常是前者。为了解决这个问题，当从一个代理切换到另一个代理时，我们会向代理提供一份摘要。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;be530b64-38dc-4be9-8ab4-f0d5355ba5b1&#34;,&#34;alt&#34; :&#34;&#34;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img 解码=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXcRypOfJB3oF0Mz9dz7e1y2WQkZdXKhAMYmIaEvUJWh2wCCX8EMwIUoFP8jMyihLU su-PIC980aeARb53xdcTvKH74bAba5T22uE4tHMAi4M3hKUshjk_KLrzSSG62r0eVkiThFW0Igpd-k1wMH0rsmKDGT?key=zCghPvr7E6rGgGY5x5OXaQ&#34; alt=&#34;&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 7：提示执行和汇总流程。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;f6e92da4-70ec-4b20-8b0f-8f0a52150b8e&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;90c930a0-a992-4901-8007-5433411ebb50&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;4d78b852-e5c7-4885-8e69-80c6dc008fbf&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-monitoring-nbsp&#34;&gt;监控&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;2cb39b1b-6ba3-4dfb-9c19-8d3ab432a36e&#34;,&#34;dropCap&#34;:false}&#34;&gt;监控措施生产中使用的生产提示模板的性能。目的是跟踪生产中当前提示模板的回归和性能。每日性能监控管道针对生产流量运行以评估性能。指标包括延迟、准确性、正确性等，用于监控每个提示模板生产迭代。&lt;br&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;4c3b9783-1e40-4ba5-8cd8-ccd41a9185ce&#34;,&#34;dropCap&#34;:false}&#34;&gt;MES 仪表板每天都会更新性能监控指标。请参阅&lt;a href=&#34;https://www.uber.com/blog/enhancing-the-quality-of-machine-learning-systems-at-scale/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34; &gt;MES 博客文章&lt;/a&gt;，了解有关 MES 仪表板的更多信息&lt;a href=&#34;https://www.uber.com/blog/enhancing-the-quality-of-machine-learning-systems-at-scale/ &#34;&gt;.&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;96067813-bed7-4ac5-bd12-06ef0e6ab27f&#34;,&#34;opacity&#34;:&#34;alpha 通道&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:1,&#34;hash&#34;:&#34;a8a354c4-350e-440f-b08a-278402412a71&#34;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-conclusion&#34;&gt;结论&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;2fe53062-4ac0-49a1-9be1-8bd8c99f2ba9&#34;,&#34;dropCap&#34;:false}&#34;&gt;提示工程本博客中概述的工具包代表了一个综合框架，旨在增强 Uber 开发和生产各个阶段与法学硕士的互动和利用。从 Gen AI Playground 中对 LLM 功能的初步探索，到提示模板的详细迭代和创建，该工具包为新手和专家用户提供了一个动态环境，以有效利用 LLM 的力量。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;a2be8b6c-ff04-4ae3-aed4-56620fa71e06&#34;,&#34;dropCap&#34;:false}&#34;&gt;架构该工具包允许采用系统方法进行提示设计，结合先进的指导技术和稳健的评估方法，以确保制作高质量、有效的提示。提示模板的结构化生命周期（从开发到生产使用和监控）确保每个模板都经过严格的测试和性能优化。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;e0788b5d-a8c7-47ed-9fe2-cf3cc29dc50a&#34;,&#34;dropCap&#34;:false}&#34;&gt;作为下一个接下来，我们希望发展提示工具包，以集成在线评估以及RAG进行评估和离线生成。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;fontSize&#34;:&#34;小&#34;,&#34;hash&#34;:&#34;a5cfb2c3-e1f4-48d8-9c70-33469d3a4805&#34;,&#34;dropCap&#34; :false}&#34; class=&#34;has-small-font-size&#34;&gt;LangChain&lt;sup&gt;™&lt;/sup&gt; 是以下公司的商标LangChain Inc.，在美国专利商标局注册。  本文提及的所有其他产品和公司名称可能是其各自所有者的商标。使用这些标志并不意味着与其各自所有者有任何隶属关系或认可。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;fontSize&#34;:&#34;小&#34;,&#34;hash&#34;:&#34;71f5a7bd-1692-4de5-af7a-cb4fb0efa5ec&#34;,&#34;dropCap&#34; :false}&#34; class=&#34;has-small-font-size&#34;&gt;封面照片出处：“人工智能与人工智能与机器学习”迈克马克营销。该图像标有 CC BY 2.0 许可证：不得修改。&lt;/p&gt;</description>
      <pubDate>Tue, 26 Nov 2024 06:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Streamlining Financial Precision: Uber’s Advanced Settlement Accounting System】简化财务精准度：Uber 的高级结算会计系统</title>
      <link>https://www.uber.com/blog/ubers-advanced-settlement-accounting-system/</link>
      <description>【&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:1,&amp;quot;hash&amp;quot;:&amp;quot;1801f856-06d7-4d1e-b983-5c0e34944441&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d28e00ac-0240-44d8-bd8d-0f7441623771&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In the realm of fintech, settlements, refunds, and chargebacks related to PSPs (payment service providers) are crucial transactions that involve the transfer of funds between different financial entities to complete a payment process. PSPs act as intermediaries between merchants and consumers, facilitating the smooth and secure transfer of funds. Settlements in this context refer to the end-of-day process where funds collected from consumers are disbursed to merchants, minus any fees or charges&lt;strong&gt;.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;4b613f6a-b4a6-43c8-896e-18ee740601af&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Settlement accounting is a critical financial process that involves reconciling and recording all transactions related to settlements, refunds, and other financial activities conducted through PSPs. At Uber, settlement accounting is indispensable due to the sheer volume of transactions and the need for precise financial tracking.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1098207,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;98096e93-b824-4c92-af22-468fab18e202&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;555&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/image-1-17297140298650-1024x555.png&#34; alt=&#34;&#34; class=&#34;wp-image-1098207&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/image-1-17297140298650.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/image-1-17297140298650.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/image-1-17297140298650.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/image-1-17297140298650.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=2048,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/image-1-17297140298650.png 2048w&#34; sizes=&#34;(max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 1: Summary of card payment processing and the key players in the market.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;8d5cd00f-8537-4acf-b571-6ad5f217245b&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We process about 1.2 billion settlements each month, handling around $130 billion in cash in transit annually from over 50 different PSPs. This process ensures that ‌funds received from various payment methods are accurately accounted for and matched with the corresponding bank statements. Settlement accounting at Uber involves offsetting receivables booked during revenue accounting, verifying the cash deposited in the bank, and analyzing contracts with PSPs to determine fees, taxes, and other charges associated with transactions.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;48f19f93-df8a-4d4f-822b-457c25df29f0&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;This blog describes Uber’s advanced settlement accounting system. Settlement accounting is crucial for ensuring financial accuracy, preventing fraud, and maintaining regulatory compliance. By automating reconciliation and offering near-real-time reporting, it boosts operational efficiency and supports strategic business decisions. Additionally, it helps manage transaction costs by analyzing PSP fees and taxes. Reliable settlement accounting fosters customer trust through accurate processing and timely resolution of payment issues.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;b1730c08-4e9d-47af-abab-3c1bdde1ed18&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2ad61c98-7341-4fac-8ca2-4ae6b93f88da&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-motivation&#34;&gt;Motivation&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;78f806f0-9dda-4c0a-81d1-45ab56a9cd38&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;PSP files include various events from payment service providers, each initiated by different parties and crucial for maintaining accurate financial operations. We built the settlement accounting system to manage these events.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;2fc0868d-a293-492a-ac65-9d3a34260f39&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-uber-initiated-events&#34;&gt;&lt;strong&gt;Uber-Initiated Events&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a04b5ef0-e7fe-4406-8eca-89838535154b&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;When considering the payment ecosystem, Uber-initiated events are actions initiated directly by Uber. They include:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;40ffc0fa-1d14-4162-b666-1aae618cdd2d&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Collections:&lt;/strong&gt; Uber initiates the collection of funds from riders for services rendered.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Refunds:&lt;/strong&gt; When a rider is owed money back, Uber initiates the refund process. This could be due to ride cancellations, service issues, or other reasons that warrant returning funds to the rider.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;012d12c3-1fc1-4c5b-ba15-c3a0ecdb4b60&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-rider-initiated-events&#34;&gt;&lt;br&gt;&lt;strong&gt;Rider-Initiated Events&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;eb657940-a4ba-4677-b0a0-9f6e4850a063&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Rider-initiated events are triggered by riders, typically in response to issues or disputes. These include:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c8cc5949-2582-45a0-bb0f-730690789d3f&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Chargebacks:&lt;/strong&gt; Riders can dispute transactions, leading to a chargeback. This process involves reversing a transaction after a rider questions its legitimacy, often resulting in funds being withdrawn from Uber’s account and returned to the rider.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;42fb3550-4e62-4b1e-8a4a-7c84aaad6544&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-psp-initiated-events&#34;&gt;&lt;br&gt;&lt;strong&gt;PSP-Initiated Events&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9f392df5-7980-4e5b-bf4b-e0b197d5f2b7&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;PSP-initiated events are managed by the PSP. These include several critical financial processes:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ceee52b8-0632-4673-88be-e36b511d3901&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Trip Fees:&lt;/strong&gt; These are fees directly related to the trips taken by riders, such as a gateway fee, card network fee, etc.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Non-Trip Fees:&lt;/strong&gt; These are fees that are applied on an aggregated level rather than per trip, such as a gateway fee or card network fee.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Taxes:&lt;/strong&gt; PSPs often handle the collection and remittance of applicable taxes on transactions, per tax regulations.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Payment Verification:&lt;/strong&gt; This involves verifying the authenticity and validity of payments. PSPs perform checks to prevent fraud, ensure that payment details are correct, and that funds are available.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;4fb659a4-bb1a-4ce4-960a-0bf593b62ef3&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Each of these events plays a vital role in the comprehensive financial management system, ensuring that transactions are processed accurately, disputes are handled properly, and regulatory compliance is maintained. Understanding and managing these events effectively is essential for maintaining financial integrity and operational efficiency in the payment processing ecosystem.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;4c6d2080-a59c-4dd6-9dcc-da1bb84dedd5&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e9947bc4-e53c-4618-8fcc-1c6c6442a2a5&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-challenges-with-the-psp-files&#34;&gt;Challenges with the PSP files&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d44489e2-2461-4c5f-86ba-62c4bf266f75&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Efficient financial transaction management is critical in today’s digital landscape. Payment service providers facilitate these transactions, but reconciling PSP settlement files can be challenging. Here are the common challenges with PSP settlement files:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e2af04b3-ff0b-4ee3-b248-3a66adbdd8c9&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Complexity:&lt;/strong&gt; Each PSP has its own file format, and there are diverse file delivery mechanisms available.&amp;nbsp;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Duplicates:&lt;/strong&gt; Duplicates occur when the same transaction or entry is recorded more than once in the settlement files. This leads to discrepancies in financial records and causes issues in reconciliation. For instance, a transaction for a payment of $100 might be recorded twice, resulting in an inflated total of $200 instead of the actual $100.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Missing or Wrong ‌References:&lt;/strong&gt; This challenge involves the absence of necessary reference information or the inclusion of incorrect references in the settlement files, making it difficult to match transactions accurately. A transaction record might lack a unique transaction ID or have an incorrect ID that doesn’t match the records in the payment platform, leading to reconciliation issues.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Format Issues:&lt;/strong&gt; These occur when the data in the settlement files don’t conform to the expected format, leading to difficulties in processing and reconciliation. For example, a settlement file might include dates in DD/MM/YYYY format instead of the expected MM/DD/YYYY format, or contain extra columns that aren’t anticipated by the processing system.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Balancing Equation Isn’t Satisfied: &lt;/strong&gt;The balancing equation &lt;em&gt;Settlements – Deductions = Payout&lt;/em&gt;&lt;strong&gt; &lt;/strong&gt;ensures that the total settlements minus deductions should equal the payout amount. Any discrepancies indicate potential errors in the settlement data. For example, if the settlements amount to $10,000 and deductions are $2,000, the payout should be $8,000. If the file shows a payout of $7,500, there’s a discrepancy that needs investigation.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Large One-Off Transactions Monitoring:&lt;/strong&gt; When a PSP conducts a large one-off transaction, it requires special monitoring to ensure it behaves as expected and doesn’t cause disruptions. For example, a PSP might conduct a one-off transaction withholding $10 million USD. Systems must monitor this transaction closely to ensure it’s processed correctly and reflects accurately in all financial records.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;24185785-9fb5-4637-b66b-6ab93e5d81aa&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;042bb279-3a9b-4765-9a3a-27e587175551&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-architecture&#34;&gt;Architecture&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2f029662-28f5-46d4-bc36-d4bed0c7fe1b&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The settlement accounting system manages challenges with PSP files and streamlines financial precision. Settlement accounting at Uber has 3 primary components: the Feed Ingestion Service, the Feed Processor Service, and the Reconciliation &amp;amp; Accounting Service. Each service has specific contractual responsibilities that are crucial for understanding their roles in the overall settlement process.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1098209,&amp;quot;width&amp;quot;:&amp;quot;802px&amp;quot;,&amp;quot;height&amp;quot;:&amp;quot;auto&amp;quot;,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;2cf7b2f1-c3cf-4a82-9466-e32365e18f44&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large is-resized&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;309&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/architecture-17297141812639-1024x309.png&#34; alt=&#34;&#34; class=&#34;wp-image-1098209&#34; style=&#34;width:802px;height:auto&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/architecture-17297141812639.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/architecture-17297141812639.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/architecture-17297141812639.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/architecture-17297141812639.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=2048,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/architecture-17297141812639.png 2048w&#34; sizes=&#34;(max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 2: Parts of the Settlement Accounting infrastructure.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;271b7874-c0f5-42d4-b2de-9fb7a47f5322&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;4630a1b6-0d11-4c40-a3eb-d8e18fc53c00&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The File Ingestion Service is integral to managing settlement files obtained from third-party PSPs. Its primary function includes fetching these files from third-party sources and transferring them to a designated file storage location. This approach ensures that we avoid excessive retries or reprocessing requests from ‌third-party sources by storing the files internally.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;a38fcd16-cab7-4543-a646-2cb6901920c0&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-feed-ingestion-service&#34;&gt;&lt;br&gt;Feed Ingestion Service&amp;nbsp;&lt;/h3&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1098212,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;44a29c2a-e362-4a5f-9230-ecf216a8d297&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;812&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/feed-ingestion-17297145987610-1024x812.png&#34; alt=&#34;&#34; class=&#34;wp-image-1098212&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/feed-ingestion-17297145987610.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/feed-ingestion-17297145987610.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/feed-ingestion-17297145987610.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/feed-ingestion-17297145987610.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=2048,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/feed-ingestion-17297145987610.png 2048w&#34; sizes=&#34;(max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 3: The functioning of the file ingestion service, including downloading, parsing, and normalizing.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f98eecf3-70ee-4bb1-b9f3-fc36f92a6c65&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d0971fac-9043-487d-a283-dc4ed214ef72&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Downloading files from PSPs involves accessing settlement files published by PSPs through various data sources, such as SFTP, APIs, or blob stores. The File Ingestion Service retrieves these files directly from the source and uploads them to a designated blob store. This store serves as a centralized repository from which the files can be accessed for subsequent reading and processing.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c3136627-cb64-4ff8-a6ac-d76fb389c721&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Parsing presents a significant challenge due to the lack of standardized formats among settlement files from different PSPs. This necessitates dynamic parsing tailored to each format and PSP. The File Ingestion Service relies heavily on configuration for parsing the files sent by the PSP. For every PSP onboarding into the system, parser rules are written to parse the files for processing. Before applying parsing rules, we stage the file data into necessary tokens for further processing. This is called tokenization of data. Tokenizing involves splitting using delimiters and tagging the data to configured tokens.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;eae27851-4064-46e4-a52b-f863b04115e7&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Since PSPs send data in their unique format, it complicates the process of data processing. To address this challenge, the File Ingestion Service performs a crucial function known as normalization. During parsing, the service converts the varied data formats received from PSPs into a standardized, consumable format. This normalization process ensures that the data is structured consistently, facilitating easier and more efficient processing downstream.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;3b466219-0aeb-487b-8314-5029766107d4&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;To effectively process the PSP feed, essential fields like amount, currency, and transaction date are identified as critical. These key business data elements are extracted and structured into a standardized, normalized format known as PSPEvent. This standardized format ensures consistency and clarity of the extracted information. Later, the PSPEvent is transmitted to the feed-processing component for further stages of processing and analysis.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1098214,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;4d009874-8211-4bf0-b66f-0fbe3f72b935&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;486&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/rules-17297147319977-1024x486.png&#34; alt=&#34;&#34; class=&#34;wp-image-1098214&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/rules-17297147319977.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/rules-17297147319977.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/rules-17297147319977.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1500,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/rules-17297147319977.png 1500w&#34; sizes=&#34;(max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 4: Sample normalization for a PSPEvent.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;54447c35-7d55-4f53-90f1-8f77d9ffd0be&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;2d3a5c07-5d52-490b-b070-a6f1350e3a50&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-feed-processor-service&#34;&gt;&lt;br&gt;Feed Processor Service&amp;nbsp;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;80ebb41f-7de5-4ef1-86f1-a5a066604d0a&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;As summarized previously, the Feed Parser divides the incoming PSP file data into distinct buckets called splits. This targeted segmentation ensures that each payment event is processed in a contextually relevant manner, setting the foundation for a more efficient and precise reconciliation process.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1098217,&amp;quot;width&amp;quot;:&amp;quot;700px&amp;quot;,&amp;quot;height&amp;quot;:&amp;quot;auto&amp;quot;,&amp;quot;sizeSlug&amp;quot;:&amp;quot;full&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;0545ac55-542c-4be4-b198-4c9f868190a4&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-full is-resized&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;2394&#34; height=&#34;1584&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/image-10-23-24-at-1.25pm-17297151251181.jpeg&#34; alt=&#34;&#34; class=&#34;wp-image-1098217&#34; style=&#34;width:700px;height:auto&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2394,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/image-10-23-24-at-1.25pm-17297151251181.jpeg 2394w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/image-10-23-24-at-1.25pm-17297151251181.jpeg 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/image-10-23-24-at-1.25pm-17297151251181.jpeg 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/image-10-23-24-at-1.25pm-17297151251181.jpeg 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/image-10-23-24-at-1.25pm-17297151251181.jpeg 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=2048,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/image-10-23-24-at-1.25pm-17297151251181.jpeg 2048w&#34; sizes=&#34;(max-width: 2394px) 100vw, 2394px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 5: The functioning of the batching and aggregating of the normalized events.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;11d8a3d0-09aa-4d3b-9f98-4f8208afc210&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c6c07030-bdf5-48ef-9d9a-346f6f6e39c0&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Following the parsing phase, the Feed Processor steps in to handle each of these buckets in parallel. This parallel processing approach significantly accelerates the handling of large volumes of PSP events, reducing overall processing time and enhancing throughput. For each PSP event within a split, the Feed Processor calls the Reconciliation Service. This service meticulously matches these PSP events with Uber’s Payment Platform records, ensuring that every transaction is accurately reconciled.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a4096ec0-fc67-4b80-ac77-182f538c9999&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;However, not all reconciliation attempts are successful. For events where reconciliation fails, the system marks them as unhealthy and submits them to the DLQ (Dead Letter Queue). The DLQ acts as a safety net, ensuring that these events are retried and resolved at a later time. This mechanism maintains the integrity and accuracy of our payment processing pipeline by ensuring no event is lost or forgotten.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a3b70a01-7181-4b9e-8951-8882272e6c38&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Once the financial events are enriched, they’re sent back to the Feed Processor. After completing the processing of a split, these enriched financial events are forwarded to our accounting engine. At this stage, the financial events are meticulously processed, and the corresponding accounting transactions are persistently stored in our data repository. This ensures that every financial event is accurately accounted for, maintaining the fidelity of Uber’s financial records.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;7f5e5564-d4e9-48e6-933d-3e87e853d094&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-reconciliation-amp-accounting-service&#34;&gt;&lt;br&gt;Reconciliation &amp;amp; Accounting Service&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;71ec042c-2efb-4a80-8e4e-991d1d11c9a2&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;According to the &lt;a href=&#34;https://www.withum.com/resources/2022-acfe-report-to-the-nations-fraud-trends-and-key-takeaways/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Association of the Certified Fraud Examiners&lt;/a&gt;, businesses typically lose around 5% of their annual revenue to fraud, much of which stems from discrepancies in financial records.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;55820ed7-f53e-4578-8328-0e0028a967eb&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Payment reconciliation, in essence, is the process of cross-referencing and verifying financial transactions between the payment service providers and the bank records. The primary goal is to ensure that all transactions are accounted for accurately and that the settlements by the payment service providers match the expected revenue.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;797a34a5-7a2c-473b-9739-2a3191525d19&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Besides protecting against fraud, effective payment reconciliation enables data-driven decision-making, features the trends among various payment service providers, and manages compliance with legal and financial regulations.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;11b8223b-83e4-4f2f-adfc-1de3e28ff83c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The Reconciliation Service plays a crucial role in reconciling PSPEvents with records on the Uber Payment Platform, ensuring that Uber receives payment for every trip where PSPs were involved in processing transactions. The reconciliation process hinges on matching precise records from both the PSP and Uber Payment Platform, facilitated by a deterministic field called &lt;em&gt;transactionReference&lt;/em&gt; shared between them. This acts as a unique reference, established and stored during the payment transaction process between Uber and the PSP. Uber retains these references to validate incoming data from the PSP during reconciliation.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;42bd3ea2-54f3-4efe-b09a-2011ba1e0f09&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1098219,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;a9e8c9a0-f704-4d2a-b6d3-b1ba17bade0c&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;974&#34; height=&#34;1024&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/image-10-23-24-at-1.27pm-17297152992089-974x1024.jpeg&#34; alt=&#34;&#34; class=&#34;wp-image-1098219&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=974,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/image-10-23-24-at-1.27pm-17297152992089.jpeg 974w, https://blog.uber-cdn.com/cdn-cgi/image/width=285,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/image-10-23-24-at-1.27pm-17297152992089.jpeg 285w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/image-10-23-24-at-1.27pm-17297152992089.jpeg 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1461,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/image-10-23-24-at-1.27pm-17297152992089.jpeg 1461w, https://blog.uber-cdn.com/cdn-cgi/image/width=1632,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/image-10-23-24-at-1.27pm-17297152992089.jpeg 1632w&#34; sizes=&#34;(max-width: 974px) 100vw, 974px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 6: The reconciliation and accounting architecture for the PSP events.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;42bd3ea2-54f3-4efe-b09a-2011ba1e0f09&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;bf8b9c19-9ecc-403c-89dc-5fd8245d87d0&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Reconciliation operations aren’t immediate upon trip completion but can occur with a delay due to the PSP sending data to Uber on a scheduled basis—typically daily or weekly, about T+7 days after the transaction. Given Uber processes around 1 billion trips per month via PSPs, the system must accommodate high scalability and robust storage capabilities.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d814020e-61c7-4622-b76a-cff09e2839e3&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;To streamline operations and segregate responsibilities between trip ingestion and PSPEvent processing, we designed the system with a dedicated Trip Ingestion Service. Trip information is ingested into the system via an Apache Kafka&lt;sup&gt;®&lt;/sup&gt; consumer triggered on an event basis, immediately upon trip completion. The Kafka consumer hydrates the cache with essential details such as trip ID and the &lt;em&gt;transactionReference&lt;/em&gt;, enabling swift retrieval and correlation when processing PSPEvents.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;243e1731-aed9-426f-a6dc-619c286e78c4&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;When reconciliation is successful, the events undergo an enrichment process. They’re supplemented with data from 15 different upstream sources, transforming them into comprehensive financial events. These financial events are self-sufficient data models, containing all the information necessary for precise and accurate accounting.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c0a9fd4d-71b1-4057-a277-6762284ba3ca&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;These financial events are sent to the accounting service to generate the financial accounting transactions.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;b3c213e7-e361-4b8f-8986-1174650c4763&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Upon creation of a financial event, it’s promptly routed to the accounting engine, where meticulously configured accounting rules come into play. Each event type is associated with specific accounting rules that guide the evaluation process. These financial events carry all necessary parameters to facilitate the application of relevant accounting rules.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;92a24c3d-04f2-4e9c-a4e4-b1b32fca9704&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Every financial event has pre-configured rulesets designed to calculate various segments of the accounting treatment. These events are tagged with attributes such as location, line of business, account type, etc. The account types are broadly categorized into assets, liabilities, and profit and loss. Each of these categories is further subdivided into revenue, contra-revenue, receivables, and payables and expenses.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f5524533-ae41-4f0f-b9c7-bb5bbf318fca&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;After ‌accounting rules are evaluated for a given event, a transaction model is generated based on the outcomes. This model represents the accounting treatment applied to the event. The transaction model undergoes a series of validations to ensure accuracy and compliance with accounting standards. Once validated, the transaction is saved in the data store and then published to a Kafka topic for downstream systems to consume.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;607ccc00-6ca1-4e7f-b5a3-1e648320e60a&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The validated transactions are aggregated into a ledger, which provides a comprehensive view of all financial activities. This ledger is essential for financial reporting, audit trails, and strategic decision-making.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d41bc132-3f05-4d65-a1f0-8ebca8cdd9f8&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:1,&amp;quot;hash&amp;quot;:&amp;quot;d0279e52-e7fc-4433-ad9b-ed1edc9108aa&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-conclusion&#34;&gt;Conclusion&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;300d14ed-d5f7-4d92-8d92-5d647f81fea9&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Our comprehensive settlement accounting system at Uber is designed to efficiently handle the immense volume of transactions processed each month. By using a structured approach that includes parsing, processing, reconciliation, enrichment, and accounting, we ensure that each financial event is accurately captured and recorded.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;062b88af-8ec0-4b95-9269-0e06bb8896dd&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;This robust system not only accelerates processing time but also enhances the accuracy and integrity of our financial operations. Automated reconciliation and real-time reporting improve operational efficiency, support strategic business decisions, and maintain regulatory compliance. Additionally, it helps in managing transaction costs, preventing fraud, and fostering customer trust through precise and timely resolution of payment issues.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;dbd560d5-73b2-4dc6-b86e-a15319458955&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Ultimately, this settlement accounting framework underscores Uber’s commitment to operational excellence and reliability, ensuring that our financial processes are secure.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;77267101-94c4-4706-bb0a-d07e537f27df&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Apache&lt;sup&gt;®&lt;/sup&gt;, Apache Kafka&lt;sup&gt;®&lt;/sup&gt;, Kafka&lt;sup&gt;®&lt;/sup&gt;, Apache Cassandra&lt;sup&gt;®&lt;/sup&gt;, Cassandra&lt;sup&gt;®&lt;/sup&gt;, Apache Spark&lt;sup&gt; ™&lt;/sup&gt;, Spark&lt;sup&gt; ™&lt;/sup&gt;, Apache Hive&lt;sup&gt; ™&lt;/sup&gt;, and Hive&lt;sup&gt; ™&lt;/sup&gt; are either registered trademarks or trademarks of the Apache Software Foundation in the United States and/or other countries. No endorsement by The Apache Software Foundation is implied by the use of these marks.&lt;/em&gt;&lt;/p&gt;】&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:1,&#34;hash&#34;:&#34;1801f856-06d7-4d1e-b983-5c0e34944441&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-introduction&#34;&gt;简介&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;d28e00ac-0240-44d8-bd8d-0f7441623771&#34;,&#34;dropCap&#34;:false}&#34;&gt;在领域中在金融科技领域，与 PSP（支付服务提供商）相关的结算、退款和退款是至关重要的交易，涉及不同金融实体之间的资金转移完成付款流程。 PSP 充当商家和消费者之间的中介，促进资金的顺利、安全转移。本文中的结算是指日终流程，即从消费者处收取的资金在扣除任何费用或收费后支付给商家&lt;strong&gt;。&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;4b613f6a-b4a6-43c8-896e-18ee740601af&#34;,&#34;dropCap&#34;:false}&#34;&gt;结算记账为一个关键的财务流程，涉及核对和记录与通过 PSP 进行的结算、退款和其他财务活动相关的所有交易。在 Uber，由于交易量巨大且需要精确的财务跟踪，结算会计是必不可少的。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;id&#34;:1098207,&#34;sizeSlug&#34;:&#34;large&#34;,&#34;linkDestination&#34;:&#34;none&#34;,&#34;align&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;98096e93-b824-4c92-af22-468fab18e202&#34;,&#34;alt&#34;:&#34;&#34;}&#34;类=“aligncenter尺寸-大”&gt;&lt;img加载=“惰性”解码=“异步”宽度=“1024”高度=“555” src =“https://blog.uber-cdn.com/cdn-cgi/image/width=2160，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/image-1 -17297140298650-1024x555.png&#34; alt=&#34;&#34; class=&#34;wp-image-1098207&#34; srcset =“https://blog.uber-cdn.com/cdn-cgi/image/width=1024，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/image-1 -17297140298650.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/image-1-17297140298650。 300w.png, https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/image-1-17297140298650。 PNG768w， https://blog.uber-cdn.com/cdn-cgi/image/width=1536，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/image-1-17297140298650。 PNG1536w， https://blog.uber-cdn.com/cdn-cgi/image/width=2048，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/image-1-17297140298650。 png 2048w”尺寸=“（最大宽度：1024px）100vw，1024px” referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 1：卡支付处理和市场主要参与者的摘要。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;核心/段落ph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;8d5cd00f-8537-4acf-b571-6ad5f217245b&#34;,&#34;dropCap&#34;:false}&#34;&gt;我们每月处理约 12 亿笔结算，处理约 1300 亿美元现金每年从 50 多个不同的 PSP 进行转账，此流程可确保从各种支付方式收到的资金得到准确核算并与相应的资金进行匹配。 Uber 的结算会计涉及抵消收入会计期间登记的应收账款、验证存入银行的现金以及分析与 PSP 的合同以确定与交易相关的费用、税金和其他费用。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;48f19f93-df8a-4d4f-822b-457c25df29f0&#34;,&#34;dropCap&#34;:false}&#34;&gt;此博客介绍了Uber先进的结算记账系统。结算会计对于确保财务准确性、防止欺诈和保持监管合规性至关重要。通过自动对账和提供近乎实时的报告，它提高了运营效率并支持战略业务决策。此外，它还通过分析 PSP 费用和税收来帮助管理交易成本。可靠的结算会计通过准确处理和及时解决付款问题来培养客户信任。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;b1730c08-4e9d-47af-abab-3c1bdde1ed18&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;2ad61c98-7341-4fac-8ca2-4ae6b93f88da&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-motivation&#34;&gt;动机&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;78f806f0-9dda-4c0a-81d1-45ab56a9cd38&#34;,&#34;dropCap&#34;:false}&#34;&gt;PSP 文件包括支付服务提供商发起的各种事件，每个事件均由不同方发起，对于维持准确的金融运营至关重要。我们建立了结算会计系统来管理这些事件。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;2fc0868d-a293-492a-ac65-9d3a34260f39&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-uber-initerated-events&#34;&gt;&lt;strong&gt;Uber 发起的事件&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;a04b5ef0-e7fe-4406-8eca-89838535154b&#34;,&#34;dropCap&#34;:false}&#34;&gt;当考虑支付生态系统中，Uber 发起的事件是 Uber 直接发起的行动。它们包括：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;40ffc0fa-1d14-4162-b666-1aae618cdd2d&#34;,&#34;ordered&#34;:false,&#34;values&#34;:&#34; “}”类=“wp-block-list”&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;催收&lt;/strong&gt;：Uber 发起催收n 的资金来自乘客提供的服务。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;退款&lt;/strong&gt;：当乘客欠款时，Uber 会启动退款流程。这可能是由于行程取消、服务问题或其他需要向乘客退还资金的原因造成的。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;012d12c3-1fc1-4c5b-ba15-c3a0ecdb4b60&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-rider-initerated-events&#34;&gt;&lt;br&gt;&lt;strong&gt;骑手发起活动&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;eb657940-a4ba-4677-b0a0-9f6e4850a063&#34;,&#34;dropCap&#34;:false}&#34;&gt;骑手发起事件由乘客触发，通常是为了响应问题或争议。其中包括：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;c8cc5949-2582-45a0-bb0f-730690789d3f&#34;,&#34;ordered&#34;:false,&#34;values&#34;:&#34; “}”类=“wp-block-list”&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;退款&lt;/strong&gt;：乘客可以对交易提出异议，从而导致退款。此过程涉及在乘客质疑其合法性后撤销交易，通常会导致资金从 Uber 账户中提取并退还给乘客。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;42fb3550-4e62-4b1e-8a4a-7c84aaad6544&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-psp-initerated-events&#34;&gt;&lt;br&gt;&lt;strong&gt;PSP 发起活动&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;9f392df5-7980-4e5b-bf4b-e0b197d5f2b7&#34;,&#34;dropCap&#34;:false}&#34;&gt;PSP 启动事件由 PSP 管理。其中包括几个关键的财务流程：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;ceee52b8-0632-4673-88be-e36b511d3901&#34;,&#34;ordered&#34;:false,&#34;values&#34;:&#34; “}”类=“wp-block-list”&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;行程费用&lt;/strong&gt;：这些费用与乘客的行程直接相关，例如网关费、卡网络费等。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;非行程费用&lt;/strong&gt;：这些费用是按汇总级别收取的费用而不是每次旅行，例如网关费用或卡网络费用。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;税费&lt;/strong&gt;：PSP 通常负责收取和汇出交易中适用的税费，根据税收法规。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;付款验证&lt;/strong&gt;：这涉及验证付款的真实性和有效性。 PSP 进行检查以防止欺诈，确保付款详细信息正确且资金可用。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p数​​据-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;4fb659a4-bb1a-4ce4-960a-0bf593b62ef3&#34;,&#34;dropCap&#34;:false}&#34;&gt;每个事件都会发挥作用全面财务管理体系中发挥着至关重要的作用，确保交易准确处理、纠纷妥善处理、监管合规。有效地理解和管理这些事件对于维持支付处理生态系统的财务完整性和运营效率至关重要。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;4c6d2080-a59c-4dd6-9dcc-da1bb84dedd5&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;e9947bc4-e53c-4618-8fcc-1c6c6442a2a5&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-challenges-with-the-psp-files&#34;&gt;PSP 文件的挑战&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;d44489e2-2461-4c5f-86ba-62c4bf266f75&#34;,&#34;dropCap&#34;:false}&#34;&gt;高效的金融交易管理在当今的数字环境中至关重要。支付服务提供商为这些交易提供便利，但协调 PSP 结算文件可能具有挑战性。以下是 PSP 结算文件的常见挑战：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;e2af04b3-ff0b-4ee3-b248-3a66adbdd8c9&#34;,&#34;ordered&#34;:false,&#34;values&#34;:&#34; “}”类=“wp-block-list”&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;复杂性：&lt;/strong&gt;每个 PSP 都有自己的文件格式，并且有不同的文件可用的交付机制。 &lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;重复：&lt;/strong&gt;当同一事务或条目被记录多次时，就会出现重复在结算档案中。这会导致财务记录出现差异并导致对账问题。例如，支付 100 美元的交易可能会被记录两次，导致总额夸大 200 美元，而不是实际的 100 美元。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;参考文献缺失或错误&lt;/strong&gt;：此挑战涉及缺乏必要的参考信息或结算文件中包含错误的参考信息，导致难以准确匹配交易。交易记录可能缺少唯一的交易 ID，或者 ID 不正确，与支付平台中的记录不匹配，从而导致对账问题。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;格式问题&lt;/strong&gt;：当结算文件中的数据不正确时，就会出现这些问题不符合预期格式，导致处理和核对困难。例如，和解文件可能包括 da测试采用 DD/MM/YYYY 格式，而不是预期的 MM/DD/YYYY 格式，或者包含处理系统未预期的额外列。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;不满足平衡方程：&lt;/strong&gt;平衡方程&lt;em&gt;定居点 –扣除额 = 付款&lt;/em&gt;&lt;strong&gt; &lt;/strong&gt;确保结算总额减去扣除额应等于付款金额。任何差异都表明结算数据中存在潜在错误。例如，如果和解金额为 10,000 美元，扣除金额为 2,000 美元，则赔付金额应为 8,000 美元。如果文件显示支付金额为 7,500 美元，则存在需要调查的差异。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;大型一次性交易监控：&lt;/strong&gt;当 PSP 进行大型一次性交易时关闭交易时，需要特殊监控以确保其按预期运行并且不会造成中断。例如，PSP 可能会进行一笔一次性交易，扣留 1000 万美元。系统必须密切监控这笔交易，以确保其得到正确处理并准确反映在所有财务记录中。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;24185785-9fb5-4637-b66b-6ab93e5d81aa&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;042bb279-3a9b-4765-9a3a-27e587175551&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-architecture&#34;&gt;架构&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;2f029662-28f5-46d4-bc36-d4bed0c7fe1b&#34;,&#34;dropCap&#34;:false}&#34;&gt;结算记账系统管理 PSP 文件的挑战并简化财务精度。 Uber 的结算会计有 3 个主要组件：Feed Ingestion Service、Feed Processor Service 以及 Reconciliation &amp; Accounting Service。每项服务都有特定的合同责任，这对于理解它们在整个结算流程中的角色至关重要。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;核心/图像&#34; data-wp-block=&#34;{&#34;id&#34;:1098209,&#34;宽度&#34;:&#34;802px&#34;,&#34;高度&#34;:&#34;自动&#34;,&#34;sizeSlug&#34;:&#34;大&#34;,&#34;linkDest信息&#34;:&#34;无&#34;,&#34;对齐&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;2cf7b2f1-c3cf-4a82-9466-e32365e18f44&#34;,&#34;alt&#34;:&#34;&#34;}&#34;类=“aligncenter size-large is-resized”&gt;&lt;img加载=“惰性”解码=“异步”宽度=“1024”高度=“309” src =“https://blog.uber-cdn.com/cdn-cgi/image/width=2160，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/architecture-17297141812639 -1024x309.png&#34; alt=&#34;&#34; 类=&#34;wp-image-1098209&#34;样式 =“宽度：802px;高度：自动” srcset =“https://blog.uber-cdn.com/cdn-cgi/image/width=1024，质量= 80，onerror =重定向，格式=自动/wp-content/uploads/2024/10/architecture-17297141812639.png 1024w， https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/architecture-17297141812639.png 300w , https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/architecture-17297141812639.png 768w , https://blog.uber-cdn.com/cdn-cgi/image/width=1536，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/architecture-17297141812639.png 1536w , https://blog.uber-cdn.com/cdn-cgi/image/width=2048，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/architecture-17297141812639.png 2048w “尺寸=”（最大宽度：1024px）100vw，1024px“ referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 2：结算会计基础设施的一部分。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;271b7874-c0f5-42d4-b2de-9fb7a47f5322&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;4630a1b6-0d11-4c40-a3eb-d8e18fc53c00&#34;,&#34;dropCap&#34;:false}&#34;&gt;文件摄取该服务是管理从第三方 PSP 获得的结算文件不可或缺的一部分。其主要功能包括从第三方来源获取这些文件并将其传输到指定的文件存储位置。这种方法可确保我们通过在内部存储文件来避免过度重试或重新处理来自第三方来源的请求。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;a38fcd16-cab7-4543-a646-2cb6901920c0&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-feed-ingestion-service&#34;&gt;&lt;br&gt;Feed 摄取服务&lt;/h3&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;核心/图像&#34; data-wp-block=&#34;{&#34;id&#34;:1098212,&#34;sizeSlug&#34;:&#34;大&#34;,&#34;linkDestination&#34;:&#34;无&#34;,&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;44a29c2a-e362-4a5f-9230 -ecf216a8d297&#34;,&#34;alt&#34;:&#34;&#34;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img加载=“惰性”解码=“异步”宽度=“1024”高度=“812”src=“https://blog.uber-cdn.com/cdn-cgi/image/width=2160，质量= 80，onerror =重定向，格式=自动/wp-content/uploads/2024/10/feed-ingestion-17297145987610-1024x812.png&#34; alt=&#34;&#34; class=&#34;wp-image-1098212&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/ wp-content/uploads/2024/10/feed-ingestion-17297145987610.png 1024w， https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/feed-ingestion-17297145987610。 300w.png, https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/feed-ingestion-17297145987610。 png 768w，https://blog.uber-cdn.com/cdn-cgi/image/width=1536，quality=80,onerror=重定向,format=auto/wp-content/uploads/2024/10/feed-ingestion-17297145987610.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=2048，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/feed-ingestion-17297145987610。 png 2048w”尺寸=“（最大宽度：1024px）100vw，1024px” referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 3：文件摄取服务的功能，包括下载、解析和规范化。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div &gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;f98eecf3-70ee-4bb1-b9f3-fc36f92a6c65&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;d0971fac-9043-487d-a283-dc4ed214ef72&#34;,&#34;dropCap&#34;:false}&#34;&gt;从以下位置下载文件PSP 涉及通过各种数据源（例如 SFTP、API 或 Blob 存储）访问 PSP 发布的结算文件。文件摄取服务直接从源检索这些文件并将它们上传到指定的 blob 存储。该存储充当集中存储库，可以从中访问文件以进行后续读取和处理。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;c3136627-cb64-4ff8-a6ac-d76fb389c721&#34;,&#34;dropCap&#34;:false}&#34;&gt;解析呈现由于不同 PSP 的结算文件缺乏标准化格式，这是一项重大挑战。这就需要针对每种格式和 PSP 进行动态解析。文件摄取服务在很大程度上依赖于解析 PSP 发送的文件的配置。对于每个 PSP 加入系统，都会编写解析器规则来解析文件以进行处理。在应用解析规则之前，我们将文件数据暂存为必要的标记以进行进一步处理。这称为数据标记化。标记化涉及使用分隔符进行分割并将数据标记为配置的标记。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;eae27851-4064-46e4-a52b-f863b04115e7&#34;,&#34;dropCap&#34;:false}&#34;&gt;自 PSP 发送以来数据以其独特的格式存在，这使得数据处理过程变得复杂。为了应对这一挑战，文件摄取服务执行一项称为标准化的关键功能。在解析过程中，该服务将从 PSP 接收到的各种数据格式转换为标准化的、可使用的格式。这种规范化过程可确保数据结构一致，从而促进下游处理更轻松、更高效。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;3b466219-0aeb-487b-8314-5029766107d4&#34;,&#34;dropCap&#34;:false}&#34;&gt;有效处理在 PSP feed 中，金额、货币和交易日期等基本字段被认为是关键字段。这些关键业务数据元素被提取并构建为标准化、规范化的格式，称为 PSPEvent。这个标准dized 格式确保提取信息的一致性和清晰度。随后，PSPEvent 被传输到馈送处理组件以进行进一步的处理和分析。 &lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;核心/图像&#34; data-wp-block=&#34;{&#34;id&#34;:1098214,&#34;sizeSlug&#34;:&#34;大&#34;,&#34;linkDestination&#34;:&#34;无&#34;,&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;4d009874-8211-4bf0-b66f -0fbe3f72b935&#34;,&#34;alt&#34;:&#34;&#34;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img加载=“惰性”解码=“异步”宽度=“1024”高度=“486”src=“https://blog.uber-cdn.com/cdn-cgi/image/width=2160，质量= 80，onerror =重定向，格式=自动/wp-content/uploads/2024/10/rules-17297147319977-1024x486.png&#34; alt=&#34;&#34;类=“wp-image-1098214”srcset=“https://blog.uber-cdn.com/cdn-cgi/image/width=1024，quality=80，onerror=redirect，format=auto/wp-content/上传/2024/10/rules-17297147319977.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/rules-17297147319977.png 300w , https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/rules-17297147319977.png 768w , https://blog.uber-cdn.com/cdn-cgi/image/width=1500，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/rules-17297147319977.png 1500w “尺寸=”（最大宽度：1024px）100vw，1024px“ referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 4：PSPEvent 标准化示例。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;54447c35-7d55-4f53-90f1-8f77d9ffd0be&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;2d3a5c07-5d52-490b-b070-a6f1350e3a50&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-feed-processor-service&#34;&gt;&lt;br&gt;Feed 处理器服务&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;80ebb41f-7de5-4ef1-86f1-a5a066604d0a&#34;,&#34;dropCap&#34;:false}&#34;&gt;如前所述，Feed Parser 将传入的 PSP 文件数据划分为不同的桶（称为 split）。这种有针对性的细分可确保以上下文相关的方式处理每个支付事件，从而为更高效、更精确的对账流程奠定基础。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;核心/图像&#34; data-wp-block=&#34;{&#34;id&#34;:1098217,&#34;宽度&#34;:&#34;700px&#34;,&#34;高度&#34;:&#34;自动&#34;,&#34;sizeSlug&#34;:&#34;完整&#34;,&#34;linkDest信息&#34;:&#34;无&#34;,&#34;对齐&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;0545ac55-542c-4be4-b198-4c9f868190a4&#34;,&#34;alt&#34;:&#34;&#34;}&#34; class =“aligncenter size-full is-resized”&gt;&lt;img加载=“lazy”解码=“异步”宽度=“2394”高度=“1584”src=“https://blog.uber-cdn.com/cdn -cgi/图像/宽度=2160，质量=80，onerror=重定向，格式=自动/wp-content/uploads/2024/10/image-10-23-24-at-1.25pm​​-17297151251181.jpeg&#34; alt=&#34;&#34; 类= “wp-image-1098217”样式=“宽度：700px；高度：自动” srcset =“https://blog.uber-cdn.com/cdn-cgi/image/width=2394，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/image-10 -23-24-at-1.25pm​​-17297151251181.jpeg 2394w， https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/image-10-23- 24-at-1.25pm​​-17297151251181.jpeg 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=1024，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/image-10-23- 24 点 1.25pm​​-17297151251181.jpeg 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/image-10-23- 24 点 1.25pm​​-17297151251181.jpeg 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/image-10-23- 24 点 1.25pm​​-17297151251181.jpeg 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=2048，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/image-10-23- 24-at-1.25pm​​-17297151251181.jpeg 2048w“尺寸=”（最大宽度：2394px） 100vw, 2394px&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 5：标准化事件的批处理和聚合功能。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div &gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;11d8a3d0-09aa-4d3b-9f98-4f8208afc210&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;c6c07030-bdf5-48ef-9d9a-346f6f6e39c0&#34;,&#34;dropCap&#34;:false}&#34;&gt;下面进行解析阶段，Feed Processor 介入并行处理每个桶。这种并行处理方法显着加快了大量 PSP 事件的处理速度，减少了总体处理时间并提高了吞吐量。对于拆分中的每个 PSP 事件，源处理器会调用协调服务。该服务将这些 PSP 事件与 Uber 支付平台记录进行精心匹配，确保每笔交易都得到准确核对。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;a4096ec0-fc67-4b80-ac77-182f538c9999&#34;,&#34;dropCap&#34;:false}&#34;&gt;但是，不所有和解尝试都是成功的。对于协调失败的事件，系统将其标记为不健康，并将其提交到DLQ（死信队列）。 DLQ 充当安全网，确保稍后重试并解决这些事件。该机制通过确保没有事件丢失或遗忘来维护我们支付处理管道的完整性和准确性。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;a3b70a01-7181-4b9e-8951-8882272e6c38&#34;,&#34;dropCap&#34;:false}&#34;&gt;一旦财务活动已结束饥饿后，它们会被送回饲料处理器。完成分割处理后，这些丰富的财务事件将被转发到我们的会计引擎。在此阶段，财务事件经过精心处理，相应的会计交易将持久存储在我们的数据存储库中。这可确保准确记录每项财务事件，从而保持 Uber 财务记录的保真度。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;7f5e5564-d4e9-48e6-933d-3e87e853d094&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-reconciliation-amp-accounting-service&#34;&gt;&lt;br&gt;对账和会计服务&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;71ec042c-2efb-4a80-8e4e-991d1d11c9a2&#34;,&#34;dropCap&#34;:false}&#34;&gt;根据&lt;一href=&#34;https://www.withum.com/resources/2022-acfe-report-to-the-nations-fraud-trends-and-key-takeaways/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;根据注册欺诈审查员协会&lt;/a&gt;的调查，企业通常会因欺诈而损失约 5% 的年收入，其中大部分源于财务记录的差异。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;55820ed7-f53e-4578-8328-0e0028a967eb&#34;,&#34;dropCap&#34;:false}&#34;&gt;付款对账，本质上，是支付服务提供商和银行记录之间交叉引用和验证金融交易的过程。主要目标是确保所有交易均得到准确核算，并确保支付服务提供商的结算与预期收入相符。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;797a34a5-7a2c-473b-9739-2a3191525d19&#34;,&#34;dropCap&#34;:false}&#34;&gt;除了防止欺诈，有效的支付对账可实现数据驱动的决策，展示各种支付服务提供商之间的趋势，并管理法律和财务的合规性法规。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;11b8223b-83e4-4f2f-adfc-1de3e28ff83c&#34;,&#34;dropCap&#34;:false}&#34;&gt;调节服务在协调 PSPEvents 与 Uber 支付平台上的记录方面发挥着至关重要的作用，确保 Uber 收到 PSP 参与处理的每次行程的付款交易。协调过程取决于匹配来自 PSP 和 Uber 支付平台的精确记录，并通过它们之间共享的名为 &lt;em&gt;transactionReference&lt;/em&gt; 的确定性字段来促进。这是在 Uber 和 PSP 之间的支付交易过程中建立和存储的唯一参考。 Uber 保留这些引用，以便在协调期间验证来自 PSP 的传入数据。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;42bd3ea2-54f3-4efe-b09a-2011ba1e0f09&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;id&#34;:1098219,&#34;sizeSlug&#34;:&#34;large&#34;,&#34;linkDestination&#34;:&#34;none&#34;,&#34;align&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;a9e8c9a0-f704-4d2a-b6d3-b1ba17bade0c&#34;,&#34;alt&#34;:&#34;&#34;}&#34;类=“aligncenter尺寸-大”&gt;&lt;img加载=“惰性”解码=“异步”宽度=“974”高度=“1024” src =“https://blog.uber-cdn.com/cdn-cgi/image/width=2160，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/image-10 -23-24-at-1.27pm-17297152992089-974x1024.jpeg&#34; alt=&#34;&#34;类=“wp-image-1098219”srcset=“https://blog.uber-cdn.com/cdn-cgi/image/width=974，quality=80，onerror=redirect，format=auto/wp-content/上传/2024/10/image-10-23-24-at-1.27pm-17297152992089.jpeg 974w，https://blog.uber-cdn.com/cdn-cgi/image/width=285，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/image-10- 23-24-at-1.27pm-17297152992089.jpeg 285w, https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/image-10-23- 24 点 1.27pm-17297152992089.jpeg 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1461，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/image-10-23- 24 点 1.27pm-17297152992089.jpeg 1461w, https://blog.uber-cdn.com/cdn-cgi/image/width=1632，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/image-10-23- 24-at-1.27pm-17297152992089.jpeg 1632w“尺寸=”（最大宽度：974px） 100vw, 974px&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 6：PSP 事件的对账和会计架构。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;42bd3ea2-54f3-4efe-b09a-2011ba1e0f09&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;bf8b9c19-9ecc-403c-89dc-5fd8245d87d0&#34;,&#34;dropCap&#34;:false}&#34;&gt;调节操作是行程完成后不会立即发生，但可能会延迟发生，因为 PSP 按计划向 Uber 发送数据（通常每天或每周，大约 T+7）交易后几天。鉴于 Uber 每月通过 PSP 处理约 10 亿次出行，该系统必须具备高可扩展性和强大的存储功能。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;d814020e-61c7-4622-b76a-cff09e2839e3&#34;,&#34;dropCap&#34;:false}&#34;&gt;简化操作为了分离行程摄取和 PSPEvent 处理之间的职责，我们设计了具有专用行程摄取服务的系统。行程信息通过 Apache Kafka&lt;sup&gt;®&lt;/sup&gt; 消费者摄取到系统中，该消费者在行程完成后立即基于事件触发。 Kafka 消费者使用必要的详细信息（例如行程 ID 和 transactionReference）来填充缓存，enab处理 PSPEvents 时能够快速检索和关联。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;243e1731-aed9-426f-a6dc-619c286e78c4&#34;,&#34;dropCap&#34;:false}&#34;&gt;何时进行调节成功后，活动将经历丰富的过程。它们补充了来自 15 个不同上游来源的数据，将其转化为综合性的金融事件。这些财务事件是自给自足的数据模型，包含精确和准确会计所需的所有信息。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;c0a9fd4d-71b1-4057-a277-6762284ba3ca&#34;,&#34;dropCap&#34;:false}&#34;&gt;这些金融事件发送到会计服务以生成财务会计交易。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;b3c213e7-e361-4b8f-8986-1174650c4763&#34;,&#34;dropCap&#34;:false}&#34;&gt;创建后当发生财务事件时，它会立即路由到会计引擎，在那里精心配置的会计规则将发挥作用。每种事件类型都与指导评估过程的特定会计规则相关联。这些财务事件带有所有必要的参数，以促进相关会计规则的应用。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;92a24c3d-04f2-4e9c-a4e4-b1b32fca9704&#34;,&#34;dropCap&#34;:false}&#34;&gt;每个金融事件具有预先配置的规则集，旨在计算会计处理的各个部分。这些事件被标记为位置、业务范围、账户类型等属性。账户类型大致分为资产、负债和损益。每个类别又进一步细分为收入、对应收入、应收账款、应付账款和费用。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;f5524533-ae41-4f0f-b9c7-bb5bbf318fca&#34;,&#34;dropCap&#34;:false}&#34;&gt;会计规则之后对给定事件进行评估，根据结果生成交易模型。该模型代表了应用于事件的会计处理。交易模型经过一系列验证，以确保准确性并符合会计准则。验证后，交易将保存在数据存储中，然后发布到 Kafka 主题以供下游系统使用。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;607ccc00-6ca1-4e7f-b5a3-1e648320e60a&#34;,&#34;dropCap&#34;:false}&#34;&gt;已验证的交易汇总到一个分类账中，提供所有金融活动的全面视图。该分类账对于财务报告、审计跟踪和战略决策至关重要。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;d41bc132-3f05-4d65-a1f0-8ebca8cdd9f8&#34;,&amp;quot;opacity&#34;:&#34;alpha-channel&#34;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:1,&#34;hash&#34;:&#34;d0279e52-e7fc-4433-ad9b-ed1edc9108aa&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-conclusion&#34;&gt;结论&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;300d14ed-d5f7-4d92-8d92-5d647f81fea9&#34;,&#34;dropCap&#34;:false}&#34;&gt;我们的全面结算Uber 的会计系统旨在有效地处理每月处理的大量交易。通过使用包括解析、处理、对账、充实和会计在内的结构化方法，我们确保准确捕获和记录每个财务事件。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;062b88af-8ec0-4b95-9269-0e06bb8896dd&#34;,&#34;dropCap&#34;:false}&#34;&gt;这个强大的系统不仅加快了处理时间，还提高了我们财务运营的准确性和完整性。自动对账和实时报告可提高运营效率、支持战略业务决策并保持法规遵从性。此外，它还有助于管理交易成本、防止欺诈，并通过准确及时地解决支付问题来培养客户信任。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;dbd560d5-73b2-4dc6-b86e-a15319458955&#34;,&#34;dropCap&#34;:false}&#34;&gt;最终，这个结算会计框架强调了 Uber 对卓越运营和可靠性的承诺，确保我们的财务流程安全。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;fontSize&#34;:&#34;小&#34;,&#34;哈希&#34;:&#34;77267101-94c4-4706-bb0a-d07e537f27df&#34;,&#34;dropCap&#34; :false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Apache&lt;sup&gt;®&lt;/sup&gt;，Apache Kafka&lt;sup&gt;®&lt;/sup&gt;、Kafka&lt;sup&gt;®&lt;/sup&gt;、Apache Cassandra&lt;sup&gt;®&lt;/sup&gt;、Cassandra&lt;sup&gt;®&lt;/sup&gt;、Apache Spark&lt;sup&gt;™&lt;/sup &gt;、Spark&lt;sup&gt;™&lt;/sup&gt;、Apache Hive&lt;sup&gt;™&lt;/sup&gt; 和 Hive&lt;sup&gt;™&lt;/sup&gt; 是 Apache Software Foundation 在美国和/或其他国家。使用这些标记并不暗示 Apache 软件基金会的认可。&lt;/em&gt;&lt;/p&gt;</description>
      <pubDate>Thu, 24 Oct 2024 05:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Open Source and In-House: How Uber Optimizes LLM Training】开源和内部：Uber 如何优化 LLM 培训</title>
      <link>https://www.uber.com/blog/open-source-and-in-house-how-uber-optimizes-llm-training/</link>
      <description>【&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:1,&amp;quot;hash&amp;quot;:&amp;quot;2a1bfc33-e3e2-438f-ae6e-3769f3795e56&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0b5d692f-13a5-447f-bcc4-de8dc6bdb7f9&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Generative AI powered by LLMs (Large Language Models) has a wide range of applications at Uber, like Uber Eats recommendations and search, customer support chatbots, code development, and SQL query generation.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2bac8375-db6b-4ae6-8d93-a2aae00fd471&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;To support these applications, Uber leverages open-source models like Meta&lt;sup&gt;®&lt;/sup&gt; Llama 2 and Mistral AI Mixtral&lt;sup&gt;®&lt;/sup&gt;, and closed-source models from OpenAI, Google, and other third-party providers. As a leading company in mobility and delivery, Uber also has considerable domain-specific knowledge that can improve LLM performance for these applications. ‌One way Uber incorporates this domain-specific knowledge is through RAG (Retrieval Augmented Generation).&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7e841d89-1252-4bc2-b78f-b3a1630cf7fc&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Uber also explores ways to adapt LLMs to Uber’s knowledge base through continuous pre-training and instruction fine-tuning. For example, for Uber Eats, we found that a model finetuned on Uber’s knowledge of items, dishes, and restaurants could improve the accuracy of item tagging, search queries, and user preference understanding compared to open-source model results. Even further, these finetuned models can achieve similar performance to GPT-4 models while allowing for much more traffic at Uber’s scale.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;1946080a-21ea-4227-8723-e6eb98d414d6&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;AI community support and open-source libraries like &lt;a href=&#34;https://huggingface.co/docs/transformers/index&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;transformers&lt;/a&gt;, Microsoft DeepSpeed&lt;sup&gt;®&lt;/sup&gt;, and &lt;a href=&#34;https://pytorch.org/blog/introducing-pytorch-fully-sharded-data-parallel-api/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;PyTorch FSDP&lt;/a&gt; empower Uber to rapidly build infrastructure to efficiently train and evaluate LLMs. Emerging open-source initiatives like&lt;a href=&#34;https://github.com/facebookresearch/llama-recipes&#34;&gt; &lt;/a&gt;Meta&lt;sup&gt;®&lt;/sup&gt; Llama 3 &lt;a href=&#34;https://github.com/facebookresearch/llama-recipes&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;llama-recipes&lt;/a&gt;, Microsoft &lt;a href=&#34;https://github.com/microsoft/LoRA&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;LoRA&lt;/a&gt;&lt;sup&gt;®&lt;/sup&gt;, &lt;a href=&#34;https://github.com/artidoro/qlora&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;QLoRA&lt;/a&gt;&lt;sup&gt;™&lt;/sup&gt;, and Hugging Face &lt;a href=&#34;https://github.com/huggingface/peft&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;PEFT&lt;/a&gt;&lt;sup&gt;™&lt;/sup&gt; simplify the fine-tuning lifecycle for LLMs and reduce engineering efforts. Tools like &lt;a href=&#34;https://github.com/ray-project/ray&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Ray&lt;/a&gt;&lt;sup&gt;®&lt;/sup&gt; and &lt;a href=&#34;https://github.com/vllm-project/vllm&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;vLLM&lt;/a&gt;&lt;sup&gt;™&lt;/sup&gt; maximize the throughput of large-scale pre-training, fine-tuning, offline batch prediction, and online serving capabilities for open-source LLMs.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d374805e-07fa-44fa-a4a7-020598b58abc&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The novel in-house LLM training approach described in this blog ensures Uber’s flexibility and speed in prototyping and developing Generative AI-driven services. We use SOTA (state-of-the-art) open-source models for faster, cheaper, and more secure and scalable experimentation. Optimized in-house LLM training helps Uber maintain cutting-edge technology innovations and passes on the benefits to people who use the Uber app.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a0029706-3a73-4cc2-a568-7c36b37caf0b&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f86bcfc9-0737-45be-9e65-5a7d07a833d5&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-infrastructure-stack&#34;&gt;Infrastructure Stack&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;abe7dc70-d3c6-4977-bf70-07599b182907&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;A critical component of LLM training at Uber is the thoroughly tested infrastructure stack that enables rapid experimentation.&amp;nbsp;&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;ba22d7dd-5289-43c0-b348-01d8f8ddcc6b&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-layer-0-hardware&#34;&gt;Layer 0: Hardware&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7a540b97-614a-4d27-95b2-aa5e4853fc23&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Uber’s in-house LLM workflows are scheduled on 2 kinds of computing instances: (1) NVIDIA&lt;sup&gt;®&lt;/sup&gt; A100 GPU instances in Uber’s on-prem clusters and (2) NVIDIA H100 GPU instances on Google Cloud. Each Uber on-prem A100 host is equipped with 4 A100 GPUs, 600 GB memory, and 3 TB SSD.&amp;nbsp; On Google Cloud, each host is a 3-highgpu-8g machine type, with 8 H100 GPUs, 1872GB CPU memory, and 6TB SSD. These machines are managed as part of the &lt;a href=&#34;https://www.uber.com/en-MX/blog/crane-ubers-next-gen-infrastructure-stack/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Crane&lt;/a&gt; infrastructure stack.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;e69d694b-39e3-4650-824d-947f2ba180b7&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-layer-1-orchestration&#34;&gt;Layer 1: Orchestration&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;3a32a183-2b47-42a7-902f-3dc9c2fde9dc&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Computing resources are managed by Kubernetes&lt;sup&gt;®&lt;/sup&gt; and Ray. Kubernetes is used to schedule training workloads and manage hardware requirements. Ray, along with the KubeRay operator, is used for distributing the workload to the workers.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;d742a5e0-215c-4584-a99d-2cd2f2ec42d9&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-layer-2-federation&#34;&gt;Layer 2: Federation&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;353d646a-5615-4d50-b4bc-b0ffaffc27dd&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The end-to-end flow of resource management is depicted in Figure 1 below. Our multiple Kubernetes clusters are managed by a federation layer, which schedules workloads based on resource availability. Training jobs are modeled as a Job with multiple Tasks. The JobSpec defines the goal state of the Job and includes information like the instance SKUs, clusters, compute/storage resources, and post-Docker-launch commands to set up tokens and environment variables.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1097951,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;dff8f22e-4f52-4cf6-ab64-b2c4eaecab2c&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;799&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/fig1k8s-17291800154604-1024x799.png&#34; alt=&#34;&#34; class=&#34;wp-image-1097951&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/fig1k8s-17291800154604.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/fig1k8s-17291800154604.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/fig1k8s-17291800154604.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1471,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/fig1k8s-17291800154604.png 1471w&#34; sizes=&#34;(max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 1: Resource scheduling for LLM workflows.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;75c9c747-bc39-426c-85aa-e0c39e60e5b8&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;5dc9360d-b887-467d-9b4d-a21813c32596&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;97a27885-ee5a-402d-b7d8-36ad09297d0c&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-training-stack&#34;&gt;Training Stack&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9600c43d-0531-437a-82b9-3968d02c9cf4&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We fully embraced open source when building our LLM training stack. Specifically, we integrated PyTorch, Ray, Hugging Face, DeepSpeed, and NCLL to enable training LLMs with the Michelangelo platform.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;13622ae7-6133-4412-9f2b-11fef3eac11a&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;PyTorch is our chosen deep learning framework because most SOTA open-source LLMs and techniques are implemented in PyTorch.&amp;nbsp;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Ray Train provides a thin API to perform distributed training using PyTorch on Ray clusters.&amp;nbsp;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Hugging Face Transformers provide APIs and tools to download and train SOTA transformer-based models.&amp;nbsp;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;DeepSpeed is a deep learning optimization software suite that enables unprecedented scale and speed for deep learning training and inference.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;08d5f9d1-cc0e-4979-80ea-011ebf35983f&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;As shown in Figure 2 below, Ray is at the top of the LLM training stack for coordinating tasks. NCCL is at the bottom level for GPU communication.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1097891,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;1f4b6be8-b85d-4ea3-94c7-48ec2964ce74&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;535&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/fig2-17291323864935-1024x535.png&#34; alt=&#34;&#34; class=&#34;wp-image-1097891&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/fig2-17291323864935.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/fig2-17291323864935.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/fig2-17291323864935.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/fig2-17291323864935.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=1680,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/fig2-17291323864935.png 1680w&#34; sizes=&#34;(max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 2: Uber LLM training software stack.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;292322d2-b608-44f1-93bb-8a794cb0ae6e&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9ce7e044-4e63-414e-91bb-787b66baa245&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;1388b477-2ada-46d4-8926-b47d9e2cc6c9&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-distributed-training-pipeline&#34;&gt;Distributed Training Pipeline&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;93674e70-08af-454f-8eff-046a9cd96cdd&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;To support our in-house implementation, we built an LLM distributed training pipeline that includes host communication, data preparation, distributed model training, and model checkpoint management. Here is how it works:&lt;br&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;ordered&amp;quot;:true,&amp;quot;hash&amp;quot;:&amp;quot;901cb5da-a158-4522-a928-e1b50df61ef7&amp;quot;,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Multi-host and multi-GPU communication&lt;/strong&gt;. To start, a TorchTrainer in Ray Train creates multiple workers in the form of Ray Actors, handles in-bound communication (used by Ray Object Store), and initializes a PyTorch distributed process group (used by Deepspeed) on GPUs across all hosts.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Data preparation&lt;/strong&gt;. The LLM training framework supports remote data sources on Uber HDFS, Uber Terrablob, and Hugging Face public datasets.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Model training&lt;/strong&gt;. Tokenization converts input text into integers that will be fed into the models. For distributed training, each GPU worker initializes a Hugging Face Transformers Trainer object using the DeepSpeed ZeRO stage 1/2/3 options.&amp;nbsp;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Saving results.&lt;/strong&gt; Metrics associated with the training experiment are saved on the Uber Comet server. The main training process on the Ray head node pushes training model weights and associated configuration files to Terrablob storage.&amp;nbsp;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;aceba0d7-957c-43bf-beef-30c6b1b9db41&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXdT3F2A2DQU9CZxNSsCKbIAIB7ZfHvNFKT2W7E2DRlpzCxmyD0NIwbwy0CfOCs2dnPJdQyHLuH5Ia7Dt5QSgICSuNmz9igsWp_TabDWQ8XCJs1GWbMBRohsvSv9qg-J19oJyuLqixlDKAlRZrfZyhzu3l_3?key=F9WnaYLpB5WvGJfBHoMLXQ&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 3: Uber LLM distributed training pipeline.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;63ddda68-46ce-42ab-a705-5330656936de&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;79024f68-5234-4376-958a-00799f61c598&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ddd7ea80-3f24-40ac-b5d0-c51ccdf19df5&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-training-results&#34;&gt;Training Results&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;5e250810-041e-4b72-b1f2-503d255d34fa&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Our exploration involved demonstrating that the in-house Michelangelo platform has the capability and scalability to train any open-source LLM with throughput optimization.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;a3b35586-204b-4320-b82b-69c884b942be&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-training-on-state-of-the-art-llms&#34;&gt;Training on State-Of-The-Art LLMs&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;770ae998-1513-4b07-9ddd-21064b7f0d0e&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We found that the Michelangelo platform can support the largest open-source LLMs while training under different settings, including full-parameter fine tuning and parameter-efficient fine tuning with LoRA and QLoRA.&amp;nbsp;&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1097895,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;60b1c16e-2cee-4f9d-9961-44f6bb418189&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;505&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-4-17291324832411-1024x505.png&#34; alt=&#34;&#34; class=&#34;wp-image-1097895&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-4-17291324832411.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-4-17291324832411.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-4-17291324832411.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1467,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-4-17291324832411.png 1467w&#34; sizes=&#34;(max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 4: Training loss of Llama 2 models with and without (Q)LoRA.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f8c07128-ce1d-418f-969b-2993735ab8ae&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;62e2ae55-2adb-47db-88d6-6aac1a579201&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Figure 4 (above) shows the training loss curve for Llama 2 13B and Llama 2 70B with and without LoRA. We found that, even if LoRA and QLoRA use far fewer GPUs and train much faster with fewer GPUs, the loss decreases much less than the full parameter training. Therefore, it’s important to improve the throughput/Model Flops Utilization (MFU) for full parameter fine-tuning of LLMs.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;2794d532-813b-4ec7-8267-c36c5bfac293&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-throughput-mfu-optimization&#34;&gt;&lt;br&gt;Throughput/MFU Optimization&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;027c8334-2a64-4831-af4a-324f5abd02f0&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Scaling the transformer architecture is heavily bottlenecked by the model’s self-attention mechanism, which has quadratic time and memory complexity. To achieve better training throughput, we’ve explored several industry recommended efforts to optimize GPU memory usage: CPU offload and flash attention.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a34ef321-de14-4067-af33-e2eb15596493&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The first training throughput optimization we explored was using DeepSpeed ZeRO-stage-3 CPU Optimizer Offload, which led to at least 34% GPU memory reduction with the same batch size when training Llama 2 70B. This allowed us to increase the batch size by 3-4 times but still keep the same forward and backward speed, so the training throughput increased by 2-3 times.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;758b796c-630f-443a-9953-7f554395bfe6&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The second training throughput optimization explored was following Hugging Face’s suggestion to use flash attention. Flash attention is an attention algorithm used to reduce quadratic complexity and scale transformer-based models more efficiently, enabling faster training. With flash attention, we could save 50% of GPU memory with the same batch size. If we maximized the usage of GPU memory, then we could double the batch size while keeping compatible forward and backward speed.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;89be987d-e630-44c7-b748-e23a605041bc&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;To study training efficiency, we used Hardware Model Flops Utilization (&lt;a href=&#34;https://arxiv.org/pdf/2204.02311.pdf&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;MFU&lt;/a&gt;). MFU is the ratio of the observed throughput to the theoretical maximum throughput if the benchmarked hardware setup was operating at peak FLOPS with no memory or communication overhead.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;95c4ddbb-d746-4625-84fb-001e68a2d445&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In our benchmark, we used &lt;a href=&#34;https://deepspeed.readthedocs.io/en/latest/flops-profiler.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Deepspeed Flops Profiler&lt;/a&gt; to obtain the expected FLOPS number. FLOPS per GPU was calculated as: forward and backward FLOPS per GPU/iteration latency. Then we divided it by the device’s peak theoretical performance and obtained our final MFU metric. ‌In all our experiments, we maximized the batch size under different optimization settings so that GPU memory was fully utilized. We did this with the training arguments, setting &lt;em&gt;gradient_accumulation_steps = 1&lt;/em&gt; so that &lt;em&gt;macro_batch_size = micro_batch_size x num_gpus x 1&lt;/em&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;3eb1c35d-1aa8-4459-9bcb-c207671f538f&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Here’s what we found:&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0824a484-47fe-415d-990c-59086f7e64a6&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Throughput&lt;/strong&gt;: Both flash attention and CPU offload saved GPU memory, enabling us to increase batch size 2 to 7 times during Llama 2 70B training with maximum GPU memory usage (70GB-80GB) on 32 GPUs (8 hosts on A100, 4 hosts on H100). This led to significant throughput increases.&amp;nbsp;&amp;nbsp;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;MFU&lt;/strong&gt;: MFU on H100 was lower than on A100, and GPU utilization wasn’t full with maximum GPU memory usage. This might indicate that for Llama 2 70B training, we have memory-bound GPU instead of compute-bound. That’s also why CPU offload could help the most to improve MFU, as plotted in Figure 5 below.&amp;nbsp;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Compute or Memory Bound&lt;/strong&gt;: The story is slightly different for Llama 2 7B on 4 A100/H100 on a single host, where we may have compute-bound GPU instead of memory-bound GPU.&amp;nbsp; We saw that the MFU of training Llama 2 7B was higher than training Llama 2 70B, and CPU offload was not helpful to improve MFU. Flash attention could help the most, as shown in Figure 6 below.&amp;nbsp;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Network: &lt;/strong&gt;In our experiment, the network usage was around 10GB/second on H100 and 3GB/second on A100 for Llama 2 70B model training. This is small compared to the infra theoretical value, indicating that the network is yet to be a bottleneck compared to GPU compute and memory.&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1097898,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;f6539680-e550-403c-8250-280ec77192ac&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;634&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-5-17291325919540-1024x634.png&#34; alt=&#34;&#34; class=&#34;wp-image-1097898&#34; title=&#34;Chart&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-5-17291325919540.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-5-17291325919540.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-5-17291325919540.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1234,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-5-17291325919540.png 1234w&#34; sizes=&#34;(max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 5: Model Flops Utilization of training Llama 2 70B.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a4b411e3-c488-4737-a15d-7fc23eeb3e67&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1097899,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;bca783a9-96e7-4c90-9dd0-6dd950e0cbb9&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;635&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-6-17291326224707-1024x635.png&#34; alt=&#34;&#34; class=&#34;wp-image-1097899&#34; title=&#34;Chart&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-6-17291326224707.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-6-17291326224707.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-6-17291326224707.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1328,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-6-17291326224707.png 1328w&#34; sizes=&#34;(max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 6: Model Flops Utilization of training Llama 2 7B.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f1e75079-9ed3-40d4-9930-c00265e9045c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;5558af28-a0c8-493d-8ca2-1de822e467e0&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-llm-scorer&#34;&gt;LLM Scorer&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a73b63d3-6d45-465b-b421-b79fbf01737f&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;To evaluate the raw or finetuned models, we also implemented an offline LLM scorer to predict on large datasets. We used Ray to create a cluster on Kubernetes with multiple instances and each instance with multiple GPUs. This way, we could distribute the data and score in parallel. On each instance, we used inference servers such as &lt;a href=&#34;https://github.com/vllm-project/vllm&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;vLLM&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;4a617aea-dbba-4d40-95ba-8c8c612e6cac&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In our implementation, we used Ray jobs as the operational foundation. Each Ray job allocates a specified number of CPU and GPU resources, downloads models, and partitions datasets by rank. The Ray `ActorPool` aggregates the outputs from different Ray Actors. Figure 7 below shows the implementation of this LLM scorer.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;e9d41adb-1d33-48a2-988b-33d8c40de5fb&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXcptqsUis4TPQFJP9-OfxrU60nUal734joeKAohIc3jWOMuOU30fC58yufglGf4nzT3KI8VggrcxoASoFb8aSmOQKMXOk5ccrXsIhpQAr_-Pomo-INJ-MUMOMIYkgqKv9u2Q7Dwg3laKTYJ750mU3w45i8?key=F9WnaYLpB5WvGJfBHoMLXQ&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 7: Distributed LLM scorer with Ray and vLLM.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;72b43d00-c050-41c9-867a-fc38576e1944&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;59341eaf-c14b-41c0-a3e4-35d84e603f04&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Figure 8 below summarizes the performance of batch prediction for Mixtral 8x7b models using 2 A100 and H100 GPUs, where the input token size is 4K and the maximum output tokens are 700. We observed that output tokens per second increased linearly for batch sizes up to 64 on both GPU types. Notably, the H100 achieved a throughput 3 times higher than the A100. This benchmark helps teams make production decisions and plan resource requirements.&amp;nbsp;&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;width&amp;quot;:&amp;quot;700px&amp;quot;,&amp;quot;height&amp;quot;:&amp;quot;auto&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;5dc1b9ad-6441-4171-8b85-d233257a4bf8&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter is-resized&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXfpULj9Ck6J4EpGtKKPx8e4f_q925QVj3CisQlmWVKLzr1NiTnTpsSSxOj_NfaZZ8eQWuxxBRM0Grb280IbiDTkdRqaK5RSg3moI346umhtDDnHFqVOhPflkhI0Bk0pIbI272dXCbLHt0zw0iKOafuN-l4?key=F9WnaYLpB5WvGJfBHoMLXQ&#34; alt=&#34;&#34; style=&#34;width:700px;height:auto&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 8: Throughput for Mixtral-8x7b on 2 x A100/H100.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;1dcee380-7696-48be-ad2b-c7ac66edcf82&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d8826856-01f0-4d2b-9b39-9b0ab9436a37&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:1,&amp;quot;hash&amp;quot;:&amp;quot;95cf00c9-778f-4b51-b272-fc8090e9c008&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-conclusion&#34;&gt;Conclusion&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6fff4811-1c1f-4a4b-b352-069d8588e134&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;As more and larger open-source models get published, like Llama 3 450B, we’ll improve our LLM training infrastructure to support fine-tuning them. Using these finetuned models will help us improve things like Uber Eats recommendations and search.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c1055457-0d60-4315-8a6a-9846867752e7&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Thinking about the broader industry, our journey exploring in-house LLM training has brought us these insights:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;ordered&amp;quot;:true,&amp;quot;hash&amp;quot;:&amp;quot;caf84a04-8f32-464e-a823-e06addcf93ee&amp;quot;,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Embracing open source is the key &lt;/strong&gt;&lt;strong&gt;to catching up with generative AI trends.&lt;/strong&gt; In a short time, we’ve seen and benefitted from the fast-growing open-source community Hugging Face and the rapid adoption of DeepSpeed. Open-source model structures like Falcon, Llama, and Mixtral are published one-after-another every few months. With open-source solutions, we can train SOTA LLMs and achieve the industry standard MFU to maximize GPU usage.&amp;nbsp;&amp;nbsp;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Having long-time-tested and extensible cluster management is critical to catching the latest trends quickly.&lt;/strong&gt; Our well-established Ray and Kubernetes stack makes it easy to integrate new open-source solutions into our production environment.&amp;nbsp;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;79492b52-80a3-484e-96db-eaea716fb532&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;34b325a2-53fb-47e7-9c70-956bb37ea040&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e1c7934a-3ba0-4400-8d03-91333882acb2&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-acknowledgements&#34;&gt;Acknowledgements&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d61854a1-4a5c-4936-870c-08fc26b173a6&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;This major step for GenAI at Uber couldn’t have happened without the many teams at Uber who contributed to it: Michelangelo, Applied AI, Dev Platform, and Platform Core Service.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;0cc3578a-4276-48eb-b5bb-dda18aac1570&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Apache&lt;sup&gt;®&lt;/sup&gt;, Apache Kafka, Kafka, Apache Spark, Spark, and the star logo are either registered trademarks or trademarks of the Apache Software Foundation in the United States and/or other countries. No endorsement by The Apache Software Foundation is implied by the use of these marks.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;1f17d0fc-b135-4a11-81f0-461744185c12&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Deepspeed&lt;sup&gt;®&lt;/sup&gt; and its logo, LoRA&lt;/em&gt;&lt;sup&gt;®&lt;/sup&gt;&lt;em&gt; and its logo&lt;/em&gt; &lt;em&gt;are registered trademarks of Microsoft&lt;sup&gt;®&lt;/sup&gt; in the United States and other countries. No endorsement by Microsoft is implied by the use of these marks.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;7553dd58-1d4a-407e-bd4d-8d5ed7be3771&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Kubernetes&lt;sup&gt;®&lt;/sup&gt; and its logo are registered trademarks of The Linux Foundation&lt;sup&gt;®&lt;/sup&gt; in the United States and other countries. No endorsement by The Linux Foundation is implied by the use of these marks.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;d91b4603-ef84-4b0e-bd0a-c31aedef4532&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Llama 2&lt;sup&gt;®&lt;/sup&gt;, Llama 3&lt;sup&gt;®&lt;/sup&gt; and their logos are registered trademarks of Meta&lt;sup&gt;®&lt;/sup&gt; in the United States and other countries. No endorsement by Meta is implied by the use of these marks.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;b8b3f2bb-79ed-43e0-ae31-3f70e2215105&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Mixtral&lt;sup&gt;®&lt;/sup&gt; and its logo are registered trademarks of Mistral AI&lt;sup&gt;®&lt;/sup&gt; in the United States and other countries. No endorsement by Mistral AI is implied by the use of these marks.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;fc01d91d-1ad5-4ff6-b213-31414422427d&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;NVIDIA&lt;sup&gt;® &lt;/sup&gt;and the NVIDIA logo are trademarks and/or registered trademarks of NVIDIA Corporation in the U.S. and other countries. No endorsement by NVIDIA is implied by the use of these marks.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;c3799488-dfdf-4488-9a62-da6179757c3d&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;PyTorch, the PyTorch logo and any related marks are trademarks of The Linux Foundation.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;53d78373-5c6a-4d62-9fd1-83994303c000&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Transformers&lt;sup&gt;®&lt;/sup&gt; and its logo are registered trademarks of Hugging Face&lt;sup&gt;®&lt;/sup&gt; in the United States and other countries. No endorsement by Hugging Face is implied by the use of these marks.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;33545b90-edf8-4266-a93c-c0c04c917f2e&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;1b3dfcd7-24d6-409c-a60c-028e45f2e6be&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;308d94a8-c895-41fb-acd9-12964ced97c6&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;】&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:1,&#34;hash&#34;:&#34;2a1bfc33-e3e2-438f-ae6e-3769f3795e56&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-introduction&#34;&gt;简介&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;0b5d692f-13a5-447f-bcc4-de8dc6bdb7f9&#34;,&#34;dropCap&#34;:false}&#34;&gt;由生成式 AI 驱动LLM（大型语言模型）在 Uber 拥有广泛的应用，例如 Uber Eats 优食推荐和搜索、客户支持聊天机器人、代码开发、和 SQL 查询生成。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;2bac8375-db6b-4ae6-8d93-a2aae00fd471&#34;,&#34;dropCap&#34;:false}&#34;&gt;支持这些应用程序中，Uber 利用 Meta&lt;sup&gt;®&lt;/sup&gt; Llama 2 和 Mistral AI 等开源模型Mixtral&lt;sup&gt;®&lt;/sup&gt;，以及来自 OpenAI、Google 和其他第三方提供商的闭源模型。作为移动和交付领域的领先公司，Uber 还拥有大量特定领域的知识，可以提高这些应用程序的 LLM 性能。 ‌Uber 整合这种特定领域知识的一种方式是通过 RAG（检索增强生成）。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;7e841d89-1252-4bc2-b78f-b3a1630cf7fc&#34;,&#34;dropCap&#34;:false}&#34;&gt;Uber 还探索通过持续的预训练和指令微调，使法学硕士适应 Uber 的知识库。例如，对于 Uber Eats 优食，我们发现与开源模型结果相比，根据 Uber 对商品、菜肴和餐厅的了解进行微调的模型可以提高商品标记、搜索查询和用户偏好理解的准确性。更进一步，这些经过微调的模型可以实现与 GPT-4 模型类似的性能，同时允许 Uber 规模的流量大幅增加。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;1946080a-21ea-4227-8723-e6eb98d414d6&#34;,&#34;dropCap&#34;:false}&#34;&gt;AI 社区支持以及开源库，例如 &lt;a href=&#34;https://huggingface.co/docs/transformers/index&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;变压器&lt;/a&gt;、Microsoft DeepSpeed&lt;sup&gt;®&lt;/sup&gt; 和 &lt;a href=&#34;https://pytorch.org/blog/introducing-pytorch-filled-sharded-data-parallel-api/ &#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;PyTorch FSDP&lt;/a&gt; 使 Uber 能够快速构建基础设施，以高效地培训和评估法学硕士。新兴的开源计划，如&lt;a href=&#34;https://github.com/facebookresearch/llama-recipes&#34;&gt;&lt;/a&gt;Meta&lt;sup&gt;®&lt;/sup&gt; Llama 3 &lt;a href=&#34;https:// github.com/facebookresearch/llama-recipes&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;llama-recipes&lt;/a&gt;，微软 &lt;a href=&#34;https://github.com/microsoft/LoRA&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;LoRA&lt;/a&gt;&lt;sup&gt;®&lt;/sup&gt;，&lt;a href=&#34;https://github.com/artidoro/qlora&#34; target=&#34;_blank&#34; rel= &#34;noreferrer noopener&#34;&gt;QLoRA&lt;/a&gt;&lt;sup&gt;™&lt;/sup&gt; 和 Hugging Face &lt;a href=&#34;https://github.com/huggingface/peft&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;PEFT&lt;/a&gt;&lt;sup&gt;™&lt;/sup&gt; 简化了法学硕士的微调生命周期并减少了工程工作量。&lt;a 等工具href=&#34;https://github.com/ray-project/ray&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Ray&lt;/a&gt;&lt;sup&gt;®&lt;/sup&gt; 和 &lt;a href=&#34;https://github.com/vllm-project/vllm&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;vLLM&lt;/a&gt;&lt;sup&gt;™&lt;/sup&gt; 最大化大规模预编译的吞吐量-开源LLM的训练、微调、离线批量预测和在线服务功能。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;d374805e-07fa-44fa-a4a7-020598b58abc&#34;,&#34;dropCap&#34;:false}&#34;&gt;小说本博客中描述的内部法学硕士培训方法确保了 Uber 在原型设计和开发生成式人工智能驱动服务方面的灵活性和速度。我们使用 SOTA（最先进的）开源模型来进行更快、更便宜、更安全和可扩展的实验。优化的内部法学硕士培训有助于 Uber 保持尖端技术创新，并将好处传递给 Uber 应用的用户。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;a0029706-3a73-4cc2-a568-7c36b37caf0b&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;f86bcfc9-0737-45be-9e65-5a7d07a833d5&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-infrastruct-stack&#34;&gt;基础设施堆栈&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;abe7dc70-d3c6-4977-bf70-07599b182907&#34;,&#34;dropCap&#34;:false}&#34;&gt;关键组件Uber 的 LLM 培训的核心是经过彻底测试的基础架构堆栈，可实现快速实验。  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;ba22d7dd-5289-43c0-b348-01d8f8ddcc6b&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-layer-0-hardware&#34;&gt;第 0 层：硬件&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;7a540b97-614a-4d27-95b2-aa5e4853fc23&#34;,&#34;dropCap&#34;:false}&#34;&gt;Uber 的 in- house LLM 工作流程安排在 2 种计算实例上：(1) NVIDIA&lt;sup&gt;®&lt;/sup&gt; A100 GPU 实例Uber 的本地集群和 Google Cloud 上的 (2) 个 NVIDIA H100 GPU 实例。每台 Uber On-Prem A100 主机均配备 4 个 A100 GPU、600 GB 内存和 3 TB SSD。  在 Google Cloud 上，每台主机都是 3-highgpu-8g 机器类型，具有 8 个 H100 GPU、1872GB CPU 内存和 6TB SSD。这些机器作为 &lt;a href=&#34;https://www.uber.com/en-MX/blog/crane-ubers-next-gen-infrastruct-stack/&#34; target=&#34;_blank&#34; rel=&#34; 的一部分进行管理noreferrer noopener&#34;&gt;Crane&lt;/a&gt; 基础设施堆栈。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;e69d694b-39e3-4650-824d-947f2ba180b7&#34;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-layer-1-orchestration&#34;&gt;第 1 层：编排&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;3a32a183-2b47-42a7-902f-3dc9c2fde9dc&#34;,&#34;dropCap&#34;:false}&#34;&gt;计算资源是由 Kubernetes&lt;sup&gt;®&lt;/sup&gt; 和 Ray 管理。 Kubernetes 用于安排训练工作负载并管理硬件要求。 Ray 与 KubeRay 运算符一起用于将工作负载分配给工作人员。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;d742a5e0-215c-4584-a99d-2cd2f2ec42d9&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-layer-2-federation&#34;&gt;第 2 层：联合&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;353d646a-5615-4d50-b4bc-b0ffaffc27dd&#34;,&#34;dropCap&#34;:false}&#34;&gt;结束-资源管理的端到端流程如下图 1 所示。我们的多个 Kubernetes 集群由联合层管理，该联合层根据资源可用性来调度工作负载。训练作业被建模为具有多个任务的作业。 JobSpec 定义作业的目标状态，包括实例 SKU、集群、计算/存储资源以及用于设置令牌和环境变量的 Docker 启动后命令等信息。 &lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;id&#34;:1097951,&#34;sizeSlug&#34;:&#34;large&#34;,&#34;linkDestination&#34;:&#34;none&#34;,&#34;align&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;dff8f22e-4f52-4cf6-ab64-b2c4eaecab2c&#34;,&#34;alt&#34;:&#34;&#34;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img 加载=“惰性”解码=“异步”宽度=“1024”高度=“799” src =“https://blog.uber-cdn.com/cdn-cgi/image/width=2160，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/fig1k8s-17291800154604 -1024x799.png&#34; alt=&#34;&#34; 类=&#34;wp-image-1097951&#34; srcset =“https://blog.uber-cdn.com/cdn-cgi/image/width=1024，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/fig1k8s-17291800154604 .png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/fig1k8s-17291800154604.png 300w , https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/fig1k8s-17291800154604.png 768w , https://blog.uber-cdn.com/cdn-cgi/image/width=1471，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/fig1k8s-17291800154604.png 1471w “尺寸=”（最大宽度：1024px）100vw，1024px“ referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 1：LLM 工作流程的资源调度。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;75c9c747-bc39-426c-85aa-e0c39e60e5b8&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;5dc9360d-b887-467d-9b4d-a21813c32596&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;97a27885-ee5a-402d-b7d8-36ad09297d0c&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-training-stack&#34;&gt;训练堆栈&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;9600c43d-0531-437a-82b9-3968d02c9cf4&#34;,&#34;dropCap&#34;:false}&#34;&gt;我们完全接受在构建我们的 LLM 培训堆栈时开源。具体来说，我们集成了 PyTorch、Ray、Hugging Face、DeepSpeed 和 NCLL，以便能够使用 Michelangelo 平台训练法学硕士。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;13622ae7-6133-4412-9f2b-11fef3eac11a&#34;,&#34;ordered&#34;:false,&#34;values&#34;:&#34; “}”类=“wp-block-list”&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;PyTorch 是我们选择的深度学习框架，因为大多数 SOTA 开源 LLM 和技术都是在 PyTorch 中实现的。 &lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Ray Train 提供了一个精简 API，可在 Ray 集群上使用 PyTorch 执行分布式训练。 &lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Hugging Face Transformers 提供 API 和工具来下载和训练基于 SOTA Transformer 的模型。 &lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;DeepSpeed 是一款深度学习优化软件套件，可为深度学习训练和推理提供前所未有的规模和速度。&lt; /里&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;08d5f9d1-cc0e-4979-80ea-011ebf35983f&#34;,&#34;dropCap&#34;:false}&#34;&gt;如图下面的图 2 中，Ray 位于 LLM 培训堆栈的顶部，负责协调任务。 NCCL处于GPU通信的底层。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;id&#34;:1097891,&#34;sizeSlug&#34;:&#34;large&#34;,&#34;linkDestination&#34;:&#34;none&#34;,&#34;align&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;1f4b6be8-b85d-4ea3-94c7-48ec2964ce74&#34;,&#34;alt&#34;:&#34;&#34;}&#34;类=“aligncenter尺寸-大”&gt;&lt;img加载=“惰性”解码=“异步”宽度=“1024”高度=“535” src =“https://blog.uber-cdn.com/cdn-cgi/image/width=2160，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/fig2-17291323864935 -1024x535.png&#34; alt=&#34;&#34; 类=&#34;wp-image-1097891&#34; srcset =“https://blog.uber-cdn.com/cdn-cgi/image/width=1024，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/fig2-17291323864935 .png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/fig2-17291323864935.png 300w , https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/fig2-17291323864935.png 768w，https://blog.uber-cdn.com/cdn-cgi/image/width=1536，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024 /10/fig2-17291323864935.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=1680，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/fig2-17291323864935.png 1680w “尺寸=”（最大宽度：1024px）100vw，1024px“ referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 2：Uber LLM 培训软件堆栈。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;292322d2-b608-44f1-93bb-8a794cb0ae6e&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;9ce7e044-4e63-414e-91bb-787b66baa245&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;1388b477-2ada-46d4-8926-b47d9e2cc6c9&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-distributed-training-pipeline&#34;&gt;分布式训练管道&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;93674e70-08af-454f-8eff-046a9cd96cdd&#34;,&#34;dropCap&#34;:false}&#34;&gt;支持我们在内部实施中，我们构建了LLM分布式训练管道，包括主机通信、数据准备、分布式模型训练和模型检查点管理。其工作原理如下：&lt;br&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&#34;ordered&#34;:true,&#34;hash&#34;:&#34;901cb5da-a158-4522-a928-e1b50df61ef7&#34;,&#34;values&#34;:&#34; “}”类=“wp-block-list”&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;多主机和多 GPU 通信&lt;/strong&gt;。首先，Ray Train 中的 TorchTrainer 以 Ray Actor 的形式创建多个工作线程，处理入站通信（由 Ray 对象存储使用），并在所有主机的 GPU 上初始化 PyTorch 分布式进程组（由 Deepspeed 使用）。 /里&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;数据准备&lt;/strong&gt;。 LLM 训练框架支持 Uber HDFS、Uber Terrablob 和 Hugging Face 公共数据集上的远程数据源。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;模型训练&lt;/strong&gt;。标记化将输入文本转换为将输入模型的整数。对于分布式训练，每个 GPU 工作线程使用 DeepSpeed ZeRO stage 1/2/3 选项初始化 Hugging Face Transformers Trainer 对象。 &lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;保存结果。&lt;/strong&gt;与训练实验相关的指标保存在 Uber Comet 上服务器。 Ray 头节点上的主要训练过程将训练模型权重和相关配置文件推送到 Terrablob 存储。 &lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;aceba0d7-957c-43bf-beef-30c6b1b9db41&#34;,&#34;alt&#34; :&#34;&#34;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img 解码=&#34;async&#34; src =“https://lh7-rt.googleusercontent.com/docsz/AD_4nXdT3F2A2DQU9CZxNSsCKbIAIB7ZfHvNFKT2W7E2DRlpzCxmyD0NIwbwy0CfOCs2dn PJdQyHLuH5Ia7Dt5QSgICSuNmz9igsWp_TabDWQ8XCJs1GWbMBRohsvSv9qg-J19oJyuLqixlDKAlRZrfZyhzu3l_3?key=F9WnaYLpB5WvGJfBHoMLXQ&#34; alt=&#34;&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 3：Uber LLM 分布式训练管道。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;63ddda68-46ce-42ab-a705-5330656936de&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;79024f68-5234-4376-958a-00799f61c598&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;ddd7ea80-3f24-40ac-b5d0-c51ccdf19df5&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-training-results&#34;&gt;训练结果&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;5e250810-041e-4b72-b1f2-503d255d34fa&#34;,&#34;dropCap&#34;:false}&#34;&gt;我们的探索涉及证明内部 Michelangelo 平台具有通过吞吐量优化训练任何开源 LLM 的能力和可扩展性。    &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;a3b35586-204b-4320-b82b-69c884b942be&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-training-on-state-of-the-art-llms&#34;&gt;最先进的培训法学硕士&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;770ae998-1513-4b07-9ddd-21064b7f0d0e&#34;,&#34;dropCap&#34;:false}&#34;&gt;我们发现Michelangelo 平台可以支持最大的开源 LLM，同时在不同设置下进行训练，包括全参数微调和使用 LoRA 的参数高效微调QLoRA。  &lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;id&#34;:1097895,&#34;sizeSlug&#34;:&#34;large&#34;,&#34;linkDestination&#34;:&#34;none&#34;,&#34;align&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;60b1c16e-2cee-4f9d-9961-44f6bb418189&#34;,&#34;alt&#34;:&#34;&#34;}&#34;类=“aligncenter尺寸-大”&gt;&lt;img加载=“惰性”解码=“异步”宽度=“1024”高度=“505” src =“https://blog.uber-cdn.com/cdn-cgi/image/width=2160，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-4 -17291324832411-1024x505.png&#34; alt=&#34;&#34; class=&#34;wp-image-1097895&#34; srcset =“https://blog.uber-cdn.com/cdn-cgi/image/width=1024，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-4 -17291324832411.png 1024w，https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-4-17291324832411.png 300w， https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-4-17291324832411。 PNG768w， https://blog.uber-cdn.com/cdn-cgi/image/width=1467，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-4-17291324832411。 png 1467w”尺寸=“（最大宽度：1024px）100vw，1024px” referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 4：使用和不使用 (Q)LoRA 的 Llama 2 模型的训练损失。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;f8c07128-ce1d-418f-969b-2993735ab8ae&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;62e2ae55-2adb-47db-88d6-6aac1a579201&#34;,&#34;dropCap&#34;:false}&#34;&gt;图 4 (上图）显示了 Llama 2 13B 和 Llama 2 70B 有和没有 LoRA 的训练损失曲线。我们发现，即使 LoRA 和 QLoRA 使用更少的 GPU 并且用更少的 GPU 训练得更快，损失的降低也远小于全参数训练。因此，提高吞吐量/模型触发器利用率（MFU）对于LLM的全参数微调非常重要。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;2794d532-813b-4ec7-8267-c36c5bfac293&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-throughput-mfu-optimization&#34;&gt;&lt;br&gt;吞吐量/MFU 优化&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;027c8334-2a64-4831-af4a-324f5abd02f0&#34;,&#34;dropCap&#34;:false}&#34;&gt;缩放变压器该架构严重受到模型自注意力机制的瓶颈，该机制具有二次方的时间和内存复杂度。为了实现更好的训练吞吐量，我们探索了几种业界推荐的优化 GPU 内存使用的方法：CPU 卸载和闪存注意力。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;a34ef321-de14-4067-af33-e2eb15596493&#34;,&#34;dropCap&#34;:false}&#34;&gt;第一次训练我们探索的吞吐量优化是使用 DeepSpeed ZeRO-stage-3 CPU Optimizer Offload，在训练 Llama 时，在相同批量大小的情况下，GPU 内存减少至少 34% 2 70B。这使我们能够将批量大小增加 3-4 倍，但仍保持相同的前进和后退速度，因此训练吞吐量增加了 2-3 倍。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;758b796c-630f-443a-9953-7f554395bfe6&#34;,&#34;dropCap&#34;:false}&#34;&gt;第二次训练吞吐量优化的探索是遵循 Hugging Face 的建议，即使用 Flash Attention。 Flash 注意是一种注意算法，用于降低二次复杂度并更有效地扩展基于 Transformer 的模型，从而实现更快的训练。通过闪存注意力，我们可以在相同批量大小的情况下节省 50% 的 GPU 内存。如果我们最大化 GPU 内存的使用，那么我们可以将批量大小加倍，同时保持兼容的前进和后退速度。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;89be987d-e630-44c7-b748-e23a605041bc&#34;,&#34;dropCap&#34;:false}&#34;&gt;学习训练效率，我们使用硬件模型触发器利用率（&lt;a href=&#34;https://arxiv.org/pdf/2204.02311.pdf&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;MFU&lt;/a&gt;）。 MFU 是在基准硬件设置以峰值 FLOPS 运行且没有内存或通信开销的情况下观察到的吞吐量与理论最大吞吐量的比率。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;95c4ddbb-d746-4625-84fb-001e68a2d445&#34;,&#34;dropCap&#34;:false}&#34;&gt;在我们的基准测试中，我们使用 &lt;a href=&#34;https://deepspeed.readthedocs.io/en/latest/flops-profiler.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Deepspeed Flops Profiler&lt;/a&gt; 来获取预期的 FLOPS 数。每个 GPU 的 FLOPS 计算如下：每个 GPU 的前向和后向 FLOPS/迭代延迟。然后我们将其除以设备的峰值理论性能，得到最终的 MFU 指标。 ‌在我们所有的实验中，我们在不同的优化设置下最大化批量大小，以便充分利用 GPU 内存。我们使用训练参数来做到这一点，设置&lt;em&gt;gradient_accumulation_steps = 1&lt;/em&gt;，以便&lt;em&gt;macro_batch_size = micro_batch_size x num_gpus x 1&lt;/em&gt;。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;3eb1c35d-1aa8-4459-9bcb-c207671f538f&#34;,&#34;dropCap&#34;:false}&#34;&gt;这是我们的发现：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;0824a484-47fe-415d-990c-59086f7e64a6&#34;,&#34;ordered&#34;:false,&#34;values&#34;:&#34; “}”类=“wp-block-list”&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;吞吐量&lt;/strong&gt;：闪存注意力和 CPU 卸载都节省了 GPU 内存，使我们能够在 Llama 2 70B 训练期间，在 32 个 GPU（A100 上 8 个主机，H100 上 4 个主机）上使用最大 GPU 内存使用量 (70GB-80GB) 时，将批量大小增加 2 到 7 倍。这导致吞吐量显着增加。  &lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;MFU&lt;/strong&gt;：H100 上的 MFU 低于 A100，GPU 利用率较低最大 GPU 内存使用量未满。这可能表明，对于 Llama 2 70B 训练，我们使用内存受限的 GPU，而不是计算受限的 GPU。这也是为什么 CPU 卸载最有助于提高 MFU，如下图 5 所示。 &lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;计算或内存限制&lt;/strong&gt;：Llama 2 7B 的情况略有不同4 A100/H100 在单个主机上，我们可能拥有计算密集型 GPU，而不是内存密集型 GPU。  我们看到 MFU训练 Llama 2 7B 的性能高于训练 Llama 2 70B，并且 CPU 卸载对提高 MFU 无帮助。 Flash 注意力的帮助最大，如下图 6 所示。 &lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;网络：&lt;/strong&gt;在我们的实验中，网络使用量约为 10GB/秒用于 Llama 2 70B 模型训练的 H100 和 A100 上的 3GB/秒。与基础理论值相比，这个值很小，表明与 GPU 计算和内存相比，网络尚未成为瓶颈。   &lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;id&#34;:1097898,&#34;sizeSlug&#34;:&#34;large&#34;,&#34;linkDestination&#34;:&#34;none&#34;,&#34;align&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;f6539680-e550-403c-8250-280ec77192ac&#34;,&#34;alt&#34;:&#34;&#34;}&#34;类=“aligncenter尺寸-大”&gt;&lt;img加载=“惰性”解码=“异步”宽度=“1024”高度=“634” src =“https://blog.uber-cdn.com/cdn-cgi/image/width=2160，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-5 -17291325919540-1024x634.png&#34; alt=&#34;&#34; class=&#34;wp-image-1097898&#34; title=&#34;图表&#34; srcset =“https://blog.uber-cdn.com/cdn-cgi/image/width=1024，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-5 -17291325919540.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-5-17291325919540。 300w.png, https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-5-17291325919540。 PNG768w， https://blog.uber-cdn.com/cdn-cgi/image/width=1234，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-5-17291325919540。 png 1234w”尺寸=“（最大宽度：1024px）100vw，1024px” referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 5：训练 Llama 2 70B 的模型失败率利用。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;a4b411e3-c488-4737-a15d-7fc23eeb3e67&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;id&#34;:1097899,&#34;sizeSlug&#34;:&#34;large&#34;,&#34;linkDestination&#34;:&#34;none&#34;,&#34;align&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;bca783a9-96e7-4c90-9dd0-6dd950e0cbb9&#34;,&#34;alt&#34;:&#34;&#34;}&#34;类=“aligncenter尺寸-大”&gt;&lt;img加载=“惰性”解码=“异步”宽度=“1024”高度=“635” src =“https://blog.uber-cdn.com/cdn-cgi/image/width=2160，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-6 -17291326224707-1024x635.png&#34; alt=&#34;&#34; class=&#34;wp-image-1097899&#34; title=&#34;图表&#34; srcset =“https://blog.uber-cdn.com/cdn-cgi/image/width=1024，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-6 -17291326224707.png 1024w，https://blog.uber-cdn.com/cdn-cgi/image/width=300，质量=80，onerror=重定向，格式=自动/wp-content/uploads/2024/10/figure-6-17291326224707.png 300w， https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-6-17291326224707。 PNG768w， https://blog.uber-cdn.com/cdn-cgi/image/width=1328，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-6-17291326224707。 png 1328w”尺寸=“（最大宽度：1024px）100vw，1024px” referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 6：训练 Llama 2 7B 的模型失败率利用。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;f1e75079-9ed3-40d4-9930-c00265e9045c&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;5558af28-a0c8-493d-8ca2-1de822e467e0&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-llm-scorer&#34;&gt;LLM 评分者&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;a73b63d3-6d45-465b-b421-b79fbf01737f&#34;,&#34;dropCap&#34;:false}&#34;&gt;评估除了原始或微调模型之外，我们还实现了离线 LLM 评分器来对大型数据集进行预测。我们使用 Ray 在 Kubernetes 上创建一个具有多个实例的集群，每个实例具有多个 GPU。这样，我们就可以并行分配数据和评分。在每个实例上，我们都使用了推理服务器，例如 &lt;a href=&#34;https://github.com/vllm-project/vllm&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;vLLM&lt;/a&gt;。&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;4a617aea-dbba-4d40-95ba-8c8c612e6cac&#34;,&#34;dropCap&#34;:false}&#34;&gt;在我们的实现中，我们使用Ray jobs作为运营基础。每个 Ray 作业都会分配指定数量的 CPU 和 GPU 资源、下载模型并按等级对数据集进行分区。 Ray“ActorPool”聚合来自不同 Ray Actor 的输出。下面的图 7 显示了该 LLM 评分器的实现。 &lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;e9d41adb-1d33-48a2-988b-33d8c40de5fb&#34;,&#34;alt&#34; :&#34;&#34;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img 解码=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXcptqsUis4TPQFJP9-OfxrU60nUal734joeKAohIc3jWOMuOU30fC58yufglGf4n zT3KI8VggrcxoASoFb8aSmOQKMXOk5ccrXsIhpQAr_-Pomo-INJ-MUMOMIYkgqKv9u2Q7Dwg3laKTYJ750mU3w45i8?key=F9WnaYLpB5WvGJfBHoMLXQ&#34; alt=&#34;&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 7：使用 Ray 和 vLLM 的分布式 LLM 评分器。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;72b43d00-c050-41c9-867a-fc38576e1944&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;59341eaf-c14b-41c0-a3e4-35d84e603f04&#34;,&#34;dropCap&#34;:false}&#34;&gt;下面的图 8 总结了使用 2 个 A100 和 H100 GPU 的 Mixtral 8x7b 模型的批量预测性能，其中输入令牌大小为 4K，最大输出令牌为 700。我们观察到，每秒的输出令牌随着批量大小而线性增加两种 GPU 类型均高达 64 值得注意的是，H100 的吞吐量比 A100 高出 3 倍。要求。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;width&#34;:&#34;700px&#34;,&#34;height&#34;:&#34;auto&#34;,&#34;align&#34;:&#34;center&#34;,&#34;hash&#34; :&#34;5dc1b9ad-6441-4171-8b85-d233257a4bf8&#34;,&#34;alt&#34;:&#34;&#34;}&#34; class=&#34;aligncenter is-resized&#34;&gt;&lt;img解码=“异步” src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXfpULj9Ck6J4EpGtKKPx8e4f_q925QVj3CisQlmWVKLzr1NiTnTpsSSxOj_NfaZZ 8eQWuxxBRM0Grb280IbiDTkdRqaK5RSg3moI346umhtDDnHFqVOhPflkhI0Bk0pIbI272dXCbLHt0zw0iKOafuN-l4?key=F9WnaYLpB5WvGJfBHoMLXQ&#34; alt=&#34;&#34; style=&#34;width:700px;height:auto&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 8：Mixtral-8x7b 在 2 x A100/H100 上的吞吐量。 &lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;1dcee380-7696-48be-ad2b-c7ac66edcf82&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;d8826856-01f0-4d2b-9b39-9b0ab9436a37&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:1,&#34;hash&#34;:&#34;95cf00c9-778f-4b51-b272-fc8090e9c008&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-conclusion&#34;&gt;结论&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;6fff4811-1c1f-4a4b-b352-069d8588e134&#34;,&#34;dropCap&#34;:false}&#34;&gt;作为更多和随着更大的开源模型的发布，例如 Llama 3 450B，我们将改进我们的 LLM 培训基础设施以支持对其进行微调。使用这些经过微调的模型将帮助我们改进 Uber Eats 优食推荐和搜索等功能。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;c1055457-0d60-4315-8a6a-9846867752e7&#34;,&#34;dropCap&#34;:false}&#34;&gt;思考在更广泛的行业中，我们探索内部法学硕士培训的旅程为我们带来了以下见解：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&#34;ordered&#34;:true,&#34;hash&#34;:&#34;caf84a04-8f32-464e-a823-e06addcf93ee&#34;,&#34;values&#34;:&#34; “}”类=“wp-block-list”&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;拥抱开源是赶上生成式 AI 的关键&lt;/strong&gt;&lt;strong&gt; &lt;/strong&gt; 在很短的时间内，我们看到并受益于开源社区 Hugging Face 的快速发展以及 Deep 的快速采用速度。 Falcon、Llama 和 Mixtral 等开源模型结构每隔几个月就会陆续发布。借助开源解决方案，我们可以训练 SOTA LLM 并实现行业标准 MFU，以最大限度地提高 GPU 使用率。  &lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;拥有经过长期测试且可扩展的集群管理对于快速捕捉最新趋势至关重要。 &lt;/strong&gt; 我们完善的 Ray 和 Kubernetes 堆栈可以轻松地将新的开源解决方案集成到我们的生产环境中。 &lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;79492b52-80a3-484e-96db-eaea716fb532&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;34b325a2-53fb-47e7-9c70-956bb37ea040&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;e1c7934a-3ba0-4400-8d03-91333882acb2&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-acknowledgements&#34;&gt;致谢&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;d61854a1-4a5c-4936-870c-08fc26b173a6&#34;,&#34;dropCap&#34;:false}&#34;&gt;这一步如果没有 Uber 的许多团队的贡献，Uber 的 GenAI 就不可能实现：Michelangelo、Applied AI、Dev Platform 和 Platform Core服务。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;fontSize&#34;:&#34;小&#34;,&#34;hash&#34;:&#34;0cc3578a-4276-48eb-b5bb-dda18aac1570&#34;,&#34;dropCap&#34; :false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Apache&lt;sup&gt;®&lt;/sup&gt;、Apache Kafka、Kafka、Apache Spark、Spark 和星形徽标是 Apache Software Foundation 在美国和/或其他国家/地区的注册商标或商标。使用这些标记并不暗示 Apache 软件基金会的认可。&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;fontSize&#34;:&#34;小&#34;,&#34;hash&#34;:&#34;1f17d0fc-b135-4a11-81f0-461744185c12&#34;,&#34;dropCap&#34; :false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Deepspeed&lt;sup&gt;®&lt;/sup&gt; 及其徽标、LoRA&lt;/em&gt;&lt;sup&gt;®&lt;/sup&gt;&lt;em&gt;及其徽标&lt;/em&gt; &lt;em&gt;是 Microsoft&lt;sup&gt;®&lt;/sup&gt; 在美国和其他国家/地区的注册商标。使用这些标记并不暗示 Microsoft 的认可。&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;fontSize&#34;:&#34;小&#34;,&#34;hash&#34;:&#34;7553dd58-1d4a-407e-bd4d-8d5ed7be3771&#34;,&#34;dropCap&#34; :false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Kubernetes&lt;sup&gt;®&lt;/sup&gt; 及其徽标是以下公司的注册商标美国和其他国家/地区的 Linux 基金会&lt;sup&gt;®&lt;/sup&gt;。使用这些标记并不暗示 Linux 基金会的认可。&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p 数据-wp-块-名称=“核心/段落”data-wp-block =“{”fontSize”：“小”，“散列”：“d91b4603-ef84-4b0e-bd0a-c31aedef4532”，“dropCap”：false}”class =“has-small” -font-size&#34;&gt;&lt;em&gt;Llama 2&lt;sup&gt;®&lt;/sup&gt;、Llama 3&lt;sup&gt;®&lt;/sup&gt;及其徽标是 Meta&lt;sup&gt;®&lt;/sup&gt; 在美国和其他国家/地区的注册商标。使用这些标记并不暗示 Meta 的认可。&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;fontSize&#34;:&#34;小&#34;,&#34;hash&#34;:&#34;b8b3f2bb-79ed-43e0-ae31-3f70e2215105&#34;,&#34;dropCap&#34; :false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Mixtral&lt;sup&gt;®&lt;/sup&gt; 及其徽标已注册Mistral AI&lt;sup&gt;®&lt;/sup&gt; 在美国和其他国家/地区的商标。使用这些标记并不暗示 Mistral AI 的认可。&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;fontSize&#34;:&#34;小&#34;,&#34;hash&#34;:&#34;fc01d91d-1ad5-4ff6-b213-31414422427d&#34;,&#34;dropCap&#34; :false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;NVIDIA&lt;sup&gt;® &lt;/sup&gt;和 NVIDIA 徽标是NVIDIA Corporation 在美国和其他国家/地区的商标和/或注册商标。使用这些标记并不暗示 NVIDIA 的认可。&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;fontSize&#34;:&#34;小&#34;,&#34;hash&#34;:&#34;c3799488-dfdf-4488-9a62-da6179757c3d&#34;,&#34;dropCap&#34; :false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;PyTorch、PyTorch 徽标和任何相关标记是 Linux 基金会的商标。&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;fontSize&#34;:&#34;小&#34;,&#34;hash&#34;:&#34;53d78373-5c6a-4d62-9fd1-83994303c000&#34;,&#34;dropCap&#34; :false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;变形金刚&lt;sup&gt;®&lt;/sup&gt;及其徽标是 Hugging Face&lt;sup&gt;®&lt;/sup&gt; 在美国和其他国家/地区的注册商标。使用这些标记并不暗示 Hugging Face 的认可。&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;33545b90-edf8-4266-a93c-c0c04c917f2e&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;1b3dfcd7-24d6-409c-a60c-028e45f2e6be&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;308d94a8-c895-41fb-acd9-12964ced97c6&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;</description>
      <pubDate>Thu, 17 Oct 2024 07:30:00 +0000</pubDate>
    </item>
    <item>
      <title>【The Accounter: Scaling Operational Throughput on Uber’s Stateful Platform】The Accounter：在 Uber 有状态平台上扩展运营吞吐量</title>
      <link>https://www.uber.com/blog/the-accounter/</link>
      <description>【&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:1,&amp;quot;hash&amp;quot;:&amp;quot;5d505d4c-32fc-41ff-afce-776cbebc303c&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;18a13a8e-26ba-4783-b225-7a6549308072&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In a &lt;a href=&#34;https://www.uber.com/en-DK/blog/odin-stateful-platform/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;previous post&lt;/a&gt;, we introduced Uber’s stateful platform, Odin. We discussed how the platform’s scale and the growing need for fleet-wide operations required better coordination among its many remediation loops. Multiple conflicting operations could compromise storage clusters without centralized coordination, leading to availability or durability issues. As shown in Figure 1, when uncoordinated remediation loops operate a quorum-based storage cluster, it causes problems. This post explores how we overcame this problem and scaled Odin’s throughput by introducing global coordination of all operations.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;4342cea2-fc72-47de-9749-7319ca399cee&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXdaIUkYf9iJQIdmP5crzAtKJTaRz5LAR_5O_-XKdzeajomTuvyukefXs5KWFvePaao91eUzkebkaCDIbq1PSmCFGtiV57ybtWfs-f544fcir-75M6byjHMW5NbLku9pEknPmuPTKtlxDn1Em0-g8Q2Z4You?key=b-AdKuusNx_dhDAHvkwz_g&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 1: Example of conflicting operations resulting in cluster availability loss.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;3f8302bd-08de-4e17-9918-e0bf5d0bf41b&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;a href=&#34;https://lucid.app/lucidchart/be5aad2b-cb17-4ece-a07b-2d1d3d9603b1/edit?page=0&amp;amp;v=232&amp;amp;s=465&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6d90e788-6294-434d-85e0-ceb36505cf9c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Operations on Odin are implemented using Cadence workflows. When an actor, whether human or automated, wants to operate one of the managed storage clusters, it does so through workflows. A workflow consists of actions, like changes to the system state, and waiting periods, like waiting for system converges, that collectively orchestrate transitioning the system from one state to another. Workflow executions can range from seconds, such as upgrading container images, to hours, like migrating workloads between hosts (Uber’s fleet uses locally attached disks). We’ll refer to these workflows as operations from this point forward.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;279aaa4c-a3e8-453d-aa5a-ff54261e5430&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We needed a mechanism to gate the initiation of new operations or, to put it another way, answer the question:&lt;em&gt; Given the current circumstances, is it safe to proceed with this operation on this cluster?&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7c64aa80-fe8e-4de8-a4e3-5d6c9be7b3a4&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Our design requirements were as follows:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;52b602ab-3bde-46cb-a0a6-6956c515d54a&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Independent remediation loops&lt;/strong&gt;: These loops should remain unaware of each other. This is crucial for scaling the development of high-level functionality. In other words, remediation loops shouldn’t hard-code rules for determining when it’s safe to perform operations on ‌clusters.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Technology-specific policies&lt;/strong&gt;: Odin manages all stateful technologies at Uber, and each technology has unique safety tolerances for cluster operations. So, different technologies may require different policies.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Platform-wide limits&lt;/strong&gt;: The system should support enforcing global limits across all technologies/operations on the platform.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;4cc2a929-4d98-48c1-ab5f-ccc3dddca544&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The solution we chose is a global software component called The Accounter, which provides operation coordination as-a-service. Its name reflects its core purpose: to serve as a central registry that tracks all ongoing operations, to understand the relationship between operations, and to act as a gatekeeper for initiating new operations. A good mental model is to think of The Accounter as an advanced disruption budget or a fuzzy semaphore.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;56bb2492-fe44-4855-aad8-d123e8ad7416&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;When an operation is initiated, permission to operate on the target storage cluster must first be requested from The Accounter, a process we call taking a claim. The claim covers the entire operation, which might involve multiple changes to the system state.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;652ecab4-2d56-4292-8860-82fb24cd0759&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The Accounter uses a technology-specific policy to determine whether a claim can be granted. The policy takes two inputs: cluster health, a collection of the current health state stored in &lt;a href=&#34;https://www.uber.com/en-DK/blog/grail/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Grail&lt;/a&gt;, and the currently ongoing operations, which are tracked and stored in etcd&lt;sup&gt;®&lt;/sup&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;3e7bf56e-5d58-4e58-993f-cdb20923166b&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;58e0af82-e829-40b3-bcab-680a9345050e&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-cluster-health&#34;&gt;Cluster Health&lt;/h2&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;beb49c97-9d38-40d3-8537-f027c56a0d73&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXfe6nv0NFbBiHe3fLUyfVxDlx0aMIs0VsodtTGOa5ULHXvlNDWniFa7J9q7ZlCcbhVZ6FTWYoIIAFfo2WVYyHzGYuVg6Gkhhd_VpWBhdeYTzlSH6OhHYkmnamHgNo9K5sk5ZMnoTrJzXtmocONLFdK5VvH6?key=b-AdKuusNx_dhDAHvkwz_g&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 2: Overview of the cluster health collection on Odin.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;72ea256b-f8af-4151-8ef3-a0da00ef9b47&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;a href=&#34;https://lucid.app/lucidchart/43371f6c-1761-42e9-ba36-50e6a081cea9/edit?page=0&amp;amp;v=536&amp;amp;s=672&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;1e553712-51cb-4082-b972-d73d09584791&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;A storage cluster on Odin consists of one or more workloads, like a Raft, Apache Cassandra&lt;sup&gt;®&lt;/sup&gt;, or similar database cluster node. Each workload is a collection of containers: a worker container, a primary database container, and potentially several sidecar containers. The worker is responsible for managing the host-level life cycle of the database and sidecar containers. It monitors the workload’s status continuously and communicates with the control plane. The most recent workload state is stored in Grail.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;040cc737-c482-436f-81fb-760c6f1e5e03&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;When determining cluster health, several other health signals must be considered beyond what can be observed within individual workloads. For example, does the cluster have under-replicated data? Is the cluster experiencing stress from excessive data shuffling or an increased client load? Storage teams typically manage/collect cluster-level health information like this, and Odin provides ways to ingest the cluster status into Grail.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;1c6f4371-d466-4586-8992-9220aa431873&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;A technology’s tolerance for unhealthy workloads varies significantly depending on the specific technology, and this is captured in ‌technology-specific health policies—more on this later.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9e05f7a8-03ee-4a90-a2fc-85809279660d&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9591126e-be90-474b-a839-2b5602d8ba3e&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-ongoing-operations-nbsp&#34;&gt;Ongoing Operations&amp;nbsp;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;cd08ec06-1439-475c-92c1-0c4aa6cc3704&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The system models ongoing operations using two key concepts: &lt;em&gt;operations&lt;/em&gt; and &lt;em&gt;groups&lt;/em&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;aa68ba88-99ac-4b51-a0e2-2e74ae167c03&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Each operation is represented by an operation object, which contains critical details such as the targeted storage workload, the type of operation (like drain or downtime), and its potential disruption to the storage cluster. Every operation is associated with one or more groups.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;81200b77-d173-4320-a11f-d6ad2631aa6f&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;A group tracks the number of operations linked to it and stores additional metadata beyond the operations count. For example, it records the most recently started and completed operations. This data allows for enforcing time-based rate limits on the operations permitted within each group.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a9c2cad5-c5b0-48a9-a792-714520f6693c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Although there are many groups, they can be broadly categorized into two types: platform-wide groups (for example, failure domains like regions, zones, and racks) and technology-specific groups (for example, individual storage clusters and workloads). A global group tracks all ongoing operations.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;edb4505f-8a6e-4b62-8f10-99f0adee1f97&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Platform-wide groups enforce global concurrency limits, helping to prevent overloading Odin and the underlying infrastructure. At the same time, technology-specific policies leverage cluster and workload groups to protect cluster availability and durability.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7fc72d01-2afd-46ee-9dd5-a5d6f3993d5c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The number of operations permitted on a cluster varies depending on the technology. Some technologies restrict operations to a single workload at a time, while others allow a percentage of the cluster to be operated on concurrently. More specialized groups can be created dynamically to track operations on specific subsets of workloads within a cluster, such as roles. This flexibility enables more nuanced safety policies tailored to different storage technologies’ requirements.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f1ddc4f1-d0e5-496b-847a-4679aa648bef&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The figure below illustrates how an operation is modeled, with the operation object linked to several group objects. These explicit associations facilitate the cleanup process when an operation completes or fails.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;f024bc6a-8095-4654-8e69-a281e55fbe9e&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXdUxx49TQHC2EwXgir_x7cX3CehhM61yc5TGL0BZ2aXsRkS8_7Odr-G_60BWCjIuRYbkEtZfYogfVhC0aEwNhYJY3elWUGb6oQ7yNBwB4K9bUJIKmRlCjk_s8C9UakIUClZvse1HXWGUawkeD6g5d0w5byj?key=b-AdKuusNx_dhDAHvkwz_g&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 3: Overview of the data model used to represent the relationship between operations and groups.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f162871a-8d83-440f-8098-027ea3605100&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;a href=&#34;https://lucid.app/lucidchart/4e05a85c-d7f0-4a2b-8ca1-c0685f1aef83/edit?page=0&amp;amp;v=1611&amp;amp;s=612&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0bea51db-6a1e-40c5-b7e7-ece8863e57e5&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;da147268-514b-4568-bca0-cd3819ad8742&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-safety-policies&#34;&gt;Safety Policies&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ea7b7ea1-8485-4862-8c7f-07e1e4eaca19&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Now that we can efficiently gauge cluster health and get an overview of all ongoing operations, we can introduce safety policies. A safety policy is a codified disruption budget that allows the expression of technology-specific policies for how operations can be overlapped within the storage clusters.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;adc5367e-1a21-4321-8c5b-1b4de1a3b153&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Safety policies comprise two parts: the &lt;em&gt;health policy&lt;/em&gt; and the &lt;em&gt;limit policy&lt;/em&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a25a8360-5e66-4230-9aa0-8c3999b761a6&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The health policy uses the latest collected cluster health information to determine whether the requested operation can be performed. For example, the technology team might want to prevent operations from being started on a cluster that’s seeing an increase in client load or has unhealthy workloads.&amp;nbsp;&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;b9ca44e9-c9fc-487a-9ee7-3ad07a62473a&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Limit policies, on the other hand, can limit the number of concurrent operations affecting a group, implement grace periods between sequential operations, or provide operations exclusivity so that if one group is being operated, other groups will reject all claims. This is particularly useful when you want to operate a single rack at a time.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;dde3d889-02e1-4c97-b8db-7b8c779f626c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The Accounter provides a collection of functionalities for policy implementers, such as:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;82c24b34-5d62-4e09-8ed5-d598a9fc928e&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Methods for gauging workload and cluster health&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;em&gt;CheckMaxOperations(group, max):&lt;/em&gt; Check that the specified group has at most max operations&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;em&gt;CheckElapsedFromLastClaim(group, duration):&lt;/em&gt; Check that the given time has elapsed since the last claim associated an operation with the specified group&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;em&gt;CheckElapsedFromLastUnclaim(group, duration):&lt;/em&gt; Check that the given time has elapsed since a claim associated with an operation was last released from the specified group&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ab5a85e9-7962-47e3-bf9e-558454d9b7c5&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Health evaluations are a point-in-time check and can’t provide hard guarantees about the safety of operations. Health data collection inherently involves latency in a distributed system, meaning two simultaneous requests for disruptive operations might be approved based on an outdated view of cluster health. The checks performed by limit policies do provide hard guarantees as they are conditionally committed through an etcd transaction. Let’s explore how that works.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;cf11f91a-6480-44bf-97ae-aa661a8f523e&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;80101e32-fc99-4e92-b8ed-6c1d214c29b9&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-architecture&#34;&gt;Architecture&lt;/h2&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1100184,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;77539bbf-037e-4050-9f24-c6c0dca5ee59&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;676&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/blogfigure4-17321696658887-1024x676.png&#34; alt=&#34;&#34; class=&#34;wp-image-1100184&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/blogfigure4-17321696658887.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/blogfigure4-17321696658887.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/blogfigure4-17321696658887.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/blogfigure4-17321696658887.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=2048,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/blogfigure4-17321696658887.png 2048w&#34; sizes=&#34;(max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 4: The Accounter architecture and claim granting process.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;12513284-7271-401c-980b-42f55c5ce634&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;da75e2ea-9113-409b-8176-250a4eec58ea&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;To persist operations and groups, we use etcd as a key-value store. When a workflow wants to make a change to one of the storage clusters, it goes through the following process:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c9492c1e-9928-4200-9d4b-5c8f12747215&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;The workflow that wants to take a claim calls The Accounter, with information about the target storage workload and the purpose of the operation (1).&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;The Accounter retrieves the current cluster health state from Grail (2) and the current operations state from etcd (3).&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;The Accounter evaluates platform-wide concurrency and rate limits before evaluating the target workload (4).&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Next, ‌ technology-specific health and limit policies are evaluated against the state from etcd&amp;nbsp; (5). If either policy fails, the claim is rejected immediately without resulting in a transaction.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Otherwise, if all the criteria are met, a single transaction for the required changes is built and committed to etcd (6).&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;The claim is accepted or rejected depending on the success of the etcd transaction (7).&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;The operation can now proceed (8).&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;After the operation, the workflow is responsible for releasing the claim through The Accounter.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2d205b96-135b-4430-8450-d86cd6c614a9&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Changes in etcd are executed transactionally, ensuring a consistent view of ongoing operations. Specifically, we use optimistic locking to verify assumptions about the number of operations within groups before committing changes.&amp;nbsp; A transaction builder library abstracts this complexity for safety policy developers, giving them the impression of working directly in memory. This approach is similar to &lt;a href=&#34;https://github.com/etcd-io/etcd/blob/main/client/v3/concurrency/stm.go&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;etcd’s STM&lt;/a&gt; (Software Transactional Memory) library but with optimizations tailored to improve throughput.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;4b15994d-02e0-44b4-a3e8-83a3a63f4215&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;If the transaction is rejected due to optimistic concurrency conflicts, it’s retried internally a few times. If the claim is rejected, we rely on the operation to retry as long as the operation remains relevant. If the rejection is due to a violation of the rate limit on a group, the Accounter provides a meaningful backoff time that the operation can use to decide how to proceed.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2e65edf2-8787-47d5-a453-0783b0b5ccfa&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;To avoid all claims having to fetch state from etcd directly (3), all claims are first evaluated against a continuously updated in-memory snapshot of the data. If the claim violates either of the policies using the cached state, it’s immediately rejected without attempting to commit the transaction to etcd. This is essential as the system has to scale to 3,000-4,000 claim attempts per second. Most of this traffic comes from the platform auditing workloads’ ability to move through dry-run claim attempts.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7f555a1a-bccf-4a97-bd78-e09779105318&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The etcd transaction finalizes taking the claim and checks for operational limits transactionally, granting the claim when the transaction is committed.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0e6b08f4-e6c0-44fa-96d8-38173a802ccf&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;5dfe78d2-ae09-4da5-8f72-a0db28154ee8&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-claim-life-cycle&#34;&gt;Claim Life Cycle&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;96d661d8-8126-41a9-9d44-13a5b548817c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Our operations are often hierarchical, so we designed The Accounter to support the passing of claims from parent to child operation. These passed-down claims are reentrant, meaning that when a child operation attempts to claim, it becomes a no-op. This design allows for more complex operations while keeping the operation logic straightforward. Programmers don’t need to understand the entire operation structure to determine whether a claim has already been taken—they simply take the claim as needed, knowing the system will handle it correctly.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;aa4aa757-d051-4607-a05b-eb2845346a3d&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Operations are responsible for releasing claims once their operations are completed. However, there are cases where an operation may be terminated, fail unexpectedly, or contain bugs. While these instances are rare, they do occur at our scale. The system must ensure that claims are eventually released, as stale claims can block operational throughput. The Accounter can always trace back to the operation since operations are linked to their claims in the data model. This is used to identify inactive operations and safely release stale claims.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a0f55035-1a46-48b0-a950-f6ae2e88711e&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d2b8cd75-c991-4fcd-8945-512799392927&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-auditing&#34;&gt;Auditing&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;8a62f129-bd41-4475-a536-ba30040361aa&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;With great power comes great responsibility. Delegating policy development to technology teams carries the risk that overly conservative policies could hinder the platform’s ability to perform fleet-wide operations. Uber colocates workloads of different technologies on the same hosts, resulting in hundreds of workloads on the same hosts. When the platform has to drain a host, all workloads must first be drained (that is, moved to other hosts). Restrictive safety policies increase the risk of only being able to drain the host partially.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;065d0b30-bc9e-4635-b11e-74290cf41f53&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;To address this issue, we’ve implemented an extensive auditing system. This system continuously evaluates the &lt;em&gt;claimability&lt;/em&gt; of workloads, providing an accurate snapshot of which operations are possible across the platform. This information is published to Grail and used by remediation loops as a pre-filter to identify feasible operations.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;cd52e911-bb11-4bd8-9b5c-0ede76028f78&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Additionally, the Odin team leverages this data to gain insights into workloads whose operations have been blocked for extended periods, allowing the Odin team to alert the team responsible for the affected storage technology.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0f753d1e-2356-401c-a2c5-a0779e4fd4ba&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;5a19b9d5-34b6-48db-bf17-8c1081a1ea54&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-alternative-approaches&#34;&gt;Alternative Approaches&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0b79e0b1-f348-4c7e-b1fe-94e4fecfcac0&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We’ve encountered at least two other common approaches for coordinating operations: distributed lock managers and Kubernetes&lt;sup&gt;®&lt;/sup&gt; &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/pods/disruptions/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;disruption budgets&lt;/a&gt;. Here, we explain how they differ from The Accounter’s approach.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;90ac573c-b34b-48de-b790-15634226352c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Distributed lock managers typically involve acquiring a lock on a cluster, ensuring that only one operation can be performed at a time. However, given the lengthy time required to operate on a single workload in Odin—primarily due to locally attached disks—locking an entire cluster for a single workload operation would be inefficient and impractical.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d38b4f0f-ad43-4a79-ac92-455fa20e23aa&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;A more flexible alternative to locks could be to extend the lock to a semaphore, allowing a predefined number of tokens to be granted simultaneously. This is similar to the approach taken by Kubernetes, where the disruption budget sets a fixed number of operations upfront. The Accounter, however, diverges from these approaches by focusing solely on counting operations, leaving the responsibility of enforcing limits to a separate policy. This method offers much greater flexibility in policy design. For example, it allows for specifying that only a certain number of optimization moves are permitted. Still, if a host fails and a request is made for an emergency move, that’s always granted. Keeping these emergency cases represented in the model is an advantage because the policy could then state that no efficiency moves are granted from that time on until the host failure is fully remediated. This flexibility is crucial in maintaining operational efficiency while adapting to real-time conditions.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;cc797c74-5c1f-4b7b-b4ab-4f1ce27e4c72&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c8458d63-f070-413a-b601-07fa8feb090d&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-scale&#34;&gt;Scale&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;63355cfa-615a-47d7-b76c-8f6490d9d68d&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The Accounter has now been fully integrated into all operations, and the number of operations done by the platform translates to a lot of traffic. Let’s take a look at the current numbers:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;346d0f16-c987-4634-aebb-1b520d4906d3&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;strong&gt;Traffic&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;1ceef2db-4db7-4166-95d9-476676e9332e&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&amp;gt;300,000 claim evaluations per hour&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&amp;gt;7 million dry-run claim evaluations per hour&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e6313ebc-797e-4373-bf0f-b07a618cff7c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;strong&gt;Active Operations and Groups&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c7913b1e-26c5-4bd8-9943-a930634b3805&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&amp;gt;2,000 active operations&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&amp;gt;700,000 distinct groups&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;061733d3-4c18-4ecb-893d-487ee40db6e3&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7a7b116b-7d6b-4eac-a84c-d17562b9a593&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-results&#34;&gt;Results&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;980045ba-187b-49f0-8339-6486eb00855e&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Over the years, The Accounter has significantly improved Odin’s operational efficiency, enabling small teams to manage thousands of clusters safely. It’s facilitated centralized efficiency programs and empowered leadership to treat Uber’s physical infrastructure as flexible and impermanent. Moreover, The Accounter has preserved the independence of teams through a clear separation of concerns: remediation loop owners focus solely on determining which operations are necessary without needing to worry about safety considerations.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c91f0eab-494b-4ef9-91e5-f679cff07372&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;One noteworthy example was our effort to adopt encryption-at-rest. A process that we’ve been able to drive fully centralized. All we had to do was ask our automation to move workloads to hosts with encryption-at-rest, and The Accounter ensured that it happened safely. This process involved migrating 2.1 million vCores and 1.6EiB locally attached disks. In the past, operations like this would have required extensive planning/execution, involving all the technology stakeholders and costing years of engineering time. &lt;strong&gt;Now, they are a no-op.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;0c8631c0-0b86-4321-b0fa-1124614856b3&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXf9ke1obdn_A5SCJO98Si-zmTAX7ehygvUwbOzbfFXMFSMIJcZno4qaiijgDH9Us9XbOZJNs-E60pB-t3wcMlaDtauVTMI_p_R1hJ0lwusZZHi2I7kJgHNUsKaeTNYUU5N4L0F_D0QRS8lR96qh91NXJbY?key=b-AdKuusNx_dhDAHvkwz_g&#34; alt=&#34;&#34; title=&#34;Chart&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 5: Timeline of Uber’s transition to encryption-at-rest.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;880c1309-40c3-4e9f-8186-d4fe9768a736&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;add83f5b-3776-4924-8cd6-be8e819efc74&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;8be63190-b606-494f-b957-c335dccda674&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-future-work&#34;&gt;Future Work&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ac04a251-021d-4809-8a98-dba96ab2e81b&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The Accounter paradigm is actively evolving, and we’re working to address some of its current limitations. One significant area for improvement is support for prioritizing operations. Currently, operations rely on continuous polling to obtain a claim, which generates unnecessary traffic and doesn’t allow for the prioritization of different operation types. This becomes particularly problematic when lower-priority efficiency optimizations block high-priority, human-initiated operations. Another area of interest is the ability to define circuit breakers directly within The Accounter. Currently, each loop in Odin implements this functionality to protect against misbehavior caused by bugs. We aim to offer this as a built-in feature of The Accounter, streamlining the process and enhancing overall system resilience.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;65c6ae57-0747-4f76-bc1c-1bb6dfb7906a&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:1,&amp;quot;hash&amp;quot;:&amp;quot;59c7f492-08c9-4664-b14e-f3bba5735c8d&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-summary&#34;&gt;Summary&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ea9c0508-fbdb-4a7e-b7a8-59c59ffbeaba&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In this post, we introduced The Accounter, a global coordination system designed to improve the throughput and safety of operations on Uber’s stateful platform, Odin. Providing operation coordination as-a-service, The Accounter allows for the efficient execution of large-scale operations while maintaining cluster safety and avoiding conflicting actions. It tracks ongoing operations, enforces technology-specific policies, and ensures that new operations are only initiated when safe. The Accounter has significantly enhanced Uber’s operational efficiency, allowing small teams to manage thousands of clusters safely and drive centralized programs like encryption-at-rest migrations.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;239b805b-3c25-4020-916e-cc0597347e03&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Kubernetes&lt;sup&gt;®&lt;/sup&gt;, etcd&lt;sup&gt;®&lt;/sup&gt;, and its logo are registered trademarks of The Linux Foundation&lt;sup&gt;®&lt;/sup&gt; in the United States and other countries. No endorsement by The Linux Foundation is implied by the use of these marks.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;5269e747-7779-465f-b5de-78e1363ba453&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Apache Cassandra&lt;sup&gt;®&lt;/sup&gt; are registered trademarks or trademarks of the Apache Software Foundation in the United States and/or other countries. The use of these marks does not imply endorsement by the Apache Software Foundation.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;94534b87-4345-401b-8341-9409e5e40ab6&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;The cover photo was generated using OpenAI’s ChatGPT Enterprise and edited using Pixlr.&lt;/em&gt;&lt;/p&gt;】&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:1,&#34;hash&#34;:&#34;5d505d4c-32fc-41ff-afce-776cbebc303c&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-introduction&#34;&gt;简介&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;18a13a8e-26ba-4783-b225-7a6549308072&#34;,&#34;dropCap&#34;:false}&#34;&gt;在 &lt; a href=&#34;https://www.uber.com/en-DK/blog/odin-stateful-platform/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;上一篇文章&lt;/a&gt;，我们介绍了 Uber 的有状态平台 Odin。我们讨论了该平台的规模和对整个车队运营不断增长的需求如何需要在其许多补救循环之间进行更好的协调。多个冲突的操作可能会在没有集中协调的情况下损害存储集群，从而导致可用性或持久性问题。如图 1 所示，当不协调的修复循环运行基于仲裁的存储集群时，会导致问题。这篇文章探讨了我们如何克服这个问题并通过引入所有操作的全局协调来扩展 Odin 的吞吐量。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;4342cea2-fc72-47de-9749-7319ca399cee&#34;,&#34;alt&#34; :&#34;&#34;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img 解码=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXdaIUkYf9iJQIdmP5crzAtKJTaRz5LAR_5O_-XKdzeajomTuvyukefXs5KWFvePaa o91eUzkebkaCDIbq1PSmCFGtiV57ybtWfs-f544fcir-75M6byjHMW5NbLku9pEknPmuPTKtlxDn1Em0-g8Q2Z4You?key=b-AdKuusNx_dhDAHvkwz_g&#34; alt=&#34;&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 1：导致集群可用性损失的冲突操作示例。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;3f8302bd-08de-4e17-9918-e0bf5d0bf41b&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;a href=&#34;https://lucid.app/lucidchart/be5aad2b-cb17-4ece-a07b-2d1d3d9603b1/edit?page=0&amp;v=232&amp;s=465&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;6d90e788-6294-434d-85e0-ceb36505cf9c&#34;,&#34;dropCap&#34;:false}&#34;&gt;Odin 上的操作使用 Cadence 工作流程实现。当参与者（无论是人类还是自动化参与者）想要操作托管存储集群之一时，它会通过工作流来实现。工作流由操作（例如系统状态更改）和等待时间（例如等待系统收敛）组成，它们共同协调系统从一种状态到另一种状态的转换。工作流程执行的范围可以从几秒（例如升级容器映像）到几小时（例如在主机之间迁移工作负载（Uber 的车队使用本地连接的磁盘））。从现在起，我们将把这些工作流程称为操作。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;279aaa4c-a3e8-453d-aa5a-ff54261e5430&#34;,&#34;dropCap&#34;:false}&#34;&gt;我们需要一种控制新操作启动的机制，或者换句话说，回答以下问题：&lt;em&gt;在当前情况下，在此集群上继续执行此操作是否安全？&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;7c64aa80-fe8e-4de8-a4e3-5d6c9be7b3a4&#34;,&#34;dropCap&#34;:false}&#34;&gt;我们的设计要求如下：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;52b602ab-3bde-46cb-a0a6-6956c515d54a&#34;,&#34;ordered&#34;:false,&#34;values&#34;:&#34; “}”类=“wp-block-list”&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;独立修复循环&lt;/strong&gt;：这些循环应保持彼此不知情的状态。这对于扩展高级功能的开发至关重要。换句话说，修复循环不应该硬编码规则来确定何时可以安全地在集群上执行操作。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;特定于技术的政策&lt;/strong&gt;：Odin 管理 Uber 的所有有状态技术，并且每个技术技术对于集群操作具有独特的安全容差。因此，不同的技术可能需要不同的政策。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;平台范围限制&lt;/strong&gt;：系统应支持对所有技术实施全局限制/平台上的操作。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;4cc2a929-4d98-48c1-ab5f-ccc3dddca544&#34;,&#34;dropCap&#34;:false}&#34;&gt;我们的解决方案选择的是一个名为 The Accounter 的全球软件组件，它提供操作协调即服务。它的名称反映了其核心目的：作为跟踪所有正在进行的操作的中央注册表，了解操作之间的关系，并充当启动新操作的看门人。一个好的心智模型是将会计视为高级中断预算或模糊信号量。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;56bb2492-fe44-4855-aad8-d123e8ad7416&#34;,&#34;dropCap&#34;:false}&#34;&gt;当一个操作启动后，必须首先向会计请求对目标存储集群进行操作的权限，我们将这个过程称为索取。该声明涵盖整个操作，这可能涉及对系统状态的多次更改。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;652ecab4-2d56-4292-8860-82fb24cd0759&#34;,&#34;dropCap&#34;:false}&#34;&gt;会计使用确定是否可以批准索赔的特定技术政策。该策略有两个输入：集群运行状况，存储在 &lt;a href=&#34;https://www.uber.com/en-DK/blog/grail/&#34; target=&#34;_blank&#34; rel=&#34; 中的当前运行状况的集合noreferrer noopener&#34;&gt;Grail&lt;/a&gt;，以及当前正在进行的操作，这些操作已被跟踪和记录在 etcd&lt;sup&gt;®&lt;/sup&gt; 中存储。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;3e7bf56e-5d58-4e58-993f-cdb20923166b&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;58e0af82-e829-40b3-bcab-680a9345050e&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-cluster-health&#34;&gt;集群运行状况&lt;/h2&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;beb49c97-9d38-40d3-8537-f027c56a0d73&#34;,&#34;alt&#34; :&#34;&#34;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img 解码=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXfe6nv0NFbBiHe3fLUyfVxDlx0aMIs0VsodtTGOa5ULHXvlNDWniFa7J9q7ZlCcbh VZ6FTWYoIIAFfo2WVYyHzGYuVg6Gkhhd_VpWBhdeYTzlSH6OhHYkmnamHgNo9K5sk5ZMnoTrJzXtmocONLFdK5VvH6?key=b-AdKuusNx_dhDAHvkwz_g&#34; alt=&#34;&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 2：Odin 上的集群运行状况收集概览。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;72ea256b-f8af-4151-8ef3-a0da00ef9b47&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;a href=&#34;https://lucid.app/lucidchart/43371f6c-1761-42e9-ba36-50e6a081cea9/edit?page=0&amp;v=536&amp;s=672&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;1e553712-51cb-4082-b972-d73d09584791&#34;,&#34;dropCap&#34;:false}&#34;&gt;存储集群Odin 上由一个或多个工作负载组成，例如 Raft、Apache Cassandra&lt;sup&gt;®&lt;/sup&gt; 或类似的数据库集群节点。每个工作负载都是容器的集合：一个工作容器、一个主数据库容器以及可能的多个 sidecar 容器。 Worker 负责管理数据库和 sidecar 容器的主机级生命周期。它持续监控工作负载的状态并与控制平面进行通信。最近的工作负载状态存储在 Grail 中。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;040cc737-c482-436f-81fb-760c6f1e5e03&#34;,&#34;dropCap&#34;:false}&#34;&gt;确定集群时除了在单个工作负载中可以观察到的情况之外，还必须考虑其他几个健康信号。例如，集群是否存在复制不足的数据？集群是否因过度数据混洗或客户端负载增加而承受压力？存储团队通常会像这样管理/收集集群级别的健康信息，Odin 提供了将集群状态提取到 Grail 中的方法。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;1c6f4371-d466-4586-8992-9220aa431873&#34;,&#34;dropCap&#34;:false}&#34;&gt;技术的容忍度对于不健康的工作负载，根据具体技术的不同，差异很大，这在“特定技术的健康政策”中得到体现。��稍后会详细介绍。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;9e05f7a8-03ee-4a90-a2fc-85809279660d&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;9591126e-be90-474b-a839-2b5602d8ba3e&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-ongoing-operations-nbsp&#34;&gt;正在进行的操作&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;cd08ec06-1439-475c-92c1-0c4aa6cc3704&#34;,&#34;dropCap&#34;:false}&#34;&gt;系统型号使用两个关键概念进行的持续操作：&lt;em&gt;操作&lt;/em&gt;和&lt;em&gt;组&lt;/em&gt;。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;aa68ba88-99ac-4b51-a0e2-2e74ae167c03&#34;,&#34;dropCap&#34;:false}&#34;&gt;每个操作都是由操作对象表示，其中包含关键详细信息，例如目标存储工作负载、操作类型（如耗尽或停机）及其对存储集群的潜在中断。每一项操作都与一个或多个组相关联。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;81200b77-d173-4320-a11f-d6ad2631aa6f&#34;,&#34;dropCap&#34;:false}&#34;&gt;一组曲目链接到它的操作数，并存储超出操作数的附加元数据。例如，它记录最近开始和完成的操作。此数据允许对每个组内允许的操作实施基于时间的速率限制。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;a9c2cad5-c5b0-48a9-a792-714520f6693c&#34;,&#34;dropCap&#34;:false}&#34;&gt;虽然有许多组，它们可以大致分为两种类型：平台范围组（例如，区域、专区和机架等故障域）和技术特定组（例如例如，单独的存储集群和工作负载）。一个全球小组跟踪所有正在进行的操作。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;edb4505f-8a6e-4b62-8f10-99f0adee1f97&#34;,&#34;dropCap&#34;:false}&#34;&gt;平台范围团体实施全局并发限制，有助于防止 Odin 和底层基础设施过载。同时，特定于技术的策略利用集群和工作负载组来保护集群的可用性和持久性。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;7fc72d01-2afd-46ee-9dd5-a5d6f3993d5c&#34;,&#34;dropCap&#34;:false}&#34;&gt;数量集群上允许的操作因技术而异。某些技术将操作限制为一次只能运行一个工作负载，而其他技术则允许同时操作一定比例的集群。可以动态创建更专业的组来跟踪集群内特定工作负载子集的操作，比如角色。这种灵活性可以根据不同存储技术的要求制定更细致的安全策略。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;f1ddc4f1-d0e5-496b-847a-4679aa648bef&#34;,&#34;dropCap&#34;:false}&#34;&gt;下图说明了如何对操作进行建模，其中操作对象链接到多个组对象。这些显式关联有助于在操作完成或失败时进行清理过程。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;f024bc6a-8095-4654-8e69-a281e55fbe9e&#34;,&#34;alt&#34; :&#34;&#34;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img 解码=&#34;async&#34; src =“https://lh7-rt.googleusercontent.com/docsz/AD_4nXdUxx49TQHC2EwXgir_x7cX3CehhM61yc5TGL0BZ2aXsRkS8_7Odr-G_60BWCjIuR YbkEtZfYogfVhC0aEwNhYJY3elWUGb6oQ7yNBwB4K9bUJIKmRlCjk_s8C9UakIUClZvse1HXWGUawkeD6g5d0w5byj?key=b-AdKuusNx_dhDAHvkwz_g&#34; alt=&#34;&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 3：用于表示操作和组之间关系的数据模型概述。&lt;/figcaption&gt;&lt;/figure&gt; &lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;f162871a-8d83-440f-8098-027ea3605100&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;a href=&#34;https://lucid.app/lucidchart/4e05a85c-d7f0-4a2b-8ca1-c0685f1aef83/edit?page=0&amp;v=1611&amp;s=612&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;0bea51db-6a1e-40c5-b7e7-ece8863e57e5&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;da147268-514b-4568-bca0-cd3819ad8742&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-safety-policies&#34;&gt;安全政策&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;ea7b7ea1-8485-4862-8c7f-07e1e4eaca19&#34;,&#34;dropCap&#34;:false}&#34;&gt;现在我们可以有效地衡量集群的健康状况并了解所有正在进行的操作，我们可以引入安全策略。安全策略是一种编码化的中断预算，它允许表达特定于技术的策略，以决定如何在存储集群内重叠操作。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;adc5367e-1a21-4321-8c5b-1b4de1a3b153&#34;,&#34;dropCap&#34;:false}&#34;&gt;安全政策包括两部分：&lt;em&gt;健康政策&lt;/em&gt;和&lt;em&gt;限制政策&lt;/em&gt;。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;a25a8360-5e66-4230-9aa0-8c3999b761a6&#34;,&#34;dropCap&#34;:false}&#34;&gt;健康政策使用最新收集的集群健康信息来确定是否可以执行请求的操作。例如，技术团队可能希望防止运营陷入僵局。在客户端负载增加或工作负载不健康的集群上进行创作。  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;b9ca44e9-c9fc-487a-9ee7-3ad07a62473a&#34;,&#34;dropCap&#34;:false}&#34;&gt;限制政策，另一方面，可以限制影响一组的并发操作的数量，在顺序操作之间实施宽限期，或者提供操作排他性，以便如果一个组正在操作，其他组团体将拒绝所有主张。当您想一次操作一个机架时，这特别有用。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;dde3d889-02e1-4c97-b8db-7b8c779f626c&#34;,&#34;dropCap&#34;:false}&#34;&gt;会计提供政策实施者的功能集合，例如：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;82c24b34-5d62-4e09-8ed5-d598a9fc928e&#34;,&#34;ordered&#34;:false,&#34;values&#34;:&#34; “}”类=“wp-block-list”&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;衡量工作负载和集群运行状况的方法&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;em&gt;CheckMaxOperations(group, max)：&lt;/em&gt;检查指定组最多有最大操作数&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;em&gt;CheckElapsedFromLastClaim(group,uration)：&lt;/em&gt;检查给定时间是否已过去最后一个声明将操作与指定组相关联&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;em&gt;CheckElapsedFromLastUnclaim(group,uration)：&lt;/em&gt;检查给定时间是否已过去与操作相关的声明最后是从指定组中释放的&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;ab5a85e9-7962-47e3-bf9e-558454d9b7c5&#34;,&#34;dropCap&#34;:false}&#34;&gt;健康评估为时间点检查，无法为操作安全提供硬性保障。健康数据收集本质上涉及分布式系统中的延迟，这意味着可能会根据过时的集群健康状况视图批准两个同时进行的破坏性操作请求。限制策略执行的检查确实提供了硬保证，因为它们是通过 etcd 事务有条件提交的。让我们探讨一下它是如何工作的。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;cf11f91a-6480-44bf-97ae-aa661a8f523e&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;80101e32-fc99-4e92-b8ed-6c1d214c29b9&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-architecture&#34;&gt;架构&lt;/h2&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;id&#34;:1100184,&#34;sizeSlug&#34;:&#34;大&#34;,&#34;linkDestination&#34;:&#34;无&#34;,&#34;对齐&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;77539bbf-037e-4050-9f24-c6c0dca5ee59&#34;,&#34;alt&#34;:&#34;&#34;}&#34; class=&#34; aligncenter size-large&#34;&gt;&lt;img 加载=“惰性”解码=“异步”宽度=“1024”高度=“676” src =“https://blog.uber-cdn.com/cdn-cgi/image/width=2160，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/blogfigure4-17321696658887 -1024x676.png&#34; alt=&#34;&#34; 类=&#34;wp-image-1100184&#34; srcset =“https://blog.uber-cdn.com/cdn-cgi/image/width=1024，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/blogfigure4-17321696658887 .png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/blogfigure4-17321696658887.png 300w , https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/blogfigure4-17321696658887.png 768w , https://blog.uber-cdn.com/cdn-cgi/image/width=1536，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/blogfigure4-17321696658887.png 1536w , https://blog.uber-cdn.com/cdn-cgi/image/width=2048，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/blogfigure4-17321696658887.png 2048w “尺寸=”（最大宽度：1024px）100vw，1024px“ referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 4：Accounter 架构和索赔授予流程。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;12513284-7271-401c-980b-42f55c5ce634&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;da75e2ea-9113-409b-8176-250a4eec58ea&#34;,&#34;dropCap&#34;:false}&#34;&gt;持久化操作和组，我们使用 etcd 作为键值存储。当工作流想要对其中一个存储集群进行更改时，它会经历以下过程：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;c9492c1e-9928-4200-9d4b-5c8f12747215&#34;,&#34;ordered&#34;:false,&#34;values&#34;:&#34; “}”类=“wp-block-list”&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;想要提出索赔的工作流程会调用会计人员，并提供有关目标存储工作负载和用途的信息操作（1）。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Accounter 从 Grail 检索当前集群健康状态 (2) 并从 etcd (3) 检索当前操作状态）。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;会计人员在评估目标工作负载 (4) 之前先评估平台范围内的并发性和速率限制。&lt;/li &gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;接下来，根据 etcd 的状态评估特定技术的运行状况和限制政策 (5)。如果任一保单失败，索赔将立即被拒绝，不会产生任何后果在交易中。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;否则，如果满足所有条件，则会构建所需更改的单个事务并将其提交到 etcd (6).&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;接受或拒绝索赔取决于 etcd 事务 (7) 的成功。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;现在可以继续操作 (8)。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;操作完成后，工作流程负责通过会计人员释放索赔。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;2d205b96-135b-4430-8450-d86cd6c614a9&#34;,&#34;dropCap&#34;:false}&#34;&gt;etcd 中的更改以事务方式执行，确保持续操作的一致视图。具体来说，我们在提交更改之前使用乐观锁定来验证有关组内操作数量的假设。  事务构建器库为安全策略开发人员抽象了这种复杂性，给他们直接在内存中工作的印象。这种方法类似于 &lt;a href=&#34;https://github.com/etcd-io/etcd/blob/main/client/v3/concurrency/stm.go&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt; etcd 的 STM&lt;/a&gt;（软件事务内存）库，但进行了专门优化以提高吞吐量。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;4b15994d-02e0-44b4-a3e8-83a3a63f4215&#34;,&#34;dropCap&#34;:false}&#34;&gt;如果交易由于乐观并发冲突而被拒绝，会在内部重试几次。如果索赔被拒绝，只要操作仍然相关，我们就会依靠该操作重试。如果拒绝是由于违反了组的速率限制，则 Accounter 会提供有意义的退避时间，操作可以使用该时间来决定如何继续。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;2e65edf2-8787-47d5-a453-0783b0b5ccfa&#34;,&#34;dropCap&#34;:false}&#34;&gt;避免所有声明必须直接从 etcd 获取状态 (3)，所有声明首先根据持续更新的内存中数据快照进行评估。如果声明违反了使用缓存状态的任一策略，则会立即被拒绝，而不会尝试将事务提交到 etcd。这是至关重要的，因为系统必须扩展到每秒 3,000-4,000 次索赔尝试。大部分流量来自平台审核工作负载通过试运行索赔尝试的能力。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;7f555a1a-bccf-4a97-bd78-e09779105318&#34;,&#34;dropCap&#34;:false}&#34;&gt;etcd 事务最终确定接受声明并以事务方式检查操作限制，并在提交事务时授予声明。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;核心/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;0e6b08f4-e6c0-44fa-96d8-38173a802ccf&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34; class=&#34;wp-block-separator has-alpha-channel -不透明度&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;5dfe78d2-ae09-4da5-8f72-a0db28154ee8&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-claim-life-cycle&#34;&gt;声明生命周期&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;96d661d8-8126-41a9-9d44-13a5b548817c&#34;,&#34;dropCap&#34;:false}&#34;&gt;我们的操作是通常是分层的，因此我们设计了 Accounter 来支持从父操作到子操作的声明传递。这些传递的声明是可重入的，这意味着当子操作尝试声明时，它会变成无操作。这种设计允许更复杂的操作，同时保持操作逻辑简单。程序员不需要了解整个操作结构来确定声明是否已被接受，他们只需根据需要接受声明，知道系统会正确处理它。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;aa4aa757-d051-4607-a05b-eb2845346a3d&#34;,&#34;dropCap&#34;:false}&#34;&gt;操作负责用于在操作完成后释放索赔。但是，在某些情况下，操作可能会终止、意外失败或包含错误。虽然这些情况很少见，但它们确实以我们的规模发生过。系统必须确保声明最终被释放，因为过时的声明可能会阻碍操作吞吐量。会计人员始终可以追溯到操作，因为操作与其在数据模型中的声明相关联。这用于识别不活动的操作并安全地释放过时的声明。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;a0f55035-1a46-48b0-a950-f6ae2e88711e&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;d2b8cd75-c991-4fcd-8945-512799392927&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-auditing&#34;&gt;审核&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;8a62f129-bd41-4475-a536-ba30040361aa&#34;,&#34;dropCap&#34;:false}&#34;&gt;拥有强大的力量责任重大。将政策制定委托给技术团队会带来风险，即过于保守的政策可能会阻碍平台执行整个车队运营的能力。 Uber 将不同技术的工作负载放在同一主机上，导致同一主机上有数百个工作负载。当平台必须排空主机时，必须首先排空所有工作负载（即转移到其他主机）。限制性的安全策略增加了只能部分耗尽主机的风险。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;核心/段落&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;065d0b30-bc9e-4635-b11e-74290cf41f53&#34;,&#34;dropCap&#34;:false}&#34;&gt;为了解决此问题，我们实施了广泛的审核系统。该系统持续评估工作负载的可声明性，提供跨平台可进行哪些操作的准确快照。此信息发布到 Grail 并由修复循环用作预过滤器来识别可行的操作。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;cd52e911-bb11-4bd8-9b5c-0ede76028f78&#34;,&#34;dropCap&#34;:false}&#34;&gt;此外， Odin 团队利用这些数据来深入了解其操作已被长时间阻塞的工作负载，从而使 Odin 团队能够向负责受影响存储的团队发出警报技术。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;0f753d1e-2356-401c-a2c5-a0779e4fd4ba&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;5a19b9d5-34b6-48db-bf17-8c1081a1ea54&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-alternative-approaches&#34;&gt;替代方法&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;0b79e0b1-f348-4c7e-b1fe-94e4fecfcac0&#34;,&#34;dropCap&#34;:false}&#34;&gt;我们已经遇到至少两种其他常见的协调操作方法：分布式锁管理器和 Kubernetes&lt;sup&gt;®&lt;/sup&gt; &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/pods/disruptions/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;中断预算&lt;/a&gt;。在这里，我们解释它们与 The Accounter 的方法有何不同。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;90ac573c-b34b-48de-b790-15634226352c&#34;,&#34;dropCap&#34;:false}&#34;&gt;分布式锁管理器通常涉及获取集群上的锁，确保一次只能执行一个操作。但是，考虑到在 Odin 中操作单个工作负载所需的时间较长（主要是由于本地连接的磁盘），为单个工作负载操作锁定整个集群将是低效且不切实际的。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;d38b4f0f-ad43-4a79-ac92-455fa20e23aa&#34;,&#34;dropCap&#34;:false}&#34;&gt;更灵活锁的替代方案可以是将锁扩展到信号量，允许同时授予预定义数量的令牌。这类似于 Kubernetes 所采用的方法，其中中断预算预先设置了固定数量的操作。然而，会计员与这些方法不同，它只关注计数操作，将执行限制的责任留给单独的策略。这种方法为政策设计提供了更大的灵活性。例如，它允许指定只允许一定数量的优化移动。不过，如果主机发生故障并请求紧急转移，那么总是会被批准。在模型中保留这些紧急情况是一个优势，因为策略可以声明从那时起直到主机故障完全修复之前不会授予任何效率举措。这种灵活性对于在适应实时条件的同时保持运营效率至关重要。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;cc797c74-5c1f-4b7b-b4ab-4f1ce27e4c72&#34;,&#34;opacity&#34;:&#34;alpha 通道&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;c8458d63-f070-413a-b601-07fa8feb090d&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-scale&#34;&gt;比例&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;63355cfa-615a-47d7-b76c-8f6490d9d68d&#34;,&#34;dropCap&#34;:false}&#34;&gt;会计有现在已经完全融入到所有运营中，平台完成的运营数量转化为大量流量。让我们看一下当前的数字：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;346d0f16-c987-4634-aebb-1b520d4906d3&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;strong&gt;交通&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;1ceef2db-4db7-4166-95d9-476676e9332e&#34;,&#34;ordered&#34;:false,&#34;values&#34;:&#34; “}”类=“wp-block-list”&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&gt;每小时 300,000 次索赔评估&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&gt;每小时 700 万次试运行索赔评估&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;e6313ebc-797e-4373-bf0f-b07a618cff7c&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;strong&gt;活跃的操作和组&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;c7913b1e-26c5-4bd8-9943-a930634b3805&#34;,&#34;ordered&#34;:false,&#34;values&#34;:&#34; “}”类=“wp-block-list”&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&gt;2,000 个活动操作&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&gt;700,000 个不同组&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;061733d3-4c18-4ecb-893d-487ee40db6e3&#34;,&#34;opacity&#34;:&#34;alpha 通道&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;7a7b116b-7d6b-4eac-a84c-d17562b9a593&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-results&#34;&gt;结果&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;980045ba-187b-49f0-8339-6486eb00855e&#34;,&#34;dropCap&#34;:false}&#34;&gt;多年来，The Accounter 显着提高了 Odin 的运营效率，使小团队能够安全地管理数千个集群。它促进了集中效率计划，并授权领导层将 Uber 的物理基础设施视为灵活且临时的。此外，The Accounter 通过明确的关注点分离保留了团队的独立性：修复循环所有者只专注于确定哪些操作是必要的，而无需担心安全考虑。&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;c91f0eab-494b-4ef9-91e5-f679cff07372&#34;,&#34;dropCap&#34;:false}&#34;&gt;一个值得注意的示例我们努力采用静态加密。我们已经能够推动完全集中化的流程。我们所要做的就是要求我们的自动化将工作负载转移到静态加密的主机上，而会计人员则确保它安全地发生。此过程涉及迁移 210 万个 vCore 和 1.6EiB 本地连接磁盘。在过去，像这样的操作需要大量的规划/执行，涉及所有技术利益相关者，并花费数年的工程时间。 &lt;strong&gt;现在，它们是无操作的。&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;0c8631c0-0b86-4321-b0fa-1124614856b3&#34;,&#34;alt&#34; :&#34;&#34;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img 解码=&#34;async&#34; src =“https://lh7-rt.googleusercontent.com/docsz/AD_4nXf9ke1obdn_A5SCJO98Si-zmTAX7ehygvUwbOzbfFXMFSMIJcZno4qaiijgDH9Us 9XbOZJNs-E60pB-t3wcMlaDtauVTMI_p_R1hJ0lwusZZHi2I7kJgHNUsKaeTNYUU5N4L0F_D0QRS8lR96qh91NXJbY?key=b-AdKuusNx_dhDAHvkwz_g&#34; alt=&#34;&#34; title=&#34;Chart&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 5：Uber 过渡到静态加密的时间表。&lt;/figcaption&gt;&lt;/figure &gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;880c1309-40c3-4e9f-8186-d4fe9768a736&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;add83f5b-3776-4924-8cd6-be8e819efc74&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;8be63190-b606-494f-b957-c335dccda674&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-future-work&#34;&gt;未来的工作&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;ac04a251-021d-4809-8a98-dba96ab2e81b&#34;,&#34;dropCap&#34;:false}&#34;&gt;会计范例正在积极发展，我们正在努力解决其当前的一些局限性。需要改进的一个重要领域是对操作优先级的支持。目前，操作依赖于持续轮询来获取声明，这会产生不必要的流量并且不允许不同操作类型的优先级。当较低优先级的效率优化阻止高优先级的人为启动的操作时，这变得尤其成问题。另一个令人感兴趣的领域是直接在 The Accounter 中定义熔断器的能力。目前，Odin 中的每个循环都实现了此功能，以防止错误引起的不当行为。我们的目标是将此作为 The Accounter 的内置功能提供，从而简化流程并增强整体系统的弹性。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;65c6ae57-0747-4f76-bc1c-1bb6dfb7906a&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:1,&#34;hash&#34;:&#34;59c7f492-08c9-4664-b14e-f3bba5735c8d&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-summary&#34;&gt;摘要&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;ea9c0508-fbdb-4a7e-b7a8-59c59ffbeaba&#34;,&#34;dropCap&#34;:false}&#34;&gt;在这篇文章中，我们推出了 The Accounter，这是一个全球协调系统，旨在提高 Uber 有状态平台 Odin 上的吞吐量和操作安全性。 Accounter 提供操作协调即服务，可以高效执行大规模操作，同时维护集群安全并避免操作冲突。它跟踪正在进行的操作，执行特定于技术的策略，并确保仅在安全时启动新操作。 Accounter 显着提高了 Uber 的运营效率，使小型团队能够安全地管理数千个集群并驱动静态加密迁移等集中式程序。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;fontSize&#34;:&#34;小&#34;,&#34;hash&#34;:&#34;239b805b-3c25-4020-916e-cc0597347e03&#34;,&#34;dropCap&#34; :false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Kubernetes&lt;sup&gt;®&lt;/sup&gt;， etcd&lt;sup&gt;®&lt;/sup&gt; 及其徽标是 Linux Foundation&lt;sup&gt;®&lt;/sup&gt; 在美国和其他国家/地区的注册商标。使用这些标记并不暗示 Linux 基金会的认可。&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;fontSize&#34;:&#34;小&#34;,&#34;hash&#34;:&#34;5269e747-7779-465f-b5de-78e1363ba453&#34;,&#34;dropCap&#34; :false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Apache Cassandra&lt;sup&gt;®&lt;/sup&gt; 是注册商标或 Apache Software Foundation 在美国和/或其他国家/地区的商标。使用这些标记并不意味着 Apache 软件基金会的认可。&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;fontSize&#34;:&#34;小&#34;,&#34;hash&#34;:&#34;94534b87-4345-401b-8341-9409e5e40ab6&#34;,&#34;dropCap&#34; :false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;封面照片是 g使用 OpenAI 的 ChatGPT Enterprise 生成并使用 Pixlr 进行编辑。&lt;/em&gt;&lt;/p&gt;</description>
      <pubDate>Thu, 21 Nov 2024 06:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Enabling Infinite Retention for Upsert Tables in Apache Pinot】在 Apache Pinot 中启用 Upsert 表的无限保留</title>
      <link>https://www.uber.com/blog/enabling-infinite-retention-for-upsert-tables/</link>
      <description>【&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:1,&amp;quot;hash&amp;quot;:&amp;quot;6f464e0d-95aa-47d4-b91b-ff78b73e82ad&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;3bf72380-da88-4457-b301-5a8b1f33f317&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;a href=&#34;https://github.com/apache/pinot&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Apache Pinot&lt;/a&gt;&lt;sup&gt;™&lt;/sup&gt; was originally designed as an append-only OLAP (online analytical processing) database. After some redesign, it was modified to support upserts, which are UPdates plus inSERTs. This allows you to update a record for a given primary key or insert new primary keys. Deletion is a natural extension of upserts, addressing the need for efficient memory and disk usage in upsert use cases that require indefinite retention periods with deletions based on specific business needs.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;60776145-55b5-404a-a4ec-df832fd2fef4&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;This blog highlights recent feature developments in &lt;a href=&#34;https://github.com/apache/pinot&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Apache Pinot&lt;/a&gt; that now support deletions at both memory and disk levels. It also shows how these developments have enabled Uber to sustainably support infinite retention for Pinot upsert use cases.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;5d7874d5-8553-4c9f-907f-66e93b70ae56&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;98ed0dc4-373d-46f6-a88e-92130099a954&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-upsert-overview&#34;&gt;Upsert Overview&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c28bed20-e3db-456b-b4a3-32f63b67707b&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Upsert is a feature of Pinot used for things like point updates, backfills, and data correction.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7ae2a065-d825-4e86-9825-0d070419ff7a&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Figure 1 presents a high-level overview of upsert architecture, highlighting how upserts are highly memory-intensive.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1098831,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;2ad046e2-dfe3-41b4-8633-e2a59301fa2a&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;428&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-1-upsert-high-level-architecture-17303485305469-1024x428.png&#34; alt=&#34;&#34; class=&#34;wp-image-1098831&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-1-upsert-high-level-architecture-17303485305469.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-1-upsert-high-level-architecture-17303485305469.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-1-upsert-high-level-architecture-17303485305469.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1053,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-1-upsert-high-level-architecture-17303485305469.png 1053w&#34; sizes=&#34;(max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;&lt;em&gt;Figure 1&lt;/em&gt;:&lt;em&gt; High-level architecture of upsert in Pinot.&lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9e441de2-02e6-4d81-ac1a-aaf46746c488&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c789f689-5369-4d82-a15b-3f0bb04df0f8&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Upsert-Metadata is an in-memory hashmap that maintains a mapping of Record-Primary-keys to Record-locations. The Record-Primary-key, a unique identifier, is used for partitioning upstream Kafka and serves as a reference for updates if they already exist in the Upsert-Metadata map. The Record-location points to the &lt;a href=&#34;https://docs.pinot.apache.org/basics/concepts/components/table/segment&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;segment&lt;/a&gt; where the latest record for a given Record-Primary-key is stored. This entire Upsert-Metadata mapping is kept in memory for fast upsert operation, contributing to the high memory usage of upserts. To illustrate the memory-intensive nature of upserts, at Uber, our standard host with 376 GiB of memory and 1.1 TiB of disk storage experiences 80% memory utilization and approximately 10% disk utilization for upsert use cases. To draw a comparison with non-upsert append-only use-cases, these hosts experience higher disk utilization (~80%) with memory and cpu utilization at around ~30-40% (highly dependent on query shapes).&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6ffd6fd5-44ff-4ab9-a63b-28c939d4d819&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;This blog discusses strategies to improve both memory and disk footprints for upsert use cases that require very high (indefinite) retention periods.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1098833,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;ddd7ab5c-b872-4e58-a955-92a7a84cd9c2&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;495&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-2-upsert-low-level-architecture-17303490841159-1024x495.png&#34; alt=&#34;&#34; class=&#34;wp-image-1098833&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-2-upsert-low-level-architecture-17303490841159.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-2-upsert-low-level-architecture-17303490841159.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-2-upsert-low-level-architecture-17303490841159.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-2-upsert-low-level-architecture-17303490841159.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=2048,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-2-upsert-low-level-architecture-17303490841159.png 2048w&#34; sizes=&#34;(max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;&lt;em&gt;Figure 2&lt;/em&gt;:&lt;em&gt; Example explaining the low-level architecture of upsert.&lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e6650171-6279-4ab7-be14-b8215e2f7322&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;5cc29ea0-9ad8-4e0e-b43a-3744fd3aa4d6&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Consider Figure 2, which shows upsert behavior at the partition level within a specific server instance. Here, there’s a sealed segment S1 and a consuming segment S2. The Upsert-Metadata map stores a mapping of primary keys to record locations, represented as (segment-name, DocId). The DocId can be understood as the row number within a segment where the record is located. Figure 2 shows, via a dotted line, that when the same primary key appears in the consuming segment, the Upsert-Metadata map updates the record location to the new consuming segment, overwriting the reference to the old record.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;65e57f3d-f92a-4880-9f34-d79cb2e6885d&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Additionally, there’s an in-memory segment bitmap that stores the queryable records for a given segment and is updated with each ingested record. During query processing for upsert tables, this bitmap is used as an implicit filter.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;5e732668-f72a-431b-915f-d9fdaf8c745d&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;55a87a0f-15f6-4d4a-b20a-304128177f02&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-point-deletes&#34;&gt;Point Deletes&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;588352aa-4b80-4243-8443-231351742fc7&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;When describing upserts, another important use case is deletes. Once you mark a Record-Primary-key as deleted, it shouldn’t be selected in subsequent queries anymore. They should also be subsequently deleted from in-memory and disk for cost savings.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;19afce3f-05e0-4edf-bc27-dea569945c24&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In Pinot, you can enable the point deletes feature by setting a table-level configuration.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1098835,&amp;quot;width&amp;quot;:&amp;quot;568px&amp;quot;,&amp;quot;height&amp;quot;:&amp;quot;auto&amp;quot;,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;dc5667b8-be55-461c-be1c-9001ea13e8ca&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large is-resized&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;216&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-3-point-deletes-config-17303491308002-1024x216.png&#34; alt=&#34;&#34; class=&#34;wp-image-1098835&#34; style=&#34;width:568px;height:auto&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-3-point-deletes-config-17303491308002.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-3-point-deletes-config-17303491308002.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-3-point-deletes-config-17303491308002.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1252,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-3-point-deletes-config-17303491308002.png 1252w&#34; sizes=&#34;(max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;&lt;em&gt;Figure 3&lt;/em&gt;:&lt;em&gt; Configuration to enable point-deletes.&lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;50bfa0e5-42c3-4558-ad92-a9630a88b86b&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;348cb2da-3c55-48fa-826d-6cab7184eae8&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Once the point deletes feature is enabled, Pinot starts tracking an additional bitmap called queryableDocIds. It operates similarly to validDocIds with one key difference: whenever the value in the deleteRecordColumn is true, the corresponding entries are removed from queryableDocIds but not from validDocIds. During query time, you then strictly use queryableDocIds acting as an implicit filter. Ideally, queryableDocIds and validDocIds are identical unless a delete record is present for a table.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1098837,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;a9be6149-c76f-4fe4-972d-c344307edf24&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;410&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-4-point-deletes-architecture-17303491608467-1024x410.png&#34; alt=&#34;&#34; class=&#34;wp-image-1098837&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-4-point-deletes-architecture-17303491608467.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-4-point-deletes-architecture-17303491608467.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-4-point-deletes-architecture-17303491608467.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-4-point-deletes-architecture-17303491608467.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=1862,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-4-point-deletes-architecture-17303491608467.png 1862w&#34; sizes=&#34;(max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;&lt;em&gt;Figure 4&lt;/em&gt;:&lt;em&gt; Architecture of the point deletes feature.&lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6e6709ac-fbe8-4e64-b768-b73ce5db41ca&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;552aa8a6-7a03-4329-9e00-02412ab7c6fb&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In the example in Figure 4, the only action different from the normal ingestion flow whenever a delete-record comes up is to remove the entry from queryableDocIds. The rest of the flow remains the same. This feature is very similar to adding a filter where &lt;em&gt;deleteRecordColumn = false&lt;/em&gt; in all of your queries on this table.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0cb6e955-eec7-44da-85bc-9ff9126983f8&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Pinot doesn’t immediately delete the key from the upsert-metadata map upon receiving a deletion message. This approach ensures consistency in deletion, particularly in cases where an out-of-order event arrives after the deletion event for that key.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;3788335a-0090-4b38-980e-5a18a73d054a&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;It’s clear that this function acts more as a soft-delete feature, as it doesn’t achieve any savings by removing metadata from the hashmap or from disk. We have a use case at Uber where the delete messages scale is around 5,000 per second, equivalent to 600 million keys being deleted daily. Based on the standard host configuration mentioned above, we can accommodate approximately 250-300 million keys per host. With a replication factor of 2, accommodating 600 million keys per day, that means adding 4 hosts daily. This becomes a critical issue if we want to support high or indefinite retention, as it results in the cost of adding 4 hosts every day just to manage the metadata of deleted records.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6162ad21-cef0-4213-980a-cf32cf952c5b&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9eb6ec06-9c6b-4b95-bcd9-f0c476c9d878&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-metadata-retention-on-deleted-keys&#34;&gt;Metadata Retention on Deleted Keys&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;b587ba8a-b675-4d04-a222-1620822b88fc&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;To address the problem mentioned above, we introduced &lt;a href=&#34;https://github.com/apache/pinot/issues/11736&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;a new feature in Pinot&lt;/a&gt; that removes metadata for deleted keys after a TTL window. This buffer TTL window ensures that any out-of-order events occurring within this period won’t reverse the deletion.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1098839,&amp;quot;width&amp;quot;:&amp;quot;578px&amp;quot;,&amp;quot;height&amp;quot;:&amp;quot;auto&amp;quot;,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;2cf8b259-d875-4e5d-9ae3-e4f6554e4199&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large is-resized&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;254&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-5-deleted-keys-ttl-config-17303492939394-1024x254.png&#34; alt=&#34;&#34; class=&#34;wp-image-1098839&#34; style=&#34;width:578px;height:auto&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-5-deleted-keys-ttl-config-17303492939394.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-5-deleted-keys-ttl-config-17303492939394.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-5-deleted-keys-ttl-config-17303492939394.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1252,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-5-deleted-keys-ttl-config-17303492939394.png 1252w&#34; sizes=&#34;(max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;&lt;em&gt;Figure 5&lt;/em&gt;:&lt;em&gt; Configuration to enable retention of metadata of deleted keys.&lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;04619d44-ef9f-4b7a-9ebe-ba50df77caee&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1098841,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;4936f41b-6629-40cc-8ff4-c1dd68770750&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;360&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-6-low-level-architecture-of-deleted-keys-ttl-17303494211495-1024x360.png&#34; alt=&#34;&#34; class=&#34;wp-image-1098841&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-6-low-level-architecture-of-deleted-keys-ttl-17303494211495.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-6-low-level-architecture-of-deleted-keys-ttl-17303494211495.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-6-low-level-architecture-of-deleted-keys-ttl-17303494211495.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-6-low-level-architecture-of-deleted-keys-ttl-17303494211495.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=1902,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-6-low-level-architecture-of-deleted-keys-ttl-17303494211495.png 1902w&#34; sizes=&#34;(max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;&lt;em&gt;Figure 6&lt;/em&gt;:&lt;em&gt; Low-level architecture of metadata retention of deleted keys.&lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c30884a8-46cc-4a41-b0a8-648e37475ec2&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;bba4c59b-ef7d-45af-8262-5b409005c444&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The design is straightforward. After each segment commit cycle, Pinot iterates through the keys in a table’s partition in the upsert-metadata-manager. If a key points to a record that exists in validDocIds but not in queryableDocIds (indicating the record is deleted), and it’s exceeded the deletedKeysTTL threshold, Pinot removes the metadata for that key from the map and marks the validDocId as invalid. As shown in Figure 6, where red indicates removal, Pinot removes the 4th row from validDocId as well.&lt;br&gt;&lt;br&gt;The next section of this blog covers why Pinot marks the validDocId as invalid.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1098843,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;c0576c7c-bd24-4ee0-aac0-31aaffcaa6c0&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;289&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-7-low-level-code-for-deletedkeysttl-17303494918158-1024x289.png&#34; alt=&#34;&#34; class=&#34;wp-image-1098843&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-7-low-level-code-for-deletedkeysttl-17303494918158.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-7-low-level-code-for-deletedkeysttl-17303494918158.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-7-low-level-code-for-deletedkeysttl-17303494918158.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-7-low-level-code-for-deletedkeysttl-17303494918158.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=1730,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-7-low-level-code-for-deletedkeysttl-17303494918158.png 1730w&#34; sizes=&#34;(max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;&lt;em&gt;Figure 7&lt;/em&gt;:&lt;em&gt; Pseudo-code for deleted keys TTL flow.&lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;8204bef8-c3c1-49fd-8c10-481e4052ea65&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;5f0cd937-4e99-470d-80af-e7deec686a33&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Figure 8 illustrates the scale of deletion we achieved at Uber after enabling this feature on a table with a deletion rate of approximately 2,000 messages per second. The metric shows that up to 300 million keys were deleted from the metadata-manager map per day, considering a replication factor of 2.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1098845,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;179cfea9-8182-42b3-9537-2dc589891402&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;404&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-8-deleted-keys-ttl-impact-17303496032610-1024x404.png&#34; alt=&#34;&#34; class=&#34;wp-image-1098845&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-8-deleted-keys-ttl-impact-17303496032610.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-8-deleted-keys-ttl-impact-17303496032610.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-8-deleted-keys-ttl-impact-17303496032610.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-8-deleted-keys-ttl-impact-17303496032610.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=2048,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-8-deleted-keys-ttl-impact-17303496032610.png 2048w&#34; sizes=&#34;(max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;&lt;em&gt;Figure 8&lt;/em&gt;:&lt;em&gt; Deleted keys TTL feature impact in production.&lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;27480f2b-c480-4169-8aa2-9221c9eb52b2&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;170a8587-a8bc-4bf9-8ab6-977dec3ca062&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2596619c-4815-4f28-8923-b98137a7e86b&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-upsert-compaction&#34;&gt;Upsert Compaction&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;44c5307e-38d8-49ca-a3ac-ae22532e8c2b&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;During server restarts, Pinot loads all the keys persisted on disk back into the in-memory hashmap before triggering the deleted-keys-retention on them again. This has caused OOM issues as the stale keys weren’t removed from the disk and are in the scale of millions. This can be resolved by gradually removing the stale keys from the disk, thereby also regaining disk space savings and not loading them back into memory during restarts.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;493cb873-80ee-4b2a-8cae-125a566fd00f&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;At Uber, we use the &lt;a href=&#34;https://github.com/apache/pinot/pull/10463&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;UpsertCompactionTask minion task&lt;/a&gt; to compact old segments and remove stale or deleted rows from the disk. For this, we use the validDocId bitmap snapshot flow. After every segment commit cycle, we snapshot these bitmaps for all segments and persist them to disk. During each task run, we loop through all these bitmaps to find the segments that’ll provide the maximum compaction efficiency, where the highest value of &lt;em&gt;invalidDocs = totalDocs − validDocs&lt;/em&gt;.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;5c6ada86-b1b9-4d03-9d80-467cb9245304&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Referencing the previous examples, after an Upsert-compaction task runs on the segment, the segment on disk will be updated as shown in Figure 9. We see ‌records related to &lt;em&gt;primary key=3&lt;/em&gt; are removed from disk as well.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1098847,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;3389947a-b60a-4997-9865-88a2216fe707&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;288&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-9-low-level-architecture-of-upsert-compaction-17303496455383-1024x288.png&#34; alt=&#34;&#34; class=&#34;wp-image-1098847&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-9-low-level-architecture-of-upsert-compaction-17303496455383.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-9-low-level-architecture-of-upsert-compaction-17303496455383.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-9-low-level-architecture-of-upsert-compaction-17303496455383.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-9-low-level-architecture-of-upsert-compaction-17303496455383.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=1878,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-9-low-level-architecture-of-upsert-compaction-17303496455383.png 1878w&#34; sizes=&#34;(max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;&lt;em&gt;Figure 9: Low-level architecture of upsert compaction.&amp;nbsp;&lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;60b5ffc6-e7f6-492a-9139-255e21f10e5e&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;aa036b3a-d22b-413e-b23c-74a369483933&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;As mentioned earlier, during the metadata retention workflow for deleted keys, Pinot marked the validDocId as invalid for deleted primary keys. This allowed them to be snapshotted in the next cycle, enabling the removal of the deleted record entry from the disk via upsert compaction.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;3297bbf8-670f-42db-a170-06fca407dd6f&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Figure 10 shows the impact of enabling upsert compaction for 1 of our production tables. The table grew to approximately 8 TiB in size, but after enabling compaction, the size was reduced to around 850 GiB, resulting in a space saving of about 90%. Additionally, the rate of data growth significantly decreased from approximately 85 GiB/day to about 3 GiB/day.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1098849,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;03b08f5a-2743-4eff-8c2a-888b3e21097f&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;309&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-10-impact-of-upsert-compaction-task-at-production-scale.-17303498706695-1024x309.png&#34; alt=&#34;&#34; class=&#34;wp-image-1098849&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-10-impact-of-upsert-compaction-task-at-production-scale.-17303498706695.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-10-impact-of-upsert-compaction-task-at-production-scale.-17303498706695.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-10-impact-of-upsert-compaction-task-at-production-scale.-17303498706695.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-10-impact-of-upsert-compaction-task-at-production-scale.-17303498706695.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=2048,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-10-impact-of-upsert-compaction-task-at-production-scale.-17303498706695.png 2048w&#34; sizes=&#34;(max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;&lt;em&gt;Figure 10: Impact of upsert compaction task at production scale.&lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c2a7fe2a-7670-4ab9-a36f-52d424b2c6e6&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;5c015e29-a878-4acc-8fab-9df3126a3230&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-ensuring-data-consistency-with-deletion-and-compaction&#34;&gt;&lt;br&gt;Ensuring Data Consistency with Deletion and Compaction&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2fb6d20d-9b99-4a6a-9b62-1484a31602c6&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;One challenge with enabling compaction along with deletion is we could end up in a situation where an older non-deleted record for a particular key isn’t compacted, but the deleted record is. During a server restart, when all segments are loaded, Pinot would incorrectly mark the record as non-deleted and start returning it as a valid primary key, leading to an inconsistent state in the table.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;8b68305f-2087-43ae-982e-f48f19271e92&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;For example, consider a primary key PK1 with records in segments S0 and S1. In S1, the record is marked as deleted. If S1 gets compacted but S0 doesn’t due to threshold reasons in the upsert compaction flow, during a server restart, the upsert-metadata-manager map would incorrectly point PK1 to S0, even though it should be considered deleted for the end user.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;86bb47ba-8878-4574-800c-0c722ad7fc09&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;To resolve this situation, we proposed a &lt;a href=&#34;https://github.com/apache/pinot/pull/13347&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;design in Pinot to maintain a state of Primary Key&amp;nbsp; →&amp;nbsp; distinct-segment-count&lt;/a&gt;. This means tracking the number of segments where a record exists for a given primary key. If the count is &amp;lt;= 1, Pinot will allow deletion of metadata on the record, followed by marking the validDocId as invalid. Pinot can now compact the deleted record, ensuring that all other records in other segments are removed.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;238b50a4-0c7e-4faa-a6b9-4ad3a501a455&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;1284d8a3-f06d-4fa8-826c-28ee992219e1&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-use-cases-at-uber&#34;&gt;Use Cases at Uber&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;78f3eacb-6acb-409b-91a4-20763d84c171&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;As of writing, we’ve enabled infinite retention on upsert tables for over 20 tables, with the total primary key count across all tables being approximately 6 billion keys (without replication) and a deletion rate of around 600 million keys per day.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;57086e77-68d3-4503-9445-2979304f5655&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Infinite retention on upsert tables will benefit the following types of long-running use cases at Uber and many more:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;166919b3-4707-4aef-a4a9-842d37ad58a7&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Tracking Uber for Business ‌use cases where organizations are active for years and have regular updates regarding employee count, payment entities, etc.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Following Uber vouchers use cases where vouchers are active for years and receive updates on voucher redemption count, voucher expiry.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Cadence workflow analytics, as each workflow can run for hours, months, or years, with deletion enabled on closed workflows.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e8edb46e-3fd1-4226-a538-6141bfd46be2&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;4c862e22-f807-4c74-8f15-83e0112383a1&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-next-steps-nbsp&#34;&gt;Next Steps&amp;nbsp;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;235f6f61-db25-4acf-ac58-6c25fc91e4e0&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;One challenge we have is the creation of many small segments for a particular table over time. This can lead to longer loading times during server restarts and higher query latency, as more segments need to be processed by the same number of threads during query execution.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0ae209af-bd6e-40b5-8188-d7fc56b8f86d&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;One possible solution is to enable upsert compaction across multiple segments, merging them to create larger segments, controlling the overall segment count growth over time.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ffb7cee3-09ce-43e4-835b-be30f8bfc94a&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:1,&amp;quot;hash&amp;quot;:&amp;quot;88951a08-8e0a-4188-bc28-d55268b08a69&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-conclusion&#34;&gt;Conclusion&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;514436bc-0ef2-4cd1-907d-e8239168f7b3&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;This powerful feature in Apache Pinot meets a crucial need for many Pinot users at Uber and beyond, enabling higher retention for upsert tables and supporting deletions directly within Pinot. This unlocks numerous new use cases for Pinot upserts at Uber and brings Pinot’s functionality closer to that of a row-level database.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;4fff3aad-3e6d-44ec-934e-01aa3d7ca10d&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e4c7c315-71fb-491b-bbe4-1c6ad36bb3e1&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-acknowledgments&#34;&gt;Acknowledgments&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;db131410-81a0-4b9f-b365-cd7d432d6fc8&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Special thanks to the Apache Pinot&lt;sup&gt;™&lt;/sup&gt; community members who actively contributed to and reviewed the numerous changes required to enable this feature in Pinot.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;132c57fc-915d-4f35-ad45-844bb47ad56c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Special thanks to Navina Ramesh in designing point deletes, Robert Zych who designed upsert compaction, and Yupeng Fu for crafting the original upsert design document.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;744f7acb-2945-49f9-a5c4-677304116510&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;Apache Pinot&lt;sup&gt;™,&lt;/sup&gt; Pinot, Apache, the Apache feather logo, and the Apache Pinot project logo are registered trademarks of The Apache Software Foundation. ‌No endorsement by The Apache Software Foundation is implied by the use of these marks.&lt;br&gt;Cover Photo attribution: “&lt;a href=&#34;https://openverse.org/image/bc95682f-5a02-46a3-98eb-86f364835de0&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Infinite Wine&lt;/a&gt;” by &lt;a href=&#34;https://www.flickr.com/photos/47105685@N00/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Adam Brill&lt;/a&gt; is licensed under &lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/2.0/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;CC BY-NC-SA 2.0&lt;/a&gt;. No modifications.&lt;/p&gt;】&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:1,&#34;hash&#34;:&#34;6f464e0d-95aa-47d4-b91b-ff78b73e82ad&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-introduction&#34;&gt;简介&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;3bf72380-da88-4457-b301-5a8b1f33f317&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;a href =&#34;https://github.com/apache/pinot&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Apache Pinot&lt;/a&gt;&lt;sup&gt;™&lt;/sup&gt; 最初被设计为仅附加的 OLAP（在线分析处理）数据库。经过一些重新设计后，它被修改为支持 upserts，即 UPdates 加上 inSERTs。这允许您更新给定主键的记录或插入新的主键。删除是 upsert 的自然扩展，解决了 upsert 用例中对高效内存和磁盘使用的需求，这些用例需要无限期的保留期，并根据特定业务需求进行删除。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;60776145-55b5-404a-a4ec-df832fd2fef4&#34;,&#34;dropCap&#34;:false}&#34;&gt;此博客亮点&lt;a href=&#34;https://github.com/apache/pinot&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Apache 的最新功能开发Pinot&lt;/a&gt; 现在支持内存和磁盘级别的删除。它还展示了这些发展如何使 Uber 能够持续支持 Pinot 更新插入用例的无限保留。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;5d7874d5-8553-4c9f-907f-66e93b70ae56&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;98ed0dc4-373d-46f6-a88e-92130099a954&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-upsert-overview&#34;&gt;更新插入概述&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;c28bed20-e3db-456b-b4a3-32f63b67707b&#34;,&#34;dropCap&#34;:false}&#34;&gt;更新插入是Pinot 的功能用于点更新、回填和数据校正等。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;7ae2a065-d825-4e86-9825-0d070419ff7a&#34;,&#34;dropCap&#34;:false}&#34;&gt;图 1 显示upsert 架构的高级概述，强调 upsert 是如何高度内存密集型的。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;id&#34;:1098831,&#34;sizeSlug&#34;:&#34;large&#34;,&#34;linkDestination&#34;:&#34;none&#34;,&#34;align&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;2ad046e2-dfe3-41b4-8633-e2a59301fa2a&#34;,&#34;alt&#34;:&#34;&#34;}&#34;类=“aligncenter尺寸-大”&gt;&lt;img加载=“惰性”解码=“异步”宽度=“1024”高度=“428”src=“https://blog.uber-cdn.com/cdn-cgi/图像/宽度=2160，质量=80，onerror=重定向，格式=自动/wp-content/uploads/2024/10/figure-1-upsert-high-level-architectu重新17303485305469-1024x428.png&#34; alt=&#34;&#34; class=&#34;wp-image-1098831&#34; srcset =“https://blog.uber-cdn.com/cdn-cgi/image/width=1024，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-1 -upsert-高层架构-17303485305469.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-1-upsert-高层架构-17303485305469.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-1-upsert-高层架构-17303485305469.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1053，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-1-upsert-高层架构-17303485305469.png 1053w“尺寸=”（最大宽度：1024px）100vw， 1024px&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;&lt;em&gt;图 1&lt;/em&gt;：&lt;em&gt;Pinot 中 upsert 的高级架构。&lt;/em&gt;&lt;/图标题&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;9e441de2-02e6-4d81-ac1a-aaf46746c488&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;c789f689-5369-4d82-a15b-3f0bb04df0f8&#34;,&#34;dropCap&#34;:false}&#34;&gt;更新插入元数据是一个内存中的哈希图，它维护记录主键到记录位置的映射。 Record-Primary-key 是一个唯一标识符，用于对上游 Kafka 进行分区，并作为更新的参考（如果更新已存在于 Upsert-Metadata 映射中）。 Record-location 指向 &lt;a href=&#34;https://docs.pinot.apache.org/basics/concepts/components/table/segment&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;segment&lt;/a &gt; 存储给定记录主键的最新记录的位置。整个更新插入元数据映射都保存在内存中，以实现快速更新插入操作，从而导致更新插入的内存使用率很高。为了说明 upsert 的内存密集型特性，在 Uber，我们拥有 376 GiB 内存和 1.1 TiB 磁盘存储的标准主机在 upsert 用例中内存利用率为 80%，磁盘利用率约为 10%。为了与非 upsert 仅附加用例进行比较，这些主机的磁盘利用率更高 (~80%)，内存和 CPU 利用率约为 30-40%（高度依赖于查询形状）。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;6ffd6fd5-44ff-4ab9-a63b-28c939d4d819&#34;,&#34;dropCap&#34;:false}&#34;&gt;此博客讨论针对需要非常长（无限期）保留期的更新插入用例，改进内存和磁盘占用的策略。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;id&#34;:1098833,&#34;sizeSlug&#34;:&#34;large&#34;,&#34;linkDestination&#34;:&#34;none&#34;,&#34;align&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;ddd7ab5c-b872-4e58-a955-92a7a84cd9c2&#34;,&#34;alt&#34;:&#34;&#34;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img 加载=&#34;lazy&#34; 解码=&#34;异步&#34; width=&#34;1024&#34; height=&#34;495&#34; src =“https://blog.uber-cdn.com/cdn-cgi/image/width=2160，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-2 -upsert-low-level-architecture-17303490841159-1024x495.png&#34; alt=&#34;&#34;类=“wp-image-1098833”srcset=“https://blog.uber-cdn.com/cdn-cgi/image/width=1024，quality=80，onerror=redirect，format=auto/wp-content/上传/2024/10/figure-2-upsert-low-level-architecture-17303490841159.png 1024w， https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-2-upsert-低级架构-17303490841159.png 300w， https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-2-upsert-低层架构-17303490841159.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-2-upsert-低层架构-17303490841159.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=2048，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-2-upsert-低级架构-17303490841159.png 2048w“尺寸=”（最大宽度：1024px）100vw， 1024px&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;&lt;em&gt;图 2&lt;/em&gt;：&lt;em&gt; 解释 upsert 低级架构的示例。&lt;/em&gt;&lt; /figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;e6650171-6279-4ab7-be14-b8215e2f7322&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;5cc29ea0-9ad8-4e0e-b43a-3744fd3aa4d6&#34;,&#34;dropCap&#34;:false}&#34;&gt;考虑图 2 ，它显示了特定服务器实例中分区级别的更新插入行为。这里有一个密封段 S1 和一个消耗段 S2。 Upsert-Metadata 映射存储主键到记录位置的映射，表示为（段名称，DocId）。 DocId可以理解为记录所在段内的行号。图 2 通过虚线显示，当相同的主键出现在消费段中时，Upsert-Metadata 映射会将记录位置更新到新的消费段，覆盖对旧记录的引用。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;65e57f3d-f92a-4880-9f34-d79cb2e6885d&#34;,&#34;dropCap&#34;:false}&#34;&gt;此外，还有内存中的段位图，用于存储给定段的可查询记录，并随每个摄取的记录进行更新。在更新插入表的查询处理过程中，该位图用作隐式过滤器。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;5e732668-f72a-431b-915f-d9fdaf8c745d&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-块-sepa”rator 有-alpha-通道-不透明度&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;55a87a0f-15f6-4d4a-b20a-304128177f02&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-point-deletes&#34;&gt;点删除&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;588352aa-4b80-4243-8443-231351742fc7&#34;,&#34;dropCap&#34;:false}&#34;&gt;描述更新插入时，另一个重要的用例是删除。一旦将记录主键标记为已删除，就不应再在后续查询中选择它。随后还应将它们从内存和磁盘中删除，以节省成本。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;19afce3f-05e0-4edf-bc27-dea569945c24&#34;,&#34;dropCap&#34;:false}&#34;&gt;在黑皮诺中，您可以通过设置表级配置来启用点删除功能。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;核心/图像&#34; data-wp-block=&#34;{&#34;id&#34;:1098835,&#34;宽度&#34;:&#34;568px&#34;,&#34;高度&#34;:&#34;自动&#34;,&#34;sizeSlug&#34;:&#34;大&#34;,&#34;linkDest信息&#34;:&#34;无&#34;,&#34;对齐&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;dc5667b8-be55-461c-be1c-9001ea13e8ca&#34;,&#34;alt&#34;:&#34;&#34;}&#34;类=“aligncenter size-large is-resized”&gt;&lt;img加载=“惰性”解码=“异步”宽度=“1024”高度=“216” src =“https://blog.uber-cdn.com/cdn-cgi/image/width=2160，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-3 -point-deletes-config-17303491308002-1024x216.png&#34; alt=&#34;&#34;类=“wp-image-1098835”样式=“宽度：568px；高度：自动” srcset =“https://blog.uber-cdn.com/cdn-cgi/image/width=1024，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-3 -point-deletes-config-17303491308002.png 1024w， https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-3-point-删除-config-17303491308002.png 300w， https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-3-point-删除-config-17303491308002.png 768w， https://blog.uber-cdn.com/cdn-cgi/image/width=1252，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-3-point-删除-config-17303491308002.png 1252w“尺寸=”（最大宽度：1024px）100vw， 1024px&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;&lt;em&gt;图 3&lt;/em&gt;：&lt;em&gt;启用点删除的配置。&lt;/em&gt;&lt;/figcaption&gt; &lt;/图&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;50bfa0e5-42c3-4558-ad92-a9630a88b86b&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;348cb2da-3c55-48fa-826d-6cab7184eae8&#34;,&#34;dropCap&#34;:false}&#34;&gt;一旦点启用删除功能后，Pinot 开始跟踪名为 queryableDocIds 的附加位图。它的操作方式与 va 类似lidDocIds 有一个关键区别：只要 deleteRecordColumn 中的值为 true，相应的条目就会从 queryableDocIds 中删除，但不会从 validDocIds 中删除。在查询期间，您可以严格使用 queryableDocIds 作为隐式过滤器。理想情况下，queryableDocIds 和 validDocIds 是相同的，除非表中存在删除记录。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;id&#34;:1098837,&#34;sizeSlug&#34;:&#34;large&#34;,&#34;linkDestination&#34;:&#34;none&#34;,&#34;align&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;a9be6149-c76f-4fe4-972d-c344307edf24&#34;,&#34;alt&#34;:&#34;&#34;}&#34;类=“aligncenter尺寸-大”&gt;&lt;img加载=“惰性”解码=“异步”宽度=“1024”高度=“410” src =“https://blog.uber-cdn.com/cdn-cgi/image/width=2160，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-4 -point-deletes-architecture-17303491608467-1024x410.png&#34; alt=&#34;&#34;类=“wp-image-1098837”srcset=“https://blog.uber-cdn.com/cdn-cgi/image/width=1024，quality=80，onerror=redirect，format=auto/wp-content/ uploads/2024/10/figure-4-point-deletes-architecture-17303491608467.png 1024w， https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-4-point-删除-architecture-17303491608467.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-4-point-删除-architecture-17303491608467.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-4-point-删除-architecture-17303491608467.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=1862，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-4-point-删除-architecture-17303491608467.png 1862w“尺寸=”（最大宽度：1024px）100vw， 1024px&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;&lt;em&gt;图 4&lt;/em&gt;：&lt;em&gt;点删除功能的架构。&lt;/em&gt;&lt;/figcaption&gt; &lt;/图&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;6e6709ac-fbe8-4e64-b768-b73ce5db41ca&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;552aa8a6-7a03-4329-9e00-02412ab7c6fb&#34;,&#34;dropCap&#34;:false}&#34;&gt;在示例中在图 4 中，每当出现删除记录时，与正常摄取流程不同的唯一操作是从 queryableDocIds 中删除该条目。其余流程保持不变。此功能与在此表的所有查询中添加一个过滤器（其中&lt;em&gt;deleteRecordColumn = false&lt;/em&gt;）非常相似。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;0cb6e955-eec7-44da-85bc-9ff9126983f8&#34;,&#34;dropCap&#34;:false}&#34;&gt;Pinot 没有t 收到后立即从 upsert-metadata 映射中删除密钥删除消息。这种方法可确保删除的一致性，特别是在该键的删除事件之后发生无序事件的情况下。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;3788335a-0090-4b38-980e-5a18a73d054a&#34;,&#34;dropCap&#34;:false}&#34;&gt;很明显，该函数更像是一种软删除功能，因为它不会通过从哈希映射或磁盘中删除元数据来实现任何节省。我们在 Uber 有一个用例，删除消息的规模约为每秒 5,000 条，相当于每天删除 6 亿个密钥。根据上述标准主机配置，每台主机大约可以容纳250-3亿个密钥。如果复制因子为 2，每天可容纳 6 亿个密钥，这意味着每天要添加 4 台主机。如果我们想要支持高保留或无限期保留，这将成为一个关键问题，因为这会导致每天添加 4 台主机来管理已删除记录的元数据的成本。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;6162ad21-cef0-4213-980a-cf32cf952c5b&#34;,&#34;opacity&#34;:&#34;alpha 通道&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;9eb6ec06-9c6b-4b95-bcd9-f0c476c9d878&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-metadata-retention-on-deleted-keys&#34;&gt;已删除密钥的元数据保留&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;b587ba8a-b675-4d04-a222-1620822b88fc&#34;,&#34;dropCap&#34;:false}&#34;&gt;解决上面提到的问题，我们引入了 &lt;a href=&#34;https://github.com/apache/pinot/issues/11736&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Pinot 中的一项新功能&lt;/a&gt;，可在 TTL 窗口后删除已删除键的元数据。此缓冲区 TTL 窗口可确保在此期间发生的任何乱序事件都不会逆转删除。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;核心/图像&#34; data-wp-block=&#34;{&#34;id&#34;:1098839,&#34;宽度&#34;:&#34;578px&#34;,&#34;高度&#34;:&#34;自动&#34;,&#34;sizeSlug&#34;:&#34;大&#34;,&#34;linkDest信息&#34;:&#34;无&#34;,&#34;对齐&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;2cf8b259-d875-4e5d-9ae3-e4f6554e4199&#34;,&#34;alt&#34;:&#34;&#34;}&#34;类=“aligncenter size-large is-resized”&gt;&lt;img加载=“惰性”解码=“异步”宽度=“1024”高度=“254” src =“https://blog.uber-cdn.com/cdn-cgi/image/width=2160，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-5 -deleted-keys-ttl-config-17303492939394-1024x254.png&#34; alt=&#34;&#34;类=“wp-image-1098839”样式=“宽度：578px；高度：自动” srcset =“https://blog.uber-cdn.com/cdn-cgi/image/width=1024，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-5 -删除键-ttl-config-17303492939394.png 1024w， https://blog.uber-cdn.com/cdn-cgi/im年龄/宽度=300，质量=80，onerror=重定向，格式=自动/wp-content/uploads/2024/10/figure-5-deleted-keys-ttl-config-17303492939394.png 300w， https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-5-deleted-键-ttl-config-17303492939394.png 768w， https://blog.uber-cdn.com/cdn-cgi/image/width=1252，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-5-deleted-键-ttl-config-17303492939394.png 1252w“尺寸=”（最大宽度：1024px）100vw， 1024px&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;&lt;em&gt;图 5&lt;/em&gt;：&lt;em&gt; 用于启用已删除密钥的元数据保留的配置。&lt;/em&gt;&lt; /figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;04619d44-ef9f-4b7a-9ebe-ba50df77caee&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;id&#34;:1098841,&#34;sizeSlug&#34;:&#34;large&#34;,&#34;linkDestination&#34;:&#34;none&#34;,&#34;align&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;4936f41b-6629-40cc-8ff4-c1dd68770750&#34;,&#34;alt&#34;:&#34;&#34;}&#34;类=“aligncenter尺寸-大”&gt;&lt;img加载=“惰性”解码=“异步”宽度=“1024”高度=“360” src =“https://blog.uber-cdn.com/cdn-cgi/image/width=2160，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-6 -low-level-architecture-of-deleted-keys-ttl-17303494211495-1024x360.png&#34; alt=&#34;&#34;类=“wp-image-1098841”srcset=“https://blog.uber-cdn.com/cdn-cgi/image/width=1024，quality=80，onerror=redirect，format=auto/wp-content/ uploads/2024/10/figure-6-low-level-architecture-of-deleted-keys-ttl-17303494211495.png 1024w，https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-6-已删除密钥的低级架构-ttl-17303494211495.png 300w， https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-6-low-已删除密钥的级别架构-ttl-17303494211495.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-6-low-已删除密钥的级别架构-ttl-17303494211495.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=1902，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-6-low- level-architecture-of-deleted-keys-ttl-17303494211495.png 1902w“尺寸=”（最大宽度： 1024px) 100vw, 1024px&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;&lt;em&gt;图 6&lt;/em&gt;：&lt;em&gt;已删除密钥的元数据保留的低级架构。 &lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;c30884a8-46cc-4a41-b0a8-648e37475ec2&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;bba4c59b-ef7d-45af-8262-5b409005c444&#34;,&#34;dropCap&#34;:false}&#34;&gt;设计很简单。在每个段提交周期之后，Pinot 都会迭代 upsert-metadata-manager 中表分区中的键。如果一个键指向存在于 validDocIds 中但不存在于 queryableDocIds 中的记录（表明该记录已被删除），并且超过了deletedKeysTTL阈值，Pinot将从映射中删除该键的元数据并将validDocId标记为无效。如图 6 所示，其中红色表示删除，Pinot 也会从 validDocId 中删除第 4 行。&lt;br&gt;&lt;br&gt;本博客的下一部分将介绍 Pinot 将 validDocId 标记为无效的原因。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;id&#34;:1098843,&#34;sizeSlug&#34;:&#34;large&#34;,&#34;linkDestination&#34;:&#34;none&#34;,&#34;align&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;c0576c7c-bd24-4ee0-aac0-31aaffcaa6c0&#34;,&#34;alt&#34;:&#34;&#34;}&#34;类=“aligncenter尺寸-大”&gt;&lt;img加载=“惰性”解码=“异步”宽度=“1024”高度=“289” src =“https://blog.uber-cdn.com/cdn-cgi/image/width=2160，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-7 -low-level-code-for-deletedkeysttl-17303494918158-1024x289.png&#34; alt=&#34;&#34;类=“wp-image-1098843”srcset=“https://blog.uber-cdn.com/cdn-cgi/image/width=1024，quality=80，onerror=redirect，format=auto/wp-content/上传/2024/10/figure-7-low-level-code-for-deletedkeysttl-17303494918158.png 1024w，https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-7-用于删除keysttl的低级代码-17303494918158.png 300w， https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-7-low-已删除keysttl的级别代码-17303494918158.png 768w， https://blog.uber-cdn.com/cdn-cgi/image/width=1536，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-7-low-已删除keysttl的级别代码-17303494918158.png 1536w， https://blog.uber-cdn.com/cdn-cgi/image/width=1730，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-7-low- level-code-for-deletedkeysttl-17303494918158.png 1730w“尺寸=”（最大宽度：1024px） 100vw, 1024px&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;&lt;em&gt;图 7&lt;/em&gt;：&lt;em&gt;已删除密钥 TTL 流的伪代码。&lt;/em&gt; &lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;8204bef8-c3c1-49fd-8c10-481e4052ea65&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;5f0cd937-4e99-470d-80af-e7deec686a33&#34;,&#34;dropCap&#34;:false}&#34;&gt;图 8 说明我们在 Uber 上启用此功能后实现的删除规模，删除率约为每秒 2,000 条消息。该指标显示，元数据中删除了多达 3 亿个键每天 a-manager 地图，考虑复制因子为 2。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;id&#34;:1098845,&#34;sizeSlug&#34;:&#34;large&#34;,&#34;linkDestination&#34;:&#34;none&#34;,&#34;align&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;179cfea9-8182-42b3-9537-2dc589891402&#34;,&#34;alt&#34;:&#34;&#34;}&#34;类=“aligncenter尺寸-大”&gt;&lt;img加载=“惰性”解码=“异步”宽度=“1024”高度=“404” src =“https://blog.uber-cdn.com/cdn-cgi/image/width=2160，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-8 -deleted-keys-ttl-impact-17303496032610-1024x404.png&#34; alt=&#34;&#34;类=“wp-image-1098845”srcset=“https://blog.uber-cdn.com/cdn-cgi/image/width=1024，quality=80，onerror=redirect，format=auto/wp-content/上传/2024/10/figure-8-deleted-keys-ttl-impact-17303496032610.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-8-deleted-键-ttl-影响-17303496032610.png 300w， https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-8-deleted-键-ttl-影响-17303496032610.png 768w， https://blog.uber-cdn.com/cdn-cgi/image/width=1536，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-8-deleted-键-ttl-影响-17303496032610.png 1536w， https://blog.uber-cdn.com/cdn-cgi/image/width=2048，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-8-deleted-键-ttl-impact-17303496032610.png 2048w“尺寸=”（最大宽度：1024px） 100vw, 1024px&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;&lt;em&gt;图 8&lt;/em&gt;：&lt;em&gt;删除的密钥 TTL 功能对生产的影响。&lt;/em&gt;&lt; /figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;27480f2b-c480-4169-8aa2-9221c9eb52b2&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;170a8587-a8bc-4bf9-8ab6-977dec3ca062&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;2596619c-4815-4f28-8923-b98137a7e86b&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-upsert-compaction&#34;&gt;更新插入压缩&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;44c5307e-38d8-49ca-a3ac-ae22532e8c2b&#34;,&#34;dropCap&#34;:false}&#34;&gt;服务器重新启动期间，Pinot 将磁盘上持久存在的所有键加载回内存中的哈希映射，然后再次触发它们的已删除键保留。这导致了 OOM 问题，因为过时的密钥没有从磁盘中删除，并且数量达到了数百万个。这可以通过逐渐从磁盘中删除过时的密钥来解决，从而重新获得节省的磁盘空间，并且在重新启动期间不会将它们加载回内存中。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;493cb873-80ee-4b2a-8cae-125a566fd00f&#34;,&#34;dropCap&#34;:false}&#34;&gt;在优步，我们使用 &lt;a href=&#34;https://github.com/apache/pinot/pull/10463&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;UpsertCompactionTask minion 任务&lt;/a&gt; 用于压缩旧段并从磁盘中删除陈旧或已删除的行。为此，我们使用 validDocId 位图快照流程。在每个段提交周期之后，我们都会对所有段的这些位图进行快照并将它们保存到磁盘。在每次任务运行期间，我们循环遍历所有这些位图，以找到提供最大压缩效率的段，其中 &lt;em&gt;invalidDocs =totalDocs - validDocs&lt;/em&gt; 的最高值。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;5c6ada86-b1b9-4d03-9d80-467cb9245304&#34;,&#34;dropCap&#34;:false}&#34;&gt;引用上一个例如，在段上运行 Upsert-compaction 任务后，磁盘上的段将被更新，如图 9 所示。我们看到相关记录&lt;em&gt;primary key=3&lt;/em&gt; 也会从磁盘中删除。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;核心/图像&#34; data-wp-block=&#34;{&#34;id&#34;:1098847,&#34;sizeSlug&#34;:&#34;大&#34;,&#34;linkDestination&#34;:&#34;无&#34;,&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;3389947a-b60a-4997-9865 -88a2216fe707&#34;,&#34;alt&#34;:&#34;&#34;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img加载=“惰性”解码=“异步”宽度=“1024”高度=“288” src =“https://blog.uber-cdn.com/cdn-cgi/image/width=2160，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-9 -low-level-architecture-of-upsert-compaction-17303496455383-1024x288.png&#34; alt=&#34;&#34;类=“wp-image-1098847”srcset=“https://blog.uber-cdn.com/cdn-cgi/image/width=1024，quality=80，onerror=redirect，format=auto/wp-content/ uploads/2024/10/figure-9-low-level-architecture-of-upsert-compaction-17303496455383.png 1024w，https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-9-低级架构-upsert-compaction-17303496455383.png 300w， https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-9-low- level-architecture-of-upsert-compaction-17303496455383.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-9-low- level-architecture-of-upsert-compaction-17303496455383.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=1878，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-9-low- level-architecture-of-upsert-compaction-17303496455383.png 1878w“尺寸=”（最大宽度：1024px） 100vw, 1024px&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;&lt;em&gt;图 9：upsert 压缩的低级架构。 &lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p达ta-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;60b5ffc6-e7f6-492a-9139-255e21f10e5e&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;aa036b3a-d22b-413e-b23c-74a369483933&#34;,&#34;dropCap&#34;:false}&#34;&gt;如前所述，在已删除键的元数据保留工作流程中，Pinot 将 validDocId 标记为对于已删除主键无效。这使得它们可以在下一个周期中进行快照，从而可以通过 upsert 压缩从磁盘中删除已删除的记录条目。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;3297bbf8-670f-42db-a170-06fca407dd6f&#34;,&#34;dropCap&#34;:false}&#34;&gt;图 10 显示对我们的 1 个生产表启用 upsert 压缩的影响。表的大小增长到约 8 TiB，但启用压缩后，大小减小到约 850 GiB，从而节省了约 90% 的空间。此外，数据增长率从约 85 GiB/天显着下降至约 3 GiB/天。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;id&#34;:1098849,&#34;sizeSlug&#34;:&#34;large&#34;,&#34;linkDestination&#34;:&#34;none&#34;,&#34;align&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;03b08f5a-2743-4eff-8c2a-888b3e21097f&#34;,&#34;alt&#34;:&#34;&#34;}&#34;类=“aligncenter尺寸-大”&gt;&lt;img加载=“惰性”解码=“异步”宽度=“1024”高度=“309” src =“https://blog.uber-cdn.com/cdn-cgi/image/width=2160，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-10 -impact-of-upsert-compaction-task-at-product-scale.-17303498706695-1024x309.png&#34; alt=&#34;&#34;类=“wp-image-1098849” srcset =“https://blog.uber-cdn.com/cdn-cgi/image/width=1024，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-10 -生产规模的upsert-compaction-task的影响。-17303498706695.png 1024w， https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-10-impact- of-upsert-compaction-task-at-product-scale.-17303498706695.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-10-impact- of-upsert-compaction-task-at-product-scale.-17303498706695.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-10-impact- of-upsert-compaction-task-at-product-scale.-17303498706695.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=2048，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-10-impact- of-upsert-compaction-task-at-product-scale.-17303498706695.png 2048w&#34; 尺寸 = &#34;(最大宽度: 1024px) 100vw, 1024px&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;&lt;em&gt;图 10：upsert 压缩任务对生产规模的影响。&lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;c2a7fe2a-7670-4ab9-a36f-52d424b2c6e6&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;5c015e29-a878-4acc-8fab-9df3126a3230&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-ensuring-data-consistency-with-deletion-and-compaction&#34;&gt;&lt;br&gt;确保数据一致性删除和压缩&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;2fb6d20d-9b99-4a6a-9b62-1484a31602c6&#34;,&#34;dropCap&#34;:false}&#34;&gt;一项挑战启用压缩和删除是我们最终可能会遇到这样的情况：特定键的较旧的未删除记录不会被压缩，但已删除的记录会被压缩 是。在服务器重新启动期间，当加载所有段时，Pinot 会错误地将记录标记为未删除，并开始将其作为有效主键返回，从而导致表中的状态不一致。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;8b68305f-2087-43ae-982e-f48f19271e92&#34;,&#34;dropCap&#34;:false}&#34;&gt;例如，考虑主键 PK1，其记录位于段 S0 和 S1 中。在S1中，该记录被标记为已删除。如果由于 upsert 压缩流程中的阈值原因，S1 被压缩，但 S0 没有被压缩，则在服务器重新启动期间，upsert-metadata-manager 映射将错误地将 PK1 指向 S0，即使它应被视为对最终用户而言已删除。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;86bb47ba-8878-4574-800c-0c722ad7fc09&#34;,&#34;dropCap&#34;:false}&#34;&gt;解决此问题情况下，我们提出了 &lt;a href=&#34;https://github.com/apache/pinot/pull/13347&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Pinot 中的设计是为了维护主键→不同段计数的状态&lt;/a&gt;。这意味着跟踪给定主键存在记录的段数。如果计数 &lt;= 1，Pinot 将允许删除记录上的元数据，然后将 validDocId 标记为无效。 Pinot 现在可以压缩已删除的记录，确保删除其他段中的所有其他记录。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;238b50a4-0c7e-4faa-a6b9-4ad3a501a455&#34;,&#34;opacity&#34;:&#34;alpha 通道&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;1284d8a3-f06d-4fa8-826c-28ee992219e1&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-use-cases-at-uber&#34;&gt;Uber 用例&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;78f3eacb-6acb-409b-91a4-20763d84c171&#34;,&#34;dropCap&#34;:false}&#34;&gt;截至撰写时，我们为 20 多个表启用了 upsert 表的无限保留，以及所有表的主键总数大约有 60 亿个密钥（没有复制），每天的删除率约为 6 亿个密钥。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;57086e77-68d3-4503-9445-2979304f5655&#34;,&#34;dropCap&#34;:false}&#34;&gt;无限保留upsert 表将有利于 Uber 等以下类型的长期运行用例：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;166919b3-4707-4aef-a4a9-842d37ad58a7&#34;,&#34;ordered&#34;:false,&#34;values&#34;:&#34; “}”类=“wp-block-list”&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;跟踪 Uber for Business 用例，其中组织活跃多年并定期更新有关员工人数、支付实体的信息等等&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;以下 Uber 优惠券使用案例，其中优惠券有效多年，并接收有关优惠券兑换计数、优惠券到期的更新。 &lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Cadence 工作流程分析，因为每个工作流程可以运行数小时、数月或数年，并在关闭时启用删除工作流程。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;e8edb46e-3fd1-4226-a538-6141bfd46be2&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;4c862e22-f807-4c74-8f15-83e0112383a1&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-next-steps-nbsp&#34;&gt;后续步骤&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;235f6f61-db25-4acf-ac58-6c25fc91e4e0&#34;,&#34;dropCap&#34;:false}&#34;&gt;我们面临的一项挑战have 是随着时间的推移为特定表创建许多小段。这可能会导致服务器重新启动期间的加载时间更长以及查询延迟更高，因为在查询执行期间需要由相同数量的线程处理更多的段。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;0ae209af-bd6e-40b5-8188-d7fc56b8f86d&#34;,&#34;dropCap&#34;:false}&#34;&gt;一种可能的解决方案是为了跨多个段启用 upsert 压缩，将它们合并以创建更大的段，从而控制总体段计数随时间的增长。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;ffb7cee3-09ce-43e4-835b-be30f8bfc94a&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:1,&#34;hash&#34;:&#34;88951a08-8e0a-4188-bc28-d55268b08a69&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-conclusion&#34;&gt;结论&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;514436bc-0ef2-4cd1-907d-e8239168f7b3&#34;,&#34;dropCap&#34;:false}&#34;&gt;Apache Pinot 中的这一强大功能满足了 Uber 及其他公司的许多 Pinot 用户的关键需求，可以提高更新插入表的保留率并支持直接在 Pinot 中进行删除。这为 Uber 的 Pinot 更新插入解锁了许多新用例，并使 Pinot 的功能更接近行级数据库的功能。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;4fff3aad-3e6d-44ec-934e-01aa3d7ca10d&#34;,&#34;opacity&#34;:&#34;alpha 通道&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;e4c7c315-71fb-491b-bbe4-1c6ad36bb3e1&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-acknowledgments&#34;&gt;致谢&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;db131410-81a0-4b9f-b365-cd7d432d6fc8&#34;,&#34;dropCap&#34;:false}&#34;&gt;特别感谢Apache Pinot&lt;sup&gt;™&lt;/sup&gt; 社区成员积极贡献并审查了在 Pinot 中启用此功能所需的大量更改。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;132c57fc-915d-4f35-ad45-844bb47ad56c&#34;,&#34;dropCap&#34;:false}&#34;&gt;特别感谢Navina Ramesh 负责设计点删除，Robert Zych 负责设计 upsert 压缩，Yupeng Fu 负责制作原始的 upsert 设计文档。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;fontSize&#34;:&#34;小&#34;,&#34;hash&#34;:&#34;744f7acb-2945-49f9-a5c4-677304116510&#34;,&#34;dropCap&#34; :false}&#34; class=&#34;has-small-font-size&#34;&gt;Apache Pinot&lt;sup&gt;™,&lt;/sup&gt; Pinot，Apache， Apache 羽毛徽标和 Apache Pinot 项目徽标是 Apache 软件基金会的注册商标。 ‌使用这些标记并不暗示 Apache 软件基金会的认可。&lt;br&gt;封面照片归属：“&lt;a href=&#34;https://openverse.org/image/bc95682f-5a02-46a3-98eb-86f364835de0&#34; target =&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;无限美酒&lt;/a&gt;” by &lt;a href=&#34;https://www.flickr.com/photos/47105685@N00/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Adam Brill&lt;/a&gt; 已获得 &lt;a href=&#34;https:// Creativecommons.org/licenses/by-nc-sa/2.0/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;CC BY-NC-SA 2.0&lt;/a&gt;。没有修改。&lt;/p&gt;</description>
      <pubDate>Thu, 31 Oct 2024 05:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Presto® Express: Speeding up Query Processing with Minimal Resources】Presto® Express：用最少的资源加速查询处理</title>
      <link>https://www.uber.com/blog/presto-express/</link>
      <description>【&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:1,&amp;quot;hash&amp;quot;:&amp;quot;7404d726-deb9-4f91-bde8-c282b1b4c7e2&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9663f6c7-9977-4746-afb2-88dc6a604b87&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Presto&lt;sup&gt;®&lt;/sup&gt; is an open-source, distributed SQL query engine designed for running interactive analytic queries on data sources of any size, from gigabytes to petabytes.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;362e44f0-2468-4329-9435-ffed45e334cc&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;At Uber, Presto is a critical engine for data analytics across various departments. The Operations team relies on it for dashboarding, while Uber Eats and marketing teams use its query results for pricing decisions. Presto is also essential to Uber’s compliance, growth marketing, and ad-hoc data analytics, making it a cornerstone of the company’s data-driven operations.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1099424,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;6efcea4d-040e-40a3-95db-b0e9712dc5f3&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;611&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure1-17309536886116-1024x611.png&#34; alt=&#34;&#34; class=&#34;wp-image-1099424&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure1-17309536886116.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure1-17309536886116.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure1-17309536886116.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1438,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure1-17309536886116.png 1438w&#34; sizes=&#34;(max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 1: Uber Presto operational overview.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a703b98a-6d2b-4ccc-82eb-d5a6df09da59&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ede00cc6-18ce-4412-920c-aee41913e0d2&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Uber operates around 20 Presto clusters across over 10,000 nodes in 2 regions, supporting approximately 12,000 weekly active users. These users run about 500,000 queries daily, reading around 100 PB from HDFS. Presto is used to query multiple data sources, including Apache Hive™, Apache Pinot™, MySQL&lt;em&gt;&lt;sup&gt;®&lt;/sup&gt;&lt;/em&gt;, and Apache Kafka&lt;sup&gt;®&lt;/sup&gt;, through its extensible data source connectors.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;44406267-0f63-4baa-a9d5-b7758c76a709&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;This blog describes how Uber designed Presto express to reduce end-to-end SLA for fast-running Presto queries.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0ac6b117-f506-43b8-83d8-0fa524bed549&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;88ceb908-18a4-4dd9-a2df-1a7d84af4705&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-problem-statement&#34;&gt;Problem Statement&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0c3532d4-4c5a-4002-b66c-a45bab4126e3&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Earlier last year, we observed Presto experiencing query slowness for multiple months. To work around this, we had to add more capacity. The problem of query slowness was caused by throttling. To keep ‌Presto clusters from getting overloaded, we have concurrency limits that limit the number of queries that can run concurrently on the cluster. This creates a fixed pipe, and all the queries have to contend for a spot in that pipe.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1099426,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;e8252f50-2846-496b-b962-e3d5f03d62df&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;546&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure2-17309537151369-1024x546.png&#34; alt=&#34;&#34; class=&#34;wp-image-1099426&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure2-17309537151369.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure2-17309537151369.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure2-17309537151369.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1320,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure2-17309537151369.png 1320w&#34; sizes=&#34;(max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 2: High-level Presto architecture.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;be59cfe0-8ccb-4b31-9c02-b3b710d3a12c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7cacc5e8-7653-4247-ae97-0bfd9be6c6a4&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;For a query to get accepted for execution, it has to pass the user, consumer, cluster, and cluster group level concurrency checks. Incoming queries are queued up in Exeggutor post-validation and released to Prism for routing if they satisfy the checks. For a particular user or consumer, queries are processed in a first-come, first-served manner.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9b411a1f-1327-490e-b433-a40a3e3d9752&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Figure 3 shows how many times user and consumer-level limits throttled scheduled queries over a 7-day period.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1099428,&amp;quot;sizeSlug&amp;quot;:&amp;quot;full&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;170ee10e-7bf1-46d5-868a-755ac029bc69&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-full&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;976&#34; height=&#34;470&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure3-3-17309538282644.png&#34; alt=&#34;&#34; class=&#34;wp-image-1099428&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=976,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure3-3-17309538282644.png 976w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure3-3-17309538282644.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure3-3-17309538282644.png 768w&#34; sizes=&#34;(max-width: 976px) 100vw, 976px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 3: Queries throttled due to consumer and user limitations.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a2287193-136a-4872-b6a3-aef60a38e140&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;1b8962db-8797-459f-827f-7fa745d08832&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The cluster concurrency level limit also throttles queries. For example, throttling for batch low-tier queries based on cluster limits.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1099430,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;5ed08639-7998-4271-9efd-f1d0998f8228&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;429&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure4-17309539067428-1024x429.png&#34; alt=&#34;&#34; class=&#34;wp-image-1099430&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure4-17309539067428.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure4-17309539067428.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure4-17309539067428.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure4-17309539067428.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=1600,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure4-17309539067428.png 1600w&#34; sizes=&#34;(max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 4: Queries throttled due to cluster availability.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;1c30a50d-d93b-4da3-a39a-933d6104b49a&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0d04af4b-d31c-4a7e-9dfb-9737ba45af6a&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Figures 3 and 4 show the significant throttling that Presto queries have to go through.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;76edbd98-ad88-4aba-81c5-8ca9de8b569b&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;However, looking at the Presto query latencies, we saw that P50 execution times of the queries were well under a minute. Here, the execution time only refers to the running time of the query in Presto and doesn’t include any queuing time for the query in Exeggutor.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1099432,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;c693237f-80b2-4767-86fc-22113301276c&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;279&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure5-17309539465304-1024x279.png&#34; alt=&#34;&#34; class=&#34;wp-image-1099432&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure5-17309539465304.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure5-17309539465304.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure5-17309539465304.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1056,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure5-17309539465304.png 1056w&#34; sizes=&#34;(max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 5: Interactive query latency.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d3990c25-aaff-4918-a120-a4f94f126fc7&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1099433,&amp;quot;sizeSlug&amp;quot;:&amp;quot;full&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;31c90169-3460-415a-a93d-9bf7166b37b2&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-full&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1025&#34; height=&#34;280&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure6-17309539701128.png&#34; alt=&#34;&#34; class=&#34;wp-image-1099433&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1025,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure6-17309539701128.png 1025w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure6-17309539701128.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure6-17309539701128.png 768w&#34; sizes=&#34;(max-width: 1025px) 100vw, 1025px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 6: Batch query latency.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;8cc9dae3-ea12-44ab-ad24-bcefeac6f1ff&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;3f029991-97ec-4602-970d-0c3ebd997b6c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;That meant that out of the roughly 500,000 queries that Presto executed every day, more than half of the queries could easily finish in under a minute. To reduce the queue time of these fast-running queries, we designed a new approach.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;8fa2ee6e-cb3f-456d-bb24-f11aa8bde6d3&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d28a19b8-6197-47a3-84d7-4bbf55d04a19&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-identifying-express-queries&#34;&gt;Identifying Express Queries&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6731793b-83ba-450f-af97-d24c25eafa14&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We define an &lt;em&gt;express query&lt;/em&gt; as any Presto query that can finish within 2 minutes. To identify express queries, we developed a method using historical data to predict whether an upcoming query is an express query. To do this, we tested the P90 and P95 query execution times using the exact fingerprint and abstract fingerprint of the query with lookback windows of 2 days, 5 days, and 7 days. An exact fingerprint is a query hash after removing comments and whitespaces. An abstract fingerprint also removes literal values from the query. An abstract fingerprint can identify similar queries coming from the same pipeline or data services even though the query isn’t the same.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9dd17e03-1bc3-4008-869c-04fd37436f29&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We used this candidate definition to predict if a query was express: &lt;em&gt;if the X runtime of the query in the last Y days based on Z fingerprint was less than 2 minutes. &lt;/em&gt;We explored variations where &lt;em&gt;X&lt;/em&gt; was P90 or P95, &lt;em&gt;Y&lt;/em&gt; was 2, 5, or 7, and &lt;em&gt;Z&lt;/em&gt; was exact or abstract.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a37178a0-62f8-4db3-9008-4ebd0c209cde&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;This gave us 12 candidate definitions. To compare the various candidates, we defined Accuracy as &lt;em&gt;True Positive/(True Positive +False Positive)&lt;/em&gt; and Coverage as &lt;em&gt;(True Positive+False Positive)/ALL&lt;/em&gt;.&lt;br&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1099435,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;bc8f4f3d-6374-49b0-9bef-60a13b107856&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;155&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure7-17309540503346-1024x155.png&#34; alt=&#34;&#34; class=&#34;wp-image-1099435&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure7-17309540503346.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure7-17309540503346.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure7-17309540503346.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure7-17309540503346.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=2048,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure7-17309540503346.png 2048w, https://blog.uber-cdn.com/cdn-cgi/image/width=2064,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure7-17309540503346.png 2064w&#34; sizes=&#34;(max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 7: Confusion matrix of predictions for express queries.&amp;nbsp;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9583e821-8ed3-4cfe-9d7e-eabf618930f6&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;13bb5569-844b-4167-b5d4-ed725a20a500&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;To test the accuracy of the prediction, we wrote a SQL query to analyze the historical data and come up with the prediction. In the analysis, we found that the P90 value of the abstract fingerprint with a 5-day lookback window provided the best accuracy and coverage, with values of 95.7% and 48.99%, respectively. So, we decided to use this query as our primary indicator for express queries moving forward. By implementing this optimized approach, we could better predict and identify express queries. We’ll continue to monitor and refine our model to ensure its ongoing accuracy and effectiveness.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1099436,&amp;quot;width&amp;quot;:&amp;quot;606px&amp;quot;,&amp;quot;height&amp;quot;:&amp;quot;auto&amp;quot;,&amp;quot;sizeSlug&amp;quot;:&amp;quot;full&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;991b38aa-3e33-41e6-bf6c-c93b2cdbaaee&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-full is-resized&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;2024&#34; height=&#34;758&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure8-17309540801369.png&#34; alt=&#34;&#34; class=&#34;wp-image-1099436&#34; style=&#34;width:606px;height:auto&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure8-17309540801369.png 2024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure8-17309540801369.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure8-17309540801369.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure8-17309540801369.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure8-17309540801369.png 1536w&#34; sizes=&#34;(max-width: 2024px) 100vw, 2024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 8: Experiment result.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;da10709d-d9bc-40f5-9720-f3f33244bf93&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7bfda52e-77d3-44ef-ae44-155d50eb852c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We added a sink to ingest data from our query events topic to a Pinot table that can be queried in real time. Now when a query comes to Presto, we can determine whether that query is express using the Pinot query shown in Figure 9.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1099438,&amp;quot;width&amp;quot;:&amp;quot;489px&amp;quot;,&amp;quot;height&amp;quot;:&amp;quot;auto&amp;quot;,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;722bd5e0-5123-49e7-9c22-0bd1e0e6db3e&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large is-resized&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;403&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure9-17309541541205-1024x403.png&#34; alt=&#34;&#34; class=&#34;wp-image-1099438&#34; style=&#34;width:489px;height:auto&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure9-17309541541205.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure9-17309541541205.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure9-17309541541205.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1424,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure9-17309541541205.png 1424w&#34; sizes=&#34;(max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 9: Pinot query determines if a query is express.&amp;nbsp;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;027e4244-1bcb-4347-9a6b-90f526cd71f0&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;b49d8a0d-5a68-43c2-8d98-7c3bf8263547&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We use the &lt;em&gt;_count&lt;/em&gt; to make sure that we make the prediction based on at least 5 previous runs of the query. If the percentile that we get above is less than 2 minutes and the count is greater than 5, then the query is deemed an express query. Since the Pinot table has the exact fingerprint and data for the last 90 days, we can easily change the method to use the exact fingerprint, a different percentile and/or larger or smaller lookback window.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ff22cbdf-fbd3-4407-a770-2221a791d665&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;One drawback of using historical data for prediction is that we won’t be able to predict accurately for new queries coming to the system. However, this isn’t a problem for batch workloads, where most of the queries are scheduled and repeat themselves over a set frequency.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;16705ebc-8773-4f1e-9057-9ec541d55e3f&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The query prediction latency is very minimal, with most of the predictions being made in under 100 milliseconds.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1099440,&amp;quot;sizeSlug&amp;quot;:&amp;quot;full&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;08270d34-f370-49e2-a1ec-34a26779aef7&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-full&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;748&#34; height=&#34;299&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure10-17309544008135.png&#34; alt=&#34;&#34; class=&#34;wp-image-1099440&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=748,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure10-17309544008135.png 748w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure10-17309544008135.png 300w&#34; sizes=&#34;(max-width: 748px) 100vw, 748px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 10: Express query latency.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;98739c05-5aba-4185-8b37-3f43348e25ed&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ae811d7a-e2ff-473f-88e4-33513d099ce6&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6868cbd6-1500-4e6d-9fe6-518599583eb7&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-initial-express-design&#34;&gt;Initial Express Design&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ea173013-a44c-4463-a838-e8405887ce68&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In our initial design of the express feature, we designated one of our existing batch clusters to be an express cluster and added the aforementioned logic in Prism to determine if a query was express and should be sent to the express clusters.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1102105,&amp;quot;width&amp;quot;:&amp;quot;559px&amp;quot;,&amp;quot;height&amp;quot;:&amp;quot;auto&amp;quot;,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;1ed7e1fc-8d4e-448d-a701-24d765ec8a8d&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large is-resized&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;664&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure11.ng-17345532339493-1024x664.png&#34; alt=&#34;&#34; class=&#34;wp-image-1102105&#34; style=&#34;width:559px;height:auto&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure11.ng-17345532339493.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure11.ng-17345532339493.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure11.ng-17345532339493.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1532,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure11.ng-17345532339493.png 1532w&#34; sizes=&#34;(max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 11: High-level architecture of initial Presto express design.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c4e8797a-6709-4664-85ad-8f4d1408cc8d&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;00d92174-eae7-448d-ad31-046104e42c54&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;However, this approach faced several issues:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;ordered&amp;quot;:true,&amp;quot;hash&amp;quot;:&amp;quot;c2404b55-5c61-4955-a504-07a2acaffa7e&amp;quot;,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Underutilization&lt;/strong&gt;: The express cluster operated significantly below its full capacity, with CPU usage hovering at approximately 20%, while other low-tier clusters operated at nearly 90%. This disparity was evident in metrics, showcasing a noticeable decrease in CPU usage for batch3_b20b, which was designated as the express cluster. This situation highlighted a substantial underutilization of the express cluster’s resources.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;5f3b978c-28c8-4fef-8a25-e9640346208e&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1099444,&amp;quot;sizeSlug&amp;quot;:&amp;quot;full&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;4caf5909-a40b-436f-ba42-ccf867e9cec7&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-full&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;908&#34; height=&#34;334&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure12-17309544759023.png&#34; alt=&#34;&#34; class=&#34;wp-image-1099444&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=908,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure12-17309544759023.png 908w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure12-17309544759023.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure12-17309544759023.png 768w&#34; sizes=&#34;(max-width: 908px) 100vw, 908px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 12: Daily CPU usage of each cluster.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;5f3b978c-28c8-4fef-8a25-e9640346208e&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;ordered&amp;quot;:true,&amp;quot;start&amp;quot;:2,&amp;quot;hash&amp;quot;:&amp;quot;1ad2bea0-e454-4a93-badc-253a475a39d0&amp;quot;,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; start=&#34;2&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Our approach, limited to including the express tag only in the execution process, had inadvertently overlooked query throttling in QR queues. This oversight resulted in our system remaining within consumer and user limits. Paradoxically, the express cluster, despite being designed for quick queries, often remained idle due to meeting these limits. Consequently, other clusters were burdened with an increased query load, exacerbating the situation.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1099445,&amp;quot;sizeSlug&amp;quot;:&amp;quot;full&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;8b6e5608-eeb2-4185-97e6-de6fac2dc001&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-full&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;926&#34; height=&#34;295&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure13-17309544934077.png&#34; alt=&#34;&#34; class=&#34;wp-image-1099445&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=926,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure13-17309544934077.png 926w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure13-17309544934077.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure13-17309544934077.png 768w&#34; sizes=&#34;(max-width: 926px) 100vw, 926px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 13: Daily query count of each cluster.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d6eaca6e-10fc-46e4-a657-8f8ad62ca41e&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;094fa422-0ad4-43e6-aa28-a61c264727c6&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Our initial attempt revealed crucial insights. Even though more than 50% of the low-tier batch queries were express queries, they consumed much less CPU. The resources allocated to express and non-express queries should match the CPU requirements of those queries. Beyond that, the slowdown experienced by the express queries couldn’t be solved just by the runtime isolation of the express queries from the non-express queries. ‌Express queries needed their own queues in the upstream systems (Exeggutor), so that an express query for a user or consumer didn’t get blocked by a non-express query for the same user or consumer sent earlier.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2dfff7fc-76b6-4fc9-84a4-bb91995ea220&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0931343f-c3a3-4d4e-859e-74759d81157f&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-final-design&#34;&gt;Final Design&lt;/h2&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1102107,&amp;quot;width&amp;quot;:&amp;quot;534px&amp;quot;,&amp;quot;height&amp;quot;:&amp;quot;auto&amp;quot;,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;678dbdd1-e0b8-4617-aa3d-b8c7558b61be&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large is-resized&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;559&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure14-17345532572712-1024x559.png&#34; alt=&#34;&#34; class=&#34;wp-image-1102107&#34; style=&#34;width:534px;height:auto&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure14-17345532572712.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure14-17345532572712.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure14-17345532572712.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure14-17345532572712.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=1672,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure14-17345532572712.png 1672w&#34; sizes=&#34;(max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 14: High-level architecture of Presto express final design.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6112f0e8-9203-4039-a266-cc02fd3919a8&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;480aa367-a35c-4168-8dc1-06523ef0f5ba&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In the final system that’s currently in production, we created a separate queue for express queries in Exeggutor that’s matched by a set of small express clusters. The express determination is done at the time of query validation itself, and the query is added to the express queue if applicable. The express queue has much higher user or consumer-level concurrencies, letting them run much more express queries than non-express queries.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a4c20d41-aef7-48aa-b7b9-1f0a7771c90f&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ad1c1bf3-c163-4fa9-9c9a-6adf9a552926&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-impact&#34;&gt;Impact&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;30a77cd0-49ed-42b8-ae12-abf86f258a42&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Currently the express feature is only enabled for batch low-tier queries. The low-tier express clusters use around 10% of the total batch low-tier Presto resources, yet they run about 75% of the batch low-tier queries.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1099448,&amp;quot;sizeSlug&amp;quot;:&amp;quot;full&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;9c5c17e2-c33f-4d4d-be07-656b6f57ca9b&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-full&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;738&#34; height=&#34;254&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure15-17309545442114.png&#34; alt=&#34;&#34; class=&#34;wp-image-1099448&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=738,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure15-17309545442114.png 738w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure15-17309545442114.png 300w&#34; sizes=&#34;(max-width: 738px) 100vw, 738px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 15: Comparing query count of express and non-express queries in the on-prem batch low tier.&amp;nbsp;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;751ca32e-6e42-417b-8213-66ec4f41d30a&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c312ebfe-1da5-441e-ad78-677273fabf40&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;They also provide a much better SLA to ‌users. The p90 queuing time for express queries is about 10 seconds, whereas it can be in hours for non-express queries. 01:37:06 in Figure 16 refers to 1 hour, 37 minutes, and 6 seconds.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1099450,&amp;quot;sizeSlug&amp;quot;:&amp;quot;full&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;e359b75c-cc8e-4c11-ac25-477a675db113&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-full&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;746&#34; height=&#34;258&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure16-17309545843619.png&#34; alt=&#34;&#34; class=&#34;wp-image-1099450&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=746,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure16-17309545843619.png 746w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure16-17309545843619.png 300w&#34; sizes=&#34;(max-width: 746px) 100vw, 746px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 16: Comparing P90 queuing time for the express and non-express queries.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6f4b46cd-c162-4744-97d7-3f17cb9c41c7&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7e4f3a4c-eb4c-4057-98bb-2f7756f07c96&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The p90 running time of the express queries is also obviously less, and the express queries provide a much better end-to-end SLA for users.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1099419,&amp;quot;sizeSlug&amp;quot;:&amp;quot;full&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;f75ca99a-2d3b-4a3e-bb11-539edde28e97&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-full&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;737&#34; height=&#34;249&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure17-17309527374882.png&#34; alt=&#34;&#34; class=&#34;wp-image-1099419&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=737,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure17-17309527374882.png 737w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure17-17309527374882.png 300w&#34; sizes=&#34;(max-width: 737px) 100vw, 737px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 17: Comparing the P90 runtime for ‌express and non-express queries.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ace869bc-c889-43d0-aaef-bddbeef0f7c6&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0626068b-e055-45c1-9294-c1bcda29a592&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;907e8a8b-e7e4-4bc8-8272-33c015204a31&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-next-steps-nbsp&#34;&gt;Next Steps&amp;nbsp;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;33c06a69-2ff8-480e-a2b9-defc925f6af5&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;For next steps, we want to look at separating the express cluster group. In our current implementation, express clusters are a sub-group of the major cluster groups like batch low tier, batch high tier, and interactive. The idea was that each cluster group would have its own set of express clusters. However, based on our experience in production,‌ express can be a separate cluster group instead of being a subgroup. So, an express query should be sent to this cluster group regardless of whether the query is a batch high tier, low tier or interactive query. The reasons for this are:&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;521b9e82-a6a7-4c3b-8a14-4887ecde79be&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;The current express clusters seem to have low utilization and can‌ run much more queries.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;Simplified routing logic. We can just determine that a query is express at query submission time and route it to this cluster group.&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;The SLA given by the express system is low enough that we don’t need to differentiate between batch and interactive queries.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f339da68-8805-4e0e-8386-0798070f209f&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;So far, we have only differentiated between express and non-express queries, but we can have more classifications like small/medium/large and each classification going to a separate cluster group.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;485bc75d-25b2-42b8-9ec0-38fbfebd549b&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Another area we’re exploring is query cost prediction. Historical data has been our primary tool for predicting whether a query qualifies as an express query. Having historical data can be a challenge for interactive workloads. To address this, we can harness machine learning models to determine whether incoming queries should be classified as express or not. By integrating advanced algorithms, we can accurately assess the nature of new queries, ensuring more precise and timely classifications, even for previously unseen queries in our system.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6c4a2ec0-107e-4acc-90ed-4fa63ca40f51&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:1,&amp;quot;hash&amp;quot;:&amp;quot;b9ccff27-56a3-49fd-93c8-34ff75280f3e&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-conclusion&#34;&gt;Conclusion&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;fdfd207e-f816-48ba-8746-e0a2bbd337ec&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;This blog explored the design and implementation of Uber’s Presto express, aimed at reducing the end-to-end SLA for short-running queries. We discussed how express queries are defined, how they integrate into the overall ecosystem, and the challenges we encountered. Additionally, we highlighted the performance gains achieved through our deployment, with Presto express delivering an order-of-magnitude improvement in end-to-end SLA for over 75% of scheduled queries.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;e5f6e121-eae9-4740-a6d8-67a6d5b36f5f&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Apache&lt;sup&gt;®&lt;/sup&gt;, Apache Kafka&lt;sup&gt;®&lt;/sup&gt;, Apache Hive&lt;sup&gt;™&lt;/sup&gt;, and Apache Pinot&lt;sup&gt;™ &lt;/sup&gt;are either registered trademarks or trademarks of the Apache Software Foundation in the United States and/or other countries. No endorsement by The Apache Software Foundation is implied by the use of these marks.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;c01f2c0c-f857-45b1-b6c0-3c744ea63341&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Oracle, Java, MySQL, and NetSuite are registered trademarks of Oracle and/or its affiliates.&amp;nbsp;&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;9149a51f-6ad7-4a68-8c7b-f4fb23d4b282&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Presto® is a registered trademark of LF Projects, LLC.&lt;/em&gt;&lt;br&gt;&lt;br&gt;“&lt;a href=&#34;https://www.flickr.com/photos/95482862@N00/3889341309&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;1st Avenue traffic&lt;/a&gt;” by &lt;a href=&#34;https://www.flickr.com/photos/95482862@N00&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Oran Viriyincy&lt;/a&gt; is licensed under &lt;a href=&#34;https://creativecommons.org/licenses/by/2.0/?ref=openverse&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;CC BY 2.0&lt;/a&gt;.&lt;/p&gt;】&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:1,&#34;hash&#34;:&#34;7404d726-deb9-4f91-bde8-c282b1b4c7e2&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-introduction&#34;&gt;简介&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;9663f6c7-9977-4746-afb2-88dc6a604b87&#34;,&#34;dropCap&#34;:false}&#34;&gt;Presto&lt;sup &gt;®&lt;/sup&gt; 是一个开源分布式 SQL 查询引擎，旨在对任意大小（从千兆字节）的数据源运行交互式分析查询到拍字节。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;362e44f0-2468-4329-9435-ffed45e334cc&#34;,&#34;dropCap&#34;:false}&#34;&gt;在 Uber， Presto 是跨各个部门进行数据分析的关键引擎。运营团队依靠它来进行仪表板显示，而 Uber Eats 优食和营销团队则使用它的查询结果来做出定价决策。 Presto 对于 Uber 的合规性、增长营销和临时数据分析也至关重要，使其成为公司数据驱动运营的基石。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;id&#34;:1099424,&#34;sizeSlug&#34;:&#34;large&#34;,&#34;linkDestination&#34;:&#34;none&#34;,&#34;align&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;6efcea4d-040e-40a3-95db-b0e9712dc5f3&#34;,&#34;alt&#34;:&#34;&#34;}&#34;类=“aligncenter尺寸-大”&gt;&lt;img加载=“惰性”解码=“异步”宽度=“1024”高度=“611” src =“https://blog.uber-cdn.com/cdn-cgi/image/width=2160，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure1-17309536886116 -1024x611.png&#34; alt=&#34;&#34; 类=&#34;wp-image-1099424&#34; srcset =“https://blog.uber-cdn.com/cdn-cgi/image/width=1024，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure1-17309536886116 .png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure1-17309536886116.png 300w , https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure1-17309536886116.png 768w , https://blog.uber-cdn.com/cdn-cgi/image/width=1438，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure1-17309536886116.png 1438w “尺寸=”（最大宽度：1024px）100vw，1024px“ referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 1：Uber Presto 运营概览。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;a703b98a-6d2b-4ccc-82eb-d5a6df09da59&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;ede00cc6-18ce-4412-920c-aee41913e0d2&#34;,&#34;dropCap&#34;:false}&#34;&gt;Uber 运营围绕20 个 Presto 集群，分布在 2 个区域，超过 10,000 个节点，支持大约 12,000 名每周活跃用户。这些用户每天运行约 500,000 个查询，从 HDFS 读取约 100 PB 数据。普莱斯to 用于通过其可扩展性查询多个数据源，包括 Apache Hive™、Apache Pinot™、MySQL&lt;em&gt;&lt;sup&gt;®&lt;/sup&gt;&lt;/em&gt; 和 Apache Kafka&lt;sup&gt;®&lt;/sup&gt;数据源连接器。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;44406267-0f63-4baa-a9d5-b7758c76a709&#34;,&#34;dropCap&#34;:false}&#34;&gt;此博客介绍了Uber 如何设计 Presto Express 来减少快速运行的 Presto 查询的端到端 SLA。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;0ac6b117-f506-43b8-83d8-0fa524bed549&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;88ceb908-18a4-4dd9-a2df-1a7d84af4705&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-problem-statement&#34;&gt;问题陈述&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;0c3532d4-4c5a-4002-b66c-a45bab4126e3&#34;,&#34;dropCap&#34;:false}&#34;&gt;去年早些时候，我们观察到 Presto 经历了几个月的查询缓慢。为了解决这个问题，我们必须增加更多的容量。查询慢的问题是由于限流造成的。为了防止 Presto 集群过载，我们设置了并发限制，限制了集群上可以同时运行的查询数量。这会创建一个固定管道，所有查询都必须争夺该管道中的一个位置。 &lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;核心/图像&#34; data-wp-block=&#34;{&#34;id&#34;:1099426,&#34;sizeSlug&#34;:&#34;大&#34;,&#34;linkDestination&#34;:&#34;无&#34;,&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;e8252f50-2846-496b-b962 -e3d5f03d62df&#34;,&#34;alt&#34;:&#34;&#34;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img加载=“惰性”解码=“异步”宽度=“1024”高度=“546”src=“https://blog.uber-cdn.com/cdn-cgi/image/width=2160，质量= 80，onerror =重定向，格式=自动/wp-content/uploads/2024/11/figure2-17309537151369-1024x546.png&#34; alt=&#34;&#34;类=“wp-image-1099426”srcset=“https://blog.uber-cdn.com/cdn-cgi/image/width=1024，quality=80，onerror=redirect，format=auto/wp-content/上传/2024/11/figure2-17309537151369.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure2-17309537151369.png 300w , https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure2-17309537151369.png 768w , https://blog.uber-cdn.com/cdn-cgi/image/width=1320，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure2-17309537151369.png 1320w “尺寸=”（最大宽度：1024px）100vw，1024px“ referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 2：高级 Presto 架构。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;be59cfe0-8ccb-4b31-9c02-b3b710d3a12c&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;7cacc5e8-7653-4247-ae97-0bfd9be6c6a4&#34;,&#34;dropCap&#34;:false}&#34;&gt;用于查询要被接受执行，它必须通过用户、消费者、集群和集群组级别的并发检查。传入的查询在验证后在 Exeggutor 中排队，如果满足检查，则发布到 Prism 进行路由。对于特定用户或消费者，查询以先到先服务的方式处理。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;9b411a1f-1327-490e-b433-a40a3e3d9752&#34;,&#34;dropCap&#34;:false}&#34;&gt;图 3 显示用户和消费者级别限制在 7 天内限制计划查询的次数。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;id&#34;:1099428,&#34;sizeSlug&#34;:&#34;full&#34;,&#34;linkDestination&#34;:&#34;none&#34;,&#34;align&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;170ee10e-7bf1-46d5-868a-755ac029bc69&#34;,&#34;alt&#34;:&#34;&#34;}&#34; class =“aligncenter size-full”&gt;&lt;img加载=“lazy”解码=“异步”宽度=“976”高度=“470”src=“https://blog.uber-cdn.com/cdn-cgi/图像/宽度=2160，质量=80，onerror=重定向，格式=自动/wp-content/uploads/2024/11/figure3-3-17309538282644.png&#34; alt=&#34;&#34; class=&#34;wp-image-1099428&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=976,quality=80,onerror=redirect,format=auto/ wp-content/uploads/2024/11/figure3-3-17309538282644.png 976w， https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure3-3-17309538282644。 300w.png, https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure3-3-17309538282644。 png 768w”尺寸=“（最大宽度：976px）100vw，976px” referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 3：由于消费者和用户限制，查询受到限制。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;a2287193-136a-4872-b6a3-aef60a38e140&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;1b8962db-8797-459f-827f-7fa745d08832&#34;,&#34;dropCap&#34;:false}&#34;&gt;集群并发数级别限制也会限制查询。例如，根据集群限制对批量低层查询进行限制。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;id&#34;:1099430,&#34;sizeSlug&#34;:&#34;large&#34;,&#34;linkDestination&#34;:&#34;none&#34;,&#34;align&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;5ed08639-7998-4271-9efd-f1d0998f8228&#34;,&#34;alt&#34;:&#34;&#34;}&#34;类=“aligncenter尺寸-大”&gt;&lt;img加载=“惰性”解码=“异步”宽度=“1024”高度=“429”src=“https://blog.uber”-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure4-17309539067428-1024x429.png&#34; alt=&#34;&#34; 类=&#34;wp-image-1099430&#34; srcset =“https://blog.uber-cdn.com/cdn-cgi/image/width=1024，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure4-17309539067428 .png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure4-17309539067428.png 300w , https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure4-17309539067428.png 768w , https://blog.uber-cdn.com/cdn-cgi/image/width=1536，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure4-17309539067428.png 1536w , https://blog.uber-cdn.com/cdn-cgi/image/width=1600，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure4-17309539067428.png 1600w “尺寸=”（最大宽度：1024px）100vw，1024px“ referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 4：由于集群可用性而限制查询。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;1c30a50d-d93b-4da3-a39a-933d6104b49a&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;0d04af4b-d31c-4a7e-9dfb-9737ba45af6a&#34;,&#34;dropCap&#34;:false}&#34;&gt;图 3 和图 4 显示了 Presto 查询必须经历的重大限制。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;76edbd98-ad88-4aba-81c5-8ca9de8b569b&#34;,&#34;dropCap&#34;:false}&#34;&gt;但是，在 Presto 查询延迟方面，我们发现查询的 P50 执行时间远低于一分钟。这里的执行时间仅指查询在Presto中的运行时间，不包括查询在Exeggutor中的任何排队时间。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;核心/图像&#34; data-wp-block=&#34;{&#34;id&#34;:1099432,&#34;sizeSlug&#34;:&#34;大&#34;,&#34;linkDestination&#34;:&#34;无&#34;,&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;c693237f-80b2-4767-86fc -22113301276c&#34;,&#34;alt&#34;:&#34;&#34;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img加载=“惰性”解码=“异步”宽度=“1024”高度=“279”src=“https://blog.uber-cdn.com/cdn-cgi/image/width=2160，质量= 80，onerror =重定向，格式=自动/wp-content/uploads/2024/11/figure5-17309539465304-1024x279.png&#34; alt=&#34;&#34;类=“wp-image-1099432”srcset=“https://blog.uber-cdn.com/cdn-cgi/image/width=1024，quality=80，onerror=redirect，format=auto/wp-content/上传/2024/11/figure5-17309539465304.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure5-17309539465304.png 300w , https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure5-17309539465304.png 768w，https://blog.uber-cdn.com/cdn-cgi/image/width=1056，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11 /figure5-17309539465304.png 1056w“尺寸=”（最大宽度： 1024px) 100vw, 1024px&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 5：交互式查询延迟。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;d3990c25-aaff-4918-a120-a4f94f126fc7&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;核心/图像&#34; data-wp-block=&#34;{&#34;id&#34;:1099433,&#34;sizeSlug&#34;:&#34;full&#34;,&#34;linkDestination&#34;:&#34;无&#34;,&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;31c90169-3460-415a-a93d -9bf7166b37b2&#34;,&#34;alt&#34;:&#34;&#34;}&#34; class=&#34;aligncenter size-full&#34;&gt;&lt;img加载=“惰性”解码=“异步”宽度=“1025”高度=“280”src=“https://blog.uber-cdn.com/cdn-cgi/image/width=2160，质量= 80，onerror =重定向，格式=自动/wp-content/uploads/2024/11/figure6-17309539701128.png&#34; alt=&#34;&#34;类=“wp-image-1099433”srcset=“https://blog.uber-cdn.com/cdn-cgi/image/width=1025，quality=80，onerror=redirect，format=auto/wp-content/上传/2024/11/figure6-17309539701128.png 1025w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure6-17309539701128.png 300w , https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure6-17309539701128.png 768w “尺寸=”（最大宽度：1025px）100vw，1025px“ referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 6：批量查询延迟。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;8cc9dae3-ea12-44ab-ad24-bcefeac6f1ff&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;3f029991-97ec-4602-970d-0c3ebd997b6c&#34;,&#34;dropCap&#34;:false}&#34;&gt;这意味着Presto 每天执行的大约 500,000 个查询中，超过一半的查询可以在一分钟内轻松完成。为了减少这些快速运行查询的排队时间，我们设计了一种新方法。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;8fa2ee6e-cb3f-456d-bb24-f11aa8bde6d3&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;d28a19b8-6197-47a3-84d7-4bbf55d04a19&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-identifying-express-queries&#34;&gt;识别快速查询&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;6731793b-83ba-450f-af97-d24c25eafa14&#34;,&#34;dropCap&#34;:false}&#34;&gt;我们定义一个&lt;em&gt;快速查询&lt;/em&gt;为可在 2 分钟内完成的任何 Presto 查询。到识别快速查询，我们开发了一种使用历史数据来预测即将到来的查询是否是快速查询的方法。为此，我们使用查询的精确指纹和抽象指纹（回溯窗口为 2 天、5 天和 7 天）测试了 P90 和 P95 查询执行时间。精确的指纹是删除注释和空格后的查询哈希。抽象指纹还会从查询中删除文字值。抽象指纹可以识别来自相同管道或数据服务的相似查询，即使查询不相同。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;9dd17e03-1bc3-4008-869c-04fd37436f29&#34;,&#34;dropCap&#34;:false}&#34;&gt;我们使用了这个用于预测查询是否快速的候选定义：&lt;em&gt;如果基于 Z 指纹的过去 Y 天内查询的 X 运行时间少于 2 分钟。 &lt;/em&gt;我们探索了 &lt;em&gt;X&lt;/em&gt; 为 P90 或 P95，&lt;em&gt;Y&lt;/em&gt; 为 2、5 或 7，&lt;em&gt;Z&lt;/em&gt; 为精确或抽象的变体。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;a37178a0-62f8-4db3-9008-4ebd0c209cde&#34;,&#34;dropCap&#34;:false}&#34;&gt;这给了我们12 个候选定义。为了比较各种候选者，我们将准确率定义为&lt;em&gt;真阳性/（真阳性+假阳性）&lt;/em&gt;，将覆盖率定义为&lt;em&gt;（真阳性+假阳性）/全部&lt;/em&gt;。&lt;br&gt; &lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;id&#34;:1099435,&#34;sizeSlug&#34;:&#34;large&#34;,&#34;linkDestination&#34;:&#34;none&#34;,&#34;align&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;bc8f4f3d-6374-49b0-9bef-60a13b107856&#34;,&#34;alt&#34;:&#34;&#34;}&#34;类=“aligncenter尺寸-大”&gt;&lt;img加载=“惰性”解码=“异步”宽度=“1024”高度=“155” src =“https://blog.uber-cdn.com/cdn-cgi/image/width=2160，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure7-17309540503346 -1024x155.png&#34; alt=&#34;&#34; 类=&#34;wp-image-1099435&#34; srcset =“https://blog.uber-cdn.com/cdn-cgi/image/width=1024，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure7-17309540503346 .png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure7-17309540503346.png 300w , https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure7-17309540503346.png 768w , https://blog.uber-cdn.com/cdn-cgi/image/width=1536，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure7-17309540503346.png 1536w , https://blog.uber-cdn.com/cdn-cgi/image/width=2048，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure7-17309540503346.png 2048w , https://blog.uber-cdn.com/cdn-cgi/image/width=2064，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure7-17309540503346.png 2064w “尺寸=”（最大宽度：1024px）100vw，1024px“referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 7：快速查询预测的混淆矩阵。 &lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;9583e821-8ed3-4cfe-9d7e-eabf618930f6&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;13bb5569-844b-4167-b5d4-ed725a20a500&#34;,&#34;dropCap&#34;:false}&#34;&gt;要测试为了保证预测的准确性，我们编写了一个 SQL 查询来分析历史数据并得出预测。在分析中，我们发现具有 5 天回溯窗口的抽象指纹的 P90 值提供了最佳的准确性和覆盖率，分别为 95.7% 和 48.99%。因此，我们决定使用此查询作为未来快速查询的主要指标。通过实施这种优化方法，我们可以更好地预测和识别快速查询。我们将继续监控和完善我们的模型，以确保其持续的准确性和有效性。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;核心/图像&#34; data-wp-block=&#34;{&#34;id&#34;:1099436,&#34;宽度&#34;:&#34;606px&#34;,&#34;高度&#34;:&#34;自动&#34;,&#34;sizeSlug&#34;:&#34;完整&#34;,&#34;linkDest信息&#34;:&#34;无&#34;,&#34;对齐&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;991b38aa-3e33-41e6-bf6c-c93b2cdbaaee&#34;,&#34;alt&#34;:&#34;&#34;}&#34; class =“aligncenter size-full is-resized”&gt;&lt;img加载=“lazy”解码=“异步”宽度=“2024”高度=“758” src =“https://blog.uber-cdn.com/cdn-cgi/image/width=2160，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure8-17309540801369 .png&#34; alt=&#34;&#34; class=&#34;wp-image-1099436&#34; style=&#34;width:606px;height:auto&#34; srcset =“https://blog.uber-cdn.com/cdn-cgi/image/width=2024，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure8-17309540801369 .png 2024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure8-17309540801369.png 300w , https://blog.uber-cdn.com/cdn-cgi/image/width=1024，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure8-17309540801369.png 1024w , https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure8-17309540801369.png 768w , https://blog.uber-cdn.com/cdn-cgi/image/width=1536，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure8-17309540801369.png 1536w “尺寸=”（最大宽度：2024px）100vw，2024px“ referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 8：实验结果。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;da10709d-d9bc-40f5-9720-f3f33244bf93&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;7bfda52e-77d3-44ef-ae44-155d50eb852c&#34;,&#34;dropCap&#34;:false}&#34;&gt;我们添加了一个接收器，用于将查询事件主题中的数据提取到可以实时查询的 Pinot 表中。现在，当查询到达 Presto 时，我们可以使用图 9 中所示的 Pinot 查询来确定该查询是否是表达查询。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;核心/图像&#34; data-wp-block=&#34;{&#34;id&#34;:1099438,&#34;宽度&#34;:&#34;489px&#34;,&#34;高度&#34;:&#34;自动&#34;,&#34;sizeSlug&#34;:&#34;大&#34;,&#34;linkDest信息&#34;:&#34;无&#34;,&#34;对齐&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;722bd5e0-5123-49e7-9c22-0bd1e0e6db3e&#34;,&#34;alt&#34;:&#34;&#34;}&#34;类=“aligncenter size-large is-resized”&gt;&lt;img加载=“惰性”解码=“异步”宽度=“1024”高度=“403” src =“https://blog.uber-cdn.com/cdn-cgi/image/width=2160，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure9-17309541541205 -1024x403.png&#34; alt=&#34;&#34; 类=&#34;wp-image-1099438&#34;样式 =“宽度：489px;高度：自动” srcset =“https://blog.uber-cdn.com/cdn-cgi/image/width=1024，质量= 80，onerror =重定向，format=auto/wp-内容/上传/2024/11/figure9-17309541541205.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure9-17309541541205.png 300w , https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure9-17309541541205.png 768w , https://blog.uber-cdn.com/cdn-cgi/image/width=1424，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure9-17309541541205.png 1424w “尺寸=”（最大宽度：1024px）100vw，1024px“ referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 9：Pinot 查询确定查询是否为快速查询。 &lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;027e4244-1bcb-4347-9a6b-90f526cd71f0&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;b49d8a0d-5a68-43c2-8d98-7c3bf8263547&#34;,&#34;dropCap&#34;:false}&#34;&gt;我们使用&lt;em&gt;_count&lt;/em&gt; 以确保我们根据至少 5 次之前运行的查询进行预测。如果我们上面得到的百分位数小于 2 分钟且计数大于 5，则该查询被视为快速查询。由于 Pinot 表具有过去 90 天的精确指纹和数据，因此我们可以轻松更改方法以使用精确指纹、不同的百分位数和/或更大或更小的回溯窗口。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;ff22cbdf-fbd3-4407-a770-2221a791d665&#34;,&#34;dropCap&#34;:false}&#34;&gt;一个缺点使用历史数据进行预测的缺点是我们将无法准确预测进入系统的新查询。然而，这对于批处理工作负载来说不是问题，其中大多数查询都被安排并在一组上重复自身频率。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;16705ebc-8773-4f1e-9057-9ec541d55e3f&#34;,&#34;dropCap&#34;:false}&#34;&gt;查询预测延迟非常小，大多数预测都在 100 毫秒内完成。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;核心/图像&#34; data-wp-block=&#34;{&#34;id&#34;:1099440,&#34;sizeSlug&#34;:&#34;full&#34;,&#34;linkDestination&#34;:&#34;无&#34;,&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;08270d34-f370-49e2-a1ec -34a26779aef7&#34;,&#34;alt&#34;:&#34;&#34;}&#34; class=&#34;aligncenter size-full&#34;&gt;&lt;img加载=“惰性”解码=“异步”宽度=“748”高度=“299”src=“https://blog.uber-cdn.com/cdn-cgi/image/width=2160，质量= 80，onerror =重定向，格式=自动/wp-content/uploads/2024/11/figure10-17309544008135.png&#34; alt=&#34;&#34;类=“wp-image-1099440”srcset=“https://blog.uber-cdn.com/cdn-cgi/image/width=748，quality=80，onerror=redirect，format=auto/wp-content/上传/2024/11/figure10-17309544008135.png 748w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure10-17309544008135.png 300w “尺寸=”（最大宽度：748px）100vw，748px“ referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 10：快速查询延迟。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;98739c05-5aba-4185-8b37-3f43348e25ed&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;ae811d7a-e2ff-473f-88e4-33513d099ce6&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;6868cbd6-1500-4e6d-9fe6-518599583eb7&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-initial-express-design&#34;&gt;初始快速设计&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;ea173013-a44c-4463-a838-e8405887ce68&#34;,&#34;dropCap&#34;:false}&#34;&gt;在我们最初的在express功能的设计中，我们将现有的批处理集群之一指定为express集群，并在Prism中添加上述逻辑来确定查询是否是express并应发送到表达集群。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;核心/图像&#34; data-wp-block=&#34;{&#34;id&#34;:1102105,&#34;宽度&#34;:&#34;559px&#34;,&#34;高度&#34;:&#34;自动&#34;,&#34;sizeSlug&#34;:&#34;大&#34;,&#34;linkDest信息&#34;:&#34;无&#34;,&#34;对齐&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;1ed7e1fc-8d4e-448d-a701-24d765ec8a8d&#34;,&#34;alt&#34;:&#34;&#34;}&#34;类=“aligncenter size-large is-resized”&gt;&lt;img加载=“lazy”解码=“异步”宽度=“1024”高度=“664”src=“https://blog.uber-cdn.com/cdn -cgi/图像/宽度=2160，质量=80，onerror=重定向，格式=自动/wp-content/uploads/2024/11/figure11.ng-17345532339493-1024x664.png&#34; alt=&#34;&#34; class=&#34;wp-image-1102105&#34; style=&#34;width:559px;height:auto&#34; srcset =“https://blog.uber-cdn.com/cdn-cgi/image/width=1024，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure11.ng -17345532339493.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure11.ng-17345532339493。 300w.png, https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure11.ng-17345532339493。 PNG768w， https://blog.uber-cdn.com/cdn-cgi/image/width=1532，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure11.ng-17345532339493。 png 1532w”尺寸=“（最大宽度：1024px）100vw，1024px” referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 11：初始 Presto Express 设计的高级架构。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;c4e8797a-6709-4664-85ad-8f4d1408cc8d&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;00d92174-eae7-448d-ad31-046104e42c54&#34;,&#34;dropCap&#34;:false}&#34;&gt;但是，这个方法面临几个问题：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ol data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&#34;ordered&#34;:true,&#34;hash&#34;:&#34;c2404b55-5c61-4955-a504-07a2acaffa7e&#34;,&#34;values&#34;:&#34; “}”类=“wp-block-list”&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;利用率不足&lt;/strong&gt;：express 集群的运行速度明显低于其满负荷，CPU 使用率徘徊在 20% 左右，而其他低层集群的运行率接近 90%。这种差异在指标中很明显，显示被指定为express集群的batch3_b20b的CPU使用率显着下降。这种情况凸显了快递集群资源的利用率严重不足。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;5f3b978c-28c8-4fef-8a25-e9640346208e&#34;,&#34;dropCap&#34;:false}&#34;&gt;              &lt;/p &gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;id&#34;:1099444,&#34;sizeSlug&#34;:&#34;full&#34;,&#34;linkDestination&#34;:&#34;none&#34;,&#34;align&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;4caf5909-a40b-436f-ba42-ccf867e9cec7&#34;,&#34;alt&#34;:&#34;&#34;}&#34;类=“aligncenter尺寸-full”&gt;&lt;img加载=“惰性”解码=“异步”宽度=“908”高度=“334”src=“https://blog.uber-cdn.com/cdn-cgi/图像/宽度=2160，质量=80，onerror=重定向，格式=自动/wp-content/uploads/2024/11/figure12-17309544759023.png&#34; alt=&#34;&#34; class=&#34;wp-image-1099444&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=908,quality=80,onerror=redirect,format=auto/ wp-内容/上传/2024/11/figure12-17309544759023.png 908w，https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure12 -17309544759023.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure12-17309544759023.png 768w “尺寸=”（最大宽度：908px）100vw，908px“ referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 12：每个集群每日 CPU 使用率。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;5f3b978c-28c8-4fef-8a25-e9640346208e&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;ol data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&#34;ordered&#34;:true,&#34;start&#34;:2,&#34;hash&#34;:&#34;1ad2bea0-e454-4a93-badc-253a475a39d0&#34; ,&#34;values&#34;:&#34;&#34;}&#34; start=&#34;2&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;我们的方法仅限于仅在执行过程中包含 Express 标记，无意中忽略了 QR 中的查询限制队列。这种疏忽导致我们的系统仍然处于消费者和用户的限制之内。矛盾的是，尽管 Express 集群是为快速查询而设计的，但由于满足这些限制，它经常保持空闲状态。因此，其他集群的查询负载增加，从而加剧了这种情况。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;id&#34;:1099445,&#34;sizeSlug&#34;:&#34;full&#34;,&#34;linkDestination&#34;:&#34;none&#34;,&#34;align&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;8b6e5608-eeb2-4185-97e6-de6fac2dc001&#34;,&#34;alt&#34;:&#34;&#34;}&#34;类=“aligncenter尺寸-full”&gt;&lt;img加载=“惰性”解码=“异步”宽度=“926”高度=“295”src=“https://blog.uber-cdn.com/cdn-cgi/图像/宽度=2160，质量=80，onerror=重定向，格式=自动/wp-content/uploads/2024/11/figure13-17309544934077.png&#34; alt=&#34;&#34; class=&#34;wp-image-1099445&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=926,quality=80,onerror=redirect,format=auto/ wp-content/uploads/2024/11/figure13-17309544934077.png 926w， https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure13-17309544934077.png 300w , https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure13-17309544934077.png 768w “尺寸=”（最大宽度：926px）100vw，926px“ referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图13：每个集群的每日查询次数。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;d6eaca6e-10fc-46e4-a657-8f8ad62ca41e&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;094fa422-0ad4-43e6-aa28-a61c264727c6&#34;,&#34;dropCap&#34;:false}&#34;&gt;我们的初步尝试揭示了c关键的见解。尽管超过 50% 的低层批量查询是快速查询，但它们消耗的 CPU 却少得多。分配给快速和非快速查询的资源应与这些查询的 CPU 要求相匹配。除此之外，仅通过快速查询与非快速查询的运行时隔离无法解决快速查询所经历的减速问题。 ‌快速查询需要在上游系统（Exeggutor）中拥有自己的队列，以便用户或消费者的快速查询不会被先前发送的同一用户或消费者的非快速查询阻止。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;2dfff7fc-76b6-4fc9-84a4-bb91995ea220&#34;,&#34;opacity&#34;:&#34;alpha 通道&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;0931343f-c3a3-4d4e-859e-74759d81157f&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-final-design&#34;&gt;最终设计&lt;/h2&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;核心/图像&#34; data-wp-block=&#34;{&#34;id&#34;:1102107,&#34;宽度&#34;:&#34;534px&#34;,&#34;高度&#34;:&#34;自动&#34;,&#34;sizeSlug&#34;:&#34;大&#34;,&#34;linkDest信息&#34;:&#34;无&#34;,&#34;对齐&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;678dbdd1-e0b8-4617-aa3d-b8c7558b61be&#34;,&#34;alt&#34;:&#34;&#34;}&#34;类=“aligncenter size-large is-resized”&gt;&lt;img加载=“惰性”解码=“异步”宽度=“1024”高度=“559” src =“https://blog.uber-cdn.com/cdn-cgi/image/width=2160，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure14-17345532572712 -1024x559.png&#34; alt=&#34;&#34; 类=&#34;wp-image-1102107&#34;样式 =“宽度：534px;高度：自动” srcset =“https://blog.uber-cdn.com/cdn-cgi/image/width=1024，质量= 80，onerror =重定向，format=auto/wp-内容/上传/2024/11/figure14-17345532572712.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure14-17345532572712.png 300w , https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure14-17345532572712.png 768w , https://blog.uber-cdn.com/cdn-cgi/image/width=1536，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure14-17345532572712.png 1536w , https://blog.uber-cdn.com/cdn-cgi/image/width=1672，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure14-17345532572712.png 1672w “尺寸=”（最大宽度：1024px）100vw，1024px“ referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 14：Presto Express 最终设计的高级架构。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;6112f0e8-9203-4039-a266-cc02fd3919a8&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;核心/段落&#34; data-wp-block=&#34;{&#34;哈希&#34;:&#34;480aa367-a35c-4168-8dc1-06523ef0f5ba&#34;,&#34;dropCap&#34;:false}&#34;&gt;在当前投入生产的最终系统中，我们在 Exeggutor 中创建了一个单独的快速查询队列，与一组小型快速集群相匹配。快速确定是在查询验证本身时完成的，并且如果适用，查询将添加到快速队列中。快速队列具有更高的用户或消费者级别的并发性，使它们能够比非快速查询运行更多的快速查询。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;a4c20d41-aef7-48aa-b7b9-1f0a7771c90f&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;ad1c1bf3-c163-4fa9-9c9a-6adf9a552926&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-impact&#34;&gt;影响&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;30a77cd0-49ed-42b8-ae12-abf86f258a42&#34;,&#34;dropCap&#34;:false}&#34;&gt;目前是快递该功能仅针对批量低层查询启用。低层 Express 集群使用大约 10% 的批处理低层 Presto 资源，但它们运行大约 75% 的批处理低层查询。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;核心/图像&#34; data-wp-block=&#34;{&#34;id&#34;:1099448,&#34;sizeSlug&#34;:&#34;full&#34;,&#34;linkDestination&#34;:&#34;无&#34;,&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;9c5c17e2-c33f-4d4d-be07 -656b6f57ca9b&#34;,&#34;alt&#34;:&#34;&#34;}&#34; class=&#34;aligncenter size-full&#34;&gt;&lt;img加载=“惰性”解码=“异步”宽度=“738”高度=“254”src=“https://blog.uber-cdn.com/cdn-cgi/image/width=2160，质量= 80，onerror =重定向，格式=自动/wp-content/uploads/2024/11/figure15-17309545442114.png&#34; alt=&#34;&#34;类=“wp-image-1099448”srcset=“https://blog.uber-cdn.com/cdn-cgi/image/width=738，quality=80，onerror=redirect，format=auto/wp-content/上传/2024/11/figure15-17309545442114.png 738w, https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/11/figure15-17309545442114.png 300w “尺寸=”（最大宽度：738px）100vw，738px“ referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 15：比较本地批量低层中快速查询和非快速查询的查询计数。 &lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;751ca32e-6e42-417b-8213-66ec4f41d30a&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;c312ebfe-1da5-441e-ad78-677273fabf40&#34;,&#34;dropCap&#34;:false}&#34;&gt;他们还提供为用户提供更好的 SLA。快速查询的 p90 排队时间约为 10 秒，而非快速查询的排队时间可能长达数小时。图16中的01:37:06指的是1小时37分6秒s。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;id&#34;:1099450,&#34;sizeSlug&#34;:&#34;full&#34;,&#34;linkDestination&#34;:&#34;none&#34;,&#34;align&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;e359b75c-cc8e-4c11-ac25-477a675db113&#34;,&#34;alt&#34;:&#34;&#34;}&#34;类=“aligncenter尺寸-full”&gt;&lt;img加载=“惰性”解码=“异步”宽度=“746”高度=“258”src=“https://blog.uber-cdn.com/cdn-cgi/图像/宽度=2160，质量=80，onerror=重定向，格式=自动/wp-content/uploads/2024/11/figure16-17309545843619.png&#34; alt=&#34;&#34; class=&#34;wp-image-1099450&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=746,quality=80,onerror=redirect,format=auto/ wp-content/uploads/2024/11/figure16-17309545843619.png 746w， https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure16-17309545843619.png 300w “尺寸=”（最大宽度：746px）100vw，746px“ referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 16：比较快速查询和非快速查询的 P90 排队时间。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;6f4b46cd-c162-4744-97d7-3f17cb9c41c7&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;7e4f3a4c-eb4c-4057-98bb-2f7756f07c96&#34;,&#34;dropCap&#34;:false}&#34;&gt;p90 正在运行快速查询的时间也明显减少，并且快速查询为用户提供了更好的端到端SLA。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;id&#34;:1099419,&#34;sizeSlug&#34;:&#34;full&#34;,&#34;linkDestination&#34;:&#34;none&#34;,&#34;align&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;f75ca99a-2d3b-4a3e-bb11-539edde28e97&#34;,&#34;alt&#34;:&#34;&#34;}&#34;类=“aligncenter尺寸-full”&gt;&lt;img加载=“惰性”解码=“异步”宽度=“737”高度=“249”src=“https://blog.uber-cdn.com/cdn-cgi/图像/宽度=2160，质量=80，onerror=重定向，格式=自动/wp-content/uploads/2024/11/figure17-17309527374882.png&#34; alt=&#34;&#34; class=&#34;wp-image-1099419&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=737,quality=80,onerror=redirect,format=auto/ wp-content/uploads/2024/11/figure17-17309527374882.png 737w， https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/11/figure17-17309527374882.png 300w “尺寸=”（最大宽度：737px）100vw，737px“ referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 17：比较 P90 运行时的快速查询和非快速查询。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;ace869bc-c889-43d0-aaef-bddbeef0f7c6&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;核心/分隔符&#34; data-wp-block=&#34;{&#34;哈希&#34;:&#34;0626068b-e055-45c1-9294-c1bcda29a592&#34;,&#34;不透明度&#34;:&#34;alpha-channel&#34;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;907e8a8b-e7e4-4bc8-8272-33c015204a31&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-next-steps-nbsp&#34;&gt;后续步骤&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;33c06a69-2ff8-480e-a2b9-defc925f6af5&#34;,&#34;dropCap&#34;:false}&#34;&gt;后续步骤，我们想要考虑分离 Express 集群组。在我们当前的实现中，快速集群是主要集群组（例如批量低层、批量高层和交互式）的子组。这个想法是每个集群组都有自己的一组快速集群。然而，根据我们的生产经验，express 可以是一个单独的集群组，而不是一个子组。因此，无论查询是批量高层查询、低层查询还是交互式查询，都应该将快速查询发送到该集群组。原因是：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;521b9e82-a6a7-4c3b-8a14-4887ecde79be&#34;,&#34;ordered&#34;:false,&#34;values&#34;:&#34; “}”类=“wp-block-list”&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;当前的 Express 集群利用率似乎较低，并且可以运行更多查询。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;简化的路由逻辑。我们可以在查询提交时确定某个查询是 Express 查询，并将其路由到该集群组。&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;express系统给出的SLA足够低，我们不需要区分批量和交互式查询。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;f339da68-8805-4e0e-8386-0798070f209f&#34;,&#34;dropCap&#34;:false}&#34;&gt;到目前为止，我们只区分了快速查询和非快速查询，但是我们可以有更多的分类，例如小/中/大，并且每个分类都进入一个单独的集群组。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;485bc75d-25b2-42b8-9ec0-38fbfebd549b&#34;,&#34;dropCap&#34;:false}&#34;&gt;我们的另一个区域正在探索的是查询成本预测。历史数据一直是我们预测查询是否符合快速查询条件的主要工具。拥有历史数据对于交互式工作负载来说可能是一个挑战。为了解决这个问题，我们可以利用机器学习模型来确定传入查询是否应归类为快速查询。通过集成先进的算法，我们可以准确评估新查询的性质，确保更准确、更及时的分类，甚至对于我们系统中以前未见过的查询也是如此。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;核心/分隔符&#34; data-wp-block=&#34;{&#34;哈希&#34;:&#34;6c4a2ec0-107e-4acc-90ed-4fa63ca40f51&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:1,&#34;hash&#34;:&#34;b9ccff27-56a3-49fd-93c8-34ff75280f3e&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-conclusion&#34;&gt;结论&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;fdfd207e-f816-48ba-8746-e0a2bbd337ec&#34;,&#34;dropCap&#34;:false}&#34;&gt;此博客探讨了Uber Presto Express 的设计和实现，旨在减少短期运行查询的端到端 SLA。我们讨论了快速查询的定义方式、它们如何集成到整个生态系统中以及我们遇到的挑战。此外，我们还强调了通过部署实现的性能提升，Presto Express 为超过 75% 的计划查询提供了数量级的端到端 SLA 改进。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;fontSize&#34;:&#34;小&#34;,&#34;hash&#34;:&#34;e5f6e121-eae9-4740-a6d8-67a6d5b36f5f&#34;,&#34;dropCap&#34; :false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Apache&lt;sup&gt;®&lt;/sup&gt;，Apache Kafka&lt;sup&gt;®&lt;/sup&gt;、Apache Hive&lt;sup&gt;™&lt;/sup&gt; 和 Apache Pinot&lt;sup&gt;™ &lt;/sup&gt; 是 Apache Software Foundation 在美国的注册商标或商标和/或其他国家。使用这些标记并不暗示 Apache 软件基金会的认可。&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;fontSize&#34;:&#34;小&#34;,&#34;hash&#34;:&#34;c01f2c0c-f857-45b1-b6c0-3c744ea63341&#34;,&#34;dropCap&#34; :false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Oracle、Java、MySQL 和 NetSuite 是 Oracle 的注册商标和/或其附属公司。 &lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;fontSize&#34;:&#34;小&#34;,&#34;哈希&#34;:&#34;9149a51f-6ad7-4a68-8c7b-f4fb23d4b282&#34;,&#34;dropCap&#34; :false}&#34; class=&#34;has-small-font-size&#34;&gt;&lt;em&gt;Presto® 是 LF Projects 的注册商标， LLC。&lt;/em&gt;&lt;br&gt;&lt;br&gt;“&lt;a href=&#34;https://www.flickr.com/photos/95482862@N00/3889341309&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;第一大道流量&lt;/a&gt;”，作者：&lt;a href=&#34;https://www.flickr.com/photos/95482862@N00&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Oran Viriyincy&lt;/a&gt; 已获得 &lt;a href=&#34;https://creativecommons.org/licenses/by/2.0/?ref=openverse&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener 的许可&#34;&gt;CC BY 2.0&lt;/a&gt;。&lt;/p&gt;</description>
      <pubDate>Thu, 07 Nov 2024 06:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Genie: Uber’s Gen AI On-Call Copilot】Genie：Uber 的 Gen AI On-Call 副驾驶</title>
      <link>https://www.uber.com/blog/genie-ubers-gen-ai-on-call-copilot/</link>
      <description>【&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:1,&amp;quot;hash&amp;quot;:&amp;quot;e7b16816-7feb-4864-8765-c97c5e712233&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;83ceaad1-2639-48b3-a7fe-b65336676e02&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In today’s fast-paced tech environment, maintaining robust on-call operations is crucial for ensuring seamless service functioning. Modern platform engineering teams face the challenge of efficiently managing on-call schedules, incident response, communication during critical moments, and strong customer support on Slack&lt;sup&gt;®&lt;/sup&gt; channels.&lt;br&gt;&lt;br&gt;This post describes Genie, an on-call copilot we built that uses generative AI to optimize communication and question-answering with on-call engineers.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;44f18be0-34d4-4eea-b7dc-a66f7c356686&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;4d9ace85-d435-4f79-bc16-ca7545517062&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-a-closer-look-problem-and-motivation&#34;&gt;A Closer Look: Problem and Motivation&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e42ca7aa-2298-49d4-bb40-466989b1deb0&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;At Uber, different teams like the Michelangelo team have Slack support channels where their internal users can ask for help. People ask around 45,000 questions on these channels each month, as shown in Figure 1. High question volumes and long response wait times reduce productivity for users and on-call engineers.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1097494,&amp;quot;sizeSlug&amp;quot;:&amp;quot;full&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;139eb3c9-7dca-4316-842f-78d479d072dc&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-full&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;636&#34; height=&#34;233&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure1-17285117876372.png&#34; alt=&#34;&#34; class=&#34;wp-image-1097494&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=636,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure1-17285117876372.png 636w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure1-17285117876372.png 300w&#34; sizes=&#34;(max-width: 636px) 100vw, 636px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 1: The high number of questions asked across Slack channels at Uber over 5 months.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6f3202a6-b275-41b8-afd6-a034baa192bd&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;392586df-9bd9-4f14-9628-730f13b3e53f&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-cumbersome-process&#34;&gt;&lt;br&gt;Cumbersome Process&lt;/h3&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1097496,&amp;quot;sizeSlug&amp;quot;:&amp;quot;full&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;6e32b91d-85cf-49bf-8b23-04b1a787fca6&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-full&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;864&#34; height=&#34;281&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure2-17285118129665.png&#34; alt=&#34;&#34; class=&#34;wp-image-1097496&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=864,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure2-17285118129665.png 864w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure2-17285118129665.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure2-17285118129665.png 768w&#34; sizes=&#34;(max-width: 864px) 100vw, 864px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 2: The slow process of waiting for an on-call engineer to answer a question.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;52bc6081-d1db-42d1-bb04-bcb7387358df&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;br&gt;Typically, when users ask a question in a Slack channel, they have to wait for the on-call engineer to respond. The on-call engineer either answers the user’s initial question or asks for more details. Users might then ask follow-up questions, seek more clarification, or provide extra information. This leads to another wait for a response from the on-call engineer. After several rounds of back-and-forth communication, the user’s question eventually gets resolved.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;53b2c110-525b-4ae2-bffd-f2b6d5be6e8a&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e2b1d2ee-bf35-4150-b995-3e291c9948a7&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-hard-to-find-information&#34;&gt;Hard to Find Information&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;555a7e9d-308d-498a-9d0c-d3d06c52b16a&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Many questions could‌ get answered by referring to existing documentation, but the information is fragmented across Uber’s internal wiki called Engwiki, internal Stack Overflow, and other locations, making it challenging to find specific answers. As a result, users often ask the same questions repeatedly, leading to a high demand for on-call support across hundreds of Slack channels.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;523bac00-5e5d-419b-a101-3509db9a4c45&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c65afede-93c3-465d-8b31-e8add6c3edb8&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-architectural-challenges&#34;&gt;Architectural Challenges&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;fdeaec3c-30d5-4218-af3b-8ca8990f0898&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;For building an on-call copilot, we chose between fine-tuning an LLM model or leveraging &lt;a href=&#34;https://www.anyscale.com/blog/a-comprehensive-guide-for-building-rag-based-llm-applications-part-1&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Retrieval-Augmented Generation (RAG)&lt;/a&gt;. Fine-tuning requires curated data with high-quality, diverse examples for the LLM to learn from. It also requires compute resources to keep the model updated with new examples.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;744ef140-d7d0-4aea-8221-b3b3ea0f9688&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In contrast, RAG doesn’t require any diverse examples to begin with. This reduced the time to market for the copilot launch, so we chose this approach for our copilot.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;99175e3c-e91c-45cc-aa82-2be9b7386c35&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Building an on-call copilot presented several challenges, including addressing hallucination, protecting data sources, and improving the user experience. Here’s an overview of how we solved each challenge.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e9110a7c-4bf5-454c-bb29-41de6910fdff&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;For hallucination, we focused on:&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;eedf199c-34fc-47a2-8b5c-1af71d316e77&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Accuracy of responses&lt;/strong&gt;: We ensure that the copilot retrieves relevant knowledge for the question, which prevents the LLM engine from generating incorrect or misleading information&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Verification mechanisms&lt;/strong&gt;: We implement methods to verify the copilot’s responses against authoritative sources to reduce the likelihood of hallucination&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Continuous learning&lt;/strong&gt;: We ensure that the copilot has access to the most updated data to enhance its accuracy&lt;br&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;079a03e0-3175-42d9-a799-f2db1cbd69f4&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;For data security, we chose the data sources to ingest carefully, as many data sources can’t be exposed in Slack channels.&lt;br&gt;&lt;br&gt;To improve the user experience, we designed:&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9b32f175-7af2-4cb8-a3fd-e478d6c979b6&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Intuitive interface&lt;/strong&gt;: We designed an easy-to-use interface that allows users to interact with the copilot efficiently&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Feedback loop&lt;/strong&gt;: We created a system for users to provide feedback on responses to continually refine the copilot’s performance&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;544fa9a3-d103-49f1-bd3f-0ea3e60a5fe7&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We addressed these challenges when developing our on-call copilot to ensure that it’s reliable, user-friendly, and secure.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;8595d9fd-d250-4111-a0ae-c65a880b660f&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;775af645-d734-43db-8617-596ded3f17e1&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-deep-dive-architecture&#34;&gt;Deep Dive: Architecture&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e3acd865-7c12-403d-a1dd-c12e0cfd66a5&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Let’s explore the architecture of our on-call copilot, called Genie.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1097498,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;b1baea01-32a1-4ee9-ac99-52df5911b2a8&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;443&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure3-3-17285118456072-1024x443.png&#34; alt=&#34;&#34; class=&#34;wp-image-1097498&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure3-3-17285118456072.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure3-3-17285118456072.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure3-3-17285118456072.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure3-3-17285118456072.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=2000,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure3-3-17285118456072.png 2000w&#34; sizes=&#34;(max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 3: Architecture of the on-call copilot.&amp;nbsp;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;18321915-dd26-4e3e-9ea7-3905b8a51726&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;418a7ac1-114d-4079-bebe-6277461f0ad5&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;At a high level, we scrape internal data sources like Uber’s internal wiki, Uber’s internal Stack Overflow, engineering requirement documents, and create vectors from these data sources using an Open AI embedding model. Those embeddings get stored in a vector database. Then, when a user posts a question in a Slack channel, the question gets translated to embeddings. The service searches for relevant embeddings related to the question in a vector database. The results indexed by embeddings get used as prompts to the LLM to get back a response.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;bbbba4d6-3bfb-47db-8917-95748eba02b5&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The following steps for data prep, embeddings, and pushing the artifacts for serving can be generalized as a RAG application using Apache Spark&lt;sup&gt;™&lt;/sup&gt;. These general steps form the basis of a RAG application.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;94026da2-9931-4e3e-852b-dcd6665156ea&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7ccaf504-43aa-4a72-a0d6-96471408651e&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-etl&#34;&gt;ETL&lt;/h2&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1097500,&amp;quot;width&amp;quot;:&amp;quot;521px&amp;quot;,&amp;quot;height&amp;quot;:&amp;quot;auto&amp;quot;,&amp;quot;aspectRatio&amp;quot;:&amp;quot;4\/3&amp;quot;,&amp;quot;scale&amp;quot;:&amp;quot;cover&amp;quot;,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;c2dadb8f-040e-4a17-afd8-3cf88890e063&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large is-resized&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;816&#34; height=&#34;1024&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure4-17285118719035-816x1024.png&#34; alt=&#34;&#34; class=&#34;wp-image-1097500&#34; style=&#34;aspect-ratio:4/3;object-fit:cover;width:521px;height:auto&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=816,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure4-17285118719035.png 816w, https://blog.uber-cdn.com/cdn-cgi/image/width=239,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure4-17285118719035.png 239w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure4-17285118719035.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=940,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure4-17285118719035.png 940w&#34; sizes=&#34;(max-width: 816px) 100vw, 816px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 4: Spark application for data ingest.&amp;nbsp;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a3677069-38fe-4d57-9b36-6ee85aeb3ea8&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;78d8d942-525e-4c13-ab8d-79d3d980353d&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Figure 4 shows a custom Spark application that contains the steps for ingesting data to a vector database. A Spark application runs those steps using Spark executors.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;2e768fa5-c1b6-4c6a-ba46-d642732c1be9&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-data-prep&#34;&gt;&lt;br&gt;Data Prep&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a5923920-e1e5-4281-8a97-4821b2ae661f&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;A Spark app fetches content from the respective data source using Uber’s internal wiki, called Engwiki, or Uber Stack Overflow APIs. A Spark dataframe gets outputted from this data prep stage. The schema has the Engwiki link in a column and the content of the Engwiki in a separate column, both in string format.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1097502,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;abbd21e9-5275-4ac1-8273-11af89807749&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;220&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure5-17285119354055-1024x220.png&#34; alt=&#34;&#34; class=&#34;wp-image-1097502&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure5-17285119354055.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure5-17285119354055.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure5-17285119354055.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1284,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure5-17285119354055.png 1284w&#34; sizes=&#34;(max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 5: Columns of the Spark dataframe from the Engwiki datasource.&amp;nbsp;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d307d345-ce2b-4274-af28-d2713e6f8005&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a0213e51-4c9b-4bea-9c22-fde19d3849ff&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Figure 5 shows the columns of the Spark dataframe with Uber’s internal wiki as the original data source. It has the source URL, content, and other columns storing metadata.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;900833c0-b219-4f9b-bf03-a6c037e70413&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-embedding-generation&#34;&gt;&lt;br&gt;Embedding Generation&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;fa364112-7193-470a-ae5d-1120d6bd5e94&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Once the data is scraped, embeddings get created using the OpenAI embedding model and pushed to Terrablob, Uber’s blob storage. The embeddings created are only accessible through a particular Slack channel related to the Engwiki space. The output format is a dataframe with a schema of chunked content mapped to the corresponding vector of that chunk. Uber’s internal wiki content is chunked using langchain and embeddings are generated through OpenAI with PySpark UDFs.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;95723f82-760a-4697-ac97-71700d164769&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXf4DX2PBW9iHR6npUbfBZlpuNq7pEZ9stydlXT94UlJNgeLsPs3n6gwe1rcsSDFCWKDKYiQ9JS1NNt6wPCkjbmB3K4NrFXd5Ql16Y8Fmdf3OkPwPcl7yppTkl7DznlJnWAbxu6bswf3dhwIukjV--SLHag?key=Cul8rOkHqArI5wi0MdurWQ&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 6: Columns of the Spark dataframe with vector embeddings.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;df3248a1-b648-4a1e-8d38-14ddc846a9a5&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d26434ed-fb67-4781-969b-18478fa7b608&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Figure 6 shows the columns of the Spark dataframe with Uber’s internal wiki as the original data source. It has the source URL, content, chunked content, and embeddings for that particular chunk.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a42e77cd-a2e6-490f-b6f1-500a195f2d66&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;8422f718-6035-4458-b9d6-d150217f2714&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-pusher&#34;&gt;Pusher&lt;/h2&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1097505,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;15bc5c0c-6300-4e90-9ff1-4000afc37ea7&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;456&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure7-17285121216461-1024x456.png&#34; alt=&#34;&#34; class=&#34;wp-image-1097505&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure7-17285121216461.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure7-17285121216461.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure7-17285121216461.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1399,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure7-17285121216461.png 1399w&#34; sizes=&#34;(max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 7: Flow of vectors getting pushed to Terrablob.&amp;nbsp;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;925589cc-cfb6-42c4-85ae-50b997c1f75b&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;96764c30-7e39-416f-8a35-8b6bfd29b4a9&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Figure 7 shows how vectors are pushed to Terrablob. A bootstrap job is triggered to ingest data from a data source to Sia, Uber’s in-house vector database solution. Then, two Spark jobs are triggered for the index build and merge and ingest data to Terrablob. Every leaf syncs and downloads a base index and snapshot stored in Terrablob. During retrieval, a query is directly sent to each leaf.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c83baa9b-0da1-4226-8912-f3918309b9e0&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e55d7c63-e2d6-4f4d-90d8-4db67d0d800e&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-knowledge-service&#34;&gt;Knowledge Service&lt;/h2&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1097508,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;d1952dd4-d236-42e5-a1f1-49eda9714865&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;533&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure8-17285122683730-1024x533.png&#34; alt=&#34;&#34; class=&#34;wp-image-1097508&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure8-17285122683730.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure8-17285122683730.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure8-17285122683730.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure8-17285122683730.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=1819,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure8-17285122683730.png 1819w&#34; sizes=&#34;(max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 8: Flow of the back-end Knowledge Service.&amp;nbsp;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d51d2f61-620b-497b-90b3-33159c9b573f&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;1aa84d55-9c15-4da0-9464-3f72e7a637a2&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Genie has a back-end service called Knowledge Service, which serves incoming requests for all incoming queries by first converting the incoming query into an embedding and then fetching the most relevant chunks from the vector database.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;00b12d8a-403b-41d0-ad77-0eb9d5db4039&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;bfd1c1c7-ff26-495a-aab2-a536972d1288&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-cost-tracking&#34;&gt;Cost Tracking&lt;/h2&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1097510,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;f3d3a3dd-1430-4e46-9139-6906e12b17b6&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;466&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure9-17285128268595-1024x466.png&#34; alt=&#34;&#34; class=&#34;wp-image-1097510&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure9-17285128268595.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure9-17285128268595.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure9-17285128268595.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure9-17285128268595.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=1538,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure9-17285128268595.png 1538w&#34; sizes=&#34;(max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 9: Flow of Genie cost tracking.&amp;nbsp;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ff527243-716c-489e-b627-22d696350692&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;1fc50b8e-0cdf-4138-a8e2-314b72818355&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;For cost tracking, when the Slack client or other platforms call Knowledge Service, a UUID gets passed to Knowledge Service, which in turn passes the UUID through the context header to Michelangelo Gateway. Michelangelo Gateway is a pass-through service to the LLM so that it can be added to an audit log used to track costs by that UUID.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;43875a90-77f2-4acc-ac34-df25281d3e51&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;8fa72504-db7a-4ece-80ef-7e3714b0189a&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-genie-performance-evaluation&#34;&gt;Genie Performance Evaluation&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;a453e184-134d-423e-987f-5c2c51383195&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-metrics-framework&#34;&gt;Metrics Framework&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;1515629e-7d00-4f78-936c-9553ed1f6cbe&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Users can provide feedback right away in Slack by clicking the relevant button in the Genie’s reply. We give users the option to choose from:&amp;nbsp;&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;32dde48a-387a-4bae-a2b3-9d0525d3826c&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Resolved&lt;/strong&gt;: the answer completely resolved the issue&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Helpfu&lt;/strong&gt;l: the answer partially helped, but the user needs more help&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Not Helpful&lt;/strong&gt;: the response is wrong or not relevant&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Not Relevant&lt;/strong&gt;: the user needs help from someone on call and Genie can’t assist (like for a code review)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1097512,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;03c44d96-15a9-4c38-b363-e4a2706e8fbc&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;116&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-10-17285128486660-1024x116.png&#34; alt=&#34;&#34; class=&#34;wp-image-1097512&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-10-17285128486660.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-10-17285128486660.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-10-17285128486660.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-10-17285128486660.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=2048,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-10-17285128486660.png 2048w, https://blog.uber-cdn.com/cdn-cgi/image/width=2139,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-10-17285128486660.png 2139w&#34; sizes=&#34;(max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 10: Flow of user feedback for Genie.&amp;nbsp;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;1a39fc28-3c28-4116-9f55-6d19ae315c90&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;857e39a6-853d-4547-9869-e92e41699b5c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;br&gt;When the user leaves their feedback, a Slack plugin picks it up and uses a specific Kafka topic to stream metrics into a Hive table with the feedback and all the relevant metadata. We later visualize these metrics in a dashboard.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;979e8cb5-13b2-4bfa-bdeb-9fee00e198ee&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-performance-evaluation&#34;&gt;&lt;br&gt;Performance Evaluation&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;5a818e05-9a10-4b1b-af8b-d87178bcd50a&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We provide Genie users with the option to run custom evaluations. They can evaluate hallucinations, answer relevancy, or any other metric that they deem important for their use case. This evaluation can be used for better tuning of all the relevant RAG components—retrieval and generation.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1097514,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;3f2db8f8-1c88-400c-bc43-cafba48a1524&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;474&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-11-17285128734740-1024x474.png&#34; alt=&#34;&#34; class=&#34;wp-image-1097514&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-11-17285128734740.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-11-17285128734740.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-11-17285128734740.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-11-17285128734740.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=2048,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-11-17285128734740.png 2048w&#34; sizes=&#34;(max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 11: Performance evaluation process.&amp;nbsp;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;8c2a3927-19b6-4db3-9707-b4e7387f4bb8&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;bb9431c5-4a78-4afc-a264-ede6c44f7ac0&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Figure 11 shows the evaluation process, which is a separate ETL pipeline that uses already-built Michelangelo components. Genie’s context and responses are retrieved from Hive and joined on any other relevant date, like Slack metadata and user feedback. It gets processed and passed to the Evaluator. Evaluator fetches specified prompt and runs LLM as a Judge. The specified metrics are extracted and included in the evaluation report, which is available to users in the UI.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;e2225358-ed38-49c8-9016-00b050230665&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-document-evaluation&#34;&gt;&lt;br&gt;Document Evaluation&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;476397f2-a2f6-40aa-a21b-56cd9fdf3670&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Accurate information retrieval depends on the clarity and accuracy of the source documents. If the quality of the documentation is poor itself, no matter how good the LLM performs, there’s no way to have a good performance. Therefore, the ability to evaluate documents and make actionable suggestions to improve document quality is essential for an efficient and effective RAG system.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;86fb2e66-3a6d-44b4-a503-4df31f230238&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1097516,&amp;quot;sizeSlug&amp;quot;:&amp;quot;full&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;df6c991d-50fe-4b9f-a1d5-8d1ffa31c15a&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-full&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;800&#34; height=&#34;600&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-12-17285129625698.png&#34; alt=&#34;&#34; class=&#34;wp-image-1097516&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=800,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-12-17285129625698.png 800w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-12-17285129625698.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-12-17285129625698.png 768w&#34; sizes=&#34;(max-width: 800px) 100vw, 800px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 12: Workflow of the document evaluation app.&amp;nbsp;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7fd0361d-27f8-4ec0-9c68-2afdcd6caf0b&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;749bc0f6-cb3e-43dc-821d-4646be34267c&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Figure 12 shows the workflow of the document evaluation app. After the data is scraped, documents in the knowledge base are transformed into a Spark dataframe. Each row in the dataframe represents one document in the knowledge base. Then the evaluation is processed by calling LLM as the judge. Here, we feed LLM with a custom evaluation prompt. The LLM returns an evaluation score, together with explanations of the score and actionable suggestions on how to improve the quality of each document. All these metrics get published as an evaluation report, which users can access in the Michelangelo UI.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;06cc4f29-732c-4eab-9eb4-0e8fd386b55b&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6ad29c63-bdbd-40fd-852c-20b68861cf10&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-solutions-to-challenges&#34;&gt;Solutions to Challenges&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;1d2a3a6f-deb7-490c-be46-055790382f2d&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;To reduce hallucinations&lt;strong&gt;, &lt;/strong&gt;we changed the way we sent prompts to the LLM that we got from the vector database. We explicitly added for all the results obtained from the vector database a section called sub-context along with the source URL for that sub-context. We asked the LLM to only give answers from the various sub-contexts provided and return the source url to cite the answer. This seeks to provide a source URL for every answer it returns.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0427a52a-b8be-4769-87d4-dbe168c385df&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;To ensure we don’t leak the data sources for which we create embeddings to Open AI or on Slack to folks who might not be able to access to sensitive data sources, we pre-curated data sources which are widely available to most Uber engineers and only allowed using those data sources for generating embeddings.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;3614a771-313c-4df7-ae34-d854bd369dad&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;To maximize Genie’s potential in answering questions, we developed a new interaction mode. This mode allows users to ask follow-up questions more conveniently and encourages them to read Genie’s answers more attentively. If Genie can’t answer their questions, users can easily escalate the issue to on-call support.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;22c66eba-4b1d-4f55-8a61-8bfb697e9f4e&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;id&amp;quot;:1097518,&amp;quot;sizeSlug&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;linkDestination&amp;quot;:&amp;quot;none&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;44f606b1-fecc-453b-95d9-59fb126fb25d&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; width=&#34;1024&#34; height=&#34;391&#34; src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-13-17285130008667-1024x391.png&#34; alt=&#34;&#34; class=&#34;wp-image-1097518&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-13-17285130008667.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-13-17285130008667.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-13-17285130008667.png 768w, https://blog.uber-cdn.com/cdn-cgi/image/width=1536,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-13-17285130008667.png 1536w, https://blog.uber-cdn.com/cdn-cgi/image/width=2048,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure-13-17285130008667.png 2048w&#34; sizes=&#34;(max-width: 1024px) 100vw, 1024px&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 13: Flow of how Genie responds to user questions.&amp;nbsp;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;22c66eba-4b1d-4f55-8a61-8bfb697e9f4e&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;bc41c3aa-eac1-46b6-936d-7a1e67af4ea1&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In the new interaction mode, when a user asks a question, Genie will answer with next step action buttons provided. Using those buttons, users can easily ask followup questions, mark questions as resolved, or contact human support.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;79f5346a-c345-4c2c-88c8-6f935ed481b8&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d70fa89b-a6e4-4e10-95d3-38e538b6c409&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-results&#34;&gt;Results&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ca43db45-05d5-415d-ad84-a7e0796db4f1&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Since its launch in September of 2023, Genie has expanded its presence to &lt;em&gt;154 Slack channels&lt;/em&gt; and has answered over &lt;em&gt;70,000 questions&lt;/em&gt;. Genie boasts a &lt;em&gt;48.9% helpfulness rate&lt;/em&gt;, showcasing its growing effectiveness. We estimate it’s saved us &lt;em&gt;13,000 engineering hours&lt;/em&gt; so far since its launch.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e73c09e1-274a-42a5-92e9-adb69b58474a&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;b132ac5a-370a-4354-852c-bf77d294ef71&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-future&#34;&gt;Future&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;8d1b8f31-767c-4c6d-8966-374e09f1fe7f&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Genie is a cutting-edge Slack bot designed to streamline on-call management, optimize incident response, and improve team collaboration. Developed with a focus on simplicity and effectiveness, Genie serves as a comprehensive assistant, empowering engineering teams to handle on-call responsibilities seamlessly.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;01426ba8-3693-43a5-83f5-446a0e1d3e48&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;This on-call assistant copilot has the scope to change the entire experience of how users and on-call engineers of any platform interact and engage within the respective platform’s Slack channel. It can also change the experience within each product, like Michelangelo or IDEs, where users can find product-specific help within the product or a product-specific Slack channel without having to wait for on-call assistance.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9a0acdb7-601d-4d57-ac93-00495e498efb&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:1,&amp;quot;hash&amp;quot;:&amp;quot;4890f555-add4-4b02-9966-a448c71b2d81&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-conclusion&#34;&gt;Conclusion&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;157fe169-dc52-4ed0-b048-bb834225462a&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Genie, the on-call assistant copilot, revolutionizes the way engineering teams manage on-call duties. By facilitating auto-resolution and providing insightful analytics, Genie empowers teams to handle on-call responsibilities efficiently and effectively.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a7436f34-ba56-435b-a0d6-089c152bc929&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7063b9e6-3aba-4ab9-a7e6-6978598c2c6e&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-acknowledgements&#34;&gt;Acknowledgements&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;59559f57-4e2e-4e69-af78-260327769ca4&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The roll-out of this on-call copilot couldn’t have happened without the many team members who contributed to it. A huge thank you to the folks within Uber’s Michelangelo team. We also thank our partners on other Uber teams for making this idea a reality.&lt;br&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;2c90521c-3176-44ec-ad7d-d89cc4be2729&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;Slack&lt;sup&gt;®&lt;/sup&gt; is a registered trademark and service mark of Slack Technologies, Inc.Apache&lt;sup&gt;®&lt;/sup&gt;, Apache Spark&lt;sup&gt;™&lt;/sup&gt;, and Spark&lt;sup&gt;™&lt;/sup&gt; are either registered trademarks or trademarks of the Apache Software Foundation in the United States and/or other countries. No endorsement by The Apache Software Foundation is implied by the use of these marks.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;2c90521c-3176-44ec-ad7d-d89cc4be2729&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;Header Image Attribution: The image was generated by a generative AI tool.&lt;/p&gt;】&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:1,&#34;hash&#34;:&#34;e7b16816-7feb-4864-8765-c97c5e712233&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-introduction&#34;&gt;简介&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;83ceaad1-2639-48b3-a7fe-b65336676e02&#34;,&#34;dropCap&#34;:false}&#34;&gt;在今天的禁食中在快速发展的技术环境中，保持强大的随叫随到操作对于确保无缝服务功能至关重要。现代平台工程团队面临着有效管理待命时间表、事件响应、关键时刻的沟通以及 Slack&lt;sup&gt;®&lt;/sup&gt; 渠道上强大客户支持的挑战。&lt;br&gt;&lt;br&gt;这篇文章介绍了 Genie、我们构建的待命副驾驶使用生成式人工智能来优化与待命工程师的沟通和问答。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;44f18be0-34d4-4eea-b7dc-a66f7c356686&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;4d9ace85-d435-4f79-bc16-ca7545517062&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-a-closer-look-problem-and-motivation&#34;&gt;仔细观察：问题和动机&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;e42ca7aa-2298-49d4-bb40-466989b1deb0&#34;,&#34;dropCap&#34;:false}&#34;&gt;在 Uber，像 Michelangelo 团队这样的不同团队都有 Slack 支持渠道，内部用户可以在其中寻求帮助。人们每月会在这些渠道上提出大约 45,000 个问题，如图 1 所示。问题量大和响应等待时间长会降低用户和值班工程师的工作效率。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;id&#34;:1097494,&#34;sizeSlug&#34;:&#34;full&#34;,&#34;linkDestination&#34;:&#34;none&#34;,&#34;align&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;139eb3c9-7dca-4316-842f-78d479d072dc&#34;,&#34;alt&#34;:&#34;&#34;}&#34;类=“aligncenter size-full”&gt;&lt;img加载=“惰性”解码=“异步”宽度=“636”高度=“233”src=“https://blog.uber-cdn.com/cdn-cgi/图像/宽度=2160，质量=80，onerror=重定向，格式=自动/wp-content/uploads/2024/10/figure1-17285117876372.png&#34; alt=&#34;&#34; class=&#34;wp-image-1097494&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=636,quality=80,onerror=redirect,format=auto/ wp-content/uploads/2024/10/figure1-17285117876372.png 636w， https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure1-17285117876372.png 300w “尺寸=”（最大宽度：636px）100vw，636px“ referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 1：过去 5 个月内，Uber 通过 Slack 渠道提出的问题数量较多。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;核心/段落&#34;data-wp-block=&#34;{&#34;hash&#34;:&#34;6f3202a6-b275-41b8-afd6-a034baa192bd&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;392586df-9bd9-4f14-9628-730f13b3e53f&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-cumbersome-process&#34;&gt;&lt;br&gt;繁琐的过程&lt;/h3&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;核心/图像&#34; data-wp-block=&#34;{&#34;id&#34;:1097496,&#34;sizeSlug&#34;:&#34;full&#34;,&#34;linkDestination&#34;:&#34;无&#34;,&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;6e32b91d-85cf-49bf-8b23 -04b1a787fca6&#34;,&#34;alt&#34;:&#34;&#34;}&#34; class=&#34;aligncenter size-full&#34;&gt;&lt;img加载=“惰性”解码=“异步”宽度=“864”高度=“281”src=“https://blog.uber-cdn.com/cdn-cgi/image/width=2160，质量= 80，onerror =重定向，格式=自动/wp-content/uploads/2024/10/figure2-17285118129665.png&#34; alt=&#34;&#34;类=“wp-image-1097496”srcset=“https://blog.uber-cdn.com/cdn-cgi/image/width=864，quality=80，onerror=redirect，format=auto/wp-content/上传/2024/10/figure2-17285118129665.png 864w, https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure2-17285118129665.png 300w , https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure2-17285118129665.png 768w “尺寸=”（最大宽度：864px）100vw，864px“ referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 2：等待待命工程师回答问题的缓慢过程。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div &gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;52bc6081-d1db-42d1-bb04-bcb7387358df&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;br&gt;通常，当用户在 Slack 频道中提问时，他们必须等待待命工程师做出回应。值班工程师要么回答用户的初始问题，要么询问更多详细信息。然后，用户可能会提出后续问题、寻求更多说明或提供额外信息。这导致再次等待待命工程师的响应。经过多轮来回沟通，用户的问题最终得到解决。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;53b2c110-525b-4ae2-bffd-f2b6d5be6e8a&#34;,&#34;opacity&#34;:&#34;alpha 通道&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;e2b1d2ee-bf35-4150-b995-3e291c9948a7&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-hard-to-find-information&#34;&gt;难以查找的信息&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;555a7e9d-308d-498a-9d0c-d3d06c52b16a&#34;,&#34;dropCap&#34;:false}&#34;&gt;许多问题可以‌‌通过参考现有文档得到答案，但信息分散在 Uber 的内部无线网络中ki 调用了 Engwiki、内部 Stack Overflow 和其他位置，因此很难找到具体答案。因此，用户经常反复询问相同的问题，从而导致对数百个 Slack 渠道的随叫随到支持的需求很高。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;523bac00-5e5d-419b-a101-3509db9a4c45&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;c65afede-93c3-465d-8b31-e8add6c3edb8&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-architectural-challenges&#34;&gt;架构挑战&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;fdeaec3c-30d5-4218-af3b-8ca8990f0898&#34;,&#34;dropCap&#34;:false}&#34;&gt;用于构建值班副驾驶，我们选择微调 LLM 模型或利用 &lt;a href=&#34;https://www.anyscale.com/blog/a-compressive-guide-for-building-rag-based-llm-applications-part-1&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;检索-增强一代（RAG）&lt;/a&gt;。微调需要包含高质量、多样化示例的精选数据，供法学硕士学习。它还需要计算资源来使用新示例来更新模型。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;744ef140-d7d0-4aea-8221-b3b3ea0f9688&#34;,&#34;dropCap&#34;:false}&#34;&gt;相反， RAG 不需要任何不同的示例来开始。这缩短了 copilot 的上市时间，因此我们为 copilot 选择了这种方法。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;99175e3c-e91c-45cc-aa82-2be9b7386c35&#34;,&#34;dropCap&#34;:false}&#34;&gt;构建-call copilot 提出了多项挑战，包括解决幻觉、保护数据源和改善用户体验。以下概述了我们如何解决每个挑战。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;e9110a7c-4bf5-454c-bb29-41de6910fdff&#34;,&#34;dropCap&#34;:false}&#34;&gt;对于幻觉，我们重点关注：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;eedf199c-34fc-47a2-8b5c-1af71d316e77&#34;,&#34;ordered&#34;:false,&#34;values&#34;:&#34; “}”类=“wp-block-list”&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;回答的准确性&lt;/strong&gt;：我们确保副驾驶能够检索到问题的相关知识，这可以防止LLM引擎生成不正确或误导性的信息&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;验证机制&lt;/strong&gt;：我们实施方法来根据权威来源验证副驾驶的响应减少产生幻觉的可能性&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;继续良好的学习&lt;/strong&gt;：我们确保副驾驶能够访问最新的数据以提高其准确性&lt;br&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;079a03e0-3175-42d9-a799-f2db1cbd69f4&#34;,&#34;dropCap&#34;:false}&#34;&gt;为了数据安全，我们仔细选择了要摄取的数据源，因为许多数据源无法在 Slack 通道中公开。&lt;br&gt;&lt;br&gt;为了提高用户体验，我们设计：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;9b32f175-7af2-4cb8-a3fd-e478d6c979b6&#34;,&#34;ordered&#34;:false,&#34;values&#34;:&#34; “}”类=“wp-block-list”&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;直观的界面&lt;/strong&gt;：我们设计了一个易于使用的界面，允许用户与副驾驶高效互动&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;反馈循环&lt;/strong&gt;：我们创建了一个系统，供用户提供有关响应的反馈不断完善副驾驶的表现&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;544fa9a3-d103-49f1-bd3f-0ea3e60a5fe7&#34;,&#34;dropCap&#34;:false}&#34;&gt;我们解决了这些问题开发我们的待命副驾驶时面临的挑战，以确保其可靠、用户友好且安全。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;8595d9fd-d250-4111-a0ae-c65a880b660f&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;775af645-d734-43db-8617-596ded3f17e1&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-deep-dive-architecture&#34;&gt;深入探讨：架构&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;e3acd865-7c12-403d-a1dd-c12e0cfd66a5&#34;,&#34;dropCap&#34;:false}&#34;&gt;让我们探索一下我们的待命副驾驶（称为 Genie）的架构。 &lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;id&#34;:1097498,&#34;sizeSlug&#34;:&#34;large&#34;,&#34;linkDestination&#34;:&#34;none&#34;,&#34;align&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;b1baea01-32a1-4ee9-ac99-52df5911b2a8&#34;,&#34;alt&#34;:&#34;&#34;}&#34;类=“aligncenter尺寸-大”&gt;&lt;img加载=“惰性”解码=“异步”宽度=“1024”高度=“443” src =“https://blog.uber-cdn.com/cdn-cgi/image/width=2160，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure3-3 -17285118456072-1024x443.png&#34; alt=&#34;&#34; class=&#34;wp-image-1097498&#34; srcset =“https://blog.uber-cdn.com/cdn-cgi/image/width=1024，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure3-3 -17285118456072.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure3-3-17285118456072。 png 300w，https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure3-3-17285118456072.png 768w， https://blog.uber-cdn.com/cdn-cgi/image/width=1536，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure3-3-17285118456072。 PNG1536w， https://blog.uber-cdn.com/cdn-cgi/image/width=2000，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure3-3-17285118456072。 png 2000w”尺寸=“（最大宽度：1024px）100vw，1024px” referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 3：待命副驾驶的架构。 &lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;18321915-dd26-4e3e-9ea7-3905b8a51726&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;418a7ac1-114d-4079-bebe-6277461f0ad5&#34;,&#34;dropCap&#34;:false}&#34;&gt;处于高位在级别上，我们抓取内部数据源，例如 Uber 的内部 wiki、Uber 的内部 Stack Overflow、工程需求文档，并使用开放 AI 从这些数据源创建向量嵌入模型。这些嵌入被存储在矢量数据库中。然后，当用户在 Slack 频道中发布问题时，问题会被转换为嵌入。该服务在向量数据库中搜索与问题相关的相关嵌入。由嵌入索引的结果被用作 LLM 获取响应的提示。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;bbbba4d6-3bfb-47db-8917-95748eba02b5&#34;​​,&#34;dropCap&#34;:false}&#34;&gt;以下步骤用于数据准备、嵌入和推送服务的工件可以概括为使用 Apache Spark&lt;sup&gt;™&lt;/sup&gt; 的 RAG 应用程序。这些一般步骤构成了 RAG 应用程序的基础。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;94026da2-9931-4e3e-852b-dcd6665156ea&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;7ccaf504-43aa-4a72-a0d6-964714​​08651e&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-etl&#34;&gt;ETL&lt;/h2&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;核心/图像&#34; data-wp-block=&#34;{&#34;id&#34;:1097500,&#34;width&#34;:&#34;521px&#34;,&#34;height&#34;:&#34;auto&#34;,&#34;aspectRatio&#34;:&#34;4\/3&#34;,&#34;scale&#34;:&#34;cover&#34;,&#34;尺寸Slug &#34;:&#34;大&#34;,&#34;linkDestination&#34;:&#34;无&#34;,&#34;对齐&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;c2dadb8f-040e-4a17-afd8-3cf88890e063&#34;,&#34;alt&#34;:&#34;&#34;}&#34;类=“aligncenter size-large is-resized”&gt;&lt;img加载=“lazy”解码=“异步”宽度=“816”高度=“1024”src=“https://blog.uber-cdn.com/cdn -cgi/image/width=2160，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure4-17285118719035-816x1024.png&#34; alt=&#34;&#34; class=&#34;wp-image-1097500&#34; style=&#34;aspect-ratio:4/3;object-fit:cover;width:521px;height:auto&#34; srcset =“https://blog.uber-cdn.com/cdn-cgi/image/width=816，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure4-17285118719035 .png 816w, https://blog.uber-cdn.com/cdn-cgi/image/width=239，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure4-17285118719035.png 239w , https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure4-17285118719035.png 768w , https://blog.uber-cdn.com/cdn-cgi/image/width=940，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure4-17285118719035.png 940w “尺寸=”（最大宽度：816px）100vw，816px“ referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 4：用于数据提取的 Spark 应用程序。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;a3677069-38fe-4d57-9b36-6ee85aeb3ea8&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;78d8d942-525e-4c13-ab8d-79d3d980353d&#34;,&#34;dropCap&#34;:false}&#34;&gt;图 4 显示自定义 Spark 应用程序，其中包含将数据提取到矢量数据库的步骤。 Spark 应用程序使用 Spark 执行器运行这些步骤。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;2e768fa5-c1b6-4c6a-ba46-d642732c1be9&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-data-prep&#34;&gt;&lt;br&gt;数据准备&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;a5923920-e1e5-4281-8a97-4821b2ae661f&#34;,&#34;dropCap&#34;:false}&#34;&gt;Spark 应用使用 Uber 的内部 wiki（称为 Engwiki 或 Uber Stack Overflow API）从相应的数据源获取内容。 Spark 数据帧从此数据准备阶段输出。该架构的一列中包含 Engwiki 链接，另一列中包含 Engwiki 内容，两者均采用字符串格式。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;id&#34;:1097502,&#34;sizeSlug&#34;:&#34;large&#34;,&#34;linkDestination&#34;:&#34;none&#34;,&#34;align&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;abbd21e9-5275-4ac1-8273-11af89807749&#34;,&#34;alt&#34;:&#34;&#34;}&#34;类=“aligncenter尺寸-大”&gt;&lt;img加载=“惰性”解码=“异步”宽度=“1024”高度=“220” src =“https://blog.uber-cdn.com/cdn-cgi/image/width=2160，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure5-17285119354055 -1024x220.png&#34; alt=&#34;&#34; 类=&#34;wp-image-1097502&#34; srcset =“https://blog.uber-cdn.com/cdn-cgi/image/width=1024，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure5-17285119354055 .png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure5-17285119354055.png 300w，https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure5-17285119354055。 PNG768w， https://blog.uber-cdn.com/cdn-cgi/image/width=1284，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure5-17285119354055.png 1284w “尺寸=”（最大宽度：1024px）100vw，1024px“ referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 5：来自 Engwiki 数据源的 Spark 数据框的列。 &lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;d307d345-ce2b-4274-af28-d2713e6f8005&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;a0213e51-4c9b-4bea-9c22-fde19d3849ff&#34;,&#34;dropCap&#34;:false}&#34;&gt;图 5 显示Spark 数据框的列，以 Uber 的内部 wiki 作为原始数据源。它具有源 URL、内容和存储元数据的其他列。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;900833c0-b219-4f9b-bf03-a6c037e70413&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-embedding- Generation&#34;&gt;&lt;br&gt;嵌入生成&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;fa364112-7193-470a-ae5d-1120d6bd5e94&#34;,&#34;dropCap&#34;:false}&#34;&gt;一旦数据被抓取后，使用 OpenAI 嵌入模型创建嵌入，并将其推送到 Uber 的 blob 存储 Terrablob。创建的嵌入只能通过与 Engwiki 空间相关的特定 Slack 通道访问。输出格式是一个数据帧，其中分块内容的模式映射到该块的相应向量。 Uber 的内部 wiki 内容使用 langchain 进行分块，并通过 OpenAI 和 PySpark UDF 生成嵌入。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;95723f82-760a-4697-ac97-71700d164769&#34;,&#34;alt&#34; :&#34;&#34;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img 解码=&#34;async&#34; src =“https://lh7-rt.googleusercontent.com/docsz/AD_4nXf4DX2PBW9iHR6npUbfBZlpuNq7pEZ9stydlXT94UlJNgeLsPs3n6gwe1rcsSDFC WKDKYiQ9JS1NNt6wPCkjbmB3K4NrFXd5Ql16Y8Fmdf3OkPwPcl7yppTkl7DznlJnWAbxu6bswf3dhwIukjV--SLHag?key=Cul8rOkHqArI5wi0MdurWQ&#34; alt=&#34;&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 6：具有向量嵌入的 Spark 数据帧的列。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;df3248a1-b648-4a1e-8d38-14ddc846a9a5&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;d26434ed-fb67-4781-969b-18478fa7b608&#34;,&#34;dropCap&#34;:false}&#34;&gt;图 6 显示Spark 数据框的列，以 Uber 的内部 wiki 作为原始数据源。它具有源 URL、内容、分块内容和该特定块的嵌入。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;a42e77cd-a2e6-490f-b6f1-500a195f2d66&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;8422f718-6035-4458-b9d6-d150217f2714&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-pusher&#34;&gt;推动者&lt;/h2&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;id&#34;:1097505,&#34;sizeSlug&#34;:&#34;large&#34;,&#34;linkDestination&#34;:&#34;none&#34;,&#34;align&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;15bc5c0c-6300-4e90-9ff1-4000afc37ea7&#34;,&#34;alt&#34;:&#34;&#34;}&#34;类=“aligncenter尺寸-大”&gt;&lt;img加载=“惰性”解码=“异步”宽度=“1024”高度=“456” src =“https://blog.uber-cdn.com/cdn-cgi/image/width=2160，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure7-17285121216461 -1024x456.png&#34; alt=&#34;&#34; 类=&#34;wp-image-1097505&#34; srcset =“https://blog.uber-cdn.com/cdn-cgi/image/width=1024，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure7-17285121216461 .png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure7-17285121216461.png 300w , https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure7-17285121216461.png 768w , https://blog.uber-cdn.com/cdn-cgi/image/width=1399，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure7-17285121216461.png 1399w “尺寸=”（最大宽度：1024px）100vw，1024px“ referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 7：被推送到 Terrablob 的向量流。 &lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;925589cc-cfb6-42c4-85ae-50b997c1f75b&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;96764c30-7e39-416f-8a35-8b6bfd29b4a9&#34;,&#34;dropCap&#34;:false}&#34;&gt;图 7 显示如何将向量推送到 Terrablob。触发引导作业将数据从数据源提取到 Uber 的内部矢量数据库解决方案 Sia。然后，触发两个 Spark 作业来构建索引、合并数据并将数据摄取到 Terrablob。每个叶子都会同步并下载存储在 Terrablob 中的基本索引和快照。在检索过程中，查询会直接发送到每个叶子。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;c83baa9b-0da1-4226-8912-f3918309b9e0&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;e55d7c63-e2d6-4f4d-90d8-4db67d0d800e&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -块标题”id=&#34;h-knowledge-service&#34;&gt;知识服务&lt;/h2&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;id&#34;:1097508,&#34;sizeSlug&#34;:&#34;large&#34;,&#34;linkDestination&#34;:&#34;none&#34;,&#34;align&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;d1952dd4-d236-42e5-a1f1-49eda9714865&#34;,&#34;alt&#34;:&#34;&#34;}&#34;类=“aligncenter尺寸-大”&gt;&lt;img加载=“惰性”解码=“异步”宽度=“1024”高度=“533” src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure8-17285122683730 -1024x533.png&#34; alt=&#34;&#34; 类=&#34;wp-image-1097508&#34; srcset =“https://blog.uber-cdn.com/cdn-cgi/image/width=1024，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure8-17285122683730 .png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300,quality=80,onerror=redirect,format=auto/wp-content/uploads/2024/10/figure8-17285122683730.png 300w , https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure8-17285122683730.png 768w , https://blog.uber-cdn.com/cdn-cgi/image/width=1536，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure8-17285122683730.png 1536w , https://blog.uber-cdn.com/cdn-cgi/image/width=1819，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure8-17285122683730.png 1819w “尺寸=”（最大宽度：1024px）100vw，1024px“ referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 8：后端知识服务的流程。 &lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;d51d2f61-620b-497b-90b3-33159c9b573f&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;1aa84d55-9c15-4da0-9464-3f72e7a637a2&#34;,&#34;dropCap&#34;:false}&#34;&gt;精灵有一个称为知识服务的后端服务，它通过首先将传入查询转换为嵌入然后获取最相关的块来为所有传入查询提供传入请求来自矢量数据库。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;00b12d8a-403b-41d0-ad77-0eb9d5db4039&#34;,&#34;opacity&#34;:&#34;alpha 通道&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;bfd1c1c7-ff26-495a-aab2-a536972d1288&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-cost-tracking&#34;&gt;成本跟踪&lt;/h2&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;核心/图像&#34; data-wp-block=&#34;{&#34;id&#34;:1097510,&#34;sizeSlug&#34;:&#34;大&#34;,&#34;linkDestination&#34;:&#34;无&#34;,&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;f3d3a3dd-1430-4e46-9139 -6906e12b17b6&#34;,&#34;alt&#34;:&#34;&#34;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img加载=“惰性”解码=“as”同步”宽度=“1024”高度=“466”src=“https://blog.uber-cdn.com/cdn-cgi/image/width=2160,quality=80,onerror=redirect,format=auto/wp -content/uploads/2024/10/figure9-17285128268595-1024x466.png&#34; alt=&#34;&#34;类=“wp-image-1097510”srcset=“https://blog.uber-cdn.com/cdn-cgi/image/width=1024，quality=80，onerror=redirect，format=auto/wp-content/上传/2024/10/figure9-17285128268595.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure9-17285128268595.png 300w , https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure9-17285128268595.png 768w , https://blog.uber-cdn.com/cdn-cgi/image/width=1536，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure9-17285128268595.png 1536w , https://blog.uber-cdn.com/cdn-cgi/image/width=1538，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure9-17285128268595.png 1538w “尺寸=”（最大宽度：1024px）100vw，1024px“ referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 9：Genie 成本跟踪流程。 &lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;ff527243-716c-489e-b627-22d696350692&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;1fc50b8e-0cdf-4138-a8e2-314b72818355&#34;,&#34;dropCap&#34;:false}&#34;&gt;用于费用跟踪，当 Slack 客户端或其他平台调用 Knowledge Service 时，会将 UUID 传递给 Knowledge Service，Knowledge Service 又将 UUID 通过上下文标头传递给米开朗基罗网关。 Michelangelo Gateway 是 LLM 的直通服务，因此可以将其添加到用于通过该 UUID 跟踪成本的审核日志中。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;43875a90-77f2-4acc-ac34-df25281d3e51&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;8fa72504-db7a-4ece-80ef-7e3714b0189a&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-genie-performance-evaluation&#34;&gt;精灵性能评估&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;a453e184-134d-423e-987f-5c2c51383195&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-metrics-framework&#34;&gt;指标框架&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;1515629e-7d00-4f78-936c-9553ed1f6cbe&#34;,&#34;dropCap&#34;:false}&#34;&gt;用户可以提供单击 Genie 回复中的相关按钮即可立即在 Slack 中反馈。我们为用户提供了以下选项：  &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;32dde48a-387a-4bae-a2b3-9d0525d3826c&#34;,&#34;ordered&#34;:false,&#34;values&#34;:&#34; “}”cl屁股=“wp-block-list”&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;已解决&lt;/strong&gt;：答案完全解决了问题&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;帮助&lt;/strong&gt;l：答案部分有帮助，但用户需要更多帮助&lt; /里&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;没有帮助&lt;/strong&gt;：响应错误或不相关&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;不相关&lt;/strong&gt;：用户需要值班人员的帮助，而 Genie 不能不提供协助（例如代码审查）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;核心/图像&#34; data-wp-block=&#34;{&#34;id&#34;:1097512,&#34;sizeSlug&#34;:&#34;大&#34;,&#34;linkDestination&#34;:&#34;无&#34;,&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;03c44d96-15a9-4c38-b363 -e4a2706e8fbc&#34;,&#34;alt&#34;:&#34;&#34;}&#34; class=&#34;aligncenter size-large&#34;&gt;&lt;img加载=“惰性”解码=“异步”宽度=“1024”高度=“116”src=“https://blog.uber-cdn.com/cdn-cgi/image/width=2160，质量= 80，onerror =重定向，格式=自动/wp-content/uploads/2024/10/figure-10-17285128486660-1024x116.png&#34; alt=&#34;&#34; class=&#34;wp-image-1097512&#34; srcset=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/ wp-content/uploads/2024/10/figure-10-17285128486660.png 1024w， https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-10-17285128486660。 300w.png, https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-10-17285128486660。 PNG768w， https://blog.uber-cdn.com/cdn-cgi/image/width=1536，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-10-17285128486660。 PNG1536w， https://blog.uber-cdn.com/cdn-cgi/image/width=2048，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-10-17285128486660。 PNG2048w， https://blog.uber-cdn.com/cdn-cgi/image/width=2139，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-10-17285128486660。 png 2139w”尺寸=“（最大宽度：1024px）100vw，1024px” referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 10：Genie 的用户反馈流程。 &lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;1a39fc28-3c28-4116-9f55-6d19ae315c90&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;857e39a6-853d-4547-9869-e92e41699b5c&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;br&gt;当用户留下反馈时，Slack 插件会拾取反馈并使用特定的 Kafka 主题将指标流式传输到 Hive 表中，其中包含反馈和所有相关信息元数据。我们稍后会在仪表板中可视化这些指标。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;核心/标题&#34; data-wp-block=&#34;{&#34;level&#34;:3,&amp;quot;hash&#34;:&#34;979e8cb5-13b2-4bfa-bdeb-9fee00e198ee&#34;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-performance-evaluation&#34;&gt;&lt;br&gt;性能评估&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;5a818e05-9a10-4b1b-af8b-d87178bcd50a&#34;,&#34;dropCap&#34;:false}&#34;&gt;我们提供精灵用户可以选择运行自定义评估。他们可以评估幻觉、回答相关性或他们认为对其用例重要的任何其他指标。此评估可用于更好地调整所有相关 RAG 组件（检索和生成）。&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;id&#34;:1097514,&#34;sizeSlug&#34;:&#34;large&#34;,&#34;linkDestination&#34;:&#34;none&#34;,&#34;align&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;3f2db8f8-1c88-400c-bc43-cafba48a1524&#34;,&#34;alt&#34;:&#34;&#34;}&#34;类=“aligncenter尺寸-大”&gt;&lt;img加载=“惰性”解码=“异步”宽度=“1024”高度=“474” src =“https://blog.uber-cdn.com/cdn-cgi/image/width=2160，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-11 -17285128734740-1024x474.png&#34; alt=&#34;&#34; class=&#34;wp-image-1097514&#34; srcset =“https://blog.uber-cdn.com/cdn-cgi/image/width=1024，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-11 -17285128734740.png 1024w, https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-11-17285128734740。 300w.png, https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-11-17285128734740。 PNG768w， https://blog.uber-cdn.com/cdn-cgi/image/width=1536，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-11-17285128734740。 PNG1536w， https://blog.uber-cdn.com/cdn-cgi/image/width=2048，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-11-17285128734740。 png 2048w”尺寸=“（最大宽度：1024px）100vw，1024px” referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 11：绩效评估流程。 &lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;8c2a3927-19b6-4db3-9707-b4e7387f4bb8&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;bb9431c5-4a78-4afc-a264-ede6c44f7ac0&#34;,&#34;dropCap&#34;:false}&#34;&gt;图 11 显示评估过程，这是一个单独的 ETL 管道，使用已构建的 Michelangelo 组件。 Genie 的上下文和响应是从 Hive 检索的，并在任何其他相关日期加入，例如 Slack 元数据和用户反馈。它被处理并传递给评估器。评估者获取指定的提示并作为法官运行 LLM。指定的指标将被提取并包含在评估报告中，用户可以在 UI 中使用该报告。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;核心/头ing&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;e2225358-ed38-49c8-9016-00b050230665&#34;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-document-evaluation &#34;&gt;&lt;br&gt;文件评估&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;476397f2-a2f6-40aa-a21b-56cd9fdf3670&#34;,&#34;dropCap&#34;:false}&#34;&gt;精准信息检索取决于源文件的清晰度和准确性。如果文档本身的质量很差，那么无论LLM表现得多么好，也不可能有好的表现。因此，评估文档并提出可行建议以提高文档质量的能力对于高效且有效的 RAG 系统至关重要。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;86fb2e66-3a6d-44b4-a503-4df31f230238&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;核心/图像&#34; data-wp-block=&#34;{&#34;id&#34;:1097516,&#34;sizeSlug&#34;:&#34;full&#34;,&#34;linkDestination&#34;:&#34;无&#34;,&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;df6c991d-50fe-4b9f-a1d5 -8d1ffa31c15a&#34;,&#34;alt&#34;:&#34;&#34;}&#34; class=&#34;aligncenter size-full&#34;&gt;&lt;img加载=“惰性”解码=“异步”宽度=“800”高度=“600”src=“https://blog.uber-cdn.com/cdn-cgi/image/width=2160，质量= 80，onerror =重定向，格式=自动/wp-content/uploads/2024/10/figure-12-17285129625698.png&#34; alt=&#34;&#34;类=“wp-image-1097516”srcset=“https://blog.uber-cdn.com/cdn-cgi/image/width=800,quality=80,onerror=redirect,format=auto/wp-content/上传/2024/10/figure-12-17285129625698.png 800w, https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-12-17285129625698。 300w.png, https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-12-17285129625698。 png 768w”尺寸=“（最大宽度：800px）100vw，800px” referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 12：文档评估应用程序的工作流程。 &lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;7fd0361d-27f8-4ec0-9c68-2afdcd6caf0b&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;749bc0f6-cb3e-43dc-821d-4646be34267c&#34;,&#34;dropCap&#34;:false}&#34;&gt;图 12 显示文档评估应用程序的工作流程。抓取数据后，知识库中的文档将转换为 Spark 数据帧。数据框中的每一行代表知识库中的一个文档。然后调用LLM作为评委进行评估。在这里，我们为 LLM 提供自定义评估提示。法学硕士返回评估分数，以及分数的解释和有关如何提高每个文档质量的可行建议。所有这些指标都作为n 评估报告，用户可以在 Michelangelo UI 中访问该报告。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;06cc4f29-732c-4eab-9eb4-0e8fd386b55b&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;6ad29c63-bdbd-40fd-852c-20b68861cf10&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-solutions-to-challenges&#34;&gt;挑战的解决方案&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;1d2a3a6f-deb7-490c-be46-055790382f2d&#34;,&#34;dropCap&#34;:false}&#34;&gt;减少幻觉&lt;strong&gt;，&lt;/strong&gt;我们更改了向 LLM 发送从向量数据库获得的提示的方式。我们为从矢量数据库获得的所有结果明确添加了一个称为子上下文的部分以及该子上下文的源 URL。我们要求法学硕士仅从所提供的各种子上下文中给出答案，并返回源网址以引用答案。这旨在为其返回的每个答案提供源 URL。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;0427a52a-b8be-4769-87d4-dbe168c385df&#34;,&#34;dropCap&#34;:false}&#34;&gt;为了确保我们不要将我们在 Open AI 或 Slack 上创建嵌入的数据源泄露给可能无法访问敏感数据源的人员，我们大多数 Uber 工程师都可以广泛使用的预先策划的数据源，并且只允许使用这些数据源来生成嵌入。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;3614a771-313c-4df7-ae34-d854bd369dad&#34;,&#34;dropCap&#34;:false}&#34;&gt;最大化 Genie为了提高回答问题的潜力，我们开发了一种新的交互模式。这种模式可以让用户更方便地提出后续问题，并鼓励他们更仔细地阅读Genie的答案。如果 Genie 无法回答他们的问题，用户可以轻松地将问题升级为待命支持。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;22c66eba-4b1d-4f55-8a61-8bfb697e9f4e&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;id&#34;:1097518,&#34;sizeSlug&#34;:&#34;large&#34;,&#34;linkDestination&#34;:&#34;none&#34;,&#34;align&#34;:&#34;中心&#34;,&#34;哈希&#34;:&#34;44f606b1-fecc-453b-95d9-59fb126fb25d&#34;,&#34;alt&#34;:&#34;&#34;}&#34;类=“aligncenter尺寸-大”&gt;&lt;img加载=“惰性”解码=“异步”宽度=“1024”高度=“391” src =“https://blog.uber-cdn.com/cdn-cgi/image/width=2160，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-13 -17285130008667-1024x391.png&#34; alt=&#34;&#34; class=&#34;wp-image-1097518&#34; srcset =“https://blog.uber-cdn.com/cdn-cgi/image/width=1024，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-13-17285130008667.png 1024w，https://blog.uber-cdn.com/cdn-cgi/image/width=300，quality=80，onerror=redirect，format=auto/wp-content/uploads/ 2024/10/figure-13-17285130008667.png 300w, https://blog.uber-cdn.com/cdn-cgi/image/width=768，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-13-17285130008667。 PNG768w， https://blog.uber-cdn.com/cdn-cgi/image/width=1536，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-13-17285130008667。 PNG1536w， https://blog.uber-cdn.com/cdn-cgi/image/width=2048，quality=80，onerror=redirect，format=auto/wp-content/uploads/2024/10/figure-13-17285130008667。 png 2048w”尺寸=“（最大宽度：1024px）100vw，1024px” referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 13：Genie 如何响应用户问题的流程。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;22c66eba-4b1d-4f55-8a61-8bfb697e9f4e&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;bc41c3aa-eac1-46b6-936d-7a1e67af4ea1&#34;,&#34;dropCap&#34;:false}&#34;&gt;在新的交互模式，当用户提出问题时，Genie 将回答并提供下一步操作按钮。使用这些按钮，用户可以轻松提出后续问题、将问题标记为已解决或联系人工支持。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;79f5346a-c345-4c2c-88c8-6f935ed481b8&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;d70fa89b-a6e4-4e10-95d3-38e538b6c409&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-results&#34;&gt;结果&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;ca43db45-05d5-415d-ad84-a7e0796db4f1&#34;,&#34;dropCap&#34;:false}&#34;&gt;自发布以来到 2023 年 9 月，Genie 已将其影响力扩展到 &lt;em&gt;154 个 Slack 频道&lt;/em&gt;，并已回复超过 &lt;em&gt;70,000 个问题&lt;/em&gt;。 Genie 拥有 &lt;em&gt;48.9% 的帮助率&lt;/em&gt;，展示了其不断增长的有效性。我们估计，自推出以来，它已为我们节省了&lt;em&gt;13,000 个工程时间&lt;/em&gt;。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;e73c09e1-274a-42a5-92e9-adb69b58474a&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;b132ac5a-370a-4354-852c-bf77d294ef71&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-future&#34;&gt;未来&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;8d1b8f31-767c-4c6d-8966-374e09f1fe7f&#34;,&#34;dropCap&#34;:false}&#34;&gt;精灵是一个尖端的 Slack 机器人，旨在简化待命管理、优化事件响应并提高团队协作流产。 Genie 的开发重点是简单性和有效性，它作为一个全面的助手，使工程团队能够无缝地处理随叫随到的职责。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;01426ba8-3693-43a5-83f5-446a0e1d3e48&#34;,&#34;dropCap&#34;:false}&#34;&gt;此-呼叫助理副驾驶可以改变任何平台的用户和值班工程师在各自平台的 Slack 通道中交互和参与的整体体验。它还可以改变每个产品内的体验，例如 Michelangelo 或 IDE，用户可以在产品或特定于产品的 Slack 渠道中找到特定于产品的帮助，而无需等待随叫随到的帮助。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;9a0acdb7-601d-4d57-ac93-00495e498efb&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:1,&#34;hash&#34;:&#34;4890f555-add4-4b02-9966-a448c71b2d81&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-conclusion&#34;&gt;结论&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;157fe169-dc52-4ed0-b048-bb834225462a&#34;,&#34;dropCap&#34;:false}&#34;&gt;精灵，待命助理副驾驶彻底改变了工程团队管理待命职责的方式。通过促进自动解决并提供富有洞察力的分析，Genie 使团队能够高效且有效地处理随叫随到的职责。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;a7436f34-ba56-435b-a0d6-089c152bc929&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;7063b9e6-3aba-4ab9-a7e6-6978598c2c6e&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-acknowledgements&#34;&gt;致谢&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;59559f57-4e2e-4e69-af78-260327769ca4&#34;,&#34;dropCap&#34;:false}&#34;&gt;滚动-如果没有许多团队成员的贡献，这位值班副驾驶的成功是不可能发生的。非常感谢 Uber 米开朗基罗团队的工作人员。我们还感谢其他 Uber 团队的合作伙伴使这一想法成为现实。&lt;br&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;fontSize&#34;:&#34;小&#34;,&#34;hash&#34;:&#34;2c90521c-3176-44ec-ad7d-d89cc4be2729&#34;,&#34;dropCap&#34; :false}&#34; class=&#34;has-small-font-size&#34;&gt;Slack&lt;sup&gt;®&lt;/sup&gt; 是 Slack 的注册商标和服务标志Technologies, Inc.Apache&lt;sup&gt;®&lt;/sup&gt;、Apache Spark&lt;sup&gt;™&lt;/sup&gt; 和 Spark&lt;sup&gt;™&lt;/sup&gt; 是 Apache Software Foundation 在美国的注册商标或商标和/或其他国家。没有认可使用这些标记暗示 Apache 软件基金会。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;fontSize&#34;:&#34;小&#34;,&#34;hash&#34;:&#34;2c90521c-3176-44ec-ad7d-d89cc4be2729&#34;,&#34;dropCap&#34; :false}&#34; class=&#34;has-small-font-size&#34;&gt;标题图像属性：该图像由生成式 AI 工具生成。&lt;/p&gt;</description>
      <pubDate>Thu, 10 Oct 2024 05:00:00 +0000</pubDate>
    </item>
    <item>
      <title>【Making Uber’s ExperimentEvaluation Engine 100x Faster】让 Uber 的实验评估引擎速度提高 100 倍</title>
      <link>https://www.uber.com/blog/making-ubers-experiment-evaluation-engine-100x-faster/</link>
      <description>【&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:1,&amp;quot;hash&amp;quot;:&amp;quot;d64b6745-f796-4cb8-872e-6ae0157f15d7&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f3c10d4f-01d7-4aec-9f1f-7b770ab21fc8&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;This blog post describes how we made efficiency improvements to Uber’s Experimentation platform to reduce the latencies of experiment evaluations by a factor of 100x (milliseconds to microseconds). We accomplished this by going from a remote evaluation architecture (client to server RPC requests) to a local evaluation architecture (client-side computation). Some of the terminology in this blog post (e.g., parameters, experiments, etc.) is referenced from our previous blog post on Uber Experimentation. To learn more, check out &lt;a href=&#34;https://www.uber.com/blog/supercharging-a-b-testing-at-uber/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Supercharging A/B Testing at Uber&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ac4c1504-882c-4649-933c-fa6b5b8b1afc&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Experimentation is used heavily throughout Uber’s backend microservices, mobile apps, and web surfaces to measure improvements of product launches across all business units–Delivery, Mobility, Freight, Uber For Business (U4B), etc. We will cover the current and new architecture of the system as well as technical challenges, and learnings. This blog post specifically focuses on latency improvements to &lt;strong&gt;backend&lt;/strong&gt; Golang microservices rather than mobile or web-based experimentation. We are also focusing on A/B tests rather than other experimentation designs.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;8db03731-b49f-4b16-b029-f3c0c476f829&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;50bc6c10-54b3-4842-8202-209b25f285cc&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-background&#34;&gt;Background&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a5e74f0b-28b2-41cf-bfc3-8d915ee23d65&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In 2020, Uber began a long journey to rewrite the A/B testing platform (internally referred to as Project Citrus). One of the key architectural decisions for this new system was to unify Uber’s existing backend configuration platform, &lt;a href=&#34;https://www.uber.com/blog/flipr/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Flipr&lt;/a&gt;, with the Experimentation platform. We built Experimentation to exist as a temporary override layer on top of Flipr configurations (also referred to as parameters)&lt;strong&gt; &lt;/strong&gt;in order to perform randomization, conduct causal inference, and help teams determine the best performing value to use for their parameters.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;fc14f607-ac7b-4402-aaab-d17095a1697e&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Below is an example to illustrate the difference between a parameter and an experiment. Here we have a &lt;strong&gt;parameter&lt;/strong&gt;, which controls the button color of a specific screen in the Rider app. The default value is red, but in some situations (e.g., if the user is in &lt;em&gt;city_id = 1&lt;/em&gt;) the value would be blue for &lt;em&gt;all users&lt;/em&gt; in that city.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;b2b71d62-7a60-47d0-b089-cf5005aac389&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;7707510c-e913-4343-9940-4277b2619ab0&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXcCn3OE-lw_syq4RP3ju2DpQ0D1xl16leZdP_eDI5i8anem_mVIFYBvXrlIXwFhe_3-0eUrXFomadWp52ObiNyxP9uzsxIDoFFz-z4Yn7xmlpVZ6YXqP5YQPCamrzUemoEyFfU13XDYaM3CFDtSgpCIsMab?key=MWSPikVkL_FOThWVVOyYBw&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 1: Parameter representation.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;96551fce-9bac-46a9-a7f6-1a31edb0ca3b&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e083eb58-1309-410f-a1e2-66e77997f412&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;These parameter rules engines are evaluated using a Flipr client:&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;2c2f8923-a7ad-47b7-8f66-cb3d159a6e78&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXcc7pse1Iyq0IKcOY4i8gl6_jnxlu6rD8oWL_i9wXvyYplJtZdR8whcpSTMiaOv-R5iGp_5cxF3olsqFcCKZ7YRaWqr0rMSef2R2WTq9NRWgl9fU-ukIR83Tl31VzwExH7x5SLe2NG2YkLXTa3ZYqWSrHQs?key=MWSPikVkL_FOThWVVOyYBw&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 2: Flipr client parameter evaluation.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6ab1ea4c-fe8c-4749-8670-d82d3312f7c9&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;b73e9c72-55bd-4de3-b9bd-1bc5f54e2187&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The calls to the &lt;strong&gt;get&lt;/strong&gt; method return different parameter values based on the runtime arguments passed in (e.g.,&lt;em&gt; city_id&lt;/em&gt;, &lt;em&gt;user_id&lt;/em&gt;, &lt;em&gt;app_version&lt;/em&gt;, etc.).&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;940a53cb-bbe3-459f-be5b-41a1fa8635c7&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;An &lt;strong&gt;experiment&lt;/strong&gt; allows us to randomize the behavior of the parameter for some unit of measurement (e.g., users, sessions, devices, or trips). While an experiment is active, the parameter has additional &lt;strong&gt;parameter metadata&lt;/strong&gt;, noting down the associated experiment that would override the behavior of the parameter. When the experiment is concluded, this metadata is removed.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;b49aafcb-1c4c-40ea-8930-4f58126234f1&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;ecc0933e-c3ca-4036-b013-db0cc0c0adaa&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXexjiP3-po3l3ihs_fQd3guWL5DTCZIvUQ772FVqMyctGFS63DhRvCHKsa42Y4IRoRFVvjrFSi-sBaj4WT8AzkaGF-WHVkbGIvETqmFw-cRmWFNcTyONLV1AdAYj6qRoS1h_7_zWrui0c12CCfToHX514IZ?key=MWSPikVkL_FOThWVVOyYBw&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 3: Parameter metadata representation.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f1193605-535c-4c70-9563-e1aaf3f89757&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e8ca6b41-3c1c-464b-a349-899fb7e7fcd8&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In the below example, 2 different users in &lt;em&gt;city_id = 1&lt;/em&gt; could get 2 different values of a button color based on which &lt;strong&gt;treatment group&lt;/strong&gt; they belong to in the experiment (the below A/B test is set up as 50% treatment and 50% control and is randomized by &lt;em&gt;user_id&lt;/em&gt;).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d15399a5-c8ee-4cac-8c9d-c99b9ab591b9&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;937986bc-64db-4d52-a6d7-32f9dd1d7f6a&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXdHmTE23QiXnNEgxYPnx68cAEN8Hzl3NP88Fs8vJsUpajG6berW6mTMScplnEc7VPxfd0nAVIIoRHZxkW82a5vZTVbw1kVKlBtDRxy7P2meDrb1CfveKOv5rRbX8L7Ztq4HAoeXXCLkOoztJBNhDCC4ZxnL?key=MWSPikVkL_FOThWVVOyYBw&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 4: Experiment and experiment metadata representations.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;36504ba8-03a6-4c23-9c55-183d16794848&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;42fede90-4b58-403d-933b-b753ebc5d5e2&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The &lt;strong&gt;experiment&lt;/strong&gt; and &lt;strong&gt;experiment metadata&lt;/strong&gt; are read by the Flipr client and the return value of any parameters impacted by the experiment will vary based on the experiment randomization (e.g., &lt;em&gt;user_id = 123&lt;/em&gt; may get blue because they are part of the control group, while &lt;em&gt;user_id = 456&lt;/em&gt; would get the value green):&lt;br&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;52345ac8-1e9b-4d86-8478-06ee41a7948e&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;ce15ddb4-a0f2-4f3f-93ac-ef97e39d89fe&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXcpoEA_nfVd7LsWMyhG3bziMUdl4ITrlKuwOtg9-K5aTcXjrE-0wFCBDJe2Z6vFrZ3P-6mZsucF4Q8WrR41jm2TY0yWAJqs6U1oKeAoe53vx9ve95P9WITM_EgX77UIxLXKyhCUNj_ZwgS9hhFDCeH5o18?key=MWSPikVkL_FOThWVVOyYBw&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 5: Flipr client parameter evaluation with experiment override.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;dcadd599-ede1-4988-9f5e-43b259d9738c&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f969ee60-3503-4da6-afd6-e8542ee55b8a&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We log the exposure of users to experiments so that we can measure the impact that these changes have on key business outcomes, such as completed trips or gross bookings.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d65583f0-bd34-4a63-a299-3e1fb6807568&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c48b0622-aecd-423c-be13-474c76ae16b6&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-problem-statement&#34;&gt;Problem Statement&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6310153c-1cd3-47e0-9c90-7606539284fe&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Historically, all experiment evaluations happened through network calls to a centralized microservice, whereas evaluation of parameters with no active experiments happened locally (referred to as “local evaluation”). As part of project Citrus, we kept a pattern where all backend microservices made RPCs to a central service to evaluate active experiments. This approach allowed us to ship the new platform relatively quickly and it reduced migration cost for our customers to adopt the new platform. All of our clients (backend systems, mobile devices, and web services) adopted the new platform by making RPC calls to the new evaluation service (internally referred to as &lt;strong&gt;Parameter Service&lt;/strong&gt;).&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0e39eb67-e7b6-4544-b5e6-cd0e09994579&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;040d5459-23bf-4773-9821-b0bedffb41ce&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXfgi_tto5GyZSqw-RsesbyPBH2Z9YCFlvmsRI7ZSyHqC9NiZ8W_qgxgcktI7Hp4DxV2jk2pd6gREQLrlHYj-2XM13BoqE2i-eMYe-OoxJUgM3yQg5xz7cfZZehnyr2cu3NKQFZidRPn735nN9xvj0K0doo?key=MWSPikVkL_FOThWVVOyYBw&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 6: Parameter Service Architecture (RPC evaluation).&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;eb7ea424-ecc9-42fb-a03b-087856d826d8&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;aabc8519-d3b2-450e-a7b7-ed893eff3615&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;br&gt;However, this pattern also left several problems unaddressed for backend callers of experimentation, that we wanted to solve as part of our experimentation platform rewrite.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f6745bde-0355-48de-848c-1f9869dc7691&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Latency&lt;/strong&gt;: RPC based evaluations are relatively slow (p99 latency of ~10 ms). Given the real-time nature of the Uber marketplace, there are many applications that needed their experiments to be evaluated faster in order to onboard to the new platform.&lt;br&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Reliability&lt;/strong&gt;: The parameter service became a single point of failure. To mitigate this concern, we invested heavily in the reliability of parameter service, eventually maintaining an availability SLA of 99.95% for each of its endpoints. We also encouraged teams to rely on a fallback value in case of RPC failure. However, given the scale of the system and the fact that hundreds of teams and microservices call parameter service to evaluate thousands of parameters and experiments at any given time, the behavior of every fallback could not be guaranteed. Occasionally, the fallback value would become unsafe, resulting in outages that would then need to be promptly fixed.&lt;br&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Developer Productivity&lt;/strong&gt;: In order to reduce the number of requests to parameter service, we introduced a prefetch mechanism. As part of this mechanism, a backend service would send a batch RPC request to parameter service to evaluate and return &lt;strong&gt;all&lt;/strong&gt; of the parameters under active experimentation needed to process business logic for that specific request. The experiment values and exposure logs returned from the parameter service would be stored in the local in-memory cache of the backend service.&amp;nbsp;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;The backend app would then &lt;strong&gt;get &lt;/strong&gt;the value of each individual parameter needed in that request (which was impacted by an experiment) exactly when it was needed, and this is the point at which we would emit an exposure log for the user entering the experiment.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a4427471-3ff1-4905-96a9-91dc1d65829d&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;While this batching helped reduce the total number of RPC calls, it also meant that backend developers needed to be cognizant of the prefetch mechanism while coding their application. They would need to plan for which parameters to prefetch upfront so that these parameter values would be available later. A failure to do so would result in unexpected bugs that would then need to be debugged and fixed, resulting in inefficiency.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;015fdac7-4719-46b9-a1a3-2ea244c3b0a0&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;d887cb33-7e66-4dd0-a4b3-ac2d087b1233&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXfDVtfii-J4qcPg2YJtWSkXfvWDWv-KTwuM72AULRUI3zxzma2dj2vPfvaMSzugIOKLQsoKsg5TQLmva-uAEPUDcTuwJ2bDjZRCviyCOlFY58-llmflatbDIxCJ0heqp3C5C3UqF7X7zttrx8fl-G0q1HA?key=MWSPikVkL_FOThWVVOyYBw&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 7: Initial Architecture: Prefetch parameters mechanism.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7b0ea81f-c7eb-45ff-9531-316815e29e09&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;5033feb0-daf7-44d6-a24f-5e4fb50e46ce&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We believed that all of these concerns could be addressed by a new architecture involving client-side evaluation of experiments (and parameters) without any RPC requests to the parameter service.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;934b57ef-115b-4707-be3e-e2665432395b&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;445e90ae-10ba-4ffa-9353-5dba81b4f6a6&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-architecture&#34;&gt;Architecture&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;55e76b60-4589-41d2-becd-ed057a9a1bb1&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Uber’s existing architecture involved a distribution mechanism where Flipr parameters were sent to all host agents at Uber (&lt;a href=&#34;https://www.uber.com/blog/how-we-unified-configuration-distribution-across-systems-at-uber/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;see previous eng blog for more details&lt;/a&gt;). Each microservice running on such host machines would rely on the Flipr client to periodically bootstrap these parameter rules engines by reading from file caches which results in a much higher availability than online RPC architecture.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2f5c86e6-e578-4ab8-a75e-dae062dcdb43&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;b088ac78-b735-4c9d-88d2-e3ff47ecc8fd&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXd3OYBBowDH_C3r1DhN2tu-fEtjHEzLZv_vRtEsIBtk6G0NUszEUquFnpCt5gtTVc4dK1JB_qVY4cKJ7F8LzP-wRac-Hsq-EsKBANHoSrqECWjOuwotA77-5jTT0R7GJo46YKflS3j-dFkmh2mHQ6AZgG4z?key=MWSPikVkL_FOThWVVOyYBw&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 8: Parameter host agent distribution.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d1f41a6a-5b70-44d2-b665-a0ca62124f06&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;4a048935-c4fa-4b94-96b6-eac2134b2e36&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;One of the major changes in the new architecture was to distribute &lt;em&gt;experiments&lt;/em&gt; to all host agents by using the same distribution layer as regular Flipr parameters. This change in the distribution layer would unlock the ability for each microservice to locally read experiment data without any RPC to Parameter Service at all.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;63099f92-3738-4998-9b54-fcbe2db2f94e&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;7ee272d4-aa04-46ff-9b6c-45e6ecf33fff&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXcKDN5DxoAaBdHAZTOrJUzsoefqhlUErYvD0g7UAyln6llauKDecQnwhH7ul3yoseZyAFP4Ds7CdbQsh-b8ja6QbUmzbMjRvcdEWJoqh3wtL-AK389xl8ey4M6CeYmShCFTQkLWx-zt0s62OHHxoSpBBbc?key=MWSPikVkL_FOThWVVOyYBw&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 9: Experiment host agent distribution.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;6b0ffc43-1496-4c55-b262-d5f1f46ac85d&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;adfabe5c-dde3-4abd-82c3-c2dd8a677fee&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The next step for us was to port all experimentation specific business logic of the Parameter Service into an &lt;strong&gt;ExperimentPlugin&lt;/strong&gt;,&lt;strong&gt; &lt;/strong&gt;which would be embedded directly within the Flipr client. We intended to pilot this new capability directly within the Parameter Service before exposing this new capability of Local Experiment Evaluation to external microservices. The benefit of being the first users of Local Experiment Evaluation was to allow for &lt;strong&gt;rigorous shadow testing&lt;/strong&gt; to ensure correctness and performance parity.&lt;br&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f04d2aa4-af87-446b-9270-ee28e8debd82&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;9f4bd2fa-4ae3-406c-98e3-8de044fe66cf&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXfX4ur07iZOXrXm_yBZqMT96lUUkK6UtKEDPoysWcVop9gUKKnTb9wNvXHHgEq4TzyoanjOlN-C2qw89l36IkzOIaTRyPlWOqivL6bVigFeR7pCyZ6sXRm8a7zvoIRM9pxVEVCEo_oqtcf3uXBIgxwklble?key=MWSPikVkL_FOThWVVOyYBw&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 10: Intermediate Architecture: Shadow evaluations in Parameter Service.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f6c86324-e4e6-4da9-bf01-fa62d9a5907b&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9aa41247-e80c-4554-8e8d-8aedda0f1439&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;After a thorough shadow testing process through which we uncovered and addressed 13 separate bugs, the final step in this journey was to allow teams to directly opt in to use the Local Experiment Evaluation capabilities and remove their usage of the PrefetchParameters API entirely.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;3c32247a-108e-4d0f-ad93-71e4adcb0330&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;6437ed43-38f5-4090-be47-ed6975e71eb7&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXdOxStMOvaEm58g-JwGuIeMTKJ7qgzjAgDFm3BXhDz8eA0-aaV59TajP0JzHWu4-tuvrwuWukh76OXkZ-VBCI4-pIr6-p5wN1YkHWrG3M1owopRG0jgiGVhaIC_XFJovE5g-Zn0Y1-B1_bQs60EmLImumzT?key=MWSPikVkL_FOThWVVOyYBw&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 11: Final Architecture:&amp;nbsp;Direct usage of Local Experiment Evaluation in backend microservices.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;b92ed6f5-7e4d-442e-bc53-a1087605e9d3&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ac67e08a-3e62-4ee2-a97c-72c18708e894&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-challenges-amp-learnings&#34;&gt;Challenges &amp;amp; Learnings&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;1b107d54-09cb-488a-b808-2871f6e8a911&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-1-verification-at-scale&#34;&gt;1) Verification at scale&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;dad739ab-b35a-4899-b3fc-3fe873f1e031&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;One of the major challenges of building this new local evaluation functionality was to ensure that it was performing correctly at scale. In order to do this, we implemented a shadow testing capability to ensure that a sampling of requests that went to the V1 legacy evaluation code path would also trigger a separate async goroutine to evaluate and compare results with the V2 local experiment evaluation code path.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0abdd297-983f-4ac0-99e6-9dd68729bfcd&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The scale of such evaluations was enormous (roughly 20 million evaluations per second) and required heavy sampling to prevent any degradation to Parameter Service to perform these comparisons. Additionally,&amp;nbsp; the types of evaluations varied greatly from backend, mobile, and web surfaces. For this reason, we found it necessary to prove that every mismatch we encountered was explainable. And eventually we achieved a match rate &amp;gt;99.999% (1 explainable discrepancy out of 100,000 evaluations on average).&lt;br&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;506c3496-912b-4c65-99e2-1a791658c7bc&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;f0932322-4158-4a84-a4b5-79d79a887fbc&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXfkDB3JeA0i5JY19L-Cw7R0uM4WGps4Kd8N6MUC1FkhCWPDOcYZyILjrFgviTGd8a8h6ZakoGVNup_x6zXt98AM7NWLBcHakzuxk2DbvUhmi-kZm_sNiYS9sTi6qNuQBbkz-ZtEDKCP_07nxp5gfnfTtiY?key=MWSPikVkL_FOThWVVOyYBw&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 12: Shadow evaluation match rate.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;34acc681-281b-4bff-a037-e658f65264c7&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;63e623d2-a89a-4d65-9813-028a25e7444d&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Some of the key learnings from this process included:&lt;br&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;b9a6d2df-c22c-4063-9fc5-2f86b4606e00&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Known discrepancies during parameter or experiment updates&lt;/strong&gt; – Whenever users updated the values or rules engine for parameters or experiments, this would predictably result in a race condition. The V1 evaluation methodology might use version X of the parameter or experiment whereas the shadow comparison using V2 methodology could use version X+1 based on the timing of Flipr distribution. This became the &lt;em&gt;only&lt;/em&gt; source of acceptable discrepancies in the system.&lt;br&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Bugs in the old methodology&lt;/strong&gt; – Although 100% parity with the old system was the goal, at times we decided to “fix forward” and address minor bugs and edge cases in the legacy system instead of the new system. This proved to be a major benefit of this migration: in addition to providing new functionality, we were able to fix difficult-to-detect edge cases in the legacy system too.&lt;br&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Race conditions and timeouts&lt;/strong&gt; – Similar to the issue of “known discrepancies” during parameter or experiment updates, we realized that some subtle race conditions could affect our shadow evaluation match rate. One example was to set an adequate timeout for the shadow evaluation–it should mimic the same context deadline provided to the original evaluation to do an apples-to-apples comparison not just for logical correctness, but also performance.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;f33fe512-c94d-4246-9029-230911eb591b&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;c9ffdcb3-3f47-43ee-afe0-1f9ef83790c5&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-2-logging-volume-concerns&#34;&gt;2) Logging volume concerns&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;b478fb6d-949a-4af6-a4c7-1a7b6e5ddff7&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;The dramatic improvement in evaluation speed introduced a risk to experiment log production and processing. Evaluating a parameter that is being experimented on may produce an exposure log to Apache Kafka®. If parameters can be evaluated 100 times faster, this means logs can potentially be produced 100 times faster too, and there is a risk of potentially overwhelming the infrastructure that produces, distributes, and processes the logs. In particular, we were concerned about dropping experiment logs due to hitting rate limits on our Kafka topic (either byte rate or message rate throughput limits).&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7870c783-6532-4bc4-a380-2d60402a7fc6&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;One common experimentation use-case where a large cohort of users can be processed in bulk is producing marketing copy for an email campaign involving hundreds of millions of users.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;da4724f7-a7ab-4235-ab53-2152cb58de80&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;To mitigate this risk we did the following:&lt;br&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;373275bf-50a4-4d3c-9445-e57403f31b6d&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Telemetry &amp;amp; alerting on log volume production&lt;/strong&gt; – First of all, we added telemetry to understand how many experiment logs were produced per second by each client, and alerting our on-call team if any one of them was producing greater than 5% of the total quota for our Kafka topic. This allowed us to identify hotspots and build solutions to address them.&lt;br&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;In-memory LRU cache&lt;/strong&gt; – Because our experiment log processing pipeline only cares about the first time each user enters the experiment, we were able to deduplicate an enormous volume of logs. We decided to use a highly performant in-memory LRU cache (&lt;a href=&#34;https://github.com/hashicorp/golang-lru&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;golang-lru&lt;/a&gt;) to reduce redundant logs, and ultimately were able to deduplicate roughly 80% of logs.&lt;br&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Parameters within the Flipr client library&lt;/strong&gt; – Having the ability to add “internal” parameters used within the Flipr client library and ExperimentPlugin became crucial to developing features safely. In order to avoid circular dependencies, we had a separate mechanism to load these “internal parameters” at file cache bootstrap time vs. providing runtime context to evaluate them. In case of emergency, we were able to entirely disable local evaluation using these internal Flipr client parameters without having to re-deploy services.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e084632c-ca52-43ea-914c-66c1a2493fc6&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:3,&amp;quot;hash&amp;quot;:&amp;quot;02c9d2f9-6517-4642-a059-f05afd2b2181&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-3-decentralized-evaluation&#34;&gt;3) Decentralized evaluation&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;b1178d8b-d999-41c2-a54d-7de90f53aafe&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Lastly, a new challenge that we had to face was the fact that experiment evaluations were now decentralized as part of a client library versus a single centralized microservice. One of the major benefits of RPC-based evaluation, especially in the initial development phases of project Citrus, was that any issues with the core evaluation logic could be easily reverted by redeploying a single microservice. We would encourage others to only move towards client side evaluation once the platform is in a mature state, because reverting multiple separate microservices involving separate versions of client libraries is a much more costly and time consuming exercise.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;361e81b7-1e5d-4889-ac06-591bc50b23e0&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Some of the tools which helped us with this paradigm change include:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;77b1cb48-f40a-4734-b173-5aeb8dc4ad6e&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Client library version tracking&lt;/strong&gt; – Even though our backend microservices are deployed at a regular cadence, it isn’t always the case that every single microservice at Uber is up-to-date with the latest client code changes. Client version tracking telemetry allowed us to more easily identify services which were using outdated or buggy versions of the SDK.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;5667ba11-eee9-4e70-b2ec-45290073c058&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;b99a72dd-8035-4e21-9267-2fcafd0bd339&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXfVlJBJwZVPpoGcaCKELgO40jDpe5EWiteqtyxeHsQsmGWqtpA7bloW2FS15rf9RxXqzKIodyysvMEJywcO0p0G3QfN3am2fE5Sf0ZNGKRMn_pQotJHekJ-hdAFHfdNzsHHyDxRmBRL0kk-6UZPqkyoBZyT?key=MWSPikVkL_FOThWVVOyYBw&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 13: Client library version adoption curve&lt;br&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;948edbc4-172e-4787-93d8-95510b8b870c&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;000f094a-7e5c-4109-8ca2-9a2e1499f495&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Bulk deployment infrastructure&lt;/strong&gt; – &lt;a href=&#34;https://www.uber.com/blog/up-portable-microservices-ready-for-the-cloud/?uclick_id=b017bf4f-abd9-415e-aee6-3540742d49ad&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Up&lt;/a&gt; is the platform at Uber which manages orchestration and code deployment of thousands of microservices across millions of host instances. We were able to add capabilities to bulk deploy services in a worst-case scenario (e.g., broken client version released).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;fb45ec4e-a63c-4002-8b8e-b561b81e73eb&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;517dda9d-6a81-432e-92d6-47c286375bef&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-impact&#34;&gt;Impact&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;ebe4e725-1949-4d2e-94b3-0423cf766e8d&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Ultimately, the new architecture proved to be a success for many use cases at Uber. The p99 latencies of experiment evaluations dropped by a factor of 100x (from 10 ms to 100 µs).&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2e81cbce-46ea-4370-9a75-0f094a8274ed&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;413b8262-4b07-49d8-a66b-42309ff8ba66&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXffLKFTT_m6BdKUfilQq3txDxRV1j5GdeC8BVg6xgwvGvKu8UYjjksYNr2aeW2zZNdKtaDC-ZPt_FHMre0VApVA-oVGIaX29mTmtOyeeIOa07pRjcOouC9ufQP8qxPJigzeBJHvySR3RLjB1rhVOKL6cA4?key=MWSPikVkL_FOThWVVOyYBw&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 14: Experiment Evaluation p99 latency.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;419c8a90-862b-4320-915b-bc744db38550&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;fc19a4a6-e449-4348-8684-45c1f05ae69e&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;After the initial release of this feature in H2 of 2023, we strategically targeted the rollout to the Go microservices contributing the most to experiment evaluations, resulting in over 100 services and nearly 70% of experiment traffic so far.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;53d578f9-0a25-4f26-98dd-dd857144bcfe&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;d816a793-d275-4ced-bb88-91480f12ef04&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXcsRkV5JjP_DY03MxPQzoMgPiyfiQsl9eH5lIXsCiQi4GOsHBNlWIEgMH-4LpzKfna6910eoXhmpMFaxQ8W5gqB7adZxOsJGBHt8Ln3Pa2M9Kifn8Ro22mP_TfWBWGeEVoQaHER9b26AXSRR2o3Ob0zkWo?key=MWSPikVkL_FOThWVVOyYBw&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 15: Local Experiment Evaluation adoption KPIs.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;2894e647-1d06-42b4-8577-05756c90f12c&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;4bc26680-a0f4-46a8-8b1f-1ebcac155072&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Additionally, we have been able to observe some noticeable improvements in user-facing functionality in Uber’s applications. For example, the end-to-end backend latency of the UberEats search suggestion indexing reduced by 20% (p99 latency went from 250 ms to 200 ms), which translated to an appreciable improvement in the mobile app experience.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;9f89216c-cfb1-40b7-9a1e-fa7f471f3470&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&amp;quot;align&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;99d7f75a-094a-49ad-9267-f604b51f3640&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img decoding=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXer56jkW2Kdvch_24Hp6K4dmLJ73CxFiZJ2XI2VfjL6XB527vo57pVxm40r0i4sMEMNesH5jKscf-nxZy3XDMawB-bTM4dbHyvXTTOMMj_RlFOcjs2XHhuNt7qTXzhQwlO9GK-Tpg-LUglZ6KgpsEUTBGPj?key=MWSPikVkL_FOThWVVOyYBw&#34; alt=&#34;&#34; referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;Figure 16: Impact of Local Experiment Evaluation for UberEats store index service.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;dc9e1900-7d44-417b-abbc-451d9175de7c&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;5373b880-fe5b-4cbd-bcab-b37016f5eb60&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-next-steps&#34;&gt;Next Steps&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;c02969d9-5961-4721-b5a2-81d0053bb65d&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;This first iteration of Local Experiment Evaluation was for services using Golang, which serves the majority of our backend experimentation. The immediate next step is to also include Java, which is the other main backend service language that is supported at Uber.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;0d0efe9b-3e73-412e-a887-909d71f478b5&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;Beyond this, there are plans and ongoing work to move the complexity from the clients to the server side. Complex clients are harder to rollout than server-side changes, and having complex clients in two or more languages adds duplication of effort and risks of divergence.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;d4ab51b2-7942-42b9-8f4e-7a03f8ebe585&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;A more expressive language would allow us to move some of this complexity to the server. Instead of the clients parsing the experiment rules engines on the client using an ExperimentPlugin pattern for both Golang &amp;amp; Java, the system could parse this logic on the server, and output simpler programs in the more expressive client language to be executed by both Golang and Java clients. This would lead to thinner clients, and more server side control. The details of this will be the subject of future blog posts.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;40e3d864-d6f9-439b-9674-e426a5957e05&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;level&amp;quot;:1,&amp;quot;hash&amp;quot;:&amp;quot;b27d423e-1886-4b9b-8f67-c6f16111d984&amp;quot;}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-conclusion&#34;&gt;Conclusion&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;1d2f57e6-05d6-4aaa-8aa0-5ba9bb87fde7&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;In summary, we replaced the RPC-based experimentation system with a new feature that evaluates the experiment rules engines locally by reading from file caches that are distributed to all host agents. Adding local evaluation for the experimentation stack helped improve the following:&lt;br&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;5f8d1b57-583d-42fd-9182-e7343956b8d4&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Latency:&lt;/strong&gt; Evaluation latency dropped by a factor of 100x (p99 10 ms to p99 100 µs), unlocking new integration opportunities&lt;br&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Reliability:&lt;/strong&gt; We removed a single point of failure on a single high-traffic microservice, replacing it with a more reliable distributed configuration pipeline&lt;br&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Developer Productivity: &lt;/strong&gt;Developers no longer need to worry about prefetching parameters in a batch request and caching them to avoid the RPC overhead, making code less complex&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;308d3a47-41fc-4d1c-a863-3b4567650527&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;We learned many lessons from this initiative, which may be useful for others attempting to build an in-house Experimentation platform or make large scale updates to their existing platform:&lt;br&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;e9facbf2-f63d-4c3c-9712-ad717b80a989&amp;quot;,&amp;quot;ordered&amp;quot;:false,&amp;quot;values&amp;quot;:&amp;quot;&amp;quot;}&#34; class=&#34;wp-block-list&#34;&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Start with Centralized&lt;/strong&gt; – Creating a new experimentation platform which returns evaluation results through RPC calls to a centralized microservice is advisable, especially during the initial period of rapid new feature development&lt;br&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Decentralized when mature – &lt;/strong&gt;When the platform is mature, switching to a decentralized library architecture unlocks many benefits (as listed above)&lt;br&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Safe development of libraries&lt;/strong&gt; – To make (decentralized) library development safer, utilizing concepts like lightweight feature flagging within the client library, having strong telemetry and alerting, and tracking library version usage across microservices is important&lt;br&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Faster evaluations can mean faster log emission&lt;/strong&gt; – Making sure that the experimentation logging infrastructure can handle increased volume is critical when moving towards a client side, low latency evaluation architecture&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;62f1a658-4de0-451a-9c4c-50a74ed1ffb4&amp;quot;,&amp;quot;opacity&amp;quot;:&amp;quot;alpha-channel&amp;quot;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;7914a2a8-41f9-4444-a1f7-a7a8d10f02bf&amp;quot;,&amp;quot;level&amp;quot;:2}&#34; class=&#34;wp-block-heading&#34; id=&#34;h-acknowledgments&#34;&gt;Acknowledgments&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;07b5e14d-8520-40d7-a7ff-a10331d953c9&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;This project would not have been possible without the contributions of numerous people on the Experimentation team, Flipr team, and pilot customer teams (Rider Experience, Ads Delivery Platform, and Earner Incentives) who helped us release Local Experiment Evaluation for Go services!&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;fontSize&amp;quot;:&amp;quot;small&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;26f7463a-272c-45ad-9add-cbdaf679c43b&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34; class=&#34;has-small-font-size&#34;&gt;Apache®, Apache Kafka, Kafka, and the corresponding logo are either registered trademarks or trademarks of the Apache Software Foundation in the United States and/or other countries. No endorsement by The Apache Software Foundation is implied by the use of these marks.&lt;br&gt;Cover image by Iffany via &lt;a href=&#34;https://pixabay.com/illustrations/alchemical-alchemy-magician-witch-8848871/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Pixabay&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&amp;quot;hash&amp;quot;:&amp;quot;a24c4410-ca5c-4518-acaa-63d94cad84c6&amp;quot;,&amp;quot;dropCap&amp;quot;:false}&#34;&gt;&lt;/p&gt;】&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:1,&#34;hash&#34;:&#34;d64b6745-f796-4cb8-872e-6ae0157f15d7&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-introduction&#34;&gt;简介&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;f3c10d4f-01d7-4aec-9f1f-7b770ab21fc8&#34;,&#34;dropCap&#34;:false}&#34;&gt;这篇博文描述了我们如何改进 Uber 实验平台的效率，将实验评估的延迟减少 100 倍（毫秒到微秒）。我们通过从远程评估架构（客户端到服务器 RPC 请求）转向本地评估架构（客户端计算）来实现这一目标。本博文中的一些术语（例如参数、实验等）引用自我们之前关于 Uber Experimentation 的博文。要了解更多信息，请查看&lt;a href=&#34;https://www.uber.com/blog/supercharging-a-b-testing-at-uber/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;增压 A/B在 Uber 进行测试&lt;/a&gt;。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;ac4c1504-882c-4649-933c-fa6b5b8b1afc&#34;,&#34;dropCap&#34;:false}&#34;&gt;使用实验广泛应用于 Uber 的后端微服务、移动应用程序和 Web 界面，以衡量所有业务部门（交付、移动、货运、Uber For Business (U4B) 等。我们将介绍系统的当前和新架构以及技术挑战和学习。这篇博文特别关注&lt;strong&gt;后端&lt;/strong&gt; Golang 微服务的延迟改进，而不是移动或基于网络的实验。我们还专注于 A/B 测试，而不是其他实验设计。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;8db03731-b49f-4b16-b029-f3c0c476f829&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;50bc6c10-54b3-4842-8202-209b25f285cc&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-background&#34;&gt;​​背景&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;a5e74f0b-28b2-41cf-bfc3-8d915ee23d65&#34;,&#34;dropCap&#34;:false}&#34;&gt;2020 年， Uber开始了重写A/B测试平台的漫长旅程（内部称为Project Citrus）。这个新系统的关键架构决策之一是统一 Uber 现有的后端配置平台，&lt;a href=&#34;https://www.uber.com/blog/flipr/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34; &gt;Flipr&lt;/a&gt;，带有实验平台。我们构建了实验作为 Flipr 配置（也称为参数）之上的临时覆盖层&lt;strong&gt; &lt;/strong&gt;，以便执行随机化、进行因果推理并帮助团队确定使用 fo 的最佳性能值r 他们的参数。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;fc14f607-ac7b-4402-aaab-d17095a1697e&#34;,&#34;dropCap&#34;:false}&#34;&gt;下面是示例来说明参数和实验之间的差异。这里我们有一个&lt;strong&gt;参数&lt;/strong&gt;，它控制 Rider 应用程序中特定屏幕的按钮颜色。默认值为红色，但在某些情况下（例如，如果用户位于&lt;em&gt;city_id = 1&lt;/em&gt;），该城市的&lt;em&gt;所有用户&lt;/em&gt;的值将为蓝色。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;b2b71d62-7a60-47d0-b089-cf5005aac389&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;7707510c-e913-4343-9940-4277b2619ab0&#34;,&#34;alt&#34; :&#34;&#34;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img 解码=&#34;async&#34; src =“https://lh7-rt.googleusercontent.com/docsz/AD_4nXcCn3OE-lw_syq4RP3ju2DpQ0D1xl16leZdP_eDI5i8anem_mVIFYBvXrlIXwFhe_ 3-0eUrXFomadWp52ObiNyxP9uzsxIDoFFz-z4Yn7xmlpVZ6YXqP5YQPCamrzUemoEyFfU13XDYaM3CFDtSgpCIsMab?key=MWSPikVkL_FOThWVVOyYBw&#34; alt=&#34;&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 1：参数表示。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;96551fce-9bac-46a9-a7f6-1a31edb0ca3b&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;e083eb58-1309-410f-a1e2-66e77997f412&#34;,&#34;dropCap&#34;:false}&#34;&gt;这些参数规则使用 Flipr 客户端评估引擎：&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;2c2f8923-a7ad-47b7-8f66-cb3d159a6e78&#34;,&#34;alt&#34; :&#34;&#34;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img 解码=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXcc7pse1Iyq0IKcOY4i8gl6_jnxlu6rD8oWL_i9wXvyYplJtZdR8whcpSTMiaOv-R 5iGp_5cxF3olsqFcCKZ7YRaWqr0rMSef2R2WTq9NRWgl9fU-ukIR83Tl31VzwExH7x5SLe2NG2YkLXTa3ZYqWSrHQs?key=MWSPikVkL_FOThWVVOyYBw&#34; alt=&#34;&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 2：Flipr 客户端参数评估。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;6ab1ea4c-fe8c-4749-8670-d82d3312f7c9&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;b73e9c7​​2-55bd-4de3-b9bd-1bc5f54e2187&#34;,&#34;dropCap&#34;:false}&#34;&gt;调用&lt;strong&gt;get&lt;/strong&gt; 方法根据运行时参数传递返回不同的参数值d（例如，&lt;em&gt; city_id&lt;/em&gt;、&lt;em&gt;user_id&lt;/em&gt;、&lt;em&gt;app_version&lt;/em&gt; 等）。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;940a53cb-bbe3-459f-be5b-41a1fa8635c7&#34;,&#34;dropCap&#34;:false}&#34;&gt;一个 &lt;strong &gt;实验&lt;/strong&gt;允许我们随机化某些测量单位（例如用户、会话、设备或行程）的参数行为。当实验处于活动状态时，参数具有附加&lt;strong&gt;参数元数据&lt;/strong&gt;，记录将覆盖参数行为的关联实验。实验结束后，此元数据将被删除。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;b49aafcb-1c4c-40ea-8930-4f58126234f1&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;ecc0933e-c3ca-4036-b013-db0cc0c0adaa&#34;,&#34;alt&#34; :&#34;&#34;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img 解码=&#34;async&#34; src =“https://lh7-rt.googleusercontent.com/docsz/AD_4nXexjiP3-po3l3ihs_fQd3guWL5DTCZIvUQ772FVqMyctGFS63DhRvCHKsa42Y4IRo RFVvjrFSi-sBaj4WT8AzkaGF-WHVkbGIvETqmFw-cRmWFNcTyONLV1AdAYj6qRoS1h_7_zWrui0c12CCfToHX514IZ?key=MWSPikVkL_FOThWVVOyYBw&#34; alt=&#34;&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 3：参数元数据表示。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;f1193605-535c-4c70-9563-e1aaf3f89757&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;e8ca6b41-3c1c-464b-a349-899fb7e7fcd8&#34;,&#34;dropCap&#34;:false}&#34;&gt;在下面例如，&lt;em&gt;city_id = 1&lt;/em&gt; 中的 2 个不同用户可以根据&lt;strong&gt;治疗组&lt;/strong&gt;获得按钮颜色的 2 个不同值它们属于实验（下面的 A/B 测试设置为 50% 治疗组和 50% 对照组，并按 &lt;em&gt;user_id&lt;/em&gt; 进行随机化）。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;d15399a5-c8ee-4cac-8c9d-c99b9ab591b9&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;937986bc-64db-4d52-a6d7-32f9dd1d7f6a&#34;,&#34;alt&#34; :&#34;&#34;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img 解码=&#34;async&#34; src =“https://lh7-rt.googleusercontent.com/docsz/AD_4nXdHmTE23QiXnNEgxYPnx68cAEN8Hzl3NP88Fs8vJsUpajG6berW6mTMScplnEc7VP xfd0nAVIIoRHZxkW82a5vZTVbw1kVKlBtDRxy7P2meDrb1CfveKOv5rRbX8L7Ztq4HAoeXXCLkOoztJBNhDCC4ZxnL?key=MWSPikVkL_FOThWVVOyYBw&#34; alt=&#34;&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 4：实验和实验元数据表示。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;36504ba8-03a6-4c23-9c55-183d16794848&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;42fede90-4b58-403d-933b-b753ebc5d5e2&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;strong &gt;实验&lt;/strong&gt;和&lt;strong&gt;实验元数据&lt;/strong&gt;由Flipr客户端读取，受实验影响的任何参数的返回值将根据实验随机化（例如，&lt;em&gt;user_id = 123&lt;/em&gt; 可能会变为蓝色，因为它们是对照组的一部分，而&lt;em&gt;user_id = 456&lt;/em&gt; 则会获得绿色值）：&lt;br&gt;&lt; /p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;52345ac8-1e9b-4d86-8478-06ee41a7948e&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;ce15ddb4-a0f2-4f3f-93ac-ef97e39d89fe&#34;,&#34;alt&#34; :&#34;&#34;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img 解码=&#34;async&#34; src =“https://lh7-rt.googleusercontent.com/docsz/AD_4nXcpoEA_nfVd7LsWMyhG3bziMUdl4ITrlKuwOtg9-K5aTcXjrE-0wFCBDJe2Z6vFr Z3P-6mZsucF4Q8WrR41jm2TY0yWAJqs6U1oKeAoe53vx9ve95P9WITM_EgX77UIxLXKyhCUNj_ZwgS9hhFDCeH5o18?key=MWSPikVkL_FOThWVVOyYBw&#34; alt=&#34;&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 5：使用实验覆盖进行 Flipr 客户端参数评估。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;dcadd599-ede1-4988-9f5e-43b259d9738c&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;f969ee60-3503-4da6-afd6-e8542ee55b8a&#34;,&#34;dropCap&#34;:false}&#34;&gt;我们记录让用户参与实验，以便我们能够衡量这些变化对关键业务成果（例如已完成的行程或总预订量）的影响。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;d65583f0-bd34-4a63-a299-3e1fb6807568&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;c48b0622-aecd-423c-be13-474c76ae16b6&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-problem-statement&#34;&gt;问题陈述&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;6310153c-1cd3-47e0-9c90-7606539284fe&#34;,&#34;dropCap&#34;:false}&#34;&gt;从历史上看，所有实验评估是通过网络调用集中式微服务进行的，而 eval在本地没有进行主动实验的情况下对参数进行评估（称为“本地评估”）。作为 Citrus 项目的一部分，我们保留了一种模式，即所有后端微服务都向中央服务发出 RPC，以评估活动实验。这种方法使我们能够相对快速地发布新平台，并降低了客户采用新平台的迁移成本。我们的所有客户（后端系统、移动设备和 Web 服务）都通过对新评估服务（内部称为&lt;strong&gt;参数服务&lt;/strong&gt;）进行 RPC 调用来采用新平台。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;0e39eb67-e7b6-4544-b5e6-cd0e09994579&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;040d5459-23bf-4773-9821-b0bedffb41ce&#34;,&#34;alt&#34; :&#34;&#34;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img 解码=&#34;async&#34; src =“https://lh7-rt.googleusercontent.com/docsz/AD_4nXfgi_tto5GyZSqw-RsesbyPBH2Z9YCFlvmsRI7ZSyHqC9NiZ8W_qgxgcktI7Hp4D xV2jk2pd6gREQLrlHYj-2XM13BoqE2i-eMYe-OoxJUgM3yQg5xz7cfZZehnyr2cu3NKQFZidRPn735nN9xvj0K0doo?key=MWSPikVkL_FOThWVVOyYBw&#34; alt=&#34;&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 6：参数服务架构（RPC 评估）。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;eb7ea424-ecc9-42fb-a03b-087856d826d8&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;aabc8519-d3b2-450e-a7b7-ed893eff3615&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;br&gt;然而，这种模式也给实验的后端调用者留下了一些未解决的问题，我们希望作为实验平台重写的一部分来解决这些问题。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;f6745bde-0355-48de-848c-1f9869dc7691&#34;,&#34;ordered&#34;:false,&#34;values&#34;:&#34; “}”类=“wp-block-list”&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;延迟&lt;/strong&gt;：基于 RPC 的评估相对较慢（p99 延迟约为 10 毫秒） ）。鉴于 Uber 市场的实时性，许多应用程序需要更快地评估其实验，以便加入新平台。&lt;br&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;可靠性&lt;/strong&gt;：参数服务成为单点故障。为了减轻这种担忧，我们在参数服务的可靠性方面投入了大量资金，最终将每个端点的可用性 SLA 维持在 99.95%。我们还鼓励团队在 RPC 失败时依赖后备值。豪维r，考虑到系统的规模以及数百个团队和微服务在任何给定时间调用参数服务来评估数千个参数和实验的事实，无法保证每个回退的行为。有时，回退值会变得不安全，从而导致需要及时修复的中断。&lt;br&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;开发人员生产力&lt;/strong&gt;：为了减少参数服务的请求数量，我们引入了预取机制。作为此机制的一部分，后端服务将向参数服务发送批量 RPC 请求，以评估并返回处理该特定请求的业务逻辑所需的&lt;strong&gt;所有&lt;/strong&gt;主动实验参数。从参数服务返回的实验值和暴露日志将存储在后端服务的本地内存缓存中。 &lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;后端应用程序将&lt;strong&gt;获取&lt;/strong&gt;所需的每个单独参数的值准确地在需要时发出请求（受到实验的影响），此时我们将为进入实验的用户发出暴露日志。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;a4427471-3ff1-4905-96a9-91dc1d65829d&#34;,&#34;dropCap&#34;:false}&#34;&gt;在此批处理时有助于减少 RPC 调用的总数，这也意味着后端开发人员在编写应用程序时需要了解预取机制。他们需要预先计划预取哪些参数，以便这些参数值稍后可用。如果不这样做，就会导致意外的错误，然后需要进行调试和修复，从而导致效率低下。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;015fdac7-4719-46b9-a1a3-2ea244c3b0a0&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;d887cb33-7e66-4dd0-a4b3-ac2d087b1233&#34;,&#34;alt&#34; :&#34;&#34;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img 解码=&#34;async&#34; src =“https://lh7-rt.googleusercontent.com/docsz/AD_4nXfDVtfii-J4qcPg2YJtWSkXfvWDWv-KTwuM72AULRUI3zxzma2dj2vPfvaMSzugI OKLQsoKsg5TQLmva-UAEPUDcTuwJ2bDjZRCviyCOlFY58-llmflatbDIxCJ0heqp3C5C3UqF7X7zttrx8fl-G0q1HA?key=MWSPikVkL_FOThWVVOyYBw&#34; alt=&#34;&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 7：初始架构：预取参数机制。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;7b0ea81f-c7eb-45ff-9531-316815e29e09&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha 通道不透明度&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;5033feb0-daf7-44d6-a24f-5e4fb50e46ce&#34;,&#34;dropCap&#34;:false}&#34;&gt;我们相信所有这些问题都可以通过一种新的架构来解决，该架构涉及客户端对实验（和参数）进行评估，而无需向参数服务发出任何 RPC 请求。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;934b57ef-115b-4707-be3e-e2665432395b&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;445e90ae-10ba-4ffa-9353-5dba81b4f6a6&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-architecture&#34;&gt;架构&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;55e76b60-4589-41d2-becd-ed057a9a1bb1&#34;,&#34;dropCap&#34;:false}&#34;&gt;Uber 的现有架构涉及一种分配机制，其中 Flipr 参数被发送到 Uber 的所有主机代理（&lt;a href=&#34;https://www.uber.com/blog/how-we-unified-configuration-distribution-across-systems-at-uber/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;查看之前的英语博客了解更多详情&lt;/a&gt;）。在此类主机上运行的每个微服务都将依赖 Flipr 客户端通过读取文件缓存来定期引导这些参数规则引擎，从而获得比在线 RPC 架构更高的可用性。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;2f5c86e6-e578-4ab8-a75e-dae062dcdb43&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;b088ac78-b735-4c9d-88d2-e3ff47ecc8fd&#34;,&#34;alt&#34; :&#34;&#34;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img 解码=&#34;async&#34; src =“https://lh7-rt.googleusercontent.com/docsz/AD_4nXd3OYBBowDH_C3r1DhN2tu-fEtjHEzLZv_vRtEsIBtk6G0NUszEUquFnpCt5gtTVc 4dK1JB_qVY4cKJ7F8LzP-wRac-Hsq-EsKBANHoSrqECWjOuwotA77-5jTT0R7GJo46YKflS3j-dFkmh2mHQ6AZgG4z?key=MWSPikVkL_FOThWVVOyYBw&#34; alt=&#34;&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 8：参数主机代理分布。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;d1f41a6a-5b70-44d2-b665-a0ca62124f06&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;4a048935-c4fa-4b94-96b6-eac2134b2e36&#34;,&#34;dropCap&#34;:false}&#34;&gt;其中之一新架构的主要变化是使用与常规 Flipr 参数相同的分发层将实验分发到所有主机代理。分布层的这一变化将解锁每个微服务能够在本地读取实验数据，而无需任何 RPC 到参数服务。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;63099f92-3738-4998-9b54-fcbe2db2f94e&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;7ee272d4-aa04-46ff-9b6c-45e6ecf33fff&#34;,&#34;alt&#34; :&#34;&#34;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img 解码=&#34;async&#34; src =“https://lh7-rt.googleusercontent.com/docsz/AD_4nXcKDN5DxoAaBdHAZTOrJUzsoefqhlUErYvD0g7UAyln6llauKDecQnwhH7ul3yos eZyAFP4Ds7CdbQsh-b8ja6QbUmzbMjRvcdEWJoqh3wtL-AK389xl8ey4M6CeYmShCFTQkLWx-zt0s62OHHxoSpBBbc?key=MWSPikVkL_FOThWVVOyYBw&#34; alt=&#34;&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 9：实验主机代理分布。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;6b0ffc43-1496-4c55-b262-d5f1f46ac85d&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;adfabe5c-dde3-4abd-82c3-c2dd8a677fee&#34;,&#34;dropCap&#34;:false}&#34;&gt;下一步对我们来说，是将参数服务的所有实验特定业务逻辑移植到 &lt;strong&gt;ExperimentPlugin&lt;/strong&gt; 中，&lt;strong&gt; &lt;/strong&gt;它将直接嵌入到Flipr 客户端。我们打算在向外部微服务公开本地实验评估这一新功能之前，直接在参数服务中试用这一新功能。成为本地实验评估的首批用户的好处是可以进行&lt;strong&gt;严格的影子测试&lt;/strong&gt;，以确保正确性和性能平等。&lt;br&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;f04d2aa4-af87-446b-9270-ee28e8debd82&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;9f4bd2fa-4ae3-406c-98e3-8de044fe66cf&#34;,&#34;alt&#34; :&#34;&#34;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img 解码=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXfX4ur07iZOXrXm_yBZqMT96lUUkK6UtKEDPoysWcVop9gUKKnTb9wNvXHHgEq4Tz yoanjOlN-C2qw89l36IkzOIaTRyPlWOqivL6bVigFeR7pCyZ6sXRm8a7zvoIRM9pxVEVCEo_oqtcf3uXBIgxwklble?key=MWSPikVkL_FOThWVVOyYBw&#34; alt=&#34;&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 10：中间架构：参数服务中的影子评估。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;f6c86324-e4e6-4da9-bf01-fa62d9a5907b&#34;,&#34;opacity&#34;:&#34;alphaa-channel&#34;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;9aa41247-e80c-4554-8e8d-8aedda0f1439&#34;,&#34;dropCap&#34;:false}&#34;&gt;彻底之后通过影子测试过程，我们发现并解决了 13 个单独的错误，此旅程的最后一步是允许团队直接选择使用本地实验评估功能并删除他们完全使用 PrefetchParameters API。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;3c32247a-108e-4d0f-ad93-71e4adcb0330&#34;,&#34;opacity&#34;:&#34;alpha 通道&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;6437ed43-38f5-4090-be47-ed6975e71eb7&#34;,&#34;alt&#34; :&#34;&#34;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img 解码=&#34;async&#34; src =“https://lh7-rt.googleusercontent.com/docsz/AD_4nXdOxStMOvaEm58g-JwGuIeMTKJ7qgzjAgDFm3BXhDz8eA0-aaV59TajP0JzHWu4-t uvrwuWukh76OXkZ-VBCI4-pIr6-p5wN1YkHWrG3M1owopRG0jgiGVhaIC_XFJovE5g-Zn0Y1-B1_bQs60EmLimumzT?key=MWSPikVkL_FOThWVVOyYBw&#34; alt=&#34;&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 11：最终架构：在后端微服务中直接使用本地实验评估。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/分区&gt;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;b92ed6f5-7e4d-442e-bc53-a1087605e9d3&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;ac67e08a-3e62-4ee2-a97c-72c18708e894&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-challenges-amp-learnings&#34;&gt;挑战与学习&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;1b107d54-09cb-488a-b808-2871f6e8a911&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-1-verification-at-scale&#34;&gt;1) 大规模验证&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;dad739ab-b35a-4899-b3fc-3fe873f1e031&#34;,&#34;dropCap&#34;:false}&#34;&gt;其中之一构建这一新的本地评估功能的主要挑战是确保其在规模上正确运行。为了做到这一点，我们实现了影子测试功能，以确保进入 V1 遗留评估代码路径的请求采样也会触发一个单独的异步 goroutine 来评估结果并将其与 V2 本地实验评估代码路径进行比较。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;0abdd297-983f-4ac0-99e6-9dd68729bfcd&#34;,&#34;dropCap&#34;:false}&#34;&gt;规模此类评估数量巨大（每秒大约 2000 万次评估）并且需要大量采样以防止执行这些比较时参数服务的任何降级。此外，后端、移动设备和网络界面的评估类型差异很大。出于这个原因，我们发现有必要证明我们遇到的每一个不匹配都是可以解释的。最终我们实现了 &gt;99.999% 的匹配率（平均 100,000 次评估中有 1 个可解释的差异）。&lt;br&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;506c3496-912b-4c65-99e2-1a791658c7bc&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;f0932322-4158-4a84-a4b5-79d79a887fbc&#34;,&#34;alt&#34; :&#34;&#34;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img 解码=&#34;async&#34; src =“https://lh7-rt.googleusercontent.com/docsz/AD_4nXfkDB3JeA0i5JY19L-Cw7R0uM4WGps4Kd8N6MUC1FkhCWPDOcYZyILjrFgviTGd8 a8h6ZakoGVNup_x6zXt98AM7NWLBcHakzuxk2DbvUhmi-kZm_sNiYS9sTi6qNuQBbkz-ZtEDKCP_07nxp5gfnfTtiY?key=MWSPikVkL_FOThWVVOyYBw&#34; alt=&#34;&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 12：影子评估匹配率。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;34acc681-281b-4bff-a037-e658f65264c7&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;63e623d2-a89a-4d65-9813-028a25e7444d&#34;,&#34;dropCap&#34;:false}&#34;&gt;一些此过程的主要经验包括：&lt;br&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;b9a6d2df-c22c-4063-9fc5-2f86b4606e00&#34;,&#34;ordered&#34;:false,&#34;values&#34;:&#34; “}”类=“wp-block-list”&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;参数或实验更新期间的已知差异&lt;/strong&gt; – 每当用户更新值或规则时对于参数或实验的引擎，这可以预见地会导致竞争条件。 V1 评估方法可能使用参数或实验的版本 X，而使用 V2 方法的影子比较可以根据 Flipr 分布的时间使用版本 X+1。这成为系统中可接受的差异的&lt;em&gt;唯一&lt;/em&gt;来源。&lt;br&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;旧方法中的错误&lt;/strong&gt; – 尽管与旧系统 100% 相同为了实现目标，有时我们决定“向前修复”并解决遗留系统而不是新系统中的小错误和边缘情况。事实证明，这是这次迁移的一个主要好处：除了提供新功能之外，我们还能够修复旧系统中难以检测的边缘情况。&lt;br&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;竞争条件和超时&lt;/strong&gt; – 与参数或实验更新期间的“已知差异”问题类似，我们意识到一些微妙的竞争条件可能会影响我们的影子评估匹配率。一个例子是设置影子评估有足够的超时时间——它应该模仿为原始评估提供的相同上下文截止日期，以便进行同类比较，不仅是为了逻辑正确性，而且是为了性能。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;f33fe512-c94d-4246-9029-230911eb591b&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;c9ffdcb3-3f47-43ee-afe0-1f9ef83790c5&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-2-logging-volume-concerns&#34;&gt;2) 日志量问题&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;b478fb6d-949a-4af6-a4c7-1a7b6e5ddff7&#34;,&#34;dropCap&#34;:false}&#34;&gt;显着改进评估速度给实验日志生产和处理带来了风险。评估正在试验的参数可能会生成 Apache Kafka® 的暴露日志。如果参数的评估速度可以加快 100 倍，这意味着日志的生成速度也可能加快 100 倍，并且存在可能压垮生成、分发和处理日志的基础设施的风险。特别是，我们担心由于达到 Kafka 主题的速率限制（字节率或消息速率吞吐量限制）而导致实验日志丢失。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;7870c783-6532-4bc4-a380-2d60402a7fc6&#34;,&#34;dropCap&#34;:false}&#34;&gt;一种常见实验可以批量处理大量用户的用例是为涉及数亿用户的电子邮件活动制作营销文案。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;da4724f7-a7ab-4235-ab53-2152cb58de80&#34;,&#34;dropCap&#34;:false}&#34;&gt;缓解这种情况风险我们做了以下操作：&lt;br&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;373275bf-50a4-4d3c-9445-e57403f31b6d&#34;,&#34;ordered&#34;:false,&#34;values&#34;:&#34; “}”类=“wp-block-list”&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;日志量生产的遥测和警报&lt;/strong&gt; – 首先，我们添加了遥测了解每个客户端每秒生成多少实验日志，并在其中任何一个客户端生成的日志数量超过 Kafka 主题总配额的 5% 时向我们的值班团队发出警报。这使我们能够识别热点并构建解决方案来解决这些问题。&lt;br&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;内存中 LRU 缓存&lt;/strong&gt; – 因为我们的实验日志处理管道只关心每个用户第一次进入实验的时间，所以我们能够对大量日志进行重复数据删除。我们决定使用高性能内存中 LRU 缓存 (&lt;a href=&#34;https://github.com/hashicorp/golang-lru&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;golang-lru&lt;/a &gt;) 减少冗余日志，最终能够删除大约 80% 的日志。&lt;br&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;Flipr 客户端库中的参数&lt;/strong&gt; – 能够添加“内部” Flipr 客户端库和 ExperimentPlugin 中使用的参数对于安全开发功能至关重要。为了避免循环依赖，我们有一个单独的机制来在文件缓存引导时加载这些“内部参数”，而不是提供运行时上下文来评估它们。在紧急情况下，我们能够使用这些内部 Flipr 客户端参数完全禁用本地评估，而无需重新部署服务。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;e084632c-ca52-43ea-914c-66c1a2493fc6&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h3 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:3,&#34;hash&#34;:&#34;02c9d2f9-6517-4642-a059-f05afd2b2181&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-3-decentralized-evaluation&#34;&gt;3) 去中心化评估&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;b1178d8b-d999-41c2-a54d-7de90f53aafe&#34;,&#34;dropCap&#34;:false}&#34;&gt;最后，我们必须面对的新挑战是，实验评估现在作为客户端库的一部分进行分散，而不是单个集中式微服务。基于 RPC 的评估的主要好处之一（尤其是在 Citrus 项目的初始开发阶段）是，核心评估逻辑的任何问题都可以通过重新部署单个微服务轻松恢复。我们鼓励其他人仅在平台处于成熟状态时才转向客户端评估，因为恢复涉及不同版本的客户端库的多个单独的微服务是一项成本更高且耗时的工作。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;361e81b7-1e5d-4889-ac06-591bc50b23e0&#34;,&#34;dropCap&#34;:false}&#34;&gt;一些帮助我们实现这一范式转变的工具包括：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;77b1cb48-f40a-4734-b173-5aeb8dc4ad6e&#34;,&#34;ordered&#34;:false,&#34;values&#34;:&#34; “}”类=“wp-block-list”&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;客户端库版本跟踪&lt;/strong&gt; – 即使我们的后端微服务定期部署节奏，情况并非总是如此Uber 的每一个微服务都与最新的客户端代码更改保持同步。客户端版本跟踪遥测使我们能够更轻松地识别使用过时或有错误的 SDK 版本的服务。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;5667ba11-eee9-4e70-b2ec-45290073c058&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;b99a72dd-8035-4e21-9267-2fcafd0bd339&#34;,&#34;alt&#34; :&#34;&#34;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img 解码=&#34;async&#34; src =“https://lh7-rt.googleusercontent.com/docsz/AD_4nXfVlJBJwZVPpoGcaCKELgO40jDpe5EWiteqtyxeHsQsmGWqtpA7bloW2FS15rf9Rx XqzKIodyysvMEJywcO0p0G3QfN3am2fE5Sf0ZNGKRMn_pQotJHekJ-hdAFHfdNzsHHyDxRmBRL0kk-6UZPqkyoBZyT?key=MWSPikVkL_FOThWVVOyYBw&#34; alt=&#34;&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 13：客户端库版本采用曲线&lt;br&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;948edbc4-172e-4787-93d8-95510b8b870c&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;000f094a-7e5c-4109-8ca2-9a2e1499f495&#34;,&#34;ordered&#34;:false,&#34;values&#34;:&#34; “}”类=“wp-block-list”&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;批量部署基础架构&lt;/strong&gt; – &lt;a href=&#34;https://www. uber.com/blog/up-portable-microservices-ready-for-the-cloud/?uclick_id=b017bf4f-abd9-415e-aee6-3540742d49ad&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Up&lt;/a&gt; 是 Uber 的平台，用于管理数百万个主机实例上数千个微服务的编排和代码部署。我们能够在最坏的情况下（例如，发布了损坏的客户端版本）添加批量部署服务的功能。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;fb45ec4e-a63c-4002-8b8e-b561b81e73eb&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;517dda9d-6a81-432e-92d6-47c286375bef&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-impact&#34;&gt;影响&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;ebe4e725-1949-4d2e-94b3-0423cf766e8d&#34;,&#34;dropCap&#34;:false}&#34;&gt;最终，事实证明，新架构在 Uber 的许多用例中取得了成功。实验评估的 p99 延迟下降了 100 倍（从 10 ms 降至 100 µs）。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;2e81cbce-46ea-4370-9a75-0f094a8274ed&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;413b8262-4b07-49d8-a66b-42309ff8ba66&#34;,&#34;alt&#34; :&#34;&#34;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img 解码=&#34;async&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXffLKFTT_m6BdKUfilQq3txDxRV1j5GdeC8BVg6xgwvGvKu8UYjjksYNr2aeW2zZ NdKtaDC-ZPt_FHMre0VApVA-oVGIAX29mTmtOyeeIOa07pRjcOouC9ufQP8qxPJigzeBJHvySR3RLjB1rhVOKL6cA4?key=MWSPikVkL_FOThWVVOyYBw&#34; alt=&#34;&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 14：实验评估 p99 延迟。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;419c8a90-862b-4320-915b-bc744db38550&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;fc19a4a6-e449-4348-8684-45c1f05ae69e&#34;,&#34;dropCap&#34;:false}&#34;&gt;初始之后在 2023 年下半年发布此功能后，我们战略性地针对对实验评估贡献最大的 Go 微服务进行了推广，结果超过到目前为止，已有 100 个服务和近 70% 的实验流量。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;53d578f9-0a25-4f26-98dd-dd857144bcfe&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;d816a793-d275-4ced-bb88-91480f12ef04&#34;,&#34;alt&#34; :&#34;&#34;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img 解码=&#34;async&#34; src =“https://lh7-rt.googleusercontent.com/docsz/AD_4nXcsRkV5JjP_DY03MxPQzoMgPiyfiQsl9eH5lIXsCiQi4GOsHBNlWIEgMH-4LpzKf na6910eoXhmpMFaxQ8W5gqB7adZxOsJGBHt8Ln3Pa2M9Kifn8Ro22mP_TfWBWGeEVoQaHER9b26AXSRR2o3Ob0zkWo?key=MWSPikVkL_FOThWVVOyYBw&#34; alt=&#34;&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 15：本地实验评估采用 KPI。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;2894e647-1d06-42b4-8577-05756c90f12c&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;4bc26680-a0f4-46a8-8b1f-1ebcac155072&#34;,&#34;dropCap&#34;:false}&#34;&gt;此外，我们我们已经能够观察到 Uber 应用程序中面向用户的功能有一些显着的改进。例如，UberEats 搜索建议索引的端到端后端延迟减少了 20%（p99 延迟从 250 毫秒减少到 200 毫秒），这转化为移动应用程序体验的显着改善。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;小时数据-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;9f89216c-cfb1-40b7-9a1e-fa7f471f3470&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34; class=&#34;wp -块分隔符具有 alpha 通道不透明度&#34;&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;wp-block-image&#34;&gt;&#xA;&lt;figure data-wp-block-name=&#34;core/image&#34; data-wp-block=&#34;{&#34;align&#34;:&#34;center&#34;,&#34;hash&#34;:&#34;99d7f75a-094a-49ad-9267-f604b51f3640&#34;,&#34;alt&#34; :&#34;&#34;}&#34; class=&#34;aligncenter&#34;&gt;&lt;img 解码=&#34;async&#34; src =“https://lh7-rt.googleusercontent.com/docsz/AD_4nXer56jkW2Kdvch_24Hp6K4dmLJ73CxFiZJ2XI2VfjL6XB527vo57pVxm40r0i4sME MNesH5jKscf-nxZy3XDMawB-bTM4dbHyvXTTOMMj_RlFOcjs2XHhuNt7qTXzhQwlO9GK-Tpg-LUglZ6KgpsEUTBGPj?key=MWSPikVkL_FOThWVVOyYBw&#34; alt=&#34;&#34;referrerpolicy=&#34;no-referrer&#34;&gt;&lt;figcaption class=&#34;wp-element-caption&#34;&gt;图 16：UberEats 商店索引服务本地实验评估的影响。&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;dc9e1900-7d44-417b-abbc-451d9175de7c&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;5373b880-fe5b-4cbd-bcab-b37016f5eb60&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-next-steps&#34;&gt;后续步骤&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;c02969d9-5961-4721-b5a2-81d0053bb65d&#34;,&#34;dropCap&#34;:false}&#34;&gt;这第一次迭代本地实验评估是针对使用 Golang 的服务，它服务于我们的大部分后端实验。下一步计划还包括 Java，这是 Uber 支持的另一种主要后端服务语言。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;0d0efe9b-3e73-412e-a887-909d71f478b5&#34;,&#34;dropCap&#34;:false}&#34;&gt;除此之外，有计划和正在进行的工作将复杂性从客户端转移到服务器端。复杂的客户端比服务器端的更改更难部署，并且使用两种或多种语言的复杂客户端会增加重复工作和出现分歧的风险。 &lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;d4ab51b2-7942-42b9-8f4e-7a03f8ebe585&#34;,&#34;dropCap&#34;:false}&#34;&gt;更具表现力语言将使我们能够将部分复杂性转移到服务器上。系统可以在服务器上解析此逻辑，并以更具表现力的客户端语言输出更简单的程序，以供 Golang 和 Java 执行，而不是客户端使用 Golang 和 Java 的 ExperimentPlugin 模式来解析客户端上的实验规则引擎。客户。这将导致更精简的客户端和更多的服务器端控制。详细信息将成为未来博客文章的主题。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;40e3d864-d6f9-439b-9674-e426a5957e05&#34;,&#34;不透明度&#34;:&#34;alpha-channel&#34;}&#34; class=&#34;wp-block-separator has-alpha-channel-opacity&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;h1 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;level&#34;:1,&#34;hash&#34;:&#34;b27d423e-1886-4b9b-8f67-c6f16111d984&#34;}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-conclusion&#34;&gt;结论&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;1d2f57e6-05d6-4aaa-8aa0-5ba9bb87fde7&#34;,&#34;dropCap&#34;:false}&#34;&gt;总而言之，我们用一项新功能替换了基于 RPC 的实验系统，该功能通过读取分发到所有主机代理的文件缓存来在本地评估实验规则引擎。为实验堆栈添加本地评估有助于改进以下方面：&lt;br&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;5f8d1b57-583d-42fd-9182-e7343956b8d4&#34;,&#34;ordered&#34;:false,&#34;values&#34;:&#34; “}”类=“wp-block-list”&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;延迟：&lt;/strong&gt;评估延迟下降了 100 倍（p99 10 毫秒到p99 100 µs)，释放新的集成机会&lt;br&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;可靠性&lt;/strong&gt;：我们消除了单个高流量上的单点故障微服务，用更可靠的分布式配置管道取代它&lt;br&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;开发人员生产力&lt;/strong&gt;开发人员不再需要担心批量预取参数的问题请求并缓存它们以避免 RPC 开销，从而降低代码的复杂性&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;308d3a47-41fc-4d1c-a863-3b4567650527&#34;,&#34;dropCap&#34;:false}&#34;&gt;我们学到了很多该计划的经验教训，对于其他尝试构建内部实验平台或对其现有平台进行大规模更新的人来说可能有用：&lt;br&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;ul data-wp-block-name=&#34;core/list&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;e9facbf2-f63d-4c3c-9712-ad717b80a989&#34;,&#34;ordered&#34;:false,&#34;values&#34;:&#34; “}”类=“wp-block-list”&gt;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;从集中化开始&lt;/strong&gt; – 创建一个新的实验平台，通过 RPC 返回评估结果建议调用集中式微服务，尤其是在快速新功能开发的初期&lt;br&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;成熟时去中心化 - &lt;/strong&gt;当平台成熟时，切换到去中心化库架构带来了许多好处（如上所列）&lt;br&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;库的安全开发&lt;/strong&gt; – 为了使（去中心化）库开发更安全，利用cli 中的轻量级功能标记等概念ent 库，具有强大的遥测和警报功能，并跟踪跨微服务的库版本使用情况非常重要&lt;br&gt;&lt;/li&gt;&#xA;&#xA;&#xA;&#xA;&lt;li data-wp-block-name=&#34;core/list-item&#34; data-wp-block=&#34;[]&#34;&gt;&lt;strong&gt;更快的评估意味着更快的日志发送&lt;/strong&gt; – 确保实验日志基础设施在转向客户端、低延迟评估架构时，能够处理增加的容量至关重要&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;hr data-wp-block-name=&#34;core/separator&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;62f1a658-4de0-451a-9c4c-50a74ed1ffb4&#34;,&#34;opacity&#34;:&#34;alpha-channel&#34;}&#34;类=“wp-block-separator有-alpha-channel-opacity”&gt;&#xA;&#xA;&#xA;&#xA;&lt;h2 data-wp-block-name=&#34;core/heading&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;7914a2a8-41f9-4444-a1f7-a7a8d10f02bf&#34;,&#34;level&#34;:2}&#34; class=&#34;wp -block-heading&#34; id=&#34;h-acknowledgments&#34;&gt;致谢&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;fontSize&#34;:&#34;小&#34;,&#34;hash&#34;:&#34;07b5e14d-8520-40d7-a7ff-a10331d953c9&#34;,&#34;dropCap&#34; :false}&#34; class=&#34;has-small-font-size&#34;&gt;如果没有实验团队中众多人员的贡献，这个项目就不可能实现， Flipr 团队和试点客户团队（骑手体验、广告投放平台和收入激励）帮助我们发布了 Go 服务的本地实验评估！&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;fontSize&#34;:&#34;小&#34;,&#34;hash&#34;:&#34;26f7463a-272c-45ad-9add-cbdaf679c43b&#34;,&#34;dropCap&#34; :false}&#34; class=&#34;has-small-font-size&#34;&gt;Apache®、Apache Kafka、Kafka 和相应的徽标是注册商标或商标美国和/或其他国家/地区的 Apache 软件基金会的成员。使用这些标记并不暗示 Apache 软件基金会的认可。&lt;br&gt;封面图片由 Iffany 通过 &lt;a href=&#34;https://pixabay.com/illustrations/alchemical-alchemy-magician-witch-8848871/&#34; 提供target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Pixabay&lt;/a&gt;。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p data-wp-block-name=&#34;core/paragraph&#34; data-wp-block=&#34;{&#34;hash&#34;:&#34;a24c4410-ca5c-4518-acaa-63d94cad84c6&#34;,&#34;dropCap&#34;:false}&#34;&gt;&lt;/p &gt;</description>
      <pubDate>Thu, 03 Oct 2024 05:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>